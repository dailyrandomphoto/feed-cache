<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>🎥Responsive Footer Section using Flexbox | HTML CSS🙌</title>
      <author>Robson Muniz</author>
      <pubDate>Mon, 20 Dec 2021 13:20:10 +0000</pubDate>
      <link>https://dev.to/robsonmuniz16/responsive-footer-section-using-flexbox-html-css-1m5p</link>
      <guid>https://dev.to/robsonmuniz16/responsive-footer-section-using-flexbox-html-css-1m5p</guid>
      <description>&lt;p&gt;In this video, I have shown you how you can create a responsive footer section using HTML and CSS only. &lt;/p&gt;




&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/vaaeeOczpPA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source Code:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Footer&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha512-Fo3rlrZj/k7ujTnHg4CGR2D7kSs0v4LLanw2qksYuRlEzO+tcaEPQogQ0KaoGN26/zrn20ImR1DfuLWnOo7aBA=="&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt; &lt;span class="na"&gt;referrerpolicy=&lt;/span&gt;&lt;span class="s"&gt;"no-referrer"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Your Content Here!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"main-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"left box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;About us&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Harum sunt saepe maxime consequatur, architecto cum quos quo ut id totam laborum veritatis quaerat esse atque, doloremque facere hic. Odit, eum.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"social"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-facebook-f"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-instagram"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-twitter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-youtube"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"center box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Adress&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"place"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-map-marker-alt"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;London, UK&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"phone"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-phone-alt"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;+089-5689754993&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-envelope"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;webdev@dev.com&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"right box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Contact US&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Email:&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"msg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Message:&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;cols=&lt;/span&gt;&lt;span class="s"&gt;"25"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt; &lt;span class="na"&gt;rows=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Send&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bottom"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;center&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"credit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          Created by &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;WebDev&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; |
        &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"far fa-copyright"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;2021 All Rights Reserved.&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/center&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&amp;amp;display=swap')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#d9d9d9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Montserrat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;bisque&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Just for parent demo size */&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;65vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;48px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;footer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#111&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.main-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.main-content&lt;/span&gt; &lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex-basis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.125&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/*  border: 2px solid red;*/&lt;/span&gt;
  &lt;span class="c"&gt;/*  Show them the file*/&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#1a1a1a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f12020&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.left&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="nc"&gt;.social&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.left&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="nc"&gt;.social&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.left&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="nc"&gt;.social&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#1a1a1a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.left&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="nc"&gt;.social&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f12020&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.center&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="nc"&gt;.fas&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.4375rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#1a1a1a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;45px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;45px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;45px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.3s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.center&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="nc"&gt;.fas&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f12020&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/*Now we grab the text*/&lt;/span&gt;

&lt;span class="nc"&gt;.center&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="nc"&gt;.text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.07rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.center&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="nc"&gt;.phone&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.right&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nc"&gt;.text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.07rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#656565&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.right&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nc"&gt;.msg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.right&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.right&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;textarea&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.07rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#151515&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#222222&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.right&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.right&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;textarea&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;outline-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3498db&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.right&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.right&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nc"&gt;.btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.right&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nc"&gt;.btn&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f12020&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.07rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.3s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.right&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nc"&gt;.btn&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.bottom&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.94rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#151515&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.bottom&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#656565&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.bottom&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f12020&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.bottom&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;underline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;900px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;footer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.main-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.main-content&lt;/span&gt; &lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
      <category>footer</category>
    </item>
    <item>
      <title>Angular Project Ideas For Beginners 2022</title>
      <author>ThemeSelection</author>
      <pubDate>Mon, 20 Dec 2021 12:50:07 +0000</pubDate>
      <link>https://dev.to/theme_selection/angular-project-ideas-for-beginners-2022-12mb</link>
      <guid>https://dev.to/theme_selection/angular-project-ideas-for-beginners-2022-12mb</guid>
      <description>&lt;p&gt;Looking for Angular Project Ideas for practice? Then here is the collection of the best &lt;strong&gt;&lt;a href="https://dev.to/theme_selection/angular-project-ideas-for-beginners-2022-12mb"&gt;Angular Project Ideas For Beginners&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Before we start the collection of Angular Beginners Project Ideas, let's know what Angular is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-angular"&gt;
  &lt;/a&gt;
  What Is Angular?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt;&lt;/strong&gt; is one of the elite JavaScript frameworks developed by &lt;a href="https://www.google.com/"&gt;Google&lt;/a&gt; and based on TypeScript, Angular is capable of delivering great web applications with high web page performances.&lt;/p&gt;

&lt;p&gt;Furthermore, it is fully extensible and works well with other libraries. Besides, every feature can be modified or replaced as per your need for development workflow and feature needs. With consistent updates, Angular has rooted its place in the list of best web development frameworks. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Angular offers following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Two-way Data binding&lt;/li&gt;
&lt;li&gt;Modular development structure&lt;/li&gt;
&lt;li&gt;Ease in Maintaining&lt;/li&gt;
&lt;li&gt;Dependency Injection&lt;/li&gt;
&lt;li&gt;TypeScript-based (superset of JavaScript)&lt;/li&gt;
&lt;li&gt;High performance for Single Page Hefty Apps&lt;/li&gt;
&lt;li&gt;Offers great flexibility&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before you go through the list you can check some of the best &lt;strong&gt;&lt;a href="https://themeselection.com/angular-admin-template/"&gt;Angular admin template free download&lt;/a&gt;&lt;/strong&gt;. You may also like the collection of &lt;a href="https://themeselection.com/angular-ui-component-libraries/"&gt;&lt;strong&gt;Angular UI Component Libraries&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's check the Angular Project Ideas For Beginners..!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dtDeIfOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmeidayo6wmo3rjenv6d.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dtDeIfOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmeidayo6wmo3rjenv6d.gif" alt="Let's begin" width="498" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angular-projects"&gt;
  &lt;/a&gt;
  Angular Projects
&lt;/h2&gt;

&lt;p&gt;Well, the software industry has a high demand for professionals Angular Developers. It is one of the most widely used JavaScript frameworks. Popular brands like &lt;a href="https://www.paypal.com/in/home"&gt;PayPal&lt;/a&gt;, &lt;a href="https://www.upwork.com/"&gt;Upwork&lt;/a&gt;, &lt;a href="https://www.netflix.com/in/"&gt;Netflix&lt;/a&gt; also use Angular in their frontend development.&lt;/p&gt;

&lt;p&gt;Angular projects offer a great way to build single-page client applications by implementing HTML and Typescript functionalities. So, if you are a beginner, the best thing you can do is work on some real-time  &lt;strong&gt;angular projects.&lt;/strong&gt; An activity-based learning approach works best for understanding the architecture of web frameworks. So, let us explore what the Angular platform is all about.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why to practice Angular projects?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, when it comes to software development careers, it is necessary for beginner developers to practice on their own projects. Besides, developing real-world angular project is the best way to sharpen your skills and execute your theoretical knowledge into practical experience. The more you practice and experiment with different angular projects, the more knowledge you will gain.&lt;/p&gt;

&lt;p&gt;As you start working on angular projects, you will be able to analyze your strengths and weaknesses. Also, you will know the exposure that can be immensely helpful to boost your career. In this collection, you will find  some awesome angular projects ideas for beginners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps-to-constructing-apps-with-angular"&gt;
  &lt;/a&gt;
  Steps to constructing apps with Angular:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The first step - writing code using Typescript, HTML, CSS, etc.&lt;/li&gt;
&lt;li&gt;Second step: Compile Typescript code to JavaScript.&lt;/li&gt;
&lt;li&gt;Finally, Hosting the application on a web server.&lt;/li&gt;
&lt;li&gt;An angular view combines a component and template.&lt;/li&gt;
&lt;li&gt;Navigation between different views is defined by services (i.e., router provided by the dependency injector).&lt;/li&gt;
&lt;li&gt;Automatic synchronization or data-binding occurs between the model and view components in the model, offering a reactive user experience.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, the building blocks of the Angular workspace are fit for designing impressive  Single Page Applications (SPAs).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angular-prerequisites"&gt;
  &lt;/a&gt;
  Angular Prerequisites
&lt;/h2&gt;

&lt;p&gt;There are three main prerequisites that you'll need during developing your Angular Project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NodeJS&lt;/li&gt;
&lt;li&gt;Angular CLI&lt;/li&gt;
&lt;li&gt;Text Editors&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#angular-project-ideas-for-beginners"&gt;
  &lt;/a&gt;
  Angular Project Ideas For Beginners:
&lt;/h2&gt;

&lt;p&gt;These Angular projects will get you going with all the practicalities you need to succeed in your career. This list of angular project ideas for students  is suited for beginners, and those just starting out in general. These  &lt;strong&gt;angular projects for beginners&lt;/strong&gt;  will get you going with all the practicalities you need to succeed in your career.&lt;/p&gt;

&lt;p&gt;While working on Angular projects you can use the &lt;a href="https://themeselection.com/go/download-vuexy-vuejs/"&gt;Vuexy - Angular Admin Dashboard Template&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://themeselection.com/go/download-vuexy-vuejs/"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X2dFVlPj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvfiwnnxyx33s3acen7u.jpg" alt="Vuexy VueJS Admin Template" width="880" height="563"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vuexy – Angular Admin Dashboard Template&lt;/strong&gt; is the most developer-friendly &amp;amp; highly customizable Admin Dashboard Template. It is based on Angular CLI + NgBootstrap. If you’re a developer looking for an admin dashboard that is developer-friendly, rich with features, and highly customizable look no further than Vuexy. &lt;/p&gt;

&lt;p&gt;Besides, it has followed the highest industry standards to bring you the very best admin template that is not only fast and easy to use but highly scalable. Offering ultimate convenience and flexibility, you’ll be able to build whatever application you want with very little hassle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pixinvent.com/demo/vuexy-angular-admin-dashboard-template/landing/"&gt;Demo&lt;/a&gt; &lt;a href="(https://themeselection.com/go/download-vuexy-vuejs/)"&gt;Download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, Let's start the collection.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#angular-hello-world-project"&gt;
  &lt;/a&gt;
  Angular Hello World Project
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aAsnGER3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lbjdyf07iy41a8xp7mht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aAsnGER3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lbjdyf07iy41a8xp7mht.png" alt="Angular Hello World Project" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;if you are just starting with Angular and Typescript, then "Hello World" project can be a good start. This project offers a tremendous opportunity to boost your skills. It contains a single module and component, creating an open environment for experimentation. Here you will use package.json and npm to load Angular modules.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tutorials:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.simplilearn.com/tutorials/angular-tutorial/angular-hello-world"&gt;Angular Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.netjstech.com/2020/03/angular-first-app-hello-world-example.html"&gt;Angular First App Hello World Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=oBuTWzuZkA4/"&gt;Angular 12 tutorial Hello World&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/DanWahlin/Angular-HelloWorld"&gt;Angular Hello World&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#to-do-app"&gt;
  &lt;/a&gt;
  To Do App
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7MoQ233n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05i3tizpm38l9mgtsqg1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7MoQ233n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05i3tizpm38l9mgtsqg1.jpg" alt="To do app" width="880" height="586"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The to-do app is one of the most common beginner apps. You can do experiments while developing a to-do app. Normally, we are either able to complete a preset number of tasks on time or fail miserably. Although the success rate depends on many factors, there is one common thing that is mostly seen in several use cases. That would be the use of to-do list apps.&lt;/p&gt;

&lt;p&gt;You can offer the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Users can edit a to-do&lt;/li&gt;
&lt;li&gt;A list with all the completed to-do’s&lt;/li&gt;
&lt;li&gt;Users can see a list with all the active to-do’s&lt;/li&gt;
&lt;li&gt;User can see the date when he created the to-do&lt;/li&gt;
&lt;li&gt;When closing the browser window the to-do’s will be stored and when the User returns, the data will be retrieved&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Tutorials&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=gvWxMQ_Zios"&gt;To Do App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_todo_list_beginning"&gt;Angular todo_list_beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.teclogiq.com/blog/angular-todo-application/"&gt;angular-todo-application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#weather-app"&gt;
  &lt;/a&gt;
  Weather App
&lt;/h2&gt;

&lt;p&gt;This is one of the best Angular project ideas for beginners. It is a straightforward project. You can code it in a matter of a few hours! In this project, you have to build a weather app that can display a weather forecast. For this app, you can leverage fake, hard-coded data until you get all the features correct.&lt;/p&gt;

&lt;p&gt;A weather app is a good start for any beginners as it deals not only with data but also focuses on design as well. You can start with basic features such as temperature, sunrise/sunset time, climate map, etc.&lt;/p&gt;

&lt;p&gt;Besides, you can try new features once you are done with the basics. For example, you can show data visualization with animation, rain prediction, wind prediction, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tutorials:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zoaibkhan.com/blog/rxjs-in-angular-creating-a-weather-app/"&gt;RxJs in angular creating a weather app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/duluca/local-weather-app"&gt;https://github.com/duluca/local-weather-app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rchristian/angular-weather-app-v1"&gt;https://github.com/rchristian/angular-weather-app-v1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#angular-calculator"&gt;
  &lt;/a&gt;
  Angular Calculator
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ivWS7qJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vopgbom3l5901o9ycily.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ivWS7qJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vopgbom3l5901o9ycily.png" alt="Angular Calculator" width="466" height="562"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can simply start with a Angular-based calculator. Not the complex one but a simple calculator. Calculators are not only one of the most useful tools available, but they are also a great way to understand UI and event processing in an application. Here, you will create a calculator that supports basic arithmetic calculations on integers.&lt;/p&gt;

&lt;p&gt;The styling is up to you so use your imagination and get creative! You might also find it worth your time to experiment with the calculator app on your mobile device to better understand basic functionality and edge cases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tutorials:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codingdiksha.com/angular-calculator-application-source-code/"&gt;Angular Calculator App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tektutorialshub.com/angular/angular-calculator-application/"&gt;Calculator in Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.techiediaries.com/angular-8-tutorial-build-first-angular-calculator-app/"&gt;Angular 8 calculator app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/LewisBriffa/pen/RRgaqm"&gt;https://codepen.io/LewisBriffa/pen/RRgaqm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/techiediaries/angular-calculator-app"&gt;https://github.com/techiediaries/angular-calculator-app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codezup.com/create-build-angular-calculator-application/"&gt;https://codezup.com/create-build-angular-calculator-application/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#place-locator"&gt;
  &lt;/a&gt;
  Place Locator
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dv9Qqvlc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mp966hwv75eg6cdqrawy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dv9Qqvlc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mp966hwv75eg6cdqrawy.jpg" alt="Place locator" width="612" height="423"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Place Locator project aims at finding the exact location of a person  by identifying its geological coordinates. Those who are recognized as frequent travelers and geologists may now traverse to unknown places without any fear of getting lost. &lt;/p&gt;

&lt;p&gt;Well, working of this project is relatable to that of Google Maps. You can develop place locator app that lets you find hotels, shops, stadiums, petrol stations, and much more. This app should let your audience access every powerful component of this project consisting of preconfigured APIs, sophisticated GIS mapping techniques backed by customized data sources fulfilling the users’ requirements well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simple-currency-converter"&gt;
  &lt;/a&gt;
  Simple Currency Converter
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cZB4-Qf1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijrft9c2lpttcdleymk6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cZB4-Qf1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijrft9c2lpttcdleymk6.png" alt="Currency Converter" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simple Currency Converter reciprocates exchange rates of different currencies. These currencies can be Dollars, Rupees, Pound, and so on. Aim of this app is to plan the travel expenses, calculate education expenses or to calculate financial markets. In addition, you can make this interesting by adding features such as adding multiple countries, and later, you can check the historical data and the futuristic fluctuations in fixed, pegged float, and floating exchange rates. &lt;/p&gt;

&lt;p&gt;You can also include a feature such as auto select. Here, Based on your current location, the currency convertor will select the currency by fetching your current location. Also, you can give some eye catchy look to the app facilitated by beautiful designs and price configurations. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tutorials&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=iOXgFZHqpe4"&gt;Currency converter with SVG chart and Angular 10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=MG_6FdH3gXs"&gt;Angular 9 Tutorial - CurrencyPipe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackblitz.com/edit/angular-example-simple-currency-converter"&gt;https://stackblitz.com/edit/angular-example-simple-currency-converter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vgupta1192/currency-converter"&gt;https://github.com/vgupta1192/currency-converter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#angular-bare-bone"&gt;
  &lt;/a&gt;
  Angular Bare Bone
&lt;/h3&gt;

&lt;p&gt;Angular Bare Bones project displays Angular routing. Such routing supports a number of routing components like RouterOutlet, RouterLink, RouterModule, and other imported routes. Also, the easy-to-serve understandable code has made this project a preferred alternative for AngularJS beginners. In this project, you may expect a single feature component i.e. Barebones injected with data dependency and flexible routing between the homepage and the feature component. &lt;/p&gt;

&lt;p&gt;For running this project, you first install Node.js (a platform for building scalable network applications efficiently). Then, you would be installing the Angular CLI (via npm install -g @angular/cli). At last, what you will be doing is running npm install (for successfully installing app dependencies) and then, running ng serve -o for launching the Bare Bones application based on the event-driven AngularJS model.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/DanWahlin/Angular-BareBones"&gt;https://github.com/DanWahlin/Angular-BareBones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mraible/ng-demo"&gt;https://github.com/mraible/ng-demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#url-shortener"&gt;
  &lt;/a&gt;
  URL Shortener
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DsGxKlyC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2v0n79xroaipl1da4vr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DsGxKlyC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2v0n79xroaipl1da4vr.jpg" alt="url shortner" width="777" height="437"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is one of the trending angular project for beginners. In this application, the main feature will be the input for the link you’d like to shorten and the result’s output space. You can check the &lt;a href="https://polrproject.org/"&gt;Polr&lt;/a&gt; for example. It is an open-source web application written in PHP and powered by Lumen. It uses MySQL as the primary database and provides a robust interface to manage your links. You can host it on your domain to shorten URLs, brand them, and provide an overall modern theme.&lt;/p&gt;

&lt;p&gt;Also, you can create a function to copy the shortened link by clicking the icon. The process should happen with the external API call. You can build this angular project more eye-catching than just plain data displayed from the API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codesandbox.io/examples/package/angular-shorturl"&gt;https://codesandbox.io/examples/package/angular-shorturl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/CryceTruly/ng-url-shortener"&gt;https://github.com/CryceTruly/ng-url-shortener&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#notepad-application"&gt;
  &lt;/a&gt;
  Notepad Application
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iVE-4iiD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neoz3s6rzfzva8kwarih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iVE-4iiD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neoz3s6rzfzva8kwarih.png" alt="notepad app" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notepad Application is no doubt a wonderful choice for the Angular project for beginners. It is a digital pocket app through which you can  modify, create, modify, or add new notes. Purpose of this app is to organize (or reorder if required) the notes on the basis of the date and time they were modified.  To create such app, you can use a smart combination of technologies like Angular CLI, Bootstrap, and NodeJS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tutorials:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dlXEeOk-MrI&amp;amp;t=14s"&gt;Build a Notes App from Scratch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/zhoodar/notepad-app"&gt;https://github.com/zhoodar/notepad-app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#electronic-musical-instrument"&gt;
  &lt;/a&gt;
  Electronic musical instrument
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HNo7cnud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9hfrgm4qy4x1652pyxu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HNo7cnud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9hfrgm4qy4x1652pyxu.png" alt="Electronic musical instrument" width="568" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With an Electronic musical instrument project, you can possibly  synthesize filtered sounds through a variety of techniques. These techniques can be consonance, rhythm, repetition, alliteration, and many more. It would be good to  use Web Audio API that  synchronizes well with browsers like Safari, Google Chrome, and Opera. Such an innovative project idea will surely boost up your confidence.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angular-projects-with-source-code-github"&gt;
  &lt;/a&gt;
  Angular Projects With Source Code GitHub
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Soundnode/soundnode-app"&gt;Soundnode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ganatan/angular-starter"&gt;Angular Starter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ganatan/angular12-app"&gt;Angular 12 / Bootstrap 5 &amp;amp; CRUD REST API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gothinkster/angular-realworld-example-app"&gt;Angular real-world example app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tomastrajan/angular-ngrx-material-starter"&gt;Angular NgRx material starter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=G0bBLvWXBvc"&gt;Angular for Beginners - Let's build a Tic-Tac-Toe PWA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bezkoder/angular-10-crud-app"&gt;Angular 10 crud app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/trungk18/jira-clone-angular"&gt;Jira clone angular&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;So, here in this collection of &lt;strong&gt;&lt;a href="https://dev.to/theme_selection/angular-project-ideas-for-beginners-2022-12mb"&gt;Angular Project Ideas For Beginners&lt;/a&gt;&lt;/strong&gt; we have covered some of the Angular projects for practice as a beginner. Besides knowing the framework inside-out, you should also be trained in TypeScript, npm, HTML, CSS, RxJs, and so on.&lt;/p&gt;

&lt;p&gt;Practice on these angular projects to sharpen your coding skills with the above Angular project ideas and develop impressive applications with confidence! If you wish to improve your angular skills, you need to get your hands on these  &lt;strong&gt;Angular projects.&lt;/strong&gt; Now go ahead and put to test all the knowledge that you’ve gathered through our angular project ideas guide to build your very own angular projects!&lt;/p&gt;

</description>
      <category>angular</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to add chat into a VUE.JS app with TalkJS chat API</title>
      <author>Omer Farooq</author>
      <pubDate>Mon, 20 Dec 2021 12:48:33 +0000</pubDate>
      <link>https://dev.to/talkjs/how-to-add-chat-into-a-vuejs-app-with-talkjs-chat-api-4290</link>
      <guid>https://dev.to/talkjs/how-to-add-chat-into-a-vuejs-app-with-talkjs-chat-api-4290</guid>
      <description>&lt;p&gt;How to add chat into a VUE.JS app with TalkJS chat API&lt;br&gt;
Adding a live chat feature to a web app is often complex. However, with recent developments in the web dev community and the inception of TalkJS, this formidable task has become a breeze. TalkJS is a turnkey solution for adding live chat to any web app. It provides an ever-customizable user interface, flexible notifications, and a powerful chat API out of the box. In this tutorial, we will look at how we can add a chat to an existing vue.js application in a matter of minutes.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#application-overview"&gt;
  &lt;/a&gt;
  Application Overview
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--djHlRwDY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ozfarooq/TalkJS/main/Vue1.jpg%3Fraw%3Dtrue%2522%2522" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--djHlRwDY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ozfarooq/TalkJS/main/Vue1.jpg%3Fraw%3Dtrue%2522%2522" alt="VueJS Chat 1" width="578" height="425"&gt;&lt;/a&gt;&lt;br&gt;
A Great University runs our fictitious application. It allows their students to take live lectures, but it lacks the ability to chat with professors and amongst themselves in real-time. Currently, the web app consists of a landing page where the student’s log in with their university credentials (Name, Email and Password). Once they log in, they are taken to the live lecture. For simplicity’s sake, we have assumed that there’s only one live lecture, which in our case is just a YouTube video, and that all the students are already authenticated. The currentUser object we will use throughout the tutorial will contain data that we’ve received from the backend after the login and auth process. Our focus is on integrating a chat into an existing Vue app and not creating a whole app from scratch.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-talkjs-to-our-application"&gt;
  &lt;/a&gt;
  Adding TalkJS to our application
&lt;/h2&gt;

&lt;p&gt;We begin by adding TalkJS to our application. This can be done in one of two ways.&lt;br&gt;
If you use the Node Package Manager run the following command, it will save it as a dependency in the packages.json:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&amp;gt; npm install talkjs –save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you use Yarn Package Manager, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&amp;gt; yarn add talkjs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that you have TalkJS installed, you need to signup on their website and register your application. This is a very simple process, at the end of which you will receive your APPID. Keep hold of this, it’s very important, and we will use this later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-chatbox-vue-component"&gt;
  &lt;/a&gt;
  Creating the chatbox Vue Component
&lt;/h2&gt;

&lt;p&gt;Every Vue component is housed in its own .vue file. In this case, here are the steps to be followed&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We will create a component called MessageBox in MessageBox.vue.&lt;/li&gt;
&lt;li&gt;Under the template, we create a div, as shown in the image below.&lt;/li&gt;
&lt;li&gt;The div has a ref attribute set to “talkjs-container” we will use this to mount the actual chat box in this div later. &lt;/li&gt;
&lt;li&gt;The  tag is only used as a placeholder until the chatbox loads. We have added some styling, but that is left to the reader’s discretion.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
    &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;col-xs-4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;talkjs-container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;talkjs-container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;width: 90%; margin-top: 10px; height: 900px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt; &lt;span class="nx"&gt;chat&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/i&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Below is a template that is added through a script tag. This will contain all the setup and logic for the TalkJS chatbox. Here the first thing we need to do is import TalkJS. To do that, add the following at the start of the script section:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Talk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;talkjs&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Next, we export this component and name it MessageBox. This component will accept one prop of type object that contains the user’s information. &lt;/li&gt;
&lt;li&gt;It has two variables that it needs to maintain, so we add conversation and chatbox to the data function.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Talk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;talkjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MessageBox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;conversation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;chatbox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
javascript&lt;br&gt;
Our chatbox will render once our MessageBox component has mounted, and as such, all chatbox logic will have to run inside the mounted lifecycle function that Vue provides. The mounted function will be defined just below our props object, and it will look something like this.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-the-users"&gt;
  &lt;/a&gt;
  Creating the Users
&lt;/h2&gt;

&lt;p&gt;The Talk object we imported from TalkJS is promise-based. Hence we call the ready function and then add our logic as a call back to the .then() function. Here we create our use through Talk.User() function. It accepts a JSONobject with the ID, Name, Email, photo URL of our user, and a role we set to default. For the sake of demonstration, we have also added another dummy user Sebastian in the other variable. In your application, you would add your own users using their data from your database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// creating our user&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;photoUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://randomuser.me/api/portraits/men/83.jpg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;

      &lt;span class="c1"&gt;// creating other users&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;other&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;654321&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sebastian&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sebastian@example.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;photoUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://randomuser.me/api/portraits/men/69.jpg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;welcomeMessage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hey, how can I help?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#establishing-a-talkjs-session"&gt;
  &lt;/a&gt;
  Establishing a TalkJS Session
&lt;/h2&gt;

&lt;p&gt;There can’t be a chat if there’s no chat session, hence we establish a talk session and add it to our browser’s window’s instance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="c1"&gt;// establishing a new session if one doesn't already exists&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;talkSession&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;talkSession&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;appId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YOU_APP_ID&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;me&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The APPID you found on your dashboard will be used here to establish a connection if one doesn’t already exist. This connection will let us join chats and start conversations. You also specify the user trying to establish the connection by passing the current user as a theme object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-new-or-joining-an-existing-conversation"&gt;
  &lt;/a&gt;
  Creating a New or Joining an Existing Conversation
&lt;/h2&gt;

&lt;p&gt;Next, we join or start an existing conversation. Each conversation on TalkJS has a unique id. These ids can be stored in your database and used when joining group conversations or a conversation with someone. For our demonstration we will hard code it to 1001, all the students joining this lecture will be added to the conversation with the ID 1001.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// connecting to a new or already existing conversation&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;conversation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;talkSession&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOrCreateConversation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1001&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;conversation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttributes&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Computational Theory 101&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

      &lt;span class="c1"&gt;// adding participants&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;conversation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setParticipant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;conversation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setParticipant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;other&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The getOrCreateConversation() function will fetch the conversation if it already exists or create a new instance. Note that we are initializing the conversation variable we defined earlier, this is so we can access the conversation object later if necessary. Once the conversation has been initialized, we add its participants, and naturally, it is going to be the two users, me and others we created beforehand.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-an-inbox-and-mounting-it"&gt;
  &lt;/a&gt;
  Creating an Inbox and Mounting it
&lt;/h2&gt;

&lt;p&gt;Like a usual conversation, we will initializethe inbox variable we defined above using the createInbox function of our talkSession. We will pass our conversation as the focus of this inbox by setting selected to our conversation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// creating the actual inbox/chatbox&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inbox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;talkSession&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createInbox&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;conversation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last but not the least, we will mount our inbox to the div we added a ref to in the template section. But before this, we need to ensure that the ref we are going to point to has been initialized. Which is why we will use Vue’s $nextTick() function. It will ensure that the following code runs only after the required div, and ref are rendered and are ready to be addressed. In order to mount the inbox, we just call the mount function on the inbox object and pass this ref of our div, which we set to “talkjs-container”.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-result"&gt;
  &lt;/a&gt;
  The Result
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtSAgkBN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ozfarooq/TalkJS/main/Vue2.jpg%3Fraw%3Dtrue%2522%2522" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtSAgkBN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ozfarooq/TalkJS/main/Vue2.jpg%3Fraw%3Dtrue%2522%2522" alt="VueJS Chat 2" width="292" height="395"&gt;&lt;/a&gt;&lt;br&gt;
With this we’ve successfully added a chat box to our application. This group chat supports up to 20 users in the basic plan and up to 40 in the growth plan; however, more refinements will drastically increase these limits, such as the rolling enterprise plan.  The chatbox would look something like this. This is the default design, and you can change it endlessly from the TalkJS dashboard.&lt;/p&gt;

&lt;p&gt;The below gif demonstrates the functional design of the Chatbox.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Umw_1DE1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/ozfarooq/TalkJS/main/Vue3.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Umw_1DE1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/ozfarooq/TalkJS/main/Vue3.gif%3Fraw%3Dtrue" alt="VueJS Chat Gif" width="600" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Change the Opacity of the SnackBar In Flutter?</title>
      <author>Pankaj Das</author>
      <pubDate>Mon, 20 Dec 2021 12:44:06 +0000</pubDate>
      <link>https://dev.to/pankajdas0909/how-to-change-the-opacity-of-the-snackbar-in-flutter-225l</link>
      <guid>https://dev.to/pankajdas0909/how-to-change-the-opacity-of-the-snackbar-in-flutter-225l</guid>
      <description>&lt;p&gt;&lt;a href="https://flutteragency.com/snackbar-widget/"&gt;SnackBar Widge&lt;/a&gt;t is a Flutter widget to show a lightweight simple message at the bottom of the device screen. It can also contain an optional action. So in this article, We will go through how to change the Opacity of the Snackbar In Flutter?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-opacity-widgets"&gt;
  &lt;/a&gt;
  What is Opacity Widgets?
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://flutteragency.com/opacity-widget/"&gt;Opacity widgets&lt;/a&gt; are generally used to make their child partially transparent. So how its work? This widget colors the class into intermedia buffer, and the scene is partially transparent with the merger of child back. The class needs to intermediate buffer the coloring child; therefore, it consumes a little more time. The syntax for the constructor is as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Syntax:
Opacity({Key key,
@required double opacity, 
bool alwaysIncludeSemantics: false, 
Widget child})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#change-the-opacity-of-the-snackbar-in-flutter"&gt;
  &lt;/a&gt;
  Change the Opacity of the Snackbar In Flutter?
&lt;/h3&gt;

&lt;p&gt;To change the &lt;strong&gt;Opacity Widget&lt;/strong&gt; of the &lt;strong&gt;SnackBar Widget&lt;/strong&gt; in Flutter, users can try using the color property of the snack bar like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;backgroundColor: Colors.black.withOpacity(0.5)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can adjust the opacity of your backgroundColor with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;color.withAlpha(..)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;color.withOpacity(..)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using a hexadecimal integer 0x33ffffff (the first pair of digits after the x represents the alpha value),
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;creating a Color using Color.fromARGB(...)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find information about this on this documentation page about the Color class.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is easily adjustable using the &lt;strong&gt;Opacity Widget&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In your Snackbar just surround your actual content with an Opacity Widget:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const MyHomePage(title: 'Flutter Agency - Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key, required this.title}) : super(key: key);
  final String title;

  @override
  State createState() =&amp;gt; _MyHomePageState();
}

class _MyHomePageState extends State {
  int _counter = 0;

  void _incrementCounter() {
    setState(
      () {
        _counter++;
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('SnakeBar Output= $_counter'),
            backgroundColor: Colors.black.withOpacity(0.5),
            duration: const Duration(seconds: 1),
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Text(
              'You have pushed the button this many times:',
            ),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.headline4,
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;***Output&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yUPlsyvG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rnvvtj684g6tcode4tf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUPlsyvG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rnvvtj684g6tcode4tf.png" alt="SnackBar Widget in Flutter" width="880" height="677"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;In this article, We have been through How to Change the Opacity of the SnackBar In Flutter?&lt;/p&gt;

&lt;p&gt;Keep &lt;strong&gt;Learning&lt;/strong&gt; !!! Keep &lt;strong&gt;Fluttering&lt;/strong&gt; !!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flutteragency.com/"&gt;&lt;strong&gt;Flutter Agency&lt;/strong&gt;&lt;/a&gt; is our portal Platform dedicated to Flutter Technology and Flutter Developers. The portal is full of cool resources from Flutter like Flutter Widget Guide, Flutter Projects, Code libs and etc.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>widget</category>
      <category>opacity</category>
      <category>snackbar</category>
    </item>
    <item>
      <title>How to Improve Your Search Rank for Google </title>
      <author>Subramanyam Rekhandar</author>
      <pubDate>Mon, 20 Dec 2021 12:38:10 +0000</pubDate>
      <link>https://dev.to/subburekhandar/how-to-improve-your-search-rank-for-google-kp1</link>
      <guid>https://dev.to/subburekhandar/how-to-improve-your-search-rank-for-google-kp1</guid>
      <description>&lt;h5&gt;
  &lt;a href="#money-alone-cant-buy-google-rank-but-with-a-little-time-and-strategy-you-can-improve-your-position-on-the-search-engine-results-page-serp-without-spending-a-dime-here-are-10-free-ways-to-improve-your-google-search-rank"&gt;
  &lt;/a&gt;
  Money alone can’t buy Google rank, but with a little time and strategy you can improve your position on the search engine results page (SERP) without spending a dime. Here are 10 free ways to improve your Google search rank.
&lt;/h5&gt;

&lt;h2&gt;
  &lt;a href="#1improve-your-websites-user-experience"&gt;
  &lt;/a&gt;
  1.Improve your website’s user experience:
&lt;/h2&gt;

&lt;p&gt;According to a study on ranking factors by SEMrush, the top four ranking factors are website visits, time on site, pages per session, and bounce rate. All four of those are directly related to the experience your website is providing your users, which Google recently emphasized with its Page Experience update. It’s pretty simple: If your website is easy and enjoyable to use and offers valuable information, you’ll get more visitors, who will stay longer on your site and visit more pages, and that will improve your search rank.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2write-great-content-optimized-for-seo"&gt;
  &lt;/a&gt;
  2.Write great content optimized for SEO
&lt;/h2&gt;

&lt;p&gt;Having high-quality content on your website is one of the best ways to increase traffic and improve your search rank. In fact, Google itself said in a blog post on page experience that having great, relevant content on a page is more important for ranking than page experience. Make sure your content is mistake-free, keyword-rich, mobile-optimized, written to address the specific needs of your target audience, and includes valuable links to additional internal and external content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3get-more-backlinks"&gt;
  &lt;/a&gt;
  3.Get more backlinks
&lt;/h2&gt;

&lt;p&gt;Backlinks—links from other sites to yours—are one of the most heavily weighted Google ranking factors. Incoming links to your website content from high-authority domains show your site’s authority, bring in traffic, and improve your search ranking.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4improve-your-page-speed"&gt;
  &lt;/a&gt;
  4.Improve your page speed
&lt;/h2&gt;

&lt;p&gt;Load time is one of the key measurements in Google's recent Core Web Vitals upgrade, so it’s a good idea to make sure your site is as fast as possible—both to improve your search rank and provide a good user experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5fix-broken-links"&gt;
  &lt;/a&gt;
  5.Fix broken links
&lt;/h2&gt;

&lt;p&gt;Having quality links on your website is one of the best ways to boost traffic and establish the authority of your site, but links that bring up a 404 error hurt both your user experience and your search rank. Use a tool like BrokenLinkCheck or Dead Link Checker to find any broken links.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6optimize-your-images"&gt;
  &lt;/a&gt;
  6.Optimize your images
&lt;/h2&gt;

&lt;p&gt;Optimizing your images is crucial to boosting the speed of your site and making it easier for Google to identify the images on your web pages. Make sure all your website images are compressed, have descriptive filenames, and include alt text.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7use-h1-and-h2-header-tags"&gt;
  &lt;/a&gt;
  7.Use H1 and H2 header tags
&lt;/h2&gt;

&lt;p&gt;Not only do headers make your content more readable and easier to understand for humans and search engines alike, there is a strong correlation between Google search rank and the use of header tags in the body of your content. Header tags are also a great way to show the structure of your content and emphasize your key points.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8optimize-for-local-search"&gt;
  &lt;/a&gt;
  8.Optimize for local search
&lt;/h2&gt;

&lt;p&gt;More and more people are using their smartphones to search for businesses “near me.” To improve your chances of having your business show up in relevant local searches, make sure you claim your Google My Business listing, provide relevant content in Google Posts, get your business listed in local directories, and improve your online reputation with great online reviews.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9optimize-for-voice-search"&gt;
  &lt;/a&gt;
  9.Optimize for voice search
&lt;/h2&gt;

&lt;p&gt;According to a study by Perficient, voice search is no longer growing, but more than 60% of people surveyed still said voice search is their preferred method of asking questions on their smartphone. Make sure those voice searches find your business by incorporating likely voice search phrases into your website content—be sure to use full sentences phrased in a natural conversational style rather than single keywords.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10aim-for-position-zero"&gt;
  &lt;/a&gt;
  10.Aim for “position zero"
&lt;/h2&gt;

&lt;p&gt;When a user asks a question in Google Search, Google sometimes pulls content from a relevant website and displays it in a special featured snippet or answer box above the #1 search result. Getting content into a featured snippet is a great way to increase traffic (snippets include a link to the page where the content came from), as well as boost the credibility and visibility of your brand. To increase your chances of having your content selected as a featured snippet by Google, think of likely searches related to your business and pepper your site with clear, authoritative answers.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>35 Online Platforms to Grow Software Developer Skills</title>
      <author>Vectorly</author>
      <pubDate>Mon, 20 Dec 2021 12:22:19 +0000</pubDate>
      <link>https://dev.to/vectorly/35-online-platforms-to-grow-software-developer-skills-1ij6</link>
      <guid>https://dev.to/vectorly/35-online-platforms-to-grow-software-developer-skills-1ij6</guid>
      <description>&lt;p&gt;The story was originally posted on &lt;a href="https://www.vectorly.team/blog"&gt;Vectorly's blog&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Vectorly’s knowledge base with online courses and educational content for software engineers, as well as other tech roles such as designers, product managers, marketers, and others, will save your time for research and help develop up-to-date skills.&lt;/p&gt;

&lt;p&gt;In software engineering, new languages, tools, technologies appear and become popular every day. You have no choice but to stay up-to-date on main trends and constantly develop and expand your skillset in order to grow the market value and remain competitive.&lt;/p&gt;

&lt;p&gt;That's why developers and engineering managers should cultivate a continuous learning mindset: constantly develop new skills, as well as integrate learning into the workflow.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#udacity"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.udacity.com/"&gt;&lt;strong&gt;Udacity&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Online courses to build and develop tech skills. The platform offers both paid and 200+ courses that are completely free (yet Udacity doesn’t offer a certificate for free programs).&lt;/p&gt;

&lt;p&gt;Programs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Artificial Intelligence&lt;/li&gt;
&lt;li&gt;Business&lt;/li&gt;
&lt;li&gt;Cloud Computing&lt;/li&gt;
&lt;li&gt;Cybersecurity&lt;/li&gt;
&lt;li&gt;Programming &amp;amp; development&lt;/li&gt;
&lt;li&gt;Product management, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Languages: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#edx"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.edx.org/"&gt;&lt;strong&gt;EdX&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;2000+ online courses from 140 leading institutions worldwide. Students get certificates. Free courses are also available.&lt;/p&gt;

&lt;p&gt;Programs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Business&lt;/li&gt;
&lt;li&gt;Computer Science&lt;/li&gt;
&lt;li&gt;Data Science&lt;/li&gt;
&lt;li&gt;Communication, and more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Languages: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#frontend-masters"&gt;
  &lt;/a&gt;
  &lt;a href="https://frontendmasters.com/"&gt;&lt;strong&gt;Frontend masters&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Video courses from leading engineers to develop front-end skills. Paid membership (special pricing for teams). Free content is also available.&lt;/p&gt;

&lt;p&gt;Languages: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#linkedin-learning"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.linkedin.com/learning"&gt;&lt;strong&gt;LinkedIn Learning&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Online courses taught by industry experts in software, creative, and business skills.&lt;/p&gt;

&lt;p&gt;Programs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Business&lt;/li&gt;
&lt;li&gt;Creative&lt;/li&gt;
&lt;li&gt;Technology&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Languages: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#udemy"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.udemy.com/"&gt;&lt;strong&gt;Udemy&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Online learning and teaching marketplace with over 183000 courses. Programming, marketing, data science, and more. Free content is also available.&lt;/p&gt;

&lt;p&gt;Programs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Development&lt;/li&gt;
&lt;li&gt;Business&lt;/li&gt;
&lt;li&gt;IT &amp;amp; Software&lt;/li&gt;
&lt;li&gt;Design&lt;/li&gt;
&lt;li&gt;Marketing, and more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Languages: English, French, Spanish, Russian, Spanish&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pluralsight"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.pluralsight.com/"&gt;&lt;strong&gt;Pluralsight&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Expert-authored video courses and content from beginner to advanced level. The platform also offers free skills assessment.&lt;/p&gt;

&lt;p&gt;Programs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Architecture &amp;amp; construction&lt;/li&gt;
&lt;li&gt;Business&lt;/li&gt;
&lt;li&gt;Data&lt;/li&gt;
&lt;li&gt;IT ops&lt;/li&gt;
&lt;li&gt;Manufacturing &amp;amp; design&lt;/li&gt;
&lt;li&gt;Software Development&lt;/li&gt;
&lt;li&gt;Cyber Security, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Languages: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cloud-academy"&gt;
  &lt;/a&gt;
  &lt;a href="https://cloudacademy.com/library/"&gt;&lt;strong&gt;Cloud Academy&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;A platform for training cloud computing and testing your cloud skills. Available on subscription (with a special offer for teams). The platform also holds webinars and events.&lt;/p&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#katacoda"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.katacoda.com/"&gt;&lt;strong&gt;Katacoda&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Interactive learning and training platform for software engineers. Over 300 real-world scenarios and counting. Students can choose a lab and start learning online. Free content.&lt;/p&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#data-camp"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.datacamp.com/"&gt;&lt;strong&gt;Data Camp&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Data skills training platform. The platform offers skills assessment features, interactive courses and practice with quick daily challenges. Certification.&lt;/p&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#codecademy"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.codecademy.com/"&gt;&lt;strong&gt;Codecademy&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Online interactive platform that offers free coding classes in 12 different programming languages including Python, Java, Go, JavaScript, Ruby, SQL, C++, C#, Swift, Sass, HTML, and CSS.&lt;/p&gt;

&lt;p&gt;Many courses are free, though the paid plan offers additional learning tools, courses, and community support.&lt;/p&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cybrary"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.cybrary.it/"&gt;&lt;strong&gt;Cybrary&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;This cybersecurity professional platform offers online courses to develop tech skills. There are also options for students:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Certification Preparation&lt;/li&gt;
&lt;li&gt;Virtual Labs (hands-on experience)&lt;/li&gt;
&lt;li&gt;Skills Development and Assessment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#goskills"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.goskills.com/"&gt;&lt;strong&gt;Goskills&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Online courses platform to build skills in tech. Among the extra features are quick skill tests and verified certificates of achievement for every course completed.&lt;/p&gt;

&lt;p&gt;Programs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project management&lt;/li&gt;
&lt;li&gt;Soft Skills&lt;/li&gt;
&lt;li&gt;Development&lt;/li&gt;
&lt;li&gt;Design&lt;/li&gt;
&lt;li&gt;Data Analysis and more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#alison"&gt;
  &lt;/a&gt;
  &lt;a href="https://alison.com/"&gt;&lt;strong&gt;Alison&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Thousands of free online courses with certificates and diplomas. No enrollment or subscription fees.&lt;/p&gt;

&lt;p&gt;Programs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IT&lt;/li&gt;
&lt;li&gt;Languages&lt;/li&gt;
&lt;li&gt;Sales &amp;amp; Marketing&lt;/li&gt;
&lt;li&gt;Management and more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#general-assembly"&gt;
  &lt;/a&gt;
  &lt;a href="https://generalassemb.ly/why-ga-is-worth-it"&gt;&lt;strong&gt;General assembly&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Full-time and time-part courses. The platform also holds workshops and events with industry experts. Alumni get access to the professional community.&lt;/p&gt;

&lt;p&gt;Programs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data Analysis&lt;/li&gt;
&lt;li&gt;Data Science&lt;/li&gt;
&lt;li&gt;Product Management&lt;/li&gt;
&lt;li&gt;Front-End Web Development&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Python Programming&lt;/li&gt;
&lt;li&gt;Digital Marketing and more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#free-code-camp"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.freecodecamp.org/learn"&gt;&lt;strong&gt;Free code camp&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Lots of online materials - videos, articles, and interactive coding lessons, FOR FREE.&lt;/p&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#educative"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.educative.io/"&gt;&lt;strong&gt;Educative&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Perfect for those who don’t like video courses and prefer a reading format. The platform offers text-based courses to build coding skills with the opportunity to practice the skills on real cases.&lt;/p&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#harvard-university"&gt;
  &lt;/a&gt;
  &lt;a href="https://online-learning.harvard.edu/"&gt;&lt;strong&gt;Harvard University&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Online courses from one of the world’s top universities: computer science, programming, data science, art &amp;amp; design, and more.&lt;/p&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#one-month"&gt;
  &lt;/a&gt;
  &lt;a href="https://onemonth.com/"&gt;&lt;strong&gt;One Month&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;The platform offers one-month-long online courses on programming languages (HTML, JavaScript, Python, SQL).&lt;/p&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thinkful"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.thinkful.com/"&gt;&lt;strong&gt;Thinkful&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Online interactive platform with a variety of online coding bootcamps in several areas including web development, mobile development, and design. The site also offers personal mentorship from industry experts and 6 months of professional career coaching.&lt;/p&gt;

&lt;p&gt;Programs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Software Engineering&lt;/li&gt;
&lt;li&gt;UX/UI Design&lt;/li&gt;
&lt;li&gt;Data Science&lt;/li&gt;
&lt;li&gt;Project Management and more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#code-with-mosh"&gt;
  &lt;/a&gt;
  &lt;a href="https://codewithmosh.com/"&gt;&lt;strong&gt;Code with Mosh&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Online courses to master coding skills. The courses take from 1 week to 2 weeks depending on the qualification. The cost to attend Code with Mosh ranges from $140 to $500.&lt;/p&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tree-house"&gt;
  &lt;/a&gt;
  &lt;a href="https://teamtreehouse.com/"&gt;&lt;strong&gt;Tree House&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;​​Online coding, design (and more) classes for at-home learning. Free 7-day trial.&lt;/p&gt;

&lt;p&gt;Programs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript Basics,&lt;/li&gt;
&lt;li&gt;Intro to HTML &amp;amp; CSS,&lt;/li&gt;
&lt;li&gt;Python Basics,&lt;/li&gt;
&lt;li&gt;CSS Layout, and more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#zero-to-mastery"&gt;
  &lt;/a&gt;
  &lt;a href="https://zerotomastery.io/"&gt;&lt;strong&gt;Zero To Mastery&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Online coding academy and developer community with courses from beginner programming fundamentals to advanced level.&lt;/p&gt;

&lt;p&gt;Programs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;CSS and more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#microsoft-learn"&gt;
  &lt;/a&gt;
  &lt;a href="https://docs.microsoft.com/en-us/learn/"&gt;&lt;strong&gt;Microsoft Learn&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;A free online training platform that provides interactive learning. Paths, certifications, life, and recorded events by Microsoft.&lt;/p&gt;

&lt;p&gt;Languages: All&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#academind"&gt;
  &lt;/a&gt;
  &lt;a href="https://academind.com/"&gt;&lt;strong&gt;Academind&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;The platform offers hundreds of coding tutorials and programming video courses. Academind also has a community in Discord where students help each other and learn together, as well as share their progress.&lt;/p&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#jovian"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.jovian.ai/"&gt;&lt;strong&gt;Jovian&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Interactive courses on data science. Build real-world projects. Certifications.&lt;/p&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#skill-share"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.skillshare.com/"&gt;&lt;strong&gt;Skill Share&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Personalized and interactive learning video courses to develop creative skills on topics including illustration, design, photography, video, freelancing, and more. Available on subscription, 7-day free trial.&lt;/p&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#alta3-research"&gt;
  &lt;/a&gt;
  &lt;a href="https://alta3.com/"&gt;&lt;strong&gt;Alta3 Research&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Cloud, DevOps and 5G Training platform. Lectures and hands-on training.&lt;/p&gt;

&lt;p&gt;Programs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;5G Courses&lt;/li&gt;
&lt;li&gt;Cloud/DevOps&lt;/li&gt;
&lt;li&gt;Programming&lt;/li&gt;
&lt;li&gt;Telecom&lt;/li&gt;
&lt;li&gt;SUSE&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;AWS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#courseroot"&gt;
  &lt;/a&gt;
  &lt;a href="https://courseroot.com/"&gt;&lt;strong&gt;Courseroot&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Courseroot aggregates and ranks the best online courses from the biggest platforms on the web. Students can filter through +50.000 online courses based on level of difficulty, price, hours of content, and certificate quality.&lt;/p&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#html-academy"&gt;
  &lt;/a&gt;
  &lt;a href="https://htmlacademy.ru/"&gt;&lt;strong&gt;HTML Academy&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Interactive online courses to build programming skills.&lt;/p&gt;

&lt;p&gt;Programs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML and CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Animation and more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Language: Russian&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#aotmp"&gt;
  &lt;/a&gt;
  &lt;a href="https://aotmp.com/"&gt;&lt;strong&gt;AOTMP&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Association of Telecom, Mobility, and IT Management Professionals is a membership organization dedicated to serving more than 10 million professionals around the globe who support the IT industry.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Association Memberships&lt;/li&gt;
&lt;li&gt;Training &amp;amp; Certification&lt;/li&gt;
&lt;li&gt;Events &amp;amp; Conferences and more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sqlzoo"&gt;
  &lt;/a&gt;
  &lt;a href="https://sqlzoo.net/wiki/SQL_Tutorial"&gt;&lt;strong&gt;SQLZoo&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;SQL tutorials, assessment, challenges, and sources.&lt;/p&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#mammoth-interactive"&gt;
  &lt;/a&gt;
  &lt;a href="https://training.mammothinteractive.com/"&gt;&lt;strong&gt;Mammoth Interactive&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Online eDegrees and tutorials primarily on programming and technology. Free masterclasses.&lt;/p&gt;

&lt;p&gt;Courses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Programming&lt;/li&gt;
&lt;li&gt;Data Science&lt;/li&gt;
&lt;li&gt;Software Development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Language: English&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#java-mentor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.java-mentor.com/"&gt;&lt;strong&gt;Java Mentor&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Platform trains Java developers with 1:1 mentorship online support. The platform also offers practice on real cases and a Slack community for students. 5-day free trial.&lt;/p&gt;

&lt;p&gt;Language: Russian&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#hexlet"&gt;
  &lt;/a&gt;
  &lt;a href="https://ru.hexlet.io/"&gt;&lt;strong&gt;Hexlet&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Online programming school for beginners and more experienced software developers.&lt;/p&gt;

&lt;p&gt;Programs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Front-end developer&lt;/li&gt;
&lt;li&gt;Python developer&lt;/li&gt;
&lt;li&gt;PHP developer&lt;/li&gt;
&lt;li&gt;Node.js developer&lt;/li&gt;
&lt;li&gt;Java, and more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Language: Russian&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#job-ready-programmer"&gt;
  &lt;/a&gt;
  &lt;a href="https://jobreadyprogrammer.com/"&gt;&lt;strong&gt;Job Ready Programmer&lt;/strong&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Online platform to master Java, Python, Spring Framework, SQL, OOP, Data Structures, and Algorithms. Video tutorials, practice, certification. Available on subscription.&lt;/p&gt;




&lt;p&gt;To develop the skills of a tech team and save time for research, try Vectorly’s &lt;a href="https://www.vectorly.team/feature/growth-plans"&gt;Growth Plans&lt;/a&gt;, which automate the process of finding a relevant source.&lt;/p&gt;

&lt;p&gt;Vectorly analyzes the working activity of your team members for you and offers specific activities from the knowledge base, integrated with the service. All you need to do is choose between the offered recommendations and add the task to an employee’s to-do list.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bIHp5W-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eh2l0ybg6jj99nwg13bj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bIHp5W-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eh2l0ybg6jj99nwg13bj.png" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The story was originally posted on &lt;a href="https://www.vectorly.team/blog"&gt;Vectorly's blog&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>python</category>
      <category>career</category>
    </item>
    <item>
      <title>The Ultimate Linux Cheatsheet</title>
      <author>Ayesha Sahar</author>
      <pubDate>Mon, 20 Dec 2021 12:19:50 +0000</pubDate>
      <link>https://dev.to/iayeshasahar/the-ultimate-linux-cheatsheet-1caa</link>
      <guid>https://dev.to/iayeshasahar/the-ultimate-linux-cheatsheet-1caa</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-linux"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is Linux?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;From desktops to supercomputers, Linux is everywhere! You must have heard of it at least once, right? But the question is, what is &lt;strong&gt;Linux&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Just like Windows and Mac, it is an operating system and has been around since the 1990s. Linux is basically a Unix-like, Kernal based, fully-memory protected, multitasking operating system. It is open-source software that runs on a wide range of hardware, from PCs to even Macs.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#what-are-linux-commands"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What are Linux Commands?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A command is a program that interacts with the kernel to provide the environment and perform the functions called for by the user. A command can be: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a built-in shell command&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;an executable shell file, known as a shell script&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a source compiled, object code file.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#basic-linux-commands"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Basic Linux Commands&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Here are a lot of basic Linux commands you can try! I wanted to write "some of" but these are too many to be classified as "some".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; Some commands may not work for you correctly due to issues like missing packages, differences in versions, etc. I did list some alternatives, but if they don't work too, then I'll just tell you what our course instructor tells us to do: &lt;strong&gt;Google it!&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-history"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. history&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Just type "history" in the terminal and it will show you a list of all commands you have used.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-clear"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. clear&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Just type "clear" in the terminal and the terminal will be cleared.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-up-or-down-key"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. up OR down key&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Use these keys to move back and forth between the commands you have previously used.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-pwd"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. pwd&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is a short form for the present working directory. It shows the folder you are currently working in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-man-man"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. man man&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command shows a manual of all the commands.&lt;/p&gt;

&lt;p&gt;You can use:&lt;/p&gt;

&lt;p&gt;man command&lt;/p&gt;

&lt;p&gt;to get information about a particular command.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-ls"&gt;
  &lt;/a&gt;
  &lt;strong&gt;6. ls&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command shows all the directories and files in the pwd.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-ls-al"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7. ls -al&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command prints all the additional information of all files and directories.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-ls-r"&gt;
  &lt;/a&gt;
  &lt;strong&gt;8. ls -R&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command prints out the sub-directories of a directory too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-ls-a"&gt;
  &lt;/a&gt;
  &lt;strong&gt;8. ls -a&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command prints out the hidden files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-dir"&gt;
  &lt;/a&gt;
  &lt;strong&gt;9. dir&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command prints out all available directories in the pwd.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-cd"&gt;
  &lt;/a&gt;
  &lt;strong&gt;10. cd&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is used to change directories. Whenever you open the terminal, the current directory would be home.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The command&lt;/p&gt;

&lt;p&gt;cd Desktop&lt;/p&gt;

&lt;p&gt;will let you enter the Desktop. Now if you check the pwd, it will be Desktop.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Just use:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;cd&lt;/p&gt;

&lt;p&gt;to get back to the home directory.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-mkdir"&gt;
  &lt;/a&gt;
  &lt;strong&gt;11. mkdir&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command makes a new directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;mkdir Linux&lt;/p&gt;

&lt;p&gt;This command will make a new directory named Linux in the pwd.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-sudo-i-or-sudo-s-or-sudo-su"&gt;
  &lt;/a&gt;
  &lt;strong&gt;12. sudo -i OR sudo -s OR sudo su&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Use one of these 3 commands login as root user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-exit-or-logout"&gt;
  &lt;/a&gt;
  &lt;strong&gt;13. exit OR logout&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You can logout or exit the root.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-rm-filenametxt"&gt;
  &lt;/a&gt;
  &lt;strong&gt;14. rm FileName.txt&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Use this command to remove/del file from a directory.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-rmdir-directoryname"&gt;
  &lt;/a&gt;
  &lt;strong&gt;15. rmdir DirectoryName&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is used to remove/del an empty directory.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-touch"&gt;
  &lt;/a&gt;
  &lt;strong&gt;15. touch&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is used to create a new file or to change the timestamp of an existing file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#16-stat-filetxt"&gt;
  &lt;/a&gt;
  &lt;strong&gt;16. stat file.txt&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Use this command to check details of any file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#17-cat-gt-filetxt"&gt;
  &lt;/a&gt;
  &lt;strong&gt;17. cat &amp;gt; file.txt&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It creates and adds data in a file. Use CTRL+d after you finish adding data to save the file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#18-cat-filetxt"&gt;
  &lt;/a&gt;
  &lt;strong&gt;18. cat file.txt&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It shows the contents of the file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#19-cat-file1txt-file2txt-gt-filetxt3"&gt;
  &lt;/a&gt;
  &lt;strong&gt;19. cat file1.txt file2.txt &amp;gt; file.txt3&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It adds the data of existing files, "file1" and "file2", to a new file, "file3".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#20-cp"&gt;
  &lt;/a&gt;
  &lt;strong&gt;20. cp&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You can copy a file or a folder using this command. &lt;/p&gt;

&lt;p&gt;Use:&lt;/p&gt;

&lt;p&gt;cp file.txt Directory&lt;/p&gt;

&lt;p&gt;to copy a file to your desired directory. Please note that in order to do so, your pwd must be the directory the file is currently in.&lt;/p&gt;

&lt;p&gt;Use:&lt;/p&gt;

&lt;p&gt;cp FolderName -r Directory&lt;/p&gt;

&lt;p&gt;to copy a folder/directory to another directory.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#21-mv"&gt;
  &lt;/a&gt;
  &lt;strong&gt;21. mv&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It will move files inside your system. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;mv FileName.txt Directory&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#22-head"&gt;
  &lt;/a&gt;
  &lt;strong&gt;22. head&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command prints the first ten lines of a file. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;head FileName.txt &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#23-tail"&gt;
  &lt;/a&gt;
  &lt;strong&gt;23. tail&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command prints the last ten lines of a file. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;tail FileName.txt &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#24-uname"&gt;
  &lt;/a&gt;
  &lt;strong&gt;24. uname&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command gives the name of your Linux.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#25-uname-a"&gt;
  &lt;/a&gt;
  &lt;strong&gt;25. uname -a&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command gives detailed information about your Linux.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#26-wget"&gt;
  &lt;/a&gt;
  &lt;strong&gt;26. wget&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Use:&lt;/p&gt;

&lt;p&gt;wget url&lt;/p&gt;

&lt;p&gt;to download anything from the internet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#27-apt-get-or-apt"&gt;
  &lt;/a&gt;
  &lt;strong&gt;27. apt -get OR apt&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Use:&lt;/p&gt;

&lt;p&gt;sudo apt install PackageName&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;or *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;sudo apt -get install PackageName&lt;/p&gt;

&lt;p&gt;to install any package .&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#28-remove"&gt;
  &lt;/a&gt;
  &lt;strong&gt;28. remove&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Use:&lt;/p&gt;

&lt;p&gt;sudo apt remove PackageName&lt;/p&gt;

&lt;p&gt;to remove/uninstall any package.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#29-grep"&gt;
  &lt;/a&gt;
  &lt;strong&gt;29. grep&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You can search for a pattern in which specific words lie.&lt;/p&gt;

&lt;p&gt;cat file.txt | grep hi&lt;/p&gt;

&lt;p&gt;This command will search for "hi" in the text file mentioned and will highlight where it found "hi".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#30-ps"&gt;
  &lt;/a&gt;
  &lt;strong&gt;30. ps&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It gives the list of current processes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#31-gzip"&gt;
  &lt;/a&gt;
  &lt;strong&gt;31. gzip&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is used to zip any file. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;gzip FileName.txt &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#31-gunzip"&gt;
  &lt;/a&gt;
  &lt;strong&gt;31. gunzip&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is used to unzip any file. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;gunzip FileName.txt &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#33-compress"&gt;
  &lt;/a&gt;
  &lt;strong&gt;33. compress&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is used to compress data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#34-uncompress"&gt;
  &lt;/a&gt;
  &lt;strong&gt;34. uncompress&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is used to uncompress data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#35-cpio"&gt;
  &lt;/a&gt;
  &lt;strong&gt;35. cpio&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It stores files on tapes.to/ from archives.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#36-tar"&gt;
  &lt;/a&gt;
  &lt;strong&gt;36. tar&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is used archive files and directories and can store them on tapes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#37-zip"&gt;
  &lt;/a&gt;
  &lt;strong&gt;37. zip&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is used to compress a file to .zip file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#37-unzip"&gt;
  &lt;/a&gt;
  &lt;strong&gt;37. unzip&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is used to uncompress a file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#38-hostname"&gt;
  &lt;/a&gt;
  &lt;strong&gt;38. hostname&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is used to print hostname on the terminal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#39-ping"&gt;
  &lt;/a&gt;
  &lt;strong&gt;39. ping&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is used to check connectivity to a server.&lt;/p&gt;

&lt;p&gt;e.g. ping youtube.com&lt;/p&gt;

&lt;p&gt;will ping to youtube and then print the response time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#40-w"&gt;
  &lt;/a&gt;
  &lt;strong&gt;40. w&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command displays the user details that are currently logged in the system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#41-cal"&gt;
  &lt;/a&gt;
  &lt;strong&gt;41. cal&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It displays the calendar for the current month.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#42-date"&gt;
  &lt;/a&gt;
  &lt;strong&gt;42. date&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It displays the date and time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#43-date-u"&gt;
  &lt;/a&gt;
  &lt;strong&gt;43. date -u&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It displays the date and universal time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#44-whoami"&gt;
  &lt;/a&gt;
  &lt;strong&gt;44. whoami&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It displays the current user name.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#45-echo"&gt;
  &lt;/a&gt;
  &lt;strong&gt;45. echo&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;To understand this, let's see an example:&lt;/p&gt;

&lt;p&gt;echo name&lt;/p&gt;

&lt;p&gt;This command will return "name" as the output.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#46-wc"&gt;
  &lt;/a&gt;
  &lt;strong&gt;46. wc&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It counts the number of lines, number of words, and number of characters. Then it displays the result in the same sequence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;wc file.txt&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#47-wc-l"&gt;
  &lt;/a&gt;
  &lt;strong&gt;47. wc -l&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It counts and displays the number of lines of a file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;wc -l file.txt&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#48-wc-w"&gt;
  &lt;/a&gt;
  &lt;strong&gt;48. wc -w&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It counts and displays the number of words of a file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;wc -w file.txt&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#49-ctrlshiftc"&gt;
  &lt;/a&gt;
  &lt;strong&gt;49. CTRL+shift+c&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Used for copying.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#50-ctrlshiftv"&gt;
  &lt;/a&gt;
  &lt;strong&gt;50. CTRL+shift+v&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Used for pasting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#51-sudo"&gt;
  &lt;/a&gt;
  &lt;strong&gt;51. sudo&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Using sudo allows a normal user to execute a command with root privilege.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#52-sudo-get-apt-update"&gt;
  &lt;/a&gt;
  &lt;strong&gt;52. sudo get apt update&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is used to update the whole system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#53-locate"&gt;
  &lt;/a&gt;
  &lt;strong&gt;53. locate&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Let's see an example to understand it's function.&lt;/p&gt;

&lt;p&gt;locate hi&lt;/p&gt;

&lt;p&gt;This command will list out all files or paths with "hi" in their path or file names.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#54-locate-c"&gt;
  &lt;/a&gt;
  &lt;strong&gt;54. locate -c&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Let's see an example to understand it's function.&lt;/p&gt;

&lt;p&gt;locate hi&lt;/p&gt;

&lt;p&gt;This command will list out the number of files with "hi" in their path or file names.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#55-ls-l"&gt;
  &lt;/a&gt;
  &lt;strong&gt;55. ls -l&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command shows a list of all users along with their default permissions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#56-sort"&gt;
  &lt;/a&gt;
  &lt;strong&gt;56. sort&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It sorts a file alphabetically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#57-uniq"&gt;
  &lt;/a&gt;
  &lt;strong&gt;57. uniq&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It removes duplicate lines from a sorted file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#58-sleep"&gt;
  &lt;/a&gt;
  &lt;strong&gt;58. sleep&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Produces a delay for a specified amount of time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#59-diff"&gt;
  &lt;/a&gt;
  &lt;strong&gt;59. diff&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command shows differences between files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;diff file1.txt file2.txt&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#60-cut"&gt;
  &lt;/a&gt;
  &lt;strong&gt;60. cut&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It removes sections from each line of files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#61-cmp"&gt;
  &lt;/a&gt;
  &lt;strong&gt;61. cmp&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It compares two files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;cmp file1.txt file2.txt&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#62-whereis"&gt;
  &lt;/a&gt;
  &lt;strong&gt;62. whereis&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It locates the binary and man page files for a command.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#63-which"&gt;
  &lt;/a&gt;
  &lt;strong&gt;63. which&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It shows full path of where commands reside.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#64-md5sum"&gt;
  &lt;/a&gt;
  &lt;strong&gt;64. md5sum&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It prints the MD5 Checksum.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#65-mv-to-rename-a-file"&gt;
  &lt;/a&gt;
  &lt;strong&gt;65. mv to rename a file&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Use:&lt;/p&gt;

&lt;p&gt;mv abc.txt def.txt&lt;/p&gt;

&lt;p&gt;to rename a file. Here the name of the file, abc, is changed to def.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#66-echo-to-append-text"&gt;
  &lt;/a&gt;
  &lt;strong&gt;66. echo to append text&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Use:&lt;/p&gt;

&lt;p&gt;echo "Enter your text here" &amp;gt;&amp;gt; file.txt&lt;/p&gt;

&lt;p&gt;to append any text to the end of your specified file.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#file-editors-in-linux"&gt;
  &lt;/a&gt;
  &lt;strong&gt;File Editors in Linux&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Here are 4 file editors in Linux:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#67-emacs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;67. emacs&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command opens a full-screen editor.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#68-pico"&gt;
  &lt;/a&gt;
  &lt;strong&gt;68. pico&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command opens a simple editor.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#69-gedit"&gt;
  &lt;/a&gt;
  &lt;strong&gt;69. gedit&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command opens a GUI text editor.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#70-vim-or-vi"&gt;
  &lt;/a&gt;
  &lt;strong&gt;70. vim OR vi&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You can use either command to open vim.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The command "i" will let you open insert mode.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To exit vim: Press esc keyt + :q&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To save file: Press esc keyt + :w FileName.txt&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#creating-and-setting-passwords-for-user-and-groups"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Creating and Setting Passwords for User and Groups&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;By using the following commands, you can create and set passwords for users and groups!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#71-useradd-or-adduser"&gt;
  &lt;/a&gt;
  &lt;strong&gt;71. useradd OR adduser&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Either of these may work for you. They add another user in the system. Execute this command while logged into root. If not in root, use sudo before it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;useradd NewUser&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#72-passwd"&gt;
  &lt;/a&gt;
  &lt;strong&gt;72. passwd&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is used to set password for a user. Works only when you are logged in as root or use sudo before it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;passwd NewUser&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#73-userdel"&gt;
  &lt;/a&gt;
  &lt;strong&gt;73. userdel&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is used to delete a user. Works only when you are logged in as root or use sudo before it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;userdel NewUser&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#74-cat-etcpasswd"&gt;
  &lt;/a&gt;
  &lt;strong&gt;74. cat /etc/passwd&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It shows a list of all ubuntu users. Works only when you are logged in as root.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#75-groupadd"&gt;
  &lt;/a&gt;
  &lt;strong&gt;75. groupadd&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is used to add a group. Works only when you are logged in as root.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#76-gpasswd"&gt;
  &lt;/a&gt;
  &lt;strong&gt;76. gpasswd&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is used to set password for a group. Works only when you are logged in as root.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#77-adding-users-to-a-group"&gt;
  &lt;/a&gt;
  &lt;strong&gt;77. Adding users to a group&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The following command creates a new user and a new group. Then adds that user to the group. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;sudo adduser UserName GroupName&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#78-groupdel"&gt;
  &lt;/a&gt;
  &lt;strong&gt;78. groupdel&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is used to delete a group.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;groupdel GroupName         &lt;strong&gt;OR&lt;/strong&gt;      sudo groupdel GroupName&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#79-add-existing-user-to-an-existing-group"&gt;
  &lt;/a&gt;
  &lt;strong&gt;79. Add existing user to an existing group&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Use the following command to perform this task:&lt;/p&gt;

&lt;p&gt;sudo usermod -a -G GroupName UserName&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#80-compgen-g-or-cat-etcgroup"&gt;
  &lt;/a&gt;
  &lt;strong&gt;80. compgen -g OR cat /etc/group&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Either of them can be used to see the list of all users and groups.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#81-granting-sudo-privilege-to-a-new-user"&gt;
  &lt;/a&gt;
  &lt;strong&gt;81. Granting sudo privilege to a new user&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;After you create a new user via the terminal, that user would not be able to do anything even while using sudo. That is because the user does not have the sudo privilege.&lt;/p&gt;

&lt;p&gt;Use this command to add that user to the group of sudo users or in other words, to grant that user the sudo privilege:&lt;/p&gt;

&lt;p&gt;sudo usermod -aG sudo UserName&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#setting-ownerships-and-permissions-for-filesdirectories"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Setting Ownerships and Permissions for Files/Directories&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;By using the following commands, you can set ownership and permissions for files/directories.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#82-setting-ownership-of-files"&gt;
  &lt;/a&gt;
  &lt;strong&gt;82. Setting ownership of files&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Login to the user who created the file whose ownership you want to modify. For example, user Ayesha created the file, abc.txt. You want to modify the ownership of abc.txt. Now login to Ayesha. You want to make another user, Sahar, the owner too. Use the following command to achieve this:&lt;/p&gt;

&lt;p&gt;sudo chown Sahar abc.txt&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#83-setting-filefolder-permissions"&gt;
  &lt;/a&gt;
  &lt;strong&gt;83. Setting file/folder permissions&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;There are two types of permissions;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Alphabetic:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;read (r)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;write (w)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;execute (x)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. Numeric:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;write: 2&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;read: 4&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;execute: 1&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;no permission: 0&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alphabetic permissions are quite simple. Let's understand the numeric permissions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;chmod  561 abc.txt&lt;/p&gt;

&lt;p&gt;We use chmod to set permissions. Here we are setting permission on abc.txt&lt;/p&gt;

&lt;p&gt;You might be thinking, why are there 3 numbers?&lt;/p&gt;

&lt;p&gt;That is because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;5 is the permission for user.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;6 is the permission for group.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1 is the permission for others.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When setting permissions we do it for the above-mentioned 3 types. &lt;/p&gt;

&lt;p&gt;Here, another question might come to your mind; how were those numbers calculated????&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We granted the read(4) and execute(1) permissions to user. Therefore 4+1 =5.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We granted the read(4), write(2), and execute(1) permissions to group. Therefore 4+2+1 =6.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To others, we only granted the execute permission, hence the 1.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#file-system-management-commands"&gt;
  &lt;/a&gt;
  &lt;strong&gt;File System Management Commands&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Here are some commands used for filesystem management!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#84-badblocks"&gt;
  &lt;/a&gt;
  &lt;strong&gt;84. badblocks&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command is used to search for bad blocks (block of memory which has been corrupted and can no longer be used reliably) in your linux.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#85-df"&gt;
  &lt;/a&gt;
  &lt;strong&gt;85. df&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It shows the free disk space on one or more filesystems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#86-du"&gt;
  &lt;/a&gt;
  &lt;strong&gt;86. du&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It shows how much disk space a directory and all it's files contain.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#87-fsck"&gt;
  &lt;/a&gt;
  &lt;strong&gt;87. fsck&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It checks the filesystem. Do not run this command on a mounted filesystem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;fsck filesystem&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#88-sync"&gt;
  &lt;/a&gt;
  &lt;strong&gt;88. sync&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command sunchronizes data on disk with memory. It only writes the buffered data to the disk.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#89-mount"&gt;
  &lt;/a&gt;
  &lt;strong&gt;89. mount&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is used to mount a filesystem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;mount filesystem&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#90-unmount"&gt;
  &lt;/a&gt;
  &lt;strong&gt;90. unmount&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is used to unmount a filesystem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;unmount filesystem&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#91-fg"&gt;
  &lt;/a&gt;
  &lt;strong&gt;91. Fg&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is used to continue a program which was stopped and bring it to the foreground. For example, you stopped a music player, p, with the command Ctrl+z. In order to let it continue, write the command; fg p.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;fg taskname&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#92-top"&gt;
  &lt;/a&gt;
  &lt;strong&gt;92. Top&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It informs the user about all the running processes on the Linux.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#93-ps"&gt;
  &lt;/a&gt;
  &lt;strong&gt;93. PS&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It stands for ‘Process Status’. This is similar to the “Task Manager” that pop-ups in a Windows Machine when we use Ctrl+Alt+Del. It is similar to the “top” command but the information displayed is different.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To check all the processes running under a user:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ps ux&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To check the process status of a single process:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ps PID&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#94-kill"&gt;
  &lt;/a&gt;
  &lt;strong&gt;94. Kill&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is used to terminate any running processes on a Linux machine. PID (process id) of the process you want to kill must be known.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can find PID by this command:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;pidof ProcessName&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can kill a process by this command:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;kill PID&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#95-nice"&gt;
  &lt;/a&gt;
  &lt;strong&gt;95. NICE&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Running a lot of processes at a time can slow down the speed of some high priority processes and result in poor performance. To avoid this situation, you can tell your machine to prioritize processes as per your requirements.&lt;/p&gt;

&lt;p&gt;This priority is called Niceness in Linux (has a value between -20 to 19). The lower the Niceness index, the higher would be a priority given to that task. The default value of all the processes is 0.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To start a process with a niceness value other than the default value use the following syntax:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;nice -n 'Nice value' ProcessName&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If there is some process already running on the system, then you can ‘Renice’ its value using syntax.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;renice 'nice value' -p 'PID'&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#network-management-commands"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Network Management Commands&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Following commands are used to manage networks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#96-ifconfig"&gt;
  &lt;/a&gt;
  &lt;strong&gt;96. ifconfig&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;ifconfig stands for interface configurator. It is used to initialize an interface, configure it with an IP address, and enable or disable it. It is also used to display the route and the network interface. Basic information displayed upon using ifconfig; IP address, MAC address and MTU (Maximum Transmission Unit). This is how we can get the IP address of 3 networks; Ethernet, local network, and WLAN.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ifconfig eth0&lt;/li&gt;
&lt;li&gt;ifconfig lo&lt;/li&gt;
&lt;li&gt;ifconfig wlan0&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#97-ip"&gt;
  &lt;/a&gt;
  &lt;strong&gt;97. ip&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is the latest and updated version of ifconfig command. “ip a” gives the details of all networks like ifconfig. “ip addr” can also be used to get the details of a specific interface. This is how we can get the IP address of 3 networks; Ethernet, local network, and WLAN.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ip a show eth0
&lt;/li&gt;
&lt;li&gt;ip a show lo
&lt;/li&gt;
&lt;li&gt;ip a show wlan0&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#98-ip-link"&gt;
  &lt;/a&gt;
  &lt;strong&gt;98. ip link&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command is used for configuring, adding, and deleting network interfaces. Use ip link show command to display all network interfaces on the system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#99-iftop"&gt;
  &lt;/a&gt;
  &lt;strong&gt;99. iftop&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command is used in traffic monitoring. You can view the ports using the -P option in command like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sudo iftop -P&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use the -B command to get the data in bytes, instead of bits (which is shown by default).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iftop -B&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#100-tracepath"&gt;
  &lt;/a&gt;
  &lt;strong&gt;100. tracepath&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Linux tracepath is similar to traceroute command. It is used to detect network delays. However, it doesn't require root privileges. It is installed in Ubuntu by default.&lt;/p&gt;

&lt;p&gt;It traces the route to the specified destination and identifies each hop in it. If your network is weak, it recognizes the point where the network is weak.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tracepath google.com&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#101-traceroute"&gt;
  &lt;/a&gt;
  &lt;strong&gt;101. traceroute&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is used to troubleshoot the network. It detects the delay and determines the pathway to your target. It provides the names and identifies every device on the path, follows the route to the destination and determines where the network latency comes from and reports it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;traceroute google.com&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To avoid the reverse DNS lookup, add -n in the command syntax.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;traceroute -n google.com&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The output indicates the network delays. The asterisks shown in the output indicates a potential problem in reaching that host. They indicate the packet loss during communication to the network.&lt;/p&gt;

&lt;p&gt;Generally, the traceroute command sends UDP packets. It can as well send TCP or ICMP packets. To specifically send in ICMP, use this command:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sudo traceroute -I google.com&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To send a variant of TCP, use this command:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sudo traceroute -T google.com&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#102-host"&gt;
  &lt;/a&gt;
  &lt;strong&gt;102. host&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Linux host command displays the domain name for a given IP address and IP address for a given hostname. It is also used to fetch DNS lookup for DNS related query.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;host thecodingcompany.hashnode.dev&lt;/li&gt;
&lt;li&gt;host 149.77.21.18&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can combine the host command with -t, and get DNS resource records like SOA, NS, A, PTR, CNAME, MX, SRV.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;host -t &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#103-mtr"&gt;
  &lt;/a&gt;
  &lt;strong&gt;103. mtr&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command is a combination of ping and the traceroute command. It continuously displays information regarding the packets sent with the ping time of each hop. It is also used to view the network issues.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;mtr &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;mtr google.com&lt;/p&gt;

&lt;p&gt;You can use mtr with –report option. It sends 10 packets to each hop that is found on the way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#104-whois"&gt;
  &lt;/a&gt;
  &lt;strong&gt;104. whois&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command is used to fetch all the information related to a website. You can get all the information about a website including the registration and the owner information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;whois websiteName&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;whois google.com&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#105-ifplugstatus"&gt;
  &lt;/a&gt;
  &lt;strong&gt;105. ifplugstatus&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command is used to check if a cable is plugged into the network interface.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ifplugstatus&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the output is "link beat detected", this means that the cable is plugged in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#106-dnsdomainname"&gt;
  &lt;/a&gt;
  &lt;strong&gt;106. dnsdomainname&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command shows the system's dns domain name.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#107-hostname"&gt;
  &lt;/a&gt;
  &lt;strong&gt;107. hostname&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command is used to show or set the name of your machine for networking.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#108-nisdomainname"&gt;
  &lt;/a&gt;
  &lt;strong&gt;108. nisdomainname&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command is used to show or set the system's NIS/YP domain name.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#109-arp"&gt;
  &lt;/a&gt;
  &lt;strong&gt;109. arp&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This program lets the user read or modify their arp cache.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#110-dig"&gt;
  &lt;/a&gt;
  &lt;strong&gt;110. dig&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command sends domain name query packets to name servers for debugging or testing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#111-ifdown"&gt;
  &lt;/a&gt;
  &lt;strong&gt;111. ifdown&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command disables a network interface, placing it in a state where it cannot transmit or receive data. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ifdown eth0&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#112-ifup"&gt;
  &lt;/a&gt;
  &lt;strong&gt;112. ifup&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command enables a network interface, placing it in a state where it can transmit or receive data. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ifup eth0&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#113-showmount"&gt;
  &lt;/a&gt;
  &lt;strong&gt;113. showmount&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This command shows mount information for an NFS server.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Ooops, this turned out to be a very long article😅 But I hope you guys find it useful. Linux may seem tough and scary but deep down, he's a good kid. Just put an effort and you'll surely find these commands and Linux in general easy in no time!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's connect!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;✨ &lt;a href="https://twitter.com/IAyeshaSahar"&gt;Twitter&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;✨ &lt;a href="https://github.com/AyeshaSahar"&gt;Github&lt;/a&gt; &lt;/p&gt;

</description>
      <category>linux</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Cube Cloud Deep Dive: Mastering Pre-Aggregations</title>
      <author>Adnan Rahić</author>
      <pubDate>Mon, 20 Dec 2021 12:19:14 +0000</pubDate>
      <link>https://dev.to/cubejs/cube-cloud-deep-dive-mastering-pre-aggregations-3nb9</link>
      <guid>https://dev.to/cubejs/cube-cloud-deep-dive-mastering-pre-aggregations-3nb9</guid>
      <description>&lt;p&gt;With datasets becoming enormous, developers need to find new ways of making data apps fast, responsive, and cost-effective. &lt;a href="https://cube.dev/docs/schema/reference/pre-aggregations"&gt;Pre-aggregations&lt;/a&gt;, one of the most powerful features of Cube, simplify this monumental feat significantly.&lt;/p&gt;

&lt;p&gt;Today, I want to talk about using and managing pre-aggregations with &lt;a href="https://github.com/cube-js/cube.js"&gt;Cube&lt;/a&gt;, an open-source API layer for data apps, and &lt;a href="https://cube.dev/cloud"&gt;Cube Cloud&lt;/a&gt;, a fully managed platform that runs and scales Cube apps in production.&lt;/p&gt;

&lt;p&gt;I want to give you a detailed insight into what pre-aggregations are, which scenarios you might encounter while working with them, and how both self-hosted Cube and Cube Cloud can help in solving them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-preaggregations"&gt;
  &lt;/a&gt;
  What are Pre-Aggregations
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://cube.dev/docs/caching/using-pre-aggregations"&gt;Pre-aggregations&lt;/a&gt; are condensed versions of the source data. They are materialized ahead of time and persisted as tables separately from the raw data. Querying pre-aggregations reduces the execution time, as the queried data is orders of magnitude smaller than the raw data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h4AQxmoa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/705caebb-6a3f-4309-a235-f4e5a8c0ff79.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h4AQxmoa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/705caebb-6a3f-4309-a235-f4e5a8c0ff79.png" alt="pre-agg-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pre-aggregations are highly recommended to be used in virtually any Cube app in &lt;a href="https://cube.dev/docs/deployment/production-checklist#set-up-refresh-worker"&gt;production&lt;/a&gt;. Let's talk about popular scenarios you might encounter while working with pre-aggregations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-store-preaggregations"&gt;
  &lt;/a&gt;
  How to Store Pre-Aggregations
&lt;/h3&gt;

&lt;p&gt;Pre-aggregation data should be stored separately from the raw data. The recommended way is to store &lt;a href="https://cube.dev/docs/caching/using-pre-aggregations#pre-aggregations-storage"&gt;pre-aggregations in Cube Store&lt;/a&gt;, a purposefully built and performant storage layer. How do you set up and run Cube Store?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-hosted Cube.&lt;/strong&gt; When developing Cube apps locally and running Cube in &lt;a href="https://cube.dev/docs/configuration/overview#development-mode"&gt;dev mode&lt;/a&gt;, you don't need to set up anything. Cube Store will run automatically within the Cube process, and pre-aggregation data will be stored as files under the &lt;code&gt;.cubestore&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Running Cube in production will require setting up more complex infrastructure. You need an API instance, a refresh worker, a Redis instance as well as a &lt;a href="https://cube.dev/docs/caching/running-in-production"&gt;Cube Store cluster&lt;/a&gt; that will consist of a single router node and at least a couple of worker nodes. If needed, you'll scale Cube Store by adding more worker nodes.&lt;/p&gt;

&lt;p&gt;You can find a &lt;a href="https://cube.dev/docs/deployment/platforms/kubernetes"&gt;Kubernetes deployment example&lt;/a&gt; in the docs and a &lt;a href="https://github.com/cube-js/cube.js/tree/master/examples/helm-charts"&gt;Helm chart example&lt;/a&gt; on GitHub that might help you to set everything up on-premise or in a cloud provider of your choice like AWS or GCP.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ij5USTZm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/4f6d753e-77d2-4d46-964f-8d2512ff9a18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ij5USTZm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/4f6d753e-77d2-4d46-964f-8d2512ff9a18.png" alt="https://cubedev-blog-images.s3.us-east-2.amazonaws.com/4f6d753e-77d2-4d46-964f-8d2512ff9a18.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cube Cloud.&lt;/strong&gt; When developing and running Cube apps in Cube Cloud, you can use readily available managed infrastructure that includes a Cube Store cluster. Cube Cloud will automatically scale the Cube Store cluster as needed and allocate other services such as a refresh worker once you select "Cluster mode" in Settings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ezyOEfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/e48c2422-47ee-4ecd-b4c2-a904d8e08e76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ezyOEfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/e48c2422-47ee-4ecd-b4c2-a904d8e08e76.png" alt="frame_chrome_mac_light_(22).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-create-a-preaggregation"&gt;
  &lt;/a&gt;
  How to Create a Pre-Aggregation
&lt;/h3&gt;

&lt;p&gt;Queries won't be accelerated until pre-aggregations are defined and built.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-hosted Cube&lt;/strong&gt;. You can write the pre-aggregation definition by hand. Please see the &lt;a href="https://cube.dev/docs/schema/reference/pre-aggregations"&gt;docs on pre-aggregation definitions&lt;/a&gt; in the data schema where every parameter is explained.&lt;/p&gt;

&lt;p&gt;However, what I like doing is to run the query I want to accelerate first. Then, use the Rollup Designer by clicking on the &lt;code&gt;Query was not accelerated with pre-aggregation →&lt;/code&gt; link to configure a pre-aggregation definition.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WS-n4W7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/4ab0f53d-2b62-4941-b412-a41bad298a62.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WS-n4W7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/4ab0f53d-2b62-4941-b412-a41bad298a62.png" alt="frame_chrome_mac_light_(26).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;Members&lt;/code&gt; section you see the measures, dimensions, and time dimensions the pre-aggregation will be configured to accelerate. These need to match the query in order for it to be accelerated. You can make sure to get a match in the &lt;code&gt;Query Compatibility&lt;/code&gt; tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pYgLz3gA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/64a0d150-d43d-4418-b784-ace8f161c26e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pYgLz3gA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/64a0d150-d43d-4418-b784-ace8f161c26e.png" alt="frame_chrome_mac_light_(27).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can make further improvements to the pre-aggregation's performance with partitions, refreshing, and incremental builds.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BIMCj_Bv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/b2adf968-879b-4a2d-a3d4-379aad60d16d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BIMCj_Bv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/b2adf968-879b-4a2d-a3d4-379aad60d16d.png" alt="frame_chrome_mac_light_(28).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you're happy with the configuration in the Rollup Designer, click the &lt;code&gt;Add to the Data Schema&lt;/code&gt; button to add the pre-aggregation to the schema file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1HZ7Uyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/6b8d0d96-1b7e-4323-8507-73bf0f00d740.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1HZ7Uyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/6b8d0d96-1b7e-4323-8507-73bf0f00d740.png" alt="frame_chrome_mac_light_(29).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cube Cloud&lt;/strong&gt;. The process is exactly the same for Cube Cloud, with one added convenience. You can also use Rollup Designer on the Schema page when you're working with the data schema.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9HkpAYDW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/8f5f86b5-70e4-4ff9-b8c1-99b348912739.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9HkpAYDW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/8f5f86b5-70e4-4ff9-b8c1-99b348912739.png" alt="frame_chrome_mac_light_(47).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-preaggregations"&gt;
  &lt;/a&gt;
  How to Build Pre-Aggregations
&lt;/h3&gt;

&lt;p&gt;Pre-aggregations are built on-demand or based on a schedule. The build process always takes time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-hosted Cube.&lt;/strong&gt; Pre-aggregation builds can be triggered in two ways, either by a Cube refresh worker or on-demand when the Cube API instance gets a query that matches a pre-aggregation definition.&lt;/p&gt;

&lt;p&gt;In the latter case, the API will trigger a build of the pre-aggregation and be stuck waiting for it to finish in order to return a value. You &lt;strong&gt;do not want this to happen&lt;/strong&gt;, ever!&lt;/p&gt;

&lt;p&gt;A Cube refresh worker will trigger pre-aggregation builds periodically and make sure Cube Store always has pre-aggregations ready and waiting to be queried. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cube Cloud.&lt;/strong&gt; Enabling the warm-up of pre-aggregations before deploying the API will make sure to first &lt;strong&gt;build all&lt;/strong&gt; pre-aggregations before deploying a new version of the API. You do this under Settings → Resources by enabling the &lt;code&gt;Warm-up pre-aggregations before deploy API&lt;/code&gt; toggle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8bSJXIas--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/96a7e0d3-b5d8-40d4-a636-79e9b41a456f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8bSJXIas--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/96a7e0d3-b5d8-40d4-a636-79e9b41a456f.png" alt="frame_chrome_mac_light_(23).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also build pre-aggregations manually with the &lt;code&gt;Build All&lt;/code&gt; button, or select individual partitions to build. This is helpful when you explicitly need to re-build pre-aggregations. It might be because you deployed a new version of your Cube app or you edited an existing pre-aggregation definition. Another option might be if you decide to disable warming up the pre-aggregations before deploying the API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Qmm8drU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/e669724e-85ec-4ed2-a02a-a4b0859d71ce.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Qmm8drU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/e669724e-85ec-4ed2-a02a-a4b0859d71ce.png" alt="frame_chrome_mac_light_(32).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-optimize-preaggregation-build-times"&gt;
  &lt;/a&gt;
  How to Optimize Pre-Aggregation Build Times
&lt;/h3&gt;

&lt;p&gt;The time it takes to build pre-aggregations can vary based on the size of the partitions. The bigger a partition is, the longer it will take to build. Additionally, a major pitfall is not having detailed insight into when pre-aggregation builds are triggered and how long they took.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-hosted Cube&lt;/strong&gt;. The two key factors that improve pre-aggregation build times are the &lt;code&gt;partitionGranularity&lt;/code&gt; and &lt;code&gt;refreshKey&lt;/code&gt; parameters.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;partitionGranularity&lt;/code&gt; &lt;a href="https://cube.dev/docs/caching/using-pre-aggregations#partitioning"&gt;defines a partition&lt;/a&gt; based on a time dimension. A partition is a shard of data. The process of partitioning will shard data into multiple tables. If you set the &lt;code&gt;partitionGranularity: 'month'&lt;/code&gt;, it will partition the data into one table per month.&lt;/p&gt;

&lt;p&gt;Partitioning is a huge performance improvement for pre-aggregation build and refresh times. This is improved further by incrementally refreshing only the last set of partitions. It leads to less data being re-built, meaning faster builds with reduced cost.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;refreshKey&lt;/code&gt; parameter is, &lt;a href="https://cube.dev/docs/caching/using-pre-aggregations#refresh-strategy"&gt;by default, set to every &lt;code&gt;1 hour&lt;/code&gt;&lt;/a&gt;. We set it to every 1 hour by default as it fits most generic use cases. Having a &lt;code&gt;refreshKey&lt;/code&gt; with an &lt;code&gt;every&lt;/code&gt; field defines the frequency with which the pre-aggregation is rebuilt. Every 1 hour would mean on the hour, every hour. Meaning at 12:00 AM, 1:00 AM, 2:00 AM, and so on.&lt;/p&gt;

&lt;p&gt;Adding the &lt;code&gt;incremental: true&lt;/code&gt; parameter will refresh the most recent partition, which is incredibly useful if you are working with historical data that won't change.&lt;/p&gt;

&lt;p&gt;Lastly, adding a &lt;code&gt;updateWindow: '7 day'&lt;/code&gt; means going back for a specified amount of time and refreshing the partitions that fit into that time frame.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cube Cloud&lt;/strong&gt;. Building pre-aggregations without &lt;code&gt;partitionGranularity&lt;/code&gt; takes longer than building them as partitions.&lt;/p&gt;

&lt;p&gt;Using a pre-aggregation definition &lt;em&gt;with&lt;/em&gt; partitioning, versus &lt;em&gt;without&lt;/em&gt; partitioning does not look very different. In the sample below you can see that adding partitioning only requires three lines of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;countCreatedAtByDay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;measures&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;refreshKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;every&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`1 hour`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;updateWindow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`7 day`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// refresh partitions in this timeframe&lt;/span&gt;
    &lt;span class="nx"&gt;incremental&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// only refresh the most recent partition&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;partitionGranularity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`month`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// adds partitioning by month&lt;/span&gt;
  &lt;span class="nx"&gt;timeDimension&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createdAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;granularity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`day`&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, the build times speak for themselves.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yRF_HaMt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/d3b29fb4-1b3b-4325-924c-316d308648c8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yRF_HaMt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/d3b29fb4-1b3b-4325-924c-316d308648c8.png" alt="frame_chrome_mac_light_(48).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Additionally, you get detailed insight into when pre-aggregations were last built and exactly how long the builds took.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-check-the-status-of-preaggregations-and-partitions"&gt;
  &lt;/a&gt;
  How to Check the Status of Pre-Aggregations and Partitions
&lt;/h3&gt;

&lt;p&gt;After adding pre-aggregation definitions to your schema, you need to be aware if pre-aggregations have been successfully built. Not knowing pre-aggregation build history, if partitions were built at all and when, how long the builds took, can all negatively impact user experience.&lt;/p&gt;

&lt;p&gt;If you have multiple pre-aggregations with different or complex &lt;code&gt;refreshKey&lt;/code&gt;s, you need to know how up-to-date the pre-aggregated data is and when the pre-aggregation is going to be rebuilt.&lt;/p&gt;

&lt;p&gt;This will make sure your users are seeing up-to-date data with peak performance at all times.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-hosted Cube&lt;/strong&gt;. The Cube refresh worker and Cube Store routers log the state of pre-aggregations. You can see when the execution, loading, or saving of a pre-aggregation happens. This is what a sample log from the Cube Store routers looks like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Executing Load Pre Aggregation SQL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;scheduler-40686894-bd8f-417c-a341-af4c1e4e6bf6&lt;/span&gt; 
&lt;span class="s"&gt;--&lt;/span&gt;
  &lt;span class="s"&gt;SELECT&lt;/span&gt;
      &lt;span class="s"&gt;"orders".status "orders__status", date_trunc('day', ("orders".created_at::timestamptz AT TIME ZONE 'UTC')) "orders__created_at_day", count("orders".id) "orders__count"&lt;/span&gt;
    &lt;span class="s"&gt;FROM&lt;/span&gt;
      &lt;span class="s"&gt;public.orders AS "orders"  WHERE ("orders".created_at &amp;gt;= '2023-11-01T00:00:00.000Z'::timestamptz AND "orders".created_at &amp;lt;= '2023-11-30T23:59:59.999Z'::timestamptz) GROUP BY 1, &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="s"&gt;--&lt;/span&gt;
&lt;span class="s"&gt;2021-09-08 08:44:34,959 INFO  [cubestore::cluster] &amp;lt;pid:1&amp;gt; Running job completed (12.55392ms)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s"&gt;IdRow { id&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s"&gt;535, row&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Job { row_reference&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Table(Tables, 535), job_type&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TableImportCSV("temp://dev_pre_aggregations.orders_main20231101_z034ipqc_sntekhp5_1gjgtvi.csv.gz"), last_heart_beat&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2021-09-08T08:44:34.958894076Z, status&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Completed } }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cube Store supports a subset of MySQL protocol. It exposes port &lt;code&gt;3306&lt;/code&gt;. You can use the &lt;a href="https://www.configserverfirewall.com/ubuntu-linux/ubuntu-install-mysql-client/"&gt;standard MySQL CLI client&lt;/a&gt; to connect to Cube Store, or any other client compatible with the MySQL protocol.&lt;/p&gt;

&lt;p&gt;You connect to Cube Store with the MySQL CLI client like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql -h &amp;lt;CUBESTORE_IP&amp;gt; --user=cubestore -pcubestore
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once connected to the MySQL CLI, run this SQL command to see which tables are stored in Cube Store.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;mysql&amp;gt; SELECT * FROM information_schema.tables;&lt;/span&gt;
&lt;span class="s"&gt;+----------------------+-----------------------------------------------+&lt;/span&gt;
&lt;span class="pi"&gt;|&lt;/span&gt; &lt;span class="err"&gt;table_schema&lt;/span&gt;         &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;table_name&lt;/span&gt;                                    &lt;span class="err"&gt;|&lt;/span&gt;
&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="s"&gt;----------------------+-----------------------------------------------+&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20210101_5qjmf21t_nm2ig41s_1gjgraf |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20210201_uobzqlem_sz20hm0u_1gjgrag |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20210301_wslzhgsp_qyh1uclp_1gjgrah |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20210401_3saakqgn_gsq0jl30_1gjgrai |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20210501_u0u2qipc_eserpdse_1gjgrai |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20210601_recoxqse_pwslyqod_1gjgraj |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20210701_yfs1mnjz_q5l4tjwz_1gjgraj |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20210801_frhjq5yg_hevt225i_1gjgrak |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20210901_zceilsss_saxibkj0_1gjgral |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20211001_bykzagbx_frt1vmhn_1gjgral |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20211101_ooxvqjhl_rikgvl0q_1gjgram |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20211201_4lz4evnw_tuyd1tz_1gjgran  |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20211001_2qjkvn24_apusbfpo_1gjgrjb |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20210601_irjg1lj1_vhtdn2q_1gjgrjb  |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20210401_sb5f5vwh_jbkn43cn_1gjgrjb |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20210901_wzxpxmyl_qs3yhswd_1gjgrjb |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20210501_0zj2jntl_c0ku1ixv_1gjgrjb |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20211101_ekkyobcj_uld514mr_1gjgrjb |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20210301_2cbcp1up_tmvran0t_1gjgrjb |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20210701_gmqrnxo2_igl1uczp_1gjgrjb |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20210101_j3kmnnak_msfmdqko_1gjgrjb |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20210201_vfcrnd42_5gpbrwfj_1gjgrjb |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20210801_rozcl2rd_t5nefwhv_1gjgrjb |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; dev_pre_aggregations | orders_main20211201_255cpz4u_e43gsbpt_1gjgrjb |&lt;/span&gt;
&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="s"&gt;----------------------+-----------------------------------------------+&lt;/span&gt;
&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="s"&gt;4 rows in set (0.00 sec)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Cube Cloud&lt;/strong&gt; goes a step further and simplifies the use of pre-aggregations significantly. If you select the pre-aggregations tab, you can view all your pre-aggregations in one place. This lets you view build history, partitions, build times, refresh times, indices, and much more. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0nKwzL53--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/276f41bd-8b1c-4876-b995-2edd4c259fcd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0nKwzL53--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/276f41bd-8b1c-4876-b995-2edd4c259fcd.png" alt="frame_chrome_mac_light_(33).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-track-preaggregation-build-history-over-time"&gt;
  &lt;/a&gt;
  How to Track Pre-Aggregation Build History Over Time
&lt;/h3&gt;

&lt;p&gt;Having a detailed history of when pre-aggregation builds happen can help determine issues with stale data or even failing builds.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-hosted Cube&lt;/strong&gt;. When a Cube Refresh Worker triggers a pre-aggregation build, and Cube Store runs the actual build, it will always log a message with a timestamp. But, these logs are ephemeral, and can often get lost in the &lt;code&gt;stdout&lt;/code&gt; stream.&lt;/p&gt;

&lt;p&gt;You can tail these logs and track build history over time. However, a much better option would be to use a custom logger like &lt;a href="https://github.com/winstonjs/winston"&gt;Winston&lt;/a&gt; or dedicated log monitoring agent like &lt;a href="https://fluentbit.io/"&gt;Fluentbit&lt;/a&gt; to forward these logs to a central location like &lt;a href="https://www.elastic.co/log-monitoring"&gt;Elasticsearch&lt;/a&gt; or any &lt;a href="https://www.g2.com/categories/log-monitoring?utf8=%E2%9C%93&amp;amp;order=g2_score"&gt;Log Management tool on the market&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here's a guide from our &lt;a href="https://cube.dev/docs/configuration/extending-cubejs#example-sending-cube-js-logs-to-loggly"&gt;docs showing how to forward logs to Loggly&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cube Store&lt;/strong&gt; simplifies this process by giving you a Build History tab to get a list of when every pre-aggregation build happened.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O5Wgod0Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/5f1ae86e-19a9-490a-86ef-74aeafec2d76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O5Wgod0Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/5f1ae86e-19a9-490a-86ef-74aeafec2d76.png" alt="frame_chrome_mac_light_(34).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also see the anatomy of pre-aggregation names on hover. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-preview-preaggregation-data"&gt;
  &lt;/a&gt;
  How to Preview Pre-Aggregation Data
&lt;/h3&gt;

&lt;p&gt;Even though you know pre-aggregation builds are successful, you still don't know if the data is valid. You need a way to preview the tables and their content in Cube Store to be absolutely sure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-hosted Cube&lt;/strong&gt;. You can preview the pre-aggregation tables the same way you looked into the state of pre-aggregations, by connecting to Cube Store with the MySQL CLI client, or any other client you prefer.&lt;/p&gt;

&lt;p&gt;Use a &lt;code&gt;SELECT&lt;/code&gt; command to see the content of a pre-aggregation table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;mysql&amp;gt; select * from dev_pre_aggregations.orders_main20231101_ayw2ads4_sntekhp5_1gjk5dh;&lt;/span&gt;
&lt;span class="s"&gt;+----------------+--------------------------+---------------+&lt;/span&gt;
&lt;span class="pi"&gt;|&lt;/span&gt; &lt;span class="err"&gt;orders__status&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;orders__created_at_day&lt;/span&gt;   &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;orders__count&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt;
&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="s"&gt;----------------+--------------------------+---------------+&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; completed      | 2023-11-02T00:00:00.000Z |             4 |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; completed      | 2023-11-03T00:00:00.000Z |             2 |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; completed      | 2023-11-04T00:00:00.000Z |             2 |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; processing     | 2023-11-02T00:00:00.000Z |             4 |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; shipped        | 2023-11-01T00:00:00.000Z |             1 |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; shipped        | 2023-11-02T00:00:00.000Z |             1 |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; shipped        | 2023-11-03T00:00:00.000Z |             4 |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; shipped        | 2023-11-04T00:00:00.000Z |             1 |&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="s"&gt; shipped        | 2023-11-05T00:00:00.000Z |             1 |&lt;/span&gt;
&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="s"&gt;----------------+--------------------------+---------------+&lt;/span&gt;
&lt;span class="err"&gt;9&lt;/span&gt;&lt;span class="s"&gt; rows in set (0.01 sec)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, the pre-aggregation table is stored in Cube Store. Alternatively, you can also &lt;a href="https://cube.dev/docs/caching/using-pre-aggregations#optimizing-pre-aggregation-build-times-export-bucket"&gt;store pre-aggregation data in cloud storage&lt;/a&gt; like AWS S3 or GCS. To view the data, access the S3 or GCS bucket directly through your cloud provider.&lt;/p&gt;

&lt;p&gt;Sadly, previewing pre-aggregation tables in Cube Store is rarely done when using self-hosted Cube simply because there are a few hoops to jump through.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cube Cloud&lt;/strong&gt; makes it much easier with a dedicated &lt;code&gt;Preview&lt;/code&gt; tab that's visible after drilling down to a single pre-aggregation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dMwRWY8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/dfa7e141-af06-49a3-8ee4-75444f9b412a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dMwRWY8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/dfa7e141-af06-49a3-8ee4-75444f9b412a.png" alt="frame_chrome_mac_light_(35).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Can you see the similarity to the sample drawing from the beginning of the article? You can clearly see how rows are grouped similarly to how a &lt;code&gt;GROUP BY&lt;/code&gt; statement works in SQL.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-serve-requests-only-from-preaggregations"&gt;
  &lt;/a&gt;
  How to Serve Requests Only from Pre-Aggregations
&lt;/h3&gt;

&lt;p&gt;Serving requests solely from pre-aggregations is a great way to keep query latency low, but there is a significant overhead you need to be aware of in order to enable it.&lt;/p&gt;

&lt;p&gt;You need to have a Cube cluster configured with a Cube refresh worker and a Cube Store cluster. This ensures pre-aggregations are &lt;strong&gt;always&lt;/strong&gt; available for queries. It's not before then you can set the Cube API instance to only return data from pre-aggregations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-hosted Cube&lt;/strong&gt;. You use the &lt;code&gt;CUBEJS_ROLLUP_ONLY&lt;/code&gt; environment variable and set it to &lt;code&gt;true&lt;/code&gt; in the Cube API instance. This prevents serving data from the source database and building pre-aggregations on-demand.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cube Cloud&lt;/strong&gt;. You enable the &lt;code&gt;Rollup Only Mode&lt;/code&gt; toggle in the settings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--No43fmVg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/67876d9b-d1e6-431b-8aa5-61cd5efaa915.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--No43fmVg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/67876d9b-d1e6-431b-8aa5-61cd5efaa915.png" alt="frame_chrome_mac_light_(36).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Self-hosted Cube deployments are equipped with a decent set of tools and options to work with pre-aggregations. However, Cube Cloud provides a few additional tools as well as the managed infrastructure to make working with pre-aggregations hassle-free.&lt;/p&gt;

&lt;p&gt;You can &lt;a href="https://cube.dev/cloud"&gt;register for Cube Cloud&lt;/a&gt; right away!&lt;/p&gt;

&lt;p&gt;I'd love to hear your feedback about Cube Cloud in the Cube Community Slack. &lt;a href="https://slack.cube.dev/"&gt;Click here to join&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Until next time, stay curious, and have fun coding. Also, feel free to &lt;a href="https://github.com/cube-js/cube.js"&gt;leave Cube a ⭐ on GitHub&lt;/a&gt; if you liked this article. ✌️&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>database</category>
      <category>bigdata</category>
      <category>analytics</category>
    </item>
    <item>
      <title>GraphQL Code Generator with TypeScript and Prisma models</title>
      <author>TheGuildBot</author>
      <pubDate>Mon, 20 Dec 2021 12:08:47 +0000</pubDate>
      <link>https://dev.to/the-guild/graphql-code-generator-with-typescript-and-prisma-models-4616</link>
      <guid>https://dev.to/the-guild/graphql-code-generator-with-typescript-and-prisma-models-4616</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article was published on 2021-12-19 by &lt;a href="https://twitter.com/tidhar_gilad"&gt;Gilad Tidhar&lt;/a&gt; @ &lt;a href="https://the-guild.dev/"&gt;The Guild Blog&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;GraphQL has some amazing tools that can make your life easier. One of those tools is &lt;a href="https://graphql-code-generator.com/"&gt;GraphQL Code-Generator&lt;/a&gt; which helps you create types (and more) based on your GraphQL schema.&lt;/p&gt;

&lt;p&gt;If you're creating a GraphQL server you'd probably want to have a database behind it with somthing like &lt;a href="https://www.prisma.io/"&gt;Prisma&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, how can you use &lt;a href="https://www.prisma.io/"&gt;Prisma&lt;/a&gt; for your database and still use the GraphQL-Codegen? this article covers the process of using &lt;a href="https://www.prisma.io/"&gt;Prisma&lt;/a&gt; with &lt;a href="https://graphql-code-generator.com/"&gt;GraphQL Code-Generator&lt;/a&gt;, and the configuration flags that will boost your developer experience.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#what-is-prisma"&gt;
  &lt;/a&gt;
  What is Prisma?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.prisma.io/"&gt;Prisma&lt;/a&gt; is an open source fully-typed next-generation ORM. It consists of the following parts:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prisma Client&lt;/strong&gt;: Auto-generated and type-safe query builder for Node.js &amp;amp; TypeScript&lt;br&gt;
&lt;strong&gt;Prisma Migrate&lt;/strong&gt;: Migration system&lt;br&gt;
&lt;strong&gt;Prisma Studio&lt;/strong&gt;: GUI to view and edit data in your database&lt;/p&gt;

&lt;p&gt;Each Prisma project has a schema, which it used to define its models.&lt;/p&gt;

&lt;p&gt;Every project that uses a tool from the Prisma toolkit starts with a Prisma schema file.&lt;/p&gt;

&lt;p&gt;The Prisma schema allows developers to define their application models in an intuitive data modeling language.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-prisma"&gt;
  &lt;/a&gt;
  Why Prisma?
&lt;/h2&gt;

&lt;p&gt;Prisma's main goal is to make application developers more productive when working with databases.&lt;/p&gt;

&lt;p&gt;Here are a few examples of how Prisma achieves this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Thinking in objects&lt;/strong&gt; instead of mapping relational data&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Queries not classes&lt;/strong&gt; to avoid complex model objects&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Single source of truth&lt;/strong&gt; for database and application models&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Healthy constraints&lt;/strong&gt; that prevent common pitfalls and antipatterns&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;An abstraction that makes the right thing easy&lt;/strong&gt; ("pit of success")&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Type-safe database queries&lt;/strong&gt; that can be validated at compile time&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Less boilerplate&lt;/strong&gt; so developers can focus on the important parts of their app&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Auto-completion in code editors&lt;/strong&gt; instead of needing to look up documentation&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch"&gt;A tutorial about how to get started with Prisma&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#graphql-code-generator"&gt;
  &lt;/a&gt;
  GraphQL Code Generator
&lt;/h1&gt;

&lt;p&gt;The &lt;a href="https://graphql-code-generator.com/"&gt;GraphQL Code-Generator&lt;/a&gt; is an easy way to create type saftey with your GraphQL project.&lt;/p&gt;

&lt;p&gt;It automatically generates TypeScript types based on your GraphQL schema. This is very useful because it reduces the chances to write mistakes, and you can locate bugs at build-time.&lt;/p&gt;

&lt;p&gt;For example, here is an example for JavaScript/TypeScript resolver without the codegen, as you can see, we need to give everything a type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
         &lt;span class="na"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="nl"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="nl"&gt;take&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="p"&gt;},&lt;/span&gt;
         &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GraphQLContext&lt;/span&gt;
       &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{...}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, with the codegen, the manual types are no longer needed, because it genereates the types, so typescript will now know which TypeScript types to use and validate:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Resolvers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./generated/graphql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolvers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Resolvers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, now that the resolvers are typed, we don't need to define types for each resolver.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are new to GraphQL-Codegen, you can follow &lt;a href="https://www.graphql-code-generator.com/docs/getting-started/index"&gt;a tutorial about how to get started with GraphQL codegen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also &lt;a href="https://dev.to/blog/better-type-safety-for-resolvers-with-graphql-codegen"&gt;find here a blog post about how to use GraphQL Code-Generator with the &lt;code&gt;typescript-resolvers&lt;/code&gt; plugin&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#benefits-of-writing-fullytyped-code"&gt;
  &lt;/a&gt;
  Benefits of writing fully-typed code
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;  Better code completion and syntax highlighting.&lt;/li&gt;
&lt;li&gt;  You can get hints and documentation inside your IDE while you code. This reduces the likelihood of making incorrect assumptions about the behavior of specific functions/methods.&lt;/li&gt;
&lt;li&gt;  It’s easier to find things. For any variable or function, you can easily jump to its class definition without leaving the IDE and without having to know anything about the directory structure of the project. Conversely, for any class or function definition, you can easily and unambiguously see where that class or function is used in your code and jump to it without leaving the IDE. (Statically typed languages make it easier for IDEs to do this).&lt;/li&gt;
&lt;li&gt;  Static typing makes it easier to work with relational databases and other systems which also rely on static types — It helps you catch type mismatches sooner at compile-time.&lt;/li&gt;
&lt;li&gt;  It can help reduce the likelihood of some kinds of errors. For example, in dynamically typed languages, if you’re not careful with sanitising user input, you can end up doing weird stuff like (for example) trying to add a number 10 with the string “8” and you would get the string “108” as a result instead of the number 18 that you were expecting.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#using-graphql-codegen-and-prisma-together"&gt;
  &lt;/a&gt;
  Using GraphQL codegen and Prisma together
&lt;/h1&gt;

&lt;p&gt;After learning the benefits of Prisma and GraphQL codegen, you might want to use both together! But theres a few problems:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#name-conflicts"&gt;
  &lt;/a&gt;
  Name Conflicts
&lt;/h3&gt;

&lt;p&gt;The Prisma models and the GraphQL models might conflict with each other.&lt;/p&gt;

&lt;p&gt;This is because the GraphQL codegen automatically uses the types from the GraphQL schema, and Prisma automatically generates types from your Prisma models.&lt;/p&gt;

&lt;p&gt;If your GraphQL schema is using &lt;code&gt;type User { ... }&lt;/code&gt; and your Prisma model is using &lt;code&gt;model User { }&lt;/code&gt;, you might have a naming conflict.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database-types-graphql-types"&gt;
  &lt;/a&gt;
  Database types !== GraphQL types
&lt;/h3&gt;

&lt;p&gt;The types for your database and not the same as your GraphQL types. In your GraphQL layer, you might take different limitations/constraints than you have in your database.&lt;/p&gt;

&lt;p&gt;For example, some prisma operations get arguments which are for filtering and paginating, now, if you have this type of filter in your GraphQL schema, it might look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Query&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;take&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Feed&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the arguments &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;skip&lt;/code&gt; and &lt;code&gt;take&lt;/code&gt; are nullable which means that GraphQL will send them as null if left without value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Whats the problem with this?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, for filtering and paginating prisma takes arguments which either have a value or are &lt;code&gt;undefined&lt;/code&gt;, but not &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is a problem for us because the type the codegen uses for maybe values by default (values that are &lt;code&gt;null&lt;/code&gt;able), could be &lt;code&gt;null&lt;/code&gt; (&lt;code&gt;null | undefined | T&lt;/code&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-do-we-fix-this"&gt;
  &lt;/a&gt;
  How do we fix this?
&lt;/h3&gt;

&lt;p&gt;Well, for the first problem, the code generator has an option called &lt;code&gt;mappers&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Using a mapper gives you the option to map one type to another.&lt;/p&gt;

&lt;p&gt;This option helps us with our problem because we can just tell the codegen to use the Prisma models instead of the default types generated from the GraphQL schema!&lt;/p&gt;

&lt;p&gt;The second fix is a configuration flag called &lt;code&gt;inputMaybeValue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Nullable types are represented by Maybe in the GraphQL codegen. The &lt;code&gt;inputMaybeValue&lt;/code&gt;, lets you change the types that arguments can be!&lt;/p&gt;

&lt;p&gt;Using the two configuration flags mentioned above, we can tell GraphQL codegen what TypeScript types to generate and how to map the GraphQL types to Prisma models&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-mappers-endraw-"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;mappers&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Mappers are actually really easy to use, all you need to do is add them to your &lt;code&gt;codegen.yml&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;For exapmle, lets say I have a Prisma model which is called &lt;code&gt;User&lt;/code&gt;, and my GraphQL schema also uses a &lt;code&gt;type User&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For my project to work with its database, it needs to use the Prisma model instead of the GraphQL one, so I should map my User model from prisma to my User type in GraphQL.&lt;/p&gt;

&lt;p&gt;Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http://localhost:3000/graphql&lt;/span&gt;
&lt;span class="na"&gt;documents&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./src/graphql/*.graphql&lt;/span&gt;
&lt;span class="na"&gt;generates&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;graphql/generated.ts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;typescript-operations&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;typescript-resolvers&lt;/span&gt;
  &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;mappers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;User&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.prisma/client#User as UserModel&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Under the &lt;code&gt;mappers&lt;/code&gt;, you can see we take the GraphQL &lt;code&gt;User&lt;/code&gt; type, and set it to be using the exported type automatically created by Prisma.&lt;/p&gt;

&lt;p&gt;We set it to be named &lt;code&gt;UserModel&lt;/code&gt;, so it won't conflict with the GraphQL definition of the GraphQL &lt;code&gt;User&lt;/code&gt; type.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-inputmaybevalue-endraw-"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;inputMaybeValue&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;inputMaybeValue&lt;/code&gt; is fairly simple to use, just add it under &lt;code&gt;codegen.yml&lt;/code&gt; config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http://localhost:3000/graphql&lt;/span&gt;
&lt;span class="na"&gt;documents&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./src/graphql/*.graphql&lt;/span&gt;
&lt;span class="na"&gt;generates&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;graphql/generated.ts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;typescript-operations&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;typescript-resolvers&lt;/span&gt;
  &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;mappers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;User&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.prisma/client#User as UserModel&lt;/span&gt;
    &lt;span class="na"&gt;inputMaybeValue&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;undefined | T&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the default value to &lt;code&gt;inputMaybe&lt;/code&gt; (The type of nullable arguments) will be either &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;T&lt;/code&gt;, leading to an easy type-compatibility between your GraphQL &lt;code&gt;input&lt;/code&gt; arguments and the Prisma SDK requirements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-now"&gt;
  &lt;/a&gt;
  What now?
&lt;/h2&gt;

&lt;p&gt;Now, run GraphQL-Codegen and the Prisma Codegen and you should get a fully-typed resolver. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Resolvers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./generated/graphql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolvers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Resolvers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Codegen will generate Resolvers type, and&lt;/span&gt;
      &lt;span class="c1"&gt;// will expect you to return here an object of&lt;/span&gt;
      &lt;span class="c1"&gt;// Prisma's User model.&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;User&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>graphql</category>
      <category>typescript</category>
      <category>codegen</category>
      <category>prisma</category>
    </item>
    <item>
      <title>GraphQL AuthZ - GraphQL Authorization layer</title>
      <author>TheGuildBot</author>
      <pubDate>Mon, 20 Dec 2021 12:06:40 +0000</pubDate>
      <link>https://dev.to/the-guild/graphql-authz-graphql-authorization-layer-5fca</link>
      <guid>https://dev.to/the-guild/graphql-authz-graphql-authorization-layer-5fca</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article was published on 2021-12-19 by &lt;a href="https://github.com/dimatill"&gt;Dmitry Til&lt;/a&gt; @ &lt;a href="https://the-guild.dev/"&gt;The Guild Blog&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Today we are excited to introduce GraphQL AuthZ - a new open-source library for adding authorization layers in different GraphQL architectures.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;GraphQL AuthZ is a flexible modern way of adding an authorization layer on top of your existing GraphQL microservices or monolith backend systems.&lt;/p&gt;

&lt;p&gt;It plays well with both code-first and schema-first (SDL) development, supports different ways of attaching authorization rules, has zero dependencies in the core package (aside from a peer dependency on graphql-js), and keeps the schema clean from any authorization logic!&lt;/p&gt;

&lt;p&gt;Also, GraphQL AuthZ has integration examples for all major GraphQL frameworks and libraries. Let's dig a little deeper and break down the core features and how they can help you improve your GraphQL developer experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;GraphQL AuthZ wraps the graphql.js execution phase and runs logic for enforcing defined authorization rules before and after this phase. The key function from &lt;code&gt;graphql-js&lt;/code&gt; that is responsible for running the execution logic is named &lt;code&gt;execute&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This simplified pseudo-code describes how the GraphQL AuthZ hooks into the process by wrapping the &lt;code&gt;execute&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;execute&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;originalExecute&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;graphql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;preExecutionErrors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;runPreExecutionRules&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;preExecutionErrors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;preExecutionErrors&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;originalExecute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postExecutionErrors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;runPostExecutionRules&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postExecutionErrors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;postExecutionErrors&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By wrapping existing functionality we gain the following key benefits.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Compatibility with modern GraphQL technologies providing ways to wrap the graphql.js &lt;code&gt;execute&lt;/code&gt; function. Here are a few working examples for &lt;a href="https://github.com/AstrumU/graphql-authz/tree/main/examples/packages/envelop"&gt;Envelop&lt;/a&gt;, &lt;a href="https://github.com/AstrumU/graphql-authz/tree/main/examples/packages/graphql-helix"&gt;GraphQL Helix&lt;/a&gt;, &lt;a href="https://github.com/AstrumU/graphql-authz/tree/main/examples/packages/apollo-server-code-first"&gt;Apollo Server&lt;/a&gt;, and &lt;a href="https://github.com/AstrumU/graphql-authz/tree/main/examples/packages/express-graphql"&gt;express-graphql&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;  The executable GraphQL schema does not contain any authorization logic allowing more flexible re-usage for other use-cases&lt;/li&gt;
&lt;li&gt;  Authorization rules can be added on top of an existing remote GraphQL schema. GraphQL AuthZ can be added as a layer on your GraphQL gateway that composes smaller subgraphs into one big graph.&lt;/li&gt;
&lt;li&gt;  Separation of the authorization logic into two phases

&lt;ul&gt;
&lt;li&gt;  The pre-execution phase for static authorization rules based on the context and incoming operation&lt;/li&gt;
&lt;li&gt;  The post-execution phase for flexible authorization rules based on the execution result&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#failing-early-in-the-preexecution-phase"&gt;
  &lt;/a&gt;
  Failing early in the pre-execution phase
&lt;/h2&gt;

&lt;p&gt;With GraphQL AuthZ it's possible to execute authorization logic before any of the resolvers have been executed. This empowers you to fail the request in the early stage, send back an error and reduce server workload.&lt;/p&gt;

&lt;p&gt;This technique works the best for authorization logic that is not dependent on remote data sources. For example, checking if the user is authenticated or has some certain role or permission.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// creating pre-execution rules&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;IsAuthenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;preExecRule&lt;/span&gt;&lt;span class="p"&gt;()((&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;IsEditor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;preExecRule&lt;/span&gt;&lt;span class="p"&gt;()((&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;editor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, if you need the flexibility for fetching data from a remote source such as a database before you can determine whether an operation should be executed, you still have the power to leverage those data sources with async code.&lt;/p&gt;

&lt;p&gt;This technique is a perfect fit for mutation fields, as you want to avoid executing the mutation operation if the user has insufficient permissions e.g. he does not own a specific resource.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// user can only publish a post if he owns it&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CanPublishPost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;preExecRule&lt;/span&gt;&lt;span class="p"&gt;()(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fieldArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fieldArgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authorId&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-the-graphql-schema-as-a-data-source"&gt;
  &lt;/a&gt;
  Using the GraphQL schema as a data source
&lt;/h2&gt;

&lt;p&gt;By pursuing the GraphQL AuthZ approach your executable schema does not contain any authorization logic. This simplifies using the executable schema as a data source. For example, instead of calling a remote database using an interface attached to our context object directly, the &lt;code&gt;graphql&lt;/code&gt; function from &lt;code&gt;graphql.js&lt;/code&gt; package could be called, with the executable schema as an argument along with graphql operation. By doing this, the authorization layer is not dependent on the underlying database(s), its architecture, and ORM(s). It is dependent only on the GraphQL schema which is a dependency of the GraphQL authorization layer by design.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// using schema as a data source inside pre-execution rule&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CanPublishPost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;preExecRule&lt;/span&gt;&lt;span class="p"&gt;()(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fieldArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;graphQLResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`query post($postId: ID!) { post(id: $postId) { author { id } } }`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;variableValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;postId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fieldArgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;graphQLResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Authorization logic could require any kind of data fetched from different databases or (micro)services. Some data points could even be resolved by third-party microservices or APIs that are not part of the composed graph.&lt;/p&gt;

&lt;p&gt;By using the GraphQL schema as the data source, authorization rules don't need to be aware of complex implementation details or directly connect to different databases or microservices.&lt;/p&gt;

&lt;p&gt;This makes GraphQL AuthZ extremely powerful, especially for subgraphs in a microservice architecture with centralized gateway-level authorization.&lt;/p&gt;

&lt;p&gt;All the subschemas could live without any authorization logic and a federated or stitched gateway can leverage GraphQL AuthZ for actually applying global authorization logic for the whole graph while leveraging the graph for fetching the data required for doing so, without having to be aware of GraphQL resolver implementation details.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reduce-remote-procedure-calls-with-postexecution-rules"&gt;
  &lt;/a&gt;
  Reduce remote procedure calls with post-execution rules
&lt;/h2&gt;

&lt;p&gt;In addition to the pre-execution rules, GraphQL AuthZ also allows you to write post-execution rules.&lt;/p&gt;

&lt;p&gt;Fetching remote data from within authorization rules is powerful but it adds overhead and requires additional network roundtrips. In most cases, the data required for performing authorization logic is closely related to entities fetched via the GraphQL operation selection set. You can avoid this by performing authorization logic based on the execution result in the post-execution phase.&lt;/p&gt;

&lt;p&gt;In your post-execution rules, you can specify a selection set for fetching additional data, related to the rule target, that is required for running the rule.&lt;/p&gt;

&lt;p&gt;For example, if your rule is attached to some object field it could require additional information about sibling fields with their relations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// creating post-execution rule&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CanReadPost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;postExecRule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selectionSet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{ status author { id } }&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fieldArgs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using this technique we reduce remote procedure calls to individual data sources by executing authorization logic on top of GraphQL execution result that is enriched with the additional data specified by the authorization rules. Since related data is often stored in the same place it can be fetched from a data source in one roundtrip (via the GraphQL schema) instead of performing one remote procedure call for the authorization and one call for the actual data populating.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#microservices"&gt;
  &lt;/a&gt;
  Microservices
&lt;/h2&gt;

&lt;p&gt;With GraphQL AuthZ it is possible to implement a centralized gateway authorization layer as well as microservice level authorization. You can choose between storing the whole authorization schema in a holistic way on a stitched or federated gateway or having dedicated authorization schemas for each subgraph/schema specified by your services. It is even possible to mix both approaches!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Shifting this configuration out of the gateway makes subschemas autonomous, and allows them to push their own configuration up to the gateway—enabling more sophisticated schema releases.” — &lt;a href="https://github.com/gmac/schema-stitching-handbook/tree/master/stitching-directives-sdl"&gt;schema stitching handbook&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;@graphql-authz/directive&lt;/code&gt; package provides a GraphQL directive that can be used to annotate types and fields within your subschemas SDL and a configuration transformer that can be used on the gateway to convert the subschema directives into explicit authorization settings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="c"&gt;# using @authz directive&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;authz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;IsAdmin&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;!]!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;authz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CanReadPost&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;!]!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;authz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;IsAuthenticated&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;publishPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;authz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CanPublishPost&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On top of that directives can as well be used in monolith architecture.&lt;/p&gt;

&lt;p&gt;If you are not pursuing a schema-first (SDL) development flow and are more a fan of the code-first approach (which does not let you specify directives without framework-specific voodoo magic), the authorization schema can also be described as a plain JSON object. Allowing you to specify the rules that should be executed on your object types, interfaces, and fields.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// defining auth schema&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;__authz&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CanReadPost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;User&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;__authz&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IsAdmin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;Mutation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;publishPost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;__authz&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CanPublishPost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;__authz&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IsAuthenticated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="c1"&gt;// wildcards are supported. read more: https://github.com/AstrumU/graphql-authz#wildcard-rules&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;__authz&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Reject&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;__authz&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IsAuthenticated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#comparing-graphql-authz-with-graphql-shield"&gt;
  &lt;/a&gt;
  Comparing GraphQL AuthZ with GraphQL Shield
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/maticzav/graphql-shield"&gt;GraphQL Shield&lt;/a&gt; is a great tool for creating authorization layers that has vast adoption from the community. In fact, GraphQL AuthZ is highly inspired by GraphQL Shield! However, GraphQL Shield uses a different approach compared to GraphQL AuthZ for applying authorization rules.&lt;/p&gt;

&lt;p&gt;The main difference is GraphQL Shield uses field middleware by wrapping all the &lt;code&gt;resolver&lt;/code&gt; functions within your GraphQL schema for executing authorization logic during the data-resolving phase, while GraphQL AuthZ wraps the entire &lt;code&gt;execute&lt;/code&gt; logic.&lt;/p&gt;

&lt;p&gt;The benefits of the wrapping approach are described in previous paragraphs, however, there are also some drawbacks. For example, with GraphQL AuthZ post-execution rules there is no ability to fail the request early because post-execution rules are executed after all resolvers are executed. GraphQL Shield, on the other hand, can fail the request during the execution phase which happens before the post-execution phase but later than the pre-execution phase. On the other hand, post-execution rules have the benefit of accessing the resolved value of the field they are specified on and, furthermore, even the sibling fields that are specified via the rules selection set.&lt;/p&gt;

&lt;p&gt;The middleware approach of GraphQL shield is missing these possibilities because authorization logic is executed in the context of field resolvers and has access only to the parent object which is the value returned from the parent field resolver. At that stage, the wrapped field resolvers have not been executed yet.&lt;/p&gt;

&lt;p&gt;Another feature in GraphQL Shield is the built-in contextual caching mechanism for rules. At the moment, GraphQL AuthZ has no built-in caching, but you can implement it yourself within the GraphQL AuthZ rules, or in the future caching could even become a built-in feature. (pull requests are more than welcome)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-approach-to-choose"&gt;
  &lt;/a&gt;
  Which approach to choose?
&lt;/h2&gt;

&lt;p&gt;Let's wrap up all the use-cases mentioned above and also give a library recommendation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  If you have very few places that should be covered by authorization and you don't plan to increase such places, you can just add authorization logic right inside resolvers to not overcomplicate things.&lt;/li&gt;
&lt;li&gt;  If all of your authorization logic doesn't depend on the data and shouldn't perform complex calculations, you can use &lt;a href="https://www.envelop.dev/plugins/use-operation-field-permissions"&gt;operation-field-permissions&lt;/a&gt; &lt;a href="https://www.envelop.dev/"&gt;Envelop&lt;/a&gt; plugin.&lt;/li&gt;
&lt;li&gt;  If your authorization logic contains some calculations which are the same for many fields of your schema, you can use &lt;a href="https://github.com/maticzav/graphql-shield"&gt;GraphQL Shield&lt;/a&gt; to leverage the built-in contextual caching mechanism.&lt;/li&gt;
&lt;li&gt;  If your authorization logic heavily depends on the data or you want to use schema directives to attach auth rules, you can use &lt;a href="https://github.com/AstrumU/graphql-authz"&gt;GraphQL AuthZ&lt;/a&gt; to leverage the 'GraphQL schema as a data source' pattern and post-execution rules.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;GraphQL AuthZ is a new approach for applying GraphQL native authorization. We are happy that we can finally share this library with the community and keen to learn about the ways it might be used within your next project! Don't hesitate to contact us for questions or to evaluate whether this library might be a fit for your architecture.&lt;/p&gt;

&lt;p&gt;Please check out the &lt;a href="https://github.com/AstrumU/graphql-authz"&gt;GraphQL AuthZ repository on GitHub&lt;/a&gt; for learning more. You can find a tutorial on how to set it up in different ways and with different technologies.&lt;/p&gt;

&lt;p&gt;The repository also contains the following, ready to run, examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://github.com/AstrumU/graphql-authz/tree/main/examples/packages/apollo-server-schema-first"&gt;Apollo Server (schema-first, directives)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/AstrumU/graphql-authz/tree/main/examples/packages/apollo-server-code-first"&gt;Apollo Server (code-first, extensions)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/AstrumU/graphql-authz/tree/main/examples/packages/express-graphql"&gt;express-graphql (schema-first, directives)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/AstrumU/graphql-authz/tree/main/examples/packages/graphql-helix"&gt;GraphQL Helix (schema-first, authSchema)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/AstrumU/graphql-authz/tree/main/examples/packages/envelop"&gt;Envelop (schema-first, directives)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/AstrumU/graphql-authz/tree/main/examples/packages/type-graphql"&gt;TypeGraphQL (code-first, extensions)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/AstrumU/graphql-authz/tree/main/examples/packages/nestjs"&gt;NestJS (code-first, directives)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/AstrumU/graphql-authz/tree/main/examples/packages/schema-stitching"&gt;Schema Stitching (gateway, directives)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/AstrumU/graphql-authz/tree/main/examples/packages/apollo-federation"&gt;Apollo Federation (gateway, authSchema)&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>graphql</category>
      <category>authorization</category>
      <category>graphqlauthz</category>
    </item>
    <item>
      <title>GraphQL Authentication with Envelop and Auth0</title>
      <author>TheGuildBot</author>
      <pubDate>Mon, 20 Dec 2021 12:06:09 +0000</pubDate>
      <link>https://dev.to/the-guild/graphql-authentication-with-envelop-and-auth0-2cie</link>
      <guid>https://dev.to/the-guild/graphql-authentication-with-envelop-and-auth0-2cie</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article was published on 2021-12-19 by &lt;a href="https://twitter.com/n1rual"&gt;Laurin Quast&lt;/a&gt; @ &lt;a href="https://the-guild.dev/"&gt;The Guild Blog&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Authentication in the process of identifying who is trying to access our API. Building our own solution can be hard and cause severe security issue if done wrong. In recent years third-party authentication providers became quite popular. One of those is Auth0, which comes with an exceptional free plan allowing up to 7.000 active users and unlimited logins, making it one of the best available solutions for getting started.&lt;/p&gt;

&lt;p&gt;In this guide we will go through all the steps required for integrating authentication into an existing envelop setup using the &lt;a href="https://www.envelop.dev/plugins/use-auth0"&gt;&lt;code&gt;@envelop/auth0&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Ideally, you already have your basic envelop setup with your http framework of choice. This guide we will be based on the &lt;a href="https://github.com/dotansimha/envelop/tree/main/examples/graphql-helix"&gt;&lt;code&gt;graphql-helix&lt;/code&gt; fastify example&lt;/a&gt;, but the code can be easily transferred to any other example as listed on our &lt;a href="https://envelop.dev/docs/integrations"&gt;Integrations and Examples documentation&lt;/a&gt;. In case you are hitting any roadblocks feel free to reach out to us via the chat box on this page! The full code of the end-result is also available in our examples &lt;a href="https://github.com/dotansimha/envelop/tree/main/examples/graphql-helix-auth0"&gt;&lt;code&gt;graphql-helix-auth0&lt;/code&gt; fastify example&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-dependencies"&gt;
  &lt;/a&gt;
  Installing dependencies
&lt;/h2&gt;

&lt;p&gt;We start by installing the package into our envelop setup with your favorite Package manager.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-E&lt;/span&gt; @envelop/auth0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-the-auth0-plugin-to-the-envelop-setup"&gt;
  &lt;/a&gt;
  Adding the Auth0 Plugin to the Envelop setup
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useAuth0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@envelop/auth0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// ... other imports and code&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getEnveloped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;envelop&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;useSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;useAuth0&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;TODO&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;audience&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;TODO&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;extendContextField&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auth0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// ... server code&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break down the code. There are several configuration options we need to pass to the plugin.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/strong&gt; The domain of the Auth0 server we need to communicate with for authenticating a user. We will fill this out in the next step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;audience&lt;/code&gt;&lt;/strong&gt; The audience is the identifier of the API and is forwarded to Auth0 in order to specify for which API we are trying to authenticate our user for. E.g. if our API is hosted on &lt;code&gt;http://localhost:3000/graphql&lt;/code&gt;, we would pass that value. We will fill this out in the next step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;extendContextField&lt;/code&gt;&lt;/strong&gt; Once a user got successfully authenticated the authentication information is added on the context object under this field. In our resolvers we can then access the authentication information via &lt;code&gt;context.auth?.sub&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-auth0-api"&gt;
  &lt;/a&gt;
  Setting up the Auth0 API
&lt;/h2&gt;

&lt;p&gt;In order to properly configure the &lt;code&gt;useAuth0&lt;/code&gt; plugin we need the &lt;code&gt;domain&lt;/code&gt; and &lt;code&gt;audience&lt;/code&gt; values. We will retrieve them by setting and configuring Auth0 from scratch!&lt;/p&gt;

&lt;p&gt;If didn't already sign up for Auth0, you should do it now on &lt;a href="https://auth0.com/sign-up"&gt;Auth0 Sign Up&lt;/a&gt;. Since you can sign up with your GitHub or Google Account it should be super fast!&lt;/p&gt;

&lt;p&gt;After logging in navigate to the &lt;a href="https://manage.auth0.com/dashboard"&gt;Auth0 dashboard&lt;/a&gt; and from there to the APIs page, where we will click the &lt;strong&gt;Create API&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wFjCD4rD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://the-guild.dev/blog-assets/graphql-authentication-with-envelop-and-auth0/01-dashboard.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wFjCD4rD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://the-guild.dev/blog-assets/graphql-authentication-with-envelop-and-auth0/01-dashboard.jpg" alt="Auth0 Dashboard" width="880" height="580"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose any name for the API, we are going with &lt;code&gt;Envelop Demo&lt;/code&gt; for this example.&lt;br&gt;
The &lt;code&gt;Identifier&lt;/code&gt; field should be set to the URL of our GraphQL API. We are hosting our API on localhost and set it to the host and port on which our fastify helix server is served, which is &lt;code&gt;http://localhost:3000/graphql&lt;/code&gt;. For production you should instead set it to the URL of the production server.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aQvqhplT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://the-guild.dev/blog-assets/graphql-authentication-with-envelop-and-auth0/02-create-api.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aQvqhplT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://the-guild.dev/blog-assets/graphql-authentication-with-envelop-and-auth0/02-create-api.jpg" alt="Auth0 API" width="880" height="580"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can ignore the Signing Algorithm option and go with the pre-set value. Once everything is filled out properly we can click the &lt;code&gt;Create&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;Now we already have one of the missing config options we needed &lt;code&gt;audience&lt;/code&gt; , which is equal to the URL we just entered &lt;code&gt;http://localhost:3000/graphql&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZitWvqAL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://the-guild.dev/blog-assets/graphql-authentication-with-envelop-and-auth0/03-copy-audience.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZitWvqAL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://the-guild.dev/blog-assets/graphql-authentication-with-envelop-and-auth0/03-copy-audience.jpg" alt="Auth0 Copy Audience" width="880" height="579"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;domain&lt;/code&gt; value is a bit hidden, but we can find it on the detail page of the API we just created, on the &lt;code&gt;Test&lt;/code&gt; tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dd2kOHrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://the-guild.dev/blog-assets/graphql-authentication-with-envelop-and-auth0/04-domain.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dd2kOHrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://the-guild.dev/blog-assets/graphql-authentication-with-envelop-and-auth0/04-domain.jpg" alt="Auth0 domain" width="880" height="579"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will vary depending on your account name and region, but in general it follows this pattern&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{account_name}.{region}.auth0.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is our &lt;code&gt;domain&lt;/code&gt; configuration value.&lt;/p&gt;

&lt;p&gt;Let's quickly add this information to our envelop setup.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useAuth0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@envelop/auth0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// ... other imports and code&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getEnveloped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;envelop&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;useSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;useAuth0&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{account_name}.{region}.auth0.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;audience&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000/graphql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;extendContextField&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auth0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now have all the information needed for configuring the envelop plugin. However, we did not yet setup an application that is required for users to authenticate in the browser.&lt;/p&gt;

&lt;p&gt;But before doing so, let's verify that the plugin is doing what it should do.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#expose-authentication-information-via-graphql-schema"&gt;
  &lt;/a&gt;
  Expose authentication information via GraphQL schema
&lt;/h2&gt;

&lt;p&gt;Before we start our server we should add some types and fields to our schema in order to query for the authentication information.&lt;br&gt;
The complete code should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// The quickest way of building a schema :)&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;makeExecutableSchema&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@graphql-tools/schema&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeExecutableSchema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;typeDefs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="cm"&gt;/* GraphQL */&lt;/span&gt; &lt;span class="s2"&gt;`
    """
    Describes the authentication object as provided by Auth0.
    """
    type AuthenticationInfo {
      """
      String that uniquely identifies an authenticated user.
      """
      sub: String!
    }

    type Query {
      """
      The authentication information of the request.
      """
      authInfo: AuthenticationInfo
    }
  `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;resolvers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;authInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth0&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can start our server. The helix fastify server can be started via &lt;code&gt;yarn start&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\Users\laurin\Projects\envelop\examples\graphql-helix&amp;gt; yarn start
yarn run v1.22.10
$ ts-node index.ts
GraphQL server is running.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we are going to execute a query on the GraphiQL instance exposed on &lt;code&gt;http:localhost:3000/graphql&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;authInfo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yjrseN8G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://the-guild.dev/blog-assets/graphql-authentication-with-envelop-and-auth0/05-graphiql-unauthenticated.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yjrseN8G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://the-guild.dev/blog-assets/graphql-authentication-with-envelop-and-auth0/05-graphiql-unauthenticated.jpg" alt="GraphiQL Unauthenticated" width="880" height="579"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As expected the value of the &lt;code&gt;authInfo&lt;/code&gt; field is &lt;code&gt;null&lt;/code&gt;, as we are not passing any authentication headers along with our request.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generating-an-auth0-access-token"&gt;
  &lt;/a&gt;
  Generating an Auth0 Access Token
&lt;/h2&gt;

&lt;p&gt;In order to retrieve an access token, we first need to set up an Auth0 application and an authentication route. For the sake of this guide and in order to reduce complexity we will simply add an route to our fastify http server that renders some HTML with a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag that invokes the Auth0 JavaScript SDK (referenced via a CDN) and then appends the authentication token to the document body. It should still give you a feeling how you can integrate the Auth0 SDK with your favorite Frontend Framework. If you are using Next.js you should check out &lt;a href="https://github.com/auth0/nextjs-auth0"&gt;nextjs-auth0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's go back into the Auth0 interface on the Applications page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FZX7ApMB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://the-guild.dev/blog-assets/graphql-authentication-with-envelop-and-auth0/06-auth0-applications.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FZX7ApMB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://the-guild.dev/blog-assets/graphql-authentication-with-envelop-and-auth0/06-auth0-applications.jpg" alt="Auth0 Applications" width="880" height="579"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Press the &lt;strong&gt;Create application&lt;/strong&gt; button, enter a name of your choice (e.g. &lt;code&gt;Envelop Example Single Page Web&lt;/code&gt;) and select the &lt;code&gt;Single Page Web Applications&lt;/code&gt; application type. Confirm by pressing the &lt;strong&gt;Create&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xNJy5oxq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://the-guild.dev/blog-assets/graphql-authentication-with-envelop-and-auth0/07-auth-create-application.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xNJy5oxq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://the-guild.dev/blog-assets/graphql-authentication-with-envelop-and-auth0/07-auth-create-application.jpg" alt="Auth0 Create Application" width="880" height="579"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will be redirected to the Application detail page.&lt;/p&gt;

&lt;p&gt;The first important information we need from there is the Application &lt;strong&gt;Client ID&lt;/strong&gt;. We need that string for configuring the Auth0 SDK&lt;/p&gt;

&lt;p&gt;On that page we also need to switch to the Settings tab as we will have to adjust our application URL settings. Our application is hosted on &lt;code&gt;http://localhost:3000&lt;/code&gt;. We will have to set the &lt;strong&gt;Allowed Callback URLs&lt;/strong&gt;, &lt;strong&gt;Allowed Logout URLs&lt;/strong&gt; and &lt;strong&gt;Allowed Web Origins&lt;/strong&gt; setting to that value (&lt;code&gt;http://localhost:3000&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Don't forget to save the changes with the &lt;strong&gt;Save Changes&lt;/strong&gt; button at the end of the page.&lt;/p&gt;

&lt;p&gt;Next we add the new route in our fastify setup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ... envelop setup ...&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/html; charset=UTF-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* HTML */&lt;/span&gt; &lt;span class="s2"&gt;`
      &amp;lt;!DOCTYPE html /&amp;gt;
      &amp;lt;html&amp;gt;
        &amp;lt;head&amp;gt;
          &amp;lt;script src="https://cdn.auth0.com/js/auth0-spa-js/1.12/auth0-spa-js.production.js"&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;/head&amp;gt;
        &amp;lt;body&amp;gt;
          &amp;lt;script&amp;gt;
            createAuth0Client({
              domain: '{account_name}.{region}.auth0.com',
              client_id: '&amp;lt;client_id&amp;gt;',
              audience: 'http://localhost:3000/graphql'
            }).then(async (auth0) =&amp;gt; {
              await auth0.loginWithPopup()
              const accessToken = await auth0.getTokenSilently()
              window.document.body.innerText = accessToken
            })
          &amp;lt;/script&amp;gt;
        &amp;lt;/body&amp;gt;
      &amp;lt;/html&amp;gt;
    `&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As mentioned before it is not that fancy. After restarting the server and opening &lt;code&gt;http://localhost:3000/&lt;/code&gt; URL we should see a blank page and an Auth0 LogIn pop-up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b0VtCDUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://the-guild.dev/blog-assets/graphql-authentication-with-envelop-and-auth0/08-login.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b0VtCDUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://the-guild.dev/blog-assets/graphql-authentication-with-envelop-and-auth0/08-login.jpg" alt="Auth0 Create Application" width="875" height="693"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After a successful login the authentication token is added to the blank page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dx1IwxRN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://the-guild.dev/blog-assets/graphql-authentication-with-envelop-and-auth0/09-authentication-token.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dx1IwxRN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://the-guild.dev/blog-assets/graphql-authentication-with-envelop-and-auth0/09-authentication-token.jpg" alt="Auth0 Create Application" width="880" height="579"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's copy that one and move back to our GraphiQL instance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sending-an-authenticated-request"&gt;
  &lt;/a&gt;
  Sending an Authenticated Request
&lt;/h2&gt;

&lt;p&gt;In the &lt;strong&gt;Request Headers&lt;/strong&gt; tab we can specify our Authorization header in the following format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"Authorization"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Bearer &amp;lt;access token&amp;gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then after re-executing the operation we see that the result now contains our authentication information!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"authInfo"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sub"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"google-oauth2|101177380012777232372"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WgYyD4Jf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://the-guild.dev/blog-assets/graphql-authentication-with-envelop-and-auth0/10-authenticated-request.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WgYyD4Jf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://the-guild.dev/blog-assets/graphql-authentication-with-envelop-and-auth0/10-authenticated-request.jpg" alt="Auth0 Create Application" width="880" height="579"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;Congratulations on successfully implementing authentication for your GraphQL API with Envelop and Auth0!&lt;/p&gt;

&lt;p&gt;The full code of this guide can be found in our &lt;a href="https://github.com/dotansimha/envelop/tree/main/examples/graphql-helix"&gt;Envelop examples&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;More information about advanced configuration options can be found on the &lt;a href="https://envelop.dev/plugins/use-auth0"&gt;&lt;code&gt;useAuth0&lt;/code&gt; PluginHub page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the GraphQL schema of this guide we only re-expose the auth0 authentication information. For a true registration flow the user information should be persisted via a &lt;code&gt;register&lt;/code&gt; mutation or similar, so additional information such as first and last name is stored within a database.&lt;/p&gt;

&lt;p&gt;A full user object could be loaded when building the context via the &lt;a href="https://www.envelop.dev/plugins/use-extend-context"&gt;&lt;code&gt;useExtendContext&lt;/code&gt; plugin&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getEnveloped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;envelop&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;useSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;useAuth0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;auth0Config&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;useExtendContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadUserBySub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Learn more about all the other features you can easily add to your GraphQL setup over on the &lt;a href="https://www.envelop.dev/docs"&gt;Envelop Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We are continously adding adding new plugins that allow solving hard problems with ease!&lt;/p&gt;

&lt;p&gt;Another new plugin that is being cooked up in the lab is the operation complexity plugin, which allows (rate-)limiting of operations sent to your server based on a score calculated from the selection set. If you are building a public GraphQL API you don't wanna miss out on this! Help us shaping the plugin by dropping feedback over the the &lt;a href="https://github.com/dotansimha/envelop/pull/671"&gt;Draft PR for the Operation Complexity Plugin&lt;/a&gt; or contact us via the Chat below. We are curious about your feedback und use-cases!&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>authentication</category>
      <category>envelop</category>
    </item>
    <item>
      <title>Introduction to SciPy</title>
      <author>Moscatena</author>
      <pubDate>Mon, 20 Dec 2021 12:03:23 +0000</pubDate>
      <link>https://dev.to/moscatena/introduction-to-scipy-15n4</link>
      <guid>https://dev.to/moscatena/introduction-to-scipy-15n4</guid>
      <description>&lt;p&gt;Data scientists come across a multitude of problems that present themselves in various different fields. We have to deal with design issues from generating plots to either try and see a relationship for ourselves, or present them to a third party. We have to perform data cleaning, organising, interpolation and analysis, sometimes even engineering. We work with APIs to get acquire needed information. And amongst many other things, we use statistics to analyse and interpret our data. Although those are all things that could be done in a long and windy way, there are people that create tools and libraries to facilitate the work that has to be done. Today I’ll talk about one in particular: SciPy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scipy"&gt;
  &lt;/a&gt;
  SciPy
&lt;/h2&gt;

&lt;p&gt;SciPy, pronounced &lt;em&gt;Sigh Pie&lt;/em&gt;, is an open source Python library that has a collection of mathematical algorithms, designed to make our lives easier. Basically, instead of writing big and complicated scientific formulas, SciPy got you covered. The library, as of now, contains fifteen sub packages that can be imported independently and have different utilities. They are the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.scipy.org/doc/scipy/reference/cluster.html#module-scipy.cluster"&gt;cluster&lt;/a&gt;: Clustering algorithms are useful in information theory, target detection, communications, compression, and other areas&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.scipy.org/doc/scipy/reference/constants.html#module-scipy.constants"&gt;constants&lt;/a&gt;: offers a number of mathematical and physics constants and transformation for units of measurement.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.scipy.org/doc/scipy/reference/fft.html#module-scipy.fft"&gt;fft&lt;/a&gt;: Fast Fourier Transforms, Discrete Sin and Cosine Transforms, Fast Hankel Transform, along with helper functions and backend control&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.scipy.org/doc/scipy/reference/integrate.html#module-scipy.integrate"&gt;integrate&lt;/a&gt;: Integration and ordinary differential equation solvers&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.scipy.org/doc/scipy/reference/interpolate.html#module-scipy.interpolate"&gt;interpolate&lt;/a&gt;: Sub-package for objects used in interpolation&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.scipy.org/doc/scipy/reference/io.html#module-scipy.io"&gt;io&lt;/a&gt;: modules to read and write on different types of files&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.scipy.org/doc/scipy/reference/linalg.html#module-scipy.linalg"&gt;linalg&lt;/a&gt;: Linear algebra modules&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.scipy.org/doc/scipy/reference/ndimage.html#module-scipy.ndimage"&gt;ndimage&lt;/a&gt;: functions for multidimensional image processing&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.scipy.org/doc/scipy/reference/odr.html#module-scipy.odr"&gt;odr&lt;/a&gt;: Orthogonal distance regression&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.scipy.org/doc/scipy/reference/optimize.html#module-scipy.optimize"&gt;optimize&lt;/a&gt;: functions for minimizing objective functions&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.scipy.org/doc/scipy/reference/signal.html#module-scipy.signal"&gt;signal&lt;/a&gt;: Signal processing functions&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.scipy.org/doc/scipy/reference/sparse.html#module-scipy.sparse"&gt;sparse&lt;/a&gt;: 2-D sparse matrix package for numeric data&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.scipy.org/doc/scipy/reference/spatial.html#module-scipy.spatial"&gt;spatial&lt;/a&gt;: Spatial algorithms and data structures&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.scipy.org/doc/scipy/tutorial/special.html"&gt;special&lt;/a&gt;: This package offers you a substantial amount of mathematical functions. Available ones include: airy, bessel, beta, hypergeometric,  mathieu and kelvin&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.scipy.org/doc/scipy/reference/stats.html#module-scipy.stats"&gt;stats&lt;/a&gt;: Statistical functions to work with frequency statistics, correlation functions and statistical tests, masked statistics and many others.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best way to use these sub-packages is to import them separately, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from scipy import stats
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#history"&gt;
  &lt;/a&gt;
  History
&lt;/h3&gt;

&lt;p&gt;Version 0.1 was first written back in 2001, with version 1.0.0 only being released in 2017. Now they’re at version 1.7.3, and make periodic updates. The code is written by scientists, for scientists, giving us a set of easy to use tools. One of it's creators, Travis Oliphant, was also the creator of Numpy, which merged Numeric and Numarray data. With a growing number of extension modules, and the rising necessity for a more complete environment for scientific and technical computing, in 2001 Travis joined efforts with Eric Jones and Pearu Peterson to create version 0.1. With this, SciPy runs on top of the numeric array data structure provided by NumPy. From there, the project only grew. Version 1.0.0 had a total of 121 contributors. Currently it is distributed under the &lt;a href="https://en.wikipedia.org/wiki/BSD_licenses"&gt;BSD license&lt;/a&gt; and has it's development supported by an open community of supporters. Their &lt;a href="https://github.com/scipy/scipy"&gt;GitHub repository&lt;/a&gt; has information on how to help contribute to SciPy and what are their plans for the future. The applications that the library amassed are significantly varied, from being used in high school education to power field changing research, like the &lt;a href="https://www.nobelprize.org/prizes/physics/2017/press-release/"&gt;2017 Physics Nobel Prize winners&lt;/a&gt; &lt;em&gt;“for decisive contributions to the LIGO detector and the observation of gravitational waves”&lt;/em&gt;. Part of the can be seen &lt;a href="https://www.gw-openscience.org/tutorials/"&gt;here&lt;/a&gt; and &lt;a href="https://github.com/losc-tutorial/Data_Guide"&gt;this&lt;/a&gt; is a GitHub repository where you can find a Jupyter Notebook and see some of the code in action.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#competition"&gt;
  &lt;/a&gt;
  Competition
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;NumPy&lt;/strong&gt; - Though SciPy is built on top of Numpy and possesses all of it's features, Numpy can be a better choice when dealing only with basic array concepts. Python is a powerful and flexible language, but it might not be the fastest in some cases. NumPy is written in C, which makes it's execution faster.&lt;br&gt;
&lt;strong&gt;MatLab&lt;/strong&gt; - This is a different programming language altogether, that instead of being object-oriented like Python, it is Array oriented. This makes it an easy and productive environment for scientists performing mathematical and technical computing, and prime for matrix manipulation. It is not though, a language made for programming, which makes it very clunky when dealing with problems that demand more flexibility.&lt;br&gt;
&lt;strong&gt;TenserFlow&lt;/strong&gt; - Another open source library for numerical computing, that delves into Machine Learning and Artificial Intelligence. TenserFlow is really fast, since it's core is written in a combination of C++, Python and CUDA. A trade-off here is that TenserFlow is considered harder to use and to Debug.&lt;/p&gt;

&lt;p&gt;These were just a few of dozens of libraries, tools or languages that have some of the same capabilities of SciPy. It's hard to make an overall comparison between them because they all are designed to do different things, that sometimes overlap . In &lt;a href="https://en.wikipedia.org/wiki/Comparison_of_numerical-analysis_software"&gt;here&lt;/a&gt; for instance, you can find a comparison amongst several numerical-analysis softwares (including SciPy), whereas &lt;a href="https://en.wikipedia.org/wiki/Comparison_of_statistical_packages"&gt;here&lt;/a&gt; you can find comparison of different statistical packages (which also include SciPy). Mostly all of them have something they can do either better, faster, or have better compatibility with a certain program, but they also all have a downside when comparing to using Python and SciPy. You have to decide for yourself what is better for the projects you want to do.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;One of the major advantages of using Python or it's tools and libraries, is that Python is it is consistently amongst the top most common languages used. It's simple syntax and versatility makes it a common entry point for beginners. That makes the user base grow more and more every year. Since Python is open source, like many as it's packages (SciPy included), there's a constantly increasing number of programmers working in it's improvement. That makes for more and better tools, more usage and, let's not forget, better documentation. In &lt;a href="https://docs.scipy.org/doc/scipy/tutorial/general.html"&gt;SciPy documentation page&lt;/a&gt; you can find extensive information on how to use it's tools, separated by sub-packages.&lt;br&gt;
With Python being the programming language with most topic creations in Stack Overflow, there's a lot of content being created also by the major public. There are tutorials made for it by schools, individual people, and paid websites. I'll list a few free ones here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/python/scipy/index.php"&gt;W3 School SciPy Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tutorialspoint.com/scipy/index.htm"&gt;TutorialsPoint SciPy Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.javatpoint.com/python-scipy"&gt;Javat Point SciPy Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of my favourites though would have to be Real Python website. Just regarding SciPy, they have in depth information with very descriptive and didactic posts on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://realpython.com/python-scipy-fft/"&gt;Fourier Transforms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/python-scipy-linalg/"&gt;Linear Algebra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/python-scipy-cluster-optimize/"&gt;Optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/python-statistics/"&gt;Statistics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What I'm trying to say is, if you're trying to learn SciPy, you're probably not gonna run out of resources. And if you do, just remember, you can always ask for .help().&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
      <category>statistics</category>
    </item>
  </channel>
</rss>
