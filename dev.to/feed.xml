<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>5 Super Useful Menubar Apps For macOS</title>
      <author>Rohith Gilla</author>
      <pubDate>Fri, 09 Apr 2021 18:48:55 +0000</pubDate>
      <link>https://dev.to/gillarohith/5-super-useful-menubar-apps-for-macos-1o9o</link>
      <guid>https://dev.to/gillarohith/5-super-useful-menubar-apps-for-macos-1o9o</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cMpaJ4ao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.giphy.com/media/dzaUX7CAG0Ihi/giphy.gif%3Fcid%3Decf05e47lyeouvoiu4bvmmmdlzfgx8dwfb0n5jptcz4zo6yj%26rid%3Dgiphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cMpaJ4ao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.giphy.com/media/dzaUX7CAG0Ihi/giphy.gif%3Fcid%3Decf05e47lyeouvoiu4bvmmmdlzfgx8dwfb0n5jptcz4zo6yj%26rid%3Dgiphy.gif" alt="Hello"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hey everyone! In this post let's breeze ‚ùÑÔ∏è through some of my most used and favourite, free menu bar applications for Mac. &lt;/p&gt;

&lt;p&gt;At one point or another, nearly every Mac user reaches a point where they feel as though the functionality included with macOS is not enough to enable them to perform their jobs to their standards. For this reason, many Mac owners turn to third-party applications that will help improve these workflows while offering additional features.&lt;/p&gt;

&lt;p&gt;There are a number of menu bar applications that Mac owners use for daily workflows. In many cases, these applications help you improve your workflow and offers you some extra features that will allow you to do your work more efficiently throughout the day.&lt;/p&gt;

&lt;p&gt;If you haven't checked my 2020 edition I'll leave the link here, do check it out üòÑ&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/gillarohith" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vVXfW6Lj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--xIsgHLUD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/317018/ae62352f-cc66-414d-8d25-1735f649f780.jpg" alt="gillarohith image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/xenoxdev/6-super-useful-menubar-apps-for-macos-3g19" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;6 Super Useful Menubar Apps For MacOS&lt;/h2&gt;
      &lt;h3&gt;Rohith Gilla „Éª Jun 16 '20 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#macos&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#todayilearned&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;The 5 Applications we will go over are the following.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cloud App&lt;/li&gt;
&lt;li&gt;Dozer&lt;/li&gt;
&lt;li&gt;Tot&lt;/li&gt;
&lt;li&gt;xbar&lt;/li&gt;
&lt;li&gt;Drafts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's glide over them now&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jwmoiNWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/9DeF9TxMxqybiMiKDK/giphy.gif%3Fcid%3Decf05e47swknnji9oc0a2fq8u2e4atinmczxiduaeorihybu%26rid%3Dgiphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jwmoiNWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/9DeF9TxMxqybiMiKDK/giphy.gif%3Fcid%3Decf05e47swknnji9oc0a2fq8u2e4atinmczxiduaeorihybu%26rid%3Dgiphy.gif" alt="Glide"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cloud-app"&gt;
  &lt;/a&gt;
  Cloud App
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--edLTPeGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets-global.website-files.com/58e32bace1998d6e3fee8d71/6063e0c4f2ded72e5e7cebc3_cloudapp-logo-full-lockup.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--edLTPeGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets-global.website-files.com/58e32bace1998d6e3fee8d71/6063e0c4f2ded72e5e7cebc3_cloudapp-logo-full-lockup.svg" alt="Cloud app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Record your screen as a video with your voice &amp;amp; face, an annotated image, or a GIF and instantly share it as a link to get your point across.&lt;/p&gt;

&lt;p&gt;This is an amazing application, this is currently my go-to app to take and share screenshots, record screen.&lt;/p&gt;

&lt;p&gt;You can download it &lt;a href="https://www.getcloudapp.com/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dozer"&gt;
  &lt;/a&gt;
  Dozer
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Q6T1z6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/Mortennn/Dozer/raw/master/Stuff/demo.gif" class="article-body-image-wrapper"&gt;&lt;img height="100" src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Q6T1z6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/Mortennn/Dozer/raw/master/Stuff/demo.gif" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hide menu bar icons to give your Mac a cleaner look. This is a free version of the famous bartender application.&lt;/p&gt;

&lt;p&gt;You can download it &lt;a href="https://github.com/Mortennn/Dozer/releases"&gt;here&lt;/a&gt;&lt;br&gt;
You can also check and contribute to the code &lt;a href="https://github.com/Mortennn/Dozer/releases"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tot"&gt;
  &lt;/a&gt;
  Tot
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FZzy6r7G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmsavs5amxksc5x2jbhy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FZzy6r7G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmsavs5amxksc5x2jbhy.png" alt="Tot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An elegant, simple way to collect &amp;amp; edit text on your Mac, iPhone, and iPad.&lt;/p&gt;

&lt;p&gt;I use to jot down quick stuff, write some important tasks and taking notes during an impromptu meeting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#xbar"&gt;
  &lt;/a&gt;
  xbar
&lt;/h2&gt;

&lt;p&gt;Put the output from any script or program into your macOS Menu Bar.&lt;/p&gt;

&lt;p&gt;If you want a custom script running on your menubar, like your youtube stats, Twitter followers or anything else, this is the application for you.&lt;/p&gt;

&lt;p&gt;You can download and check other plugins &lt;a href="https://xbarapp.com/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drafts"&gt;
  &lt;/a&gt;
  Drafts
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dlcEoa_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6geqt5uqd57qpstx6qh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dlcEoa_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6geqt5uqd57qpstx6qh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Drafts opens to a new page with the keyboard ready so you can type immediately. Go hands-free with Dictation. Drafts lets you get things down before you forget without fiddling folders, naming, etc.&lt;/p&gt;

&lt;p&gt;This is one of the most underrated application, this is the quickest way to jot down anything. The best thing is not only it resides in the menu bar, but it can also be added as a complication to an Apple Watch. It syncs between iPad, iPhone, Mac, Watch seamlessly. You get the amazing apple ecosystem feeling.&lt;/p&gt;

&lt;p&gt;You can support me here üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/C0C042WW1"&gt;&lt;img height="36" src="https://res.cloudinary.com/practicaldev/image/fetch/s--EWEX3xu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ko-fi.com/cdn/kofi2.png%3Fv%3D2" alt="Buy Me a Coffee at ko-fi.com"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/rohithgilla"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to drop your favourite apps in the comments below and let me know if I missed any amazing application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--624_nTBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/KB8C86UMgLDThpt4WT/giphy.gif%3Fcid%3Decf05e47z9s61cqcouzqcscd5f037k6yeo7ljgegtgy0z06v%26rid%3Dgiphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--624_nTBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/KB8C86UMgLDThpt4WT/giphy.gif%3Fcid%3Decf05e47z9s61cqcouzqcscd5f037k6yeo7ljgegtgy0z06v%26rid%3Dgiphy.gif" alt="Thanks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br&gt;
Rohith Gilla&lt;/p&gt;

&lt;p&gt;P.S: Please let me know if you want me to explain how each of the application helps make your workflow better in detail. &lt;/p&gt;

&lt;p&gt;Will definitely try to make it happen.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>macos</category>
      <category>todayilearned</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Litmus Tests in Tech</title>
      <author>Adam Nathaniel Davis</author>
      <pubDate>Fri, 09 Apr 2021 18:43:37 +0000</pubDate>
      <link>https://dev.to/bytebodger/litmus-tests-in-tech-1ll7</link>
      <guid>https://dev.to/bytebodger/litmus-tests-in-tech-1ll7</guid>
      <description>&lt;p&gt;Since I began blogging on Dev.to, one of my primary subjects has been the (arbitrary) standards that we apply to others when we evaluate them as potential candidates for jobs.  In fact, it was the focus of my &lt;em&gt;first&lt;/em&gt; blog on this platform, and I've addressed it on several different levels since.  But this really became much clearer (in &lt;em&gt;my&lt;/em&gt; mind, at least) after I posted my last article - an article about applying to Facebook.&lt;/p&gt;

&lt;p&gt;In that article, I explained that I'd been told to expect questions about &lt;code&gt;.call()&lt;/code&gt; and &lt;code&gt;.apply()&lt;/code&gt;.  And because I don't feel any need to "bolster" my image in this forum, I also mentioned that I had to immediately Google those concepts - because I wasn't familiar with them.&lt;/p&gt;

&lt;p&gt;To be absolutely clear, I've been coding, quite literally, since I was a kid.  I've been coding &lt;em&gt;professionally&lt;/em&gt; for almost a quarter-century.  I've been doing JavaScript development quite heavily for about... a decade or so.  And I've been doing React development, specifically, for the last five+ years.  &lt;/p&gt;

&lt;p&gt;Despite this mountain of real-world experience, I wasn't terribly familiar with the ideas of &lt;code&gt;.call()&lt;/code&gt; or &lt;code&gt;.apply()&lt;/code&gt;.  After I looked them up, I realized exactly &lt;em&gt;why&lt;/em&gt; I'm not familiar with them - because I don't use them &lt;strong&gt;&lt;em&gt;at all&lt;/em&gt;&lt;/strong&gt; in my regular work.  And given "modern" JS norms, I'm not even sure how or why I would use them going forward.  &lt;/p&gt;

&lt;p&gt;As a React dev, I'm intimately familiar with &lt;code&gt;.bind()&lt;/code&gt;.  I'm familiar with it because there was a time when I used it frequently.  That time has passed.  In my current dev (and by "current", I mean, the last 2-3 years), I haven't used it at all.  Quite frankly, for me, &lt;code&gt;.bind()&lt;/code&gt; is basically... &lt;em&gt;deprecated&lt;/em&gt;.  And when I looked up &lt;code&gt;.call()&lt;/code&gt; and &lt;code&gt;.apply()&lt;/code&gt;, I similarly felt that these concepts are &lt;em&gt;deprecated&lt;/em&gt;.  &lt;/p&gt;

&lt;p&gt;You see, I don't even &lt;em&gt;use&lt;/em&gt; &lt;code&gt;this&lt;/code&gt; anymore.  And I'm not saying that there aren't some potentially-valid use-cases out there for &lt;code&gt;this&lt;/code&gt;.  But for the most part, if you're repeatedly falling back on &lt;code&gt;this&lt;/code&gt;, I gotta wonder how "modern" your JS dev really is?  And if you're &lt;em&gt;not&lt;/em&gt; using &lt;code&gt;this&lt;/code&gt;, then the use-cases for &lt;code&gt;.bind()&lt;/code&gt;, &lt;code&gt;.call()&lt;/code&gt;, and &lt;code&gt;.apply()&lt;/code&gt; become incredibly... &lt;em&gt;scant&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But this article is &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt; about &lt;code&gt;.bind()&lt;/code&gt; or &lt;code&gt;.call()&lt;/code&gt; or &lt;code&gt;.apply()&lt;/code&gt;.  I truly couldn't care less whether you agree with my take on them.  In fact, this article isn't about any particular language construct at all.  This article is about the arrogance of "tech folks" (like myself), and &lt;em&gt;litmus tests&lt;/em&gt;, and &lt;em&gt;shibboleths&lt;/em&gt;.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7MK0EOH_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9qmi48tlbt10axk2iyg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7MK0EOH_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9qmi48tlbt10axk2iyg.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shibboleths"&gt;
  &lt;/a&gt;
  Shibboleths
&lt;/h2&gt;

&lt;p&gt;To truly understand someone's abilities is... &lt;em&gt;hard&lt;/em&gt;.  And most of us can't really put in the time to do a "deep dive" on someone else's credentials.  So we take shortcuts.&lt;/p&gt;

&lt;p&gt;I'm not pointing fingers here.  &lt;em&gt;I&lt;/em&gt; do this.  We &lt;em&gt;all&lt;/em&gt; do this.  We create an informal list slang that we can use to determine whether someone is "one of &lt;em&gt;us&lt;/em&gt;" or "one of &lt;em&gt;them&lt;/em&gt;".  &lt;/p&gt;

&lt;p&gt;In other words, we create (consciously or subconsciously) &lt;em&gt;shibboleths&lt;/em&gt;.  We create shortcuts to separate the &lt;em&gt;real&lt;/em&gt; devs - from the pretenders.&lt;/p&gt;

&lt;p&gt;What do shibboleths look/sound like in the current JavaScript environment?  Here are some common examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If a JS dev says "class" or "constructor" or "OOP" without the appropriate level of derision, he's one of &lt;em&gt;them&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a JS dev says "declarative" or "pure" or "immutable" or "functional programming", he's one of &lt;em&gt;us&lt;/em&gt;.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a frontend dev (of nearly any language) uses tabs, he's one of &lt;em&gt;them&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If he uses spaces (and only &lt;em&gt;two-space&lt;/em&gt; indents!), he's one of &lt;em&gt;us&lt;/em&gt;.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a JS dev refers to object properties via dot-notation, he's one of &lt;em&gt;them&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a JS dev relentlessly destructures all of his object properties into standalone variables, he one of &lt;em&gt;us&lt;/em&gt;.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a JS dev uses the &lt;code&gt;function&lt;/code&gt; keyword, he's one of &lt;em&gt;them&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If he uses arrow syntax, he's one of &lt;em&gt;us&lt;/em&gt;.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a JS dev uses &lt;code&gt;.then()&lt;/code&gt;/&lt;code&gt;.catch()&lt;/code&gt;, he's one of &lt;em&gt;them&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If he uses &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;, he's one of &lt;em&gt;us&lt;/em&gt;.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I could go on and on here, but I think you get the point.  Because we don't have the time to do a "deep dive" on everyone's skillset, we resort to using these shorthand call signs to swiftly label a dev as one of &lt;em&gt;us&lt;/em&gt;, or one of &lt;em&gt;them&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The (massive) problem with this approach is that it's lazy.  And it frequently leads to wildly-inaccurate assessments.  &lt;/p&gt;

&lt;p&gt;If I can perfectly pronounce &lt;em&gt;shibb√≥let&lt;/em&gt;, does that mean I'm Jewish?  Possibly.  But it could also mean that I was raised in an environment with heavy Jewish influences.  Or it could mean that I study languages and I'm fluent in Hebrew.  Or it could even mean that I knew you'd use this silly test as a sorting mechanism, so I studied, beforehand, exactly how to pronounce &lt;em&gt;shibb√≥let&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Similarly, the shibboleths we employ when evaluating fellow coders are prone to serious miscalculations.  More importantly, they're also rife with our own personal biases.  &lt;/p&gt;

&lt;p&gt;I've met some coders who absolutely adore &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;.  And that's fine.  But sometimes they are so enamored with it that they'll look down their nose at anyone who uses &lt;code&gt;.then()&lt;/code&gt;/&lt;code&gt;.catch()&lt;/code&gt;.  Or they scoff at anyone who uses the &lt;code&gt;function&lt;/code&gt; keyword.  Or they snigger when they see a &lt;code&gt;class&lt;/code&gt; in your code.  In other words, they're treating these concepts as shibboleths to sort out the poor coders.  But what they're &lt;em&gt;really&lt;/em&gt; sorting out is: people who don't code &lt;strong&gt;&lt;em&gt;like them&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O1-AqPqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyr3kc4fswzxr7s0y24s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O1-AqPqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyr3kc4fswzxr7s0y24s.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#litmus-snobbery"&gt;
  &lt;/a&gt;
  Litmus Snobbery
&lt;/h2&gt;

&lt;p&gt;A litmus test is similar to a shibboleth - but not entirely.  Shibboleths are more about &lt;em&gt;communication&lt;/em&gt; - concepts that we &lt;em&gt;want&lt;/em&gt; to hear from other coders, and concepts that we do &lt;em&gt;not&lt;/em&gt; want to hear.  &lt;/p&gt;

&lt;p&gt;But litmus tests are more about tactics that you've either mastered - or you haven't.  Here's how a litmus test typically works in coding environments:&lt;/p&gt;

&lt;p&gt;A candidate comes in for an interview and the team positions the nervous, sweaty soul at the whiteboard.  Then they ask him to code an example of doing a search with a binary tree.  The candidate has some extensive experience, and a solid grasp of many coding concepts.  But he's never studied or implemented a binary tree.  So he fails to provide any satisfactory solution to the problem.&lt;/p&gt;

&lt;p&gt;At this point, the interview is &lt;em&gt;functionally&lt;/em&gt; over.  They might afford him the courtesy of continuing the interview for another 45 minutes or so.  But the devs in that room who are evaluating the candidate have already decided that this guy's an imposter.  And they &lt;em&gt;know&lt;/em&gt; he's an imposter because he can't do a binary tree!  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I mean... the &lt;em&gt;nerve&lt;/em&gt; of this guy!  Whatever made him believe that he was worthy of writing code if he hasn't already mastered the concept of binary trees?!  Not only should he be eliminated from consideration for the job, but he should also have his hands chopped off, so he's never tempted to sit down at a keyboard again! &lt;em&gt;Ammiright???&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course, the &lt;em&gt;reality&lt;/em&gt; is quite different.  In a quarter century of professional coding, a binary tree has been the "right tool for the job", for &lt;em&gt;me&lt;/em&gt;, exactly... &lt;strong&gt;&lt;em&gt;ONCE&lt;/em&gt;&lt;/strong&gt;.  I know what a binary tree &lt;em&gt;is&lt;/em&gt;, and I generally know &lt;em&gt;where&lt;/em&gt; they should be used.  But if I had to set up a binary tree search today, I'd first start by hitting up Google for a few minutes, because I haven't actually &lt;em&gt;written&lt;/em&gt; anything related to a binary tree in about 15 years.&lt;/p&gt;

&lt;p&gt;But this article isn't about binary trees.  It's about the fact that we latch onto some programming technique that &lt;em&gt;we're&lt;/em&gt; familiar with, and then we use that technique as a litmus test to eliminate potential candidates.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QT0z5OTN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wawfii32q827dv8tbd0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QT0z5OTN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wawfii32q827dv8tbd0.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thinlyveiled-arrogance"&gt;
  &lt;/a&gt;
  Thinly-Veiled Arrogance
&lt;/h2&gt;

&lt;p&gt;Litmus tests reek of &lt;em&gt;arrogance&lt;/em&gt;.  They function from the perspective that &lt;em&gt;you&lt;/em&gt; know how to do this thing, so anyone else who claims to be a "real" coder should also know how to do this thing.  And if they can't do that thing?  Then no amount of experience will allow you to overlook the fact that this person - who &lt;em&gt;claims&lt;/em&gt; to know how to code - couldn't do this "thing" that you yourself can do just fine.  So clearly... they must royally suck at life!&lt;/p&gt;

&lt;p&gt;This is where the Arrogants get all in a lather.  They start hyperventilating and flailing their arms, and they say:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But, but, &lt;em&gt;but&lt;/em&gt;... if this guy can't do a binary tree, he's obviously not a dev with broad and deep knowledge!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take it from me.  When a litmus tester reaches &lt;em&gt;this&lt;/em&gt; point, there's really no benefit in talking to them about it any longer.  Because at &lt;em&gt;this&lt;/em&gt; point, there is no amount of knowledge or skill or experience that will, in their mind, erase the fact that this guy didn't know how to do &lt;em&gt;this one thing&lt;/em&gt;.  You can tell them, "But... he wrote Tesla's entire self-driving application.  By himself.  In assembly code.  Over a long weekend."  And their only response will be, "But he didn't know how to write that binary tree search, so he obviously can't be too dedicated to his craft!"&lt;/p&gt;

&lt;p&gt;You see, once someone gets it in their head that you should know some particular bit of programming knowledge, it won't matter to them whether you can prove that you know &lt;strong&gt;&lt;em&gt;ALL THE (other) THINGS!!!&lt;/em&gt;&lt;/strong&gt;  They will always come back to the fact that you didn't know &lt;em&gt;this&lt;/em&gt; thing - and therefore, you suck.&lt;/p&gt;

&lt;p&gt;Defenders of this mindset will tell you that there's nothing wrong with expecting a candidate to have certain skills - like programming a binary tree search.  And if they can't do that, then how is it &lt;em&gt;arrogant&lt;/em&gt; to eliminate candidates on that basis???  But the answer to that is incredibly simple:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For those who rely on litmus tests, their basis for what is-or-is-not "standard" is: Do &lt;em&gt;they&lt;/em&gt; know how to do it themselves???&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let me say that again, in a slightly different way.  Because I want this to really &lt;em&gt;sink in&lt;/em&gt; for you.&lt;/p&gt;

&lt;p&gt;When we apply litmus tests to other coders, we generally assume that whatever &lt;em&gt;we&lt;/em&gt; are comfortable with is "common knowledge" - and any "real" coder should be able to do the same.  And we assume that whatever we &lt;em&gt;aren't&lt;/em&gt; comfortable with is... esoteric.  Rare.  Arcane.  &lt;/p&gt;

&lt;p&gt;The Arrogants who are judging you based upon your binary tree skills are doing so either because A) their environment just so happens to use a lot of binary tree searches, or B) it's been established in their dev shop that this is a Sacred Coding Test and all of their current devs either knew how to do binary tree searches before they came onboard, or they quickly learned after it became a "standard" in their environment.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9r3-03Dc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkegalgcm7hzo3lqb40v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9r3-03Dc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkegalgcm7hzo3lqb40v.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#karma-is-a"&gt;
  &lt;/a&gt;
  Karma is a...
&lt;/h2&gt;

&lt;p&gt;In case you can't hear them yourself, those Arrogants are still squawking in the background.  They're fidgeting and arguing that:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I don't care what you say, if someone isn't intimately familiar with binary tree searches, they're not a &lt;em&gt;real&lt;/em&gt; programmer!!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To which I will only respond with this:&lt;/p&gt;

&lt;p&gt;I wasn't familiar with &lt;code&gt;.call()&lt;/code&gt; and &lt;code&gt;.apply()&lt;/code&gt; until a few weeks ago.  I guess that means I'm not a "real" coder.  I'd need to do a little googling before I'd be ready to sit down and write out a binary tree search algorithm from scratch.  I guess that also means that I'm not a "real" coder.&lt;/p&gt;

&lt;p&gt;But I've been doing this now for a quarter-century.  Do you &lt;em&gt;really&lt;/em&gt; believe that, if &lt;em&gt;I'm&lt;/em&gt; the one conducting the interview, that I couldn't possibly come up with a litmus test that you would &lt;code&gt;FAIL&lt;/code&gt;???  Are you so certain in the incredibly-broad and impressively-deep scope of your knowledge, that you're sure I couldn't possibly stump you???  &lt;/p&gt;

&lt;p&gt;And if I &lt;em&gt;could&lt;/em&gt; stump you on any particular "litmus test", how will you feel when you get summarily dismissed from consideration just because you hadn't mastered the one technique that I happened to ask you to illustrate on the whiteboard???&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>career</category>
      <category>hiring</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What's your favorite programming channel?</title>
      <author>CristoferK</author>
      <pubDate>Fri, 09 Apr 2021 18:41:18 +0000</pubDate>
      <link>https://dev.to/cristoferk/what-s-your-favorite-programming-channel-2113</link>
      <guid>https://dev.to/cristoferk/what-s-your-favorite-programming-channel-2113</guid>
      <description>&lt;p&gt;What's your favorite programming YouTube channel?&lt;br&gt;
Mine are Web Dev, Web Dev Simplified, Codingflag, and Online Tutorials.&lt;/p&gt;

&lt;p&gt;Also, I am making programming tutorials too! Here is the link to my channel&lt;br&gt;
&lt;a href="https://www.youtube.com/channel/UCFzeA3xC-_i4ZT-XwcwsJxQ/featured"&gt;https://www.youtube.com/channel/UCFzeA3xC-_i4ZT-XwcwsJxQ/featured&lt;/a&gt;&lt;br&gt;
Please Subscribe!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>youtube</category>
      <category>programming</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Best 5 Steps To Improve Your Programming skills</title>
      <author>Thu Htet Tun</author>
      <pubDate>Fri, 09 Apr 2021 18:05:37 +0000</pubDate>
      <link>https://dev.to/thuhtetdev/best-5-steps-to-improve-your-programming-skills-cil</link>
      <guid>https://dev.to/thuhtetdev/best-5-steps-to-improve-your-programming-skills-cil</guid>
      <description>&lt;p&gt;Hey guys,&lt;br&gt;
Today I would like to share you how to improve your programming skills within an unexpected time limit.&lt;/p&gt;

&lt;p&gt;I also uploaded this content on my YouTube channel.&lt;br&gt;
If you prefer to watch, please go for it. &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=60nn5OECvF4"&gt;https://www.youtube.com/watch?v=60nn5OECvF4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For readers, let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-choose-your-specific-role"&gt;
  &lt;/a&gt;
  1. Choose your specific role
&lt;/h2&gt;

&lt;p&gt;There are a lot of roles in software engineering. For example, Front-End, Back-end, DevOps, Analyst, Security, QA, DB admin etc. So, what gets you excited about them. If you are interested in design, go for designing things. If you enjoy about algorithms and data structures, just go for it. Important things is you have to choose one first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-choose-your-weapon-programming-language"&gt;
  &lt;/a&gt;
  2. Choose your weapon (programming language)
&lt;/h2&gt;

&lt;p&gt;First, you have to choose what programming language will be yours. &lt;br&gt;
There are a lot of programming languages in software engineering so if you don't decide it first, you will never escape from beginner step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-learn-it-but-not-study"&gt;
  &lt;/a&gt;
  3. Learn it but not study
&lt;/h2&gt;

&lt;p&gt;After you got your weapon, then learn about it. You can learn from different ways like University, Bootcamp, Mentor, Online class or YouTube etc. Important thing is to be enjoyed on your learning. Personally, I don't like studying just for an exam. I used to be but I don't like it. Studying is just intended for making a result. Learning is different because it is continuous and fun for me. Mostly, if you are in IT field, learning is an essential thing you have to follow. Plus, don't forget to learn about your main programming language's documentation deeply.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-apply-your-knowledge-with-multiple-projects"&gt;
  &lt;/a&gt;
  4. Apply your knowledge with multiple projects
&lt;/h2&gt;

&lt;p&gt;You've got some knowledge from learning things. So, Apply it. Start with small projects so that you can feel achievement. It is important too. That will make you the reason what you are learning about. &lt;/p&gt;

&lt;p&gt;In this case, sometimes learning and applying might be parallel. Because there is no complete learning. we have to keep that in mind. &lt;/p&gt;

&lt;p&gt;As another reason, you can boost your self-confidence by creating projects. Plus, you can show those projects to your clients or whatever as your experiences. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-keep-in-touch-with-community"&gt;
  &lt;/a&gt;
  5. Keep in touch with Community
&lt;/h2&gt;

&lt;p&gt;Congratulations to reach this step. Now, you know yourself in this professional field. It is time to upgrade your skills. Go for advanced projects or get a job. At this point, you will see that your domain knowledge is not enough while building things. Time to learn from real world experience. &lt;/p&gt;

&lt;p&gt;You may find some skills or tools that you don't have. Don't worry. You've already got learning skills right? So quick learn them. You can connect to respective engineering community, forum, social media page or groups. Discuss and sharing about what you gets and needs. &lt;/p&gt;

&lt;p&gt;That's it.&lt;br&gt;
Now, it is time to spread your wings and fly.&lt;/p&gt;

&lt;p&gt;I hope you enjoy this post.&lt;br&gt;
I also uploaded this content on my YouTube channel.&lt;br&gt;
Please check this out too.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=60nn5OECvF4"&gt;https://www.youtube.com/watch?v=60nn5OECvF4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't forget to follow me back if you like.&lt;br&gt;
See you guys.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>career</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Symfony Live Online 2021</title>
      <author>Mathieu Ledru</author>
      <pubDate>Fri, 09 Apr 2021 17:59:51 +0000</pubDate>
      <link>https://dev.to/darkwood-fr/symfony-live-online-2021-3nk5</link>
      <guid>https://dev.to/darkwood-fr/symfony-live-online-2021-3nk5</guid>
      <description>&lt;p&gt;Nouvel article sur le blog&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.darkwood.fr/article/symfony-live-online-2021"&gt;https://blog.darkwood.fr/article/symfony-live-online-2021&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Big O notation 1/2
</title>
      <author>Guillain bisimwa</author>
      <pubDate>Fri, 09 Apr 2021 17:22:50 +0000</pubDate>
      <link>https://dev.to/guillainbisimwa/big-o-notation-1-2-4nol</link>
      <guid>https://dev.to/guillainbisimwa/big-o-notation-1-2-4nol</guid>
      <description>&lt;p&gt;Welcome to this series of articles dedicated to &lt;strong&gt;Big O&lt;/strong&gt; scoring. What is it anyway? Big O? before knowing more on the subject, I would like to warn you that this concept can seem a bit confusing if you do not have a basic knowledge of data structure and algorithms! If that‚Äôs your case, I welcome you to check out some great resources on this topic at the bottom of this article!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Big O&lt;/strong&gt; is a notion that describes the performance or complexities of an algorithm. We write it with a capital letter &lt;strong&gt;O&lt;/strong&gt;, not a zero (Read as Big Oh), the &lt;strong&gt;Big O&lt;/strong&gt; is a measure and a description of the time necessary for the execution of an algorithm‚Ä¶ In short, we are talking about efficiency! We use it to evaluate codes for performance and space.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Oops! Does this definition seem a bit awkward to you ?? Ok let‚Äôs try to see an analogy!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Suppose you occasionally enjoy baking your own cake at home. For you, it will take you &lt;strong&gt;‚ÄúT‚Äù&lt;/strong&gt; time to bake a cake. Now your birthday is approaching, and you decide to invite 5 of your friends.&lt;/p&gt;

&lt;p&gt;Easily you can provide 3 cakes which make &lt;strong&gt;‚Äú3T‚Äù&lt;/strong&gt; to prepare everything. It‚Äôs not exaggerating, eh!&lt;br&gt;
So imagine you decide to call 200 people, wow it‚Äôs very hard to get by because when the number of guests increases so does the time to bake the cakes for everyone.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vcBYlSgI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4ezxw8c8onf6axull3v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vcBYlSgI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4ezxw8c8onf6axull3v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúWe used ‚Äôn‚Äô to denote the variable size of the input of the algorithm. We use &lt;strong&gt;Big O&lt;/strong&gt; notation also to describe how much space an algorithm uses.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then an alternative is available for you. You can order the cakes online. By ordering the number you want: whether it‚Äôs 10, 50 or 200 everything will take the same delivery time.&lt;br&gt;
We then notice that even if the number of guests increases, the time to bake the cakes and the time to deliver the cakes remain constant.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--70jUE3Q9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyze15yvqgqr52im8sn9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--70jUE3Q9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyze15yvqgqr52im8sn9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We ask ourselves, what is the place of the algorithm and DataStructure? In section 2 we will see in detail the different types of data structures that can be used to store data and some algorithms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take the case of a simple array, and let‚Äôs break that down!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--09zSUINC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kiqabag9t24l0vhnlpju.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--09zSUINC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kiqabag9t24l0vhnlpju.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A collection of items sorted in a contiguous memory location. Each element can be identified by its index in the array. Since the array uses computer memory, we also need this memory optimally. This is why the &lt;strong&gt;Big O&lt;/strong&gt; measures space complexity, which is the amount of storage a program wants. This explains how the size grows as the inputs increase.&lt;/p&gt;

&lt;p&gt;There are several operations that we can do with an array such as for example adding elements in it, reading an element at a position (index), sorting by order or alphabetically, ‚Ä¶ &lt;br&gt;
These operations are considered as algorithms that we can apply to achieve the desired result. This leads us to evaluate the time complexity. It represents the number of times a statement or operation is executed in a program. The Big O notation expresses the run time of an algorithm in terms of how quickly it grows in relation to the input.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Vx7jjZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tjh8uexs16pwt31eagq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Vx7jjZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tjh8uexs16pwt31eagq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It‚Äôs not easy to determine the exact runtime of an algorithm. It depends on the speed of the computer processor. Instead of talking about the run time directly, we use Big O notation to talk about how quickly the runtime grows. There are more runtimes than what we saw in this previous example. The best known are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Constant O (1),&lt;/li&gt;
&lt;li&gt;Logarithmic O (log N),&lt;/li&gt;
&lt;li&gt;Log-linear O (N log N),&lt;/li&gt;
&lt;li&gt;Linear O (N),&lt;/li&gt;
&lt;li&gt;Quadratic O (N¬≤ ),&lt;/li&gt;
&lt;li&gt;Cubic O (N¬≥), and&lt;/li&gt;
&lt;li&gt;Exponential O (2^n)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This series of articles is devoted to the details and examples of these runtimes!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Without huge memory, we can address huge problems&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#1-o1-constant-time-complexity-read-as-big-oh-of-1"&gt;
  &lt;/a&gt;
  1. O(1) ‚Äî Constant time complexity. (Read as Big Oh of 1)
&lt;/h2&gt;

&lt;p&gt;In this complexity, no matter how big or small your inputs are, the output time will always be the same.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NwH6sIWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7w1amlaveok8t7ukz1n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NwH6sIWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7w1amlaveok8t7ukz1n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;This algorithm takes the same amount of time to execute.&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#helpful-links"&gt;
  &lt;/a&gt;
  Helpful links
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://en.khanacademy.org/computing/computer-science/algorithms"&gt;https://en.khanacademy.org/computing/computer-science/algorithms&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udacity.com/course/data-structures-and-algorithms-in-python--ud513"&gt;https://www.udacity.com/course/data-structures-and-algorithms-in-python--ud513&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.bigocheatsheet.com/"&gt;https://www.bigocheatsheet.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>bigonotation</category>
      <category>bigo</category>
      <category>timecomplexity</category>
      <category>spacecomplexity</category>
    </item>
    <item>
      <title>How to run Linux bash in Windows OS</title>
      <author>Sameer Katija</author>
      <pubDate>Fri, 09 Apr 2021 17:22:48 +0000</pubDate>
      <link>https://dev.to/sameerkatija/how-to-run-linux-bash-in-windows-os-54mk</link>
      <guid>https://dev.to/sameerkatija/how-to-run-linux-bash-in-windows-os-54mk</guid>
      <description>&lt;p&gt;I use windows for most of my daily tasks, and almost all the software I prefer for my daily tasks, are windows based. Almost 90% of my time is spent on Windows, but still, the gap is there which can only be filled by Linux. Being a developer, I needed Linux for most of my tasks, one of them is deployment. Unlike Windows, Linux is free and most of the Linux versions are open-source.&lt;/p&gt;

&lt;p&gt;As the need for Linux came, I completely made a shift to ubuntu. After shifting, I realize that there are plenty of reasons I should shift back to windows. Well, my favorite software which I used in my free time was missing there especially Adobe illustrator(I seriously love this software and this lets you explore your creativity). I came back to windows and opted for the virtual machine.&lt;/p&gt;

&lt;p&gt;Think of a Virtual machine as a machine inside your real machine. It‚Äôs basically a concept, where most of the resources are split and are made available as a new virtual machine, though this new machine is totally virtual and acts as a real machine. This new virtual machine can be used to install another OS inside your main machine. I hope that now you have a concept of the virtual machine but as a reference, you can also read this definition by &lt;a href="https://en.wikipedia.org/wiki/Virtual_machine"&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In computing, a virtual machine is the virtualization/emulation of a computer system. Virtual machines are based on computer architectures and provide functionality of a physical computer. Their implementations may involve specialized hardware, software, or a combination.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Virtual Machine is better when it comes to dual boot. As every tool has some flaws too. Virtual machine too has some cons. As I alluded, a virtual machine runs on your real machine. So each and every hardware resource which our virtual machine will need have to request from the main machine. It means that our main machine will access hardware indirectly, thus its performance will be impacted. So, what is the alternative which can be the best fit for our needs? It‚Äôs Windows Subsystem for Linux (WSL).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-windows-subsystem-for-linuxwsl"&gt;
  &lt;/a&gt;
  What is Windows Subsystem for Linux(WSL)
&lt;/h2&gt;

&lt;p&gt;The WSL is a type of resource within windows OS that allows users to run a Linux command-line interface(CLI) in windows. In WSL, you can do almost all the tasks which you can perform on Linux Terminal.&lt;/p&gt;

&lt;p&gt;WSL is based on a Virtual machine. When we download a preferred Linux distro, we are not creating a VM instance. Instead, WSL provides a layer for translating Linux system calls to Windows system calls. Thus Linux binaries are able to run in windows unmodified. We can also have the Linux process communicate with Windows Process. WSL also maps Windows services, like the filesystem and networking, as devices that Linux can access.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-wsl-is-better-than-virtual-machine"&gt;
  &lt;/a&gt;
  Why WSL is better than Virtual Machine
&lt;/h2&gt;

&lt;p&gt;Instead of using a VM instance, WSL virtualizes a Linux kernel interface on top of the Windows kernel. it means that running WSL only requires a small amount of memory. And when it‚Äôs not in use, the WSL driver isn‚Äôt loaded into memory, making it much more efficient than a solution based on a VM.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-setup-and-install-wsl"&gt;
  &lt;/a&gt;
  How to setup and install WSL
&lt;/h2&gt;

&lt;p&gt;In order to use WSL in windows, you have to set up and install it first to do that we need some configuration and some Linux kernel installed in our machine, Don‚Äôt worry this isn‚Äôt as tedious as it sounds.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-enable-the-wsl"&gt;
  &lt;/a&gt;
  Step 1 ‚Äî Enable the WSL
&lt;/h3&gt;

&lt;p&gt;WSL is a Windows feature and it is by default off and to enable it you need to open &lt;code&gt;powershell&lt;/code&gt; as administrator and run the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-enable-virtual-machine-features"&gt;
  &lt;/a&gt;
  Step 2 ‚Äî Enable Virtual machine features
&lt;/h3&gt;

&lt;p&gt;After enabling the WSL feature then we need to enable virtualization functionality to run WSL on windows. In order to enable VM features on your machine, you need to run the command given below in Powershell.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-download-linux-kernal-package"&gt;
  &lt;/a&gt;
  Step 3 ‚Äî Download Linux Kernal Package
&lt;/h3&gt;

&lt;p&gt;Now, you need to download the Linux kernel package. you can download this package by clicking &lt;a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi"&gt;here&lt;/a&gt;. or you can also download this package from &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10"&gt;Microsoft's WSL documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-setting-wsl2-as-your-current-version"&gt;
  &lt;/a&gt;
  Step 4 ‚Äî Setting WSL2 as your current version
&lt;/h3&gt;

&lt;p&gt;Open Powershell and run the command given below, you can skip this command. If you don‚Äôt want to work with WSL2, you can also work with WSL1. In my case, I would prefer to go for WSL2.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;wsl &lt;span class="nt"&gt;--set-default-version&lt;/span&gt; 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-6-install-your-preferred-linux-distro"&gt;
  &lt;/a&gt;
  Step 6 ‚Äî Install your preferred Linux Distro
&lt;/h3&gt;

&lt;p&gt;Open the &lt;a href="https://www.microsoft.com/en-us/search?q=WSL"&gt;Microsoft store&lt;/a&gt; and search for your preferred Linux distro. I would suggest going for &lt;a href="https://www.microsoft.com/en-us/p/ubuntu/9nblggh4msv6"&gt;ubuntu&lt;/a&gt; because you will find a lot of community support in case you needed any help.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NJB6iYMZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/875/1%2Av5G_1WRh8Om8nWsuRBZSyQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NJB6iYMZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/875/1%2Av5G_1WRh8Om8nWsuRBZSyQ.png" alt="Picture of Windows Store"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After installing, you need to open ubuntu and for the first time, you have to give a username and a password which will only be for ubuntu and will be used afterward to login and do other &lt;code&gt;sudo&lt;/code&gt; stuff in ubuntu. With all that congrats on installing and setting up WSL on your machine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I am not against the dual boot, virtual machine instances, or anything else like that. I still use Virtual Machine for some of the Linux applications. The point I am trying to make in this article is that, if you need Linux to just fulfill your developer needs then WSL is the best choice to go for. If you still prefer some other tool and technology that‚Äôs totally fine. Choices are our own. With that thanks for reading this article and don‚Äôt forget to support me by clicking clap and sharing this with other developers. Cheers!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>linux</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Tale of .NET Core and the JSON SQLite Extension</title>
      <author>elfalem</author>
      <pubDate>Fri, 09 Apr 2021 16:59:05 +0000</pubDate>
      <link>https://dev.to/dealeron/tale-of-net-core-and-the-json-sqlite-extension-ddo</link>
      <guid>https://dev.to/dealeron/tale-of-net-core-and-the-json-sqlite-extension-ddo</guid>
      <description>&lt;p&gt;I was working on a .NET Core application and was getting to the stage where data needed to be persisted. I wanted to use SQLite because it's great as an &lt;a href="https://sqlite.org/appfileformat.html"&gt;application file format&lt;/a&gt;. Some of the data would be stored using JSON. Although SQLite doesn't have built-in functionality for working with JSON, it allows the use of &lt;a href="https://www.sqlite.org/loadext.html"&gt;extensions&lt;/a&gt;. This is a very powerful feature allowing anyone to customize SQLite to their needs. Things like JSON support (&lt;a href="https://www.sqlite.org/json1.html"&gt;JSON1&lt;/a&gt;) and full-text search (&lt;a href="https://sqlite.org/fts3.html"&gt;FTS3 and FTS4&lt;/a&gt;) are implemented in this way.&lt;/p&gt;

&lt;p&gt;Although loadable extensions can be statically linked at compile time, they can also be dynamically linked at run time. The latter is very beneficial because it means you don't have to re-compile your own version of SQLite to include an extension and ship it with your application. Instead, you can leverage an existing SQLite instance and load the necessary extensions at run time.&lt;/p&gt;

&lt;p&gt;In the case of .NET, there is the &lt;a href="https://www.nuget.org/packages/System.Data.SQLite.Core"&gt;System.Data.SQLite.Core&lt;/a&gt; NuGet package, the official database and ADO.NET provider. This instance of SQLite doesn't have JSON support enabled by default but I should be able to load the extension as mentioned above. However there were some unexpected challenges and thus began my journey into getting a SQLite extension to load in a .NET core application on a Linux machine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initial-attempt"&gt;
  &lt;/a&gt;
  Initial Attempt
&lt;/h2&gt;

&lt;p&gt;I was working on a Linux Mint machine with .NET SDK version 2.2. After referencing the necessary packages, the first step was to create a connection to the database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new console
dotnet add package System.Data.SQLite.Core
dotnet add package Dapper
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;SQLiteConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Data Source=:memory:"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueryFirst&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;"select SQLITE_VERSION() AS Version"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This part was straightforward. I was able to connect to an in-memory database and successfully execute a query through Dapper.&lt;/p&gt;

&lt;p&gt;The next step was loading the JSON1 extension. This is what the internet says to do to load an extension:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;SQLiteConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Data Source=:memory:"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LoadExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"SQLite.Interop.dll"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"sqlite3_json_init"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueryFirst&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;"select json(' { \"this\" : \"is\", \"a\": [ \"test\" ] } ')"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above actually works on Windows (which I'll discuss at the end) but it fails on Linux. It shows an error indicating that the DLL is not found:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Unhandled Exception: System.Data.SQLite.SQLiteException: SQL logic error
The specified module could not be found.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately I wasn't able to find a lot of information on the net to help with this issue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#structure-of-the-nuget-package-and-sqlite"&gt;
  &lt;/a&gt;
  Structure of the NuGet package and SQLite
&lt;/h2&gt;

&lt;p&gt;I started looking into how the NuGet package and SQLite work in hopes of uncovering something that resolves the issue. SQLite is written in C. The NuGet package allows us to interface with it by calling the C functions through C#. Since the C code is native, it's specific to different operating systems and architectures. The NuGet package contains the native SQLite code compiled to &lt;a href="https://docs.microsoft.com/en-us/nuget/create-packages/supporting-multiple-target-frameworks#architecture-specific-folders"&gt;different platforms&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Actually, if you directly download &lt;code&gt;System.Data.SQLite.Core&lt;/code&gt; from NuGet and extract it (.nupkg files are just archives), there isn't a lot of code. If you open up &lt;code&gt;System.Data.SQLite.Core.nuspec&lt;/code&gt; in a text editor you will find that it's a simple wrapper for other packages. It conditionally references various other packages based on the version of .NET framework encountered. For instance, the package &lt;code&gt;Stub.System.Data.SQLite.Core.NetStandard&lt;/code&gt; is referenced for .NET Core. This package has a much larger size (3.72 MB vs 11.44 KB for the wrapper) and is actually what contains the code.&lt;/p&gt;

&lt;p&gt;Downloading and extracting this package, you'll find a &lt;code&gt;lib/&lt;/code&gt; folder with the C# DLL as well as the &lt;code&gt;runtimes/&lt;/code&gt; folder with platform specific native code as mentioned above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;runtimes/linux-x64/native/SQLite.Interop.dll
runtimes/win-x64/native/SQLite.Interop.dll
runtimes/osx-x64/native/SQLite.Interop.dll
runtimes/win-x86/native/SQLite.Interop.dll
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can inspect DLLs with &lt;a href="https://linux.die.net/man/1/nm"&gt;&lt;code&gt;nm&lt;/code&gt;&lt;/a&gt; on Linux. For example: &lt;code&gt;nm --dynamic runtimes/linux-x64/native/SQLite.Interop.dll&lt;/code&gt; shows all the symbols in the DLL. This is one way to examine what functions exist. A portion of the output for this command looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0000000000017028 T sqlite3_hard_heap_limit64
0000000000114ea2 T sqlite3_index_column_info_interop
00000000000d3cc4 T sqlite3_initialize
00000000000d6240 T sqlite3_interrupt
0000000000142a7f T sqlite3Json1Init
0000000000142c9d T sqlite3_json_init
00000000000d2533 T sqlite3_keyword_check
00000000000d2528 T sqlite3_keyword_count
00000000000d24ba T sqlite3_keyword_name
00000000000d556d T sqlite3_last_insert_rowid
0000000000114679 T sqlite3_last_insert_rowid_interop
00000000000d3ca1 T sqlite3_libversion
00000000000d3cae T sqlite3_libversion_number
00000000000d764f T sqlite3_limit
0000000000095810 T sqlite3_load_extension
000000000001b695 T sqlite3_log
000000000001746c T sqlite3_malloc
00000000000174a4 T sqlite3_malloc64
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet, we find functions that are part of the core SQLite code such as &lt;code&gt;sqlite3_initialize&lt;/code&gt; and &lt;code&gt;sqlite3_load_extension&lt;/code&gt;. But we also find &lt;code&gt;sqlite3_json_init&lt;/code&gt; which is the entry point of the JSON1 loadable extension. It looks like the DLL is sourced from the &lt;a href="https://www.sqlite.org/amalgamation.html"&gt;SQLite Amalgamation&lt;/a&gt;. The SQLite Amalgamation is a single file containing all of SQLite proper as well as about half a dozen loadable extensions that are maintained by the SQLite team. Although the extensions are not enabled during compilation, having them bundled makes it easier to distribute and enable them at runtime.&lt;/p&gt;

&lt;p&gt;Putting all this together, the structure of the NuGet package is as follows:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WcDeknvk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdev6quqz92d5vubp2on.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WcDeknvk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdev6quqz92d5vubp2on.png" alt="SQLite package structure"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-sqlite-loads-an-extension-at-runtime"&gt;
  &lt;/a&gt;
  How SQLite Loads an Extension at Runtime
&lt;/h2&gt;

&lt;p&gt;Using a SQLite loadable extension at runtime entails dynamically linking to the extension code. Whether it's done through C# code (&lt;code&gt;connection.LoadExtension()&lt;/code&gt; in the above snippet), the command-line SQLite shell (&lt;code&gt;.load&lt;/code&gt;), or other means, ultimately the process involves searching for a DLL and loading it into memory.&lt;/p&gt;

&lt;p&gt;I came across a &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/data/sqlite/extensions"&gt;Microsoft Docs page&lt;/a&gt; which indicates that SQLite doesn't leverage the .NET Core logic for finding native libraries. It directly calls the platform API to load the DLL. The way to influence this is to modify environment variables (&lt;code&gt;PATH&lt;/code&gt; on Windows, &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; or &lt;code&gt;DYLD_LIBRARY_PATH&lt;/code&gt; on Linux). There is &lt;a href="https://github.com/dotnet/docs/blob/main/samples/snippets/standard/data/sqlite/ExtensionsSample/Program.cs"&gt;sample code&lt;/a&gt; linked from the Doc that finds native libraries for the current runtime in a referenced NuGet package. The code notes that on Windows, &lt;code&gt;PATH&lt;/code&gt; could be modified with the path of found native libraries after the application starts. However for Linux, the environment variable must be modified before running the application which is cumbersome.&lt;/p&gt;

&lt;p&gt;Instead of changing environment variables to modify the DLL search locations, I wanted to see if we can somehow provide an absolute path for the DLL location. Looking at the &lt;a href="https://github.com/haf/System.Data.SQLite/blob/8d2e5027723654e97d2ad208b9a076da496eee79/System.Data.SQLite/SQLite3.cs#L2175"&gt;source for the NuGet package&lt;/a&gt; it's clear that, as the Microsoft Docs page noted, the C# code just invokes the native code (&lt;code&gt;sqlite3_load_extension()&lt;/code&gt;) directly. Therefore I looked at the &lt;a href="https://github.com/sqlite/sqlite/blob/4989a530a17e1caf4171d911bd42d8b7e5f34106/src/loadext.c#L646"&gt;SQLite source code&lt;/a&gt;. SQLite has the concept of &lt;a href="https://sqlite.org/vfs.html"&gt;VFS&lt;/a&gt; which is a portability layer at the bottom of the SQLite architecture. There are implementations of this abstraction for specific operating systems. Windows and Linux implementations are &lt;a href="https://github.com/sqlite/sqlite/blob/4989a530a17e1caf4171d911bd42d8b7e5f34106/src/os_win.c"&gt;os_win.c&lt;/a&gt; and &lt;a href="https://github.com/sqlite/sqlite/blob/4989a530a17e1caf4171d911bd42d8b7e5f34106/src/os_unix.c"&gt;os_unix.c&lt;/a&gt; respectively. The extension loading code eventually relies on VFS implementations to load DLLs. On Linux this is handled by &lt;a href="https://linux.die.net/man/3/dlopen"&gt;&lt;code&gt;dlopen&lt;/code&gt;&lt;/a&gt; and it's &lt;a href="https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibraryw"&gt;&lt;code&gt;LoadLibraryW&lt;/code&gt;&lt;/a&gt; on Windows. I later rediscovered this same information after reading the bottom (section 7) of a &lt;a href="https://www.sqlite.org/loadext.html#implementation_details"&gt;SQLite documentation page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Focusing on &lt;code&gt;dlopen()&lt;/code&gt;, the documentation shows that it accepts a full file path. This is great because I can obtain the location of the platform specific native library using the same approach as the Microsoft sample code from earlier. However instead of attempting to modify environment variables, I can provide the direct path to &lt;code&gt;connection.LoadExtension()&lt;/code&gt; and load the DLL. Since I'm on a Linux machine, I started by directly hard-coding the path to the native Linux library. If it works, I should be able to easily generalize it to work on other platforms.&lt;/p&gt;

&lt;p&gt;I changed the code to the following and ran &lt;code&gt;dotnet publish&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;SQLiteConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Data Source=:memory:"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LoadExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/&amp;lt;my-project-path&amp;gt;/bin/Debug/netcoreapp2.2/publish/runtimes/linux-x64/native/SQLite.Interop.dll"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"sqlite3_json_init"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueryFirst&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;"select json(' { \"this\" : \"is\", \"a\": [ \"test\" ] } ')"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I then ran the published DLL from the &lt;code&gt;/bin/Debug/netcoreapp2.2/publish/&lt;/code&gt; folder and it worked. The query that includes the &lt;code&gt;json()&lt;/code&gt; function provided by the extension ran successfully and I got the expected result.&lt;/p&gt;

&lt;p&gt;I didn't realize it at the time but it becomes important that I ran the DLL from the &lt;code&gt;publish/&lt;/code&gt; folder and not the one that's one level up at &lt;code&gt;/bin/Debug/netcoreapp2.2/&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#confusing-observations"&gt;
  &lt;/a&gt;
  Confusing Observations
&lt;/h2&gt;

&lt;p&gt;At this point I thought I had a good solution for loading the DLL. I started making other unrelated changes to my program. But when I tried to run it with &lt;code&gt;dotnet run&lt;/code&gt;, it wouldn't work. The program abruptly exits when it reaches the line that loads the extension. I tried running the published DLL as before, and that works. But using &lt;code&gt;dotnet run&lt;/code&gt; does not. There are no exceptions or errors of any kind that's outputted. Even when debugging (with &lt;code&gt;justMyCode&lt;/code&gt; set to false in &lt;code&gt;.vscode/launch.json&lt;/code&gt;) there are no signs that anything is wrong. It even indicated an exit code of 0 (i.e. successful termination of program). Yet the program was quitting abruptly. I was very confused and posted a &lt;a href="https://stackoverflow.com/questions/66773573/dotnet-run-exits-unexpectedly-when-loading-sqlite-extension"&gt;question&lt;/a&gt; on Stack Overflow.&lt;/p&gt;

&lt;p&gt;Unfortunately I didn't get any answers. One thing I eventually tried was using newer versions of the .NET framework since I was on version 2.2. I changed the project target to 3.1 and tried &lt;code&gt;dotnet run&lt;/code&gt;. I got the same behavior of the program terminating without errors when it got to loading the extension. I executed the DLL (from the &lt;code&gt;/bin/Debug/netcoreapp3.1/&lt;/code&gt; folder) directly and this time it terminated in the same place but I got a &lt;code&gt;segmentation fault&lt;/code&gt; error. I was more confused because I expected this to work (it seemed like it was working when using version 2.2). I changed the target framework to 5.0 and tried again. I got the same results as 3.1. Then I changed it back to 2.2 and I started getting &lt;code&gt;segmentation fault&lt;/code&gt; there as well when executing the DLL directly. This was really puzzling because it was working earlier. We'll get to it later but this was because this time I was executing the DLL from &lt;code&gt;/bin/Debug/netcoreapp2.2/&lt;/code&gt; instead of &lt;code&gt;/bin/Debug/netcoreapp2.2/publish/&lt;/code&gt;. However, I didn't realize it at the time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#segmentation-fault"&gt;
  &lt;/a&gt;
  Segmentation Fault
&lt;/h2&gt;

&lt;p&gt;I turned my attention towards investigating the segmentation fault I was seeing. It means there is improper memory access occurring somewhere. However this can't happen in managed code so it was likely coming from the native C code for SQLite. I used &lt;code&gt;gdb&lt;/code&gt; to debug and find the offending line. The following is a snippet of the call stack after my program crashes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Thread 1 "dotnet" received signal SIGSEGV, Segmentation fault.
0x0000000000000000 in ?? ()
(gdb) bt
#0  0x0000000000000000 in ?? ()
#1  0x00007fffec630c04 in sqlite3_mutex_enter (p=0x555555859f28) at ../core/sqlite3.c:25905
#2  0x00007fffec6f05c9 in createFunctionApi (db=0x5555559a43c8, zFunc=0x7fffec773d60 "json", nArg=1, enc=2099201, p=0x7fffec99a3cc &amp;lt;aFunc.54932+12&amp;gt;, xSFunc=0x7fffec75ae78 &amp;lt;jsonRemoveFunc&amp;gt;, 
    xStep=0x0, xFinal=0x0, xValue=0x0, xInverse=0x0, xDestroy=0x0) at ../core/sqlite3.c:162077
#3  0x00007fffec6f0708 in sqlite3_create_function (db=0x5555559a43c8, zFunc=0x7fffec773d60 "json", nArg=1, enc=2099201, p=0x7fffec99a3cc &amp;lt;aFunc.54932+12&amp;gt;, 
    xSFunc=0x7fffec75ae78 &amp;lt;jsonRemoveFunc&amp;gt;, xStep=0x0, xFinal=0x0) at ../core/sqlite3.c:162117
#4  0x00007fffec75cb33 in sqlite3Json1Init (db=0x5555559a43c8) at ../ext/json1.c:2591
#5  0x00007fffec75ccbd in sqlite3_json_init (db=0x5555559a43c8, pzErrMsg=0x7fffffffc670, pApi=0x7fffecd215c0 &amp;lt;sqlite3Apis&amp;gt;) at ../ext/json1.c:2623
#6  0x00007fffeca366ae in sqlite3LoadExtension (db=0x5555559a43c8, 
    zFile=0x7fff5807dd98 "/&amp;lt;my-project-path&amp;gt;/bin/Debug/netcoreapp2.2/publish/runtimes/linux-x64/native/SQLite.Interop.dll", zProc=0x7fff5807de60 "sqlite3_json_init", 
    pzErrMsg=0x7fffffffc7c8) at ../core/sqlite3.c:124451
#7  0x00007fffeca36850 in sqlite3_load_extension (db=0x5555559a43c8, 
    zFile=0x7fff5807dd98 "/&amp;lt;my-project-path&amp;gt;/bin/Debug/netcoreapp2.2/publish/runtimes/linux-x64/native/SQLite.Interop.dll", zProc=0x7fff5807de60 "sqlite3_json_init", 
    pzErrMsg=0x7fffffffc7c8) at ../core/sqlite3.c:124484
#8  0x00007fff7d01ca34 in ?? ()
#9  0x4164657a696c6169 in ?? ()
#10 0x0000000094cf77ea in ?? ()
#11 0x00007ffff66f6c38 in ?? () from /usr/share/dotnet/shared/Microsoft.NETCore.App/2.2.8/libcoreclr.so
#12 0x00007fffffffcbb8 in ?? ()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As expected the issue was in SQLite code. I tried looking at the &lt;a href="https://github.com/sqlite/sqlite/blob/4ad1a1c74caeee76124091e6e1771fae4afa1a33/src/mutex.c#L315"&gt;code&lt;/a&gt; where the problem was occurring but nothing stood out. Searching the web for segmentation faults related to SQLite I came across &lt;a href="https://sqlite.org/forum/forumpost/f7aaee5190"&gt;this forum post&lt;/a&gt;. The answer pointed to multiple instances of SQLite being the issue. Although the forum post was about a python application, I started wondering if there were multiple instances being created in my application as well. It seemed unlikely because I wasn't using threads or doing anything fancy. It was a simple console application. Perhaps something was lingering from earlier runs of my application? I tried restarting VS Code and the entire machine. I tried using an actual file instead of an in-memory database. I tried explicitly enabling extension loading (&lt;code&gt;connection.EnableExtensions(true)&lt;/code&gt;) even though it was already enabled. I looked at various compile and connection setup flags in SQLite. None of this helped.&lt;/p&gt;

&lt;p&gt;Looking up information about the function where the error is occurring (&lt;code&gt;sqlite3_mutex_enter&lt;/code&gt;), I came across a Stack Overflow question about access violation (i.e. segmentation fault) in python. The &lt;a href="https://stackoverflow.com/questions/24253406/access-violation-on-sqlite3-mutex-enter-why#24262103"&gt;accepted answer&lt;/a&gt; talks about multiple modules which apparently are DLLs on Windows. The solution in this case was invoking &lt;code&gt;sqlite3_initialize()&lt;/code&gt; in the SQLite code for the second module. Although it was a different language, it seemed like the same issue I was facing. And it seems to align with the eariler forum post about multiple instances of SQLite being the issue.&lt;/p&gt;

&lt;p&gt;Given the above information, I wanted to see if I can reach into the native library and invoke &lt;code&gt;sqlite3_initialize()&lt;/code&gt;. This was quite straightforward. I added the following method signature that corresponds to the C function I wanted to invoke and decorated it with &lt;code&gt;DllImport&lt;/code&gt; attribute specifying the full path to the DLL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;DllImport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/&amp;lt;my-project-path&amp;gt;/bin/Debug/netcoreapp2.2/publish/runtimes/linux-x64/native/SQLite.Interop.dll"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sqlite3_initialize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then I added a call to this method before loading the extension.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;SQLiteConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Data Source=:memory:"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nf"&gt;sqlite3_initialize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LoadExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/&amp;lt;my-project-path&amp;gt;/bin/Debug/netcoreapp2.2/publish/runtimes/linux-x64/native/SQLite.Interop.dll"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"sqlite3_json_init"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueryFirst&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;"select json(' { \"this\" : \"is\", \"a\": [ \"test\" ] } ')"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the above changes, the program did not terminate abruptly or lead to a segmentation fault. The JSON extension was loaded and the SQL query that made use of syntax provided by the extension executed successfully.&lt;/p&gt;

&lt;p&gt;It was working at this point. But the fix was a workaround. It was clear that there were two different DLLs being loaded. As we saw earlier &lt;code&gt;SQLite.Interop.dll&lt;/code&gt; is made from the SQLite Amalgamation. Therefore when the extension is loaded, a second full instance of SQLite was also being loaded. The first instance would be what is referenced directly by the NuGet package and used to establish the database connection and execute queries. I wanted to inspect the location of this first instance. To do so, I printed the location of the assembly that contains the &lt;code&gt;SQLiteConnection&lt;/code&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SQLiteConnection&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Assembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and got the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/home/&amp;lt;my-user&amp;gt;/.nuget/packages/stub.system.data.sqlite.core.netstandard/1.0.113.2/lib/netstandard2.0/System.Data.SQLite.dll
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This was surprising because I thought it would be referencing the package from the &lt;code&gt;publish/&lt;/code&gt; folder. I changed my code to refer to the same absolute path as above when loading the extension. I also removed the call to &lt;code&gt;sqlite3_initialize()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;SQLiteConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Data Source=:memory:"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SQLiteConnection&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Assembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LoadExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/home/&amp;lt;my-user&amp;gt;/.nuget/packages/stub.system.data.sqlite.core.netstandard/1.0.113.2/runtimes/linux-x64/native/SQLite.Interop.dll"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"sqlite3_json_init"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueryFirst&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;"select json(' { \"this\" : \"is\", \"a\": [ \"test\" ] } ')"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above worked. The same exact DLL was being referenced so there weren't multiple instances of SQLite.&lt;/p&gt;

&lt;p&gt;At this point, I remembered that publishing my program creates a DLL in the &lt;code&gt;publish/&lt;/code&gt; folder. Ever since I encountered the segmentation fault, I was executing the DLL that was one level up. When I executed the DLL inside the &lt;code&gt;publish/&lt;/code&gt; folder, I saw that the path of the assembly containing &lt;code&gt;SQLiteConnection&lt;/code&gt; was the following and the program was terminated with a segmentation fault error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/&amp;lt;my-project-path&amp;gt;/bin/Debug/netcoreapp2.2/publish/System.Data.SQLite.dll
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It now made sense why the program worked when I initially hard-coded the full path of the DLL. I executed it from the &lt;code&gt;publish/&lt;/code&gt; folder. Therefore, the NuGet package and the &lt;code&gt;LoadExtension&lt;/code&gt; call were referencing the same native library. It meant only one instance of SQLite existed and hence there wasn't an issue. This observation raised a couple of questions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#questions-about-net-sdk"&gt;
  &lt;/a&gt;
  Questions About .NET SDK
&lt;/h2&gt;

&lt;p&gt;The first question was why there are two seemingly identical DLLs created. Ever since I first worked with .NET Core I've noticed that when publishing a program &lt;code&gt;Foo&lt;/code&gt;, both &lt;code&gt;/bin/Debug/netcoreapp2.2/Foo.dll&lt;/code&gt; and &lt;code&gt;/bin/Debug/netcoreapp2.2/publish/Foo.dll&lt;/code&gt; get created but didn't figure out why. It was clear that the one in the &lt;code&gt;publish/&lt;/code&gt; folder is part of the end result of the publishing process. However, why does the same DLL exist one level up? There were quite a few Stack Overflow questions that asked about this (among other things) but frustratingly none of their answers addressed this particular question. I finally came across &lt;a href="https://stackoverflow.com/questions/49939630/why-does-dotnet-publish-create-2-copies-of-the-same-files"&gt;one question&lt;/a&gt; that directly answered it. I now understand that &lt;code&gt;/bin/Debug/netcoreapp2.2/&lt;/code&gt; is used as the output location when building. The files are then copied to &lt;code&gt;/bin/Debug/netcoreapp2.2/publish/&lt;/code&gt; when publishing. This would have been less confusing if Microsoft defaulted to a different folder as the output location of build artifacts, perhaps &lt;code&gt;/bin/Debug/netcoreapp2.2/build/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second question was why when executing the DLL from the build location, it looks for packages in &lt;code&gt;/home/&amp;lt;my-user&amp;gt;/.nuget/packages/&lt;/code&gt; (trivia: this is called a "probing directory". In this context, probing is the process of locating assemblies by the runtime). I was able to find the answer in the &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-build"&gt;documentation for &lt;code&gt;dotnet build&lt;/code&gt;&lt;/a&gt;. It states that:&lt;/p&gt;

&lt;blockquote&gt;For executable projects targeting versions earlier than .NET Core 3.0, library dependencies from NuGet are typically NOT copied to the output folder. They're resolved from the NuGet global packages folder at run time.&lt;/blockquote&gt;

&lt;p&gt;So this was a change in newer versions of the framework. I was able to confirm this by outputting the location of the assembly containing &lt;code&gt;SQLiteConnection&lt;/code&gt; for the different versions.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;Build output DLL&lt;/th&gt;
&lt;th&gt;Publish output DLL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2.2&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/home/&amp;lt;my-user&amp;gt;/.nuget/packages/stub.system.data.sqlite.core.netstandard/1.0.113.2/lib/netstandard2.0/System.Data.SQLite.dll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/&amp;lt;my-project-path&amp;gt;/bin/Debug/netcoreapp2.2/publish/System.Data.SQLite.dll&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/&amp;lt;my-project-path&amp;gt;/bin/Debug/netcoreapp3.1/System.Data.SQLite.dll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/&amp;lt;my-project-path&amp;gt;/bin/Debug/netcoreapp3.1/publish/System.Data.SQLite.dll&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/&amp;lt;my-project-path&amp;gt;/bin/Debug/netcoreapp5.0/System.Data.SQLite.dll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/&amp;lt;my-project-path&amp;gt;/bin/Debug/netcoreapp5.0/publish/System.Data.SQLite.dll&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;As can be seen above, newer versions of the framework load dependencies from a location relative to the executing program whether the program was built or published. This makes it easier to consistently locate a native library for my use case.&lt;/p&gt;

&lt;p&gt;Another unresolved item was why directly executing the DLL resulted a &lt;code&gt;segmentation fault&lt;/code&gt; error but using &lt;code&gt;dotnet run&lt;/code&gt; abruptly ends the program with no indication as to the cause. I was curious as to what actually prints the error on the terminal in the first case. In Linux, a segmentation fault is one of the many signals that can be sent from the kernel or between processes. According to &lt;a href="https://unix.stackexchange.com/questions/53289/does-segmentation-fault-message-come-under-stderr"&gt;this question&lt;/a&gt;, if the &lt;code&gt;SIGSEGV&lt;/code&gt; signal (i.e. a segmentation fault) is not handled by the program, the program is terminated and the the parent process (i.e. the shell) prints out the message to it's (not the program's, which is already terminated) standard error.&lt;/p&gt;

&lt;p&gt;So in the context of my program, it's the Linux shell that's telling me that there's a segmentation fault. I wanted to know how &lt;code&gt;dotnet run&lt;/code&gt; executes programs. Looking at the .NET SDK &lt;a href="https://github.com/dotnet/sdk/blob/ef99d3240a737fead9a731785fd7bc2d0ae157d6/src/Cli/Microsoft.DotNet.Cli.Utils/Command.cs#L37"&gt;source code&lt;/a&gt;, it starts a new process to execute the program. It also reads the standard output and standard error streams from the process it creates. However, I did not see logic dealing with handling signals such as &lt;code&gt;SIGSEGV&lt;/code&gt;. I've opened &lt;a href="https://github.com/dotnet/sdk/issues/16561"&gt;an issue&lt;/a&gt; for this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#behavior-on-windows"&gt;
  &lt;/a&gt;
  Behavior on Windows
&lt;/h2&gt;

&lt;p&gt;To gain a broader understanding of items discussed above, I also looked at the behavior on a Windows machine. I used VS Code and not Visual Studio so that that doesn't become a factor. I looked into why simply specifying the DLL name without a path (e.g. &lt;code&gt;SQLite.Interop.dll&lt;/code&gt;) works on Windows. This is explained by the &lt;a href="https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order#search-order-for-desktop-applications"&gt;search order&lt;/a&gt; used when loading DLLs. The first thing that the system checks is if the DLL with the same module name is already in memory. If so, then the already loaded DLL is used and the search stops. This seems to be what's happening in this case. When the application creates the database connection, it's using the native library (since it's an amalgamation containing the core SQLite code as well as the loadable extension). Therefore, the DLL is already loaded by the time we invoke &lt;code&gt;LoadExtension()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To test this further, I made a copy of the DLL in the same folder and renamed it to &lt;code&gt;SQLite.Interop_copy.dll&lt;/code&gt;. Then I modified the code to load this renamed DLL (again without specifying the path) and it was not able to find it. The search order is then to look for the DLL in various directories, and lastly in paths listed in the &lt;code&gt;PATH&lt;/code&gt; environment variable. The location of the renamed DLL doesn't match any of these and thus it's not found. If I modify the &lt;code&gt;PATH&lt;/code&gt; environment variable and add the location, then the renamed DLL is found. This made it possible to see the Windows DLL search heuristic in action.&lt;/p&gt;

&lt;p&gt;I also wanted to see if Windows will report a segmentation fault. Using the bash shell within VS Code, I got a &lt;code&gt;segementation fault&lt;/code&gt; while using &lt;code&gt;dotnet run&lt;/code&gt; as well as when directly executing the DLL. I then switched to using PowerShell in which case the program halted abruptly for both ways of executing it. So it looks like the behavior differs based on the shell I'm using when it comes to Windows.&lt;/p&gt;

&lt;p&gt;Lastly, I wanted to see how .NET handles segmentation faults within C# code. I didn't find a way to intentionally cause this with managed code so I had to switch to an unsafe context and write unmanaged code. I declared an integer variable and assign it's memory address to a pointer. I then shift the pointer by an arbitrary value and attempt to access that address as an integer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;unsafe&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;70&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pointer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;pointer&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="m"&gt;500000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)*&lt;/span&gt;&lt;span class="n"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above results in the exception: &lt;code&gt;Fatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.&lt;/code&gt; This indicates that there is a difference in how improper memory access is handled when it occurs in unmanaged code as opposed to a native library (which technically is still unmanaged code). If anyone has an explanation of why this is, I'd like to know.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lessons-learned"&gt;
  &lt;/a&gt;
  Lessons Learned
&lt;/h2&gt;

&lt;p&gt;This journey was a diversion from the project I was working on but a lot of lessons were learned in the process. I learned more about the .NET build and publish steps and why there are duplicate DLL files in the output directory. I also learned about the the types of things that could be different between .NET SDK versions and the importance of ensuring installed versions are up-to-date. I have a better understanding of how DLLs are loaded in both Linux and Windows. I gained insight into the inner workings of SQLite and the NuGet packages that interface with it to allow it's usage in .NET. Diving into the source code of a very successful project and a complex one like that of a database seems daunting, but SQLite has excellent documentation and it was a rewarding experience.&lt;/p&gt;

&lt;p&gt;Furthermore, I got to use &lt;code&gt;gdb&lt;/code&gt; to debug a segmentation fault and also learned about how signals in general work in Linux. This was also a good experience at putting together information from various sources and different programming languages to solve a problem. It also demonstrated the effectiveness of using different phrases when searching for solutions. Searching for "segmentation fault" and "access violation" provided different pieces to the puzzle. Finally, this was a practice in perseverance. Not giving up easily when feeling lost is difficult. But at the same time, you gain a powerful sense of accomplishment when things make sense in the end. This image is an apt illustration:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ghd9ld3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/dzbQCj4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ghd9ld3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/dzbQCj4.png" alt='The two states of every programmer: "I am a God" and "I have no idea what I'&gt;&lt;/a&gt;&lt;br&gt;
Image: &lt;a href="https://imgur.com/gallery/dzbQCj4"&gt;George Broussard&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>sqlite</category>
      <category>csharp</category>
      <category>database</category>
    </item>
    <item>
      <title>How do you like my resume?</title>
      <author>ùêãùêÑùëΩùêàùë®ùêìùêáùêÄùêç Programming</author>
      <pubDate>Fri, 09 Apr 2021 16:52:00 +0000</pubDate>
      <link>https://dev.to/leviathanprogramming/how-do-you-like-my-resume-46a0</link>
      <guid>https://dev.to/leviathanprogramming/how-do-you-like-my-resume-46a0</guid>
      <description>&lt;p&gt;I styled my resume out of HTML, CSS, and P5.js.&lt;br&gt;
I would love to hear your thoughts on it.  It did take me a while to make it, but it came out quite nicely.&lt;br&gt;
&lt;a href="https://codepen.io/LeviathanProgramming/full/PoWEYLr"&gt;https://codepen.io/LeviathanProgramming/full/PoWEYLr&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>discuss</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Down The Whole Ya Go</title>
      <author>0Habitz0</author>
      <pubDate>Fri, 09 Apr 2021 16:45:58 +0000</pubDate>
      <link>https://dev.to/0habitz0/down-the-whole-ya-go-1fm6</link>
      <guid>https://dev.to/0habitz0/down-the-whole-ya-go-1fm6</guid>
      <description>&lt;h1&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  INTRO
&lt;/h1&gt;

&lt;p&gt;YouTube ad sense is a big portion of it's profit stream. Soooooo we are going to stop that! Well not really. However, we can block all of their ad's from reaching us. A while back I set up a Pi Hole and I thought I'd explain my journey into the setup. Pi Hole is a DNS filtering tool that can be configured to block advertisements, trackers, malicious websites, and malware. &lt;/p&gt;

&lt;p&gt;We are going to do this with the help of a Raspberry Pi.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X-P6xIRx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tvt1foxipi64hiqmy52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X-P6xIRx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tvt1foxipi64hiqmy52.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-though"&gt;
  &lt;/a&gt;
  WHY THOUGH!
&lt;/h1&gt;

&lt;p&gt;Traditional ad blockers are set up on a web browser. They typically analyze the data that's coming from your visited web page and either replace or remove advertisements. This works great for that one browser. I ran into a problem where everyone in my house doesn't have this installed or even knows what an ad block extension is. Pi Hole is a great solution as it can block ad on all of the devices within my house (iphones, androids, and computers). &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#basic-concept"&gt;
  &lt;/a&gt;
  Basic Concept
&lt;/h1&gt;

&lt;p&gt;Let's say you launch a mobile game on your phone. As it's launching, all the assists are loading (texters, dialog, music, etc). At the same time, a request is being made by the game's url DNS server, which is managing the ads for that application. Your router then looks up that url and replies to your phone with a specific ip address that contains the ad. Instead of storing ads to application this method allows advertisers to dynamically serve individually tailored ads.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--veoe1llA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jo99w3m7xrp8xr2zy76.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--veoe1llA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jo99w3m7xrp8xr2zy76.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pi Hole can block this process, or stand in between the DNS server and your device. Pi Hole will contain a blacklist of sites to block. If your device is attempting to retrieve information from a blacklisted site, then it would reply to your device with an unspecified address. Which would not show the ad on your device. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pgr-gYuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plja8hyc0k3hp7wyuzfc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pgr-gYuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plja8hyc0k3hp7wyuzfc.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setups"&gt;
  &lt;/a&gt;
  Setups
&lt;/h1&gt;

&lt;p&gt;This involved the following steps&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install Raspbian on a micro sd&lt;/li&gt;
&lt;li&gt;Change the default passwords&lt;/li&gt;
&lt;li&gt;Configure a static IP for my raspberry pi&lt;/li&gt;
&lt;li&gt;SSH into the pi (I didn't want to connect a monitor to my pi)&lt;/li&gt;
&lt;li&gt;Run the one line install command on the my raspberry pi terminal&lt;/li&gt;
&lt;li&gt;Get to the networking selection and set up the default blacklists&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Whats cool about these steps is that I was exposed to my terminal more than usual!.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3omTEWx1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wnsayrivgr2x9882zvoj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3omTEWx1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wnsayrivgr2x9882zvoj.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All that's left if the connect the the ip address and we are in!&lt;/p&gt;

&lt;p&gt;Finished Product&lt;br&gt;
At the end of it, you get this dashboard where you can manage your blacklist whitelist, devices, and certain statistics :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WQssP8MR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3ugwm3u170o2nio6hw5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQssP8MR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3ugwm3u170o2nio6hw5.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Overall all, this is a dandy project. If you are interested in in getting your hands dirty and want to setup your own pi hole here is the link &lt;a href="https://pi-hole.net/"&gt;Pihole&lt;/a&gt;&lt;/p&gt;

</description>
      <category>raspberrypi</category>
      <category>linux</category>
      <category>bash</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Insert Github Stats into Your Profile's README.</title>
      <author>1001binary</author>
      <pubDate>Fri, 09 Apr 2021 16:35:33 +0000</pubDate>
      <link>https://dev.to/1001binary/insert-github-stats-into-your-profile-s-readme-5fnk</link>
      <guid>https://dev.to/1001binary/insert-github-stats-into-your-profile-s-readme-5fnk</guid>
      <description>&lt;p&gt;This is C# code to demonstrate how to insert Github Stats into your profile's README.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// First of all, sign in Github on the default browser.&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;yourGithubUsername&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"YOUR_GITHUB_USERNAME"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Go to README of your Github profile.&lt;/span&gt;
&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"https://github.com/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;yourGithubUsername&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;
&lt;/span&gt;                &lt;span class="p"&gt;/{&lt;/span&gt;&lt;span class="n"&gt;yourGithubUsername&lt;/span&gt;&lt;span class="p"&gt;}/&lt;/span&gt;&lt;span class="n"&gt;edit&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;README&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="s"&gt;");
&lt;/span&gt;
&lt;span class="c1"&gt;// Insert this into README file and then replace YOUR_NAME&lt;/span&gt;
&lt;span class="c1"&gt;// and YOUR_GITHUB_USERNAME.&lt;/span&gt;
&lt;span class="cm"&gt;/*
[[YOUR_NAME]'s Stats](https://github-readme-stats.vercel.app
/api?username=[YOUR_GITHUB_USERNAME]&amp;amp;show_icons=true)
*/&lt;/span&gt;

&lt;span class="c1"&gt;// Sleep 15 seconds.&lt;/span&gt;
&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TimeSpan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromSeconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Done"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It sounds interesting, right?&lt;/p&gt;

&lt;p&gt;Happy coding :)&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>github</category>
      <category>stats</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 09 Apr 2021 16:25:29 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-1jd5</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-1jd5</guid>
      <description>&lt;p&gt;Hey there!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking back on your week ‚Äî what was something you're proud of?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All wins count ‚Äî big or small üéâ&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Finding some signs of Spring ... or whatever else might spark joy ‚ù§Ô∏è &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Happy Weekend!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3ohuPjybONXKhH8uWI/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3ohuPjybONXKhH8uWI/giphy.gif" alt="Spongebob sleeping"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
  </channel>
</rss>
