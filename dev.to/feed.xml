<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Build your own React CI in 5 minutes!</title>
      <author>Gökay Okyay</author>
      <pubDate>Fri, 07 May 2021 23:11:22 +0000</pubDate>
      <link>https://dev.to/gokayokyay/build-your-own-react-ci-in-5-minutes-1aen</link>
      <guid>https://dev.to/gokayokyay/build-your-own-react-ci-in-5-minutes-1aen</guid>
      <description>&lt;p&gt;Hey everyone! This post is part of &lt;em&gt;Introduction to StewardX&lt;/em&gt; series.&lt;/p&gt;

&lt;p&gt;In this tutorial, I'll show you how can you build your own CI, super easy.&lt;/p&gt;

&lt;p&gt;All you need is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gokayokyay/stewardx"&gt;StewardX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A Linux server (preferably with sudo access)&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;NodeJS - for building React of course 😊&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My server's OS is Debian flavored (Ubuntu) but you should be able to find the installation commands of the packages for your own distribution just by a quick search, if not please leave a comment so I can help you. Okay here we go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-nginx"&gt;
  &lt;/a&gt;
  Install Nginx
&lt;/h2&gt;

&lt;p&gt;Pretty straightforward. Just run the command below if Nginx is not installed on your server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you should be able to access your server via http, just navigate to&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://yourserverip&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And you'll be presented Nginx's default welcome page. If not, you please check if your ports are not blocked and nginx is installed correctly. You can follow the &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04"&gt;amazing tutorial by DigitalOcean&lt;/a&gt; to configure ports for nginx.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I'm not affiliated with DO in any manners, I just like their tutorials.&lt;/p&gt;

&lt;p&gt;Once you got Nginx working proceed to the next step:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-nginx-to-serve-your-react-app"&gt;
  &lt;/a&gt;
  Configuring Nginx to serve your React app
&lt;/h2&gt;

&lt;p&gt;Now, for more detailed explanation you can follow &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-deploy-a-react-application-with-nginx-on-ubuntu-20-04"&gt;this tutorial on DigitalOcean&lt;/a&gt;. But I'll be demonstrating how you can configure it here too.&lt;/p&gt;

&lt;p&gt;To keep it simple and fast, I won't be demonstrating the server blocks but in production you should use them! For now, I'm just going to use the default one.&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;/etc/nginx/sites-enabled/default&lt;/code&gt; with your favorite editor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;nano /etc/nginx/sites-enabled/default
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you scroll down, you'll see this specific line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;root /var/www/html&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay this line means that Nginx will serve the files it found in that specific directory. So we'll move our built files there. If you want, you can change the directory I won't be changing it for this tutorial. Moving on!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-our-react-app"&gt;
  &lt;/a&gt;
  Building our React app
&lt;/h2&gt;

&lt;p&gt;I'll be using the &lt;a href="https://github.com/gokayokyay/stewardx-docs"&gt;documentation repository of StewardX&lt;/a&gt; for demonstration purposes. It's a React app too 😊&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/gokayokyay/stewardx-docs
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;stewardx-docs
&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="c"&gt;# or yarn&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay now I can build my app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm run build &lt;span class="c"&gt;# or yarn build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll see a &lt;code&gt;build&lt;/code&gt; folder has been created. Great!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-and-running-stewardx"&gt;
  &lt;/a&gt;
  Installing and Running StewardX
&lt;/h2&gt;

&lt;p&gt;Head over to &lt;a href="https://github.com/gokayokyay/stewardx/releases/latest"&gt;releases page of StewardX&lt;/a&gt; and download the latest binary, it'll have a name like: &lt;code&gt;stewardx_${version}_${os}_${arch}&lt;/code&gt;. At the time of writing, the latest binary is named: &lt;code&gt;stewardx_v0.1.2_linux_x64&lt;/code&gt;. I suggest that you download it to a directory. I'll be creating a new one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;stewardx
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;stewardx
&lt;span class="nv"&gt;$ &lt;/span&gt;wget https://github.com/gokayokyay/stewardx/releases/download/v0.1.2/stewardx_v0.1.2_linux_x64 &lt;span class="nt"&gt;-O&lt;/span&gt; stewardx
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt; +x stewardx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since it's not even in beta, you might have to build it from source, to do it please follow this link: &lt;a href="https://stewardx.dev/getting-started#building-it-from-source"&gt;Building it from source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, you'll need to have a PostgreSQL instance running to start StewardX. You can get a free one or start your own by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-P&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; 127.0.0.1:5432:5432 &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/postgres-data:/var/lib/postgresql/data"&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"1234"&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; pg postgres:alpine
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; DON'T USE THIS COMMAND FOR PRODUCTION, PLEASE! IT'S PASSWORD IS 1234 😭&lt;/p&gt;

&lt;p&gt;You'll need your database URL. If you run the command above, then it is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;postgresql://postgres:1234@localhost:5432/postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run this command while you're still at the same directory with &lt;code&gt;stewardx&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;STEWARDX_DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;postgresql://postgres:1234@localhost:5432/postgres ./stewardx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you see no output, then it means it's working! 😊&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-build-script"&gt;
  &lt;/a&gt;
  Creating the build script
&lt;/h2&gt;

&lt;p&gt;I'll create a new a directory for the script&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;ci-scripts
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;ci-scripts
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;react-ci.sh
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt; +x react-ci.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now open the script with your favorite editor and paste the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;PROJECT_DIR_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;stewardx-docs
&lt;span class="nv"&gt;PROJECT_GIT_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://github.com/gokayokyay/stewardx-docs
&lt;span class="nv"&gt;PROJECT_PARENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/
&lt;span class="nv"&gt;DEPLOY_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/www/html/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've just defined the variables here, moving on:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;...
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$PROJECT_PARENT&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$PROJECT_PARENT&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$PROJECT_DIR_NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; 
&lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Directory &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_DIR_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; exists. Skipping git clone..."&lt;/span&gt; 
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$PROJECT_DIR_NAME&lt;/span&gt;
    git stash
    git pull
&lt;span class="k"&gt;else
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Directory &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_DIR_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; doesn't exists, cloning it..."&lt;/span&gt;
    git clone &lt;span class="nv"&gt;$PROJECT_GIT_URL&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$PROJECT_DIR_NAME&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We pull the latest changes if available. Time to build it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;...
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Cleaning node_modules for a fresh start!"&lt;/span&gt;
&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; node_modules
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Installing the modules..."&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Documentation repository don't have any tests, so I'm skipping test command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;...
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Now building it, this can take a while"&lt;/span&gt;
npm run build
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Cleaning old files in serve directory"&lt;/span&gt;
&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; &lt;span class="nv"&gt;$DEPLOY_DIR&lt;/span&gt;/&lt;span class="k"&gt;*&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Okay, now moving the artifacts into the serve directory."&lt;/span&gt;
&lt;span class="nb"&gt;mv &lt;/span&gt;build/&lt;span class="k"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;$DEPLOY_DIR&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Done."&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And save it.&lt;/p&gt;

&lt;p&gt;Issue this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and save it's output for the next step.&lt;/p&gt;

&lt;p&gt;Now to test our script, just run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./react-ci.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go check your website &lt;code&gt;http://yourserverip&lt;/code&gt; if it works, now it's time to&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-webhook"&gt;
  &lt;/a&gt;
  Create a webhook
&lt;/h2&gt;

&lt;p&gt;Get the output of &lt;code&gt;pwd&lt;/code&gt; command from previous step. To add a webhook to StewardX we can either use it's &lt;a href="https://stewardx.dev/panel"&gt;panel&lt;/a&gt; (needs to be built) or just send a request to it by any web client, I'll be using curl:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;--header&lt;/span&gt; &lt;span class="s2"&gt;"Content-Type: application/json"&lt;/span&gt; &lt;span class="nt"&gt;-X&lt;/span&gt; POST &lt;span class="nt"&gt;--data&lt;/span&gt; &lt;span class="s1"&gt;'{"task_name": "React app CI", "frequency": "Hook", "task_type": "CmdTask", "task_props": {"command":"/bin/bash #pwd_output#"}}'&lt;/span&gt; http://localhost:3000/tasks
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change &lt;strong&gt;#pwd_output#&lt;/strong&gt; with the output you saved from previous step mine was: &lt;code&gt;/root/ci-scripts/react-ci.sh&lt;/code&gt; (yup used root, I like danger)&lt;/p&gt;

&lt;p&gt;This command will output an id, save it for the last step:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-webhook-from-github"&gt;
  &lt;/a&gt;
  Using the webhook from GitHub
&lt;/h2&gt;

&lt;p&gt;Now, it is time to add the webhook to the GitHub. Navigate to your project's repository, and click settings.&lt;/p&gt;

&lt;p&gt;Navigate to &lt;code&gt;Webhooks&lt;/code&gt; section from the left panel. Click &lt;code&gt;Add webhook&lt;/code&gt; button found on the top of the page. When the page opens up, you'll want to fill the &lt;code&gt;Payload URL&lt;/code&gt; with &lt;code&gt;yourserversurl:STEWARDX_PORT/execute/id_of_your_task&lt;/code&gt;, so it'll look something like &lt;code&gt;http://mydomain.com:3000/execute/c99ff533-d3c2-4ee3-9b8f-a972a9db00db&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And congratulations! You've created your own CI!&lt;/p&gt;

&lt;p&gt;For more information and documentation of StewardX, please visit &lt;a href="https://stewardx.dev"&gt;https://stewardx.dev&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I really appreciate if you leave a feedback 😊 Stay safe!&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>devops</category>
      <category>react</category>
      <category>nginx</category>
    </item>
    <item>
      <title>My Journey as Opensource Contributor</title>
      <author>Jordan Kalebu</author>
      <pubDate>Fri, 07 May 2021 22:57:15 +0000</pubDate>
      <link>https://dev.to/kalebu/my-journey-as-opensource-contributor-2fpc</link>
      <guid>https://dev.to/kalebu/my-journey-as-opensource-contributor-2fpc</guid>
      <description>&lt;p&gt;Hi everyone, &lt;/p&gt;

&lt;p&gt;This article originally started as a &lt;a href="https://twitter.com/j_kalebu"&gt;thread&lt;/a&gt; on Twitter and then decided to make an article about it regarding my journey as an open-source contributor, Hope you will enjoy it, take your time &lt;/p&gt;

&lt;p&gt;I early 2020 started a journey as a content creator whereby I have been writing technical content on Software Development whereby mostly being focused on the Python stack.&lt;/p&gt;

&lt;p&gt;In the last 5 months, I began a new journey as an opensource contributor, and up to date I have contributed to 8 different python packages&lt;/p&gt;

&lt;p&gt;In this, I'm going to share my journey as 5 months old contributor and my thoughts on contributing to opensource.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-of-the-journey"&gt;
  &lt;/a&gt;
  Start of the Journey
&lt;/h2&gt;

&lt;p&gt;The Journey started in December 2020 when Vodacom released their public &lt;a href="https://openapiportal.m-pesa.com/sign-up"&gt;Mpesa Payment API&lt;/a&gt;, As I was looking for a way to integrate with python I came across their implementation for a python wrapper. &lt;/p&gt;

&lt;p&gt;I hardly understood it, and usage seems unpythonic to me, I then convinced myself it could be better than that and immediately started my very first opensource project (pypesa) for its re-implementation. &lt;/p&gt;

&lt;p&gt;It wasn't easy, a lot of googling and StackOverflow, but eventually, I was able to come up with something that actually worked, and I finally ported it to PyPI. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Kalebu"&gt;
        Kalebu
      &lt;/a&gt; / &lt;a href="https://github.com/Kalebu/pypesa"&gt;
        pypesa
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Python wrapper on Mpesa public API for mobile Payment Integration 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a href="http://kalebu.github.io/pypesa" rel="nofollow"&gt;pypesa&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://kalebu.github.io/pypesa/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NcBDgwXx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kalebu/pypesa/main/pictures/pypesa-banner.png" alt="Pypesa banner"&gt;&lt;/a&gt;
&lt;a href="https://badge.fury.io/py/python-pesa" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c5229979ba4ad49f0df63cdc3cddf5361864290d9eb409dffd5607b16214795d/68747470733a2f2f62616467652e667572792e696f2f70792f707974686f6e2d706573612e737667" alt="PyPI version"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Kalebu/pypesa"&gt;&lt;img src="https://camo.githubusercontent.com/cc5ab71a70dfb54fd0812e42a18666a11104388fa2f31a8f35dfeaaecf5bb954/68747470733a2f2f62616467656e2e6e65742f6769746875622f72656c65617365732f6b616c6562752f707970657361" alt="Releases"&gt;&lt;/a&gt;
&lt;a href="https://pepy.tech/project/python-pesa" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/270ec3c4c44ebfece38686e8f8180235e62005779cfc7bc5f578e7fbd4f20e64/68747470733a2f2f706570792e746563682f62616467652f707974686f6e2d70657361" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://pepy.tech/project/python-pesa" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9ac1e6e95d5b1820c4ffc7c8972aa6a81c5c14aa434b28f4e31c6aeef50075f4/68747470733a2f2f706570792e746563682f62616467652f707974686f6e2d706573612f6d6f6e7468" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://pepy.tech/project/python-pesa" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6c66fc9e0636cede8ba7cefa63e8a5094051870bfcdabe676c215965b9b1f3dc/68747470733a2f2f706570792e746563682f62616467652f707974686f6e2d706573612f7765656b" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://opensource.org/licenses/MIT" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/78f47a09877ba9d28da1887a93e5c3bc2efb309c1e910eb21135becd2998238a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667" alt="License: MIT"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python wrapper on &lt;strong&gt;Mpesa public API&lt;/strong&gt; for mobile Payment Integration made with care to offer easy and elegant integration made by &lt;a href="https://github.com/kalebu"&gt;kalebu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.patreon.com/kalebujordan" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z9FwXWzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kalebu/pypesa/main/pictures/become_a_patron_button.png" alt="Become a patron"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Implemented Features&lt;/h2&gt;
&lt;p&gt;The following are the features that are supported by the &lt;strong&gt;Mpesa&lt;/strong&gt; public API and require the &lt;strong&gt;python&lt;/strong&gt; implementation.&lt;/p&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Customer to Bussiness (C2B) Single Payment&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Bussiness to Customer (B2C)&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Bussiness to Bussiness (B2B)&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Payment Reversal&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Query Transaction status&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Direct debit creation and Payment&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Documentation&lt;/h2&gt;
&lt;p&gt;Full documentation can be found on &lt;a href="http://kalebu.github.io/pypesa" rel="nofollow"&gt;pypesa&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Getting started&lt;/h2&gt;
&lt;p&gt;Getting started with &lt;strong&gt;pypesa&lt;/strong&gt; is pretty straight forward and can be categorized&lt;/p&gt;
&lt;p&gt;into steps shown below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sign up for Mpesa Developer portal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the &lt;a href="http://kalebu.github.io/pypesa" rel="nofollow"&gt;pypesa&lt;/a&gt; package using &lt;strong&gt;pip&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build your services with &lt;strong&gt;pypesa&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Signing up&lt;/h2&gt;
&lt;p&gt;To sign up for Mpesa public API visit &lt;a href="https://openapiportal.m-pesa.com/sign-up" rel="nofollow"&gt;Mpesa-API&lt;/a&gt; and then&lt;/p&gt;
&lt;p&gt;you can go through &lt;a href="https://dev.to/alphaolomi/getting-started-with-mpesa-developer-portal-46a4" rel="nofollow"&gt;getting started Mpesa Developer portal&lt;/a&gt;
by &lt;a href="https://github.com/alphaolomi"&gt;alphaolomi&lt;/a&gt; to see how.&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;To install the &lt;strong&gt;pypesa&lt;/strong&gt; package to your machine you can either&lt;/p&gt;
&lt;p&gt;install…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Kalebu/pypesa"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;It now has over 1.9K downloads&lt;/p&gt;

&lt;p&gt;It was so fulfilling to me seeing other people using something I crafted and that good feeling lead me to meditate and rethink that I might able to do more to the opensource community taking apart Mpesa package.&lt;/p&gt;

&lt;p&gt;For a long time, I have been wishing and admiring being an open-source contributor, inspired by the fact that most software we use today in some ways relies upon OSS whereby people dedicate their time, skills, and effort to build something that we can all use for free. &lt;/p&gt;

&lt;p&gt;That single contribution to the Mpesa package helped overcome the imposter syndrome of feeling unskilled enough and contributed anyway which keep me moving through the rest of the journey &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pyswahili"&gt;
  &lt;/a&gt;
  Pyswahili
&lt;/h2&gt;

&lt;p&gt;The same month I started pypesa I opened a new repository titled &lt;em&gt;pyswahili&lt;/em&gt; while procrastinating preparing a  talk for Pycon Tanzania, envisioning to be the Swahili version of python programming language. &lt;/p&gt;

&lt;p&gt;Honestly speaking, I didn't intend to begin working on this project anytime soon but it changed when I saw the repository with a 0 line code gaining stars and people are betting on it and I said to myself I need to make it real.&lt;/p&gt;

&lt;p&gt;Well after a couple of weeks I managed to come with an early implementation of pyswahili with a couple of bugs like replacing non-keyword strings, lack of an interactive repl, unstructured packaging. &lt;/p&gt;

&lt;p&gt;I then shared the early implementation with my fellow devs and they were really excited which lead the repo itself to gain a few contributors and a little bit more stars &lt;/p&gt;

&lt;p&gt;Recently I managed to port to PyPI and up to date it has  been downloaded by over 0.8K&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Kalebu"&gt;
        Kalebu
      &lt;/a&gt; / &lt;a href="https://github.com/Kalebu/pyswahili"&gt;
        pyswahili
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A Swahili version of programming language to allow Swahili speakers get started with programming 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
pyswahili&lt;/h1&gt;
&lt;p&gt;A programming language built over Python to easily allow swahili speakers to get started with programming without ever knowing english&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Kalebu/pyswahili"&gt;&lt;img src="https://camo.githubusercontent.com/7a275e2e3b0b2932532f77315772fc4cd65dcacaaeb22f318741a809af373567/68747470733a2f2f62616467656e2e6e65742f6769746875622f72656c65617365732f6b616c6562752f707973776168696c69" alt="Releases"&gt;&lt;/a&gt;
&lt;a href="https://pepy.tech/project/pyswahili" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e13763ac6709a73c2d46c2256bae895b68f09ddd0e41a3ed7238aa5cd9a71677/68747470733a2f2f706570792e746563682f62616467652f707973776168696c69" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://pepy.tech/project/pyswahili" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/50efb8c6a4597ff18014b53070eae3a7b960fcf2b5e1e060219960341ef6cfa2/68747470733a2f2f706570792e746563682f62616467652f707973776168696c692f6d6f6e7468" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://pepy.tech/project/pyswahili" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/31afe99181b533d2c0830e6ed2226caa84b88f922b9b228fc5310c68acd5cac4/68747470733a2f2f706570792e746563682f62616467652f707973776168696c692f7765656b" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://opensource.org/licenses/MIT" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/78f47a09877ba9d28da1887a93e5c3bc2efb309c1e910eb21135becd2998238a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667" alt="License: MIT"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.patreon.com/kalebujordan" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4h_bBF6E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kalebu/pyswahili/main/pictures/become_a_patron_button.png" alt="Become a patron"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pyswahili&lt;/strong&gt; is not a completely independent language but more of a swahili version of &lt;strong&gt;python language&lt;/strong&gt;, syntax and language grammar is
equivalent to python one with only change of &lt;strong&gt;keywords&lt;/strong&gt; from english to swahili.&lt;/p&gt;
&lt;h2&gt;
pyswahili Transpiler&lt;/h2&gt;
&lt;p&gt;Transpiler(Pyswahili) is for converting the swahili version of python to english version so that it can be intepreted by the python Intepreter&lt;/p&gt;
&lt;h2&gt;
extension ?&lt;/h2&gt;
&lt;p&gt;There is no official extension for pyswahili, so for now &lt;strong&gt;.py&lt;/strong&gt; is fine.&lt;/p&gt;
&lt;h2&gt;
Repl vs Script&lt;/h2&gt;
&lt;p&gt;Similar to Python, Pyswahili supports both modes; the Read-evaluate-print(&lt;strong&gt;Repl&lt;/strong&gt;) loop and Script mode
Repl enable you to interactively execute pyswahili code line by line without requiring to write a complete program while on other side &lt;strong&gt;Script mode&lt;/strong&gt; requires you
to write your Pyswahili code on a file and run it…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Kalebu/pyswahili"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#mtaa"&gt;
  &lt;/a&gt;
  Mtaa
&lt;/h2&gt;

&lt;p&gt;The third package arose when I came across a Github repository consisting of data about all locations data in Tanzania grouped by region as CSV Files. &lt;/p&gt;

&lt;p&gt;I then thought how about organizing those data as a python package for easy accessibility and usage when it comes to building a real-life application with it.&lt;/p&gt;

&lt;p&gt;which leading creating mtaa, a python package just do that; &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Kalebu"&gt;
        Kalebu
      &lt;/a&gt; / &lt;a href="https://github.com/Kalebu/mtaa"&gt;
        mtaa
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A package consisting of all Tanzania locations from region to streets in an easily accessible way
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a href="https://pypi.org/project/mtaa" rel="nofollow"&gt;mtaa&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://pepy.tech/project/mtaa" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8cb0877a88847f6a19d1c4e7bd22cc1265ba1c8d18f0810e5e54169e9f32257b/68747470733a2f2f706570792e746563682f62616467652f6d746161" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://pepy.tech/project/mtaa" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/91eeaec0ad1cdef843ca8b5324d3ddcae8e63d4da2ee6b6170d92105e84bac6c/68747470733a2f2f706570792e746563682f62616467652f6d7461612f6d6f6e7468" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://pepy.tech/project/mtaa" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3847ff5a1ffa5499d12dbee1cf23eccf35018c2dd5bd892a08281c2f0ca49505/68747470733a2f2f706570792e746563682f62616467652f6d7461612f7765656b" alt="Downloads"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A package consisting of all Tanzania locations from region to streets in a easy accessible way made by &lt;a href="https://github.com/kalebu"&gt;kalebu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.patreon.com/kalebujordan" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Ac_P-Ns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kalebu/mtaa/main/pictures/become_a_patron_button.png" alt="Become a patron"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
A strory behind&lt;/h2&gt;
&lt;p&gt;Mtaa package is result of organized &lt;strong&gt;json&lt;/strong&gt; of all the locations in Tanzania, As I was looking for data about these locations data I came across repo &lt;a href="https://github.com/HackEAC/tanzania-locations-db"&gt;tanzania-location-db&lt;/a&gt;, It consists of locations data organized into &lt;em&gt;regions&lt;/em&gt;, whereby each region has its own csv file. So I wrote a script to transform all the locations from csv into a single &lt;strong&gt;Json&lt;/strong&gt; and from there package came.&lt;/p&gt;
&lt;h2&gt;
Json Transformer&lt;/h2&gt;
&lt;p&gt;If you wanna give a look at the script or interested about building your Json from a similar kind of raw data here is &lt;a href="https://github.com/Kalebu/mtaa/blob/main/json_transformer.py"&gt;Json Transformer script&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;Use pip to install it just as shown below;&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;pip install mtaa&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;The library is very straight forward, at the very top of the library is country which…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Kalebu/mtaa"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#pysimilar"&gt;
  &lt;/a&gt;
  Pysimilar
&lt;/h2&gt;

&lt;p&gt;Pysimilar came up after a previously published article on how to detect plagiarism in Python using cosine similarity, which stands as one of the most-read articles here on &lt;a href="https://dev.to/"&gt;dev.to&lt;/a&gt; and multiple platforms I published including my personal blog. &lt;/p&gt;

&lt;p&gt;After realizing many people were looking into building something like that, I then thought of building a light python package that will enable even complete beginners to able to build a plagiarism detector in python &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Kalebu"&gt;
        Kalebu
      &lt;/a&gt; / &lt;a href="https://github.com/Kalebu/pysimilar"&gt;
        pysimilar
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A python library for computing the similarity between two string(text) based on cosine similarity
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a href="https://pypi.org/project/pysimilar" rel="nofollow"&gt;pysimilar&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://pepy.tech/project/pysimilar" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1e115e1036779b9f4099fb140779a649a9319f8c1e7598bc501e707c653e5bc6/68747470733a2f2f706570792e746563682f62616467652f707973696d696c6172" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://pepy.tech/project/pysimilar" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7901653b5ba2b388551057464fa4319663cce5084fbb1ea6bef4b9c36f5fc6ca/68747470733a2f2f706570792e746563682f62616467652f707973696d696c61722f6d6f6e7468" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://pepy.tech/project/pysimilar" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/991c4faeba5afefc02a3b19b14366ed928a22c299b69dfd444a53920875d83b2/68747470733a2f2f706570792e746563682f62616467652f707973696d696c61722f7765656b" alt="Downloads"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A python library for computing the similarity between two string(text) based on cosine similarity made by &lt;a href="https://github.com/Kalebu"&gt;kalebu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.patreon.com/kalebujordan" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gkiTirGP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kalebu/pysimilar/main/pictures/become_a_patron_button.png" alt="Become a patron"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
How does it work ?&lt;/h2&gt;
&lt;p&gt;It uses Tfidf Vectorizer to transform the text into vectors and then obtained vectors are converted into arrays of numbers and then finally cosine similary computation is employed resulting to output indicating how similar they are.&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;You can either install it directly from &lt;em&gt;Github&lt;/em&gt; or use &lt;em&gt;pip&lt;/em&gt; to install it, here is how you to install it directly from github;&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;$  git clone https://github.com/Kalebu/pysimilar
$  &lt;span class="pl-c1"&gt;cd&lt;/span&gt; pysimilar
$ pysimilar -&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; python setup.py install
&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Installation with pip&lt;/h2&gt;
&lt;div class="highlight highlight-source-python js-code-highlight"&gt;
&lt;pre&gt;$ &lt;span class="pl-s1"&gt;pip&lt;/span&gt; &lt;span class="pl-s1"&gt;install&lt;/span&gt; &lt;span class="pl-s1"&gt;pysimilar&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Example of usage&lt;/h2&gt;
&lt;p&gt;Pysimilar allows you to either specify the string you want to compare directly or specify path to files containing string you want to compare.&lt;/p&gt;
&lt;p&gt;Here an example on how to compare strings directly;&lt;/p&gt;
&lt;div class="highlight highlight-source-python js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c1"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s1"&gt;pysimilar&lt;/span&gt; &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s1"&gt;compare&lt;/span&gt;
&lt;span class="pl-c1"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;compare&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Kalebu/pysimilar"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#more-python-packages"&gt;
  &lt;/a&gt;
  More python packages
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;If you can find it, develop and opensource it&lt;/em&gt; said opensource, So I did and began developing packages focused mostly on simplifying the integration with the APIS, &lt;/p&gt;

&lt;p&gt;These packages include; &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://nextsms.github.io/nextsms/"&gt;NextSMS&lt;/a&gt; a python Package to ease the integration with nextsms SMS Gateway&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://kalebu.github.io/tigopesa/"&gt;Tigopesa&lt;/a&gt; Python package to ease the Tigo Pesa Payment API integration&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/beem-africa/python-client"&gt;BeemAfrica&lt;/a&gt; A python library to ease the integration with the Beem Africa (SMS, AIRTIME, OTP, 2WAY-SMS, BPAY, USSD)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://kalebu.github.io/Nida/"&gt;Nida&lt;/a&gt; un-official Python library for loading user information based on National ID number(Tanzania)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-i-have-learned-and-why-you-should-contribute-too"&gt;
  &lt;/a&gt;
  What I have learned? and why you should contribute too?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Personally getting to open-source has completely transformed me in terms of perception and improvement in the way I write code than code examples ever taught me.&lt;br&gt;
Therefore I would also recommend If you're currently learning a programming language or looking to advance your skills, one of the best things you can do to achieve that is contributing to opensource &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your contribution to open-source projects can act as your portfolio with vivid evidence on how you write code and document your project which can help you land paying gigs, I recently worked with a client who reached out only after going through my GitHub so it works for sure.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You don't really to be an expert to contribute, you just need to have something to contribute that's all, and sometimes you don't even have that something, there are couples of websites such as &lt;a href="https://www.codetriage.com/"&gt;CodeTriage&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Well, that's all for this article, I'm glad you enjoyed learning exploring my journey as an open-source contributor, to me this is just beginning and  I really think you should too. &lt;/p&gt;

&lt;p&gt;You can connect me with me on &lt;a href="https://twitter.com/j_kalebu"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also write articles on &lt;a href="https://kalebujordan.dev/"&gt;personal blog&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>opensource</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>Earn more storage space on OneDrive for free</title>
      <author>Youssef Allali</author>
      <pubDate>Fri, 07 May 2021 22:57:10 +0000</pubDate>
      <link>https://dev.to/youssefallalix/earn-more-storage-space-on-onedrive-for-free-52ec</link>
      <guid>https://dev.to/youssefallalix/earn-more-storage-space-on-onedrive-for-free-52ec</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-onedrive"&gt;
  &lt;/a&gt;
  What is Onedrive?
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;OneDrive is a file hosting service and synchronization service offered by Microsoft for its users.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#how-much-strorage-space-do-i-have"&gt;
  &lt;/a&gt;
  How much Strorage space do I have?
&lt;/h1&gt;

&lt;p&gt;Depending on the type of your subscription, Microsoft offers you different amounts of space.&lt;br&gt;
We're here to talk about the free plan which is what you get when you first create a Microsoft account (&lt;code&gt;@outlook.com&lt;/code&gt; or &lt;code&gt;@hotmail.com&lt;/code&gt;).&lt;br&gt;
With this plan, all you get is &lt;strong&gt;5GB&lt;/strong&gt;, which is, in most cases, not sufficient in case you depend a lot on cloud storage services, or you prefer to store your documents and data up there.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-can-i-increase-my-storage-space"&gt;
  &lt;/a&gt;
  How can I increase my storage space?
&lt;/h1&gt;

&lt;p&gt;Glad you asked, Microsoft itself will ask you to go premium and push you into buying more space with a Microsoft 365 subscription!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zNMbvo-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jw1detq8smrfnzobc9qx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zNMbvo-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jw1detq8smrfnzobc9qx.png" alt="Onedrive Window"&gt;&lt;/a&gt;&lt;br&gt;
Whilst paying for a premium subscription will open your access to 100 GB, 1TB or 6TB of storage space, there's a way to get up to 10 GB of free storage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0zAHb6_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/teu3vtc7ebjwxk2yzi6j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0zAHb6_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/teu3vtc7ebjwxk2yzi6j.png" alt="Subsciption Options"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open your Web based Onedrive and click on the Settings button and then to Options or simply click on this link &lt;a href="https://onedrive.live.com/?v=managestorage"&gt;"Manage Storage"&lt;/a&gt;, after that you'll find a section called Your additional storage and the refereal bonus that says (0% acheived)&lt;/p&gt;

&lt;p&gt;Next thing to do is click on Earn more that will pop up a window with different ways to share your referral link&lt;br&gt;
Share that link with your friends and family and you'll earn 500MB for each person clicking your link and registering for Onedrive for the first time. and they also get a bonus of 500 MB.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DEuWpmMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/osp6xke4qdlgrocefv04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DEuWpmMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/osp6xke4qdlgrocefv04.png" alt="Earn more"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#extra-out-of-charge-500-mb"&gt;
  &lt;/a&gt;
  Extra out of charge 500 MB
&lt;/h1&gt;

&lt;p&gt;If you don't have a Microsoft account yet or want to use Onedrive for the first time, use my referral link &lt;a href="https://onedrive.live.com?invref=d5aed7a761e2af6d&amp;amp;invscr=90"&gt;https://onedrive.live.com?invref=d5aed7a761e2af6d&amp;amp;invscr=90&lt;/a&gt; and you'll get extra 500, I get extra 500, everyone happy 😄 .&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h1&gt;

&lt;p&gt;Don't hesitate to leave any questions you may have for me in the comments. I'll be pleased to reply and subscribe for more interesting content like this one.&lt;/p&gt;

</description>
      <category>microsoft</category>
      <category>onedrive</category>
      <category>storage</category>
    </item>
    <item>
      <title>How to uppercase the first letter of a string in JavaScript</title>
      <author>Alexis Guzman</author>
      <pubDate>Fri, 07 May 2021 22:50:24 +0000</pubDate>
      <link>https://dev.to/_codax_/how-to-uppercase-the-first-letter-of-a-string-in-javascript-5bi9</link>
      <guid>https://dev.to/_codax_/how-to-uppercase-the-first-letter-of-a-string-in-javascript-5bi9</guid>
      <description>&lt;p&gt;JavaScript offers many ways to capitalize a string to make the first character uppercase. Learn the various ways, and also find out which one you should use, using plain JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-chartat-slice"&gt;
  &lt;/a&gt;
  1. chartAt + slice
&lt;/h2&gt;

&lt;p&gt;The first way to do this is through a combination of &lt;code&gt;cartAt()&lt;/code&gt; and &lt;code&gt;slice()&lt;/code&gt;. With  &lt;code&gt;chartAt()&lt;/code&gt; uppercases the first letter, and with &lt;code&gt;slice()&lt;/code&gt; slices the string and returns it starting from the second character:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;codax&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nameCapitalized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: "Codax" &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can create a function to do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;capitalize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;codax&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "Codax"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-replace-function"&gt;
  &lt;/a&gt;
  2. Replace function
&lt;/h2&gt;

&lt;p&gt;My favorite is with &lt;code&gt;replace()&lt;/code&gt; because I love regex (even if I'm not an expert) and regex is more customizable in general.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;codax&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nameCapitalized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;\w&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: "Codax"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also make it a function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;capitalize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;\w&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;codax&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "Codax"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;For readability, I recommend the first option (&lt;code&gt;chartAt&lt;/code&gt; + &lt;code&gt;slice&lt;/code&gt;), and for speed, I recommend the second option (&lt;code&gt;replace&lt;/code&gt;).&lt;br&gt;
If you know other/better ways please leave below in the comments, or how to improve on the ones mentioned here.&lt;br&gt;
Thanks.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>string</category>
    </item>
    <item>
      <title>Creating API for components: flexbox layout</title>
      <author>Lex Swed</author>
      <pubDate>Fri, 07 May 2021 22:26:59 +0000</pubDate>
      <link>https://dev.to/lexswed/creating-api-for-components-flexbox-layout-4cim</link>
      <guid>https://dev.to/lexswed/creating-api-for-components-flexbox-layout-4cim</guid>
      <description>&lt;p&gt;How many times did you write &lt;code&gt;display: flex&lt;/code&gt;? This goes so common that &lt;a href="https://www.youtube.com/watch?v=Dk1gxZ_K3E0"&gt;some people&lt;/a&gt; tried applying &lt;code&gt;display: flex&lt;/code&gt; to almost all elements on the page.&lt;/p&gt;

&lt;p&gt;In this post we will go through the thoughts process behind the API decisions for the most used component.&lt;/p&gt;

&lt;p&gt;I've been thinking to write this for a while as I continue to see different implementations of a &lt;code&gt;flexbox&lt;/code&gt; component, each with own API. I think we should stop inventing and standardize this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RJjtUme5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgs.xkcd.com/comics/standards.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RJjtUme5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgs.xkcd.com/comics/standards.png" alt="New standards is born in an attempt to unify the standards"&gt;&lt;/a&gt;&lt;/p&gt;
xkcd: Standards (https://xkcd.com/927/)



&lt;h2&gt;
  &lt;a href="#start"&gt;
  &lt;/a&gt;
  Start
&lt;/h2&gt;

&lt;p&gt;In this article I'm going to use React and &lt;a href="https://stitches.dev/"&gt;stitches&lt;/a&gt; (I am &lt;a href="https://dev.to/lexswed/choosing-the-right-tools-for-react-component-library-in-2021-1b6g"&gt;still&lt;/a&gt; in love with it). But the main idea of this article is to justify the API decisions that can be then applied in Vue, Svelte, Lit, or any other front-end tool.&lt;/p&gt;

&lt;p&gt;Let's start simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@stitches/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Flex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;For the sake of simplicity, I'm using pre-configured &lt;code&gt;styled&lt;/code&gt; directly from &lt;code&gt;stitches&lt;/code&gt;, but I in your libraries I encourage to use &lt;a href="https://stitches.dev/docs/installation#configure-stitches"&gt;theme tokens&lt;/a&gt; for consistent layout properties, colors, font sizes, etc.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping"&gt;
  &lt;/a&gt;
  Wrapping
&lt;/h3&gt;

&lt;p&gt;Let's start simple and add &lt;code&gt;flex-wrap&lt;/code&gt; control:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@stitches/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Flex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wrap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;flexWrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wrap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no-wrap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;flexWrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nowrap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wrap-reverse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;flexWrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wrap-reverse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;I'm using &lt;a href="https://stitches.dev/docs/variants"&gt;&lt;code&gt;stitches&lt;/code&gt; variants&lt;/a&gt; that produce nice TypeScript props for &lt;code&gt;Flex&lt;/code&gt; component&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That was the simplest API decision to make, we only removed &lt;code&gt;flex&lt;/code&gt; word to avoid repetitiveness, because all props exist in the context of &lt;code&gt;Flex&lt;/code&gt; element already. Bear in mind, that the default browser value is &lt;code&gt;nowrap&lt;/code&gt;, so using &lt;code&gt;&amp;lt;Flex wrap="wrap"&amp;gt;&lt;/code&gt; can be a common thing. Although it might feel weird, it's still easier to learn and use (like &lt;code&gt;flex-wrap: wrap&lt;/code&gt;), comparing to a made-up API.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flow-direction"&gt;
  &lt;/a&gt;
  Flow direction
&lt;/h3&gt;

&lt;p&gt;Let's move on to the second prop: &lt;code&gt;flex-direction&lt;/code&gt;.&lt;br&gt;
I've seen &lt;code&gt;direction&lt;/code&gt; used in some Design Systems, but for some people (me) it can be even worse than writing &lt;code&gt;cosnt&lt;/code&gt;, especially because it's a commonly used prop.&lt;br&gt;
Other Design Systems incorporate &lt;code&gt;Row&lt;/code&gt; and &lt;code&gt;Column&lt;/code&gt; components – they provide great context for the consumer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Flex defined as before&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Flex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;row&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Column&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Flex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;column&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Although now we also need to handle the cases when we want to use &lt;code&gt;flex-direction: row-reverse; // or column-reverse&lt;/code&gt;. So, we either add &lt;code&gt;reverse&lt;/code&gt; boolean prop (since it's not a common prop to be used):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Flex defined as before&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Flex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;row&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;true&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;row-reverse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Column&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Flex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;column&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;true&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// neat way to create boolean variants in stitches&lt;/span&gt;
        &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;column-reverse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... or we define flow direction directly in the &lt;code&gt;Flex&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Flex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="c1"&gt;// defined as before&lt;/span&gt;
    &lt;span class="na"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;row&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;row&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;column&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;column&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;row-reverse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;row-reverse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;column-reverse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;column-reverse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow"&gt;might know&lt;/a&gt;, &lt;code&gt;flex-flow&lt;/code&gt; is a shorthand for &lt;code&gt;flex-direction&lt;/code&gt; and &lt;code&gt;flex-wrap&lt;/code&gt;, so we're not making up the API again, but adopting it.&lt;/p&gt;

&lt;p&gt;The usage so far would be (overriding browser defaults):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt; &lt;span class="na"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"row-reverse"&lt;/span&gt; &lt;span class="na"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"wrap"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt; &lt;span class="na"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"column"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// or with dedicated components&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Row&lt;/span&gt; &lt;span class="na"&gt;reverse&lt;/span&gt; &lt;span class="na"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"wrap"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Column&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which API you like the most is up to you, both of them work great. I would prefer having just &lt;code&gt;Flex&lt;/code&gt; or having all 3 of them. &lt;code&gt;Flex&lt;/code&gt; itself is easy to maintain and it provides enough context straight away looking at &lt;code&gt;flow&lt;/code&gt; prop, especially when it needs to change based on screen size, using &lt;a href="https://stitches.dev/docs/responsive-styles"&gt;response styles&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt; &lt;span class="na"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tablet&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;row&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mobile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;column&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Imagine doing this with dedicated &lt;code&gt;Row&lt;/code&gt; and &lt;code&gt;Column&lt;/code&gt; components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#alignment"&gt;
  &lt;/a&gt;
  Alignment
&lt;/h3&gt;

&lt;p&gt;So, making quite a good progress here, let's move on to the most interesting part: alignments.&lt;br&gt;
While the official API for this would be to use &lt;code&gt;justify-content&lt;/code&gt; and &lt;code&gt;align-items&lt;/code&gt;, I always thought that both of these words make little sense to me when writing CSS. Maybe it's because I'm not a native English speaker, or maybe they don't make much sense when thinking about flex boxes.&lt;/p&gt;

&lt;p&gt;One of the greatest articles that helped me to understand these properties was &lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/"&gt;A Complete Guide to Flexbox&lt;/a&gt; (most of us still referring to). It has awesome visualizations that show how these properties affect items positions by the change of what is called &lt;strong&gt;main axis&lt;/strong&gt; and &lt;strong&gt;cross axis&lt;/strong&gt;. What really helped me though, was &lt;code&gt;flutter&lt;/code&gt;'s &lt;a href="https://api.flutter.dev/flutter/widgets/Flex-class.html"&gt;&lt;code&gt;Flex&lt;/code&gt; widget&lt;/a&gt;. It has these two awesome attributes: &lt;a href="https://api.flutter.dev/flutter/widgets/Flex/mainAxisAlignment.html"&gt;mainAxisAlignment&lt;/a&gt; and &lt;a href="https://api.flutter.dev/flutter/widgets/Flex/crossAxisAlignment.html"&gt;crossAxisAlignment&lt;/a&gt; and the usage is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Flex&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="nl"&gt;mainAxisAlignment:&lt;/span&gt; &lt;span class="n"&gt;MainAxisAlignment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;spaceEvenly&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nl"&gt;crossAxisAlignment:&lt;/span&gt; &lt;span class="n"&gt;CrossAxisAlignment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;end&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's really great about this API, is that it's really easy to visualize in your head. If you have a &lt;code&gt;row&lt;/code&gt;, your main axis is horizontal, if you have a &lt;code&gt;column&lt;/code&gt;, it is vertical. So, no matter the direction, you can imagine your items evenly spaced on the main axis and aligned to the end of the container on the cross axis.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9WvDUC4D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qe87m4wasf98k9vrxd5f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9WvDUC4D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qe87m4wasf98k9vrxd5f.png" alt="flex main axises for row and column"&gt;&lt;/a&gt;&lt;/p&gt;
CSS-tricks: Directions (https://css-tricks.com/snippets/css/a-guide-to-flexbox/#flex-direction)



&lt;p&gt;Knowing this, we can incorporate new API into our own component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Flex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="na"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex-start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex-end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stretch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stretch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;space-between&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;space-between&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;cross&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex-start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex-end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;stretch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stretch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Comparing to &lt;code&gt;flutter&lt;/code&gt;'s &lt;code&gt;Flex&lt;/code&gt; API, I shortened &lt;code&gt;mainAxisAlignment&lt;/code&gt; to &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;crossAxisAlignment&lt;/code&gt; to &lt;code&gt;cross&lt;/code&gt;. While TypeScript provides great autocomplete experience, seeing these long property names when composing multiple &lt;code&gt;Flex&lt;/code&gt; components was hurting my eyes. Since both of the properties exist in the context of &lt;code&gt;Flex&lt;/code&gt; component, I believe it's enough to understand them.&lt;/p&gt;

&lt;p&gt;Now, the usage would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt; &lt;span class="na"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"column"&lt;/span&gt; &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"space-between"&lt;/span&gt; &lt;span class="na"&gt;cross&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cPcFFxgS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvaibv7dmau41977fj1v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cPcFFxgS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvaibv7dmau41977fj1v.png" alt="flex-column example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The thought process for this component is fairly easy (or the one you can get used to): it's a column, so items will be evenly distributed across the main axis (&lt;code&gt;y&lt;/code&gt;), and across axis &lt;code&gt;x&lt;/code&gt; they will be centred.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By the way, &lt;a href="https://developer.chrome.com/blog/new-in-devtools-90/#flexbox"&gt;new Chrome Dev Tools flexbox visual debugging&lt;/a&gt; is awesome.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#spacing"&gt;
  &lt;/a&gt;
  Spacing
&lt;/h3&gt;

&lt;p&gt;Now, the last prop we need to add is the one that controls spacing between the child elements. There were two approaches, generally: &lt;a href="https://github.com/seek-oss/braid-design-system/blob/cdde4b5ab470f138fceaf09a2c4f515b7dc2121e/lib/components/Inline/Inline.tsx#L66"&gt;no-side-effects-but-nested-divs-one&lt;/a&gt; which wraps every children into box with negative margins to allow proper wrapping behaviour without changing the child nodes styles, and &lt;a href="https://limitlessloop.github.io/flex-gap-polyfill/"&gt;flex-gap-polyfill&lt;/a&gt; one, that changes the styles of its children through &lt;code&gt;&amp;gt; *&lt;/code&gt; selector. Gladly, we don't need to talk about them today, since Safary 14.1 was the last one among the big folks to be &lt;a href="https://css-tricks.com/safari-14-1-adds-support-for-flexbox-gaps/"&gt;released with the support of &lt;code&gt;flexbox&lt;/code&gt; gap property&lt;/a&gt;. Thankfully, Apple is quite pushing in regards to updates, so we can see &lt;a href="https://caniuse.com/flexbox-gap"&gt;global browser support&lt;/a&gt; growing pretty fast.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Flex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// the rest of the variants&lt;/span&gt;
    &lt;span class="na"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;none&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;sm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;4px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;md&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;lg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;16px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Few things to comment here. First, you can still use pollyfilled option here, see &lt;a href="https://codesandbox.io/s/stitches-ci-stack-uqj90?file=/src/stack.ts"&gt;an example&lt;/a&gt; from an awesome &lt;a href="https://twitter.com/joebell_"&gt;Joe Bell&lt;/a&gt;. Second, use &lt;code&gt;xs&lt;/code&gt;, &lt;code&gt;sm&lt;/code&gt;, etc tokens only if they are already incorporated in your Design System, otherwise, you may consider &lt;a href="https://tailwindcss.com/docs/gap"&gt;&lt;code&gt;TailwindCSS&lt;/code&gt; number-tokens&lt;/a&gt; instead. Third, we don't implement powerful &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap"&gt;row-gap&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap"&gt;column-gap&lt;/a&gt; CSS properties, but you can do them same way as for the &lt;code&gt;gap&lt;/code&gt;. Third, we keep &lt;code&gt;'none'&lt;/code&gt; option to be able to set &lt;code&gt;gap&lt;/code&gt; conditionally in a clear way, for example through &lt;a href="https://stitches.dev/docs/responsive-styles"&gt;&lt;code&gt;@media&lt;/code&gt; breakpoints&lt;/a&gt;: &lt;code&gt;gap={{ '@desktop': 'none', '@tablet': 'lg' }}&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#end"&gt;
  &lt;/a&gt;
  End
&lt;/h2&gt;

&lt;p&gt;And that's it! I really hope that more and more people would start seeing their UIs as a composition of layout and interactive elements, writing very little of CSS.&lt;/p&gt;

&lt;p&gt;You can see some usage examples &lt;a href="https://fxtrot-ui.vercel.app/components/Flex"&gt;here&lt;/a&gt;. As with many things, you get the taste in the process, so feel free to play around with the playgrounds, see how such props help your intuition with visualizing the items.&lt;/p&gt;

&lt;p&gt;
  Full example
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;stlyed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@stitches/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Flex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wrap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;flexWrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wrap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no-wrap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;flexWrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nowrap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wrap-reverse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;flexWrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wrap-reverse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;row&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;row&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;column&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;column&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;row-reverse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;row-reverse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;column-reverse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;column-reverse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex-start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex-end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stretch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stretch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;space-between&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;space-between&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;cross&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex-start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex-end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;stretch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stretch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;none&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;sm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;4px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;md&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;lg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;16px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;inline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;inline-flex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;p&gt;Key takeaways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;keep the API as close to the official specs as possible, making it easy to learn&lt;/li&gt;
&lt;li&gt;make up own API is possible, but maybe there's some solution that is fairly common and people are used to it&lt;/li&gt;
&lt;li&gt;learning other tools, like &lt;code&gt;Flutter&lt;/code&gt; can open new perspectives&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>css</category>
      <category>web</category>
    </item>
    <item>
      <title>Grokking Monad Transformers</title>
      <author>Matt Thornton</author>
      <pubDate>Fri, 07 May 2021 21:29:35 +0000</pubDate>
      <link>https://dev.to/choc13/grokking-monad-transformers-3l3</link>
      <guid>https://dev.to/choc13/grokking-monad-transformers-3l3</guid>
      <description>&lt;p&gt;Earlier in this series, in &lt;a href="https://dev.to/choc13/grokking-monads-in-f-3j7f"&gt;Grokking Monads&lt;/a&gt;, we discovered that monads allowed us to abstract away the machinery of chaining computations. For example when dealing with optional values, they took care of the failure path for us in the background and freed us up to just write the code as if the data was always present. What happens though when we have multiple monads we'd like to use, how can we mix them together? &lt;/p&gt;

&lt;p&gt;Just like in the rest of this series, we're going to invent monad transformers ourselves by solving a real software design problem. At the end we'll see that we've discovered the monad transformer and in doing so we'll understand it more intuitively.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-scenario"&gt;
  &lt;/a&gt;
  The scenario
&lt;/h1&gt;

&lt;p&gt;Let's revisit the same scenario we encountered in &lt;a href="https://dev.to/choc13/grokking-monads-in-f-3j7f"&gt;Grokking Monads&lt;/a&gt; where we want to charge a user's credit card. If the user exists and they have a credit card saved in their profile we can charge it and email them a receipt, otherwise we'll have to signal that nothing happened. This time however, we're going to make the &lt;code&gt;lookupUser&lt;/code&gt;, &lt;code&gt;chargeCard&lt;/code&gt; and &lt;code&gt;emailReceipt&lt;/code&gt; functions async because they call external services.&lt;/p&gt;

&lt;p&gt;We'll start with the following data model and operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;UserId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;UserId&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;TransactionId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;TransactionId&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="nc"&gt;Expiry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="nc"&gt;Cvv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;UserId&lt;/span&gt;
      &lt;span class="nc"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;lookupUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TransactionId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;emailReceipt&lt;/span&gt; &lt;span class="n"&gt;transactionId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TransactionId&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only difference from before is that &lt;code&gt;lookupUser&lt;/code&gt;, &lt;code&gt;chargeCard&lt;/code&gt; and  &lt;code&gt;emailReceipt&lt;/code&gt; return &lt;code&gt;Async&lt;/code&gt; now, because in reality they'll be calling a database, external payment gateway and sending messages.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#our-first-implementation"&gt;
  &lt;/a&gt;
  Our first implementation
&lt;/h1&gt;

&lt;p&gt;Using our learnings from &lt;a href="https://dev.to/choc13/grokking-monads-imperatively-394a"&gt;Grokking Monads, Imperatively&lt;/a&gt; then we might immediately reach for the &lt;code&gt;async&lt;/code&gt; computation expression because that's the primary monad that we're dealing with here. So let's start with that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lookupUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;transactionId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;emailReceipt&lt;/span&gt; &lt;span class="n"&gt;transactionId&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks simple and it captures the essence of what we need to do, but it's not right. The line &lt;code&gt;let card = user.CreditCard&lt;/code&gt; isn't going to compile, because at this point &lt;code&gt;user&lt;/code&gt; is of type &lt;code&gt;User option&lt;/code&gt;. We've also got a similar problem when writing &lt;code&gt;chargeCard amount card&lt;/code&gt; because we'll actually have a &lt;code&gt;CreditCard option&lt;/code&gt; there.&lt;/p&gt;

&lt;p&gt;One way around this is to just start writing the pattern matching logic ourselves to get access to the values inside those options so that we can use them. Let's see what that looks like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;lookupUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; 
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; 
            &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; 
                &lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
                &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;transactionId&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emailReceipt&lt;/span&gt; &lt;span class="n"&gt;transactionId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt;
                &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is much more cumbersome than before and the fairly simple logic of this function is obscured by the nested pattern matching (a.k.a. the &lt;a href="https://en.wikipedia.org/wiki/Pyramid_of_doom_(programming)"&gt;pyramid of doom&lt;/a&gt;). We're basically back to the same situation that we found ourselves in when we first introduced this in &lt;a href="https://dev.to/choc13/grokking-monads-in-f-3j7f"&gt;Grokking Monads&lt;/a&gt;. It seems like once we've got more than one monad to deal with, everything inside the outer one has to fall back to manually dealing with the failure path again through continual pattern matching.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#inventing-a-new-monad"&gt;
  &lt;/a&gt;
  Inventing a new monad
&lt;/h1&gt;

&lt;p&gt;At this point we might think to ourselves, why don't we invent a new monad? One that encapsulates the fact that we want to perform async computations that return optional results. It should behave like both the &lt;code&gt;async&lt;/code&gt; monad when an async operation fails and the &lt;code&gt;option&lt;/code&gt; monad when the async operation produces missing data. Let's call it &lt;code&gt;AsyncOption&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What we need to do then is figure out how to implement &lt;code&gt;bind&lt;/code&gt; for this new monad. Let's start with the types and then use them to guide us in writing it. In this case it will have the signature &lt;code&gt;(a' -&amp;gt; Async&amp;lt;option&amp;lt;'b&amp;gt;&amp;gt;) -&amp;gt; Async&amp;lt;option&amp;lt;'a&amp;gt;&amp;gt; -&amp;gt; Async&amp;lt;option&amp;lt;'b&amp;gt;&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;So this is telling us that we're given a function that wants some value of type &lt;code&gt;'a&lt;/code&gt; and will return us a new value wrapped up in our &lt;code&gt;Async&amp;lt;option&amp;lt;_&amp;gt;&amp;gt;&lt;/code&gt; type. We're also given an instance of this monad pair that encapsulates a value of type &lt;code&gt;'a&lt;/code&gt;. So intuitively, we need to unwrap both the &lt;code&gt;Async&lt;/code&gt; and &lt;code&gt;option&lt;/code&gt; layers to get at this value of type &lt;code&gt;'a&lt;/code&gt; and then apply it to the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we've achieved this by using the &lt;code&gt;async&lt;/code&gt; computation expression. This allows us to use a &lt;code&gt;match!&lt;/code&gt; which simultaneously unwraps the async value and pattern matches on the inner &lt;code&gt;option&lt;/code&gt; to allow us to extract the value from that too.&lt;/p&gt;

&lt;p&gt;We’ve had to deal with three possible cases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the case where &lt;code&gt;x&lt;/code&gt; is a successful async computation that's returned &lt;code&gt;Some&lt;/code&gt; value then we can apply the function &lt;code&gt;f&lt;/code&gt; to the value.&lt;/li&gt;
&lt;li&gt;In the case that the async operation successfully returns &lt;code&gt;None&lt;/code&gt; then we just propagate the &lt;code&gt;None&lt;/code&gt; value by wrapping it in a new &lt;code&gt;async&lt;/code&gt; by using &lt;code&gt;return&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;Finally, if the async computation fails then we just let the &lt;code&gt;async&lt;/code&gt; computation expression deal with that and propagate that failure without calling &lt;code&gt;f&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So with &lt;code&gt;bind&lt;/code&gt; in place it's easy to create an &lt;code&gt;asyncOption&lt;/code&gt; computation expression and we can write our function using that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;asyncOption&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lookupUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;transactionId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;emailReceipt&lt;/span&gt; &lt;span class="n"&gt;transactionId&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Much better, but the eagle eyed might have already spotted a problem with our plan. When we try and call &lt;code&gt;user.CreditCard&lt;/code&gt; it won't work. The problem is that &lt;code&gt;user.CreditCard&lt;/code&gt; returns a vanilla &lt;code&gt;option&lt;/code&gt; and our &lt;code&gt;bind&lt;/code&gt; (and therefore &lt;code&gt;let!&lt;/code&gt;) has been designed to work with &lt;code&gt;Async&amp;lt;option&amp;lt;_&amp;gt;&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;On top of this, on the final line we have a similar problem. The &lt;code&gt;emailReceipt&lt;/code&gt; function returns a plain &lt;code&gt;Async&amp;lt;_&amp;gt;&lt;/code&gt; and so we can't just write &lt;code&gt;return!&lt;/code&gt; because it's not producing an &lt;code&gt;Async&amp;lt;option&amp;lt;_&amp;gt;&amp;gt;&lt;/code&gt;. It seems like we're stuck with needing everything to use exactly the same monad or things won't line up.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lifting-ourselves-out-of-a-hole"&gt;
  &lt;/a&gt;
  Lifting ourselves out of a hole 🏋️
&lt;/h1&gt;

&lt;p&gt;A simple way to solve the first problem is to just wrap that  vanilla &lt;code&gt;option&lt;/code&gt; in a default &lt;code&gt;Async&lt;/code&gt; value. What would a default &lt;code&gt;Async&lt;/code&gt; be though? Well we want to just treat it as if it's a successful async computation that’s immediately resolved so let's just write a function called &lt;code&gt;hoist&lt;/code&gt; that wraps its argument in an immediate async computation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;hoist&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're a C# developer this is just like &lt;code&gt;Task.FromResult&lt;/code&gt; and if you're a JavaScript developer then it's akin to &lt;code&gt;Promise.resolve&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To solve the second problem we need a way to wrap up the value inside the &lt;code&gt;Async&lt;/code&gt; in a default &lt;code&gt;option&lt;/code&gt; value. The default &lt;code&gt;option&lt;/code&gt; value would be &lt;code&gt;Some&lt;/code&gt; in this case, and we saw in &lt;a href="https://dev.to/choc13/grokking-functors-bla"&gt;Grokking Functors&lt;/a&gt; that the way to modify the contents of a wrapped value is to use &lt;code&gt;map&lt;/code&gt;. So let's create a function called &lt;code&gt;lift&lt;/code&gt; that just calls &lt;code&gt;map&lt;/code&gt; with &lt;code&gt;Some&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;lift&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;):&lt;/span&gt; &lt;span class="nc"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So with this in hand we can finally finish off our &lt;code&gt;chargeUser&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;asyncOption&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lookupUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hoist&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;transactionId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emailReceipt&lt;/span&gt; &lt;span class="n"&gt;transactionId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;lift&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is now looking quite tidy and the logic is clear to see, no longer hidden amongst nested error handling code. So is that all there is to monad transformers? Well not quite...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-combinatorial-explosion"&gt;
  &lt;/a&gt;
  A combinatorial explosion 🤯
&lt;/h1&gt;

&lt;p&gt;Let's say for arguments sake that we wanted to use a &lt;code&gt;Task&lt;/code&gt; instead of an &lt;code&gt;Async&lt;/code&gt; computation. Or perhaps we want to start returning a &lt;code&gt;Result&lt;/code&gt; now instead of an &lt;code&gt;option&lt;/code&gt;. What about if we want to use a &lt;code&gt;Reader&lt;/code&gt; too? &lt;/p&gt;

&lt;p&gt;You can probably see how the combinations of all of these different monads is going to get out of hand if we need to create a new monad to represent each pair. Not to mention the fact that we might want to create combinations of more than two.&lt;/p&gt;

&lt;p&gt;Wouldn't it be nice if we could find a way to write a universal monad transformer? One that could let us combine any two monads to create a new one. Let's see if we can invent that.&lt;/p&gt;

&lt;p&gt;Where do we start? Well we know by now that to create a monad we need to implement &lt;code&gt;bind&lt;/code&gt; for it. We've also seen how to do that for a new monad created from the &lt;code&gt;Async&lt;/code&gt; and &lt;code&gt;option&lt;/code&gt; pair of monads. All we basically need to do is peel back each of monad layers to access the value contained inside the inner one and then apply this value to the function to generate a new monad pair.&lt;/p&gt;

&lt;p&gt;Let's imagine for a minute that we have a universal &lt;code&gt;monad&lt;/code&gt; computation expression which invokes the correct bind, by figuring out which version to use, based on the particular monad instance that it's being called on. With that to hand then we should be able to peel off two monadic layers to access to the inner value quite easily.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;bindForAnyMonadPair&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Outer&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Inner&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Outer&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Inner&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;monad&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;innerMonad&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="n"&gt;monad&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;innerValue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;innerMonad&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately it turns out that this doesn't work. The problem is that when we write &lt;code&gt;return! f value&lt;/code&gt; it's not quite right. At that point in the code we're in the context of the inner monad's computation expression and so &lt;code&gt;return!&lt;/code&gt; is going to expect &lt;code&gt;f&lt;/code&gt; to return a value that's the same as the inner monad, but we know that it returns &lt;code&gt;'Outer&amp;lt;'Inner&amp;lt;'b&amp;gt;&amp;gt;&lt;/code&gt; because that’s what we need it to have for our new bind. &lt;/p&gt;

&lt;p&gt;It might seem like there would be a way out of this. After all, we have the value we need to supply to &lt;code&gt;f&lt;/code&gt;, so surely we must be able to just call it and generate the value we need somehow. However, we have to remember that computation expressions and &lt;code&gt;let!&lt;/code&gt; are just syntactic sugar for &lt;code&gt;bind&lt;/code&gt;. So what we're really trying to write is this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;bindForAnyMonadPair&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Outer&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Inner&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Outer&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Inner&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; 
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt; 
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;innerMonad&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;innerMonad&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then it's (maybe) more obvious to see that &lt;code&gt;f&lt;/code&gt; can't be used with the inner monad's &lt;code&gt;bind&lt;/code&gt; because it's not going to return the right type. So it seems we can dig inside both monads to get to the value in a generic way, but we don't have a generic way of putting them back together again.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#theres-still-hope"&gt;
  &lt;/a&gt;
  There's still hope 🤞
&lt;/h1&gt;

&lt;p&gt;We might have failed at creating a truly universal monad transformer, but we don't have to completely give up. If we could make even one of the monads in the pair generic then it would massively reduce the number of monad combinations we need to write.&lt;/p&gt;

&lt;p&gt;Intuitively you might think about making the inner one generic, I know I did. However, you'll see that we fall into exactly the same trap that we did before when we tried to make both generic, so that won't work.&lt;/p&gt;

&lt;p&gt;In that case our only hope is to try making the outer monad generic. Let's assume we've still got our universal &lt;code&gt;monad&lt;/code&gt; computation expression to hand and see if we can write a version that works whenever the inner monad is an &lt;code&gt;option&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;bindWhenInnerIsOption&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Outer&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Outer&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;monad&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🙌 It works! The reason we were able to succeed this time is because we could use &lt;code&gt;return!&lt;/code&gt; when calling &lt;code&gt;f&lt;/code&gt; because we were still in the context of the outer monad's computation expression. So &lt;code&gt;return!&lt;/code&gt; is able to return a value that is of the type &lt;code&gt;Outer&amp;lt;option&amp;lt;_&amp;gt;&amp;gt;&lt;/code&gt; which is precisely what &lt;code&gt;f&lt;/code&gt; gives us back.&lt;/p&gt;

&lt;p&gt;We're also going to need generic versions of &lt;code&gt;hoist&lt;/code&gt; and &lt;code&gt;lift&lt;/code&gt; too, but they're not too difficult to write.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;lift&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;hoist&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to write &lt;code&gt;lift&lt;/code&gt; we're assuming that the &lt;code&gt;Outer&lt;/code&gt; monad has &lt;code&gt;map&lt;/code&gt; defined for it and that &lt;code&gt;map&lt;/code&gt; can select the correct one, because we don't know at this point in time which monad to call &lt;code&gt;map&lt;/code&gt; on.&lt;/p&gt;

&lt;p&gt;Also &lt;code&gt;hoist&lt;/code&gt; is making use of a generic &lt;code&gt;result&lt;/code&gt; function which is an alias for &lt;code&gt;return&lt;/code&gt; because &lt;code&gt;return&lt;/code&gt; is a reserved keyword in F#. Technically every monad should have &lt;code&gt;return&lt;/code&gt;, as well as &lt;code&gt;bind&lt;/code&gt;, defined for it. We haven't mentioned &lt;code&gt;return&lt;/code&gt; before because it's so trivial, but it just wraps any plain value up in a monad. For example &lt;code&gt;result&lt;/code&gt; for &lt;code&gt;option&lt;/code&gt; would just be &lt;code&gt;Some&lt;/code&gt;. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#you-just-discovered-the-monad-transformer"&gt;
  &lt;/a&gt;
  You just discovered the Monad Transformer 👏
&lt;/h1&gt;

&lt;p&gt;With our invention of &lt;code&gt;bind&lt;/code&gt;, &lt;code&gt;lift&lt;/code&gt; and &lt;code&gt;hoist&lt;/code&gt;, for the case when inner monad is an &lt;code&gt;option&lt;/code&gt;, we've invented the &lt;code&gt;option&lt;/code&gt; monad transformer. Normally this is called &lt;code&gt;OptionT&lt;/code&gt; and is actually wrapped in a single case union to make it a new type, which I'll show in the appendix, but that's not an important detail when it comes to grokking the concept.&lt;/p&gt;

&lt;p&gt;The important thing to realise is that when you need to deal with multiple monads you don't have to resort back to the pyramid of doom. Instead, you can use a monad transformer to represent the combination and easily create a new monad out of a pair of existing ones. Just remember that it's the inner monad that we define the transformer for.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#test-yourself"&gt;
  &lt;/a&gt;
  Test yourself
&lt;/h1&gt;

&lt;p&gt;See if you can implement &lt;code&gt;bind&lt;/code&gt;, &lt;code&gt;lift&lt;/code&gt; and &lt;code&gt;hoist&lt;/code&gt; for the &lt;code&gt;Result&lt;/code&gt; monad.&lt;/p&gt;

&lt;p&gt;
  Solution
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;ResultT&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Monad&amp;lt;Result&amp;lt;'b&amp;gt;&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Monad&amp;lt;Result&amp;lt;'a&amp;gt;&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;monad&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;lift&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Monad&amp;lt;'a&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;hoist&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Monad&amp;lt;Result&amp;lt;'a&amp;gt;&amp;gt;``&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#does-this-actually-work"&gt;
  &lt;/a&gt;
  Does this actually work? 😐
&lt;/h1&gt;

&lt;p&gt;When we invented &lt;code&gt;bind&lt;/code&gt; for &lt;code&gt;OptionT&lt;/code&gt; we imagined that we had this all powerful &lt;code&gt;monad&lt;/code&gt; computation expression to hand that would work for any monad. You might be wondering if such a thing exists? Particularly whether it exists in F# if you're aware of the fact that F# doesn't support higher kinded types, which it seems like we need here in order to work with a generic outer monad type. &lt;/p&gt;

&lt;p&gt;Fortunately for us, the excellent &lt;a href="https://fsprojects.github.io/FSharpPlus/abstraction-monad.html"&gt;FSharpPlus&lt;/a&gt; does have such an abstract &lt;code&gt;monad&lt;/code&gt; computation expression defined. It also has plenty of monad transformers, like &lt;code&gt;OptionT&lt;/code&gt; already defined and ready to use. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#should-i-use-a-monad-transformer"&gt;
  &lt;/a&gt;
  Should I use a monad transformer?
&lt;/h1&gt;

&lt;p&gt;Monad transformers are certainly quite powerful and can help us recover from having to write what would otherwise be heavily nested code. On the other hand though they're not exactly a free lunch. There are a few things to consider before using them.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If the monad stack gets large it can in itself become quite cumbersome to keep track of it. For instance the types can become large and the lifting across many layers can become tiring.&lt;/li&gt;
&lt;li&gt;This is an area that pushes F# to its limits. Whilst FSharpPlus has done a fantastic job in figuring out how to emulate higher kinded types, it can lead to very cryptic compile time errors if you've got a type mismatch somewhere when using the monad transformer. &lt;/li&gt;
&lt;li&gt;It can also slow down compile times due to the fact it's pushing type inference beyond what it was really designed for.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In some cases then you might be better off just defining a new monad and writing &lt;code&gt;bind&lt;/code&gt; etc for it yourself. If your application typically deals with the same stack of monads then the improved compiler errors will probably outweigh the relatively small maintenance burden of writing the code yourself.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-did-we-learn"&gt;
  &lt;/a&gt;
  What did we learn? 🧑‍🎓
&lt;/h1&gt;

&lt;p&gt;We've now discovered that it's possible to combine monads into new monads and that this lets us write tidier code when we would otherwise have to write nested pattern matches. We've also seen that while it's not possible to create a universal monad transformer for any pair, it is possible to at least define a monad transformer for a fixed inner type. That means we only need to write one transformer per monad in order to start creating more complex monad combinations.&lt;/p&gt;

&lt;p&gt;
  Appendix
  &lt;br&gt;
As mentioned above a monad transformer usually has a new type associated with it. Below I'll show what this looks like for the &lt;code&gt;OptionT&lt;/code&gt; monad transformer and then use that along with the generic &lt;code&gt;monad&lt;/code&gt; computation expression from FSharpPlus to implement the &lt;code&gt;chargeUser&lt;/code&gt; function.&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;OptionT&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Monad&amp;lt;option&amp;lt;'a&amp;gt;&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;OptionT&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Monad&amp;lt;option&amp;lt;'a&amp;gt;&amp;gt;``&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;OptionT&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;OptionT&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Monad&amp;lt;option&amp;lt;'b&amp;gt;&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;OptionT&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;OptionT&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Monad&amp;lt;option&amp;lt;'a&amp;gt;&amp;gt;``&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;monad&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;OptionT&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;lift&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Monad&amp;lt;'a&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;OptionT&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;hoist&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;OptionT&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Monad&amp;lt;option&amp;lt;'a&amp;gt;&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;OptionT&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TransactionId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;monad&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lookupUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;OptionT&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;OptionT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hoist&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;transactionId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;OptionT&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emailReceipt&lt;/span&gt; &lt;span class="n"&gt;transactionId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;lift&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;OptionT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If you're wondering about those type annotations like '&lt;code&gt;Monad&amp;lt;'a&amp;gt;'' then they're really they're just fancy labels. We've used the `\`\&lt;/code&gt; quotations to just give a more meaningful name to show that they represent some generic  &lt;code&gt;Monad&lt;/code&gt;. This acts as documentation, but unfortunately it's not really doing any meaningful type checking. As far as the compiler is concerned that just like any other generic type. We could have easily just written &lt;code&gt;type OptionT&amp;lt;'a&amp;gt; = OptionT of 'a&lt;/code&gt;. So the onus is back on us when implementing these functions to make sure we do write it as if it's actually a generic monad and not just any generic value.&lt;/p&gt;



&lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>functional</category>
      <category>programming</category>
      <category>grokking</category>
    </item>
    <item>
      <title>Creating Your Own Chat Room with React, Node, Socket.io and the Cloud: Part 2</title>
      <author>Bradston Henry</author>
      <pubDate>Fri, 07 May 2021 20:13:04 +0000</pubDate>
      <link>https://dev.to/ibmdeveloper/creating-your-own-chat-room-with-react-node-socket-io-and-the-cloud-part-2-4l12</link>
      <guid>https://dev.to/ibmdeveloper/creating-your-own-chat-room-with-react-node-socket-io-and-the-cloud-part-2-4l12</guid>
      <description>&lt;p&gt;In this blog, we will complete everything we need to get our Chat Room up in running.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gFY9zYfJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/235ocmmv7et47fli6i47.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gFY9zYfJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/235ocmmv7et47fli6i47.gif" alt="Sample Chat Gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://ibm.biz/create-chat-room-in-cloud-blog-part1"&gt;In part 1&lt;/a&gt;, we focused on creating the socket.io NodeJs Server that would manage our chat. Its primary purpose was to receive messages from users in our Chat room and to send it to other Chat Room users in  in real time.&lt;/p&gt;

&lt;p&gt;In part 2, we will be focusing primarily on the ReactJS front-end portion of the Chat room where users will view messages and send messages to other users and connecting it to our server.&lt;/p&gt;

&lt;p&gt;NOTE: If you would like to follow along and build the application with me, I recommend you go back to part 1 and complete that portion before moving any further. The ReactJS portion of our application will not be able to work without a server to interact with.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/bradstondev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sthf4n7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7sHQb0uz--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571773/c3edb21d-5d8d-4839-801b-80a450be711e.jpg" alt="bradstondev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ibmdeveloper/creating-your-own-chat-room-with-react-node-and-socket-io-in-the-cloud-part-1-13dg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Creating Your Own Chat Room with React, Node, and Socket.io in the Cloud: Part 1&lt;/h2&gt;
      &lt;h3&gt;Bradston Henry ・ May 7 ・ 15 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#socket&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;To make our lives easier, I have created the base ReactJS application that we will be using to house our Chat Room. this includes the UI and visuals as well as some starter code that will allow us to code in what we need to connect to our Node server. To get the starter code, download the source from &lt;a href="http://ibm.biz/simple-react-chat-app-frontend-github-bradstondev"&gt;my github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So here is a brief overview of what we will cover is this particular blog to get the React portion of the application up and running:&lt;/p&gt;

&lt;p&gt;So here is quick overview of what we will be doing with our Node server:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install and configure our React application to use socket.io&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement Socket methods to allow our React application to communicate with our server( NodeJS application)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Locally Test our React applications connection to our Node Server&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deploy our ReactJS application to the cloud so it can be accessible to users from anywhere.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you may have noticed, a lot of what we will be doing in this blog will parallel what we did in the last blog. This portion of development should be a bit faster as we should now have a base understanding of how socket.io works from the previous blog.&lt;/p&gt;

&lt;p&gt;So without further adieu, let's get started...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-and-configuring-socketio-with-reactjs"&gt;
  &lt;/a&gt;
  Installing and Configuring Socket.io with ReactJS
&lt;/h1&gt;

&lt;p&gt;So the first thing we are going to do, is navigate to our base ReactJS code using the terminal or command line. Our code should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;you-path-directory&amp;gt;/simple-react-chat-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have navigated to our source code, we are going to install all of our base dependencies listed in our package.json file using this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have installed all of the base frameworks and dependencies we need to run our application, it's time for us to install socket.io into our application. We will be installing the socket framework almost exactly how we did it on the NodeJS server except that we will be using a different library to get access to socket.io in our client application. Here is what we will run to install socket.io in React:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;socket.io-client &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you have probably noticed, this is the "client" version of the socket.io. If you are interested in learning more about the client version of socket.io check out this link: &lt;a href="https://socket.io/docs/v4/client-installation/"&gt;socket.io Client documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our next step will be to create a file that will be used to manage our client socket.io connection with our server. For ease, I have already created the file for you but it is currently blank. We will be adding the necessary code in the next few steps.&lt;/p&gt;

&lt;p&gt;First, open the folder titled "src" in our React app source code directory and the open the folder titled "services". In the "services" folder, you will find a file titled "socket.js". We will be inserting all necessary socket.io connection code in this file. Open this file and add this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;import socketIOClient from &lt;span class="s2"&gt;"socket.io-client"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

const serverEndpoint &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;your-nodejs-server-url&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;export &lt;/span&gt;const socket &lt;span class="o"&gt;=&lt;/span&gt; socketIOClient&lt;span class="o"&gt;(&lt;/span&gt;serverEndpoint, &lt;span class="o"&gt;{&lt;/span&gt;
    transports: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'websocket'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the first line we are importing are &lt;em&gt;socket.io-client&lt;/em&gt; library into our file for use.&lt;/p&gt;

&lt;p&gt;In the next line of code, we are setting the &lt;em&gt;serverEndpoint&lt;/em&gt; to our NodeJs server. This is the string value of the url that your Node server is currently hosted. For example, my &lt;em&gt;serverEndpoint&lt;/em&gt; line would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;const serverEndpoint &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"simple-node-chat-server-bsh.us-south.cf.appdomain.cloud"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our next line is actually initializing the connection between our client and our server. We are also specifying in this line of code a transport parameter. Essentially, what that is doing is setting the connection protocol we would like to use in our socket connection to our server. If you would like to learn more about how transports work and the the different typed of connection protocols, check out this &lt;a href="https://socket.io/docs/v4/client-initialization/#transports"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We now have all the code we need to connect to our socket.io NodeJs server. The reason we are creating a separate file to manage this connection, is because now if we desire to expand this application in the future, we have one location that handles this connection. We can then easily import this file into any React Component or file that we would like to use our socket.io connection with.&lt;/p&gt;

&lt;p&gt;With that, we have set up our React application to connect to our NodeJS server. Our next step will be to implement the socket.io methods we need to communicate appropriately with our server.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#implementing-socket-methods-in-reactjs-client"&gt;
  &lt;/a&gt;
  Implementing Socket Methods in ReactJS client
&lt;/h1&gt;

&lt;p&gt;Since we already have everything we need setup on our server, our next job is to implement the correct methods to communicate with our server.&lt;/p&gt;

&lt;p&gt;In order to do that, we will need to modify the code in our ChatRoom.js file. In our source code directory, open the 'src' folder and then open the "pages" folder. In the "pages" folder, open up the file titled "chatRoom.js". As the title of the file suggests, this holds all relevant code we need to operate our chat room.&lt;/p&gt;

&lt;p&gt;As you will notice in the file, there is quite a bit of code already implemented, but we need to implement some new code to get our socket methods working.&lt;/p&gt;

&lt;p&gt;At the top of the file directly under our last imported file we are going to import our "socket.js" file from our services folder. Your code should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;...
import ChatNotification from &lt;span class="s1"&gt;'../components/ChatNotification'&lt;/span&gt;

//Add socket import here
import &lt;span class="o"&gt;{&lt;/span&gt;socket&lt;span class="o"&gt;}&lt;/span&gt; from &lt;span class="s1"&gt;'../services/socket'&lt;/span&gt; 

&lt;span class="nb"&gt;let &lt;/span&gt;styles &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
....
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have our socket service imported, our first step is to setup the socket.io method that manages creating and setting our user data/identity. In order to do this we need to implement a &lt;em&gt;socket.on&lt;/em&gt; method and &lt;em&gt;socket.emit&lt;/em&gt; method. &lt;/p&gt;

&lt;p&gt;As mentioned in &lt;a href="https://ibm.biz/create-chat-room-in-cloud-blog-part1"&gt;part 1&lt;/a&gt; of this blog, &lt;em&gt;socket.on&lt;/em&gt; methods act as listeners, always looking out for messages and &lt;em&gt;socket.emit&lt;/em&gt; methods act as messengers, sending messages to listening &lt;em&gt;socket.on&lt;/em&gt; methods. In this case, &lt;em&gt;socket.on&lt;/em&gt; methods are listening for messages &lt;strong&gt;from&lt;/strong&gt; the Node server and &lt;em&gt;socket.emit&lt;/em&gt; methods are sending messages &lt;strong&gt;to&lt;/strong&gt; the Node server.&lt;/p&gt;

&lt;p&gt;In our ChatRoom.js file, in our componentDidMount() method, we will be implementing our code. Within the &lt;em&gt;if(!userIDVal){&lt;/em&gt; we will be adding new code that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(!&lt;/span&gt;userIDVal&lt;span class="o"&gt;){&lt;/span&gt;

   socket.on&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SetUserData"&lt;/span&gt;, userData &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      //When user creation on server is &lt;span class="nb"&gt;complete&lt;/span&gt;, retrieve and save data to &lt;span class="nb"&gt;local &lt;/span&gt;storage
      localStorage.setItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'userID'&lt;/span&gt;, userData.userID&lt;span class="o"&gt;)&lt;/span&gt;
      localStorage.setItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;, userData.username&lt;span class="o"&gt;)&lt;/span&gt;
            console.log&lt;span class="o"&gt;(&lt;/span&gt;userData&lt;span class="o"&gt;)&lt;/span&gt;

      this.setState&lt;span class="o"&gt;({&lt;/span&gt;currentUsername: userData.username, currentUserID: userData.userID&lt;span class="o"&gt;})&lt;/span&gt;

      //Notify Socket server is not ready to chat
      socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"UserEnteredRoom"&lt;/span&gt;, userData&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   //Send Socket &lt;span class="nb"&gt;command &lt;/span&gt;to create user info &lt;span class="k"&gt;for &lt;/span&gt;current user
   socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"CreateUserData"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what exactly is happening here?&lt;/p&gt;

&lt;p&gt;So what we are doing is checking to see if our current client/user has a Chat Room "identity" yet. In code prior to this conditional you will see this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;let &lt;/span&gt;userIDVal &lt;span class="o"&gt;=&lt;/span&gt; localStorage.getItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'userID'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;let &lt;/span&gt;usernameVal &lt;span class="o"&gt;=&lt;/span&gt; localStorage.getItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this code is doing, is attempting to retrieve &lt;em&gt;userID&lt;/em&gt; and &lt;em&gt;username&lt;/em&gt; data stored in our browsers local storage. If the data does not exist (&lt;em&gt;if(!userIDVal)&lt;/em&gt;), we are assuming that this is the users first time in the chat room. &lt;/p&gt;

&lt;p&gt;The first thing we do is implement a &lt;em&gt;socket.on&lt;/em&gt; method with name "SetUserData" that will begin listening for the server to send information about this users newly made identity. Within that &lt;em&gt;socket.on&lt;/em&gt; method_ we have some code that retrieves newly created user data from the server and then promptly saves it to the browser's local storage for future use and sets the values in the React components state. Once the user info is set, we use the &lt;em&gt;socket.emit&lt;/em&gt; method "UserEnteredRoom" to let the server know that the user is now entering the Chat room with an identity and can chat.&lt;/p&gt;

&lt;p&gt;After we setup the &lt;em&gt;socket.on&lt;/em&gt; method, "SetUserData", we then implement a &lt;em&gt;socket.emit&lt;/em&gt; method called "CreateUserData" which will be used to actually ask the server to make an identity for our user. The emit will send the message to create user data for our client and the server will promptly send a message back to be retrieved by our listening "SetUserData" method.&lt;/p&gt;

&lt;p&gt;NOTE: The reason we don't write these two methods in reverse order is to ensure that the listener, "SetUserData", is prepared to receive newly created user data from the server &lt;strong&gt;before&lt;/strong&gt; we ask the server to make new user data. In some cases, the request for new user data and its response may be fast, and if we set the listener method after the messaging function, there is a chance the listener method may still be getting setup and miss the server's response. If that doesn't make sense, please feel free to leave a comment asking for more clarification.&lt;/p&gt;

&lt;p&gt;Now that we have added code for a first time chat user, it is also necessary for us to have things set up for a returning user with pre-existing user data stored in the browser.&lt;/p&gt;

&lt;p&gt;In the else condition of our &lt;em&gt;if(!userIDVal)&lt;/em&gt; conditional, we will add this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   //If user already has userid and username, notify server to allow them to &lt;span class="nb"&gt;join &lt;/span&gt;chat
   this.setState&lt;span class="o"&gt;({&lt;/span&gt;currentUsername: usernameVal, currentUserID: userIDVal&lt;span class="o"&gt;})&lt;/span&gt;
   socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"UserEnteredRoom"&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt;userID: userIDVal, username: usernameVal&lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the user exists in browser local storage, we simply store that information to React state and send a message to the server using the "UserEnteredRoom" socket.io method to inform our server that our client is ready to chat.&lt;/p&gt;

&lt;p&gt;The next piece of code we will be entering will be at the end of our &lt;em&gt;componentDidMountMethod()&lt;/em&gt;. This code will simply setup up a &lt;em&gt;socket.on&lt;/em&gt; method called "RetrieveChatRoomData" that will always be listening for new Chat Room data, aka when a new chat message has been received by the server. This the code that we will add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;socket.on&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"RetrieveChatRoomData"&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;chatRoomData&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   this.setState&lt;span class="o"&gt;({&lt;/span&gt;chatRoomData: chatRoomData&lt;span class="o"&gt;}&lt;/span&gt;, &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; this.shouldScrollToBottom&lt;span class="o"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that new addition our complete componentDidMount() method should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;componentDidMount&lt;span class="o"&gt;(){&lt;/span&gt;

    // localStorage.removeItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'userID'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    // localStorage.removeItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;let &lt;/span&gt;userIDVal &lt;span class="o"&gt;=&lt;/span&gt; localStorage.getItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'userID'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;let &lt;/span&gt;usernameVal &lt;span class="o"&gt;=&lt;/span&gt; localStorage.getItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    //If user does not have a userid and username saved &lt;span class="k"&gt;in &lt;/span&gt;&lt;span class="nb"&gt;local &lt;/span&gt;storage, create them &lt;span class="k"&gt;for &lt;/span&gt;them
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(!&lt;/span&gt;userIDVal&lt;span class="o"&gt;){&lt;/span&gt;

      socket.on&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SetUserData"&lt;/span&gt;, userData &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        //When user creation on server is &lt;span class="nb"&gt;complete&lt;/span&gt;, retrieve and save data to &lt;span class="nb"&gt;local &lt;/span&gt;storage
        localStorage.setItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'userID'&lt;/span&gt;, userData.userID&lt;span class="o"&gt;)&lt;/span&gt;
        localStorage.setItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;, userData.username&lt;span class="o"&gt;)&lt;/span&gt;
        console.log&lt;span class="o"&gt;(&lt;/span&gt;userData&lt;span class="o"&gt;)&lt;/span&gt;

        this.setState&lt;span class="o"&gt;({&lt;/span&gt;currentUsername: userData.username, currentUserID: userData.userID&lt;span class="o"&gt;})&lt;/span&gt;

        //Notify Socket server is not ready to chat
        socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"UserEnteredRoom"&lt;/span&gt;, userData&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      //Send Socket &lt;span class="nb"&gt;command &lt;/span&gt;to create user info &lt;span class="k"&gt;for &lt;/span&gt;current user
      socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"CreateUserData"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; 
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        //If user already has userid and username, notify server to allow them to &lt;span class="nb"&gt;join &lt;/span&gt;chat
        this.setState&lt;span class="o"&gt;({&lt;/span&gt;currentUsername: usernameVal, currentUserID: userIDVal&lt;span class="o"&gt;})&lt;/span&gt;
        socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"UserEnteredRoom"&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt;userID: userIDVal, username: usernameVal&lt;span class="o"&gt;})&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    //Retrieve game data &lt;span class="o"&gt;(&lt;/span&gt;from Get Chat data socket call&lt;span class="o"&gt;)&lt;/span&gt;
    socket.on&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"RetrieveChatRoomData"&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;chatRoomData&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        this.setState&lt;span class="o"&gt;({&lt;/span&gt;chatRoomData: chatRoomData&lt;span class="o"&gt;}&lt;/span&gt;, &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; this.shouldScrollToBottom&lt;span class="o"&gt;())&lt;/span&gt;
    &lt;span class="o"&gt;})&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we will implement the method that will actually send the chat messages to our server.&lt;/p&gt;

&lt;p&gt;Find the method called &lt;em&gt;sendMessageData()&lt;/em&gt; in our file. In this empty method we will be adding this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;var &lt;span class="o"&gt;{&lt;/span&gt;message, currentUsername, currentUserID&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; this.state

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;message.length &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 0&lt;span class="o"&gt;){&lt;/span&gt;
    //Send chat message to server...
    socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SendMessage"&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt;message: message, username: currentUsername, userID: currentUserID, timeStamp: null&lt;span class="o"&gt;})&lt;/span&gt;
    //Clear chat message textfield box
    this.setState&lt;span class="o"&gt;({&lt;/span&gt;message: &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code first retrieves our current entered message, our username and our userID from our React state and stores them as variables for future use. Next, we check to make sure the message has some length, otherwise we risk sending an empty message to the server. If the message length is greater than zero, we then use the &lt;em&gt;socket.emit&lt;/em&gt; method "SendMessage" to send our typed in chat message with the information on who sent the message. NOTE: I added an extra timestamp data point just in case I wanted to add timestamps in the future to the chat view.&lt;/p&gt;

&lt;p&gt;Once we have sent the message to the server we empty our message string from our React state which in turns clears our textfield input box. &lt;/p&gt;

&lt;p&gt;With that last addition our Chat Room is almost ready. There is one minor housekeeping-code addition we need to add in order to prevent against possible memory leaks.&lt;/p&gt;

&lt;p&gt;As I mentioned earlier, whenever we implement a &lt;em&gt;socket.on&lt;/em&gt; method, we are telling our code to constantly listen to messages that may come from our server. The thing is, if you do not tell the listeners to stop listening, they will continue to listen pretty much indefinitely as long as the application is running. So if we by-chance, navigated to another page within our application, the listeners would keep on listening even though we are no longer on the page that needed the listeners. &lt;strong&gt;That&lt;/strong&gt;, my friends, is essentially a memory leak. Because if we kept navigating to and from our page with the listeners it would keep adding listeners over and over and over, bogging down our application.&lt;/p&gt;

&lt;p&gt;With all that being said, we need we need to add a set of clean-up methods that turn off those listeners when we leave the chat room page. &lt;/p&gt;

&lt;p&gt;Somewhere in the code, preferably directly under the &lt;em&gt;componentDidMount()&lt;/em&gt; method add this method and code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;componentWillUnmount&lt;span class="o"&gt;(){&lt;/span&gt;
    socket.off&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"RetrieveChatRoomData"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    socket.off&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SetUserData"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the &lt;em&gt;socket.off&lt;/em&gt; method implies, it "turns off" the listening of these functions when we unmount this particular view or leave this page entirely. &lt;/p&gt;

&lt;p&gt;Before we declare victory on our Chat Room app, I would like us to add one more convenience method to our React application that will allow us to clear our chat history whenever we would like.&lt;/p&gt;

&lt;p&gt;In the "pages" folder within our "src" directory of our project, open the file titled "ClearChat.js". &lt;/p&gt;

&lt;p&gt;At the top of the file, import socket below the last import:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;...
import &lt;span class="o"&gt;{&lt;/span&gt; Row, Container &lt;span class="o"&gt;}&lt;/span&gt; from &lt;span class="s1"&gt;'react-bootstrap'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

import &lt;span class="o"&gt;{&lt;/span&gt;socket&lt;span class="o"&gt;}&lt;/span&gt; from &lt;span class="s1"&gt;'../services/socket'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have added the import, scroll down until you find the empty method called &lt;em&gt;clearChatData()&lt;/em&gt;. In that method we will add one simple line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ClearChat"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the &lt;em&gt;socket.emit&lt;/em&gt; suggests, this will send a message to our Node server to clear our chat history. This functionality can only be used by navigating to the "/clearChat" page when we run our application.&lt;/p&gt;

&lt;p&gt;With that our Chat Room application is ready to go. Before we deploy our application to the cloud, we are going to briefly test if our application is configured correctly on our local machine. This way we won't be surprised by any errors when we attempt to push it to the cloud.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#local-test-of-reactnode-server-connection"&gt;
  &lt;/a&gt;
  Local Test of React/Node Server Connection
&lt;/h1&gt;

&lt;p&gt;So let's do a quick test to see if our React application is properly configured and setup to connect with our socket.io NodeJS Server.&lt;/p&gt;

&lt;p&gt;In a terminal/command line window, make sure you are currently in our &lt;em&gt;simple-react-chat-app&lt;/em&gt; directory. Once we are sure we are in our directory, let's run a command that will run our React application locally. Type this command into your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should begin locally running our React code in our browser on our localhost (most likely port 3000). In most cases, the application should open automatically in your default browser, if not, enter &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; into your desired browser to view the application. If your application ran successfully, you should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bwzSo7fB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo99b6rc3q196xkx58by.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bwzSo7fB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo99b6rc3q196xkx58by.png" alt="React-App-Local-Host-Chat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It should simply note that someone entered the chat (which was you!). At the top of the screen below the "Chat Room" title it should show who you are now appearing as in the chat. Go ahead and navigate to the bottom of the page and type something into the chat message input box. Send your message by either pressing the send icon or pressing Enter/Return. You should now see your message appear in the chat.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I0Km3hNn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1p9bphpm8qp9dbo4c0j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I0Km3hNn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1p9bphpm8qp9dbo4c0j.png" alt="React-App-Hello-Chat"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If that worked, that means your Node server in the Cloud is working and your react application is communicating correctly with it. If that did not work, go back and ensure your code matches what was shared above. NOTE: Also, check your browser web console (normally accessible via developer tools) to check if you are receiving an errors. This may give you guidance on your issue. &lt;/p&gt;

&lt;p&gt;If you want to check what it would be like to have more than one individual in the Chat Room, Open a different browser (E.g. If you are currently testing with Firefox, now open the Chat Room with Chrome) to see how it works.&lt;/p&gt;

&lt;p&gt;Now that we see the general chat Room functionality is working, let's just test that our Clear chat functionality is working. &lt;/p&gt;

&lt;p&gt;In your browser address bar go to this address: &lt;a href="http://localhost:3000/clearChat"&gt;http://localhost:3000/clearChat&lt;/a&gt; (Note: If your React is hosting at a different port replace 3000 with that port).&lt;/p&gt;

&lt;p&gt;You should be presented with a simple page that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wSWQMDPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81nyajkkqssaiqjmdgnk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wSWQMDPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81nyajkkqssaiqjmdgnk.png" alt="React-App-Clear-Chat-View"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the button on the page that says "Clear Chat".&lt;/p&gt;

&lt;p&gt;Once you have done that, navigate back to main page (&lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;) and you should now see that the chat cleared itself. NOTE: You will only be able to clear the chat while running the application on your local machine. When hosted in cloud, I did not make it possible to route directly to Clear Chat. Feel free to add that capability if you'd like.&lt;/p&gt;

&lt;p&gt;Now that we have tested this locally, it's time to deploy this Chat Room into the cloud. Go ahead and stop the React application so we can move on to the next steps. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#deploying-your-react-chat-room-to-the-cloud"&gt;
  &lt;/a&gt;
  Deploying your React chat Room to the Cloud
&lt;/h1&gt;

&lt;p&gt;The following steps are going to be almost identical to what we did to deploy our Node server to the cloud so quite a bit of this will be familiar. The biggest difference will be the name of our Application and the route and making sure we initiate a React build before we deploy.&lt;/p&gt;

&lt;p&gt;The first thing we are going to need to do is build our React application so it can be properly deployed on our Cloud server (IBM Cloud Cloud Foundry server). So let's go ahead and run this command to build our React app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That should initiate the React build process. This may take a few minutes and your terminal window should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZbnMvRtG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1459jl9t14u89bnvtin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZbnMvRtG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1459jl9t14u89bnvtin.png" alt="CLI-successful-react-app-build"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now in order to have a free way to easily deploy our application to the cloud, we will be using an &lt;a href="https://www.ibm.com/cloud/free"&gt;IBM Cloud Lite account&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If you do not have IBM Cloud Lite account, you can quickly sign-up for free access to cloud resources for hosting your application in the cloud. Signup using this link: &lt;a href="https://ibm.biz/IBM-Cloud-Signup"&gt;IBM Cloud Signup Link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you are signed up we will be pushing our application to the cloud using IBM Cloud CLI in our terminal. If you do not have the IBM Cloud CLI, you can download the latest version here: &lt;a href="https://www.ibm.com/cloud/cli"&gt;IBM Cloud CLI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;NOTE: If you are interested on how to do this through the IBM Cloud dashboard, you can check out my blog on deploying a React application to the cloud for general walkthrough of how that works: [Deploying ReactJS to the Cloud](&lt;a href="https://ibm.biz/deploying-react-app-in-cloud-devto-bradstondev"&gt;https://ibm.biz/deploying-react-app-in-cloud-devto-bradstondev&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, make sure you are still in a terminal window and that you are still in the _simple-react-chat-app directory.&lt;/p&gt;

&lt;p&gt;While in the directory, log into your IBM Cloud account using this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ibmcloud login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enter you username and password and you should be presented with a screen like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a1VY9y4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0wieoic3xhh8dv4sphx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a1VY9y4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0wieoic3xhh8dv4sphx.png" alt="CLI-IBM-Cloud-Login"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HEfLW4-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzhmrydq2em8u5aq3uan.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HEfLW4-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzhmrydq2em8u5aq3uan.png" alt="CLI-Authenticated-Success"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have logged into IBM Cloud, we need to set our IBM cloud target to Cloud Foundry as we will be using the Cloud Foundry framework to host our application. If you'd like to learn more about Cloud Foundry, check out this link: [Cloud Foundry](&lt;a href="https://ibm.biz/ibm-cloud-foundry-homepage-bradstondev"&gt;https://ibm.biz/ibm-cloud-foundry-homepage-bradstondev&lt;/a&gt;. Type this command to target Cloud Foundry:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ibmcloud target &lt;span class="nt"&gt;--cf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If it was successful, you should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1G6gRjX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3izbju5g1z55wnr5hqv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1G6gRjX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3izbju5g1z55wnr5hqv.png" alt="CLI-Target-CF"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Right before we deploy our server to the cloud, we need to make some minor updates to our code.&lt;/p&gt;

&lt;p&gt;In our &lt;em&gt;simple-react-chat-app&lt;/em&gt; directory and open the file named "manifest.yml"&lt;/p&gt;

&lt;p&gt;In the file you should see this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;applications:
  - name: Simple React Chat App
memory: 64M
path: build/
buildpack: staticfile_buildpack 
routes:
  - route: simple-react-chat-app-&amp;lt;your-intials&amp;gt;.&amp;lt;server-closest-to-you&amp;gt;.cf.appdomain.cloud
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace &lt;em&gt; with your initials and _&lt;/em&gt; with a the server closest to you. Because you may not know what are possible server names, here is a list. Choose a server that you believe you think may be closest to you. And if you want to view this list yourself you can enter the command listed below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ibmcloud regions

//Output
Name       Display name   
au-syd     Sydney   
&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="nt"&gt;-che&lt;/span&gt;     Chennai   
jp-osa     Osaka   
jp-tok     Tokyo   
kr-seo     Seoul   
eu-de      Frankfurt   
eu-gb      London   
ca-tor     Toronto   
us-south   Dallas   
us-east    Washington DC   
br-sao     Sao Paulo  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, this was my updated manifest.yml(NOTE: Please do not use the same route name as displayed below. This will likely cause an error saying route is already taken when you attempt to push to IBM Cloud):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;applications:
  - name: Simple React Chat App
memory: 64M
path: build/
buildpack: staticfile_buildpack 
routes:
  - route: simple-react-chat-app-bsh.us-south.cf.appdomain.cloud
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have updated your manifest.yml, you only have one more step: &lt;strong&gt;Deploy your React application into the Cloud!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the same terminal window you logged into IBM Cloud with, enter this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ibmcloud cf push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will initiate the process of deploying your NodeJS application into the cloud. It in general takes a few minutes to deploy this code.&lt;/p&gt;

&lt;p&gt;When the the application has been successfully deployed, you should see something like this in your terminal window:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OqiAkujK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6l7qntk5o1ojffqrpaq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OqiAkujK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6l7qntk5o1ojffqrpaq.png" alt="CLI-React-app-successful-push"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to a browser window and insert the route value you entered into the manifest.yml. In my case that would be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;simple-react-chat-app-bsh.us-south.cf.appdomain.cloud
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should be presented with our Chat Room and with the message that a new user entered the chat. If you did not clear the chat in our previous step, you will likely see the messages you sent earlier while testing:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z05dLb5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/195a5sppuhuzlyv5tcvj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z05dLb5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/195a5sppuhuzlyv5tcvj.png" alt="React-App-Deployed-Chat"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you do not see this page, you may need to check that you code matches the code I shared above and feel free to check the actual application status and error log by visiting the IBM Cloud Resource list and finding your application by its name.&lt;/p&gt;

&lt;p&gt;And just like that, we have a working chat room that can be shared with whomever you like!!&lt;/p&gt;

&lt;p&gt;I really encourage you to take the time to really understand what all this code I have shared with you is doing. Change method names, change how data is sent, and just break things! This is the best way to truly understand what is happening under the hood so that you can use socket.io to implement realtime communication in applications like this.&lt;/p&gt;

&lt;p&gt;Since socket.io's real-time messaging can be used in a lot of different scenarios, I'd like to hear from all of you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What other ways could you imagine using the socket.io technology other than a chat room?&lt;/strong&gt; Leave you ideas in the the comments below. I'd love to hear them!&lt;/p&gt;

&lt;p&gt;Thanks for reading this blog and I am encouraged by your desire to learn new topics like these.&lt;/p&gt;

&lt;p&gt;Have a great one until next time!&lt;/p&gt;

&lt;p&gt;==== FOLLOW ME ON SOCIAL MEDIA ====&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/BradstonDev"&gt;Bradston Dev&lt;/a&gt;&lt;br&gt;
Dev.to: &lt;a class="mentioned-user" href="https://dev.to/bradstondev"&gt;@bradstondev&lt;/a&gt;
 &lt;br&gt;
Youtube: &lt;a href="https://www.youtube.com/channel/UC6Ky8s71RP65akLb_XV1_OA"&gt;Bradston YT&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>node</category>
      <category>cloud</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Create a brand style sheet for your personal projects</title>
      <author>Ewald van Veen</author>
      <pubDate>Fri, 07 May 2021 20:06:28 +0000</pubDate>
      <link>https://dev.to/ewaldvanveen/create-a-brand-style-sheet-for-your-personal-projects-3ehl</link>
      <guid>https://dev.to/ewaldvanveen/create-a-brand-style-sheet-for-your-personal-projects-3ehl</guid>
      <description>&lt;p&gt;As a developer, building and creating projects obviously doesn't stop when you close your laptop at the end of a working day. No doubt you got tons of cool personal ideas waiting to be shared with the world. Whether it's a small project just to try something new or an awesome new website that actually makes it to the web, you want to give every project your own personal touch.&lt;/p&gt;

&lt;p&gt;However, a common 'problem' we may run into, especially when building a website or application with a frontend, is that our project not only needs to &lt;em&gt;do&lt;/em&gt; what it's supposed to do but it also needs to &lt;em&gt;look&lt;/em&gt; nice. Creating a design for your app or site is a part of the project many developers are not very fond of, resulting in ideas with a promising start but with a disappointing ending in some GitHub repository.&lt;/p&gt;

&lt;p&gt;But it doesn't have to be this way. This blog post gives you a practical instruction that will help you creating a look and feel for your website or application that you can be proud of. I want to share with you how you can create a simple &lt;em&gt;brand style sheet&lt;/em&gt; that you can then use for your project. The goal here is not to write a thick document covering all possible media types, but to create a basic overview which covers the most important aspects of your design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nzAfQP1n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5olkmb26hwtyyramt9af.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nzAfQP1n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5olkmb26hwtyyramt9af.png" alt="Icon of Rewind"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#meet-rewind"&gt;
  &lt;/a&gt;
  Meet Rewind
&lt;/h1&gt;

&lt;p&gt;Before we get started, I'd like to introduce you to &lt;em&gt;Rewind&lt;/em&gt;, the startup I'll be using as an example to create my brand style sheet for.&lt;/p&gt;

&lt;p&gt;Rewind is a new company with a website where people can buy classic films and TV series. These films and series can be bought directly on the website, but also via other people who offer films and series for sale from their own collection. It's a website for fans of classic material that cannot be found on most streaming platforms.&lt;/p&gt;

&lt;p&gt;Rewind's target audience is mainly film collectors, both young and old. The company wants to distinguish itself through offering a  unique collection of films and TV series.&lt;/p&gt;

&lt;p&gt;For the company we are going to create a design and develop it in a brand style sheet. This style sheet can then be used when building the new website to apply a consistent design that matches with what Rewind stands for and the way it wants to retain customers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-structure-of-the-brand-style-sheet"&gt;
  &lt;/a&gt;
  The structure of the brand style sheet
&lt;/h1&gt;

&lt;p&gt;The brand style sheet consists of the following parts, which we will discuss per part:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Color&lt;/li&gt;
&lt;li&gt;Typography&lt;/li&gt;
&lt;li&gt;Logo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are all kinds of programs in which you can create your style sheet. I will use Photoshop, but a program like Word or PowerPoint can also be a good alternative.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iigzzzMF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kzp0tn9b8atjdowgnvt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iigzzzMF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kzp0tn9b8atjdowgnvt.png" alt="Brand values uniqueness, trust, fun"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#brand-values"&gt;
  &lt;/a&gt;
  Brand Values
&lt;/h1&gt;

&lt;p&gt;Before you can start thinking about creating a brand style sheet, take a step back and think about the brand itself. In order to achieve a production-worthy end result for your website or application, it is important to think about what you want your product, your brand, to stand for. You base the design of your product on these values. Whether this is selling old films and series or a cool, new to-do app ;-), you want your website or application to set the right tone.&lt;/p&gt;

&lt;p&gt;Think about this for a moment and try to come up with some concrete terms that together reflect how you want your website or application to be recognized by your users or clients.&lt;/p&gt;

&lt;p&gt;For Rewind this resulted in the following brand values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Uniqueness&lt;/em&gt; - because of the unique collection I already mentioned.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Trust&lt;/em&gt; - people should feel they are dealing with a company they can trust.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Fun&lt;/em&gt; - we're talking about a hobby here, so people should enjoy visiting the website and browsing for hidden gems for their collection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MBKhzjGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrcunbxk1323vdb555d6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MBKhzjGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrcunbxk1323vdb555d6.png" alt="The color part of the brand style sheet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#color"&gt;
  &lt;/a&gt;
  Color
&lt;/h1&gt;

&lt;p&gt;Based on the brand values ​​that you have come up with for your website or application, you have to look for a matching color scheme. You can evoke the right feeling among users of your application via the right set of colors. Of course people can have different associations with the same color, but basically each color represents it's own set of emotions and feelings.&lt;/p&gt;

&lt;p&gt;When you search the internet you'll come across a lot of sites that explain which color has which meaning (&lt;a href="https://graf1x.com/color-psychology-emotion-meaning-poster"&gt;example&lt;/a&gt;). You can use this to create a color scheme with colors that are a match with your brand values.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-color-wheel"&gt;
  &lt;/a&gt;
  Using the color wheel
&lt;/h3&gt;

&lt;p&gt;Start by choosing one primary color. This will be the color that will serve as the main color for your design. You can then add one or more accent colors. A color wheel can help you to pick the right accent colors. A color wheel shows, based on a basic color, which colors match well. I personally find the &lt;a href="https://color.adobe.com/create/color-wheel"&gt;Adobe color wheel&lt;/a&gt; a very nice tool to use.&lt;/p&gt;

&lt;p&gt;Looking at the brand values for Rewind, these are the colors that could be used as primary colors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Trust - blue&lt;/li&gt;
&lt;li&gt;Fun - orange&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For my brand value 'Uniqueness' it's a bit harder to find a matching color, although purple could be a fit. Based on this, I decided to go for a color scheme with the calm and reliable blue as the primary color, combined with the fresh, playful orange as an accent color. I will not use purple for the time being, to keep things simple.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#color-palettes"&gt;
  &lt;/a&gt;
  Color palettes
&lt;/h3&gt;

&lt;p&gt;As you can see on Adobe's color wheel page, there are multiple color palettes to choose from, from monochrome to triadic. It's beyond the scope of this blog post to explain what each palette means. I recommend you to play with the color wheel with a chosen primary color as a starting point to discover which color combinations go well together. Keep it simple and clear. As you will see, there are also color palettes that consist of only 1 color with a number of variations.&lt;/p&gt;

&lt;p&gt;Back to Rewind. After spinning the color wheel for some time, I ended up with a mix of blue and orange that will be the starting point for my color scheme:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Blue (#0B398F)&lt;/li&gt;
&lt;li&gt;Dark blue (#0C1F42)&lt;/li&gt;
&lt;li&gt;Orange (#ED472B)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#contrast"&gt;
  &lt;/a&gt;
  Contrast
&lt;/h3&gt;

&lt;p&gt;Before finalizing your color scheme, it's important to check whether the colors you've chosen provide enough contrast in combination with your font color. Websites with poor contrast ratios can be an unpleasant experience for visually impaired visitors. The Web Content Accessibility Guidelines (WCAG) recommend to maintain a minimum contrast ratio of 4.5:1 between text and background. This means that the font color must be at least 4.5 times darker or lighter comparing to the background color. A useful site to check this is, for example, &lt;a href="https://accessible-colors.com/"&gt;accessible colors&lt;/a&gt;. If the color does not fall within the guidelines, the site comes up with an alternative.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hyJD-2WF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8uf1vw2prc8bxlagvtbd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hyJD-2WF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8uf1vw2prc8bxlagvtbd.png" alt="Example of the chose font types, which are Source Serif Pro and Source Sans Pro"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#typography"&gt;
  &lt;/a&gt;
  Typography
&lt;/h1&gt;

&lt;p&gt;Just like chosing a color scheme, the starting point with typography is to pick only a few font types. 2 or maybe 3 types should be sufficient for your project. Make sure that the fonts you choose differ enough from each other so that it's clear to the user. Consider, for example, a combination of a serif and a sans-serif font (&lt;a href="https://www.fonts.com/content/learning/fontology/level-1/type-anatomy/type-classifications"&gt;an extensive explanation of the different types of classifications can be found here&lt;/a&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#match-with-your-brand-values"&gt;
  &lt;/a&gt;
  Match with your brand values
&lt;/h3&gt;

&lt;p&gt;Again try to match your chosen fonts with the established brand values. For example, a classic font may not be the best choice if you are building an application that primarily wants to create a sense of energy and fun. It seems obvious, but it's important to take this into account.&lt;/p&gt;

&lt;p&gt;Finding good font pairings can be tricky. If you're not sure about which fonts are a good match, try choosing 2 types that are created by the same designer. Designers often create a new font based on other fonts they created.&lt;/p&gt;

&lt;p&gt;For Rewind I've chosen a combination of a sans-serif type for the body content and a serif type for the headings. The fonts I'm using can be found on &lt;a href="https://fonts.google.com/"&gt;Google Fonts&lt;/a&gt;, where you can choose among an extensive number of fonts that are free to use within your application. What I'm trying to achieve with the fonts I've chosen is to create a sense of reliability through a classic heading style, combined with a more modern font for the body of my content to give the site a fresh and enjoyable look.&lt;/p&gt;

&lt;p&gt;The fonts I've chosen are from the same designer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Headings: Source Serif Pro&lt;/li&gt;
&lt;li&gt;Body: Source Sans Pro&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u2DAlCjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7615dypyzta2omlurzb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u2DAlCjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7615dypyzta2omlurzb.png" alt="Logo of Rewind"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#logo"&gt;
  &lt;/a&gt;
  Logo
&lt;/h1&gt;

&lt;p&gt;Designing logos requires a different set of skills. However, there are many good tutorials and tools on the web that can help you creating your own logo. As with many new skills, this probably will be a process of trial and error.&lt;/p&gt;

&lt;p&gt;Try to stick to the choices you have made in the steps before to give your application a consistent look and feel. Get inspired by examples on the web and (of course :-)): try not to make it too complicated.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-result"&gt;
  &lt;/a&gt;
  The result
&lt;/h1&gt;

&lt;p&gt;Putting it all together, you created a simple brand style sheet containing the most important parts for your application.&lt;/p&gt;

&lt;p&gt;The brand stylesheet for Rewind ended up looking like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BZiz5YHg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9uflq95rq71q1e17xxst.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BZiz5YHg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9uflq95rq71q1e17xxst.png" alt="Brand style sheet result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember, it doesn't matter how your brand style sheet looks like. The most important thing is that you're satisfied about the choices you've made and that you wrote them down in some form of a document or slide.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this post I showed you that creating your own design doesn't have to be very difficult. Start by thinking about what message you want to communicate to the users of your app or the visitors of your website. What does your product or your service stand for? When people think about your product, what should they feel? &lt;/p&gt;

&lt;p&gt;As a result of this process try to extract a list of brand values which you believe will set the right tone for your product. With these values in place, you can then create a brand style sheet. By chosing colors, fonts and creating a logo that matches with the brand values, you got yourself a design for your website or app that will help you to send the right message to your users or clients. Sticking to the brand style sheet when you're building your site or app will give your project a consistent look and feel.&lt;/p&gt;

&lt;p&gt;Thank you for taking the time to read this post! If you have any questions about the subject feel free to respond. I just started blogging, so any feedback would be be appreciated. :-) &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>ux</category>
    </item>
    <item>
      <title>Set up automated deployments with Google Cloud Run and Gitlab</title>
      <author>akinniyi</author>
      <pubDate>Fri, 07 May 2021 20:03:45 +0000</pubDate>
      <link>https://dev.to/akinniyi/set-up-automated-deployments-with-google-cloud-run-and-gitlab-53j5</link>
      <guid>https://dev.to/akinniyi/set-up-automated-deployments-with-google-cloud-run-and-gitlab-53j5</guid>
      <description>&lt;p&gt;Let's look at how we can set up a continuous delivery pipeline for our Google Cloud Run projects with Gitlab CI/CD&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;br&gt;
Google Cloud Run:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cloud Run is a serverless, managed compute platform that enables you to run stateless containers that are invocable via web requests or Pub/Sub events.&lt;br&gt;
 To run a Cloud Run service, you need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have a &lt;a href="https://console.cloud.google.com/project"&gt;Google Project&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://console.developers.google.com/apis/api/run.googleapis.com/overview"&gt;Enable Cloud Run API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://console.cloud.google.com/cloud-build/builds"&gt;Enable Cloud Build API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Gitlab:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GitLab is a web-based DevOps lifecycle tool that provides a Git-repository manager providing wiki, issue-tracking, and continuous integration and deployment pipeline features, using an open-source license, developed by GitLab Inc.&lt;br&gt;
 You can create a Gitlab project here: &lt;a href="https://gitlab.com/projects/new"&gt;New Gitlab project&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Clone sample repo here:&lt;br&gt;
&lt;a href="https://gitlab.com/niyi/myhelloworldapp"&gt;https://gitlab.com/niyi/myhelloworldapp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1a: Validate Service Account&lt;/strong&gt;&lt;br&gt;
A service account is a special kind of account used by an application to make authorized API calls on the GCP platform.&lt;br&gt;
On your Google Cloud project, navigate through Cloud Build &amp;gt; Settings.&lt;br&gt;
Under Service account permissions, make sure both Cloud Run and Service Accounts are enabled&lt;br&gt;
&lt;strong&gt;Step 1b: Create a Google Service Account&lt;/strong&gt;&lt;br&gt;
We'll create a new service account for your application to use&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On your Google Cloud project, navigate through IAM &amp;amp; Admin &amp;gt; Service Accounts &amp;gt; Click on CREATE SERVICE ACCOUNT
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ugq_wFf_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikb4jdw0pgf35uvxf4cz.jpg" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Give your new service account any name you want and click CREATE&lt;/li&gt;
&lt;li&gt;Add the following roles to your service account by clicking Select Role input under task number 2&lt;/li&gt;
&lt;li&gt;Cloud Build Service Agent&lt;/li&gt;
&lt;li&gt;Click Create then click Done to add the account.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--shfOdUIN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sse7hrlpzsezhw6no3no.jpg" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Generate a credential file for this account by navigating to the newly created service account &amp;gt; Keys &amp;gt; Click on Add Key &amp;gt; Create New Key. Select JSON and click CREATE
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lPr1d7sB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/byg0btv07j354147jg58.jpg" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Setup Gitlab CICD variables&lt;/strong&gt;&lt;br&gt;
In this step, we'll create variables that we'll use in our code. One for the GCP Project ID and another for the Service Account we created earlier&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Navigate to the project repository on Gitlab &amp;gt; Settings &amp;gt; CI/CD&lt;/li&gt;
&lt;li&gt;To add a variable, under the Variables section, click the Expand button and click on Add Variable
We need to add two variables, one names GCP_PROJECT_ID with the value of our GCP Project ID and the other named GCP_SERVICE_ACCOUNT for the content of the JSON we downloaded earlier
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RlxatMnS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01ijlhysfoenyxljfuo6.jpg" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WJFsVr7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ldxultn8bj3k19e4745.jpg" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Setup Application code&lt;/strong&gt;&lt;br&gt;
We need to configure our code to connect to Gitlab CI/CD. We'll also use Docker to containerize our application so it runs the same across multiple platforms.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We've added a Dockerfile in our application that will run on PORT 8080, which is Google Cloud Run's default port&lt;/li&gt;
&lt;li&gt;We've also added a .gitlab-ci.yml file which is the file the triggers our &lt;a href="https://docs.gitlab.com/ee/ci/quick_start/index.html"&gt;CI/CD pipeline on Gitlab&lt;/a&gt;
*
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# File: .gitlab-ci.yml
variables:
  SERVICE_NAME: "myHelloWorldApp"

deploy:
  stage: deploy
  only:
    - master # This pipeline stage will run on this branch alone

  image: google/cloud-sdk:latest # We'll use Google Cloud SDK for Cloud Run related commands
  script:
    - echo $GCP_SERVICE_ACCOUNT &amp;gt; gcloud-service-key.json # Save Google cloud contents in a temporary json file
    - gcloud auth activate-service-account --key-file gcloud-service-key.json # Activate your service account
    - gcloud auth configure-docker # Configure docker environment
    - gcloud config set project $GCP_PROJECT_ID #Set the GCP Project ID to the variable name
    - gcloud builds submit --tag gcr.io/$GCP_PROJECT_ID/$SERVICE_NAME #Run the gcloud build command to build our image
    - gcloud run deploy interaction --image gcr.io/$GCP_PROJECT_ID/$SERVICE_NAME --region=us-east4 --platform managed --allow-unauthenticated # Run the gcloud run deploy command to deploy our new service
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace the SERVICE_NAME value with the desired name for your application and save the changes.&lt;/p&gt;

&lt;p&gt;At the end of the file, we're running the commands &lt;a href="https://cloud.google.com/run/docs/building/containers"&gt;gcloud build&lt;/a&gt; and &lt;a href="https://cloud.google.com/run/docs/deploying"&gt;gcloud run deploy&lt;/a&gt; to build and deploy our application respectively.&lt;/p&gt;

&lt;p&gt;Push your changes to the remote Gitlab repository and watch as your new baby is created.&lt;/p&gt;

&lt;p&gt;To monitor the progress of your deployment on Gitlab navigate to CI/CD &amp;gt; Pipelines and click on the latest job.&lt;br&gt;
To see your new application on Cloud Run, navigate to GCP &amp;gt; Cloud Run and search for the name of the service&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cERoaUbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3wtnne0vnv6p76aoxn4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cERoaUbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3wtnne0vnv6p76aoxn4.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Join Us To Discuss Features of GitHub and Open Source</title>
      <author>Christina Gorton</author>
      <pubDate>Fri, 07 May 2021 19:59:25 +0000</pubDate>
      <link>https://dev.to/devteam/join-us-to-discuss-features-of-github-and-open-source-4o3e</link>
      <guid>https://dev.to/devteam/join-us-to-discuss-features-of-github-and-open-source-4o3e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#twitch"&gt;
  &lt;/a&gt;
  Twitch 👾
&lt;/h2&gt;

&lt;p&gt;Are you participating in the &lt;a href="https://dev.to/devteam/join-us-for-the-first-dev-community-bug-smash-3plm"&gt;DEV Community Bug Smash&lt;/a&gt;? Are you interested in contributing to other open source projects? Does GitHub confuse you?&lt;/p&gt;

&lt;p&gt;Nick Taylor and I will be on the &lt;a href="https://www.twitch.tv/thepracticaldev"&gt;Practical DEV Twitch&lt;/a&gt; stream Wednesday, May 12th 1pm ET(5pm UTC) to talk about GitHub and open source. &lt;/p&gt;

&lt;p&gt;We will discuss features you might not know exist, best practices, contributing to a project, and more.&lt;/p&gt;

&lt;p&gt;If you have questions about open source or GitHub come hang out with us and ask ALL your questions live. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bug-smash"&gt;
  &lt;/a&gt;
  Bug Smash 🐛
&lt;/h2&gt;

&lt;p&gt;If you are interested in participating in the Bug Smash event we still have several bugs ready for you to smash! &lt;/p&gt;

&lt;p&gt;You can check out the full list of bugs in our repo labeled &lt;a href="https://github.com/forem/forem/labels/bug%20smash"&gt;&lt;code&gt;bug smash&lt;/code&gt; here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Accessibility and/or Frontend:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/13505"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Skip links are not the first focused element on internal navigation
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#13505&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/aitchiss"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--gKQDnp6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/20773163%3Fv%3D4" alt="aitchiss avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/aitchiss"&gt;aitchiss&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/13505"&gt;&lt;time&gt;Apr 26, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      

&lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Under #1153 we added skip links to all pages in the app. A skip link should be the first element focused on a page when the user presses the Tab key - however, this is only the case in a Forem if you land directly on a URL, and not if you navigate internally, e.g. by a link click.&lt;/p&gt;
&lt;p&gt;There are several strategies available to managing focus on route change, but I would suggested the approach Marcy Sutton has written about following user testing with Fable: &lt;a href="https://www.gatsbyjs.com/blog/2019-07-11-user-testing-accessible-client-routing/" rel="nofollow"&gt;What we learned from user testing of accessible client-side routing techniques with Fable Tech Labs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The recommendation in that article is to send focus immediately to the skip link on the new page. We will need to experiment with &lt;code&gt;:focus-visible&lt;/code&gt; to ensure that for users who navigated by mouse click, the skip link isn't visible. If this isn't possible, I think an acceptable fallback would be to focus an empty element directly before the skip link, so that once on the new page, the skip link is the first item focused on Tab press.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Load the home page, and press Tab. You should see the skip link appear&lt;/li&gt;
&lt;li&gt;Activate the skip link by clicking or pressing Enter&lt;/li&gt;
&lt;li&gt;Select a post using the Tab key and press enter to view it&lt;/li&gt;
&lt;li&gt;On the new page, press Tab again&lt;/li&gt;
&lt;li&gt;Notice that the skip link is not the first item focused, and if you want to get to the main post content you have to press Tab multiple more times&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I select an article by keyboard on the home page&lt;/li&gt;
&lt;li&gt;On the new page the skip link is visible and focused&lt;/li&gt;
&lt;li&gt;If I repeat these actions but use the mouse, the skip link is not visible when I arrive on the new page&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/13505"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/13195"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Modal appears under the navbar
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#13195&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/aurelieverrot"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KBy2XoLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/50857179%3Fv%3D4" alt="aurelieverrot avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/aurelieverrot"&gt;aurelieverrot&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/13195"&gt;&lt;time&gt;Mar 30, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The modal triggered by the three dots on the left of an article appears stuck under the navbar of the website, it is not readable entirely.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After submitting an article but before publishing.
Click on the three dots on the top left of the article.
The modal will show up but a part of it is hidden behind the navbar&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The modal should appear entirely to see all the links.  It can appear under the navbar, or on top of it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/50857179/113064409-c6eed080-916b-11eb-80a0-9425a733ac65.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eIWvzyaP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/50857179/113064409-c6eed080-916b-11eb-80a0-9425a733ac65.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Desktop (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS, version: MacOS Catalina 10.15.7&lt;/li&gt;
&lt;li&gt;Browser, version: Chrome Version 88.0.4324.192 (Official Build) (x86_64)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Additional context&lt;/strong&gt;
button id="article-show-more-button"&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/13195"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Podcast:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/13667"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        "Follow" text missing from Podcast Liquid tag display. 
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#13667&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/cmgorton"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wm5awArh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/21039864%3Fv%3D4" alt="cmgorton avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/cmgorton"&gt;cmgorton&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/13667"&gt;&lt;time&gt;May 05, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When using the podcast liquid tag in an article the button that should have "Follow" no longer displays the text. I tested this with several podcasts and none of them display the "Follow" text.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to the editor to create a new post.&lt;/li&gt;
&lt;li&gt;Use the podcast liquid tag to render any of the podcasts on DEV &lt;code&gt;{% podcast url-for-episode-here %}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;click preview to preview the liquid tag&lt;/li&gt;
&lt;li&gt;Scroll down to the rendered podcast liquid tag; it will be displayed with an empty button that should contain "Follow"&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;
Follow text inside of the empty button&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;
&lt;a href="https://user-images.githubusercontent.com/21039864/117168445-631c8080-ad85-11eb-8d22-2470f1704451.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KfRD2t4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21039864/117168445-631c8080-ad85-11eb-8d22-2470f1704451.png" alt="Screen Shot 2021-05-05 at 9 30 24 AM"&gt;&lt;/a&gt;
&lt;a href="https://user-images.githubusercontent.com/21039864/117168460-657eda80-ad85-11eb-8e49-c457f8feb6cd.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fjxuRMLO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21039864/117168460-657eda80-ad85-11eb-8e49-c457f8feb6cd.png" alt="Screen Shot 2021-05-05 at 9 30 57 AM"&gt;&lt;/a&gt;
&lt;a href="https://user-images.githubusercontent.com/21039864/117168469-6879cb00-ad85-11eb-8f81-00bc5a6c2fe4.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uCUOudBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21039864/117168469-6879cb00-ad85-11eb-8f81-00bc5a6c2fe4.png" alt="Screen Shot 2021-05-05 at 9 31 35 AM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here you can see the text is not rendered at all in the HTML
&lt;a href="https://user-images.githubusercontent.com/21039864/117168477-6a438e80-ad85-11eb-91bf-bc48db140c46.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lwtP6Z1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21039864/117168477-6a438e80-ad85-11eb-91bf-bc48db140c46.png" alt="Screen Shot 2021-05-05 at 9 33 59 AM"&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/13667"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/8757"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Podcast episodes not processing HTML
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#8757&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/benhalpern"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Btd6rDfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/3102842%3Fv%3D4" alt="benhalpern avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/benhalpern"&gt;benhalpern&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/8757"&gt;&lt;time&gt;Jun 17, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;code&gt;processed_html&lt;/code&gt; for recent podcast episodes is &lt;code&gt;nil&lt;/code&gt;.... The &lt;code&gt;body&lt;/code&gt; which is the raw content returned from the RSS, is present. So something is wrong with our pipeline.&lt;/p&gt;
&lt;p&gt;Example...&lt;/p&gt;
&lt;p&gt;&lt;a href="https://dev.to/devdiscuss/s1-e6-little-known-productivity-tools-big-productivity-gains" rel="nofollow"&gt;https://dev.to/devdiscuss/s1-e6-little-known-productivity-tools-big-productivity-gains&lt;/a&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/8757"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Miscellaneous:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/13194"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Article `date_time` validation seems to be about one hour ahead
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#13194&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/cognivore"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--pHSYwpFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/66186054%3Fv%3D4" alt="cognivore avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/cognivore"&gt;cognivore&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/13194"&gt;&lt;time&gt;Mar 30, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;While importing from RSS, if the time is set to approximately current (for example it's 22:00 UTC, and &lt;code&gt;date:&lt;/code&gt; is getting set to &lt;code&gt;21:57&lt;/code&gt;), dev.to deployment won't accept the post.&lt;/p&gt;
&lt;p&gt;A significant reduction in time should be applied for the post to be posted. For example, &lt;code&gt;20:57 UTC&lt;/code&gt; shall work.&lt;/p&gt;
&lt;p&gt;Expected behaviour: dev.to deployment accepts the post.&lt;/p&gt;
&lt;p&gt;Post in question: &lt;a href="https://dev.to/doma/parser-combinators-in-rust-1f2e" rel="nofollow"&gt;https://dev.to/doma/parser-combinators-in-rust-1f2e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A 10 second summary: &lt;a href="https://www.youtube.com/watch?v=4ddiTSWtwB8" rel="nofollow"&gt;https://www.youtube.com/watch?v=4ddiTSWtwB8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to dev.to/settings/extensions&lt;/li&gt;
&lt;li&gt;Enter RSS feed like &lt;a href="https://doma.dev/atom.xml" rel="nofollow"&gt;https://doma.dev/atom.xml&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Click Save Feed Settings&lt;/li&gt;
&lt;li&gt;Choose a post to publish, for example "Parser combinators in Rust"&lt;/li&gt;
&lt;li&gt;Click "Edit"&lt;/li&gt;
&lt;li&gt;Change time to current minus three minutes, make sure to keep the time zone intact&lt;/li&gt;
&lt;li&gt;Click "Save"&lt;/li&gt;
&lt;li&gt;Get confusing error actually advertising wrong time format!&lt;/li&gt;
&lt;li&gt;Change the time to current minus one hour and three minutes, make sure to keep the time zone intact&lt;/li&gt;
&lt;li&gt;Click "Save"&lt;/li&gt;
&lt;li&gt;Now the post saves, even though both attempts were valid&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Expected behaviour: dev.to deployment accepts the post when we click "Save" the first time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=4ddiTSWtwB8" rel="nofollow"&gt;https://www.youtube.com/watch?v=4ddiTSWtwB8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Desktop (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS, version: Linux, Windows&lt;/li&gt;
&lt;li&gt;Browser, version: Firefox&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Smartphone (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Device: NAN&lt;/li&gt;
&lt;li&gt;OS, version: NAN&lt;/li&gt;
&lt;li&gt;Browser, version: NAN&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Additional context&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ditto&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/13194"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/6586"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Tag "taggings_count" are not always updated correctly
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#6586&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/rhymes"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--b29X-Z_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/146201%3Fv%3D4" alt="rhymes avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/rhymes"&gt;rhymes&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/6586"&gt;&lt;time&gt;Mar 11, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      

&lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Each tag has an associated &lt;code&gt;taggings_count&lt;/code&gt; which contains the number of items they are associated with (in our case either articles or listings).&lt;/p&gt;
&lt;p&gt;The problem lies in the fact that some of these counts are incorrect in the DB.&lt;/p&gt;
&lt;p&gt;I found this out by playing with the Tags API which returns tags sorted by &lt;code&gt;taggings_count&lt;/code&gt; in descending order&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;archlinux&lt;/code&gt; according to the API - &lt;a href="https://dev.to/api/tags" rel="nofollow"&gt;https://dev.to/api/tags&lt;/a&gt; - is the third most used tag but it's very unlikely that is true. Its tag page - &lt;a href="https://dev.to/t/archlinux" rel="nofollow"&gt;https://dev.to/t/archlinux&lt;/a&gt; - lists 50 articles and even taking into account all listings it might have been used in, it doesn't add up&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/api/tags?per_page=15" rel="nofollow"&gt;https://dev.to/api/tags?per_page=15&lt;/a&gt; shows that &lt;code&gt;devops&lt;/code&gt; is more popular than &lt;code&gt;showdev&lt;/code&gt; but &lt;a href="https://dev.to/t/devops" rel="nofollow"&gt;devops page&lt;/a&gt; contains 2917 articles, &lt;a href="https://dev.to/t/showdev" rel="nofollow"&gt;showdev page&lt;/a&gt; contains 3110. Again, I don't think there are enough listings tagged with &lt;code&gt;devops&lt;/code&gt; to account for the difference&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thus, the bug.&lt;/p&gt;
&lt;p&gt;This counter is managed by automatically by the &lt;a href="https://github.com/mbleigh/acts-as-taggable-on"&gt;acts-as-taggable-on&lt;/a&gt; gem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I'd expect the counter to reflect the correct number of items that have been tagged with it.&lt;/p&gt;
&lt;p&gt;I see two possible explanations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;there's an error in our setup, in respect to the &lt;a href="https://github.com/mbleigh/acts-as-taggable-on#usage"&gt;usage guide&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;it has something to do with tag aliasing (?)&lt;/li&gt;
&lt;li&gt;there's a bug in the gem itself. I found a few issue tickets that might point us in this direction:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mbleigh/acts-as-taggable-on/issues/929"&gt;https://github.com/mbleigh/acts-as-taggable-on/issues/929&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mbleigh/acts-as-taggable-on/issues/947"&gt;https://github.com/mbleigh/acts-as-taggable-on/issues/947&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/6586"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/6417"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Incomplete surrogate-key cache invalidation logic
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#6417&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/benhalpern"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Btd6rDfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/3102842%3Fv%3D4" alt="benhalpern avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/benhalpern"&gt;benhalpern&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/6417"&gt;&lt;time&gt;Mar 02, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;Currently we user surrogate keys to determine when certain endpoints should have their caches cleared, such as an article API endpoint like this...&lt;/p&gt;
&lt;p&gt;&lt;code&gt;set_surrogate_key_header Article.table_key, @articles.map(&amp;amp;:record_key)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And then we call &lt;code&gt;article.purge&lt;/code&gt; which magically makes any endpoint with that article's &lt;code&gt;record_key&lt;/code&gt; have its edge cache expire.&lt;/p&gt;
&lt;p&gt;More on surrogate keys...&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.fastly.com/en/guides/getting-started-with-surrogate-keys" rel="nofollow"&gt;https://docs.fastly.com/en/guides/getting-started-with-surrogate-keys&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The issue with the above logic is that a &lt;em&gt;new&lt;/em&gt; article which should become part of that endpoint will not flush its cache if created. So it will not show up on that endpoint until another article which fits within the above &lt;code&gt;@articles&lt;/code&gt; is purged. This makes it kind of random to find out when it will be included.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;article.purge&lt;/code&gt; is a magic method to create a purge ping which uses the appropriate surrogate header.&lt;/p&gt;
&lt;p&gt;A solution for this could be a surrogate key like this...&lt;/p&gt;
&lt;p&gt;&lt;code&gt;set_surrogate_key_header Article.table_key, "tag-index-endpoint-#{tag}", @articles.map(&amp;amp;:record_key)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and then we make a specific purge call when a new article should purge it like &lt;code&gt;purge("tag-index-endpoint-#{tag}"&lt;/code&gt; when an article is created.&lt;/p&gt;
&lt;p&gt;Our current situation isn't causing any radically wrong behavior and the "random" purging is working okay but we should look into this as we go about bigger changes here.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/6417"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>devbugsmash</category>
      <category>opensource</category>
      <category>forem</category>
      <category>contributorswanted</category>
    </item>
    <item>
      <title>Rethinking Jupyter Interactive Documentation</title>
      <author>Matthias Bussonnier</author>
      <pubDate>Fri, 07 May 2021 19:45:38 +0000</pubDate>
      <link>https://dev.to/quansightlabs/rethinking-jupyter-interactive-documentation-4okm</link>
      <guid>https://dev.to/quansightlabs/rethinking-jupyter-interactive-documentation-4okm</guid>
      <description>&lt;p&gt;Jupyter Notebook first release was 8 years ago – under the IPython Notebook name at the time. Even if notebooks were not invented by Jupyter; they were definitely democratized by it. Being Web powered allowed development of many changes in the Datascience world. Objects now often expose rich representation; from Pandas dataframes with as html tables, to more recent &lt;a href="https://github.com/scikit-learn/scikit-learn/pull/14180"&gt;Scikit-learn model&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today I want to look into a topic that has not evolved much since, and I believe&lt;br&gt;
could use an upgrade. Accessing interactive Documentation when in a Jupyter session, and what it could become. At the end I'll link to my current prototype if you are adventurous.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-current-limitation-for-users"&gt;
  &lt;/a&gt;
  The current limitation for users
&lt;/h1&gt;

&lt;p&gt;The current documentation of IPython and Jupyter come in a few forms, but mostly have the same limitation. The typical way to reach for help is to use the &lt;code&gt;?&lt;/code&gt; operator. Depending on the frontend you are using it will bring a pager, or a panel that will display some information about the current object.&lt;/p&gt;

&lt;p&gt;It can show some information about the current object (signature, file, sub/super classes) and the raw DocString of the object.&lt;/p&gt;

&lt;p&gt;You can scroll around but that's about it whether in terminal or Notebooks.&lt;/p&gt;

&lt;p&gt;Compare it to the same documentation on the NumPy website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--myY0Vs_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://labs.quansight.org/images/2021/05/numpy-linspace-compare.png" class="article-body-image-wrapper"&gt;&lt;img alt="numpy.linspace on numpy.org" src="https://res.cloudinary.com/practicaldev/image/fetch/s--myY0Vs_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://labs.quansight.org/images/2021/05/numpy-linspace-compare.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the left is the documentation for NumPy when visiting &lt;a href="https://numpy.org"&gt;the NumPy website&lt;/a&gt;. Let's call that "rendered documentation". On the right what you get in Jupyter Lab or in the IPython or regular Python REPL, let's cal that "help documentation" since it is typically reached via &lt;code&gt;identifier?&lt;/code&gt; or &lt;code&gt;help(identifier)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Compared to rendered documentation, the help documentation is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hard to read,&lt;/li&gt;
&lt;li&gt;Has no navigation,&lt;/li&gt;
&lt;li&gt;RST Directives have not been interpreted,&lt;/li&gt;
&lt;li&gt;No inline graphs, no rendered math.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is also no access to non-docstring based documentation, &lt;strong&gt;no narrative&lt;/strong&gt;, &lt;strong&gt;no tutorials&lt;/strong&gt;, &lt;strong&gt;no image gallery or examples&lt;/strong&gt;, no search, no syntax highlighting, no way to interact or modify documentation to test effects of parameters.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#limitation-for-authors"&gt;
  &lt;/a&gt;
  Limitation for authors
&lt;/h1&gt;

&lt;p&gt;Due to Jupyter and IPython limitations to display documentation I believe authors are often contained to document functions.&lt;/p&gt;

&lt;p&gt;Syntax in docstrings is often kept simple for readability, this first version is&lt;br&gt;
often preferred:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;You can use ``np.einsum('i-&amp;gt;', a)`` ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the longer form, which makes the reference into a link when viewing rendered&lt;br&gt;
documentation, it is difficult to read when shown as help documentation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;You can use :py:func:`np.einsum('i-&amp;gt;', a) &amp;lt;numpy.einsum&amp;gt;` ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This also leads to long discussions about which syntax to use in advanced areas, like formulas in &lt;a href="https://github.com/sympy/sympy/issues/14964"&gt;Sympy's docstrings&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Many projects have to implement dynamic docstrings; for example to include all the parameters a function or class would pass down using &lt;code&gt;**kwargs&lt;/code&gt; (search the matplotlib source code for &lt;code&gt;_kwdoc&lt;/code&gt; for example, or look at the &lt;code&gt;pandas.DataFrame&lt;/code&gt; implementation).&lt;/p&gt;

&lt;p&gt;This can make it relatively difficult for authors and contributors to properly maintain and provide comprehensive docs.&lt;/p&gt;

&lt;p&gt;I'm not sure I can completely predict all the side effects this has on how library maintainers write docs; but I believe there is also a strong opportunity for a tool to help there. See for example &lt;a href="https://github.com/Carreau/velin"&gt;vélin&lt;/a&gt; which attempts to auto reformat and fix common NumPyDoc's format mistakes and&lt;br&gt;
typos – but that's a subject of a future post.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#stuck-between-a-rock-and-a-hard-place"&gt;
  &lt;/a&gt;
  Stuck between a Rock and a Hard place
&lt;/h1&gt;

&lt;p&gt;While Sphinx and related projects are great at offering hosted HTML documentation, extensive usage of those makes interactive documentation harder to consume.&lt;/p&gt;

&lt;p&gt;While it is possible to &lt;a href="https://github.com/spyder-ide/docrepr"&gt;run Sphinx on the fly when rendering docstrings&lt;/a&gt;, most Sphinx features only work when building a full project, with the proper configuration and extension, and can be computationally intensive. This makes running Sphinx locally impractical.&lt;/p&gt;

&lt;p&gt;Hosted websites often may not reflect the locally installed version of the libraries and require careful linking, deprecation and narrative around platform or version specific features.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#this-is-fixable"&gt;
  &lt;/a&gt;
  This is fixable
&lt;/h1&gt;

&lt;p&gt;For the past few months I've been working on rewriting how IPython (and hence Jupyter) can display documentation. It works both in terminal (IPython) and browser context (notebook, JupyterLab, Spyder) with proper rendering, and currently understands most directives; it could be customized to understand any new ones:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_cdWPNWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://labs.quansight.org/images/2021/05/papyri-1.png" class="article-body-image-wrapper"&gt;&lt;img alt="papyri1" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_cdWPNWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://labs.quansight.org/images/2021/05/papyri-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Above is the (terminal) documentation of &lt;code&gt;scipy.polynomial.lagfit&lt;/code&gt;, see how the single backticks are properly understood and refer to known parameters, it detected that  &lt;code&gt;`n`&lt;/code&gt; is incorrect as it should have double backticks; notice the rendering of the math even in terminal.&lt;/p&gt;

&lt;p&gt;For that matter technically this does not care as to whether the DocString is written in RST or Markdown; though I need to implement the latter part. I believe though that some maintainers would be quite happy to use Markdown, the syntax of which more users are familiar with.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xf1mbhoR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://labs.quansight.org/images/2021/05/papyri-nav.gif" class="article-body-image-wrapper"&gt;&lt;img alt="papyri navigation" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xf1mbhoR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://labs.quansight.org/images/2021/05/papyri-nav.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It supports navigation – here in a terminal – where clicking or pressing enter on a link would bring you to the target page. In the above gif you can see that many tokens of the code example are also automatically type-inferred (thanks &lt;a href="https://github.com/davidhalter/jedi"&gt;Jedi&lt;/a&gt;), and can also be clicked on to navigate to their corresponding page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5nu6i5hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://labs.quansight.org/images/2021/05/papyri-terminal-fig.png" class="article-body-image-wrapper"&gt;&lt;img alt="papyri terminal-fig" src="https://res.cloudinary.com/practicaldev/image/fetch/s--5nu6i5hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://labs.quansight.org/images/2021/05/papyri-terminal-fig.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Images are included, even in the terminal when they are not inline but replaced by a button to open them in your preferred viewer (see the &lt;code&gt;Open with quicklook&lt;/code&gt; in the above screenshot).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-future"&gt;
  &lt;/a&gt;
  The future
&lt;/h1&gt;

&lt;p&gt;I'm working on a number of other features, in particular:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rendering of narrative docs – for which I have a prototype,&lt;/li&gt;
&lt;li&gt;automatic indexing of all the figures and plots –  working but slow right now,&lt;/li&gt;
&lt;li&gt;proper cross-library referencing and indexing without the need for intersphinx.
For example, it is possible from the &lt;code&gt;numpy.linspace&lt;/code&gt; page to see all pages that
reference it, or use &lt;code&gt;numpy.linspace&lt;/code&gt; in their example section
(see previous image).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And many others, like showing a graph of the local references between functions, search, and preference configurability. I think this could also support many other desirable features, like user preferences (hide/show type annotation, deprecated directives, and custom color/syntax highlighting) - though I haven't started working on these. I do have some ideas on how this could be used to provide translations as well.&lt;/p&gt;

&lt;p&gt;Right now, is it not as fast and efficient as I would like to – though it's faster than running Sphinx on the fly – but requires some ahead of time processing. And it crashes in many places; it can render most of the documentation of SciPy, NumPy, xarray, IPython and scikit-image.&lt;/p&gt;

&lt;p&gt;I encourage you to think about what features you are missing when using documentation from within Jupyter and let me know. I hope this could become a nice addition to Sphinx when consulting documentation from within Jupyter.&lt;/p&gt;

&lt;p&gt;For now I've submitted a &lt;a href="https://docs.google.com/document/d/1hk-Ww7pUwnoHINNhDeP9UOPvNEemAFe-pohK5dCtZPs/edit?usp=sharing"&gt;Letter of intent to CZI EOSS 4&lt;/a&gt; in an attempt to get some of that work funded to land in IPython, and if you have any interest in contributing or want something like that for your library, feel free to reach out.&lt;/p&gt;

&lt;p&gt;You can find the repository &lt;a href="https://github.com/Carreau/papyri"&gt;on my GitHub account&lt;/a&gt;, it's still in pre-alpha stage. It is still quite unstable with too many hard coded values to my taste, and needs some polish to be considered usable for production. I've focused my effort for now mostly on terminal rendering – a Jupyter notebook or JupyterLab extension would be welcome. So if you are adventurous and like to work from the cutting (or even bleeding) edge, please feel free to try it out and open issues/pull request.&lt;/p&gt;

&lt;p&gt;It also needs to be better documented (pun intended), I'm hoping to use papyri itself to document papyri; but it needs to be a bit more mature for that.&lt;/p&gt;

&lt;p&gt;Stay tuned for more news, I'll try to explain how it works in more detail in a follow-up post, and discuss some of the advantages (and drawbacks) this project has.&lt;/p&gt;

</description>
      <category>python</category>
      <category>opensource</category>
      <category>datascience</category>
      <category>jupyter</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 07 May 2021 19:24:59 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-nbe</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-nbe</guid>
      <description>&lt;p&gt;Hey there!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking back on your week — what was something you're proud of?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Starting a new book ... or whatever else might spark joy ❤️ &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Happy Friday!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/EktbegF3J8QIo/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/EktbegF3J8QIo/giphy.gif" alt="Pokemon party"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
  </channel>
</rss>
