<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>JavaScript: Date Cheat Sheet</title>
      <author>Jenuel Oras Ganawed</author>
      <pubDate>Tue, 16 Feb 2021 05:30:12 +0000</pubDate>
      <link>https://dev.to/brojenuel/javascript-date-cheat-sheet-1498</link>
      <guid>https://dev.to/brojenuel/javascript-date-cheat-sheet-1498</guid>
      <description>&lt;h3&gt;
  &lt;a href="#cheat-sheet-bookmark" class="anchor"&gt;
  &lt;/a&gt;
  CHEAT SHEET BOOKMARK
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#intro"&gt;INTRO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#declare"&gt;Declaring/Creating Date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getfunctions"&gt;GET FUNCTIONS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setfunctions"&gt;SET FUNCTIONS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dateconvert"&gt;Date Convertions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;Most of the time when we are saving data to our databases, one of the most types we always use is date types. So as a developer we should atleast know how we can manipulate dates. So in this articles I am showing how you can manipulate dates in JavaScript.&lt;/p&gt;

&lt;p&gt;For more like this hit &lt;strong&gt;&lt;em&gt;follow&lt;/em&gt;&lt;/strong&gt;, and if you want to show support by donating, click this link: &lt;a href="https://www.buymeacoffee.com/BroJenuel"&gt;BUYMECOFFEE&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#declaring-dates" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a id="declare"&gt;&lt;/a&gt;Declaring Dates
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// NEW DATE OBJECT&lt;/span&gt;
    &lt;span class="c1"&gt;// new Date() - will create a new Date Object in a current date&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Tue Feb 16 2021 12:04:01 GMT+0800 (Philippine Standard Time)&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;date2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30 GMT-02:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// you can pass a date inside a parameter&lt;/span&gt;

&lt;span class="c1"&gt;// DATE NOW FUNCTION&lt;/span&gt;
    &lt;span class="c1"&gt;//Date.now - Returns the numeric value corresponding to the current time&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;//1613449122179 &lt;/span&gt;

&lt;span class="c1"&gt;// UTC DATE&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;utcDate1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UTC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;utcDate2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UTC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;utcDate1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUTCString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Fri, 02 Feb 1996 03:04:05 GMT&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;utcDate2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUTCString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Sun, 31 Dec 1899 00:00:00 GMT&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#get-functions" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a id="getfunctions"&gt;&lt;/a&gt;Get Functions
&lt;/h2&gt;

&lt;p&gt;To Get specific data in a date you can check this sample bellow code snippet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Get Current Date&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 16&lt;/span&gt;

&lt;span class="c1"&gt;// Get Day&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDay&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 1 - Monday&lt;/span&gt;

&lt;span class="c1"&gt;//Get Year&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 2021&lt;/span&gt;

&lt;span class="c1"&gt;//Get Hours&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hours&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getHours&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 14&lt;/span&gt;

&lt;span class="c1"&gt;// Get Minutes&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;minute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMinutes&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 48&lt;/span&gt;

&lt;span class="c1"&gt;// Get Seconds&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSeconds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 29&lt;/span&gt;

&lt;span class="c1"&gt;// Get Time - method returns the number of milliseconds&lt;/span&gt;
    &lt;span class="c1"&gt;// NOTE: _getTime() always uses UTC for time representation.&lt;/span&gt;
    &lt;span class="c1"&gt;// For example, a client browser in one timezone,&lt;/span&gt;
    &lt;span class="c1"&gt;// getTime() will be the same as a client browser in any other timezone._&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 14254782000&lt;/span&gt;

&lt;span class="c1"&gt;// Get TimeZone offset - method returns the time zone difference, in minutes, from current locale (host system settings) to UTC.&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;time_zone_offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTimezoneOffset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//-480&lt;/span&gt;

&lt;span class="c1"&gt;// ___________________&lt;/span&gt;
&lt;span class="c1"&gt;// Getting UTC DATES&lt;/span&gt;
&lt;span class="c1"&gt;// ____________________&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;December 31, 1975, 23:15:30 GMT+11:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30 GMT-11:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Get UTC date&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCDate&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 19&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCDate&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 20&lt;/span&gt;

&lt;span class="c1"&gt;// get UTC day&lt;/span&gt;
    &lt;span class="c1"&gt;// Tuesday&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCDay&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 2&lt;/span&gt;
    &lt;span class="c1"&gt;// Wednesday&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCDay&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 3&lt;/span&gt;

&lt;span class="c1"&gt;// get UTC Year&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCFullYear&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 1975&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCFullYear&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 1976&lt;/span&gt;

&lt;span class="c1"&gt;// get UTC Hours&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCHours&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 12&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCHours&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 10&lt;/span&gt;

&lt;span class="c1"&gt;// Get UTC Miliseconds&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;exampleDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2018-01-02T03:04:05.678Z&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2 January 2018, 03:04:05.678 (UTC)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exampleDate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCMilliseconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 678&lt;/span&gt;

&lt;span class="c1"&gt;// GET UTC Minutes&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1 January 2000 03:15:30 GMT+07:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1 January 2000 03:15:30 GMT+03:30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCMinutes&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// 31 Dec 1999 20:15:30 GMT// expected output: 15&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCMinutes&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// 31 Dec 1999 23:45:30 GMT// expected output: 45&lt;/span&gt;

&lt;span class="c1"&gt;// GET UTC MONTHS&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;December 31, 1975, 23:15:30 GMT+11:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;December 31, 1975, 23:15:30 GMT-11:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// December&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCMonth&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="c1"&gt;// expected output: 11&lt;/span&gt;
    &lt;span class="c1"&gt;// January&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCMonth&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="c1"&gt;// expected output: 0&lt;/span&gt;

&lt;span class="c1"&gt;// GET UTC SECONS&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;moonLanding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;July 20, 1969, 20:18:04 UTC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;moonLanding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCSeconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 4&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#set-functions" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a id="setfunctions"&gt;&lt;/a&gt; SET FUNCTIONS
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// SET DATE&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 24&lt;/span&gt;

    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Only 31 days in August!&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 1&lt;/span&gt;

&lt;span class="c1"&gt;// SET FULL YEAR&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setFullYear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1969&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 1969&lt;/span&gt;

    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setFullYear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 0&lt;/span&gt;

&lt;span class="c1"&gt;// SET HOURS&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Tue Aug 19 1975 20:15:30 GMT+0200 (CEST)&lt;/span&gt;
    &lt;span class="c1"&gt;// (note: your timezone may vary)&lt;/span&gt;

    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Tue Aug 19 1975 20:21:22 GMT+0200 (CEST)&lt;/span&gt;

&lt;span class="c1"&gt;// SET MILLISECONDS&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMilliseconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 0&lt;/span&gt;

    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMilliseconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;456&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMilliseconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 456&lt;/span&gt;

&lt;span class="c1"&gt;// SET MINUTES&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMinutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMinutes&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 45&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Tue Aug 19 1975 23:45:30 GMT+0200 (CEST)&lt;/span&gt;
    &lt;span class="c1"&gt;// (note: your timezone may vary)&lt;/span&gt;

&lt;span class="c1"&gt;// SET MONTH&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMonth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 3&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Sat Apr 19 1975 23:15:30 GMT+0100 (CET)&lt;/span&gt;
    &lt;span class="c1"&gt;// (note: your timezone may vary)&lt;/span&gt;

&lt;span class="c1"&gt;// SET SECONDS&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSeconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSeconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 42&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Sat Apr 19 1975 23:15:42 GMT+0100 (CET)&lt;/span&gt;
    &lt;span class="c1"&gt;// (note: your timezone may vary)&lt;/span&gt;

&lt;span class="c1"&gt;// SET TIME&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;July 1, 1999&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;event2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Thu Jul 01 1999 00:00:00 GMT+0200 (CEST)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Thu Jul 01 1999 00:00:00 GMT+0200 (CEST)&lt;/span&gt;
    &lt;span class="c1"&gt;// (note: your timezone may vary)&lt;/span&gt;

&lt;span class="c1"&gt;// _____________&lt;/span&gt;
&lt;span class="c1"&gt;// SET UTC DATES&lt;/span&gt;
&lt;span class="c1"&gt;// _____________&lt;/span&gt;

&lt;span class="c1"&gt;// SET UTC DATE&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30 GMT-3:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCDate&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 20&lt;/span&gt;

    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setUTCDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCDate&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 19&lt;/span&gt;

&lt;span class="c1"&gt;// SET UTC FULL YEAR&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;December 31, 1975 23:15:30 GMT-3:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUTCString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// Thu, 01 Jan 1976 02:15:30 GMT&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCMonth&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 0&lt;/span&gt;

    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setUTCMonth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUTCString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Wed, 01 Dec 1976 02:15:30 GMT&lt;/span&gt;

&lt;span class="c1"&gt;// SET UTC HOURS&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30 GMT-3:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUTCString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Wed, 20 Aug 1975 02:15:30 GMT&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCHours&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 2&lt;/span&gt;

    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setUTCHours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUTCString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Wed, 20 Aug 1975 23:15:30 GMT&lt;/span&gt;

&lt;span class="c1"&gt;// SET UTC MILLISECONDS&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2018-01-24T12:38:29.069Z&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCMilliseconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 69&lt;/span&gt;

    &lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setUTCMilliseconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;420&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCMilliseconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 420&lt;/span&gt;

&lt;span class="c1"&gt;// SET UTC MINUTES&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;December 31, 1975, 23:15:30 GMT+11:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCMinutes&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 15&lt;/span&gt;

    &lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setUTCMinutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCMinutes&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 25&lt;/span&gt;

&lt;span class="c1"&gt;// SET UTC MONTH&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;December 31, 1975 23:15:30 GMT-3:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUTCString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// Thu, 01 Jan 1976 02:15:30 GMT&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCMonth&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 0&lt;/span&gt;

    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setUTCMonth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUTCString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Wed, 01 Dec 1976 02:15:30 GMT&lt;/span&gt;

&lt;span class="c1"&gt;// SET UTC SECONDS&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;December 31, 1975, 23:15:30 GMT+11:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCSeconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 30&lt;/span&gt;

    &lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setUTCSeconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUTCSeconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 39&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#date-convertions" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a id="dateconvert"&gt;&lt;/a&gt; Date Convertions
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Date.now - method returns the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;//1613449122179 &lt;/span&gt;

&lt;span class="c1"&gt;// USING PARSE FUNCTION&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;unixTimeZero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;01 Jan 1970 00:00:00 GMT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;javaScriptRelease&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;04 Dec 1995 00:12:00 GMT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unixTimeZero&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 0&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;javaScriptRelease&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 818035920000&lt;/span&gt;

&lt;span class="c1"&gt;// TO DATE STRING&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1993&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Wed Jul 28 1993 14:39:07 GMT+0200 (CEST)&lt;/span&gt;
    &lt;span class="c1"&gt;// (note: your timezone may vary)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDateString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Wed Jul 28 1993&lt;/span&gt;

&lt;span class="c1"&gt;// TO ISO STRING&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;05 October 2011 14:48 UTC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Wed Oct 05 2011 16:48:00 GMT+0200 (CEST)&lt;/span&gt;
    &lt;span class="c1"&gt;// (note: your timezone may vary)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 2011-10-05T14:48:00.000Z&lt;/span&gt;

&lt;span class="c1"&gt;// TO JSON&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30 UTC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsonDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonDate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 1975-08-19T23:15:30.000Z&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonDate&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toUTCString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Tue, 19 Aug 1975 23:15:30 GMT&lt;/span&gt;

&lt;span class="c1"&gt;// TO LOCAL DATE SCTRING&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UTC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2012&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;long&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;month&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;long&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;day&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;de-DE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Donnerstag, 20. Dezember 2012&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ar-EG&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// expected output: الخميس، ٢٠ ديسمبر، ٢٠١٢&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Thursday, December 20, 2012 (varies according to default locale)&lt;/span&gt;


&lt;span class="c1"&gt;// TO LOCALE STRING&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UTC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2012&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="c1"&gt;// British English uses day-month-year order and 24-hour time without AM/PM&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en-GB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;timeZone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UTC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 20/12/2012, 03:00:00&lt;/span&gt;

    &lt;span class="c1"&gt;// Korean uses year-month-day order and 12-hour time with AM/PM&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ko-KR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;timeZone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UTC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 2012. 12. 20. 오전 3:00:00&lt;/span&gt;

&lt;span class="c1"&gt;// TO LOCAL TIME STRING&lt;/span&gt;
    &lt;span class="c1"&gt;// Depending on timezone, your results will vary&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30 GMT+00:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleTimeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en-US&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 1:15:30 AM&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleTimeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;it-IT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 01:15:30&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleTimeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ar-EG&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// expected output: ١٢:١٥:٣٠ ص&lt;/span&gt;

&lt;span class="c1"&gt;// TO STRING&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Tue Aug 19 1975 23:15:30 GMT+0200 (CEST)&lt;/span&gt;
    &lt;span class="c1"&gt;// (note: your timezone may vary)&lt;/span&gt;

&lt;span class="c1"&gt;// TO TIME STRING&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August 19, 1975 23:15:30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toTimeString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 23:15:30 GMT+0200 (CEST)&lt;/span&gt;
    &lt;span class="c1"&gt;// (note: your timezone may vary)&lt;/span&gt;

&lt;span class="c1"&gt;// TO UTC STRING&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;14 Jun 2017 00:00:00 PDT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUTCString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: Wed, 14 Jun 2017 07:00:00 GMT&lt;/span&gt;

&lt;span class="c1"&gt;// USING VALUE OF FUNCTION&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UTC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 823230245000&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;02 Feb 1996 03:04:05 GMT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// expected output: 823230245000&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>devops</category>
    </item>
    <item>
      <title>The Longterm Benefits of Effective Product Development</title>
      <author>Ben Halpern</author>
      <pubDate>Mon, 15 Feb 2021 22:11:40 +0000</pubDate>
      <link>https://dev.to/ben/the-longterm-benefits-of-effective-product-development-1769</link>
      <guid>https://dev.to/ben/the-longterm-benefits-of-effective-product-development-1769</guid>
      <description>&lt;p&gt;I was reading the description of an upcoming project for our marketing team which started with this phrase...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Usual campaign stuff -- templates, banner, sidebar&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This may seem innocuous, but everything we're now describing as "the usual stuff" used to be highly specialized hardcoded hacks that used to take entire engineering cycles to work on. Now it's just part of the product and can be lumped in as the baseline work. These days it is a task our marketing team can pull off. A year ago it was a big last-minute software project every time.&lt;/p&gt;

&lt;p&gt;Since you're on DEV, you should have some familiarity with what we're talking about. DEV is built on &lt;a href="https://github.com/forem/forem"&gt;Forem&lt;/a&gt; (which was extracted from DEV) and includes functionality for running "campaigns" which is a highly flexible utilization of the site to launch specialized functionality without having to write new code into the core codebase. We use this for contests and partnerships. It's functionality we use consistently, but not too long ago this was a productivity pipe dream.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1rWplgHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgs.xkcd.com/comics/automation_2x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1rWplgHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgs.xkcd.com/comics/automation_2x.png" alt="xkcd automation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This &lt;a href="https://xkcd.com/1319/"&gt;xkcd comic&lt;/a&gt; makes reference to the presumed futility of efforts to automate a certain type of task. It is so often the case that hard software projects &lt;em&gt;not&lt;/em&gt; to result in actual value creation that it is worth celebrating when it does.&lt;/p&gt;

&lt;p&gt;The work to "generalize" this functionality, make it re-usable for us and everyone who runs Forem, is an effort in longterm value creation that is easy to talk about abstractly, but seeing it in action as though taken for granted within our own team is still special. It's not necessarily easy to derive &lt;em&gt;actual&lt;/em&gt; productivity gains from the software we write. There are always tradeoffs. I've worked on a lot of projects which presume to offer actual business value or productivity wins but fail to provide that in practice. It's satisfying to take notice of the times when it does work out.&lt;/p&gt;

&lt;p&gt;A year ago this was a big project with unknown payoff. Now it's just the "usual stuff".&lt;/p&gt;

&lt;p&gt;Shout out to &lt;a class="comment-mentioned-user" href="https://dev.to/ridhwana"&gt;@ridhwana&lt;/a&gt;
 and &lt;a class="comment-mentioned-user" href="https://dev.to/lightalloy"&gt;@lightalloy&lt;/a&gt;
 who did most of the work on this project.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>management</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Implementing Async/Await</title>
      <author>Giovanni Sarciotto</author>
      <pubDate>Mon, 15 Feb 2021 19:33:30 +0000</pubDate>
      <link>https://dev.to/gsarciotto/implementing-async-await-55f</link>
      <guid>https://dev.to/gsarciotto/implementing-async-await-55f</guid>
      <description>&lt;p&gt;On my last &lt;a href="https://dev.to/gsarciotto/generators-in-typescript-4b37"&gt;post&lt;/a&gt; we saw the theory behind generators in JS/TS. In this article I will apply those concepts and show how we can use generators to build something similar to &lt;strong&gt;async/await&lt;/strong&gt;. In fact, &lt;em&gt;async/await&lt;/em&gt; is implemented using generators and promises.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#delving-into-async-with-callbacks" class="anchor"&gt;
  &lt;/a&gt;
  Delving into async with callbacks
&lt;/h1&gt;

&lt;p&gt;First we will show how we can deal with asynchronicity using generators by writing an example with callbacks.&lt;/p&gt;

&lt;p&gt;The idea is as follows. When using callbacks, we pass some function that will be called whenever the async action has finished. So what if we don't call a callback, but instead call &lt;code&gt;next&lt;/code&gt; on some generator? Better yet, what if this generator is the code that called our async function? That way we would have a code that calls some asynchronous process, stays paused while the asynchronous process isn't finished and return its execution whenever it is ready. Check this out:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cOUK83Ym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dvldwnp4jizbycl8ybxw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cOUK83Ym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dvldwnp4jizbycl8ybxw.png" alt="Implementation with callbacks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don't know what is &lt;code&gt;...args&lt;/code&gt; in the implementation above, take a look at &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"&gt;spread syntax&lt;/a&gt;.&lt;br&gt;
We wrap our asynchronous operations with &lt;code&gt;asyncWrapper&lt;/code&gt;. This wrapper just pass a callback to give control back to the generator &lt;code&gt;main&lt;/code&gt; whenever the async process is completed. Notice how our code in main looks totally synchronous. In fact, just looking at &lt;code&gt;main&lt;/code&gt;, we can't assert if there is anything asynchronous at all, although the &lt;code&gt;yield&lt;/code&gt; gives a hint. Also notice how our code is very similar to what it would have been with &lt;code&gt;async/await&lt;/code&gt;, even though we don't use &lt;code&gt;Promises&lt;/code&gt;. This is because we are abstracting away the asynchronous portions from our consuming code &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Using callbacks like above is fine, but there are some problems.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The code feels weird. Why should &lt;code&gt;main&lt;/code&gt; know about &lt;code&gt;asyncWrapper&lt;/code&gt;? &lt;code&gt;main&lt;/code&gt; should be able to just call the async operation and everything should be handled in the background.&lt;/li&gt;
&lt;li&gt;Where would we do error handling? &lt;/li&gt;
&lt;li&gt;What if the asynchronous operations calls the callback multiple times? &lt;/li&gt;
&lt;li&gt;What if we wanted to run multiple async operations in parallel? Since a yield corresponds to a pause in execution, we would need to add some complicated code to decide if when we call &lt;code&gt;next&lt;/code&gt; is it to execute another operation or is it because an asynchronous operation has finished?&lt;/li&gt;
&lt;li&gt;We have the problems that normal callbacks do (callback hell, etc).&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#promises-to-the-rescue" class="anchor"&gt;
  &lt;/a&gt;
  Promises to the rescue
&lt;/h1&gt;

&lt;p&gt;We can solve the problems above utilizing &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;Promises&lt;/a&gt;. We will begin with a simple implementation with only one yield and no error handling and then expand it.&lt;/p&gt;

&lt;p&gt;First we need to make our asynchronous operation &lt;code&gt;addAsync&lt;/code&gt; return a promise, we will deal with the case that it doesn't later.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wGsqXan1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jpn26dpnhypfgbo30wkl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wGsqXan1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jpn26dpnhypfgbo30wkl.png" alt="addAsync with Promises"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To solve 1, we need to change our &lt;em&gt;wrapper&lt;/em&gt; to receive the code that we want to execute, becoming a &lt;em&gt;runner&lt;/em&gt;. This way our &lt;em&gt;runner&lt;/em&gt; does the things it needs and gives control back to our code whenever it is ready, while hiding how anything works from our code. The &lt;em&gt;runner&lt;/em&gt; needs to do essentially two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Initialize our code.&lt;/li&gt;
&lt;li&gt;Take the promise that is yielded to it, wait for its fulfillment and then give control back to our code with the resolved value.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hsMW1czX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zr3itox2mup29o7a3e87.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hsMW1czX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zr3itox2mup29o7a3e87.png" alt="Basic runner implementation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it! The problem 3 from our list is automatically solved whenever we use promises. The full code is the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hMvg2OiK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xchigo3qouuhfu038vb2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hMvg2OiK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xchigo3qouuhfu038vb2.png" alt="Basic implementation with promises"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's walk through the execution.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First we call our &lt;em&gt;runner&lt;/em&gt; with the &lt;code&gt;main&lt;/code&gt; function generator.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;runner&lt;/em&gt; initializes our generator and then calls &lt;code&gt;it.next()&lt;/code&gt;. This gives control to &lt;code&gt;main&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Main executes until the &lt;code&gt;yield&lt;/code&gt;. It yields the return value of &lt;code&gt;addAsync&lt;/code&gt;, which is a promise. This promise is unfulfilled at the moment.&lt;/li&gt;
&lt;li&gt;Now the control is with the &lt;em&gt;runner&lt;/em&gt;. It unwraps the value from the generator yield and gets the promise. It adds a &lt;code&gt;.then&lt;/code&gt; that will pass the value of the fulfilled promise to &lt;code&gt;main&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Whenever the promised is resolved and the &lt;em&gt;runner&lt;/em&gt; gives control to &lt;code&gt;main&lt;/code&gt;, the yield expression evaluates to the resolved value of the promise (5) and continues the execution until the end.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#dealing-with-nonpromises-values" class="anchor"&gt;
  &lt;/a&gt;
  Dealing with non-Promises values
&lt;/h4&gt;

&lt;p&gt;At the moment, our &lt;em&gt;runner&lt;/em&gt; expects to receive a &lt;em&gt;Promise&lt;/em&gt;. However, by the spec, you can await any value, &lt;em&gt;Promise&lt;/em&gt; or not. Fortunately, to solve this is very easy.&lt;/p&gt;

&lt;p&gt;Consider the following synchronous add function:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I2y8jvj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yklr70v9bs1cbwzsit77.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I2y8jvj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yklr70v9bs1cbwzsit77.png" alt="Synchronous add function"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This code crashes our generator, since our generator tries to call a &lt;code&gt;.then&lt;/code&gt; to the yielded value. We can solve this by using &lt;code&gt;Promise.resolve&lt;/code&gt;. &lt;code&gt;Promise.resolve(arg)&lt;/code&gt; copies arg if it is a &lt;em&gt;Promise&lt;/em&gt;, otherwise it wraps arg in a &lt;em&gt;Promise&lt;/em&gt;. So our &lt;em&gt;runner&lt;/em&gt; becomes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--whT9ZRUm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6gkrbw7glebyvl4sqmls.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--whT9ZRUm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6gkrbw7glebyvl4sqmls.png" alt="Runner is now able to deal with non-Promise values"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now our code doesn't crash with non-Promise values:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LOGXTU9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lir8wuy71zma0yqc3go8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LOGXTU9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lir8wuy71zma0yqc3go8.png" alt="Execution with synchronous function"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we run our code with &lt;code&gt;addAsync&lt;/code&gt;, we will get the same behavior as before!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#dealing-with-errors" class="anchor"&gt;
  &lt;/a&gt;
  Dealing with errors
&lt;/h4&gt;

&lt;p&gt;Since we are using &lt;em&gt;Promises&lt;/em&gt;, we can easily get any error/rejection that happens in our asynchronous operations. Whenever a promise rejection occurs, our runner should simply unwrap the rejection reason and give it to the generator to allow for handling. We can do this with the &lt;code&gt;.throw&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uZrjs56n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dg41bq5wnqt6h3u7e9ri.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uZrjs56n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dg41bq5wnqt6h3u7e9ri.png" alt="Error handling example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now not only we add a &lt;code&gt;.then&lt;/code&gt;, but also a &lt;code&gt;.catch&lt;/code&gt; to the yielded &lt;em&gt;Promise&lt;/em&gt; and if a rejection occurs, we throw the reason to &lt;code&gt;main&lt;/code&gt;. Notice that this also handles the case where we are performing a synchronous operation and there is a normal &lt;code&gt;throw&lt;/code&gt;. Since our runner sits below &lt;code&gt;main&lt;/code&gt; in the execution stack, this error will first bubble to the &lt;code&gt;yield&lt;/code&gt; in &lt;code&gt;main&lt;/code&gt; and be handled there in the &lt;code&gt;try...catch&lt;/code&gt;. If there was no &lt;code&gt;try...catch&lt;/code&gt;, then it would have bubbled up to the &lt;em&gt;runner&lt;/em&gt; and since our &lt;em&gt;runner&lt;/em&gt; doesn't have any &lt;code&gt;try...catch&lt;/code&gt; it would bubble up again, the same as in &lt;em&gt;async/await&lt;/em&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#dealing-with-multiple-yields" class="anchor"&gt;
  &lt;/a&gt;
  Dealing with multiple yields
&lt;/h4&gt;

&lt;p&gt;We've come a long way. Right now our code is able to deal with one &lt;code&gt;yield&lt;/code&gt;. Our code is already able to run multiple parallel asynchronous operations because we are using &lt;em&gt;Promises&lt;/em&gt;, therefore &lt;code&gt;Promise.all&lt;/code&gt; and other methods comes for free. Our runner, however isn't able to run multiple &lt;code&gt;yield&lt;/code&gt; statements. Take the following generator:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AJxVBdl6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aepgdtujmv9p3cynmhkh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AJxVBdl6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aepgdtujmv9p3cynmhkh.png" alt="Generator with multiple yields"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our &lt;em&gt;runner&lt;/em&gt; will deal with the first &lt;code&gt;yield&lt;/code&gt; just fine, however it won't correctly give control back to &lt;code&gt;main&lt;/code&gt; at all in the second &lt;code&gt;yield&lt;/code&gt;, the timeout will finish and nothing will happen. We need to add some iteration capability to the &lt;em&gt;runner&lt;/em&gt; so that we can correctly process multiple &lt;code&gt;yield&lt;/code&gt; statements. Look at the following code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EQTipJxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c1pb6jjknq026esvedt9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EQTipJxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c1pb6jjknq026esvedt9.png" alt="Multi-yield code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We use recursion with an &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE"&gt;IIFE&lt;/a&gt; to iterate through the generator. Instead of directly calling &lt;code&gt;.next&lt;/code&gt;, we recursively call this &lt;em&gt;IIFE&lt;/em&gt; with the unwrapped value of the promise. The first thing the function does is to give control back to the generator with the unwrapped value. The cycle then repeats if there is another &lt;code&gt;yield&lt;/code&gt;. Notice that on the last &lt;code&gt;yield&lt;/code&gt; (or if there isn't any), then the generator will end and give control back to the runner. The runner checks if the generator has ended and finishes execution if positive.&lt;/p&gt;

&lt;p&gt;There is one problem however: if one of the promises rejects, then the cycle is broken and our runner doesn't run correctly. To fix this we need to add an error flag and call &lt;code&gt;.next&lt;/code&gt; or &lt;code&gt;.throw&lt;/code&gt; based on this flag:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wN_rkUnf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/09vxzmm2g31t09dsid92.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wN_rkUnf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/09vxzmm2g31t09dsid92.png" alt="Multi-yield runner with error handling"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;We've implemented something really close to &lt;em&gt;async/await&lt;/em&gt;. If you look at the &lt;a href="https://v8.dev/blog/fast-async"&gt;V8 blog&lt;/a&gt; you will notice that our program does essentially the same thing. I suggest reading the blog post above, there is a cool optimization that if you &lt;em&gt;await&lt;/em&gt; promises, then the engine is so optimized that your code will run faster than just using promises with a &lt;code&gt;.then&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With this post I finish writing about generators, at least for now. There is an interesting topic that I didn't touch that is &lt;a href="https://en.wikipedia.org/wiki/Coroutine"&gt;coroutines&lt;/a&gt;. If you want to read about it, I recommended this &lt;a href="https://davidwalsh.name/concurrent-generators"&gt;post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For my next post I think I will write about &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol"&gt;Symbol&lt;/a&gt; or the Myers diff algorithm (the default diff algorithm for git). If you have any doubts, sugestions or anything just comment below! Until next time :)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The best way to load and use Google Fonts in Next.js + Tailwind</title>
      <author>Thomas Ledoux</author>
      <pubDate>Mon, 15 Feb 2021 19:06:20 +0000</pubDate>
      <link>https://dev.to/thomasledoux1/the-best-way-to-use-google-fonts-in-next-js-tailwind-43a2</link>
      <guid>https://dev.to/thomasledoux1/the-best-way-to-use-google-fonts-in-next-js-tailwind-43a2</guid>
      <description>&lt;p&gt;I was setting up a new project today with Next.js and tailwindcss, and I had to use Roboto as a font. &lt;/p&gt;

&lt;p&gt;Since it's a Google Font, I was looking into the best way to load a font from an external URL (since the fonts are available through a CDN, I don't bother hosting them myself).&lt;/p&gt;

&lt;p&gt;The following article explains this very thoroughly: &lt;a href="https://csswizardry.com/2020/05/the-fastest-google-fonts"&gt;https://csswizardry.com/2020/05/the-fastest-google-fonts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From this article you can derive the following snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preconnect"&lt;/span&gt;
      &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.gstatic.com"&lt;/span&gt;
      &lt;span class="na"&gt;crossorigin&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- [2] --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preload"&lt;/span&gt;
      &lt;span class="na"&gt;as=&lt;/span&gt;&lt;span class="s"&gt;"style"&lt;/span&gt;
      &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&amp;amp;display=swap"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- [3] --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;
      &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&amp;amp;display=swap"&lt;/span&gt;
      &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"print"&lt;/span&gt; &lt;span class="na"&gt;onload=&lt;/span&gt;&lt;span class="s"&gt;"this.media='all'"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- [4] --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;
        &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&amp;amp;display=swap"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;b&gt;Also note how I only include the weights I'm going to be using (400 &amp;amp; 700) to reduce the size of the font we're loading.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;So, how do we implement the above snippet into our Next.js application?&lt;br&gt;
That's quite simple! &lt;br&gt;
In your &lt;code&gt;/pages&lt;/code&gt; folder, you should have a &lt;code&gt;_document.js/.tsx&lt;/code&gt; file. &lt;br&gt;
In this file, we can easily adapt the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section using the &lt;code&gt;next/head&lt;/code&gt; module. This will be applied on every page by Next.js.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;DocumentContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;NextScript&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/document&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyDocument&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;getInitialProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DocumentContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInitialProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;initialProps&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt;
            &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"preconnect"&lt;/span&gt;
            &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.gstatic.com"&lt;/span&gt;
            &lt;span class="na"&gt;crossOrigin&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt;
            &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"preload"&lt;/span&gt;
            &lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"style"&lt;/span&gt;
            &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&amp;amp;display=swap"&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt;
            &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;
            &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&amp;amp;display=swap"&lt;/span&gt;
            &lt;span class="na"&gt;media&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"print"&lt;/span&gt;
            &lt;span class="na"&gt;onLoad&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"this.media='all'"&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;noscript&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt;
              &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;
              &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&amp;amp;display=swap"&lt;/span&gt;
            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;noscript&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NextScript&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyDocument&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now the Next.js part is done. The font is being loaded, yay!&lt;br&gt;
The next and final part is actually using the font in Tailwind, and applying it to all our sans-serif text (since Roboto is a sans-serif font).&lt;/p&gt;

&lt;p&gt;This is super easy in Tailwind, this just requires an extension of the default theme:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tailwindcss/defaultTheme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;fontFamily&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;sans&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Roboto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;defaultTheme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fontFamily&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sans&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I only needed to add the &lt;code&gt;sans&lt;/code&gt; property of the &lt;code&gt;fontFamily&lt;/code&gt; object to include the Roboto font, and add the other sans-serif fonts from the default theme as fallbacks.&lt;/p&gt;

&lt;p&gt;There you have it! Optimized font loading in your Next.js application with Tailwind :-) &lt;br&gt;
Enjoy.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>css</category>
      <category>javascript</category>
      <category>performance</category>
    </item>
    <item>
      <title>Master in CSS in 2021</title>
      <author>Lenin Felix</author>
      <pubDate>Mon, 15 Feb 2021 19:00:32 +0000</pubDate>
      <link>https://dev.to/soylenin/master-in-css-in-2021-1jf0</link>
      <guid>https://dev.to/soylenin/master-in-css-in-2021-1jf0</guid>
      <description>&lt;p&gt;Web design is one of the areas with the highest growth in recent years (if I will tell you, I have only been in this world for 3 years and I have never stopped because something new comes out every day 😄).&lt;/p&gt;

&lt;p&gt;So I give you the key points to become an expert, I say expert, a complete MASTER in CSS and you can apply to any job today as a Frontend Developer (of course you should also know HTML and JS, but today we will see CSS).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-css-from-zero" class="anchor"&gt;
  &lt;/a&gt;
  1. CSS from Zero
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Make the web beautiful&lt;/strong&gt; with the only language created for design, start playing with this wonderful language and you will see how everything begins to take shape.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-flexbox-and-gridcss" class="anchor"&gt;
  &lt;/a&gt;
  2. Flexbox and GridCSS
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Design flexible interfaces&lt;/strong&gt; with the system used by all CSS frameworks (Bulba, Bootstrap, Tailwind, etc).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-advanced-css" class="anchor"&gt;
  &lt;/a&gt;
  3. Advanced CSS
&lt;/h2&gt;

&lt;p&gt;Learn in depth the &lt;strong&gt;various modules that css has&lt;/strong&gt;, such as things like pseudoElements or pseudoSelectors, among others.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-css-variables" class="anchor"&gt;
  &lt;/a&gt;
  4. CSS variables
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;CSS has native variables with TOTAL browser support!&lt;/strong&gt; Learn to use them and you will be able to boost your design to a more dynamic and professional level (almost approaching programming as in other languages).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-responsive-web-design" class="anchor"&gt;
  &lt;/a&gt;
  5. Responsive Web Design
&lt;/h2&gt;

&lt;p&gt;Design websites and apps that &lt;strong&gt;look perfect on any screen size&lt;/strong&gt;. Learn how your traditional designs can be scaled with the &lt;strong&gt;MediaQuerys&lt;/strong&gt; to give specific styles for both laptop screens and mobile phone screens.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-animations-with-css" class="anchor"&gt;
  &lt;/a&gt;
  6. Animations with CSS
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Create animations optimized&lt;/strong&gt; for the web in 2D and 3D without programming, just with a few lines of CSS thanks to properties like &lt;em&gt;transforms&lt;/em&gt; and &lt;em&gt;animation&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-preprocessors-from-zero" class="anchor"&gt;
  &lt;/a&gt;
  7. Preprocessors from Zero
&lt;/h2&gt;

&lt;p&gt;Convert your styles &lt;strong&gt;CSS into a programming language&lt;/strong&gt; (now yes) with preprocessors such as Less, Stylus or SASS (we could even say that Postcss but this is called a PostProcessor, something through which your final styles pass in order to optimize them more).&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
If you liked the content you can support me in:&lt;br&gt;
&lt;/center&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/G2G42SCZF"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RDsLyh75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rollercoin.com/?r=kl3gfn3b"&gt;&lt;img src="//rollercoin.com/static/img/referral/banners/ref_72890.gif" alt="promo"&gt; &lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>showdev</category>
      <category>webdev</category>
      <category>tips</category>
    </item>
    <item>
      <title>Best VsCode dark themes for 2021 🚀</title>
      <author>Rajeev Singh</author>
      <pubDate>Mon, 15 Feb 2021 18:15:37 +0000</pubDate>
      <link>https://dev.to/rjstyles/best-vscode-dark-themes-for-2021-78l</link>
      <guid>https://dev.to/rjstyles/best-vscode-dark-themes-for-2021-78l</guid>
      <description>&lt;p&gt;Here is my list of some top &lt;strong&gt;lesser known&lt;/strong&gt; awesome dark themes for VsCode.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-celestial" class="anchor"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://marketplace.visualstudio.com/items?itemName=apvarun.celestial"&gt;Celestial&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T0-i_VDf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j8mjy8c47yk4t0ukc566.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T0-i_VDf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j8mjy8c47yk4t0ukc566.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-radical" class="anchor"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://marketplace.visualstudio.com/items?itemName=dhedgecock.radical-vscode"&gt;Radical&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7XsY9onf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/atbyoi2xwh2i9ln3mfw9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7XsY9onf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/atbyoi2xwh2i9ln3mfw9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-just-black" class="anchor"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://marketplace.visualstudio.com/items?itemName=nur.just-black"&gt;Just Black&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LZxiaFz---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vsy4iya5mkau9h8wwqil.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LZxiaFz---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vsy4iya5mkau9h8wwqil.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-after-dark" class="anchor"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://marketplace.visualstudio.com/items?itemName=ssmi.after-dark"&gt;After Dark&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DNyOHqkb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k8v7w7ntiio6pkd2st9w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DNyOHqkb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k8v7w7ntiio6pkd2st9w.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-panda-theme" class="anchor"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://marketplace.visualstudio.com/items?itemName=tinkertrain.theme-panda"&gt;Panda Theme&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cdqsO4v5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6g9bklmma0fn99te68x1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cdqsO4v5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6g9bklmma0fn99te68x1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-andromeda" class="anchor"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://marketplace.visualstudio.com/items?itemName=EliverLara.andromeda"&gt;Andromeda&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vzEJzV94--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hnje0ayryee0sqjcnsu7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vzEJzV94--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hnje0ayryee0sqjcnsu7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-blueberry-dark-theme" class="anchor"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://marketplace.visualstudio.com/items?itemName=peymanslh.blueberry-dark-theme"&gt;Blueberry dark theme&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pnuJKMcA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6vbrczjf6vhzsf4y9uq3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pnuJKMcA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6vbrczjf6vhzsf4y9uq3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-merkos-green-theme" class="anchor"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://marketplace.visualstudio.com/items?itemName=merko.merko-green-theme"&gt;merko's green theme&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iE0ZkFvd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7t115h7a70nlpfbfzihm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iE0ZkFvd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7t115h7a70nlpfbfzihm.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you liked some of these, &lt;strong&gt;Happy Coding! 💻&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Did You Find Coding? Or Did It Find You?</title>
      <author>Ashley RNDLL</author>
      <pubDate>Mon, 15 Feb 2021 18:03:42 +0000</pubDate>
      <link>https://dev.to/xoshly/did-you-find-coding-or-did-it-find-you-41om</link>
      <guid>https://dev.to/xoshly/did-you-find-coding-or-did-it-find-you-41om</guid>
      <description>&lt;p&gt;&lt;em&gt;I discovered coding at the lowest point of my life...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If I can be completely honest, vulnerable, and transparent, I did not know about coding until early 2020. I had just given birth to my daughter and I was ready to start working on my hair salon. Being in the beauty industry for almost 10 years, I decided that it was time to build my very own salon. And that I did, until &lt;strong&gt;COVID hit me hard.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;And as a new mom, &lt;strong&gt;Postpartum Depression hit me harder&lt;/strong&gt; and I struggled with my personal and professional life really heavily. When my daughter was only a couple of months old, I had a talk with my husband and our life counselor and they both told me to stop doing anything business-related for 2 weeks. This way, I was able to clear my mind, focus on myself, my husband, and our brand new baby. &lt;/p&gt;

&lt;p&gt;Within those two weeks, I challenged myself to really think about myself and what I genuinely enjoyed doing. You know, things that I knew that I was naturally good at. So I made out a list. And among the top things, technology and art-related activities were on that list. &lt;/p&gt;

&lt;p&gt;Here I am with a failed hair salon before it even got started, half of a bachelor's degree in Digital Design, and a thousand odd jobs under my belt. I thought to myself, &lt;strong&gt;where is my life going?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Coming straight outta high school with a full Vocal Performance scholarship ten years ago, to a 28-year-old woman who lived her life to accompany those around her. &lt;/p&gt;

&lt;p&gt;So within those two weeks, I did something that I had never done in my life; focused on myself. &lt;/p&gt;

&lt;p&gt;I knew that I had a genuine love for engineering and technology. But I did not know what I could do in those fields. So I went to google and &lt;strong&gt;&lt;em&gt;I literally googled, "creative jobs in tech."&lt;/em&gt;&lt;/strong&gt; A lot of things popped up and &lt;strong&gt;coding&lt;/strong&gt; was one of them. &lt;/p&gt;

&lt;p&gt;I googled, Youtubed, and read up on coding and I literally had a lightbulb moment. &lt;/p&gt;

&lt;p&gt;I started to follow Software Developers and Engineers on all social media platforms, just to see what their lifestyle was like. &lt;/p&gt;

&lt;p&gt;I saw those individuals and I thought to myself, &lt;strong&gt;&lt;em&gt;"Can I really live that lifestyle?"&lt;/em&gt;&lt;/strong&gt; And my exact thoughts were, &lt;strong&gt;"HELL YES!!"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This industry is &lt;strong&gt;EVERYTHING&lt;/strong&gt; that I prayed for in a career. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#here-are-the-personal-career-goals-that-i-prayed-for-over-10-years-ago" class="anchor"&gt;
  &lt;/a&gt;
  Here are the personal career goals that I prayed for over 10 years ago:
&lt;/h4&gt;

&lt;p&gt;1) I want to be creative&lt;br&gt;
2) I want to solve problems&lt;br&gt;
3) I want to teach others&lt;br&gt;
4) I want to travel&lt;br&gt;
5) I want to work remotely if needed&lt;br&gt;
6) I want to receive a great salary to help build a foundation for my family&lt;/p&gt;

&lt;p&gt;I am so thankful that my failed business led me in the direction of my true passion. &lt;/p&gt;

&lt;p&gt;I used to pray that God would bless me in a career that had all of the stated qualities above and in those 10 years of being a Professional Hairstylist, I always wondered why I could never get ahead in that industry. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-did-you-discover-coding-and-how-has-it-impacted-your-life" class="anchor"&gt;
  &lt;/a&gt;
  How did you discover coding and how has it impacted your life?
&lt;/h4&gt;

</description>
      <category>career</category>
      <category>motivation</category>
      <category>beginners</category>
      <category>careerchange</category>
    </item>
    <item>
      <title>Tilesets &amp; Datasets: Managing Data in Mapbox Studio</title>
      <author>Ben Tyler</author>
      <pubDate>Mon, 15 Feb 2021 15:51:46 +0000</pubDate>
      <link>https://dev.to/tylerben/tilesets-datasets-managing-data-in-mapbox-studio-352p</link>
      <guid>https://dev.to/tylerben/tilesets-datasets-managing-data-in-mapbox-studio-352p</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is part of a series of guides and tutorials on Mapbox. The majority of the posts will focus on how you can use Mapbox with React, but will also additionally focus on other parts of the Mapbox suite such as Mapbox Studio and various Mapbox APIs. The series will start with relatively simple use cases and build into more complex examples.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thus far we have &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;covered how to create a basic map using Mapbox and React (&lt;a href="https://www.lostcreekdesigns.co/writing/introduction-to-mapbox-and-react"&gt;read post&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;developed a cheatsheet for the predefined Mapbox Styles (&lt;a href="https://www.lostcreekdesigns.co/writing/mapbox-styles-cheatsheet"&gt;read post&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;covered how to create a custom style in Mapbox Studio and add it to a React app (&lt;a href="https://www.lostcreekdesigns.co/writing/mapbox-studio-creating-an-avalanche-atlas"&gt;read post&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These guides are helpful for establishing some basic familiarity with Mapbox, but only get you so far when the rubber meets the road. If you are building an interactive map, chances are you trying to portray some real data and not just some hello world nonsense.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The aim of this post is to provide an overview of two key features of Mapbox Studio, Tilesets and Datasets and how they can be used to manage and integrate real data into a Mapbox style and application.&lt;/strong&gt; This guide will not provide the ins and outs how to use tilesets and datasets, but instead will focus on providing the context of how they fit into the larger Mapbox ecosystem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#datasets-overview" class="anchor"&gt;
  &lt;/a&gt;
  Datasets Overview
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EEQI0WWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bhxqxsqt4nbjf9q91ovx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EEQI0WWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bhxqxsqt4nbjf9q91ovx.png" alt="Datasets infographic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dataset can a loaded term that means a whole of different things in different contexts. In the context of Mapbox Studio, a dataset refers to an &lt;strong&gt;editable collection of &lt;a href="https://docs.mapbox.com/help/glossary/geojson/"&gt;GeoJSON&lt;/a&gt; features.&lt;/strong&gt; Simplified even further, it is essentially data stored in a JSON that is formatted in a very specific way that also has an added field to capture spatial data ("geometry"). It is the rawest form of data in Mapbox Studio.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;very key point is that Datasets cannot be directly added to a Mapbox Style.&lt;/strong&gt; They first need to be exported as a Tileset. The exported Tileset can then be added easily to a map style. I like to think of datasets as my foundation. I cannot do much with a dataset directly, but I can build a lot of things on top of it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-use-cases" class="anchor"&gt;
  &lt;/a&gt;
  Common Use Cases
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;lightweight spatial data editing/creation&lt;/li&gt;
&lt;li&gt;managing data that has the potential to update regularly&lt;/li&gt;
&lt;li&gt;easy to transform spatial-like data into a true spatial format

&lt;ul&gt;
&lt;li&gt;i.e. converting a CSV with latitude and longitude columns into a tileset&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#drawbacks" class="anchor"&gt;
  &lt;/a&gt;
  Drawbacks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;no bulk editing&lt;/li&gt;
&lt;li&gt;for more complex use cases, you need to learn how to leverage the Datasets and Uploads APIs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To learn the ins and outs of working with datasets, check out the Mapbox &lt;a href="https://docs.mapbox.com/studio-manual/reference/datasets/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tilesets-overview" class="anchor"&gt;
  &lt;/a&gt;
  Tilesets Overview
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hk7s_8-B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dba44dwpvstudqbrxquq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hk7s_8-B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dba44dwpvstudqbrxquq.png" alt="Tilesets infographic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tilesets are the meat and potatoes of Mapbox Studio. They represent a collection of vector or raster data broken up into a nice uniform square grid of tiles. If you want to add something to a style via Mapbox Studio, you will need to create a tileset for it. Luckily, this is as uploading a shapefile or as easy as exporting a dataset to a tileset most of the time.&lt;/p&gt;

&lt;p&gt;Maybe not 100% accurate, but my model for the differences between Datasets and Tilesets is viewing Datasets like a CSV and Tilesets like a Shapefile. You can view and edit data in a CSV but you cannot do much more than that whereas you view, edit, map, and analyze data in a shapefile.&lt;/p&gt;

&lt;p&gt;To learn the ins and outs of working with Tilesets, check out the Mapbox &lt;a href="https://docs.mapbox.com/studio-manual/reference/tilesets/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-use-cases" class="anchor"&gt;
  &lt;/a&gt;
  Common Use Cases
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;displaying any sort of non-Mapbox spatial data&lt;/li&gt;
&lt;li&gt;exporting a Dataset for use in a custom Mapbox style&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#drawbacks" class="anchor"&gt;
  &lt;/a&gt;
  Drawbacks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;cannot edit a Tileset&lt;/li&gt;
&lt;li&gt;updating a Tileset usually requires that you re-upload and replace the existing Tileset&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thinking-in-datasets-and-tilesets" class="anchor"&gt;
  &lt;/a&gt;
  Thinking in Datasets and Tilesets
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X2opExv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3h0bj4ycz1pddkhkugpr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X2opExv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3h0bj4ycz1pddkhkugpr.png" alt="Data flow infographic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I first started using Mapbox Studio, one of the hardest things to get my head around was the difference between datasets and tilesets and how they fit into the styles editor and Mapbox GL JS. It can be easy to view these three feature sets in isolation, but viewing them as connected steps in a process helped me.&lt;/p&gt;

&lt;p&gt;Here is a common data flow for working with Mapbox Studio.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find spatial data you want to view and analyze&lt;/li&gt;
&lt;li&gt;Upload spatial data to Mapbox Studio (choose one of the following)

&lt;ol&gt;
&lt;li&gt;Upload data as dataset and then export to a tileset&lt;/li&gt;
&lt;li&gt;Upload data as a tileset&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Edit and manage spatial data in Mapbox Studio&lt;/li&gt;
&lt;li&gt;Add spatial data to a Mapbox Style&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One of the things that initially tripped me up was deciding when to use Datasets and when to use a Tileset as both are valid entry points into the data workflow. My general rule of thumb is that if I want a nice UI to make simple edits to my spatial data, I will reach for Datasets, otherwise I reach for Tilesets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-real-world-example" class="anchor"&gt;
  &lt;/a&gt;
  A Real World Example
&lt;/h2&gt;

&lt;p&gt;Now that I have provided an overview of Datasets, Tilesets, and how they fit together in theory, I will provide an actual use case from a data-driven mapping application I have built.&lt;/p&gt;

&lt;p&gt;I recently built an application that allows users to see places where they can trail run, fish, and grab a beer afterwards. There are a couple of key spatial datasets that this application relies on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the course data (line strings representing the trail/path the user can run along)&lt;/li&gt;
&lt;li&gt;watershed boundaries (polygons representing the fisheries)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#deciding-what-to-use" class="anchor"&gt;
  &lt;/a&gt;
  Deciding What to Use
&lt;/h3&gt;

&lt;p&gt;One of the other rules of thumbs I use when determining if I should use a Dataset or a Tileset is the frequency that the data will need to be updated. If it is on the more frequent side of things, I will opt to use a Dataset.&lt;/p&gt;

&lt;p&gt;For this example, I knew the course data would change over time as more places to run and fish got added to the application so I opted to manage this data as a Dataset. The watershed boundaries are not likely to change (barring some massive earthquake or geologic event) and represent a perfect use case for a Tileset.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-the-data-into-studio" class="anchor"&gt;
  &lt;/a&gt;
  Getting the Data into Studio
&lt;/h3&gt;

&lt;p&gt;When I started building the application, I already had a lot of the course data available as GPX files from Strava. You unfortunately cannot upload GPXs as a tileset so I had to convert these to GeoJSON first. After doing so, I uploaded the course data as a Dataset using Mapbox studio. Once I had all my courses added, I exported them to a Tileset. When I needed to add new courses, I opened up my existing Dataset and used the import feature to bring in the additional courses.&lt;/p&gt;

&lt;p&gt;Adding in the watershed boundaries was even easier. I just navigated to the &lt;a href="https://studio.mapbox.com/tilesets/"&gt;Tilesets page&lt;/a&gt; in Mapbox Studio and uploaded a shapefile I had that contained the watershed boundaries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-the-data-to-a-mapbox-style" class="anchor"&gt;
  &lt;/a&gt;
  Adding the Data to a Mapbox Style
&lt;/h3&gt;

&lt;p&gt;With both of key spatial components now available as Tilesets, all that was left to do was to create a custom Mapbox style and add my two Tilesets. If you want to learn how to add a Tileset to a Mapbox Style, make sure to check out &lt;a href="https://www.lostcreekdesigns.co/writing/mapbox-studio-creating-an-avalanche-atlas"&gt;this guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-the-style-to-a-react-app" class="anchor"&gt;
  &lt;/a&gt;
  Adding the Style to a React App
&lt;/h3&gt;

&lt;p&gt;Once the Tilesets were added to my custom Mapbox Style, the only remaining task was integrating the Style into my React frontend. For a guide on how to do this, please refer to my earlier post, &lt;a href="https://www.lostcreekdesigns.co/writing/introduction-to-mapbox-and-react"&gt;Introduction to Mapbox and React&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#next-steps" class="anchor"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h3&gt;

&lt;p&gt;The above workflow is a simplified version of what I implemented. On the final versions of the app, I got the chance to leverage some really cool Mapbox products like the Uploads and Datasets API. I will most likely cover this in a future post though so stay tuned!&lt;/p&gt;

&lt;p&gt;If you have any questions or comments please reach out below! If you found this post useful, please retweet or share!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-links-and-resources" class="anchor"&gt;
  &lt;/a&gt;
  Useful Links and Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Datasets Docs (&lt;a href="https://docs.mapbox.com/studio-manual/reference/datasets/"&gt;https://docs.mapbox.com/studio-manual/reference/datasets/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Tilesets Docs (&lt;a href="https://docs.mapbox.com/studio-manual/reference/tilesets/"&gt;https://docs.mapbox.com/studio-manual/reference/tilesets/&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>tutorial</category>
      <category>react</category>
      <category>javascript</category>
      <category>mapbox</category>
    </item>
    <item>
      <title>World-first Static time RegEx engine with O(0) time complexity</title>
      <author>Jakub Švehla</author>
      <pubDate>Mon, 15 Feb 2021 15:45:49 +0000</pubDate>
      <link>https://dev.to/svehla/world-first-static-time-regex-engine-with-o-0-time-complexity-4k4e</link>
      <guid>https://dev.to/svehla/world-first-static-time-regex-engine-with-o-0-time-complexity-4k4e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-the-heck-is-that" class="anchor"&gt;
  &lt;/a&gt;
  What the heck is that?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;RegEx&lt;/code&gt; engine written with static types?!&lt;/li&gt;
&lt;li&gt;Code which evaluates &lt;code&gt;RegEx&lt;/code&gt; "templates" in compile time so you know the result before you run your app?!&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;RegEx&lt;/code&gt; engine which works with &lt;code&gt;O(0)&lt;/code&gt; run-time complexity?!&lt;/li&gt;
&lt;li&gt;Minified 0-bite (GZip) length output?!&lt;/li&gt;
&lt;li&gt;Fully bugged and not ready for production?!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#im-not-kidding-this-is-not-just-a-dream" class="anchor"&gt;
  &lt;/a&gt;
  I'm not kidding!!! This is not just a dream!
&lt;/h2&gt;

&lt;p&gt;This is the first world &lt;code&gt;RegEx&lt;/code&gt; engine written in pure Typescript types.&lt;/p&gt;

&lt;p&gt;Check the working examples!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VccASX_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y8prms2crwgmv1f8x0gd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VccASX_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y8prms2crwgmv1f8x0gd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zStbqYyx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mk7fc7el9gd0wssss0km.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zStbqYyx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mk7fc7el9gd0wssss0km.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y38cscOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ke701al6bah7sbgkp9te.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y38cscOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ke701al6bah7sbgkp9te.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vYjtP7eh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pvwot2lj8ef8gfv5h9ac.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vYjtP7eh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pvwot2lj8ef8gfv5h9ac.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Svehla/ts-generics-RegEx-engine"&gt;Github Repo - ts-generics-RegEx-engine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.typescriptlang.org/play?target=1&amp;amp;ssl=1&amp;amp;ssc=1&amp;amp;pln=321&amp;amp;pc=1#code/PTAEFpK6dv4YgsAKBBRtQFkCGAXAC1AHsAHAUwCcCBLEgOwGcNN5V02vufxV8AnpVABJfNTqM8ZUAF5QAb1ShQAcnABGDaoBcoANqaNAGjXhVp9RoBMFsxoAMd1VtUBdZfad7Djy+f9XfwBOZ0d3T3VQn3Bg-2dNJ38ADmdQjxQVdVSY5PiQhIB2Z1SMrPBimML8s1T-ADZnYrKzRpj6mvVi-wBWZ0aW9T6Yns7wRv8AFmc+wfBpmMmxvv8AZmdpufWY1bHp-1tLdbnbGOsx9cDnWzntGJMzBMO1JLVtQe8DB0tXqzDnJyDO4GB6qADUAOuCXekVOBnOaghlm0RyeEUyam2Bl2iKhln2ZmOkQWBiWuNRlhWZk2kWGBlG5LUBNUEzMs0ibQMHUZqipqm6rXRWUqBmqPNZqjqZmakRyBjyPIFqlCKSFamiBjiPKlLl+sTVut0IO+PJVbxRXgNrh8WksSLevxs0JhGJccP0NjtYQtLku9hukQ0WI9OPBYWeLmZmiJro0JI9ZLDyL9Lj5mhpsbpHoZSbezI0Es07NjnI93NzqbCSs0A0DIo9YorBbCOs0Mtjco9CqbSo0ZqspUDGo9WqbOuser7BonRv0E69yP71h94Bng2Xs+XC7UM8s1gjq5dWX3m4RFY3e5Tq4Druswbv29UJ73Ubv0-j1kT9qfKesac-05Zn+j4AXuhZ-tOpbWOW34QXu1bQdO9bWI2sEStYrYodOnYYSBSrWP2q6Drew4ESBOqrHqBEGpRs6USB-arCutGDExdGgt+tFHAebGse6qxnpxPqrFeAk0cGImPmJRxRiJNHxqsX7OHJRxpopNFZqsOaccyqyFlpNGlnpUl8qs1Z6TR9ZmVJEqrK2Zk0Z2dlSUqqyEXZNHDm5Uk6pMepuQafmzn5Un9pMK5BRkAC+qAcGAAAC+BMOAFAAB6UAAxvgKVUFQJBUPwQgUKAACCAAmZUaAAPAAKgAfHIojiDQ+D0Aw0j6DVbj6KsGToIlyVpZl2XUHlBUoIIwgAMoAK4AEbVfVjViBIrVSLgZCdd11gZIVwgAPrlWVtWmAAqqYABKFAsPIS3yAACrgVBMBQIgMPgVWnQ1aXiAwZUsA4oAAPygFdLB6IdFVVUdi11aYs0LZ9cOlRV1Vg3VdWxRNRWgPtCMnaA52g9djV3aAj3Pa971I6AP0UH9APA8T4O4-jCOw-D83VV9nOI+jmMoHFoADSl6UUFlOVjXtxUUy9b0fWTK0tW1HVdfoDi7djwhHQTX2NbLVMfZDx0G-LtXI6b1NfRj0ugPjNVnQ1D1PXL1N4-NVWWwrFsu4bSM24LaBgLwIch0LId2-gZUADK0HNrCh9A4eJynyCB5wkClbluACCwM2tQANkwtsABIULgx1kzVtOpb9-0GLQDAAGbUKAABitDPfgK0ALamAAdIPjct1QuNg-gbhMx3Xe96AegMBQABu1C2zVuC0AX5ukzXdcsPow+t-t09MN34h96Ag-9wfo-j5PIPj3PoAL8v42TcVV09yQy-R7gJ9b7dO96b130Jfa+zN8CmDAftH+J8RAUB7nfcBj9n4ry1sVGB3tt50wZgYUBzdD7j0gfg0eGDEEYOQUvVBtsP5fwoMfJKAA5XuTACYAGESAzXek7UA7DOH4EATgwGINq56BocvehTAmFnxYWvDe5teZVV4e9UwGgA7UIoGQAuuAMoUAwb3AmDCKAAHc9Fn24SAweYjdG-29qYQxJibG901m-cmM0mCEGhrlAR9dcAMAEPoNwphe7mMviVXKQSz7OJxgAUTKrQfApj4ElXwPgKgVVPBhNHtgnxfiAnGE8AAaQoAIbxLAT5UEbgAc3yRiAAargAuM1irZJYL4gQNSVA1UBvIAA8j3eJVUMGeKoMjIpAgGoADJFAGAANbFNAI3UAYy3B6HqY04qUUOmgBqhoRqSgMQqH0AUhZDBQBzIECQJu2yNZ6C6UcloMUUDcKupo7R1jYFn2GaYHZAtbaxPiYknuPSm6AuSak9JGJMmlNAG0gJeTCnzJaaAcpVStlrKadCtpqBnkaK0TowFXzQD-ISY4s+YK0lDMyaM4pph0UUDUWg1x7iaokAJVCpFsLuqBKavAnFrz8WkvgYS+6biPGUtysjYJvyg6sGRakqpedC7F0ZVNTR8Sao-VqtClFDBKncOrki1QqhPAgwCZ4W50KAAGAASBQYD6FRVtWA8eUVLUmtAP1JKothqS3yp4Q59CB6DxZXMhgtAABeFApryt1VVcedUWi3KxhnLgoAqAUEqWlUAZBfaj1DkLaN2iZmgDmr-CgZVs25pOUwMgndy0lpKUQWgrSjHXRID3YqTAOFUB0ULBqhAUlkCYDoEARix39wufneaFB+4ZXbcAIxBAMqECBovWQM0HAaAAFZzWSAATQYdYaORisYuJDfTCNUaY2VP-ts6FRr3VmoxBapFlqAA6b6nXEPAa691nrBpiwlqNP1ByDCqA-XYS+56w2RujRU2N8bE13tfV+ke7dO4n0dXa79Lq3UYhBv+714sRq5RAyoANGGIEX2DSQUNl64NVLjddfACbzXbNPTjA2V1KnRNStBmRHqABUSKdWVICYJ4A8N8BFsxbkye8h9ABLcPq6FT6VAg0LRlGZbGy4Vy3oa-uxr8Pk19tx3j-Harr03vVUwIrmWssFT3KqmmZmmAUKAN+ehVBGI3mVDKT0yqqAANygAAI4zV8a1JutBqBebSto-ABcBA9IXqoUAUUA4qD0Lpyu31a5AJYKoIGRn1MmcpmZvjtH6YyKs-IolcSSUfPgcC0FKS0kucsOFyLtBovUGcJGvKPSqApYoKoTLj8cv6fyzg1QgmStMy4xm8zVXmCWbkTZ+rALHMtcc+S5z0mtOdYi+9HrMWqD9eoCQIb2B8qjfG9l8uuX70QndYtnjlXQ0sP9eR2R1m4bfZUHZwgLKCUA-Ix1sHKh0BzrICUrRJ9aYF3gfTfhviK0zTIGVAgxUF4n3rec0Alqusnd61QPD5GKegCGcS1r4KhkueRqoYnUWzsXcG1QG76axsC0p6AHn5H+cPb00tQ1AAKebIM3vLc+2tv7tnRX7aLaYAJ93QCTZF9N+uqgACUEuysvQqxZsHv35Fg6ByDxzELedQ7ADVHpAARHpOh00MFwB2jzVmTn4BINm8gQN-eQ+Jp-b+NjFdaf+6Bin+zrfkc82oSpeUMfRKRx29682Y8n2x8OqnoeGeB5UMz07sW1Dxayklkb6fKePN5-zlQgu1ePam7vNQEHXumaWx96rVvKfoHiatYqtDR7WAWdImF-DGC9sj9s2rJv6oR95+bhzTWnOB4h1PlQ0eY8eaKnFlPKPK+88I0NYjvrxpb9AIvBpTTbkehaDHwvpO4upQS+X1Lgfq+U9r3ztjUvO+reNzPvPpTovgSh1tMnHqoBQHvmniFpfuskLrliFg-mdk-i-slqlull-tKkfoBiRlLIygbGVBVrer-hZtBvRteubHVOrJrCmogGmhmlmo3M1GQOms1AnGwELC4gABqNQlRkCaICDYAzQFytSaIUAABal212t2EK6AG+QsFOEBCeHCZAyeyOMBih5Gme4g2e+gWhUe2+lAu+Gh+AwWF+V+FAegAARHNNYUgcdizsXpAc-mXugaNkFpsgYeRu5hAVAaYeYXAdfqANYRlPYWFo4UXlQKgW4RXkFt4VFG4PETKhTsgcXtYQNldhzrdvYVoV4SkXbGqvgBqrXFVKoKlM-nNBlFUalGNjUvIaAKsH2rbPwYIcIaIbQOIVIezpzhQN3ugHbo7noC7m7sVN7qAAwiQGVBQJ4IWuINCu5kEVYTCn4iFnHm0iFjoddHoG0ullsiUfwiJtevChiG9NMalNCgwDND3HNNQGig0o1HMRQHgPgMutdAxrqskmcWlIruIN8j9EEn9GlEATgT6sBmfjwowEwNcfWvIGsrftio1OwswDCRWkig4I+sidCR2mVEhvoVPjrIHliaiVsofglF6sfkBqRqPF6t7iQAXLcaISjBWkYvlDMiwJUiQFMaAE3PlMiu2sVOmr-IwIHq0Ulu0WIUjt0Vkb0b8RQP8bXKYDrN8alKYMSTiRjDQWDl-lEtNNJuIC8W8UwB8ZUl8UCalN3k8QsRYfASsQIGsTvnaZsfqdsXaXsZ4AcdqscYEp4CqZcdcbceNE7J4AMT9LMS6foKoG-O4Pej5gXH5gFpXqaqkk0ionfo-E8ZGdGZPIav4anmYd9hphGaoEsTGUigcfoCqemaVvoCmfKaABoNWY-PoE3A0i9KYBrN9noJmVGUVGWZroVioUntAQWaBsIsxhVmQHKZGVsUwO4JdPArQhIlIvAjIgCaIOaRjKpoHmAiIEwIaYQOWqSZTmAuqeWmDk2SDHuQefWkinWYHsmVQKmZCSiTiU2VlgYK2UXPWWebiWDnoOgLjuIGidScDIHi2W2fWZ2aBvPJQqPOgJAdSQAITIqEAcLxlPxwWgCEAbSUAMBGarwTkd5TmTklRTQOzbLrl+nyAOA4rvZkBkUGoDkGAtCPnPlVlsagkn7gmeCTakXkXUFM6RGk79nN4uFoEV5-q24iD3R6BgLNorEkBECtzkBrSnJoVGIeY+5MC4DLw2kYpGKEAbzFSsEkA6JMBMBVKgBY7SZGEzGgZcVUn4EU5PE3nGnXpmnnFVR8XEWMXIwHGAnnF5bN74m867n7lLqHllTHkqCnlQmonfbplXkRWvFRXQr3lT7jknyTmy5Mb0V+UKlUbKnmlqnxUalf4fmhVb5fntn54bnnExWU6b7n6NznF6Aql1UqA2IIF5W8YMUCWdUeY-S3Jhnr6U5zqvnlp6C-l1Uf687pmwUvycXkkAZgnUm8WN78X1SRlpHnY5nMWqCZFDaSXGauWRXvEeXdzmnd4U6OV4FkaU4+X5UCWNUBVg4dWgbBUFYNzfrXnnXRUnJoa-lJWiApVvFonMUZW85ZX4A5Um5bX+XrnFUNUvnYnlrjYU4jXZXEW5UI2FWBXAldmYVLXPoeorVEZOUPVPV9V+U7XCWs77ViVHXZFc7upilCEiGSmSHSEs19Fg53Wn5g7U3pQFXG4AnvXmnfZfU4L7zfrA2FmUXY30W42+UvWUWKnMlVQqmlWTVlQY2PwapK19Uq3PUbYBX1WE2k2qBIU220zIU20EWMr24UBzQzSVKG0fSeCTlenwbVIek-Q+2oqeCEGenyCqoFzqqaoHFAFgykxEXK2EHEGTk+yUxlTR2ImyAhnk2Un3UQlgw0HpVPn2UU4EZgBvFaYLJXLKWK2w3EUj796kAvygCGX0mdrXr83Z24GC1T752NnQoh0-SRlI66pEBqgl3TLNprK0BlR6B1khYFwkCVKiIkxzXkZ6DuaT0NLT16A1UUAhbgnRyL3L1MAhbDwkBeaibWUkAkwMBKWgA9yRUeYbwFweaHm0x-Rpar3r0LJMBT0z08mQX73UmH1L3MzpYcbCAe29XpSB26qFWwN6qNTO2u3u3MbQNkCFWCWb0R2BaaxYwQPFQ7JIMu1u1QOqC4BAyi5zSi7hrhra6CYZTa5gg0MCBMO1GWBzS0NcPhrVG8PhoCC1HSr4OMo1TD63RoPkOUPUOpSsMMP0MZTOC4BzQyMyMZQKNCOByryrBx1-yqCi4fr6Nvr9wfra70POCi79za4WNWOWNjbJq24O49LDpCyDFO521jStLppPx32mU5qVLY4VplQkBGIMCoBAA"&gt;you can play with the source code here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer" class="anchor"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The code is not ready to use in production environment.&lt;/li&gt;
&lt;li&gt;Because of the stack limits of Typescript, some &lt;code&gt;regEx&lt;/code&gt;s stop working because they are too long and trigger recursion stack overflow known as &lt;code&gt;Type instantiation is excessively deep and possibly infinite&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;RegEx&lt;/code&gt; backtracking is not implemented yet. &lt;/li&gt;
&lt;li&gt;The parser supports only a small subset of &lt;em&gt;PCRE&lt;/em&gt; standard. Specifically &lt;code&gt;.?*+()\\&lt;/code&gt; symbols.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#motivation-usage" class="anchor"&gt;
  &lt;/a&gt;
  Motivation + usage
&lt;/h2&gt;

&lt;p&gt;Thanks to new features of Typescript 4.1.x we are able to parse a string into a Tuple of tokens and much more! So I decided to write my own custom &lt;code&gt;RegEx&lt;/code&gt; engine just by using Typescript static types to demonstrate how powerful the type system of Typescripts is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-the-regex-engine-work-under-the-hood" class="anchor"&gt;
  &lt;/a&gt;
  How does the RegEx engine work under the hood?
&lt;/h2&gt;

&lt;p&gt;As you may know, programming languages compilers + interpreters. You may know that they are pretty complex and includes &lt;em&gt;Lexers&lt;/em&gt;, &lt;em&gt;Parsers&lt;/em&gt;, &lt;em&gt;Interpreters&lt;/em&gt;, and so on.&lt;/p&gt;

&lt;p&gt;On the other side, this small engine is quite simple, so there are just 3 small modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1. Tokenizer&lt;/li&gt;
&lt;li&gt;2. Parser&lt;/li&gt;
&lt;li&gt;3. Interpreter&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#1-tokenizer" class="anchor"&gt;
  &lt;/a&gt;
  1. Tokenizer
&lt;/h3&gt;

&lt;p&gt;A small generic &lt;code&gt;type TokenizeString&amp;lt;T&amp;gt;&lt;/code&gt; just parses &lt;code&gt;RegEx&lt;/code&gt; template to tokens which are used as the input for &lt;code&gt;2. Parser&lt;/code&gt; to build &lt;code&gt;RegEx&lt;/code&gt; Abstract-Syntax-Tree (AST).&lt;/p&gt;

&lt;p&gt;Examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;T0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TokenizeString&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;(+(ab)+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lo1SJZnR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9uh78sfkj4ysaz3i78qb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lo1SJZnR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9uh78sfkj4ysaz3i78qb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;T1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TokenizeString&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;(+(a(xy)+(xx)b)+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pgXNAtyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/021b13vpyjxji5hmmcko.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pgXNAtyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/021b13vpyjxji5hmmcko.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-parser" class="anchor"&gt;
  &lt;/a&gt;
  2. Parser
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;type ParseRegExTokens&amp;lt;T&amp;gt; = ...&lt;/code&gt; takes the tokenized template and does the syntax analysis which produces an Abstract-Syntax-Tree (AST) Model of the &lt;code&gt;RegEx&lt;/code&gt; template.&lt;/p&gt;

&lt;p&gt;Examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;T3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ParsedRegEx&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TokenizeString&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;(+(a(xy)+(xx)b)+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QAVtumUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0xd54719gs4nkg66hftf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QAVtumUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0xd54719gs4nkg66hftf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the parser supports nesting of structures (like brackets in brackets in brackets etc...)&lt;/p&gt;

&lt;p&gt;AST for &lt;code&gt;'\\(+(a(xy)+(xx)b)+'&lt;/code&gt; template will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;quantifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exactlyOne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;quantifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;zeroOrMore&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;groupElement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;states&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;quantifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exactlyOne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;groupElement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;states&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;quantifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exactlyOne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;y&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;quantifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exactlyOne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}];&lt;/span&gt;
        &lt;span class="nl"&gt;quantifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exactlyOne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...;&lt;/span&gt; &lt;span class="c1"&gt;// and so on&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...;&lt;/span&gt; &lt;span class="c1"&gt;// and so on&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...;&lt;/span&gt; &lt;span class="c1"&gt;// and so on&lt;/span&gt;
    &lt;span class="p"&gt;}];&lt;/span&gt;
    &lt;span class="nl"&gt;quantifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exactlyOne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-regex-interpreter" class="anchor"&gt;
  &lt;/a&gt;
  3. RegEx Interpreter
&lt;/h3&gt;

&lt;p&gt;The last step is to create a proper "interpreter" &lt;code&gt;type Test&amp;lt;RegExp, TestString&amp;gt; = ...&lt;/code&gt; which takes a template and a test string by applying rules from the &lt;code&gt;RegEx&lt;/code&gt; AST.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EK8lTaKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5umw20ejtalgkg7ycce3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EK8lTaKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5umw20ejtalgkg7ycce3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OuvHDzvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0yn2s582680afpldqt03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OuvHDzvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0yn2s582680afpldqt03.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eGuRRjY8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eln37sewq0c2pxmmbdpc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eGuRRjY8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eln37sewq0c2pxmmbdpc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N5C4lYIp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9o0rnkn6igyw1yow4xbq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N5C4lYIp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9o0rnkn6igyw1yow4xbq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--It1Z4JoP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j68b3vpw0lukn0kljy38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--It1Z4JoP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j68b3vpw0lukn0kljy38.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bzuCRbeZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yks04ob8eirrp7kh37qu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bzuCRbeZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yks04ob8eirrp7kh37qu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IopMX4BQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ma5skyxop7s02nnierru.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IopMX4BQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ma5skyxop7s02nnierru.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oSzIMoxA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rakc3ufzv1zbdjx6chfn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oSzIMoxA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rakc3ufzv1zbdjx6chfn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XahUHzrH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ezi0p2b4fzc71nle9u0r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XahUHzrH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ezi0p2b4fzc71nle9u0r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it! 🎉 🎉&lt;/p&gt;

&lt;p&gt;If you don't believe, you can check the full source code in this GitHub repo: &lt;a href="https://github.com/Svehla/ts-generics-RegEx-engine"&gt;https://github.com/Svehla/ts-generics-RegEx-engine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wait... And what about the real &lt;code&gt;Javascript&lt;/code&gt; output? Let's check it out!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--azPaFkHe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jskko6pefr28zqd5v50n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--azPaFkHe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jskko6pefr28zqd5v50n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Haha! A few hundreds line of static types and runtime output is empty with &lt;code&gt;O(0)&lt;/code&gt; time complexity! That's the magic of Typescript 🦄 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-whats-next" class="anchor"&gt;
  &lt;/a&gt;
  And what's next?
&lt;/h2&gt;

&lt;p&gt;If you're interested in another advanced usage of the Typescript type system, you can check these step-by-step articles/tutorials on how to create some advanced Typescript generics.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/svehla/typescript-how-to-deep-merge-170c"&gt;Object Deep Merge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/svehla/typescript-object-fromentries-389c"&gt;How to Object.fromEntries tuples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/svehla/typescript-transform-case-strings-450b"&gt;UPPER_CASE to lowerCase transformator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/svehla"&gt;and so on&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>typescript</category>
      <category>regularexpression</category>
      <category>javascript</category>
      <category>regex</category>
    </item>
    <item>
      <title>forEach() Array Method</title>
      <author>Ali Taha Shakir</author>
      <pubDate>Mon, 15 Feb 2021 15:44:26 +0000</pubDate>
      <link>https://dev.to/alitahashakir/foreach-array-method-1d71</link>
      <guid>https://dev.to/alitahashakir/foreach-array-method-1d71</guid>
      <description>&lt;p&gt;JavaScript provide us with several built in functions to work with arrays which are know as Array Methods. Lets take a closer look at JavaScript  forEach() method.&lt;/p&gt;

&lt;p&gt;The forEach() method executes a callback function for each element of array. That callback function accepts between one and three arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Current Value (required) – The value of the current array element being processed in loop&lt;/li&gt;
&lt;li&gt;Index (optional) – The current element’s index number&lt;/li&gt;
&lt;li&gt;Array (optional) – The array forEach() was called upon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Considering that we have the following array below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const numbersArray = [1, 2, 3, 4, 5];
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Lets apply forEach() method to numbers array, you need a callback function (or anonymous function):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;numbersArray.forEach(function() {
    // code
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The function will be executed on each element of the array. It requires the current value parameter which represents the element of an array which is currently being processed in loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;numbersArray.forEach(function(number) {
    console.log(number);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2VUZ0njB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/puaht7kosiosl1gzam5a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2VUZ0njB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/puaht7kosiosl1gzam5a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the minimum required syntax to run forEach() method.&lt;/p&gt;

&lt;p&gt;Alternatively, you can use the ES6 arrow function representation for simplifying the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;numbersArray.forEach(number =&amp;gt; console.log(number));
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>loops</category>
      <category>array</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Awesamosa : Awesome Goodies for developers #2</title>
      <author>Priya Srivastava</author>
      <pubDate>Mon, 15 Feb 2021 15:42:04 +0000</pubDate>
      <link>https://dev.to/xenoxdev/awesamosa-awesome-goodies-for-developers-2-a9n</link>
      <guid>https://dev.to/xenoxdev/awesamosa-awesome-goodies-for-developers-2-a9n</guid>
      <description>&lt;p&gt;WELCOME to the Second Edition of Awesamosa: &lt;br&gt;
Awesome Goodies for developers &lt;/p&gt;

&lt;p&gt;Now,&lt;/p&gt;

&lt;p&gt;Last week, we started this series of posts, about awesome web dev resources for developers. These include :&lt;br&gt;
Fonts, Stock Images, Stock Videos, icons, SVGs, and many more.&lt;/p&gt;

&lt;p&gt;This list will be published in parts on dev.to, and will be available as a whole, on our website - &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://xenox.dev/awsamosa"&gt;🌎 Awesomosa 🌎&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is the link to our [First Post] &lt;strong&gt;🎆&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(&lt;a href="https://dev.to/xenoxdev/awesamosa-awesome-resources-for-developers-01-3pdj"&gt;https://dev.to/xenoxdev/awesamosa-awesome-resources-for-developers-01-3pdj&lt;/a&gt;) 🔥.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#so-let-us-begin-20" class="anchor"&gt;
  &lt;/a&gt;
  So, let us Begin 2.0 🚀
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/S8ToH7Zt8gZ4u2iClh/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/S8ToH7Zt8gZ4u2iClh/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fonts" class="anchor"&gt;
  &lt;/a&gt;
  📰 Fonts:
&lt;/h3&gt;

&lt;p&gt;Fonts are an essential part of a website's design :&lt;/p&gt;

&lt;p&gt;We want users to engage with its content. Choosing the right font will exponentially increase the engagement, and hence, the revenues 💲.&lt;/p&gt;

&lt;p&gt;Here are some - &lt;strong&gt;'awesome'&lt;/strong&gt; places to get the best-suited Fonts,&lt;/p&gt;

&lt;p&gt;for your site 😉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LVoWEmp---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ui0td58jv4je4w5eg5pj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LVoWEmp---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ui0td58jv4je4w5eg5pj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📝 &lt;a href="https://fontjoy.com/"&gt;Font Joy&lt;/a&gt;&lt;br&gt;
📝 &lt;a href="https://www.fontget.com/"&gt;Font Get&lt;/a&gt;&lt;br&gt;
📝 &lt;a href="https://fontpair.co/"&gt;Font Pair&lt;/a&gt;&lt;br&gt;
📝 &lt;a href="https://www.fontspace.com/"&gt;Font Space&lt;/a&gt;&lt;br&gt;
📝 &lt;a href="https://befonts.com/"&gt;Befonts&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#colors" class="anchor"&gt;
  &lt;/a&gt;
  🎨 Colors:
&lt;/h3&gt;

&lt;p&gt;Like Fonts - Colors play a major role in the design of a website.&lt;/p&gt;

&lt;p&gt;There are many theories on how to select a color palette, and what amount of each, should be used.&lt;/p&gt;

&lt;p&gt;Here are some &lt;strong&gt;'Awesome'&lt;/strong&gt; places to get the best-suited color-palettes : &lt;/p&gt;

&lt;p&gt;for your site 😉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WGIz1t1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8tkakbfo8kusca9v2igl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WGIz1t1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8tkakbfo8kusca9v2igl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👩‍🎨 &lt;a href="https://material.io/resources/color/"&gt;Google Material Color&lt;/a&gt;&lt;br&gt;
👩‍🎨 &lt;a href="https://www.palettelist.com/"&gt;Palette List&lt;/a&gt;&lt;br&gt;
👩‍🎨 &lt;a href="https://www.materialpalette.com/"&gt;Material Palette&lt;/a&gt;&lt;br&gt;
👩‍🎨 &lt;a href="https://mycolor.space/"&gt;ColorSpace&lt;/a&gt;&lt;br&gt;
👩‍🎨 &lt;a href="https://flatuicolors.com/"&gt;Flat UI Color&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stock-photos" class="anchor"&gt;
  &lt;/a&gt;
  🖼️ Stock Photos:
&lt;/h3&gt;

&lt;p&gt;Images are the next most important part, of website design. No one wants their images with a watermark on them. &lt;/p&gt;

&lt;p&gt;Here are some &lt;strong&gt;'awesome'&lt;/strong&gt; places to get the best-suited stock photos : &lt;/p&gt;

&lt;p&gt;for your site 😉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XMuMsTvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i6uaa7htehxrq4ui3qpk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XMuMsTvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i6uaa7htehxrq4ui3qpk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🖼️ &lt;a href="https://burst.shopify.com/"&gt;Burst&lt;/a&gt;&lt;br&gt;
🖼️ &lt;a href="https://gratisography.com/"&gt;Gratisography&lt;/a&gt;&lt;br&gt;
🖼️ &lt;a href="https://www.lifeofpix.com/"&gt;Life of Pix&lt;/a&gt;&lt;br&gt;
🖼️ &lt;a href="https://stocksnap.io/"&gt;Stock Snap&lt;/a&gt;&lt;br&gt;
🖼️ &lt;a href="https://morguefile.com/"&gt;Morguefile&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ui-graphics" class="anchor"&gt;
  &lt;/a&gt;
  🧙‍♂️ UI Graphics
&lt;/h3&gt;

&lt;p&gt;UI graphics have become a new trend in modern websites, and they really do give a personal touch to your website. &lt;/p&gt;

&lt;p&gt;With tools like Figma, you can create your very own graphics too !&lt;/p&gt;

&lt;p&gt;Here are some &lt;strong&gt;'awesome'&lt;/strong&gt; places to get the best-suited graphics &lt;/p&gt;

&lt;p&gt;for your site 😉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fFeG-EAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/66tmudtxlzd3wdua3rra.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFeG-EAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/66tmudtxlzd3wdua3rra.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🎪 &lt;a href="https://error404.fun/"&gt;404 illustration&lt;/a&gt;&lt;br&gt;
🎪 &lt;a href="https://www.drawkit.io/"&gt;Draw Kit&lt;/a&gt;&lt;br&gt;
🎪 &lt;a href="https://absurd.design/"&gt;Absurd Design&lt;/a&gt;&lt;br&gt;
🎪 &lt;a href="https://www.manypixels.co/gallery"&gt;Many Pixels&lt;/a&gt;&lt;br&gt;
🎪 &lt;a href="https://www.openpeeps.com/"&gt;OpenPeeps&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it for this week folks 🥳🖐️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/fxe8v45NNXFd4jdaNI/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/fxe8v45NNXFd4jdaNI/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will see you next Monday, with more Awesomosa😉 Resources. &lt;/p&gt;

&lt;p&gt;Until then, we are connected on :&lt;/p&gt;

&lt;p&gt;Twitter &lt;a href="https://bit.ly/3cOfh44"&gt;@XenoxDev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wait: Why should you follow us on Twitter though ? &lt;/p&gt;

&lt;p&gt;Because - On our twitter, you'll get to be a part of weekly dev discussions, know about more useful dev stuff, that'll upgrade you from being a dev sidekick, to being a dev Superhero !&lt;/p&gt;

&lt;p&gt;So, what're you waiting for ? Check it out ! 'cuz you will learn a lot, and programmer memes will tickle your funny bone - when coding becomes too bland 🎃😂&lt;/p&gt;

&lt;p&gt;We post regular updates about coding tips and how-to tutorials of the latest developments in tech ! This will keep you way ahead, and we'll have a friend ! Will love to see you there, then 😉 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.getrevue.co/profile/xenoxdev"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---rwoD-wZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7ztogfeze1yx31dkrus9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>CSS Dino game</title>
      <author>Alvaro Montoro</author>
      <pubDate>Mon, 15 Feb 2021 15:25:34 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/css-dino-game-1e20</link>
      <guid>https://dev.to/alvaromontoro/css-dino-game-1e20</guid>
      <description>&lt;p&gt;You probably have seen one of Chrome's "easter eggs": a game of a jumping dinosaur that show us with the "no internet connection" error page. If you haven't seen it, you can go to Chrome, and type &lt;code&gt;chrome://dino&lt;/code&gt; into the address bar.&lt;/p&gt;

&lt;p&gt;This weekend, I developed a small version of that game just using HTML and CSS, without a single line of JavaScript and without using images.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: the game changes the values of CSS variables on animations, and not all browsers like that. &lt;strong&gt;For best results, check the game on Chrome&lt;/strong&gt;. If you cannot play, here's a &lt;a href="https://www.youtube.com/watch?v=dzrwXWI17dE"&gt;video of how it looks&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can see a &lt;a href="https://codepen.io/alvaromontoro/full/NWbrbzO"&gt;demo on Codepen&lt;/a&gt; (click on the dinosaur to make it jump before the cactus):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/NWbrbzO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Some fun facts about the game:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is responsive: it will adapt to large or small screens&lt;/li&gt;
&lt;li&gt;It is customizable: you can change speed, colors, obstacle number...&lt;/li&gt;
&lt;li&gt;It is good for practicing CSS animations and relative units.&lt;/li&gt;
&lt;li&gt;It only works on Chromium-based browsers (not on purpose 😭)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Initially, the game had a different dinosaur, it was bigger and more rounded, but I didn't fully like how it looked, so I changed it a little to make it look more like the original version from Chrome.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ajfgk91H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5b0675x4tp5k6zzstg6o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ajfgk91H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5b0675x4tp5k6zzstg6o.png" alt="Screenshot of the start screen of CSS Dino, the dinosaur is slightly bigger and rounder, the font is Helvetica which is nice and round"&gt;&lt;/a&gt;&lt;/p&gt;
This was the initial look of the game&lt;br&gt; 



&lt;p&gt;I kept the original design behind a checkbox (all done with CSS again), but the pixelated drawings are now the default... and honestly they look much better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works" class="anchor"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;The idea of the game is to reach the end of the course without hitting any cacti on the way. You can skip a cactus by clicking on the dinosaur right before it reaches the obstacle...&lt;/p&gt;

&lt;p&gt;So, how is it done? It has 3 main parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The dinosaur&lt;/li&gt;
&lt;li&gt;The cacti&lt;/li&gt;
&lt;li&gt;The messages (start, win, and game over)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The dinosaur doesn't actually move, it was drawn using shadows (or gradients in the case of the rounded one) and remains static on its side of the screen. It is the world that moves around it.&lt;/p&gt;

&lt;p&gt;The cacti are inside a div which is the one that actually moves from right to left. They are done using &lt;code&gt;label&lt;/code&gt;s that activate checkboxes for each cactus.&lt;/p&gt;

&lt;p&gt;Finally, we have some screens to display the "Play", "Game over", or "You won" messages. They are simple &lt;code&gt;div&lt;/code&gt;s that will be displayed based on the cactus' checked boxes and some CSS variables explained below.&lt;/p&gt;

&lt;p&gt;To avoid some "cheating" we hide the &lt;code&gt;label&lt;/code&gt;s and only make them available for a small fraction of time when they need to be clicked.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_TWlw12K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/20b7e17qije53tokrf12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_TWlw12K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/20b7e17qije53tokrf12.png" alt="Screenshot of the game, some sections are highlighted in red to show where the labels would go"&gt;&lt;/a&gt;&lt;/p&gt;
Coloring the labels that will trigger the jump&lt;br&gt; 



&lt;p&gt;This is the interesting part. We keep track of the number of cactus jumped with the checkboxes, and we keep track of how many should have been jumped with a CSS variable that we update inside an animation (which is what some browsers don't support.)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* The percentages indicate the position of the cactus */&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;cactusSkipped&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;8&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;13&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;13&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;20&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;25&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;25&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;30&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;30&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;36&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;36&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;41&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;41&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;45&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;45&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;55&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;55&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;63&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;63&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;70&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;70&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;75&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;75&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;81&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;81&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;86&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;86&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;92&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;92&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;97&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;97&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;By using the CSS functions &lt;code&gt;calc&lt;/code&gt; and &lt;code&gt;min&lt;/code&gt; we can calculate if the number of cacti jumped is the number of cacti that should have been jumped and show the game over message accordingly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;While writing for it, I realized that some of the things are overcomplicated. For example, instead of using checkboxes for the cactus, it would be easier to have radio buttons.&lt;/p&gt;

&lt;p&gt;Also, it could be improved by adding more background elements which would make it a bit slower too, but closer to the original (e.g. the clouds).&lt;/p&gt;

&lt;p&gt;I may try to make a second version with some improvements, and also try to figure out a way to make it work in all browsers and not just in Chromium.&lt;/p&gt;




&lt;p&gt;If you liked this CSS game, &lt;a href="https://github.com/alvaromontoro/CSS-Games"&gt;check out this repository with more CSS games&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
  </channel>
</rss>
