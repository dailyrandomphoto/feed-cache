<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>A Simple Dashboard to Manage Newsletter with Low-Code</title>
      <author>Revanth Rallabandi</author>
      <pubDate>Thu, 23 Dec 2021 19:07:01 +0000</pubDate>
      <link>https://dev.to/revanthr/a-simple-dashboard-to-manage-newsletter-with-low-code-hca</link>
      <guid>https://dev.to/revanthr/a-simple-dashboard-to-manage-newsletter-with-low-code-hca</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IUlto2Ot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pf542hnynd4hppshqs8c.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IUlto2Ot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pf542hnynd4hppshqs8c.jpeg" alt="Appsmith" width="880" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Automation has become the ‘it’ thing in the world of business. The need for organizations to cut costs has forced them to improve internal processes to provide improved service while also conserving time. Unfortunately, it’s not always easy for teams to streamline everything internally because they often seem like complicated processes — but there are ways around this. Using &lt;a href="https://www.appsmith.com/?utm_source=blog&amp;amp;utm_medium=social&amp;amp;utm_content=internal_tools&amp;amp;utm_campaign=weeklyblog&amp;amp;utm_term=internal_tools"&gt;Appsmith&lt;/a&gt;, developing internal tools can cut costs, time and even improve your workflow by connecting services across specialized platforms with Zapier.&lt;/p&gt;

&lt;p&gt;Zapier has thousands of apps and services that can meet almost all your business automation needs. Integrating Appsmith into the mix opens up a whole new dimension. In this way, you’ll have a more efficient system in which you can connect anything from, say, a MailChimp email campaign to a Google form with data from your ERP or CRM systems delivered within the app!&lt;/p&gt;

&lt;p&gt;In this blog, we will be looking at adding automation to &lt;a href="https://www.appsmith.com/?utm_source=blog&amp;amp;utm_medium=social&amp;amp;utm_content=internal_tools&amp;amp;utm_campaign=weeklyblog&amp;amp;utm_term=internal_tools"&gt;Appsmith&lt;/a&gt; applications using Zapier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s get started!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Building Internal Tools with Appsmith&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Appsmith is a powerful platform to build admin panels, dashboards, crud apps, and internal tools. It allows us to create these applications with little to no coding required. We can build apps that integrate with just about any service you can think of. Today, Appsmith has more than 15+ data source integrations; a few popular ones include Postgres, MongoDB, Google Sheets. That’s one of the best things about Appsmith — it’s completely customizable. But if you want to build apps with Appsmith, you will likely be doing some coding in JavaScript. Yes, we can use JS anywhere across the Appsmith applications to bind, transform and create actions to the data. In terms of UI, Appsmith provides more than 25 widgets with a wide range of styling options. While it’s not hard to use Appsmith to build apps, you will need to start building them to get to the next level with Appsmith.&lt;br&gt;
Now, let’s build a simple newsletter application that can help collect contacts from Appsmith and send Emails using Sendinblue via Zapier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Building UI on Appsmith&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The idea of our newsletter is to collect emails from users and to maintain campaigns on &lt;a href="https://www.appsmith.com/?utm_source=blog&amp;amp;utm_medium=social&amp;amp;utm_content=internal_tools&amp;amp;utm_campaign=weeklyblog&amp;amp;utm_term=internal_tools"&gt;Appsmith&lt;/a&gt;. Let’s get started by following the below steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new account on Appsmith (it’s free!), if you are an existing user, log in to your Appsmith account.&lt;/li&gt;
&lt;li&gt;Create a new application by clicking on the Create New button under the Appsmith dashboard.&lt;/li&gt;
&lt;li&gt;We’ll now see a new Appsmith app with an empty canvas and a sidebar with two directories: Datasources and Widgets.&lt;/li&gt;
&lt;li&gt;Click on the + icon next to the widgets section and drag and drop a container widget onto the canvas. Next, bring in a form widget inside the container and two input widgets inside the form. We can configure widgets and their properties by clicking on the cog icon on the top right. This will open a property pane where we can update all the widgets settings.&lt;/li&gt;
&lt;li&gt;Now set the form labels to name and email.&lt;/li&gt;
&lt;li&gt;Additionally, you can add a text widget to add aesthetics to our application; the following is how the UI looks like:&lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3u8EnGn0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wnjv7h3mvrxmn85ooz22.jpeg" alt="Appsmith" width="700" height="394"&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Excellent, our UI is now ready; let’s create a new Zapier workflow to connect to SendInBlue and manage our newsletter.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set Up Zapier with Appsmith&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Excellent, our UI is now ready; let’s create a new Zapier workflow that can connect to SendInBlue and manage our newsletter.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, create a free account on Zapier and select create custom workflow option from the dashboard.&lt;/li&gt;
&lt;li&gt;On Zapier, every action on the workflow is named on Zap; to establish a connection between Zapier and Appsmith, let’s create a Webhook.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Webhooks are essentially a way to create a communication channel. It allows you to listen to an event and run a command or take any action you want. Here, the event will be triggered by an API call from Appsmith.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now open the Appsmith app, click on the + icon next to the Datasource section from the sidebar, and choose Create New API.&lt;/li&gt;
&lt;li&gt;Copy the webhook URL from Zapier and set the request type to POST. For ease, let’s also rename the query to addContact.&lt;/li&gt;
&lt;li&gt;Here, we also need to send the data from the Form widget we had created earlier; now, let’s use their names to collect data and pass them in the Webhook.&lt;/li&gt;
&lt;li&gt;Navigate to the Body tab on the API and paste the following
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
"name":"{{Input1.text}}",
"email":"{{Input2.text}}"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;This code snippet will send the information from the Input widgets to Appsmith.&lt;/li&gt;
&lt;li&gt;Lastly, set the button onClick property to execute a query and set it to addContact.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, on Zapier, hit the test button and send a request by filling the form on Appsmith and hitting the API. We should see the successful response on Zapier.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HQ8UXSaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5ud0hybqj4qq0vxhpsp.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HQ8UXSaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5ud0hybqj4qq0vxhpsp.jpeg" alt="Appsmith" width="700" height="310"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, click on the + icon beneath the zap to add a new workflow. Select the SendInBlue Zap from the list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We will need to authenticate with SendInBlue from Zapier to access the workflow; for this, you can either create a new account or log in with your existing credentials.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, set the Action type to Add or Update in Sendinblue and fill in the details related to Email; here, we can also use the data sent from the Webhook. In the following screenshot, we select the Email field data to be the email received from the webhook.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SsyBjD4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jwps3ytzc4wew5md6h4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SsyBjD4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jwps3ytzc4wew5md6h4.jpeg" alt="Appsmith" width="700" height="307"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Similarly, you can add a Send Transactional Email in Sendinblue action to the workflow using the Seninblue Zap.
With this, whenever a new user subscribes to the Newsletter, he receives a confirmation Email and will be added to the contact list on Sendinblue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And just like that, we could configure and build an entire Newsletter manager without writing code. This application can be extended in multiple ways, such as creating new email campaigns, filtering contacts, blocking users, and many more! The entire demo app of this tutorial can be found here. This is just one example of how you can automate your apps on &lt;a href="https://www.appsmith.com/?utm_source=blog&amp;amp;utm_medium=social&amp;amp;utm_content=internal_tools&amp;amp;utm_campaign=weeklyblog&amp;amp;utm_term=internal_tools"&gt;Appsmith&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;We hope that you will have a better idea of how to leverage automation in your Appsmith applications. For more information on automating your Appsmith applications, please contact me anytime at &lt;a href="mailto:vihar@appsmith.com"&gt;vihar@appsmith.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>devops</category>
    </item>
    <item>
      <title>To Pair or Not to Pair: Introduction</title>
      <author>ulimi-creator</author>
      <pubDate>Thu, 23 Dec 2021 18:57:54 +0000</pubDate>
      <link>https://dev.to/ulimicreator/to-pair-or-not-to-pair-introduction-1n9</link>
      <guid>https://dev.to/ulimicreator/to-pair-or-not-to-pair-introduction-1n9</guid>
      <description>&lt;p&gt;&lt;strong&gt;Pair programming&lt;/strong&gt;, aka &lt;strong&gt;pairing&lt;/strong&gt;, is more than what  you're probably thinking it is even if you have a good grasp on the words &lt;em&gt;pair&lt;/em&gt; and &lt;em&gt;programming&lt;/em&gt;. &lt;br&gt;
When we have two people working together on the same computer... on the same code, we have a setup for pair programming. Due to reasons, these individuals might find themselves at different locations, when this is so, it is a popular move to use video conferencing tools to accomplish this process.&lt;br&gt;
Now, just putting two people together, in front of a machine displaying some code is not pair programming. With pair programming, you find a situation where two people constantly communicate with each other about the code, find each other's errors and try to bring out the best possible code to write that accomplishes their sought after goal. &lt;strong&gt;These programmers are expected to work as a team.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;So things might seem weird at this point, like how does a person actually share a machine with you?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-does-this-actually-work-"&gt;
  &lt;/a&gt;
  How does this actually work ?
&lt;/h2&gt;

&lt;p&gt;There are two roles, one for each person, obviously. We have &lt;strong&gt;the navigator&lt;/strong&gt; and &lt;strong&gt;the driver&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does the driver do?&lt;/strong&gt;&lt;br&gt;
Just like how a driver interacts with a car, the driver in this case works directly with the machine to actually type in the code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does the navigator do?&lt;/strong&gt;&lt;br&gt;
The navigator exists to give pointers, answer questions from the driver, ask their own questions about the code being written, and intensively read the code as it is typed so that mistakes are noted fast. With a navigator, the driver not only has a pair of eyes on the code, but also another brain on it.&lt;/p&gt;




&lt;p&gt;Both continuously communicate about the project and the best way to do it. The driver can explain -out loud- what is being  typed, and the navigator can keep track of what has been done and what is suppose to come next.&lt;br&gt;
There is no designated person for a role, and participants can and should switch roles as many times as they deem fit so that both programmers can learn from each other.&lt;br&gt;
&lt;strong&gt;Some more common pairings might involve:&lt;/strong&gt;&lt;br&gt;
A junior programmer and a senior programmer, to allow an easier onboarding process by letting a person more familiar with the code base to serve as a navigator.&lt;br&gt;
&lt;strong&gt;or&lt;/strong&gt; &lt;br&gt;
Developers of the same rank so that they can properly learn from each other. &lt;/p&gt;




&lt;p&gt;Like every practice, pair programming can be adjusted to fit the company's workflow.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Learn more with my upcoming post &lt;code&gt;To Pair or Not to Pair: Benefits&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>agile</category>
    </item>
    <item>
      <title>re:Invent 2021 AI / ML announcements part 1</title>
      <author>‪Kareem Negm‬‏</author>
      <pubDate>Thu, 23 Dec 2021 18:27:49 +0000</pubDate>
      <link>https://dev.to/aws-builders/reinvent-2021-ai-ml-announcements-4k4j</link>
      <guid>https://dev.to/aws-builders/reinvent-2021-ai-ml-announcements-4k4j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#amazon-personalize-new-features"&gt;
  &lt;/a&gt;
  Amazon Personalize new features
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I7Ll8P8j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vvuxg95fg5w1vt6pe25.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I7Ll8P8j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vvuxg95fg5w1vt6pe25.png" alt="Image description" width="770" height="308"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;User segmentation and use case optimized recommenders&lt;/p&gt;

&lt;p&gt;What is it?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/ar/about-aws/whats-new/2021/11/amazon-personalize-intelligent-user-segmentation/"&gt;User segmentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon Personalize now offers intelligent user segmentation so you can run more effective prospecting campaigns through your marketing channels. By using two new recipes, you can automatically segment your users based on their interest in different product categories, brands, and more. aws-item-affinity identifies users based on their interest in individual&lt;br&gt;
items, such as movies, songs, or products. aws-item-attribute identifies users based on the attributes they care about, such as genre or price point.&lt;br&gt;
This drives higher engagement with marketing campaigns, increases retention through targeted messaging, and improves the return on investment for your marketing spend. &lt;br&gt;
For sample cost calculations, see &lt;a href="https://aws.amazon.com/personalize/pricing/"&gt;Amazon Personalize pricing.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/ar/about-aws/whats-new/2021/11/recommenders-optimized-personalized-media-entertainment-retail-amazon-personalize/"&gt;Use case optimized recommenders for retail, as well as media and entertainment&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;New recommenders make it faster and easier to deliver high-performing personalized user experiences. You can choose from use cases like “Frequently Bought Together,” “Because You Watched X,” “Top Picks for You,” and more. Map your data to a recommender, and Amazon Personalize chooses the optimal settings for your use case and automates the work of creating and maintaining personalized recommendations. For sample cost calculations, see &lt;a href="https://aws.amazon.com/personalize/pricing/"&gt;Amazon Personalize pricing.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Availability&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;General availability. For more information, check the &lt;a href="https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/"&gt;AWS Regional Services&lt;/a&gt; page.&lt;br&gt;
Resources:&lt;br&gt;
&lt;a href="https://aws.amazon.com/personalize/features/"&gt;Webpage &lt;/a&gt;| &lt;a href="https://virtual.reinvent.awsevents.com/session-virtual/?v2477da705118cc74fd14460db021e1784e2eed5a7982c6482ec95cb2e86d259644b8741959f52a49e0e6908b82a9d860=C7BC82E22351B565134461242CB84AE0DF5A3F734798BF704940A7026A8C708931821CBA5B0EA7DF222C038F3D80A94"&gt;Breakout session recording and slides&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#amazon-kendra-new-capabilities"&gt;
  &lt;/a&gt;
  Amazon Kendra new capabilities
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XKhpl--4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3yngvyopxle3ivk2mpe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XKhpl--4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3yngvyopxle3ivk2mpe.png" alt="Image description" width="880" height="364"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Experience Builder, Search Analytics Dashboard, Custom Document&lt;br&gt;
Enrichment&lt;br&gt;
&lt;strong&gt;What is it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Experience Builder&lt;br&gt;
You can now deploy a fully functional and customizable search experience with Amazon Kendra in a few clicks, without any coding or machine&lt;br&gt;
learning (ML) experience. Experience Builder delivers an intuitive visual workflow to quickly build, customize, and launch your Amazon Kendra– powered search application securely on the cloud. You can start with the ready-to-use search experience template in the builder, which can be customized by simply dragging and dropping the components you want,&lt;br&gt;
such as filters or sorting. You can invite others to collaborate or test your search application for feedback, and then share the project with all users when you’re ready to deploy the experience. Amazon Kendra Experience Builder comes with AWS Single Sign On (SSO) integration that supports popular identity providers such as Microsoft Azure Active Directory (AD) and Okta ,delivering secure end-user SSO authentication while accessing the search experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Search Analytics Dashboard&lt;/strong&gt; &lt;br&gt;
Amazon Kendra Search Analytics Dashboard allows you to better understand quality and usability metrics across your Amazon Kendra–powered search applications. The Search Analytics Dashboard helps administrators and content creators understand how easily end users are finding relevant search results, the quality of the search results, and gaps in&lt;br&gt;
the content. The dashboard provides a snapshot of how your users interact with your search application and how effective your search results are. The analytics data can be viewed in a visual dashboard in the console, or you can build your own dashboards by accessing the Search Analytics data through an API.&lt;br&gt;
The dashboard empowers you to dive deep into search&lt;br&gt;
trends and user behavior to identify insights, as well as bring clarity to potential areas of improvement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Custom Document Enrichment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With Amazon Kendra Custom Document Enrichment capabilities, you can build a custom ingestion pipeline that pre-processes documents before they get indexed into Amazon Kendra. For example, while ingesting content from a repository like SharePoint using AWS connectors, you can enrich documents with additional metadata, convert scanned documents to text, classify documents, extract entities, and further transform the document using custom extract, transform, and load (ETL) processes. The enrichment&lt;br&gt;
is performed by simple rules that can be configured in the console or by invoking functions from AWS Lambda. These functions can optionally call other AWS artificial intelligence (AI) services such as Amazon Comprehend, Amazon Transcribe, or Amazon Textract.&lt;br&gt;
&lt;strong&gt;Resources&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/kendra"&gt;Webpage &lt;/a&gt;| &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/12/amazon-kendra-experience-builder-search-analytics-dashboard-custom-document-enrichment"&gt;Blog post&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#amazon-lex-automated-chatbot-designer-preview"&gt;
  &lt;/a&gt;
  Amazon Lex Automated Chatbot Designer (Preview)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nXdctkMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31eyy99kn87tyfxukn90.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nXdctkMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31eyy99kn87tyfxukn90.png" alt="Image description" width="880" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Accelerate conversation design&lt;br&gt;
&lt;strong&gt;What is it?&lt;/strong&gt;&lt;br&gt;
Amazon Lex Automated Chatbot Designer helps you design chatbots using existing conversation transcripts in hours rather than weeks. Using machine learning (ML), it can analyze thousands of lines of transcripts in a couple of hours and provide an initial bot design that includes common intents and the information needed to fulfill them. You can iterate on the bot design to deliver effective conversational experiences.&lt;/p&gt;

&lt;p&gt;Designing conversational interfaces or chatbots is manual, time consuming, and prone to human errors. Developers often spend hundreds of hours analyzing transcripts and gathering the key information needed to design chatbots. With the Automated Chatbot Designer, you can off-load the analysis of conversation transcripts to Amazon Lex and accelerate the design of your chatbots, reduce errors, and improve your customer experience.&lt;br&gt;
You can try the Automated Chatbot Designer in Preview for free.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits&lt;/strong&gt;:&lt;br&gt;
• Reduce manual effort. Analyze thousands of lines of transcripts to discover intents and compile a list of information required to fulfill them, reducing&lt;br&gt;
manual effort in conversation design.&lt;br&gt;
• Expedite conversation design. Automatically surface an initial bot design that you can then refine to launch conversational experiences faster.&lt;br&gt;
• Improve customer experience. Help your bot understand customers better by minimizing ambiguity between intents. Ensure that intents are well defined&lt;br&gt;
and well separated to avoid frustration and improve customer experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Availability&lt;/strong&gt;:&lt;br&gt;
Amazon Lex is available in 12 AWS Regions. For more information, check the &lt;a href="https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/"&gt;AWS Regional Services&lt;/a&gt; page.&lt;br&gt;
Resources:&lt;br&gt;
&lt;a href="https://aws.amazon.com/lex"&gt;Webpage &lt;/a&gt;| &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/12/amazon-lex-automated-chatbox-designer"&gt;Blog post&lt;/a&gt;&lt;/p&gt;




</description>
    </item>
    <item>
      <title>JWT_</title>
      <author>Nafisa Muntaha</author>
      <pubDate>Thu, 23 Dec 2021 18:17:23 +0000</pubDate>
      <link>https://dev.to/nafisamuntaha7/jwt-1983</link>
      <guid>https://dev.to/nafisamuntaha7/jwt-1983</guid>
      <description>&lt;h2&gt;
  &lt;a href="#jwt"&gt;
  &lt;/a&gt;
  JWT
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;JWT stands for JSON Web Token. It is used to share security information between the client and server-side.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;JWT is used just for authorization. Authorization is mainly what makes sure that the user which sends a request to the server is the same person who logged in. It means it is authorized if the user has access to the system.&lt;/p&gt;

&lt;p&gt;JWT uses a web token for this authorization. It works like this- &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It executes the authentication process. Then the server creates a JSON web token, which we know stands for JWT, and creates a secret key so the server can check with that if the user is invalid based on that secret key. And then it takes the web token and sends it to the browser and it will send a request to the server with the JWT token. It verifies it so that it can check if the secret key and user information are the same as before to know it is valid or invalid. And if the user is valid, it sends the response back to the server. &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>jwt</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>3 Golden Tips to Increase Click Rates with Email Marketing</title>
      <author>Guaranteed Website Visitors</author>
      <pubDate>Thu, 23 Dec 2021 18:14:44 +0000</pubDate>
      <link>https://dev.to/getrealvisitors/3-golden-tips-to-increase-click-rates-with-email-marketing-2ng9</link>
      <guid>https://dev.to/getrealvisitors/3-golden-tips-to-increase-click-rates-with-email-marketing-2ng9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#click-rates-with-email-marketing"&gt;
  &lt;/a&gt;
  Click Rates with Email Marketing
&lt;/h2&gt;

&lt;p&gt;There are various tools and methods in the field of internet marketing and digital marketing , one of the most powerful and main of which is email marketing. Especially these days its importance has become more obvious.&lt;br&gt;
If we can improve our email creation skills, we can easily overtake our competitors.&lt;br&gt;
We also need to know that email marketing has many benefits. Its advantages include cheapness, convenience and..&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#click-rate"&gt;
  &lt;/a&gt;
  Click rate
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dribbble.com/shots/17127453-How-to-Increase-Email-CTR"&gt;Email click-through rate (CTR)&lt;/a&gt; is the ratio of the number of subscribers who clicked on at least one link in the email to the total number of emails received. It is usually expressed as a percentage.&lt;br&gt;
According to studies in the field of email marketing, 73% of marketers evaluate email click-through rate as one of the most important criteria for measuring the success of email campaigns. Because the main purpose of email marketing is to establish and maintain communication and interaction with contacts. Therefore, you should design your email campaigns in a way that can persuade your audience to click on the link in the email. When it comes to email click-through rate (CTR), all parts of an email can be effective in persuading a user to click.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#high-email-clickthrough-rate"&gt;
  &lt;/a&gt;
  High email clickthrough rate
&lt;/h2&gt;

&lt;p&gt;Indicates that the email campaign was related to user interest. Your audience also interacts well with the content of the email sent, and an acceptable percentage of them take the action.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#low-clickthrough-rate"&gt;
  &lt;/a&gt;
  Low click-through rate
&lt;/h2&gt;

&lt;p&gt;This means that you need to make adjustments to future campaigns. The best way to find out if you have a good click-through rate is to compare your performance with the average of your business.&lt;br&gt;
By following a series of very simple golden tips, we can easily increase the opening rate of our sent emails.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#email-marketing"&gt;
  &lt;/a&gt;
  e-mail marketing
&lt;/h2&gt;

&lt;p&gt;These 3 golden methods are the most important very simple tricks that if you use them in your &lt;a href="https://www.targetedwebtraffic.com/buy/targeted-email-marketing/"&gt;targeted email marketing system&lt;/a&gt;, you will see great results to increase your click-through rate.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a good sense of curiosity in the reader in email marketing
The most important factor in opening an email is the curiosity of the audience. Curiosity is a very effective way and encourages the reader to click on the email. Using this method in the title of the email is very effective and increases the rate of opening the email.
For more impact, state the title and the first line in a way that makes the reader curious and makes them feel good. This will allow the user and the client to open your email.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Email subject&lt;br&gt;
Do not use titles such as "hello" and short words to increase email opening rate in email marketing. Also avoid aimless and short titles. The title of your email is very important and will attract the attention of the audience&lt;/p&gt;

&lt;p&gt;Focus on the first line&lt;br&gt;
The best way for your email to be read by the user is how to write the first line of the email. Write the first line of your email very carefully and leave it for that time because it has a very important impact on the reader.&lt;/p&gt;

&lt;p&gt;Use of numbers&lt;br&gt;
Using special numbers will increase the opening rate of your emails in email marketing. For example, write down the duration of a movie that you emailed for advertising. Know that using specific numbers increases the audience's curiosity.&lt;br&gt;
For example:&lt;br&gt;
• 10 ways to earn professional internet money&lt;br&gt;
• You only have until 20:30.&lt;br&gt;
• Download 6:30 minute movie&lt;br&gt;
• and…&lt;/p&gt;

&lt;p&gt;Use question sentences&lt;br&gt;
Using question sentences when sending an email to the user increases the rate of email opening, such as:&lt;br&gt;
• How to increase sales?&lt;br&gt;
Haven't seen the free movie yet?&lt;br&gt;
Why not start your own Internet business?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Identify user interests and audience segmentation for email marketing
If we send an email to all our contacts, if someone does not like or need the content of our email, they will not open it. Or he may be upset and change his view of our brand.
When it comes to email marketing campaigns, it's best to divide your audience into several categories. Send emails to each category based on their interests and needs. Not only does this make them more willing, but it can also increase the click-through rate of the email sent. Having a call-to-action bar in the email will increase the number of customers coming to our website .&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example, suppose you are very interested in pizza, if every week, a 60% discount is sent to your Inbox by your favorite pizza shop, would you not want to open the whole email ?! The answer to this question will definitely be positive.&lt;br&gt;
One of the most effective tricks to increase clickthrough rate is to monitor the interests of each of your users. This method is very simple. You will definitely receive an email or phone number from your buyers.&lt;br&gt;
Track what products and services users provide, and organize and categorize people who are interested in a particular category of your products.&lt;br&gt;
You can then design an email text for each user according to their taste and interest. Or just send emails and suggestions that the person is more interested in receiving.&lt;/p&gt;

&lt;p&gt;e-mail marketing&lt;/p&gt;

&lt;p&gt;Also read this article: Why do businesses need digital marketing?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Customize your emails
Try to be intimate with your audience in the content of email marketing, so that the person feels that this email is designed just for him and after receiving the email, he will feel good. This creates a sense of worth in the person.
Suppose you receive an email from a reputable company with the subject line:
"Mohammad Jan, you have not yet received your 50% discount code ?!"
The person becomes curious to open the email, then reads the contents of the email. It feels valuable to be targeted by a reputable brand and company. This is etched in the recipient's mind and increases the likelihood of the email being reopened.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Conclusion&lt;br&gt;
According to the golden and practical tips of email marketing mentioned above, you can have successful email marketing campaigns. As a result, you will have the highest return with the least cost. Email marketing is one of the most powerful digital marketing tools that plays a role today. It is important in increasing sales and attracting specific audiences.&lt;/p&gt;

&lt;p&gt;Do not miss our internship training courses . In this course you will have real experience of projects.&lt;br&gt;
Source: &lt;a href="https://jenny-business-school-courses.thinkific.com/pages/targeted-email-marketing"&gt;https://jenny-business-school-courses.thinkific.com/pages/targeted-email-marketing&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>python</category>
      <category>react</category>
    </item>
    <item>
      <title>Building an e-commerce Product details component</title>
      <author>Debbie O'Brien</author>
      <pubDate>Thu, 23 Dec 2021 18:04:41 +0000</pubDate>
      <link>https://dev.to/debs_obrien/building-an-e-commerce-product-details-component-2do1</link>
      <guid>https://dev.to/debs_obrien/building-an-e-commerce-product-details-component-2do1</guid>
      <description>&lt;p&gt;I started off with a basic demo of a shoe store which uses components from different scopes including the base-ui scope for base/design components and the e-commerce scope for components that are more e-commerce focused and therefore owned by the e-commerce team. Scopes are a collection of components and can have but do not need to have their own repository.&lt;/p&gt;

&lt;p&gt;It was time to enhance the shoe store and add the detail page for when you click from the shoe's product card. This page should give you more details of the product and allow you to choose what colour and size you want as well as the quantity and finally have a call to action that will add the product to a cart. This page needs to be a dynamic page and render the correct product when clicked.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-where-do-we-start"&gt;
  &lt;/a&gt;
  So where do we start?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mUguW8lE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/debsobrien/image/upload/v1640267551/debbie.codes/blog/product-details-component_2x_isk5aj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mUguW8lE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/debsobrien/image/upload/v1640267551/debbie.codes/blog/product-details-component_2x_isk5aj" alt="Product Details component in Bit" width="880" height="435"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First of all we have a design that shows us what the page should look like. From this design we can break things up into components starting with the biggest component first which is the page component. Then we need to ask ourselves where does this page live? To which scope does it belong to or which team is responsible for it? As we are building a page in the shoe store it was pretty obvious that this page component should belong to the shoe-store scope.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#breaking-down-the-product-page"&gt;
  &lt;/a&gt;
  Breaking down the Product Page
&lt;/h3&gt;

&lt;p&gt;Now when we start breaking up the page into composable components we have 4 components that we need to create:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the product details component&lt;/li&gt;
&lt;li&gt;the reviews component&lt;/li&gt;
&lt;li&gt;the featured products component&lt;/li&gt;
&lt;li&gt;the banner component.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#product-details-component"&gt;
  &lt;/a&gt;
  Product Details Component
&lt;/h2&gt;

&lt;p&gt;For this component we need to now break it down into smaller components and decide who each component belongs too, who should build and own these components and what their names should be. It is at this stage that we also check to see if we already have a component created that we can use or if we need to create a new component or perhaps even enhance an already created component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#naming-and-scopes"&gt;
  &lt;/a&gt;
  Naming and Scopes
&lt;/h3&gt;

&lt;p&gt;We decided that the product details component should be named 'product-details' and should be owned by the e-commerce team as this component can be used not just in the shoe store but also in any of the other stores.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#api-first"&gt;
  &lt;/a&gt;
  API First
&lt;/h3&gt;

&lt;p&gt;We then work out the props needed for this component which in our case is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rating&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;availableSizes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;availableColors&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#listing-out-our-components"&gt;
  &lt;/a&gt;
  Listing out our Components
&lt;/h3&gt;

&lt;p&gt;The components needed to create the product details component are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Img component from base-ui&lt;/li&gt;
&lt;li&gt;heading component from base-ui&lt;/li&gt;
&lt;li&gt;rating component from ecommerce &lt;strong&gt;(new)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;currency component from ecommerce&lt;/li&gt;
&lt;li&gt;text component from base-ui&lt;/li&gt;
&lt;li&gt;counter component from ecommerce &lt;strong&gt;(new)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;button component from base-ui&lt;/li&gt;
&lt;li&gt;input component from base-ui &lt;strong&gt;(new)&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;select size component from ecommerce &lt;strong&gt;(new)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;select component from base-ui &lt;strong&gt;(new)&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;available colors component from base-ui&lt;/li&gt;
&lt;li&gt;addToCart component from ecommerce &lt;strong&gt;(new)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;button component from base-ui&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;shoes entity component

&lt;ul&gt;
&lt;li&gt;product entity component&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we have our components we need to start thinking about the api that we need to build for each of these components. What props do we need in order to build these components?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thinking-in-apis"&gt;
  &lt;/a&gt;
  Thinking in APIs
&lt;/h3&gt;

&lt;p&gt;The rating component needs props of rating. Does it need a stars prop? Or are all ratings stars? These are decisions that we need to make in alignment with the product owner. It might not be necessary to build a rating component that does ratings for any type of ratings. Stars might be enough for this project. It can always be refactored later if needs be with a default of stars so no breaking changes take place.&lt;/p&gt;

&lt;p&gt;What is important is to build what we need and not build for every single possible future need that may or may not happen. It is very easy to over architect a project and end up with a big mess that you have to deal with later. It is not always easy to only build what you need yet build in a way that can easily scale if and when you need to&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-to-build"&gt;
  &lt;/a&gt;
  Time to Build
&lt;/h3&gt;

&lt;p&gt;Once we are clear on how we are going to build the component it is then possible to actually build it. There is no right or wrong way when it comes to building but I will share with you how I built it. Of course I built this alone but if working with a team then certain members of the team might be building some of the components and then they can just be pieced together.&lt;/p&gt;

&lt;p&gt;I also used &lt;a href="http://Bit.dev"&gt;Bit.dev&lt;/a&gt; to build my components but this is not essential to architecting your site and if you don't want to have independent components you can still use this way of thinking to build no matter what framework or library you are using. However the reason I use Bit is so I can build these components independently and in isolation from the other components. This makes me be able to build, see and test the component in its own environment before using it in the more complex component. That way it can easily be re-used in other components as it is fully decoupled from any other component yet can have dependencies of other components if needed.&lt;/p&gt;

&lt;p&gt;We start by building the product-details component in the ecommerce scope. The next component we need is the &lt;a href="https://bit.dev/learn-bit-react/base-ui/ui/img"&gt;Image component&lt;/a&gt; and we already have one created in the base-ui scope so we can just go to that and install it into our project using bit, npm or yarn.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L159X-VP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/debsobrien/image/upload/v1640267551/debbie.codes/blog/Img-component_2x_uxxmep" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L159X-VP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/debsobrien/image/upload/v1640267551/debbie.codes/blog/Img-component_2x_uxxmep" alt="Image Component in Bit" width="880" height="457"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bit &lt;span class="nb"&gt;install&lt;/span&gt; @learn-bit-react/base-ui.ui.img
npm i @learn-bit-react/base-ui.ui.img
yarn add @learn-bit-react/base-ui.ui.img
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then import the component and start composing our product details component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Img&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@learn-bit-react/base-ui.ui.img&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./product-details.module.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ProductDetailsProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTMLAttributes&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLDivElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ProductDetails&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;productDetails&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Img&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"some-img-url"&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"alt"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#building-things-with-props"&gt;
  &lt;/a&gt;
  Building things with props
&lt;/h3&gt;

&lt;p&gt;Now there are a few ways of doing things. You will notice I have just added a static src and alt into the image component. This just allows me to quickly see what I am doing. However it is also possible to directly use props here and start building out the composition file with the mock data. This is how we build things in Bit as the composition file is how we can see the component while running Bits dev server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Img&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@learn-bit-react/base-ui.ui.img&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./product-details.module.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ProductDetailsProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * source of the image
   */&lt;/span&gt;
  &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * alt of the image
   */&lt;/span&gt;
  &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTMLAttributes&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLDivElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ProductDetails&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;productDetails&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Img&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The composition file in Bit would look something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ProductDetails&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./product-details&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BasicProductDetails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ProductDetails&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"real-img-url"&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"image description"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-mock-data"&gt;
  &lt;/a&gt;
  Using mock data
&lt;/h3&gt;

&lt;p&gt;If you have mock data already created as a separate entity component you could just go ahead and directly use that although I prefer to import the mock data component later and make sure it is first working with some basic mock data direct in the component.&lt;/p&gt;

&lt;p&gt;And of course we will have a lot of refactoring later with our api as really we just want to have a product and pass that as the prop rather than passing individual props. It should eventually look something more like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Img&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@learn-bit-react/base-ui.ui.img&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./product-details.module.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ProductDetailsProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * product
   */&lt;/span&gt;
  &lt;span class="na"&gt;product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Shoes&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTMLAttributes&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLDivElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rating&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;availableColors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;availableSizes&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ProductDetails&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;ProductDetailsProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;productDetails&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Img&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      ...
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in the composition file we can just import our mock data and use it directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;mockShoesHome&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@learn-bit-react/shoe-store.entity.shoes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ProductDetails&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./product-details&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ProductDetailsFromMockData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ProductDetails&lt;/span&gt; &lt;span class="na"&gt;product&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;mockShoesHome&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use whatever method works best when building the component depending on who you are working with etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-our-second-component"&gt;
  &lt;/a&gt;
  Adding our Second Component
&lt;/h2&gt;

&lt;p&gt;The next component we need is the &lt;a href="https://bit.dev/learn-bit-react/base-ui/ui/heading"&gt;heading component&lt;/a&gt; to show the name of the shoe. As we already have this component we can simply install it&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VTTvsMSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/debsobrien/image/upload/v1640267551/debbie.codes/blog/heading-component_2x_abv6ps" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VTTvsMSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/debsobrien/image/upload/v1640267551/debbie.codes/blog/heading-component_2x_abv6ps" alt="Heading Component in Bit" width="880" height="463"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bit &lt;span class="nb"&gt;install&lt;/span&gt; @learn-bit-react/base-ui.ui.heading
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then use it in the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Img&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@learn-bit-react/base-ui.ui.img&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@learn-bit-react/base-ui.ui.heading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./product-details.module.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ProductDetailsProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTMLAttributes&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLDivElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ProductDetails&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;productDetails&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Img&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"some-img-url"&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"alt"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt; &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"h1"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Product Name&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-one-of-the-new-components"&gt;
  &lt;/a&gt;
  Building one of the new components
&lt;/h2&gt;

&lt;p&gt;As we see our component taking shape the next component according to our design is one we do not have. This is where the process changes. We need a rating component and there are two things we can do here. We can go build the rating component or we can put a placeholder here and come back to build it later as maybe it might take more time, we might have to do more research or perhaps another member of the team is actually building it.&lt;/p&gt;

&lt;p&gt;Personally I used a placeholder so I could more or less get the product details component to look almost finished and then come back and work on the missing components that needed building.&lt;/p&gt;

&lt;p&gt;To build the &lt;a href="https://bit.dev/learn-bit-react/ecommerce/ui/product/rating"&gt;rating component&lt;/a&gt; I created the component in the ecommerce scope and started building it completely in isolation from the product details component. Once it was working how it should be, I then imported it into my product details component the same way I imported the Image and Heading component using the full package name and then used it in the product details component passing in the necessary values to the props to make it work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wZe1VAWc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/debsobrien/image/upload/v1640267551/debbie.codes/blog/rating-component_2x_unane9" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wZe1VAWc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/debsobrien/image/upload/v1640267551/debbie.codes/blog/rating-component_2x_unane9" alt="Rating Component in Bit" width="880" height="487"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-finished-product"&gt;
  &lt;/a&gt;
  The Finished Product
&lt;/h2&gt;

&lt;p&gt;Once we have finished going through all components we should now have a very decent looking product details component that now needs to make sure the mock data is working correctly and that it is styled as per the design. Of course documenting the component is important so others know how to use the component and what props are available. Proving a live playground makes it much more fun for others to be able to test your component out. And of course adding tests to your components are very important and should be added when possible. That is something I am still working on and trying to improve. With more testing knowledge this of course becomes much easier.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--87fdoN0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/debsobrien/image/upload/v1640267551/debbie.codes/blog/product-details_2x_fziqbi" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--87fdoN0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/debsobrien/image/upload/v1640267551/debbie.codes/blog/product-details_2x_fziqbi" alt="Product Details component in Bit" width="880" height="458"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependency-graph"&gt;
  &lt;/a&gt;
  Dependency Graph
&lt;/h2&gt;

&lt;p&gt;We now have a product details component with a dependency graph showing all the components we used as well as the name and scope of that component and its version. It is also easy to see which component depends on which such as the select-size component from the ecommerce scope which depends on the select component from the base-ui scope.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gjXjXjJC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/debsobrien/image/upload/v1640267551/debbie.codes/blog/dependency-graph-product-details_2x_d657gn" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gjXjXjJC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/debsobrien/image/upload/v1640267551/debbie.codes/blog/dependency-graph-product-details_2x_d657gn" alt="Dependency Graph for Product details component in Bit" width="880" height="584"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-our-component-to-our-page"&gt;
  &lt;/a&gt;
  Adding our component to our page
&lt;/h2&gt;

&lt;p&gt;Once the product details component is finished we can now import it into our product page and make sure it works at app level. There are a few extra things we have to do here such as apply route params to make sure we are showing the right product depending on the route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ProductDetails&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@learn-bit-react/ecommerce.ui.product.product-details&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;allShoes&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@learn-bit-react/shoe-store.entity.shoes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./product.module.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getShoe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shoeId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;allShoes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;shoeId&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;allShoes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shoe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getShoe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ProductDetails&lt;/span&gt; &lt;span class="na"&gt;product&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;shoe&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;reviews component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;featured-products component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;banner component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we need to add our new route to our app with a dynamic id. In the app I use the React Router Routing Provider component that has been created by the Bit team.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bit &lt;span class="nb"&gt;install&lt;/span&gt; @teambit/ui-foundation.ui.navigation.react-router.routing-adapter
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I then import the component and wrap my routes in the routing Provider component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ReactRouterRoutingProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@teambit/ui-foundation.ui.navigation.react-router.routing-adapter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@learn-bit-react/shoe-store.ui.pages.product&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ShoeStoreApp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReactRouterRoutingProvider&lt;/span&gt; &lt;span class="nx"&gt;useBrowserRouter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/product/:id"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;ReactRouterRoutingProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#routing-in-bit-compositions"&gt;
  &lt;/a&gt;
  Routing in Bit Compositions
&lt;/h2&gt;

&lt;p&gt;When working with Bit we need to take a few things into account when working on compositions. As we don't have a browser router we don't have access to params and therefore this page and the app will not work at composition level.&lt;/p&gt;

&lt;p&gt;To fix this we need to work with the memory router from react router which we can import and then wrap our composition in it. We also need to add a routing provider. These components have already been created by teambit so we can go ahead and install them and then use them directly. This will allow our Link component from our product card to correctly link to the right product.&lt;/p&gt;

&lt;p&gt;Our Link component uses the react router navigation link from teambit&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;BaseLink&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@teambit/base-react.navigation.link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MemoryRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ReactRouterRoutingProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@teambit/ui-foundation.ui.navigation.react-router.routing-adapter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ShoeStoreApp&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ShoeStoreBasic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MemoryRouter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReactRouterRoutingProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ShoeStoreApp&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ShoeStoreApp&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ReactRouterRoutingProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;MemoryRouter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As this component is built with ESM there are a few things we need to do in order for it to work until we have better ESM support.&lt;/p&gt;

&lt;p&gt;In our environment component's runtime file we have to sure we are overriding the Jest config with our custom jest config.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;overrideJestConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./jest/jest.config&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The custom Jest config should then ignore the components it needs to ignore. As we are requiring the packages excluder we will need to install it so we can use it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bit &lt;span class="nb"&gt;install&lt;/span&gt; @teambit/dependencies.modules.packages-excluder
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then exclude the packages we want to exclude which in our case is our link component and all teambits components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Override the Jest config to ignore transpiling from specific folders&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reactJestConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@teambit/react/jest/jest.config&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;generateNodeModulesPattern&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@teambit/dependencies.modules.packages-excluder&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;packagesToExclude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@learn-bit-react/base-ui.ui.link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@teambit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;reactJestConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;transformIgnorePatterns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;^.+&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;.module&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;.(css|sass|scss)$&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;generateNodeModulesPattern&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;packagesToExclude&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now use this component just like any other but we will not be able to write any tests for the link component as the test files will be ignored by Jest and it will just show up as if we have no tests even if you write them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We can then continue to build the next component of this page which is the reviews component following the same workflow as we did above and so on until we have the page fully complete.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8j-i7pDk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/debsobrien/image/upload/v1640267551/debbie.codes/blog/shoe-store-app_2x_xbftk9" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8j-i7pDk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/debsobrien/image/upload/v1640267551/debbie.codes/blog/shoe-store-app_2x_xbftk9" alt="Shoe store app in Bit" width="880" height="459"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course our work is still not done here. We have only added the design component for the add to cart button and at the moment this is not going to add anything to a cart. For now it looks good and can pass the design inspection while we work on the next stage of the project. The cart page including the add to cart functionality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#after-thoughts"&gt;
  &lt;/a&gt;
  After thoughts
&lt;/h2&gt;

&lt;p&gt;Once I had built the product details page I then thought about what if I was to use this in the perfume store. The perfume store has no colors or sizes and therefore doesn't need these components. In previous times I would have added an if else clause to this component so that if it received the data of color then render the available colors component else don't render it.&lt;/p&gt;

&lt;p&gt;But by doing this we are going into the building one component to suit many situations. Really we should look at the product component as something related to all products such as name, description, price etc and then add children so that we can build a shoe details component that uses the product details component but expands on it by adding in the shore specific components such as available size and color.&lt;/p&gt;

&lt;p&gt;Again another way of doing this is to create a completely new component of shoe details and not use anything from the ecommerce which means everything can be positioned completely differently form the product details. This is of course building incase one day we want to change things and is probably not necessary at all so for now I prefer to go with the first option of extending the product details component by adding in the shoe specific components only.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-it-has-been-like-to-build-this-in-bit"&gt;
  &lt;/a&gt;
  What it has been like to build this in Bit
&lt;/h2&gt;

&lt;p&gt;We are all used to building things inside our application kinda like a monorepo where we have access to all components all the time. When working with Bit we are working in one workspace. I used the shoe store workspace. But I needed to build components that are part of a different scope, part of a different repo. When creating new components I can choose to which scope they belong to and when exporting them I can add a default scope to the variants section of the workspace for each directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"teambit.workspace/variants"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ecommerce"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"defaultScope"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"learn-bit-react.ecommerce"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"base-ui"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"defaultScope"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"learn-bit-react.base-ui"&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That means I can now build in one workspace yet also build components that belong to and will be exported to another scope. This means that if I don't have enough people on my team I might end up having to manage more than one scope which is perfectly fine and so this gives me a better developer experience. When we import Bit components into other components we always use the full package name which means it is irrelevant if this component is in this workspace or not. The main thing we can't change is the scope name which is used as part of the package name so therefore we need to think about names from the start.&lt;/p&gt;

&lt;p&gt;With Bit there is a cool feature called import which you can use to import any component into your workspace from another workspace should you want to modify them. This might be the case when wanting to improve the API of a component or even just a bug fix. For example when building the available colors component I needed to make changes to it so that it would work with state and being able to just import it into my workspace and work on it without having to clone another repo, tag it and then export it made such a difference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rVMQGUPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/debsobrien/image/upload/v1640267551/debbie.codes/blog/import-component-in-bit_2x_a9p1qs" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rVMQGUPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/debsobrien/image/upload/v1640267551/debbie.codes/blog/import-component-in-bit_2x_a9p1qs" alt="Import component box in Bit" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what about your GitHub repo? GitHub is important for me to be able to go back in time incase something isn't working that was working before. While building I pushed all components into the shoe store repo and once I have finished I can use the eject command from bit to eject the components that I do not want in this workspace and repo.&lt;/p&gt;

&lt;p&gt;When someone wants to work on the ecommerce repo all they have to do is run the bit import command and they will get the new imported version of the available colors component that I already tagged and versioned. If there is any merge conflicts then they can be resolved just like you would with git. This workflow was different to how I would normally work. However once I saw that components were being exported to the right scope and could easily be imported to the correct workspace should another team member need to work on it, it really did feel like a nice way to work. I was able to build things quickly and not have to worry about cloning or linking.&lt;/p&gt;

&lt;p&gt;And of course tagging becomes easy with Bit as it auto tags any dependents. Here by changing the product component the shoe store which uses the product page component also gets a new version, once of course all tests are passing and then running the export command will export both of these components. This means I can easily tag and export components without having to worry about updating components that use the changed component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4D7S7_xf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/debsobrien/image/upload/v1640267544/debbie.codes/blog/CleanShot_2021-12-15_at_14.59.47_2x_jrfex8" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4D7S7_xf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/debsobrien/image/upload/v1640267544/debbie.codes/blog/CleanShot_2021-12-15_at_14.59.47_2x_jrfex8" alt="Terminal showing tagging of components" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo-project"&gt;
  &lt;/a&gt;
  Demo Project
&lt;/h2&gt;

&lt;p&gt;If you want to check out the demo project then here are some links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bit-demos/ecommerce"&gt;GitHub repo for ecommerce components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bit.dev/learn-bit-react/ecommerce/ui/product/product-details"&gt;Product Details component on Bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bit.dev/learn-bit-react/base-ui"&gt;Base ui components on Bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bit.dev/learn-bit-react/shoe-store"&gt;Shoe store app and components on Bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bit-shoe-store.netlify.app"&gt;Shoe store app deployed on Netlify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>architecture</category>
      <category>components</category>
      <category>javascript</category>
      <category>frontend</category>
    </item>
    <item>
      <title>How many programming languages should a person know?</title>
      <author>Shivali Pandey</author>
      <pubDate>Thu, 23 Dec 2021 18:01:50 +0000</pubDate>
      <link>https://dev.to/ajshivali/how-many-programming-languages-should-a-person-know-2lln</link>
      <guid>https://dev.to/ajshivali/how-many-programming-languages-should-a-person-know-2lln</guid>
      <description></description>
      <category>discuss</category>
      <category>programming</category>
      <category>programminglanguage</category>
      <category>career</category>
    </item>
    <item>
      <title>How to create a .ico file with some .png files and NASM</title>
      <author>Zcx</author>
      <pubDate>Thu, 23 Dec 2021 17:58:07 +0000</pubDate>
      <link>https://dev.to/zcx/how-to-create-a-ico-file-with-some-png-files-and-nasm-31om</link>
      <guid>https://dev.to/zcx/how-to-create-a-ico-file-with-some-png-files-and-nasm-31om</guid>
      <description>&lt;p&gt;&lt;strong&gt;PNG files:&lt;/strong&gt; easy to view, edit, etc&lt;br&gt;
&lt;strong&gt;ICO files:&lt;/strong&gt; seemingly opaque, bitmap-based, and scary&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It doesn't have to be this way!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Starting with Windows Vista, ICO files can be created using a handful of PNGs and some fancy file concatenation.&lt;/p&gt;

&lt;p&gt;That's right! This newer "PNG type" of ICO file is essentially just 

&lt;span class="katex-element"&gt;
  &lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;n&amp;gt;0n &amp;gt; 0&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;n&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
 PNGs in a trench coat (the trench coat is a file header).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#technical-details"&gt;
  &lt;/a&gt;
  Technical Details
&lt;/h2&gt;

&lt;p&gt;First, budget out space for three 2-byte fields.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dw 0, 1, NUM_IMAGES
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The first field has to be zero. Reserved fields, am I right? :)&lt;/li&gt;
&lt;li&gt;The second field can be either 1 (for ICO files) or 2 (for CUR files). Since we're talking about ICO files, set it to 1.&lt;/li&gt;
&lt;li&gt;The third field is how many images will be in this ICO file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I feel like the whole point of ICO files is to have multiple images at different resolutions to have better images displayed on the desktop or in UI screens. Thinking thusly, this third field should almost always be greater than 1. Still, you can have an ICO with just one PNG in it and nobody will call you out.&lt;/p&gt;

&lt;p&gt;Next comes one sixteen-byte structure for each image in the ICO file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db WIDTH, HEIGHT, COLORS, 0
dw PLANES, BPP
dd SIZE, OFFSET
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;WIDTH&lt;/code&gt; and &lt;code&gt;HEIGHT&lt;/code&gt; (in pixels) are interpreted as unsigned bytes and are therefore limited to values 0-255. If the value is 0, it means that the image's dimension is 256 pixels.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;COLORS&lt;/code&gt; is the number of colors in the color palette of the image. It seems that even if you are using paletted PNG files, this can be set to 0 and Windows will figure out the palette information on its own.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/ICO_(file_format)#cite_note-11"&gt;There's another byte of reserved space :)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PLANES&lt;/code&gt; is the number of color planes in the image. I've never set this to anything but 0. &lt;a href="https://en.wikipedia.org/wiki/ICO_(file_format)#cite_note-12"&gt;Here's an interesting Wikipedia footnote with some more info about this field.&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;BPP&lt;/code&gt; is the bits per pixel of the image. This is another field I've always set to 0. &lt;a href="https://en.wikipedia.org/wiki/ICO_(file_format)#cite_note-13"&gt;It seems like setting it to 0 will let Windows infer BPP from the PNG itself.&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;SIZE&lt;/code&gt; is the size of the PNG.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;OFFSET&lt;/code&gt; is the absolute location in this ICO where this PNG is located. Another way of asking "how many bytes into the file can I find this PNG?"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you've got each of those structures in place, start concat-ing PNGs onto that file. No, seriously, you can just add PNGs onto the end of the file and so long as you set the &lt;code&gt;SIZE&lt;/code&gt; and &lt;code&gt;OFFSET&lt;/code&gt; fields you're good.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nasm-template"&gt;
  &lt;/a&gt;
  NASM template
&lt;/h2&gt;

&lt;p&gt;Here's the general template I use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;%define R(x) (x - $$)

%macro IMG 2
    db %2, %2, 0, 0
    dw 0, 0
    dd %1.len, R(%1)
%endmacro

%macro IMGDAT 2
    %1: incbin %2
    .len equ $ - %1
%endmacro

NUM_IMAGES equ 5
dw 0, 1, NUM_IMAGES

IMG a, 0
IMG b, 128
IMG c, 64
IMG d, 32
IMG e, 16

IMGDAT a, "256.png"
IMGDAT b, "128.png"
IMGDAT c, "64.png"
IMGDAT d, "32.png"
IMGDAT e, "16.png"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you name that file &lt;code&gt;x.ico.s&lt;/code&gt;, NASM will make &lt;code&gt;x.ico&lt;/code&gt; from it without needing to specify the filename with &lt;code&gt;-o&lt;/code&gt;! Then all you need is a set of PNGs you want to bundle in the same directory and you can generate an ICO out of them.&lt;/p&gt;

&lt;p&gt;Boom. &lt;code&gt;nasm x.ico.s&lt;/code&gt; makes &lt;code&gt;x.ico&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/oldnewthing/20101018-00/?p=12513"&gt;Further Reading 1&lt;/a&gt;&lt;br&gt;
&lt;a href="https://devblogs.microsoft.com/oldnewthing/20101022-00/?p=12473"&gt;Further Reading 2&lt;/a&gt;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/ICO_(file_format)"&gt;Further Reading 3&lt;/a&gt;&lt;/p&gt;

</description>
      <category>windows</category>
      <category>nasm</category>
    </item>
    <item>
      <title>Listen to the DevNews Season 6 Finale!</title>
      <author>dev.to staff</author>
      <pubDate>Thu, 23 Dec 2021 17:54:37 +0000</pubDate>
      <link>https://dev.to/devteam/listen-to-the-devnews-season-6-finale-1fm1</link>
      <guid>https://dev.to/devteam/listen-to-the-devnews-season-6-finale-1fm1</guid>
      <description>&lt;p&gt;The DevNews season 6 finale is here already! &lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devnews/s6-e8-the-web3-debate-and-the-world-s-first-organic-reproducing-robots"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S6:E8 - The Web3 Debate and the World’s First Organic Reproducing Robots&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devnews"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevNews
      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s6-e8-the-web3-debate-and-the-world-s-first-organic-reproducing-robots" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s6-e8-the-web3-debate-and-the-world-s-first-organic-reproducing-robots" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s6-e8-the-web3-debate-and-the-world-s-first-organic-reproducing-robots" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s6-e8-the-web3-debate-and-the-world-s-first-organic-reproducing-robots" alt="DevNews" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJPvwj98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XOSCOlKI--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s6-e8-the-web3-debate-and-the-world-s-first-organic-reproducing-robots"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devnews/s6-e8-the-web3-debate-and-the-world-s-first-organic-reproducing-robots"&gt;
      &lt;img id="episode-profile-image" alt="S6:E8 - The Web3 Debate and the World’s First Organic Reproducing Robots" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--84VpOv6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3GWkSFQs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Hosts:&lt;/strong&gt; &lt;a class="mentioned-user" href="https://dev.to/saronyitbarek"&gt;@saronyitbarek&lt;/a&gt; &amp;amp; &lt;a class="mentioned-user" href="https://dev.to/joshpuetz"&gt;@joshpuetz&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Guests:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://twitter.com/saminacodes"&gt;Samina Kabir&lt;/a&gt;&lt;/strong&gt;, Developer Advocate @ Decentology&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://twitter.com/YourETHGirl"&gt;Niharika Singh&lt;/a&gt;&lt;/strong&gt;, Product Manager @ Decentology&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://twitter.com/Kriegmerica"&gt;Sam Kriegman&lt;/a&gt;&lt;/strong&gt; Postdoctoral Fellow @ The Allen Discovery Center at Tufts University and the Wyss Institute at Harvard University&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#in-this-episode-we-talk-about-some-criticisms-of-web3-which-tesla-ceo-elon-musk-and-twitter-cofounder-jack-dorsey-wrote-this-week-and-then-well-speak-to-two-leaders-at-a-web3-company-about-what-in-the-world-web3-is-and-their-perspectives-on-it-then-well-speak-with-a-postdoctoral-fellow-at-harvard-and-tufts-about-his-research-with-the-worlds-first-reproducing-organic-robots"&gt;
  &lt;/a&gt;
  In this episode, we talk about some criticisms of web3, which Tesla CEO Elon Musk, and Twitter co-founder Jack Dorsey wrote this week, and then we’ll speak to two leaders at a web3 company about what in the world web3 is and their perspectives on it. Then we’ll speak with a postdoctoral fellow at Harvard and Tufts about his research with the world’s first reproducing organic robots.
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devnews"&gt;follow DevNews&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; &lt;em&gt;— or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Quick Listening Links&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s6-e8-the-web3-debate-and-the-worlds/id1525581923?i=1000545901485"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/4X98jMqVJDPjYmDNNUtMPb"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cDovL2ZlZWRzLmNvZGVuZXdiaWUub3JnL2Rldm5ld3NfcG9kY2FzdC54bWw/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZuZXdzLzQ4?sa=X&amp;amp;ved=0CAQQkfYCahcKEwj4wLj1vfr0AhUAAAAAHQAAAAAQCg"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stitcher.com/show/devnews/episode/s6-e7-an-intricate-job-recruitment-scam-a-law-against-some-ai-powered-recruitment-software-and-we-give-you-holiday-tech-support-support-89059737"&gt;Stitcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devnews/s6e8-the-web3-debate-and-the-uUyFaRW-BAE/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevNews-p1352512/?topicId=168621372"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.dev/podcasts/devnews/episodes/240"&gt;DEV Pods website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  &lt;em&gt;Acknowledgements&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt; for producing &amp;amp; mixing the show&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;Our Season 6 sponsors: &lt;a href="https://www.hackatom.org/"&gt;Cosmos HackAtom&lt;/a&gt; &amp;amp; &lt;a href="https://www.microsoft.com/en-us/dev-community/Event/Register?eventId=DevNewsPodcast_FI2YKJLHvJdZ&amp;amp;ocid=aid3038582"&gt;Microsoft Azure&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We hope you enjoyed season 6 of DevNews 📰 We look forward to returning for all new episodes in the new year. &lt;/p&gt;




</description>
      <category>news</category>
      <category>podcast</category>
    </item>
    <item>
      <title>7 Steps to Reduce Code Smell 🦨</title>
      <author>Conor Bronsdon</author>
      <pubDate>Thu, 23 Dec 2021 17:45:17 +0000</pubDate>
      <link>https://dev.to/linearb/7-steps-to-reduce-code-smell-2pjh</link>
      <guid>https://dev.to/linearb/7-steps-to-reduce-code-smell-2pjh</guid>
      <description>&lt;p&gt;Code smell is a way to describe code that hasn’t aged well and has the potential for a lot of issues. &lt;/p&gt;

&lt;p&gt;It usually is the source of a lot of hot fixes or workarounds keeping it functional. My most common reflex is to rewrite it. However, if I’m not careful, I’ll waste an entire day and not improve anything.&lt;/p&gt;

&lt;p&gt;After a decade of programming, here are my 7 steps to reduce code smell gradually.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-0-admit-there-is-a-problem"&gt;
  &lt;/a&gt;
  Step 0: Admit there is a problem
&lt;/h2&gt;

&lt;p&gt;I start to recognize my code is smelly when I start saying things like “that time only took an hour.”&lt;/p&gt;

&lt;p&gt;I’m usually doing something simple, like adding another field to a form or another schedule for a customer. I quickly add in code because it feels like the easiest thing to do and ship the feature. There are so many other things on my plate, I don’t have time for this, I’ll say to myself.&lt;/p&gt;

&lt;p&gt;By the 5th or 6th hour I’ve hacked the same spot, I realize, had I rewritten it sooner, I would have actually saved time. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-identify-spots-to-clean"&gt;
  &lt;/a&gt;
  Step 1: Identify spots to clean
&lt;/h2&gt;

&lt;p&gt;Smelly code is so disorganized.&lt;/p&gt;

&lt;p&gt;Is it really smelly or do I just not understand it? It’s very tempting to always default to a rewrite. If I write all the code, I’ll understand it. But who is to say the next person who looks at it will?&lt;/p&gt;

&lt;p&gt;Similar to profiling code to identify the slowest spot, I work to identify the place that smells the most. Are there sections of the code that new devs are always struggling with? Are there frequent small changes that require touching lots of different files or methods?&lt;/p&gt;

&lt;p&gt;Creating a list of smelly code helps identify which sections of code need the most attention.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-pick-the-worst-spot"&gt;
  &lt;/a&gt;
  Step 2: Pick the worst spot
&lt;/h2&gt;

&lt;p&gt;Smelly code is like dirty dishes.&lt;/p&gt;

&lt;p&gt;With a stack of dishes, I’ll plug my nose until I dispose of the rotting food that’s causing the stink. It was easy to blame the whole pile, but for the most part, all of the other dishes are fairly clean. They don’t need immediate attention. The rotting smell came from something I forgot to clean off when I was in a hurry.&lt;/p&gt;

&lt;p&gt;When there is a piece of code that’s really rotten, it’s often hidden somewhere in the pile. Maybe an abstraction went too far, spreading a hundred lines of code across dozens of files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BasXM8HK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kxhd27wtfo5s8bcniyx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BasXM8HK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kxhd27wtfo5s8bcniyx.png" alt="Stinky, smelly code" width="751" height="917"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I keep in mind that I need to fix the worst smell; most of the other code is good enough and doesn’t need my immediate attention. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-resist-the-urge-to-do-everything"&gt;
  &lt;/a&gt;
  Step 3: Resist the urge to do everything
&lt;/h2&gt;

&lt;p&gt;Smelly code is never-ending.&lt;/p&gt;

&lt;p&gt;Perhaps the hardest part of improving a code base is scoping it to one thing. It’s so liberating to finally get a chance to clean up, that I can easily take it too far. I’ll think, “While I’m at it, I might as well clean up this… oh! and that other thing needs fixing too.” &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resist!&lt;/strong&gt; Do not do everything. &lt;/p&gt;

&lt;p&gt;If I try to tackle everything, I’m not going to finish. Even more likely, it’s not going to pass code review. It’s better to do one piece at a time - ya know, like eating an elephant. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-make-sure-its-better"&gt;
  &lt;/a&gt;
  Step 4: Make sure it’s better
&lt;/h2&gt;

&lt;p&gt;Smelly code has edge cases.&lt;/p&gt;

&lt;p&gt;Inevitably, in the process of rewriting, I discover why the code was written that way in the first place. I might even stumble across a can of worms. At that point, I realize my not-so-dimwitted co-worker wasn’t as dumb as I thought (or even more likely, I discover I was the one who wrote the code originally 🤦‍♂️).&lt;/p&gt;

&lt;p&gt;After learning all the edge cases, I’ll be tempted to walk away.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-dont-immediately-give-up"&gt;
  &lt;/a&gt;
  Step 5: Don’t immediately give up
&lt;/h2&gt;

&lt;p&gt;Smelly code is messy to work with.&lt;/p&gt;

&lt;p&gt;I’m frustrated imagining how far away the current code is from a better solution. I’ve got the code in my head, I know the edge cases, and I’ve got the context. It’s important not to give up as the solution may be right around the corner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_JGl2-QF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmoey7npex87r38arcga.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_JGl2-QF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmoey7npex87r38arcga.png" alt="Mount Codeverest" width="880" height="473"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I keep thinking about it while I go for a walk. Maybe even take a break. Solutions often come to me while I’m on walks or in the shower.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-use-the-coworker-bobblehead"&gt;
  &lt;/a&gt;
  Step 6: Use the co-worker bobblehead
&lt;/h2&gt;

&lt;p&gt;Smelly code needs attention.&lt;/p&gt;

&lt;p&gt;I steal my co-worker’s bobblehead and explain aloud what I’m doing. In the process, I figure out what I've missed or overlooked. &lt;/p&gt;

&lt;p&gt;If a bobble head isn’t available, I resort to using my actual co-workers. (I’m checking my assumptions by walking them through what I’m thinking step by step.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-7-publish-or-throw-in-the-towel"&gt;
  &lt;/a&gt;
  Step 7: Publish or throw in the towel
&lt;/h2&gt;

&lt;p&gt;Smelly code can improve.&lt;/p&gt;

&lt;p&gt;At the end of my steps I have a complete solution or I’m banging my head on the keyboard. If it’s the first, I push the change and take a breath of fresh air. If it’s the second, I commit it to a branch and plan to revisit another day. Sometimes we can’t have nice things.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rinse-and-repeat"&gt;
  &lt;/a&gt;
  Rinse and repeat
&lt;/h2&gt;

&lt;p&gt;The depth I go into each step changes based on complexity or how critical the code is. Sometimes I can run through each of the steps in a few minutes, other times it’s spread out over a few weeks. It really depends on what I’m working on.&lt;/p&gt;

&lt;p&gt;Running through these steps helps me gradually improve my code. There’s nothing better than finally getting a fix for some smelly code merged and into production. Sometimes we can have nice things.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was written exclusively for &lt;a href="https://devinterrupted.com/7-steps-to-reduce-code-smell/"&gt;devinterrupted&lt;/a&gt; by Dan Willoughby, founder of Tellspin, an on-call scheduler in Slack for DevOps and developers (&lt;a href="https://tellspin.app"&gt;https://tellspin.app&lt;/a&gt;) Helping workspaces reduce their contact footprint, resolve incidents faster, and regain deep focus.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;Starved for top-level software engineering content? Need some good tips on how to manage your team? This article is inspired by &lt;a href="https://devinterrupted.com/podcasts/"&gt;Dev Interrupted&lt;/a&gt; - the go-to podcast for engineering leaders.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dev Interrupted features expert guests from around the world to explore strategy and day-to-day topics ranging from dev team metrics to accelerating delivery. With new guests every week from Google to small startups, the Dev Interrupted Podcast is a fresh look at the world of software engineering and engineering management.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devinterrupted.com/podcasts/"&gt;&lt;strong&gt;&lt;em&gt;Listen and subscribe on your streaming service of choice today.&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hDZHzvxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpadq6f64w3zdescv1s3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hDZHzvxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpadq6f64w3zdescv1s3.png" alt="https://devinterrupted.com/podcasts/" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>codereview</category>
      <category>tutorial</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Relational VS Non-Relational Databases</title>
      <author>Aulad Himel</author>
      <pubDate>Thu, 23 Dec 2021 17:35:50 +0000</pubDate>
      <link>https://dev.to/auladhimel/relational-vs-non-relational-databases-4mpn</link>
      <guid>https://dev.to/auladhimel/relational-vs-non-relational-databases-4mpn</guid>
      <description>&lt;p&gt;For storing data of application choosing the right database is very important. Sometimes choosing the relational database might seem more natural but sometimes this choice may not be successful. Here I am trying to explain the differences between relational and non-relational databases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#relational-database"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Relational Database&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A relational database organizes data into one or more tables which consists of columns and rows. All data is organized in the table where columns indicate attributes and every row indicates a single data item which is called records. In simple words, All the information in Relational Database is structured and is organized in tables. Here the primary key is something that identifies each item uniquely and a primary key can contain one or more columns of a table. Different tables can establish relations between them by different foreign keys. SQL is used for executing queries, retrieve data, and editing data. It is used for communicating with a Relational Database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages of Relational Database&lt;/strong&gt;&lt;br&gt;
A relational database is great for structured data. And it uses an existing query language (SQL) for making the relation between them. It can handle lots of complex queries and database transactions of data as here data in tables are very well connected by using unique keys. It is great for complex queries and it has easy data navigation. For a high level of data integration transactions are secure and it is very high reliability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages of Relational Databases&lt;/strong&gt;&lt;br&gt;
It has an up-front schema definition that means it has to maintain schema always. Here Relational Database has no adaptation to changing requirements. For that dynamic changes can affect all the other items in the same table and here data processing is slow. For getting high-performance expensive hardware is required.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nonrelational-database"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Non-Relational Database&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A non-relational database refers to a database that has no tabular schema of rows and columns. It maintains an optimized storage model which is very flexible. &lt;br&gt;
It is also known as a NoSQL database that means “Not Only SQL”. The Meaning of that line is you don't need to use just SQL only to query the database, you can use any language which you prefer. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages of Non-Relational Database&lt;/strong&gt;&lt;br&gt;
Non-Relational Databases are designed for use with low-cost commodity hardware. Here huge volumes of data can be easily handled. It can be easily installed in cheap commodity hardware. That means we can process and store more data within less cost. Non-Relational databases need no schemas.  Non-Relational databases technologies have excellent integrated caching capabilities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages of Non-Relational Database&lt;/strong&gt;&lt;br&gt;
Non-Relational databases don’t have reliability functions. It is not compatible with SQL. We need a manual query language that makes things slower and more complex. It is less stable and may have fewer functionalities compared with a relational database.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>database</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Complete Guide Of ALL HTML tags</title>
      <author>elinabey</author>
      <pubDate>Thu, 23 Dec 2021 17:13:15 +0000</pubDate>
      <link>https://dev.to/elinabey/the-complete-guide-of-all-html-tags-51o9</link>
      <guid>https://dev.to/elinabey/the-complete-guide-of-all-html-tags-51o9</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I8ZCbrW2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0goz94xmucb8iehflhs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I8ZCbrW2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0goz94xmucb8iehflhs.jpg" alt="Complete Guide Of ALL HTML tags" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Complete Guide Of HTML tags, in a single tutorial, you will learn All HTML Tags with examples. HTML tags like a keyword that describes how the web browser will display the content. With the help of HTML tags, A Browser can differentiate the HTML content and simple content. However, HTML tags having three important parts:&lt;br&gt;
Opening tag &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;  closing &lt;code&gt;&amp;lt;/&amp;gt;&lt;/code&gt; tag and content. But many HTML tags are unclosed.&lt;/p&gt;

&lt;p&gt;An HTML Document/Page must have some vital HTML tags in which a web browser can distinguish between simple and HTML content.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html-ltgt-tag"&gt;
  &lt;/a&gt;
  HTML &amp;lt;!--...--&amp;gt; Tag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--This is a comment. Comments are not displayed in the browser--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is a paragraph.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#html-ltdoctypegt-declaration"&gt;
  &lt;/a&gt;
  HTML &amp;lt;!DOCTYPE&amp;gt; Declaration
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The content of the document......&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#html-raw-ltagt-endraw-tag"&gt;
  &lt;/a&gt;
  HTML &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; Tag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://www.softcodeon.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Soft Codeon!&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#html-raw-ltabbrgt-endraw-%C2%A0and-raw-ltacronymgt-endraw-tag"&gt;
  &lt;/a&gt;
  HTML &lt;code&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;  and &lt;code&gt;&amp;lt;acronym&amp;gt;&lt;/code&gt; Tag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;The abbr element&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Using &lt;span class="nt"&gt;&amp;lt;abbr&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Learn HTML"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;HTML&lt;span class="nt"&gt;&amp;lt;/abbr&amp;gt;&lt;/span&gt; is fun and easy!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;The acronym element&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
Can I get this &lt;span class="nt"&gt;&amp;lt;acronym&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Learn HTML"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;HTML Guide&lt;span class="nt"&gt;&amp;lt;/acronym&amp;gt;&lt;/span&gt;?
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Note:&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt; The acronym element is not supported in HTML5.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#html-tag"&gt;
  &lt;/a&gt;
  HTML  Tag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;HTML &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #000000;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;area&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; Tag&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;area&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt; tag describe an area inside an image-map. This element is always nested inside &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;map&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt; element.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#html-raw-ltarticlegt-endraw-tag"&gt;
  &lt;/a&gt;
  HTML &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; Tag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Google Chrome&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Google Chrome is a web browser developed by Google, released in 2008. Chrome is the world's most popular web browser today!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#html-raw-ltcaptiongt-endraw-tag"&gt;
  &lt;/a&gt;
  HTML &lt;code&gt;&amp;lt;caption&amp;gt;&lt;/code&gt; Tag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;caption&amp;gt;&lt;/span&gt;Monthly savings&lt;span class="nt"&gt;&amp;lt;/caption&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Month&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Savings&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;January&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;$100&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#html-dl%C2%A0tag"&gt;
  &lt;/a&gt;
  HTML DL Tag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;These three elements are use to create a description list:&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;dl&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;Coffee&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;Black hot drink&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;Milk&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;White cold drink&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dl&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I shared this post from &lt;a href="https://softcodeon.com/html/complete-guide-of-all-html-tags.htm"&gt;Complete Guide Of ALL HTML tags&lt;/a&gt; you can read in detail from there.&lt;/p&gt;

&lt;p&gt;If you have any question please discuss below help to improve. Thank you.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
