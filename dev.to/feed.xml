<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Setup PHP-CS-Fixer for Laravel Project</title>
      <author>Ibrar Hussain</author>
      <pubDate>Fri, 23 Jul 2021 22:45:12 +0000</pubDate>
      <link>https://dev.to/ibrarturi/setup-php-cs-fixer-for-laravel-project-44nf</link>
      <guid>https://dev.to/ibrarturi/setup-php-cs-fixer-for-laravel-project-44nf</guid>
      <description>&lt;p&gt;When you are working on a small project or especially big projects with multiple team members then you need to follow proper coding standards in order to maintain the code stability.&lt;/p&gt;

&lt;p&gt;Laravel follows the PSR-2 coding standard and the PSR-4 autoloading standard. To maintain the same coding standard like PSR-2 for your project(s) there are multiple packages available that can help you fix your code to follow standards.&lt;/p&gt;

&lt;p&gt;In this article we will use &lt;a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer"&gt;PHP Coding Standards Fixer&lt;/a&gt; to setup it on a Laravel project level.&lt;/p&gt;

&lt;p&gt;Following are the steps:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step # 1
&lt;/h3&gt;

&lt;p&gt;Go to your project root folder and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require friendsofphp/php-cs-fixer &lt;span class="nt"&gt;--dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step # 2
&lt;/h3&gt;

&lt;p&gt;In your project root, create a new file named &lt;code&gt;.php-cs-fixer.php&lt;/code&gt; and add the following code and then save it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;PhpCsFixer\Config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;PhpCsFixer\Finder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$rules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'array_syntax'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'syntax'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'short'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;'binary_operator_spaces'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'default'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'single_space'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'operators'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'=&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;'blank_line_after_namespace'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'blank_line_after_opening_tag'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'blank_line_before_statement'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'statements'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'return'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;'braces'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'cast_spaces'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'class_attributes_separation'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'elements'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'method'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'one'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;'class_definition'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'concat_space'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'spacing'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'one'&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;'declare_equal_normalize'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'elseif'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'encoding'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'full_opening_tag'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'fully_qualified_strict_types'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'function_declaration'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'function_typehint_space'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'heredoc_to_nowdoc'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'include'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'increment_style'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'style'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'post'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;'indentation_type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'linebreak_after_opening_tag'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'line_ending'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'lowercase_cast'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'constant_case'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'lowercase_keywords'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'lowercase_static_reference'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    
    &lt;span class="s1"&gt;'magic_method_casing'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'magic_constant_casing'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'method_argument_space'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'native_function_casing'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'no_alias_functions'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'no_extra_blank_lines'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'tokens'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'extra'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'throw'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'use'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'use_trait'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;'no_blank_lines_after_class_opening'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'no_blank_lines_after_phpdoc'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'no_closing_tag'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'no_empty_phpdoc'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'no_empty_statement'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'no_leading_import_slash'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'no_leading_namespace_whitespace'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'no_mixed_echo_print'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'use'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'echo'&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;'no_multiline_whitespace_around_double_arrow'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'multiline_whitespace_before_semicolons'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'strategy'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'no_multi_line'&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;'no_short_bool_cast'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'no_singleline_whitespace_before_semicolons'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'no_spaces_after_function_name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'no_spaces_around_offset'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'no_spaces_inside_parenthesis'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'no_trailing_comma_in_list_call'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'no_trailing_comma_in_singleline_array'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'no_trailing_whitespace'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'no_trailing_whitespace_in_comment'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'no_unneeded_control_parentheses'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'no_unreachable_default_argument_value'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'no_useless_return'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'no_whitespace_before_comma_in_array'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'no_whitespace_in_blank_line'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'normalize_index_brace'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'not_operator_with_successor_space'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'object_operator_without_whitespace'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'ordered_imports'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'sort_algorithm'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'alpha'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;'phpdoc_indent'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'general_phpdoc_tag_rename'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'phpdoc_inline_tag_normalizer'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'phpdoc_tag_type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'phpdoc_no_access'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'phpdoc_no_package'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'phpdoc_no_useless_inheritdoc'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'phpdoc_scalar'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'phpdoc_single_line_var_spacing'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'phpdoc_summary'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'phpdoc_to_comment'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'phpdoc_trim'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'phpdoc_types'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'phpdoc_var_without_name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'psr_autoloading'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'self_accessor'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'short_scalar_cast'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'simplified_null_return'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'single_blank_line_at_eof'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'single_blank_line_before_namespace'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'single_class_element_per_statement'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'single_import_per_statement'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'single_line_after_imports'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'single_line_comment_style'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'comment_types'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'hash'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;'single_quote'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'space_after_semicolon'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'standardize_not_equals'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'switch_case_semicolon_to_colon'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'switch_case_space'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'ternary_operator_spaces'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'trailing_comma_in_multiline'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'trim_array_spaces'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'unary_operator_spaces'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'visibility_required'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'elements'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'method'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'property'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;'whitespace_after_comma_in_array'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'no_unused_imports'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;


&lt;span class="nv"&gt;$finder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Finder&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;in&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/app'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/config'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/database'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/resources'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/routes'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/tests'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'*.php'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;notName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'*.blade.php'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;ignoreDotFiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;ignoreVCS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$config&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$finder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setRules&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$rules&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setRiskyAllowed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setUsingCache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This file contains local configuration that will be used instead of project configurations. It will let you configure rules, the files and directories that need to be analysed.&lt;/p&gt;

&lt;p&gt;Feel free to change the above file to suit your needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step # 3
&lt;/h3&gt;

&lt;p&gt;Open &lt;code&gt;composer.json&lt;/code&gt; file and add the following lines to the script section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="s2"&gt;"sniff"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
     &lt;span class="s2"&gt;"./vendor/bin/php-cs-fixer fix -vvv --dry-run --show-progress=dots"&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;,
&lt;span class="s2"&gt;"lint"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;"./vendor/bin/php-cs-fixer fix -vvv --show-progress=dots"&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;,
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this we have added two scripts that we can run with composer command:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;composer sniff&lt;/code&gt;&lt;br&gt;
This command is used for dry run in order to show you all the files that needs to be fixed without fixing them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;composer lint&lt;/code&gt;&lt;br&gt;
This command will try to auto fix your code and will show you the summary at the end.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following are the some useful links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer"&gt;PHP-CS-Fixer Package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer/blob/3.0/doc/usage.rst"&gt;PHP-CS-Fixer Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlocati.github.io/php-cs-fixer-configurator/#version:3.0"&gt;PHP-CS-Fixer Configurations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to install &lt;a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer"&gt;PHP Coding Standards Fixer&lt;/a&gt; in your favourite editor then following dedicated plugins are available:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Glavin001/atom-beautify"&gt;Atom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plugins.netbeans.apache.org/catalogue/?id=36"&gt;NetBeans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@valeryan/how-to-configure-phpstorm-to-use-php-cs-fixer-1844991e521f"&gt;PhpStorm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/benmatselby/sublime-phpcs"&gt;Sublime Text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/stephpy/vim-php-cs-fixer"&gt;Vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/junstyle/vscode-php-cs-fixer"&gt;VS Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>laravel</category>
      <category>webdev</category>
      <category>phpcsfixer</category>
    </item>
    <item>
      <title>Reactive Programming 🌫️ - Demystified using RxJS</title>
      <author>Paulo Santos</author>
      <pubDate>Fri, 23 Jul 2021 22:38:48 +0000</pubDate>
      <link>https://dev.to/gitpaulo/reactive-programming-demystified-using-rxjs-53g5</link>
      <guid>https://dev.to/gitpaulo/reactive-programming-demystified-using-rxjs-53g5</guid>
      <description>&lt;p&gt;If you're looking for an RxJS quick start then this article is &lt;strong&gt;not&lt;/strong&gt; for you!&lt;/p&gt;

&lt;p&gt;Here I will be tackling Reactive Programming with the goal of shedding some light on its theory using RxJS as the example.&lt;/p&gt;

&lt;p&gt;I will be explaining the core Reactive Programming concepts, relating them to RxJS and how works they work in practice. Hopefully, by the end of the read, you'll have a truer understanding of RxJS and be able to pick up any Rx Implementation and immediately start coding. Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#statement"&gt;
  &lt;/a&gt;
  Statement
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;RxJS is an API for asynchronous programming&lt;br&gt;
with observable streams. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To understand what this means we need to define what is meant by &lt;em&gt;asynchronous programming&lt;/em&gt; and what &lt;em&gt;observable streams&lt;/em&gt; are. The best place to start? Reactive Programming!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reactive-programming"&gt;
  &lt;/a&gt;
  Reactive Programming
&lt;/h2&gt;

&lt;p&gt;Reactive Programming (not to be confused with &lt;a href="http://conal.net/papers/icfp97/"&gt;Functional Reactive Programming&lt;/a&gt;!!) is a subset of &lt;strong&gt;Asynchronous Programming&lt;/strong&gt; and a paradigm where the availability of new information drives the logic forward rather than having control flow driven by a thread-of-execution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Asynchronous Programming&lt;/strong&gt; is a means of parallel programming in which a unit of work runs separately from the main application thread. Generally, this is achieved via a messaging system where threads of execution competing for a shared resource don’t need to wait by blocking (preventing the thread of execution from performing other work until current work is done), and can as such perform other useful work while the resource is occupied. This concept is vital for Reactive Programming because it allows for non-blocking code to be written. Bellow a visualisation of the process:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qHMam_zT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4od7mbiuhm8joe78e9l2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qHMam_zT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4od7mbiuhm8joe78e9l2.png" alt=""&gt;&lt;/a&gt;&lt;a href="https://www.lightbend.com/white-papers-and-reports/reactive-programming-versus-reactive-systems" title="Async"&gt;Asynchronous Message System&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Synchronous, blocking communication (left) is resource inefficient and easily bottlenecked. The Reactive approach (right) reduces risk, conserves valuable resources, and requires less hardware/infrastructure. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#messages-vs-events"&gt;
  &lt;/a&gt;
  Messages vs Events
&lt;/h3&gt;

&lt;p&gt;Reactive Programming is generally Event-driven. &lt;strong&gt;Events are simply undirected messages&lt;/strong&gt;. At their core, they are (for all intents and purposes) an extension of an event. &lt;/p&gt;

&lt;p&gt;The Application Program Interface (API) for Reactive Programming libraries are generally either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Callback-based:&lt;/strong&gt; where anonymous, side-effecting callbacks are attached to event sources and are being invoked when events pass through the dataflow chain.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Declarative:&lt;/strong&gt; through functional composition, usually using well-established combinators like map, filter, fold etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#reactive-systems"&gt;
  &lt;/a&gt;
  Reactive Systems
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.reactivemanifesto.org/"&gt;The Reactive Manifesto&lt;/a&gt; defines that reactive systems are: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Responsive:&lt;/strong&gt; responsive systems focus on providing rapid and consistent response times. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Resilient:&lt;/strong&gt; resilient systems handle problems as they occur and stay responsive in the face of failure.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Elastic:&lt;/strong&gt; elastic systems stays responsive under the varying workload and ergo have the ability to scale.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Message Driven:&lt;/strong&gt; message driven systems rely on asynchronous message-passing to establish to ensure that change is propagated between components without interruptions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QxJNuq59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1thn17zb33wg7glzdvz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QxJNuq59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1thn17zb33wg7glzdvz.png" alt=""&gt;&lt;/a&gt;&lt;a href="https://www.reactivemanifesto.org/" title="RM"&gt;Principles of Reactive Systems&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reactive-programming-amp-reactive-systems"&gt;
  &lt;/a&gt;
  Reactive Programming &amp;amp; Reactive Systems
&lt;/h3&gt;

&lt;p&gt;How do these two relate? In summary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Reactive Programming&lt;/strong&gt; is a technique for managing internal logic and dataflow transformation within components of a system. It is a way of providing clarity, performance and resource efficiency of code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reactive Systems&lt;/strong&gt; is a set of architectural principles. It puts the emphasis on distributed communication and gives us tools to tackle resilience and elasticity in distributed systems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Reactive Programming should be used as one of the tools to construct a Reactive System.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#defining-the-paradigm-in-practice"&gt;
  &lt;/a&gt;
  Defining the Paradigm in Practice
&lt;/h3&gt;

&lt;p&gt;Right, so, what is &lt;strong&gt;exactly&lt;/strong&gt; is Reactive Programming? There are &lt;a href="#reference"&gt;&lt;em&gt;many&lt;/em&gt;&lt;/a&gt; definitions out there... some of which I think not even their authors understand what they mean. In the wise words of &lt;a href="https://twitter.com/andrestaltz"&gt;@andrestaltz&lt;/a&gt; - "Lets cut the bullshit"&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reactive programming is programming with asynchronous data streams.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Beautiful, concise and above all explainable! In fact, this definition is almost the same as &lt;a href="#statement"&gt;the statement about RxJS I presented before&lt;/a&gt;. That is because RxJS is within the Reactive Programming paradigm. &lt;/p&gt;

&lt;p&gt;From now on we assume Reactive programming &lt;strong&gt;with streams&lt;/strong&gt;. There are other types of implementations that can also be considered within the paradigm, such as: &lt;a href="https://en.wikipedia.org/wiki/Futures_and_promises"&gt;Promises/Futures&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Oz_(programming_language)#Dataflow_variables_and_declarative_concurrency"&gt;Dataflow variables&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, as promised, I'll be showing you guys what is meant by 'asynchronous data streams'.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#streams"&gt;
  &lt;/a&gt;
  Streams
&lt;/h3&gt;

&lt;p&gt;The key idea in Reactive Programming is that &lt;em&gt;everything&lt;/em&gt; (for the most part) can be a stream. Streams are &lt;strong&gt;cheap&lt;/strong&gt; and &lt;strong&gt;ubiquitous&lt;/strong&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A stream is a sequence of ongoing events ordered in time. It can only emit 3 things: a data typed value, an error, or a termination signal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This definition is important to remember since it remains the same no matter the implementation of the paradigm.&lt;/p&gt;

&lt;p&gt;The way I like to think about streams is by visualising a water pipe with a closing mechanism where each water molecule (or set of) is an emitted value. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IASBjvo3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vk61sg0fug3pr8p00hh6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IASBjvo3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vk61sg0fug3pr8p00hh6.png" alt=""&gt;&lt;/a&gt;&lt;a href="#" title="WPSA"&gt;Water pipe stream analogy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The closing mechanism can be triggered manually by turning the tap, representing a termination signal, or implicitly, if the pipe fails to do its function, representing an error. A closed pipe can no longer push out water and we call it as a completed stream.&lt;/p&gt;

&lt;p&gt;Now, let us focus on the first sentence of our definition: 'A stream is a sequence of &lt;strong&gt;ongoing events ordered in time&lt;/strong&gt;.' &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tyncZOt4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebnd36etq6fzhutntpd5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tyncZOt4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebnd36etq6fzhutntpd5.png" alt=""&gt;&lt;/a&gt;&lt;a href="#" title="WPSAC"&gt;Capturing values analogy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In other words, water droplets (data) are being pushed out of the pipe (stream) as time (program execution) passes. How do we capture these droplets to act on them? &lt;/p&gt;

&lt;p&gt;In most implementations of Reactive Programming, we capture these emitted events only asynchronously, by defining functions that are called and passed one of the three appropriate outputs as a parameter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;On value emission:&lt;/strong&gt; Each time a value is pushed through the stream it will be emitted and captured here. Can happen multiple times.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;On error emission:&lt;/strong&gt; When the stream error it will be captured here and the stream terminates. Happens only once.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;On termination:&lt;/strong&gt; When the stream is terminated it will be captured here. Happens only once.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That covers capturing. It's time to move into the manipulation of streams themselves. We do this via &lt;strong&gt;Operators&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#operators"&gt;
  &lt;/a&gt;
  Operators
&lt;/h3&gt;

&lt;p&gt;Operators offer a way to manipulate streams by transforming them. A transformation, in our context, is simply a function &lt;code&gt;f&lt;/code&gt; that maps a stream into another stream, i.e. &lt;code&gt;f: S1 → S2&lt;/code&gt; This function we call an operator.&lt;/p&gt;

&lt;p&gt;To visualise this simple imagine placing one or more appliances within the pipeline of our stream. These appliances could have filters in them or could modify the contents of the water (or other transformations) thereby transforming our stream into a new stream.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CwxDarCm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6f2qahx90sn2mflt3l2x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CwxDarCm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6f2qahx90sn2mflt3l2x.png" alt=""&gt;&lt;/a&gt;&lt;a href="#" title="WPSAO"&gt;Water pipe stream analogy with operators&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;In the image above, our initial stream of type 'Unpurified Water' was transformed into a stream of type 'Purified Water' transforming the data that gets observed at the end of the pipeline from its original form.&lt;/p&gt;

&lt;p&gt;To explain operators and their effects on real streams of data we will have to dive into the world of Marble Diagrams.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#marble-diagrams"&gt;
  &lt;/a&gt;
  Marble Diagrams
&lt;/h2&gt;

&lt;p&gt;Before explaining marble diagrams we need to improve our terminology a little bit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#redefining-some-terms"&gt;
  &lt;/a&gt;
  Redefining Some Terms
&lt;/h3&gt;

&lt;p&gt;Now, because we will be dealing with ReactiveX in the next chapter, it's time to introduce some of the required terminologies. Don't worry, for now, I will only be giving abstracted definitions to a few terms that map to terms I've already covered. Below, the same diagrams as before, but with the new terminology included.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HhAJoBH7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/th62dw2hw9o3p18cc9gr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HhAJoBH7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/th62dw2hw9o3p18cc9gr.png" alt=""&gt;&lt;/a&gt;&lt;a href="#" title="WPSAO"&gt;Water pipe stream analogy (w/terminology)&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;and for the operator diagram,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ljCzzJn9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1r9fgxt1yfyfp5mpv4v7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ljCzzJn9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1r9fgxt1yfyfp5mpv4v7.png" alt=""&gt;&lt;/a&gt;&lt;a href="#" title="WPSAO"&gt;Water pipe stream analogy with operators (w/terminology)&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Simple definitions for these terms are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Stream -&amp;gt; Observable:&lt;/strong&gt; A structure representing a stream of values over time.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Tap -&amp;gt; Subscriber:&lt;/strong&gt; Sometimes called the consumer, the code that calls the subscription process on an observable structure.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Turning the tap -&amp;gt; Subscription:&lt;/strong&gt; The method that opens the stream for the observer.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Closing the tap -&amp;gt; Completing:&lt;/strong&gt; The action of marking the stream as completed meaning it is terminated.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bucket -&amp;gt; Observer:&lt;/strong&gt; The structure that captures our pushed values allowing us to act on them.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Appliances -&amp;gt; Operators:&lt;/strong&gt; Functions that transform the stream.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will be returning to more precise definitions later, since they are pretty much required to read any sort of RX documentation without inducing a headache. So don't worry if you don't quite understand what these mean yet.&lt;/p&gt;

&lt;p&gt;However, we will be using this new terminology from now on so I recommend keep the term mapping in your head.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#marble-diagrams-the-observable"&gt;
  &lt;/a&gt;
  Marble Diagrams - The Observable
&lt;/h3&gt;

&lt;p&gt;Okay, time for actual marble diagrams! &lt;/p&gt;

&lt;p&gt;Learning Reactive Programming can be a daunting task so the Rx team came up with the concept of marble diagrams to help with visualising observables and their operators. These diagrams are incredibly intuitive and are commonly found in any Rx Operator documentation. They allow for easy understanding of the operators without having to read much else. Good alternative to a chunky wall of text filled with terminology! I'll try to explain how to read them as best I can:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j6AHKpkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dki7ul5wpik316wkssw3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j6AHKpkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dki7ul5wpik316wkssw3.png" alt=""&gt;&lt;/a&gt;&lt;a href="https://medium.com/@bencabanes/marble-testing-observable-introduction-1f5ad39231c" title="OMD"&gt;Overview of a Marble Diagram&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Okay... my bad haha, sorry! Let's go step by step. &lt;/p&gt;

&lt;p&gt;Marble diagrams describe observables. Observables are streams of values through time. So, we need a time axis!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rzGefaK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ue48ew05m7wpr9sgwqgv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rzGefaK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ue48ew05m7wpr9sgwqgv.png" alt=""&gt;&lt;/a&gt;&lt;a href="https://www.zachgollwitzer.com/posts/2020/rxjs-marble-diagram/" title="OMD"&gt;Marble Diagram: time axis&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Now that we have a time axis we need to represent our observable outputs. If you recall our earlier definition, an observable can only output a value, a termination signal or an error. &lt;/p&gt;

&lt;p&gt;Let's start with the easy one, the termination signal:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ApfOnC8K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e9afmw9ld3xyevxd079m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ApfOnC8K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e9afmw9ld3xyevxd079m.png" alt=""&gt;&lt;/a&gt;&lt;a href="https://www.zachgollwitzer.com/posts/2020/rxjs-marble-diagram/" title="OMD"&gt;Marble Diagram: termination signal&lt;/a&gt;   &lt;/p&gt;

&lt;p&gt;In similar fashion, we have our error output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S4lVNqrt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ci83oemg1ho6pztolb9p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S4lVNqrt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ci83oemg1ho6pztolb9p.png" alt=""&gt;&lt;/a&gt;&lt;a href="https://www.zachgollwitzer.com/posts/2020/rxjs-marble-diagram/" title="OMD"&gt;Marble Diagram: error&lt;/a&gt;   &lt;/p&gt;

&lt;p&gt;Finally, lets represent our emitted value:  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tHwBBVgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzuzc29irqvf2hy8l3w9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tHwBBVgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzuzc29irqvf2hy8l3w9.png" alt=""&gt;&lt;/a&gt;&lt;a href="https://www.zachgollwitzer.com/posts/2020/rxjs-marble-diagram/" title="OMD"&gt;Marble Diagram: value push/emission&lt;/a&gt;   &lt;/p&gt;

&lt;p&gt;There can be multiple values across the time axis as long as there is no termination or error output behind them as those will unsubscribe from the observable.&lt;/p&gt;

&lt;p&gt;Done, simple right? On to the next part: operators in marble diagrams!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#marble-diagrams-the-operators"&gt;
  &lt;/a&gt;
  Marble Diagrams - The Operators
&lt;/h3&gt;

&lt;p&gt;As previously mentioned, operators are functions that transform observables. That means they take as input one or more observables and output a new observable. We can represent them in a marble diagram like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WdAoZGQh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xab3a7gqc9mm0xl4nom7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WdAoZGQh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xab3a7gqc9mm0xl4nom7.png" alt=""&gt;&lt;/a&gt;&lt;a href="#" title="OMD"&gt;Marble diagram of a filter operator&lt;/a&gt;   &lt;/p&gt;

&lt;p&gt;The block in between is our operator function, taking in an observable and returning another. So, our function is filtering the input observable by taking the modulus 2 to determine whether a pushed value is even and if it is it allows that push value to pass through, essentially, filtering the stream. &lt;/p&gt;

&lt;p&gt;As mentioned before, operators can have more than one observable as input, such is the case for operators such as &lt;code&gt;switchMap&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vu9o1yxh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76qz9j0n1ggp30s8mcy9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vu9o1yxh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76qz9j0n1ggp30s8mcy9.png" alt=""&gt;&lt;/a&gt;&lt;a href="#" title="OMD"&gt;Marble diagram of a switch map operator&lt;/a&gt;     &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;switchMap&lt;/code&gt; operator is a very popular one that has a handful of practical applications. It is generally used to implement a discard action between the input streams which can save a lot of trouble and computation in practice.&lt;/p&gt;

&lt;p&gt;In summary, every time the &lt;code&gt;Input Observable 1&lt;/code&gt; emits a value, &lt;code&gt;Input Observable 2&lt;/code&gt; emits all of its values unless &lt;code&gt;Input Observable 1&lt;/code&gt; emits a new value before the &lt;code&gt;Input Observable 2&lt;/code&gt; completes. If you look at the output observable you will notice that there are only two 30's. This is because &lt;code&gt;Input Observable 2&lt;/code&gt; could not be complete before &lt;code&gt;Input Observable 1&lt;/code&gt; emitted the value 5. You easily confirm this because the space between 3 and 5 is much less than the size of the axis for &lt;code&gt;Input Observable 2&lt;/code&gt;, suggesting there was only time to emit the first two values. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-practice-rxjs"&gt;
  &lt;/a&gt;
  In Practice - RxJS
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#overview-of-rxjs"&gt;
  &lt;/a&gt;
  Overview of RxJS
&lt;/h3&gt;

&lt;p&gt;RxJS is a library extending &lt;a href="http://reactivex.io/"&gt;ReactiveX&lt;/a&gt; for composing asynchronous and event-based programs by using observable sequences with JavaScript. It provides one core type, the Observable, satellite types (Observer, Schedulers, Subjects) and operators (map, filter, reduce, every, etc) to allow the manipulation of the observable streams with easy and significantly reducing the amount of code needed to solve asynchronous problems. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-vs-disadvantages"&gt;
  &lt;/a&gt;
  Advantages VS Disadvantages
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#advantages%E2%80%8B"&gt;
  &lt;/a&gt;
  Advantages​
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Growing very rapidly.​

&lt;ul&gt;
&lt;li&gt;RxJs alone has 25mil weekly downloads.​&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Provides a very high-quality asynchronous API.​&lt;/li&gt;
&lt;li&gt;Lightweight &amp;amp; memory optimised.​&lt;/li&gt;
&lt;li&gt;Easy error handling.​&lt;/li&gt;
&lt;li&gt;Makes asynchronous programming much faster in most applications.​&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#disadvantages%E2%80%8B"&gt;
  &lt;/a&gt;
  Disadvantages​
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Relatively steep learning curve.​&lt;/li&gt;
&lt;li&gt;Implies a functional programming style (data immutability).​&lt;/li&gt;
&lt;li&gt;Testing/debugging can be a learning process.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#rxjs-glossary"&gt;
  &lt;/a&gt;
  RxJS Glossary
&lt;/h3&gt;

&lt;p&gt;In RxJS some arguably established definitions are:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#entities"&gt;
  &lt;/a&gt;
  Entities
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Observable:&lt;/strong&gt; represents the idea of an invokable collection of future values or events.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Observer:&lt;/strong&gt; is a collection of callbacks that knows how to listen to values delivered by the Observable.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Subscription:&lt;/strong&gt; represents the execution of an Observable, is primarily useful for cancelling the execution.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Operators:&lt;/strong&gt; are pure functions that enable a functional programming style of dealing with collections with operations like map, filter, concat, reduce, etc.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Subject:&lt;/strong&gt; is equivalent to an EventEmitter, and the only way of multicasting a value or event to multiple Observers.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Schedulers:&lt;/strong&gt; are centralized dispatchers to control concurrency, allowing us to coordinate when computation happens on e.g. setTimeout or requestAnimationFrame or others.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Producer:&lt;/strong&gt; The code that is subscribing to the observable. This is whoever is being notified of nexted values, and errors or completions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Consumer:&lt;/strong&gt; Any system or thing that is the source of values that are being pushed out of the observable subscription to the consumer. &lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#concepts"&gt;
  &lt;/a&gt;
  Concepts
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Unicast:&lt;/strong&gt; The act of one producer being observed only one consumer. An observable is "unicast" when it only connects one producer to one consumer. Unicast doesn't necessarily mean "cold".&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Multicast&lt;/strong&gt;: The act of one producer being observed by many consumers.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cold&lt;/strong&gt;: An observable is "cold" when it creates a new producer during subscribe for every new subscription. As a result, a "cold" observables are always unicast, being one producer observed by one consumer. Cold observables can be made hot but not the other way around.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Hot&lt;/strong&gt;: An observable is "hot", when its producer was created outside of the context of the subscribe action. This means that the "hot" observable is almost always multicast. It is possible that a "hot" observable is still technically unicast, if it is engineered to only allow one subscription at a time, however, there is no straightforward mechanism for this in RxJS, and the scenario is unlikely. For the purposes of discussion, all "hot" observables can be assumed to be multicast. Hot observables cannot be made cold.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Push&lt;/strong&gt;: Observables are a push-based type. That means rather than having the consumer call a function or perform some other action to get a value, the consumer receives values as soon as the producer has produced them, via a registered next handler.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pull&lt;/strong&gt;: Pull-based systems are the opposite of push-based. In a pull-based type or system, the consumer must request each value the producer has produced manually, perhaps long after the producer has actually done so. Examples of such systems are Functions and Iterators&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#observables-amp-subscriptions"&gt;
  &lt;/a&gt;
  Observables &amp;amp; Subscriptions
&lt;/h3&gt;

&lt;p&gt;By now we should agree that observables are simply structures that lazy push collections of multiple values. Subscriptions are the resulting structure representing a disposable resource, usually the execution of an Observable.&lt;/p&gt;

&lt;p&gt;Heres how we code them in RxJS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* Instantiate an observable */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// pushes a value&lt;/span&gt;
  &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// terminates observable stream&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="cm"&gt;/* Subscribing to an observable */&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;just before subscribe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// The three possible outputs of an observable stream:&lt;/span&gt;
  &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;got value &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;something wrong occurred: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;done&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// creates subscription&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;just after subscribe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* Unsubscribing to an observable */&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// terminates subscription&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#hot-vs-cold-observables"&gt;
  &lt;/a&gt;
  Hot vs Cold Observables
&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;cold observable&lt;/strong&gt; starts producing data when some code invokes a &lt;strong&gt;subscribe()&lt;/strong&gt; function on it.&lt;/p&gt;

&lt;p&gt;A cold observable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Creating a cold observable&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// We explicitly push the value to the stream&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Subscription 1&lt;/span&gt;
&lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0.24957144215097515 (random number)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Subscription 2&lt;/span&gt;
&lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0.004617340049055896 (random number)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A &lt;strong&gt;hot observable&lt;/strong&gt; produces data even if &lt;strong&gt;no subscribers are interested&lt;/strong&gt; in the data.&lt;/p&gt;

&lt;p&gt;A hot observable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Coming from an event which is constantly emmit values&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Subscription 1&lt;/span&gt;
&lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientX&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// x position of click&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Subscription 2&lt;/span&gt;
&lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// y position of click&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#promises-vs-observables"&gt;
  &lt;/a&gt;
  Promises vs Observables
&lt;/h3&gt;

&lt;p&gt;The main differences are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Promises are eager. Observables are lazy.​&lt;/li&gt;
&lt;li&gt;Promises are single-value emissions. Observables are multi-value streams.​&lt;/li&gt;
&lt;li&gt;Promises have no cancelling or operator APIs. Observables do.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vPaa2YNt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbg528g59fb2w50vclj0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vPaa2YNt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbg528g59fb2w50vclj0.png" alt=""&gt;&lt;/a&gt;&lt;a href="#" title="OMD"&gt;Promise vs Observable&lt;/a&gt;   &lt;/p&gt;

&lt;p&gt;A stackblitz example of RxJS vs Promises: &lt;a href="https://stackblitz.com/edit/classicjs-vs-rxjs"&gt;https://stackblitz.com/edit/classicjs-vs-rxjs&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#observables-can-be-promises"&gt;
  &lt;/a&gt;
  Observables can be Promises
&lt;/h4&gt;

&lt;p&gt;Although observables are not an extension of the &lt;a href="https://promisesaplus.com/"&gt;Promise/A+&lt;/a&gt; specification, RxJS still provides means to transform an observable into a true Promise. An example follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Return a basic observable&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;simpleObservable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Convert basic observable to promise&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;First Example&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toPromise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Now its a promise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;From Promise:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// After 500ms, output 'First Example'&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the use of RxJS's &lt;code&gt;toPromise&lt;/code&gt; method, any observable can be converted to a promise. Note that because it returns a true JS Promise, &lt;code&gt;toPromise&lt;/code&gt; is not a pipable operator, as it does not return an observable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#observer"&gt;
  &lt;/a&gt;
  Observer
&lt;/h3&gt;

&lt;p&gt;In practice, an Observer is a consumer of values delivered by an Observable. Observers are simply a set of callbacks, one for each type of notification delivered by the Observable: &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, and &lt;code&gt;complete&lt;/code&gt;. The following is an example of a typical Observer object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Observer got a next value: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Observer got an error: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Observer got a complete notification&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// To use it, pass it to a subscribe&lt;/span&gt;
&lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it for observers, really!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#operators"&gt;
  &lt;/a&gt;
  Operators
&lt;/h3&gt;

&lt;p&gt;RxJS is mostly useful for its operators, even though the Observable is the foundation. Previously we studied operators as functions that transformed streams. Nothing changes here, just terminology!&lt;/p&gt;

&lt;p&gt;RxJS has a (very) vast library of operators. We will only be touching on a few simple ones to cover what we've talked about already:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [2, 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6birZ4tF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fy4d0lg6i6a3c5fx4xb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6birZ4tF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fy4d0lg6i6a3c5fx4xb.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If you remember our filter example from before this should be fairly simple to understand!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pipeline"&gt;
  &lt;/a&gt;
  Pipeline
&lt;/h3&gt;

&lt;p&gt;A pipeline is simply a series of operators that get executed in order. Something obvious but that people forget, every pipeline operator &lt;strong&gt;must&lt;/strong&gt; return an observable.&lt;/p&gt;

&lt;p&gt;The same exmaple as before but with chaining operators:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;take&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;firstValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The first even number was &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;firstValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a ton more operators that do vastly different things in categories such as: Creation, Filtering, Combination, Error Handling, Transformation, Multicasting, etc. I encourage you to try a few from each of the categories out. This is the power of RxJS, there's a lot already done for you!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#subjects"&gt;
  &lt;/a&gt;
  Subjects
&lt;/h3&gt;

&lt;p&gt;A Subject is like an Observable, but can multicast to many Observers. Subjects are like EventEmitters: they maintain a registry of many listeners. In fact, part of a subject is literally an observable and you can get a reference to that observable. &lt;/p&gt;

&lt;p&gt;The easiest way to think of a subject is quite literally:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Subject = Observer + Observable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`observerA: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`observerB: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Logs:&lt;/span&gt;
&lt;span class="c1"&gt;// observerA: 1&lt;/span&gt;
&lt;span class="c1"&gt;// observerB: 1&lt;/span&gt;
&lt;span class="c1"&gt;// observerA: 2&lt;/span&gt;
&lt;span class="c1"&gt;// observerB: 2&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// You can subscribe providing a Subject&lt;/span&gt;

&lt;span class="c1"&gt;// Logs:&lt;/span&gt;
&lt;span class="c1"&gt;// observerA: 1&lt;/span&gt;
&lt;span class="c1"&gt;// observerB: 1&lt;/span&gt;
&lt;span class="c1"&gt;// observerA: 2&lt;/span&gt;
&lt;span class="c1"&gt;// observerB: 2&lt;/span&gt;
&lt;span class="c1"&gt;// observerA: 3&lt;/span&gt;
&lt;span class="c1"&gt;// observerB: 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;IMO, the best use case for Subjects is when the code it is referenced in is the one that is producing the observable data. You can easily let your consumers subscribe to the Subject and then call the &lt;code&gt;.next()&lt;/code&gt; function to push data into the pipeline. Be wary of overusing them since most problems are solvable with only data transformation and Observables.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#schedulers"&gt;
  &lt;/a&gt;
  Schedulers
&lt;/h3&gt;

&lt;p&gt;Finally, schedulers! They might seem hard to understand but are quite simple at a surface level which is more than enough for us to know about. In essence, schedulers control the order of tasks for Observables. There are only a few of them and they won't be changing anytime soon, here they are:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U6hEDs-p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0iuxaq13i0seumfqvsv0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U6hEDs-p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0iuxaq13i0seumfqvsv0.png" alt=""&gt;&lt;/a&gt;&lt;a href="#" title="OMD"&gt;Table of the types of schedulers&lt;/a&gt;   &lt;/p&gt;

&lt;p&gt;You can use schedulers by passing them to observables through a handful of operators (usually of the creation category) as arguments. The most basic example, forcing a synchronous observable to behave asynchronously:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;asyncScheduler&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;observeOn&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;observeOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;asyncScheduler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;just before subscribe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;got value &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;something wrong occurred: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;done&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;just after subscribe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Logs&lt;/span&gt;
&lt;span class="c1"&gt;// just before subscribe&lt;/span&gt;
&lt;span class="c1"&gt;// just after subscribe&lt;/span&gt;
&lt;span class="c1"&gt;// got value 1&lt;/span&gt;
&lt;span class="c1"&gt;// got value 2&lt;/span&gt;
&lt;span class="c1"&gt;// got value 3&lt;/span&gt;
&lt;span class="c1"&gt;// done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how the notifications got &lt;code&gt;value...&lt;/code&gt; were delivered after just after subscription. This is because &lt;code&gt;observeOn(asyncScheduler)&lt;/code&gt; introduces a proxy Observer between the new Observable and the final Observer. &lt;/p&gt;

&lt;p&gt;Other schedulers can be used for different timings. We are done!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#amazing-rxjs-resources"&gt;
  &lt;/a&gt;
  Amazing RxJS Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;RxJS visualizer:&lt;/strong&gt; &lt;a href="https://rxviz.com/"&gt;https://rxviz.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Instant marble diagrams:&lt;/strong&gt; &lt;a href="https://thinkrx.io/"&gt;https://thinkrx.io/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Docs with marble diagrams:&lt;/strong&gt; &lt;a href="https://rxmarbles.com/"&gt;https://rxmarbles.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Operator decision tree:&lt;/strong&gt; &lt;a href="https://rxjs.dev/operator-decision-tree"&gt;https://rxjs.dev/operator-decision-tree&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754"&gt;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reactivemanifesto.org/"&gt;https://www.reactivemanifesto.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Reactive_programming"&gt;https://en.wikipedia.org/wiki/Reactive_programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zachgollwitzer.com/posts/2020/rxjs-marble-diagram/"&gt;https://www.zachgollwitzer.com/posts/2020/rxjs-marble-diagram/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@bencabanes/marble-testing-observable-introduction-1f5ad39231c"&gt;https://medium.com/@bencabanes/marble-testing-observable-introduction-1f5ad39231c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lightbend.com/white-papers-and-reports/reactive-programming-versus-reactive-systems"&gt;https://www.lightbend.com/white-papers-and-reports/reactive-programming-versus-reactive-systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>reactive</category>
      <category>rxjs</category>
    </item>
    <item>
      <title>A Filesystem in JavaScript 🐣</title>
      <author>Adam Crockett</author>
      <pubDate>Fri, 23 Jul 2021 22:21:26 +0000</pubDate>
      <link>https://dev.to/adam_cyclones/a-filesystem-in-javascript-jj9</link>
      <guid>https://dev.to/adam_cyclones/a-filesystem-in-javascript-jj9</guid>
      <description>&lt;p&gt;It's Friday, it's nearly my Birthday, it's time to address some long running iterative projects (projects I never finish) LRIP for short 🪦. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-my-latest-lrip"&gt;
  &lt;/a&gt;
  What's my latest LRIP?
&lt;/h2&gt;

&lt;p&gt;I have a bunch of these projects which I may one day finish.&lt;br&gt;
One in particular which I really wanted to make possible but have been less experienced in previous iterations, a virtual file system.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#in-my-mind-unix-probably-works-in-these-easy-to-understand-steps"&gt;
  &lt;/a&gt;
  In my mind Unix probably works in these easy to understand steps
&lt;/h2&gt;

&lt;p&gt;The kernel 🐣🍗 is the entry point of an application (aka your computer) which a Filesystem sits on top of, the kernel provides syscalls to do things like change directories, write files and so on, these syscalls are usually C functions (that's it, no magic, although FYI Rust 🦀 is entering the chat).&lt;/p&gt;

&lt;p&gt;Okay so we got functions, an application and how do we use this application?&lt;/p&gt;

&lt;p&gt;How do you use your computer without a GUI? That's a trick, don't answer that because terminal is graphical, kind of... But yes a terminal, but the shell, that's what we are talking about.&lt;/p&gt;

&lt;p&gt;Think of the most basic shell... Shell not Bash, just Shell, it's just a parser really, type 'cd' and the shell parses your input, &lt;code&gt;cd&lt;/code&gt; is not in your bin it's a syscall &lt;code&gt;cd()&lt;/code&gt;, cool right? 😴, Wake up ☺️&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#okay-sleepy-head"&gt;
  &lt;/a&gt;
  Okay sleepy head
&lt;/h2&gt;

&lt;p&gt;Get to the point, what do I need a Filesystem written bin JavaScript for, it sounds useless. Precisely, this filesystem offers nothing more than the bear bones 🐻 to represent a Filesystem, it's going to have a lot of extension points (plug-in a function) allowing library authors to represent a Filesystem as a data structure. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#here-are-some-ideas"&gt;
  &lt;/a&gt;
  Here are some ideas:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A web server / application with a limited and synced to phisical disk &lt;/li&gt;
&lt;li&gt;Some sort of mock FS testing&lt;/li&gt;
&lt;li&gt;Deploy a yeoman style template in node.js&lt;/li&gt;
&lt;li&gt;Build an OS real or otherwise&lt;/li&gt;
&lt;li&gt;Build the next docker 😅&lt;/li&gt;
&lt;li&gt;Browser mock FS&lt;/li&gt;
&lt;li&gt;Wasm FS thing&lt;/li&gt;
&lt;li&gt;hybrid synchronized FS&lt;/li&gt;
&lt;li&gt;some new build system concept&lt;/li&gt;
&lt;li&gt;Port it to Rust&lt;/li&gt;
&lt;li&gt;Make it work on a real disk (it's possible with Fuse) &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/jolly-zhukovsky-bwn6p"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So I'm on my phone, I can't go explaining the code because it's not done yet, BUT it's intuitive I feel, also it's locked down as much as possible so that only a &lt;code&gt;new Shell()&lt;/code&gt; can actually interact with the FS just like the real thing.&lt;/p&gt;

&lt;p&gt;Such a fun toy, want to help me, get in touch we can FOSS it 🦄&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>computerscience</category>
      <category>imateapot</category>
    </item>
    <item>
      <title>5 of The Best Study Materials for Google [Recommended by Google]</title>
      <author>Clean Code Studio</author>
      <pubDate>Fri, 23 Jul 2021 22:09:01 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/5-of-the-best-study-materials-for-google-recommended-by-google-2eo3</link>
      <guid>https://dev.to/cleancodestudio/5-of-the-best-study-materials-for-google-recommended-by-google-2eo3</guid>
      <description>&lt;p&gt;&lt;strong&gt;Email snippet from my Google recruiter&lt;/strong&gt; &lt;br&gt;
(Listing off Google Recommended Study Materials for Google)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUEpzLFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2u5xjvqfvrufa5hh1ur6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUEpzLFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2u5xjvqfvrufa5hh1ur6.PNG" alt="Google Email"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Two days ago I landed a gig at Amazon!&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hip&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hip&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// Hip Hip Array!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I was also rejected by Google a week and a half ago :(&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="c1"&gt;// To be or not to be&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;All FAANG interviews are hard.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;have a &amp;lt;br&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// let me have a break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"All FAANG interviews are EXTREMELY hard."&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I wouldn't agree with this statement.&lt;/p&gt;

&lt;p&gt;FAANG interviews are &lt;strong&gt;different.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Different&lt;/strong&gt; does NOT mean &lt;strong&gt;EXTREME&lt;/strong&gt; or &lt;strong&gt;EXTREMELY HARD&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Are they Easy? Definitely not easy either. &lt;/p&gt;

&lt;p&gt;So Extremely Hard, right? Honestly - I'd say no. They're not &lt;strong&gt;EXTREME&lt;/strong&gt; in any regard.&lt;/p&gt;

&lt;p&gt;FAANG interviews aren't &lt;strong&gt;EXTREMELY&lt;/strong&gt; hard. They are tedious and time demanding if you &lt;strong&gt;DONT&lt;/strong&gt; have the interview preparation experience.&lt;/p&gt;

&lt;p&gt;So, Tedious and time demanding? &lt;br&gt;
&lt;em&gt;&lt;strong&gt;Absolutely.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Extremely hard?&lt;br&gt;
&lt;em&gt;&lt;strong&gt;Absolutely Note.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Below is a blog post I wrote outlining my thoughts and insights on the Google interview process while I was in the Google interview process.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#im-in-googles-interview-process"&gt;
  &lt;/a&gt;
  I'm in Google's Interview Process
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;At the time of writing this, I'm in Google's interview process.&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;The recruiter emailed me a list of study materials to prepare for Google's interview process. &lt;/p&gt;



&lt;p&gt;The email snippet below is that list of resources.&lt;/p&gt;

&lt;p&gt;This email snippet is directly from my Google recruiter. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUEpzLFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2u5xjvqfvrufa5hh1ur6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUEpzLFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2u5xjvqfvrufa5hh1ur6.PNG" alt="Google Email"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;FAANG Study Resource: Cracking the Coding Interview&lt;/strong&gt;&lt;br&gt;
(Google Recommended)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.amazon.com/gp/product/0984782850/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0984782850&amp;amp;linkCode=as2&amp;amp;tag=ccs0cc-20&amp;amp;linkId=4e21ded6a61b9a202cdc2b9c0bd14025"&gt;&lt;img src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=US&amp;amp;ASIN=0984782850&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=ccs0cc-20"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#my-thoughts-on-interviewing-at-faang-thus-far"&gt;
  &lt;/a&gt;
  My thoughts on Interviewing at FAANG thus far?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;FAANG companies go above and beyond to give you the best resources that'll help you prepare for their interview process.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;They invest a lot of time and money into hiring engineer's that can meet or pass their coding challenges.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Although, that being said - FAANG interviews aren't meant to measure how great of an engineer you may end up being.&lt;/p&gt;

&lt;p&gt;They're instead measuring to make sure you are above a minimum threshold.&lt;/p&gt;

&lt;p&gt;FAANG companies don't let any weak links in, but that doesn't mean every one is phenomenal or a software engineering God. Does Google have a few top of the industry studs? &lt;/p&gt;

&lt;p&gt;Absolutely.&lt;/p&gt;

&lt;p&gt;But 99% of the software engineers at Google aren't any different than you're pretty good software engineers at other organizations.&lt;/p&gt;

&lt;p&gt;The difference at Google, Amazon, Netflix, Apple, and Facebook is that no one is below that better than average threshold.&lt;/p&gt;

&lt;p&gt;The truth about their interview process is that many of the senior engineers at FAANG wouldn't be able to pass the interviews again - even though they're some of the best in the field. At the same time many far less experienced software engineers much would be able to pass the interview process.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"FAANGs Interview process priorities letting good engineers go to keep any bad one's from potentially getting in the Door"&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;FAANG's interview process is focused on NOT letting bad engineers in. &lt;/p&gt;

&lt;p&gt;FAANG's interview process wants the best talent (who doesn't), BUT that is not the top priority of these interview processes.&lt;/p&gt;

&lt;p&gt;If they are stuck between you're amazing and you may be a weak link in the chain then you're not getting through the door. &lt;/p&gt;

&lt;p&gt;Their priority is to not let engineer's below a certain threshold through the door. &lt;/p&gt;

&lt;p&gt;Fortunately and unfortunately, the types of interview's they give are &lt;strong&gt;very&lt;/strong&gt; learnable. You can study and pretty much anyone willing to invest 300 - 500 hours into data structures, algorithms, and coding challenges would be able to eventually get into Google. &lt;/p&gt;

&lt;p&gt;I'd honestly say getting into a FAANG company isn't much harder than getting into a start up.&lt;/p&gt;

&lt;p&gt;It's just different.&lt;/p&gt;

&lt;p&gt;The types of interview's given aren't what real world experience teaches you. &lt;/p&gt;

&lt;p&gt;Weirdly, at this top level, College universities teach many of the concepts that FAANG tests over. &lt;/p&gt;

&lt;p&gt;Now, that being said, just because the universities teach the concepts does &lt;strong&gt;NOT&lt;/strong&gt; mean they teach you how to pass the coding challenges.&lt;/p&gt;

&lt;p&gt;it's just the type of interview's they give aren't what real world experience usually teaches you. &lt;/p&gt;

&lt;p&gt;If you understand data structures and algorithms really well and happen to invest your time into coding challenges for fun...&lt;/p&gt;

&lt;p&gt;Then you'll probably be in a solid position to do really well.- &lt;/p&gt;

&lt;p&gt;If you've never had to use data structure's and algorithms because you've never worked at FAANG and have never gone to college and don't &lt;em&gt;love&lt;/em&gt; investing your free time into data structures and algorithms (like me) - then you have a lot of learning to catch up on.&lt;/p&gt;

&lt;p&gt;If you've never taken a college course (like me) and have never needed to dive deep into data structures and algorithms then this learning curve is going to require 3 to 6 months of your time. &lt;/p&gt;

&lt;p&gt;If you aren't familiar with the types of interviews given at FAANG companies, then you'll need that 3 months to 6 months of studying to basically get good at big-o notation, time-complexity, space-complexity, data structures, algorithms, and coding challenges.&lt;/p&gt;

&lt;p&gt;You'll need a few months to prep up. &lt;/p&gt;

&lt;p&gt;On the other hand, there's an upside. &lt;/p&gt;

&lt;p&gt;If you have 10 years in the industry or your brand new you really only need that 3 to 6 months in both instances with everything else being even (You have invested time into data structures, algorithms, or coding challenges at all). &lt;/p&gt;

&lt;p&gt;The upside is if you have little real world experience and are interviewing at FAANG then you still really only need 40 hours per week of studying full time for 3 to 6 months to also pass the coding interview. &lt;/p&gt;

&lt;p&gt;If you can invest 40 hour per week studying full time, I'd estimate you really only need 3 to maaaybbeee 6 months - 10 years experience in the industry or a newbie, the time commitment is the same if you haven't learning data structures, algorithms, or invested into solving coding challenges. &lt;/p&gt;

&lt;p&gt;The 3 - 6 months of prep is hard work, nothing extreme, just hard. But, if you are able to invest the effort into building your data structure, algorithms, and coding challenge skills for those 6 months then lala you're making the big bucks at FAANG.&lt;/p&gt;

&lt;p&gt;It's hard work but FAANG pays the big bucks and has plenty of applicants to choose from. They don't mind waiting on you to be able to pass their coding challenge. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Side note - you can check FAANG software developer salary ranges at &lt;a href="https://levels.fyi"&gt;Levels FYI&lt;/a&gt;&lt;/em&gt;. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#heres-googles-salary-range"&gt;
  &lt;/a&gt;
  Here's Google's salary range.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Software Engineer - Google - L4&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$267k/yr average income&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Note: L4 is one level above entry level at Google&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;L4's usually have 3-5 years industry experience &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What's crazy is that it'd honestly probably only take 3 to 6 months for both an engineer who has 10 years of experience in the industry as well as an engineer who is straight out of college or &lt;br&gt;
didn't even go to college and has less than a year of experience to study devotedly and pass the interviews. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#gt-statistically-getting-into-google-is-10x-times-harder-than-getting-into-harvard"&gt;
  &lt;/a&gt;
  &amp;gt; &lt;em&gt;"Statistically getting into Google is 10x times harder than getting into Harvard."&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;Ironically, I think that has a lot todo with getting in the door for the actual interview and less to do with the interview process itself.&lt;/p&gt;

&lt;p&gt;Don't get me wrong, the interview process is intense - far from easy. &lt;/p&gt;

&lt;p&gt;But it hasn't felt any more difficult than learning something like object oriented design patterns. If you don't have the experience then you just need to invest the time to learn 30 to 50 different design patterns. Once you know them, you'll want to begin to recognize those patterns in different contexts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When would these patterns be good to use?
&lt;/li&gt;
&lt;li&gt;When wouldn't they? &lt;/li&gt;
&lt;li&gt;What's the pros of this pattern? What's the cons of this pattern? &lt;/li&gt;
&lt;li&gt;Composition vs. inheritance?
&lt;/li&gt;
&lt;li&gt;How do I use patterns to create clean code? &lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;strong&gt;Follow The Clean Code Studio Blog For More&lt;/strong&gt;&lt;/p&gt;




&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code StudioClean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;The Google interview process (studying for it) feels a lot like learning design patterns. It's not necessarily easy and can feel boring or daunting at times when you're learning more  tedious patterns - but it's definitely a feasible task. &lt;/p&gt;

&lt;p&gt;You just can't cram and expect to understand the intricacies of the design patterns. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google Recommended Study Resource: Example Google Interview&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/XKu_SEDAykw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"You need practice and experience."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Data structure and algorithm coding challenge problems at FAANG interviews are  the same kind of ordeal. &lt;/p&gt;

&lt;p&gt;Instead of having design patterns that utilize an interface and multiple classes that implement a given interface...&lt;/p&gt;

&lt;p&gt;-- &lt;/p&gt;

&lt;p&gt;you instead have a coding question that requires an algorithm that can utilize the sliding window technique for O(n) time-complexity that needs to plug in a hash map data structure to keep track of key's and values.&lt;/p&gt;

&lt;p&gt;Instead of figuring out dependencies and which design pattern helps you stay out of dependency hell, you're figuring out time-complexity/space-complexity and making sure you're operations aren't growing relatively large relative to the input so that the 100 million data items passed in to populate your parameter's data structure during a single request doesn't cause the function to be a bottle neck due to being incapable of processing data sets of that size.&lt;/p&gt;

&lt;p&gt;You're code must be optimal enough to handle huge data sets at companies like Google, Amazon, Facebook, Microsoft, Netflix, or Apple. These companies handle billions of requests and immense amounts of data. &lt;/p&gt;

&lt;p&gt;Time complexity is simply counting the number of operations  executed relative to the size of a given functions input. Design patterns are simply intended to manage dependencies and minimize bugs. &lt;/p&gt;

&lt;p&gt;You have to learn how to properly implement given data structures and algorithms to minimize the operations executed within the context of a given challenge. &lt;/p&gt;

&lt;p&gt;You have coding challenges that you can use the sliding window technique because based on the problem it makes sense. There's trade offs to using it and certain cases.&lt;/p&gt;

&lt;p&gt;The sliding window technique wouldn't make since in many contexts. Maybe instead of a sliding window being used on an array or linked list, it makes more since to use a tree or graph. &lt;/p&gt;

&lt;p&gt;For many questions, trees and graphs don't make any since at all. &lt;/p&gt;

&lt;p&gt;There's also sleight variations in the sliding window technique (fixed window, expanding window, closing window, resizing window, using a sliding window with an auxiliary data structure, etc...) that you learn about from a higher level understanding and then dive deeper to learn the contextual use cases and experience based understanding of the little differences in sliding window techniques. &lt;/p&gt;

&lt;p&gt;It's intense preparing for a Google interview - no doubt about it. On the other hand, I was also caught off guard when I was invited to interview at Google. A recruiter reached out via LinkedIn.&lt;/p&gt;

&lt;p&gt;If I knew I'd be interviewing at Google 3 to 6 months back then I would have been preparing for 3 to 6 months. I would have been preparing this entire time and would most definitely be feeling much more confident about the entire process. &lt;/p&gt;

&lt;p&gt;Right now I'd say it's a coin flip whether I get in - but either way it's been an interesting learning experience and I figured it was one worth sharing.&lt;/p&gt;

&lt;p&gt;Quick points to reference:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#three-types-of-interviews"&gt;
  &lt;/a&gt;
  Three types of interviews
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#technical-interview"&gt;
  &lt;/a&gt;
  Technical Interview
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Data Structures&lt;/li&gt;
&lt;li&gt;Algorithms&lt;/li&gt;
&lt;li&gt;Coding Challenges&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#example-technical-interview-question"&gt;
  &lt;/a&gt;
  Example Technical Interview Question
&lt;/h5&gt;

&lt;h4&gt;
  &lt;a href="#behavioral-interview"&gt;
  &lt;/a&gt;
  Behavioral Interview
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Behavioral interviewing focuses on a candidate's past experiences by asking candidates to provide specific examples of how they have demonstrated certain behaviors, knowledge, skills and abilities&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#example-behavioral-interview-question"&gt;
  &lt;/a&gt;
  Example Behavioral Interview Question
&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Given a string &lt;code&gt;s&lt;/code&gt;, find the length of the longest substring without repeating characters."&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Talk about a time when you had to work closely with someone whose personality was very different from yours."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
  &lt;a href="#system-design-interview"&gt;
  &lt;/a&gt;
  System Design Interview
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Distributed Systems&lt;/li&gt;
&lt;li&gt;High Availability&lt;/li&gt;
&lt;li&gt;Redundancy &lt;/li&gt;
&lt;li&gt;Horizontal Scalability&lt;/li&gt;
&lt;li&gt;Load Balancers&lt;/li&gt;
&lt;li&gt;Firewalls&lt;/li&gt;
&lt;li&gt;Which Databases should you use&lt;/li&gt;
&lt;li&gt;Event systems&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;
  &lt;a href="#example-system-design-interview-question"&gt;
  &lt;/a&gt;
  Example System Design Interview Question
&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Here's a white board....design Uber"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;em&gt;"System Design interview sections are only apart of interview processes for L5 and above at Google (According to a former google interview I studied with)&lt;/em&gt;"&lt;/p&gt;

&lt;p&gt;So no matter the quality of the resources listed below, you'll still have to work your butt off and then most likely - unless you have the 3 to 6 months of prep in advance - you'll fail a few times before actually getting in somewhere. &lt;/p&gt;

&lt;p&gt;That being said, once you're in the door for the interview the first time around - it's much easier to get back in the door (even if you failed the first round) for another interview 6 to 18 months in the future depending on the company. &lt;/p&gt;

&lt;p&gt;Once you're in the first time, it sounds like it's much easier to get invited back. So with that, here is the snippet of google recommended study materials&lt;/p&gt;

&lt;p&gt;And now, without further a due - here's the Google interview study resources recommended by Google themselves (along with the snipper from my Google recruiter with the list). Thanks to the google recruiter I worked with - he was awesome!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.com/gp/product/0984782850/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0984782850&amp;amp;linkCode=as2&amp;amp;tag=ccs0cc-20&amp;amp;linkId=4e21ded6a61b9a202cdc2b9c0bd14025"&gt;&lt;img src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=US&amp;amp;ASIN=0984782850&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=ccs0cc-20"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.com/gp/product/0132350882/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0132350882&amp;amp;linkCode=as2&amp;amp;tag=ccs0cc-20&amp;amp;linkId=29ab921c59af65f0d3d9fd0497a6bc22"&gt;&lt;img src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=US&amp;amp;ASIN=0132350882&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=ccs0cc-20"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.google.com/url?q=https%3A%2F%2Fiio.sh%2Fr%2FOJLn&amp;amp;sa=D&amp;amp;sntz=1&amp;amp;usg=AFQjCNF-Mil7fKrT18Y4YzssCjcg5ZJBDg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y1v3LXKI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfrrtyx7q2b7ng0gv7c0.PNG" alt="Interviewing.io Logo"&gt;Anonymous technical mock interviews with engineers from Google, Facebook, and other top companies&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://leetcode.com/explore/interview/card/google/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8db7wXQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uim60zt4w4pf0dp29i2n.png" alt="Leet Code Logo"&gt; Leet Code Google Interview Practice Questions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow Clean Code Studio For More Content&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code StudioClean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vg8wcaxz5wvd6dlrqqxa.PNG"&gt;My Personal Google, Amazon, and Facebook Interview Notes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cleancode.studio/clean-code"&gt;Clean Code Principles&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>codequality</category>
      <category>google</category>
      <category>interview</category>
    </item>
    <item>
      <title>How to easily optimize your SEO when hosting your site with Netlify</title>
      <author>Thomas Cosialls</author>
      <pubDate>Fri, 23 Jul 2021 21:18:07 +0000</pubDate>
      <link>https://dev.to/tomtomdu73/how-to-easily-optimize-your-seo-when-hosting-your-site-with-netlify-2k1c</link>
      <guid>https://dev.to/tomtomdu73/how-to-easily-optimize-your-seo-when-hosting-your-site-with-netlify-2k1c</guid>
      <description>&lt;p&gt;I love Netlify for hosting my static sites. It's free, fast and the automatic deployments with the Github integration is a game changing. You still need to &lt;strong&gt;pay attention to a few points&lt;/strong&gt; if you want to get the best out of it, especially from a SEO point of view.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xbNgkl1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gei9shtc45cq5vneszem.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xbNgkl1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gei9shtc45cq5vneszem.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Static websites made with Gatsby, NextJS or Hugo have everything to boost your SEO score and help you get the golden 100 mark on Lighthouse. &lt;/p&gt;

&lt;p&gt;Indeed, expect to see your speed performances soar, with insanely low FCP (First Contentful Paint) , LCP (Largest Contentful Paint) and CLS (Cumulative Layout Shift) values.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Do1BBP9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f9yjfjumgxoi8nl8p5pd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Do1BBP9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f9yjfjumgxoi8nl8p5pd.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-issue"&gt;
  &lt;/a&gt;
  The issue
&lt;/h2&gt;

&lt;p&gt;However, a great Lighthouse score does not necessarily mean a better ranking and visibility on search engines. Especially if you host your site on Netlify. The reason? With its default settings, Netlify makes every page of your site available as a page on your custom domain and as a page in a subdomain inside &lt;em&gt;.netlify.app&lt;/em&gt;. And God knows how Google for instance does not like duplicate content! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#set-redirects-file-important"&gt;
  &lt;/a&gt;
  Set _redirects file (important!)
&lt;/h3&gt;

&lt;p&gt;First, you need to tell Netlify to redirect your Netlify subdomain to your custom domain. You have two ways to do that: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a &lt;em&gt;static&lt;/em&gt; folder in your project root and save inside a &lt;strong&gt;_redirects&lt;/strong&gt; file with the following content, by replacing the site name accordingly.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://[yoursitename].netlify.app/* https://www.[yoursitename].com/:splat 301!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install &lt;a href="https://www.gatsbyjs.com/plugins/gatsby-plugin-netlify/"&gt;gatsby-plugin-netlify&lt;/a&gt; plugin, that will automatically generate the &lt;strong&gt;_redirects&lt;/strong&gt; file for you.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#use-raw-relcanonical-endraw-on-every-page"&gt;
  &lt;/a&gt;
  Use &lt;code&gt;rel:"canonical"&lt;/code&gt; on every page
&lt;/h3&gt;

&lt;p&gt;To prevent duplicates and tell Google which page is the original version, make sure to include the following &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag inside the &lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/code&gt; of every pages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;link rel="canonical" href="{{ your-base-url }}{{ page-slug }}"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have too many pages on your site, doing it manually can quickly become tedious. I suggest you use &lt;a href="https://www.getgutenberg.io/"&gt;Gutenberg&lt;/a&gt; to automate this process.&lt;/p&gt;

&lt;p&gt;Here you are! Your site won't have duplicate content anymore and you should now stay far away from Google SEO penalties.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-tips"&gt;
  &lt;/a&gt;
  Other tips
&lt;/h2&gt;

&lt;p&gt;I would also suggest you to use the following Netlify plugins and npm packages to boost your static sites performances&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if you used Gatsby: &lt;a href="https://www.gatsbyjs.com/plugins/gatsby-plugin-minify/"&gt;&lt;strong&gt;gatsby-plugin-minify&lt;/strong&gt;&lt;/a&gt;, to minify all output HTML files.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Image Optim&lt;/strong&gt; (Netlify plugin) to compress all your static images&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Inline source&lt;/strong&gt; (Netlify plugin) to inline some sources and assets&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Submit sitemap&lt;/strong&gt; (Netlify plugin) to automatically push your updated sitemap to major search engines after each new build. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any questions, feel free to reach out to me - I'd be happy to help!&lt;/p&gt;

</description>
      <category>netlify</category>
      <category>wordpress</category>
      <category>gatsby</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 23 Jul 2021 21:15:13 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-3lco</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-3lco</guid>
      <description>&lt;p&gt;Hey there!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking back on your week, what was something you're proud of?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Getting a code compliment... or whatever else might spark joy ❤️ &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Wishing you more wins to come — and as much relaxation as this cat is experiencing...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/wu29mJA7MXBzG/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/wu29mJA7MXBzG/giphy.gif" alt="Cat getting brushed by multiple people"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>After weeks of development, Focus Wall has finally Launched!🎊</title>
      <author>Ayan S</author>
      <pubDate>Fri, 23 Jul 2021 20:06:40 +0000</pubDate>
      <link>https://dev.to/madebyayan/after-weeks-of-development-focus-wall-has-finally-launched-9l3</link>
      <guid>https://dev.to/madebyayan/after-weeks-of-development-focus-wall-has-finally-launched-9l3</guid>
      <description>&lt;p&gt;Optimize your desktop wall so you never lose track!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7E9mOBRA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8zrhryzj1i8oa4nwiph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7E9mOBRA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8zrhryzj1i8oa4nwiph.png" alt="Focus Wall design and example demo image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Focus Wall provides a clean desktop wall to help you stay focused on the things that matter most.&lt;/p&gt;

&lt;p&gt;Forget about the many to do lists that just keep on piling and then get lost, instead keep all your important things right on your wall so you never lose track of them.&lt;/p&gt;

&lt;p&gt;After working on Focus Wall for a while in public, I've finally launched it today on Product Hunt!&lt;/p&gt;

&lt;p&gt;You can check it out and learn more about it here:&lt;br&gt;
&lt;a href="https://focuswall.madebyayan.com"&gt;https://focuswall.madebyayan.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's the first in a series of productivity apps I've been building, so if you like this stay tuned for even more!&lt;/p&gt;

&lt;p&gt;I would love for you to try it out and hear your feedbacks and suggestions!&lt;/p&gt;

&lt;p&gt;Let's optimize your wall today!&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>devjournal</category>
      <category>design</category>
      <category>tooling</category>
    </item>
    <item>
      <title>PHP Create slugify URL from All language to English</title>
      <author>Nima Sadeghi</author>
      <pubDate>Fri, 23 Jul 2021 19:40:49 +0000</pubDate>
      <link>https://dev.to/aradpardaz/php-create-slugify-url-from-all-language-to-english-229g</link>
      <guid>https://dev.to/aradpardaz/php-create-slugify-url-from-all-language-to-english-229g</guid>
      <description>&lt;p&gt;PHP transliterator_transliterate - examples . These are the top rated real world PHP examples of transliterator_transliterate extracted from open source projects. You can rate examples to help us improve the quality of examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#programming-language-php"&gt;
  &lt;/a&gt;
  Programming Language: PHP
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#methodfunction-transliteratortransliterate"&gt;
  &lt;/a&gt;
  Method/Function: transliterator_transliterate
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#php-5-gt-540-php-7-pecl-intl-gt-200"&gt;
  &lt;/a&gt;
  (PHP 5 &amp;gt;= 5.4.0, PHP 7, PECL intl &amp;gt;= 2.0.0)
&lt;/h4&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  📝Description
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public Transliterator::transliterate ( string $subject [, int $start [, int $end ]] ) : string|false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  📝Parameters
&lt;/h3&gt;

&lt;p&gt;transliterator&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;In the procedural version, either a Transliterator or a string from which a Transliterator can be built.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;subject&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The string to be transformed.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;start&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The start index (in UTF-16 code units) from which the string will start to be transformed, inclusive. Indexing starts at 0. The text before will be left as is.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;end&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The end index (in UTF-16 code units) until which the string will be transformed, exclusive. Indexing starts at 0. The text after will be left as is.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#code-example-1"&gt;
  &lt;/a&gt;
  Code Example 1:
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php

function slugify($string)
{
    $string = transliterator_transliterate("Any-Latin; Latin-ASCII; [\u0080-\u7fff] remove; Lower();", $string);
    $string = preg_replace('/[-\s]+/', '-', $string);
    return trim($string, '-');
}

echo '/n'.slugify('A æ Übérmensch på høyeste nivå! И я люблю PHP! ﬁ'); 
//out: a-ae-ubermensch-pa-hoyeste-niva!-i-a-lublu-php!-fi


echo '/n'.slugify('وب فارسی در مجله دلگرم delgarm');
//out: wb-farsy-dr-mjlh-dlgrm-delgarm


echo '/n'.slugify('أصبح تسجيل طلاب الصف الأول إلكترونيًا');
//out: asbh-tsjyl-tlab-alsf-alawl-alktrwnyaa

?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#function-example-2"&gt;
  &lt;/a&gt;
  function Example 2:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; public static function slugify($string, $separator = null)
 {
     $separator = null !== $separator ? $separator : (null !== self::$separator ? self::$separator : '-');
     $slug = trim(strip_tags($string));
     $slug = transliterator_transliterate('NFD; [:Nonspacing Mark:] Remove; NFC; Any-Latin; Latin-ASCII; Lower();', $slug);
     $slug = preg_replace("/[^a-zA-Z0-9\\/_|+ -]/", '', $slug);
     $slug = preg_replace("/[\\/_|+ -]+/", $separator, $slug);
     $slug = trim($slug, $separator);
     return $slug;
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://hotexamples.com/examples/-/-/transliterator_transliterate/php-transliterator_transliterate-function-examples.html"&gt;hotexamples&lt;/a&gt; - 30 Code Examples&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.delgarm.com/song-by-sirvan-khosravi-diongi.a239734"&gt;slugify sample urls&lt;/a&gt; Delgarm&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>php</category>
      <category>slugify</category>
      <category>transliterator</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why "Learn by Doing" is important</title>
      <author>Cubite</author>
      <pubDate>Fri, 23 Jul 2021 18:54:33 +0000</pubDate>
      <link>https://dev.to/corpcubite/why-learn-by-doing-is-important-5a7f</link>
      <guid>https://dev.to/corpcubite/why-learn-by-doing-is-important-5a7f</guid>
      <description>&lt;p&gt;It's not what you know, it's what you do that counts&lt;/p&gt;

&lt;p&gt;This is true for the most part. You know how the saying goes: give a man a fish and he eats for one day; teach him how to fish and he eats for a lifetime. While learning from others may feel easier or more comfortable (this is why schools exist), at the end of the day it is hands-on experience that makes us better at what we do.&lt;/p&gt;

&lt;p&gt;In software development,  we can learn a lot from those who have been through the trenches. We love to consume blogs and podcasts on topics like software architecture, design patterns, testing practice, etc. The problem with learning by reading is that we don't get a sense of how things work in the context of real development. Books are wonderful educational tools but they're not so good for experiential learning. The only way to really understand something is to build it yourself . This has a whole host of benefits that we'll discuss later, but at the core is one simple truth:  you learn more from doing .&lt;/p&gt;

&lt;p&gt;This is not to say that reading or listening to podcasts are bad - they're great. However, when trying to learn how something works, jumping into it and doing it yourself is always going to give you the most value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-big-picture"&gt;
  &lt;/a&gt;
  The Big Picture
&lt;/h2&gt;

&lt;p&gt;When trying to learn something new, it's always a good idea to figure out how you'll approach it before you dive in head first. You don't want to be floundering around wondering what to do and where to go next - that will lead to frustration and possibly many wasted hours. &lt;/p&gt;

&lt;p&gt;Speaking of wasted time, the reason learning from others is better than doing yourself is that it's faster . Learning with others is a much more passive activity where you're absorbing what they have to say, instead of constructing and executing. The downside here is that you are not in control how things are presented - there's no guarantee they will even present the topic the way you need to learn it.&lt;/p&gt;

&lt;p&gt;This is why I encourage people to  get their hands dirty and do things . This gives you the control that reading doesn't - not only can you decide on what direction to head in, but you can also set your own schedule on when to finish it. When learning from others, someone else is in control, but with doing it yourself , you are. This also means that you can decide what order and depth to approach a topic - this will be highly beneficial when we get to the actual learning part of this guide.&lt;/p&gt;

&lt;p&gt;A great side effect of learning by doing is that while you're working on something, there will probably be times when you get stuck . This can be frustrating, but is actually a really great thing. When you hit a wall and start to question things, it means that your brain is trying to process everything and find a better way - this will ultimately make you a better developer.&lt;/p&gt;

&lt;p&gt;It's also a prime opportunity to ask questions and seek out help from others. You're going to be building something, which means you'll have lots of information that you can share with other people. This is just like when you were learning how to tie your shoelaces or ride a bike - if someone was patient enough to teach you those things, you can certainly share your knowledge with others when they ask for assistance.&lt;/p&gt;

&lt;p&gt;The only thing that's stopping you from learning something is yourself . If you're stuck, just keep researching, working, and asking questions - eventually you will break through the wall and it will all start to make sense.  Once you do get over the hump though, you'll have a real appreciation for the topic and will be able to build upon that knowledge in the future.&lt;/p&gt;

&lt;p&gt;So, let's get started...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learning-by-doing-how-it-works"&gt;
  &lt;/a&gt;
  Learning by Doing: How it works
&lt;/h2&gt;

&lt;p&gt;Learning anything - whether it be programming or playing an instrument - requires dedication and persistence . If something doesn't click after trying to learn it for an hour or two, don't give up. There are guaranteed to be lots of things that you won't understand when you start working on them. That's okay - just keep doing it.&lt;/p&gt;

&lt;p&gt;Don't get frustrated if you're not making any progress on the project either - at first, your job is to learn how to do things. Once you understand the basics, everything else will be easy - believe it or not, there are people that have been coding for years and still don't know how to do certain things .&lt;/p&gt;

&lt;p&gt;The biggest mistake I see when people try to learn something is that they give up too early and then try a different approach. There's nothing wrong with trying multiple routes, but if you're not making any progress on one, don't spend more time on it - just move onto the next method.&lt;/p&gt;

&lt;p&gt;Everything else being equal (time, desire, etc.), the biggest factor on how fast you learn something is going to be how much time you spend on it . This means that even if two people are trying one method and another person is using a different method, odds are good that in the long run, the person doing more will end up ahead.&lt;/p&gt;

&lt;p&gt;The other thing you need to remember when learning is that there's a difference between getting something done (implementation) and understanding it (architecture). When you're working on your project, feel free to implement things however works best for you - the goal here isn't to optimize code efficiency at this point.  This will be the difference between getting things done and understanding what is going on, so don't worry if your code doesn't look pretty. One big rule of thumb that a lot of people use when writing production code is to make sure it's readable enough for someone else to understand - while this won't be part of the project you're working on here, I think it's a good idea to follow this rule so that you can better communicate with others when asking for help.&lt;/p&gt;

&lt;p&gt;Learning by doing is all about getting something done and collecting data on what works and doesn't work . This means that the learning process will be different from person to person - there are no set guidelines as to how long it should take, what you should build, or how it should work.&lt;/p&gt;

&lt;p&gt;For me personally, learning a new topic usually goes through multiple stages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Not knowing anything about the subject at all and having no clue where to start&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Being overwhelmed with all of the information out there and not really knowing what is important (or even possible)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Getting lost in confusion about questions like "What should I do first?", "What if I'm doing something wrong?", or "How can I make this more efficient?"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Going through these stages over and over again until it finally starts to click&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Knowing that the learning process tends to go through multiple stages is important because it'll help you save time. In the beginning, you won't understand anything, so just keep researching - this is necessary for getting a broad view of things. Once you are familiar with the basics though, you should be able to learn quickly because you now know where to start. This is the point at which someone will be most likely to get frustrated and give up - but it's also when everyone sees their biggest improvements, so don't stop here!&lt;/p&gt;

</description>
      <category>learning</category>
      <category>lms</category>
      <category>edtech</category>
    </item>
    <item>
      <title>Internet access for lambda in VPC</title>
      <author>Afraz Khan</author>
      <pubDate>Fri, 23 Jul 2021 18:42:37 +0000</pubDate>
      <link>https://dev.to/afrazkhan/internet-access-for-lambda-in-vpc-3bjp</link>
      <guid>https://dev.to/afrazkhan/internet-access-for-lambda-in-vpc-3bjp</guid>
      <description>&lt;p&gt;AWS resources living inside a VPC have some security layers attached to them and &lt;strong&gt;AWS Lambda&lt;/strong&gt; is one of very common such scenarios, where your code is only accessible if allowed or can connect to internet ( to access dynamodb, ec2 instances etc) if needed through VPC configurations.&lt;/p&gt;

&lt;p&gt;How to attach VPC to your lambdas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Create 2 new &lt;strong&gt;&lt;em&gt;private subnets&lt;/em&gt;&lt;/strong&gt; particulalrly for your lambdas and label them in such a way so that they are distinguishable as private subnets.&lt;/li&gt;
&lt;li&gt;If delegeted VPC has no &lt;strong&gt;&lt;em&gt;Internet Gateway&lt;/em&gt;&lt;/strong&gt; attached, create one and attach to VPC.&lt;/li&gt;
&lt;li&gt; Create a &lt;strong&gt;&lt;em&gt;NAT Gateway&lt;/em&gt;&lt;/strong&gt; and give it a public subnet. (create if not avail)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;strong&gt;&lt;em&gt;Route Table&lt;/em&gt;&lt;/strong&gt; tab, there must be 2 route tables, one for your private subnets/lambdas and other for public subnets.&lt;br&gt;
Associate public subnets to route table specified for public subnets with below configuration&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; Destination -&amp;gt; 0.0.0.0/0
 Target -&amp;gt; {Internet Gateway}
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Associate private subnets to other route table with below configuration&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; Destination -&amp;gt; 0.0.0.0/0
 Target -&amp;gt; {Nat Gateway}  
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a role with policy  &lt;strong&gt;AWSLambdaVPCAccessExecutionRole&lt;/strong&gt; and attach it to all lambas that need public access.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Attach VPC and private subnets to your lambdas.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cheers :)&lt;/p&gt;

</description>
      <category>aws</category>
      <category>lambda</category>
      <category>vpc</category>
    </item>
    <item>
      <title>How create Geometric objects - 11 Trees 🌳 Pure CSS</title>
      <author>Roden</author>
      <pubDate>Fri, 23 Jul 2021 18:40:07 +0000</pubDate>
      <link>https://dev.to/kerthin/11-geometric-objects-trees-pure-css-p8l</link>
      <guid>https://dev.to/kerthin/11-geometric-objects-trees-pure-css-p8l</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;2 years ago, wandering through the expanses of Behance, I came across an interesting &lt;a href="https://www.behance.net/gallery/74314999/FLOERA"&gt;work from the studio Flöra&lt;/a&gt;. And in it I saw interesting geometric objects that reminded me of trees. I really liked the style of these illustrations and decided to try to implement them using CSS.&lt;/p&gt;

&lt;h1&gt;DEMO&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/RodenKerthin/embed/WNjXpLz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;You can also download the project from my &lt;code&gt;GitHub repository&lt;/code&gt;. (There is also a demo on &lt;code&gt;GitHub Pages&lt;/code&gt;).&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Kerthin"&gt;
        Kerthin
      &lt;/a&gt; / &lt;a href="https://github.com/Kerthin/trees-templateSait"&gt;
        trees-templateSait
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The geometric representation of trees
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/Kerthin/trees-templateSait/master/#"&gt;&lt;img width="100" src="https://res.cloudinary.com/practicaldev/image/fetch/s--EhfolkCX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/trees-templateSait/master/READMEimage/squirrelAppIcon.png" alt="Kerthin logo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/trees-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/3aaee52aea7e26ea020e0c2bac3ea70c011c1cc0507999c2c8b91c121b7fe9ba/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6275696c642d70617373696e672d627269676874677265656e2e737667" alt="Build Status"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/trees-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/9131d6ef04409049c328ce7a6f6a175e64f1374adac1f18ffaf89a8f2889e366/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6d706c6574696f6e2d32302532352d6f72616e67652e737667" alt="completion Status"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/trees-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/ace92ef25e6952f0f77c73e5169314c5c556ef62b59ca99b05d1b6a6fa9c08b9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76362e342e302d626c75652e737667" alt="Version"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/trees-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/3cefcfb7445315bec657e476d97e481c4454c212aeba9b4750dedfb4210a1f1b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6f64652d76392e342e302d626c75652e737667" alt="Version"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/trees-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/b9df44101935d7d9d1a7473476819810c8e2aff9ccc0a172f9ebe3d01e94ea6f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f626f7765722d76312e382e342d626c75652e737667" alt="Version"&gt;&lt;/a&gt; &lt;br&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/trees-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/8057bef1e1a6a5aa5bc62b252a0eaf471d3f8b5516da3db38c5c79daa8f83c01/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7265706f25323073697a652d3434302e382532304d422d677265656e2e737667" alt="Size"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/trees-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/51a0fe3eb761a361596ff48ff1099dfd1088addcb441363fbe2dfff24bec2cd4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d696e69666965642532307265706f2d32302532304d422d677265656e2e737667" alt="Size"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/trees-templateSait/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/685b6b61f9e20199132631db1c422c1b44109707d8fdac9b87b74174e3b83cc1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70726f6a65637425323076657273696f6e2d76302e322d626c75652e737667" alt="Version"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;
Description&lt;/h2&gt;
&lt;p&gt;This site is an example of work created specifically for the portfolio. If you want to take a look at it, then you can follow the link given below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kerthin.github.io/trees-templateSait/" rel="nofollow"&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
Use technology.&lt;/h4&gt;
&lt;p&gt;The following technologies were used to create this project:&lt;/p&gt;
&lt;h3&gt;
Task-Manager&lt;/h3&gt;
&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/trees-templateSait/master/#"&gt;
    &lt;img width="160px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--j1TeM7ux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/trees-templateSait/master/READMEimage/gulp.svg"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;h3&gt;
Software platform&lt;/h3&gt;
&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/trees-templateSait/master/#"&gt;
    &lt;img width="260px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--lywCt5pq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/trees-templateSait/master/READMEimage/nodejs-1.svg"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;
Preprocessors&lt;/h3&gt;

&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/trees-templateSait/master/#"&gt;
    &lt;img width="144px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--eAelBYes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/trees-templateSait/master/READMEimage/pug.svg"&gt;
  &lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/trees-templateSait/master/#"&gt;
    &lt;img width="144px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--UHMT68UT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/trees-templateSait/master/READMEimage/sass-1.svg"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;
Libraries&lt;/h3&gt;
&lt;h3&gt;
Package manager&lt;/h3&gt;

&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/Kerthin/trees-templateSait/master/#"&gt;
    &lt;img width="144px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--IMuYpb9W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kerthin/trees-templateSait/master/READMEimage/npm.svg"&gt;
  &lt;/a&gt;
&lt;/p&gt;


&lt;h2&gt;
Plugins&lt;/h2&gt;
&lt;p&gt;To develop the project through gulp, I used the following types of NPM plugins:&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Plugin&lt;/th&gt;
&lt;th&gt;Status&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-sourcemaps" rel="nofollow"&gt;gulp-sourcemaps&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-sourcemaps" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/528a1ebd364b693bb3d0101b0673c41e655019ffd2f9bdc0d1d6ee92e2641899/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76322e362e342d626c75652e737667" alt="gulp-sourcemaps-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Intended for generation of &lt;code&gt;css source maps&lt;/code&gt; which will be necessary at debugging of a code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-imagemin" rel="nofollow"&gt;gulp-imagemin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-imagemin" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/711705519071329822e444430727735680a0559653d21c428730d5f74dacef31/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76342e312e302d626c75652e737667" alt="gulp-imagemin-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Minify &lt;code&gt;PNG&lt;/code&gt;, &lt;code&gt;JPEG&lt;/code&gt;, &lt;code&gt;GIF&lt;/code&gt; and &lt;code&gt;SVG&lt;/code&gt; images with &lt;code&gt;imagemin&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-autoprefixer" rel="nofollow"&gt;gulp-autoprefixer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-autoprefixer" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/98049dfc0610712ebdfca9ffac989e2d2b0693eec4fd386e15242b7eeec66552/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76362e302e302d626c75652e737667" alt="gulp-autoprefixer-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Prefix &lt;code&gt;CSS&lt;/code&gt; with &lt;code&gt;Autoprefixer&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/imagemin-pngquant" rel="nofollow"&gt;imagemin-pngquant&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/imagemin-pngquant" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/98049dfc0610712ebdfca9ffac989e2d2b0693eec4fd386e15242b7eeec66552/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76362e302e302d626c75652e737667" alt="imagemin-pngquant-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;Pngquant imagemin&lt;/code&gt; plugin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-uglify" rel="nofollow"&gt;gulp-uglify&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-uglify" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b2b4a07c63198d7e5f42f3b13e24079c5ffbc9c3527a41f9179a171d7f0e4f0f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76332e302e312d626c75652e737667" alt="gulp-uglify-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Minify &lt;code&gt;JavaScript&lt;/code&gt; with &lt;code&gt;UglifyJS3&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-rigger" rel="nofollow"&gt;gulp-rigger&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-rigger" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/503c5942f276fc051f3b969da0dbaaf76a0aa9bb080825ceafda298f5fb986fa/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76302e352e382d626c75652e737667" alt="gulp-rigger-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;Rigger&lt;/code&gt; is a build time include engine for &lt;code&gt;Javascript&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt;, &lt;code&gt;CoffeeScript&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-clean-css" rel="nofollow"&gt;gulp-minify-css&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-clean-css" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b4d51093e94d643642cc5875f38df3914480590a4cc9720463e6c100ad1a203d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76332e31302e302d626c75652e737667" alt="gulp-minify-css-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;Gulp&lt;/code&gt; plugin to minify &lt;code&gt;CSS&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/rimraf" rel="nofollow"&gt;rimraf&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/rimraf" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/cfbb87eb7037ab4f0aa7470555d074f84bb49b210d547a680b7b75d9608432bb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76322e362e322d626c75652e737667" alt="rimraf-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;UNIX&lt;/code&gt; command &lt;code&gt;rm&lt;/code&gt; &lt;code&gt;-rf&lt;/code&gt; for node.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-watch" rel="nofollow"&gt;gulp-watch&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/gulp-watch" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ac8499db04cba84bee8f0e495626d8be65ee98015cda17685ecd617944488313/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76352e302e312d626c75652e737667" alt="gulp-watch-status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;File watcher that uses super-fast chokidar and emits vinyl&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Kerthin/trees-templateSait"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;a href="https://kerthin.github.io/trees-templateSait/"&gt;&lt;h1&gt;Full Page Demo (GitHub Pages)&lt;/h1&gt;&lt;/a&gt;
&lt;/blockquote&gt;

&lt;h1&gt;01. Seedling&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_hWcHRNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4r0ethujiy5rkowcls2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_hWcHRNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4r0ethujiy5rkowcls2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Creating this tree took the most time because of the need to create the lower oval dotted lines. Since to create such lines, I needed to create 16 hemispheres, each of which had a different size.&lt;/p&gt;

&lt;h1&gt;02. Sepal&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r1KA6gNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4f609rl67a514xe8zs62.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r1KA6gNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4f609rl67a514xe8zs62.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A very simple tree. There are no complicated shapes or lines.&lt;/p&gt;

&lt;h1&gt;03. Linden&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EYIOELo_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7vvem7z6q9l39btyj5l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EYIOELo_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7vvem7z6q9l39btyj5l.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;04. Pine&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TYXEyh40--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jf2ccx0h26xa2ug4gkw4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TYXEyh40--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jf2ccx0h26xa2ug4gkw4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To create winding lines with two or more corners, it is enough just to use several blocks with rounded corners that need to be connected in the necessary sequence.&lt;/p&gt;

&lt;h1&gt;05. Palm&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cHkY8wiw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4ls70da320xu8jdixc1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cHkY8wiw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4ls70da320xu8jdixc1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To create winding lines, the same method was used here as in the fourth tree.&lt;/p&gt;

&lt;h1&gt;06. Fir&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--njG5M1NC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/om4crlh123evyhmcjlli.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--njG5M1NC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/om4crlh123evyhmcjlli.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To create the moon, I used a round invisible block, which had the &lt;code&gt;box-shadow&lt;/code&gt; property set with the value &lt;code&gt;20px 20px 0 0 #000&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I used the same method in my other works with illustrations&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/RodenKerthin/embed/yLgvGYp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/kerthin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEDW7r1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N_Cn4rKT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/634154/b6864fc7-4410-46ca-a11d-bc605dc6d2b1.jpeg" alt="kerthin"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kerthin/codepen-css-illustration-animation-8lo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;CodePen - CSS Illustration (Animation)&lt;/h2&gt;
      &lt;h3&gt;Roden ・ May 19 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codepen&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/RodenKerthin/embed/QWddOgw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/kerthin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEDW7r1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N_Cn4rKT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/634154/b6864fc7-4410-46ca-a11d-bc605dc6d2b1.jpeg" alt="kerthin"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kerthin/codepen-css-icons-animation-3c1e" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;CodePen - CSS Icons (Animation)&lt;/h2&gt;
      &lt;h3&gt;Roden ・ May 21 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codepen&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;p&gt;In order to create curved lines, you just need to set the properties for rounding individual corners. For example: &lt;code&gt;border-bottom-left-radius&lt;/code&gt; or &lt;code&gt;border-bottom-right-radius&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;07. Rose&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zuz_D_fI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5nuw3s72vln0x8o5r1h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zuz_D_fI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5nuw3s72vln0x8o5r1h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;08. Willow&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9QJOlyVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s16foulkjr5gyum3soev.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9QJOlyVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s16foulkjr5gyum3soev.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;09. Sunflower&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LanaKAtI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzm47fgwpvu7zofdq5td.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LanaKAtI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzm47fgwpvu7zofdq5td.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To create such petals, you just need to use the &lt;code&gt;border-radius&lt;/code&gt; property and set it to &lt;code&gt;50% 100px 0 80px&lt;/code&gt; or &lt;code&gt;100px 50% 80px 0&lt;/code&gt;. Depending on which way you need a slope.&lt;/p&gt;

&lt;h1&gt;10. Bell&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6O6Q1P6R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3wkvb8su8y78hflfom8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6O6Q1P6R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3wkvb8su8y78hflfom8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To create winding lines, the same method was used here as in the fourth tree.&lt;/p&gt;

&lt;h1&gt;11. Poplar&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dRzExXxN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zteagsijmjsz6rvw8cq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dRzExXxN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zteagsijmjsz6rvw8cq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;THE END&lt;/h1&gt;

&lt;p&gt;Well, that's it. I just wanted to share my old work and nothing more. Thanks for attention.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Goodbye&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/HwXj1VRf9BJ04/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/HwXj1VRf9BJ04/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>3 design tools/resources to up your frontend game!</title>
      <author>kapeel kokane</author>
      <pubDate>Fri, 23 Jul 2021 18:19:10 +0000</pubDate>
      <link>https://dev.to/comscience/three-design-tools-resources-to-up-your-frontend-game-3dga</link>
      <guid>https://dev.to/comscience/three-design-tools-resources-to-up-your-frontend-game-3dga</guid>
      <description>&lt;p&gt;Hi There! 👋🏾&lt;/p&gt;

&lt;p&gt;Do you find yourself struggling to find resources to use in your frontend projects?&lt;/p&gt;

&lt;p&gt;Well, the search ends today. &lt;/p&gt;

&lt;p&gt;In this article, we look at a few resources that could help you.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#iconfinder"&gt;
  &lt;/a&gt;
  Iconfinder
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.iconfinder.com/"&gt;Iconfinder&lt;/a&gt; is a tool that helps you find icons and illustrations for use in your projects using keywords.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lPMqja-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5ymtz3u8kulypoka5s4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lPMqja-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5ymtz3u8kulypoka5s4.png" alt="Icon finder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set the filter to &lt;strong&gt;free&lt;/strong&gt; and &lt;strong&gt;For commercial use&lt;/strong&gt; so that you can use the resources in your projects freely. The icons can be downloaded freely as long as you are okay with the Ads on the platform.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#pixelied"&gt;
  &lt;/a&gt;
  Pixelied
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://pixelied.com/"&gt;Pixelied&lt;/a&gt; is a Saas platform similar to Canva which helps the users create Illustrations not just for projects but also for social media like Instagram, Twitter etc. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O9L8xDLi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vnmgx965ybqxwj2srrm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O9L8xDLi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vnmgx965ybqxwj2srrm.png" alt="Pixelied"&gt;&lt;/a&gt;&lt;br&gt;
It comes with a library of stock images and also a functionality for removing backgrounds from images. Along with that, there is a huge library of icons that can be freely used in all projects. &lt;br&gt;
The product comes with a free tier (which is quite limiting) as well as a monthly paid tier (&lt;strong&gt;$9.95&lt;/strong&gt; per month). &lt;br&gt;
But right now, Appsumo.com is running a great lifetime deal for Pixelied for (&lt;strong&gt;$59&lt;/strong&gt;) lifetime! Check it out &lt;a href="https://appsumo.8odi.net/2rj4DG"&gt;here&lt;/a&gt;.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#crello"&gt;
  &lt;/a&gt;
  Crello
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://crello.com/home/"&gt;Crello&lt;/a&gt; is also another Saas platform which is another alternative to Canva. But in addition to Pixelied, Crello also provides the capability to create video, gifs etc.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7QxEhw43--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tt9o8mw3dk2zxay9bxyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7QxEhw43--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tt9o8mw3dk2zxay9bxyi.png" alt="Crello"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Crello comes with several pre-defined templates. Also, there are millions of stock images and illustrations that are present on the &lt;a href="https://crello.com/unlimited/photos/"&gt;platform&lt;/a&gt; that can be used in projects. &lt;/p&gt;

&lt;p&gt;The free plan of Crello lets you download just 5 assets every months which is not at all practical. Crello comes with a paid subscription plan (which costs &lt;strong&gt;$7.99&lt;/strong&gt; per month) but Appsumo.com is running an offer for Crello which will provide a lifetime subscription for &lt;strong&gt;$49&lt;/strong&gt;. Here is the deal &lt;a href="https://appsumo.8odi.net/Ea94Bn"&gt;link&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;Hope the resources help you in upping your frontend development game. Follow my Twitter to get code snippets regularly. 🙌🏾&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gXW_kDvn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/Eczf99ZUcAAVSy-.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tCoQBxER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1372919009939652612/E9s309tH_normal.jpg" alt="Kapeel 💙 Typescript profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Kapeel 💙 Typescript
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @kokaneka
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Today's &lt;a href="https://twitter.com/hashtag/sketchnotes"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/sketchnotes"&gt;#sketchnotes&lt;/a&gt; are about &lt;a href="https://twitter.com/hashtag/ternary"&gt;#ternary&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/operators"&gt;#operators&lt;/a&gt; in &lt;a href="https://twitter.com/hashtag/javascript"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/javascript"&gt;#javascript&lt;/a&gt;&lt;br&gt;&lt;br&gt;I'm creating &lt;a href="https://twitter.com/hashtag/sketchnotes"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/sketchnotes"&gt;#sketchnotes&lt;/a&gt; for &lt;a href="https://twitter.com/hashtag/javascript"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/javascript"&gt;#javascript&lt;/a&gt; concepts from the book: 'You don't know JS(&lt;a href="https://twitter.com/YDKJS"&gt;@YDKJS&lt;/a&gt;)' by &lt;a href="https://twitter.com/getify"&gt;@getify&lt;/a&gt; using &lt;a href="https://twitter.com/excalidraw"&gt;@excalidraw&lt;/a&gt; by &lt;a class="mentioned-user" href="https://dev.to/vjeux"&gt;@vjeux&lt;/a&gt;
&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/webdev"&gt;#webdev&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/webdev"&gt;#webdev&lt;/a&gt;elopment &lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:01 PM - 13 Jul 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1282646430780284928" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1282646430780284928" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1282646430780284928" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Cheers! &lt;/p&gt;

</description>
      <category>design</category>
      <category>productivity</category>
      <category>webdev</category>
      <category>gamedev</category>
    </item>
  </channel>
</rss>
