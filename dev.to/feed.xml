<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Build a static blog from markdown files with Next.js</title>
      <author>Michael Burrows</author>
      <pubDate>Tue, 26 Oct 2021 05:23:45 +0000</pubDate>
      <link>https://dev.to/michaelburrows/build-a-static-blog-from-markdown-files-with-nextjs-2c8n</link>
      <guid>https://dev.to/michaelburrows/build-a-static-blog-from-markdown-files-with-nextjs-2c8n</guid>
      <description>&lt;p&gt;In this tutorial we’ll be building a blog using Next.js with the data for each of the individual blog posts loaded from markdown files. While there are many Next.js blog starter code bases available building from scratch is a great learning experience and shouldn’t take you long to get up and running.&lt;/p&gt;

&lt;p&gt;Let’s get started by creating a new Next.js application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app next-md-blog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’ll also need a couple of dependencies so let’s go ahead and install those as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install gray-matter marked
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;gray-matter&lt;/code&gt; – Parses front-matter from markdown files.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;marked&lt;/code&gt; – Compiles markdown into HTML.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next let’s create a layout component that’ll load a global header and footer as is common practice when building a blog or websites in general. Create a new &lt;code&gt;components&lt;/code&gt; folder with a &lt;code&gt;Layout.js&lt;/code&gt;, &lt;code&gt;Header.js&lt;/code&gt; and &lt;code&gt;Footer.js&lt;/code&gt; files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#componentslayoutjs"&gt;
  &lt;/a&gt;
  components/Layout.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Header&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Footer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Footer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Footer&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#componentsheaderjs"&gt;
  &lt;/a&gt;
  components/Header.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt; &lt;span class="nx"&gt;Blog&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#componentsfooterjs"&gt;
  &lt;/a&gt;
  components/Footer.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Footer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;footer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;Powered&lt;/span&gt; &lt;span class="nx"&gt;by&lt;/span&gt; &lt;span class="nx"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/footer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Footer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next let’s create a sample markdown file for a blog post. This along with all subsequent blog post markdown files will need to be saved inside a new posts folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;posts/hello-world.md

---
title: 'Hello World'
teaser: 'This is a short teaser for the first blog post.'
published: 'January 1, 2021'
thumbnail: '/images/stock-01.jpg'
---

Accusamus perferendis **voluptatibus** enim et. Cupiditate dolorum
delectus temporibus in [earum cumque](https://w3collective.com) sunt 
qui. Quia quidem dolores delectus ut beatae id. Totam eius labore ut. 
Dolores doloribus ut ab minima fugiat eum atque. Sit ullam vel itaque 
minima non officia sunt ab.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The images folder for the thumbnails should be located within the public folder in the root of the application. Create a couple more files like this and then we’re ready to create a &lt;code&gt;Post.js&lt;/code&gt; component that’ll display teasers for each of these blog posts on the homepage.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#componentspostjs"&gt;
  &lt;/a&gt;
  components/Post.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post-teaser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;      
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`/blog/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;thumbnail&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;published&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;teaser&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we’re getting the front matter data (title, teaser, published, thumbnail) and outputting that data inside some HTML markup. Now to start pulling everything together by updating the &lt;code&gt;pages/index.js&lt;/code&gt; file as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;matter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gray-matter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../components/Layout&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../components/Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt; &lt;span class="nx"&gt;Blog&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/title&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A simple blog powered by Next.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;))}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Layout&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readdirSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sortOrder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;published&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;published&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.md&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;markdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frontmatter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;matter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sortOrder&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now all that’s left it to create the file to display the individual blog posts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pagesblogslugjs"&gt;
  &lt;/a&gt;
  pages/blog/[slug].js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;matter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gray-matter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;marked&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;marked&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/Layout&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;published&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;teaser&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/title&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;teaser&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;published&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;dangerouslySetInnerHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;__html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;marked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Layout&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readdirSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.md&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;markdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.md&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;matter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s all for this tutorial, you should now have a functioning blog using Next.js which you can easily add new posts using markdown files. We’ve only just scratched the surface of what’s possible with Next.js, we’ll be publishing many more tutorials on the topic so stay tuned.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>The Ultimate Resource Guide for Your Next 100 Days of Code</title>
      <author>vibalijoshi</author>
      <pubDate>Tue, 26 Oct 2021 04:57:59 +0000</pubDate>
      <link>https://dev.to/vibalijoshi/the-ultimate-resource-guide-for-your-next-100-days-of-code-2630</link>
      <guid>https://dev.to/vibalijoshi/the-ultimate-resource-guide-for-your-next-100-days-of-code-2630</guid>
      <description>&lt;p&gt;The adrenaline rush that we get from the idea of sticking to coding every day for 100 days is undeniable, and this gets you through your first week of coding drive. 🤩&lt;/p&gt;

&lt;p&gt;BUT 👀&lt;/p&gt;

&lt;p&gt;We've all been there, where things start to slow down after a week or so. Life intervenes, and we are longer able to continue the challenge 💔&lt;/p&gt;

&lt;p&gt;But don't worry, we all learn from our mistakes. There is a pattern that I have discovered among those who have accomplished this feat, and the following are my observations that you can follow:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#declare-it-to-the-world-butin-style"&gt;
  &lt;/a&gt;
  Declare it to the world but...&lt;em&gt;in style&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HBt-hr9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632933224095/PsDJSVlri.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HBt-hr9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632933224095/PsDJSVlri.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It has been scientifically proven that declaring something publicly gives you the responsibility of accountability. You don't want to show the world that you failed, do you? This is the energy source that keeps you going!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#twitter"&gt;
  &lt;/a&gt;
  Twitter
&lt;/h3&gt;

&lt;p&gt;If you haven't already, you should be familiar with tech Twitter as a developer. Not only do you get to build your personal brand, but you also get to learn a lot. My life has changed dramatically since I decided to reactivate my Twitter account.&lt;/p&gt;

&lt;p&gt;How can you use Twitter for #100DaysOfCode?&lt;/p&gt;

&lt;p&gt;Many of you may already be doing this by tweeting about your progress every day; using #100DaysOfCode hashtags and being retweeted by bots created by developers during their 100 Days of Code!&lt;/p&gt;

&lt;p&gt;But how can you add &lt;em&gt;"the"&lt;/em&gt; factor to your tweets?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-add-value-to-your-tweets"&gt;
  &lt;/a&gt;
  1. Add value to your tweets
&lt;/h3&gt;

&lt;p&gt;Instead of saying, "I did blah, blah, blah," include what you learned today. Maybe you learned about an amazing C++ STL function that makes things so simple or a VSC shortcut that can make someone's day a lot easier.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iGDVuyb1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FATRiwFWYAQp2KA.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--gx9vlira--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1425144790732185603/xftugook_normal.jpg" alt="Dayna profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Dayna
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @dev_dayna
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Day 45 &lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt; &lt;br&gt;JavaScript Event Handlers. The .addEventListener() here will take the inner HTML of the view button and change the text from "view" to "NEW TEXT MESSAGE" when clicked. When close is clicked, it will return the inner HTML text back to "view". I get this!🤓 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:15 PM - 27 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1442508229724946441" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1442508229724946441" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1442508229724946441" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#2-make-it-fancy"&gt;
  &lt;/a&gt;
  2. Make it fancy!
&lt;/h3&gt;

&lt;p&gt;Some developers also have a nag of UI/UX tweet along with a stylized picture of what they have done. This is quite successful as Sheldon once said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yes, well, they say a picture's worth a thousand words, but I say nothing beats a picture and a thousand words.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jL8kDook--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_CjdMkXIAMFdbf.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--3rh8TVa8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1434208408098517000/Iy7EQORZ_normal.jpg" alt="Christine 🇬🇧🇰🇷 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Christine 🇬🇧🇰🇷
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @christinehampt
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      DAY 79 OF &lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt; &lt;br&gt;👀💜💜 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      23:05 PM - 11 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1436828262051860480" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1436828262051860480" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1436828262051860480" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;She uses &lt;a href="//canva.com"&gt;Canva&lt;/a&gt; as mentioned in one of her tweets. &lt;/p&gt;

&lt;p&gt;For this you can also use tools like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://carbon.now.sh/"&gt;Carbon&lt;/a&gt; if you want to share a code snippet.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://marketplace.visualstudio.com/items?itemName=Goopware.raythis"&gt;RayThis: Instant Beautiful Code Screenshots&lt;/a&gt; A VSC extension that lets you create a beautiful snippet. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This would not only make your tweets prettier but also add extensive value to your posts!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blog-about-it"&gt;
  &lt;/a&gt;
  Blog About it
&lt;/h2&gt;

&lt;p&gt;There are many free amazing developer blogging sites that you can document your journey. Some of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://dev.to/"&gt;Dev.to&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hashnode.com/"&gt;Hashnode&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://hackernoon.com/"&gt;Hackernoon&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Also GitHub, Medium&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/best-blogging-platforms-for-developers/"&gt;Here is a great comparison&lt;/a&gt;  between all three platforms, and you can then decide which one is best for you.&lt;/p&gt;

&lt;p&gt;Not only you are expanding your knowledge, but you are also sharing it with the rest of the world. If you want to become a technical writer, I believe this is an excellent ritual to follow in order to build your portfolio.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#divide-and-conquer"&gt;
  &lt;/a&gt;
  Divide and Conquer
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;From  &lt;a href="https://www.freecodecamp.org/news/my-journey-in-completing-100-days-of-code-e657428b1fa6/"&gt;My journey in completing 100 days of code&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pYINcwQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632934129958/fvX5FSkZ6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pYINcwQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632934129958/fvX5FSkZ6.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can divide 100 Days into three 30 days blocks and set a definitive goal for all these days. Unplanned events, like any other aspect of our lives, do not last long, especially when you are aiming for 100 days!  &lt;/p&gt;

&lt;p&gt;Check out these roadmaps if you want to learn about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Data Structures and Algorithms: &lt;a href="https://www.geeksforgeeks.org/100-days-of-code-a-complete-guide-for-beginners-and-experienced/"&gt;100 Days roadmap by GeeksForGeeks&lt;/a&gt; and  &lt;a href="https://omkarghotekar.medium.com/30-days-of-code-complete-guide-w-resources-dsa-efc0930efbd9"&gt;30 Days of Code — Complete Guide W/Resources(DSA)&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React.js:  &lt;a href="https://medium.com/@LenoraPorter/learning-react-in-100-days-229c45d906a3"&gt;Learn React in 100 Days&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/how-i-built-100-projects-in-100-days/"&gt;How I built 100 Projects in 100 Days&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ML:  &lt;a href="https://github.com/Avik-Jain/100-Days-Of-ML-Code"&gt;100-Days-Of-ML-Code&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Frontend: &lt;a href="https://levelup.gitconnected.com/a-100daysofcode-timeboxed-front-end-development-curriculum-cb4b6c2081c2"&gt;A Timeboxed, Day-by-Day #100DaysOfCode Front-End Development Curriculum&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find similar roadmaps for the stack/topic of your choice over the internet. Comment down below if you find any!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#start-with-a-peer"&gt;
  &lt;/a&gt;
  Start with a peer
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lJJeCWQl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632934353304/8oUkwid6d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lJJeCWQl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632934353304/8oUkwid6d.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
You not only gain accountability, but you also learn how to collaborate, learn from your peers, teach, and consolidate your knowledge.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Try out  &lt;a href="https://codebuddies.org/"&gt;CodeBuddies&lt;/a&gt;.&lt;br&gt;
Here you have Peer-to-peer organized study groups, Teaching Hangouts, and Collaboration Hangouts. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Join Gitter (you need a GitHub account), and search for chat rooms. There is a &lt;a href="https://gitter.im/FreeCodeCamp/LetsPair"&gt;Pair Programming chat room by freecodecamp.org&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Join the official slack account! &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--DIWBnbZW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1021074782211706880/_tWuDtdg_normal.jpg" alt="100daysofCode profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        100daysofCode
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @_100daysofcode
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Here's the link to the official &lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt; Slack Channel!&lt;br&gt;Join us to:&lt;br&gt;1) Get help&lt;br&gt;2) Help others&lt;br&gt;3) Connect&lt;br&gt;4) Discuss anything&lt;br&gt;&lt;a href="https://t.co/sTiEe0xl6o"&gt;join.slack.com/t/100xcode/sha…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      11:59 AM - 04 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1444995464810668037" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1444995464810668037" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1444995464810668037" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;If you need a study environment try out these virtual study rooms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.studytogether.com/"&gt;Study Together&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.studystream.live/home"&gt;Study Stream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hours.zone/"&gt;Hours&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#dont-stress-out"&gt;
  &lt;/a&gt;
  Don't stress out!
&lt;/h2&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--GbZzGWqk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1450060595747721222/7F0VXx4R_normal.jpg" alt="Jack Forge profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jack Forge
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/thejackforge"&gt;@thejackforge&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Something I've noticed...&lt;br&gt;&lt;br&gt;People will be going through 100DaysOfCode and posting it about it on Twitter. Then they'll make a tweet about being burnt out, and disappear.&lt;br&gt;&lt;br&gt;For 100DaysOfCode, you do not need to force yourself to code every day!&lt;br&gt;&lt;br&gt;Take some days off and have fun!
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:38 PM - 03 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1444688291316387849" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1444688291316387849" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1444688291316387849" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;It's quite acceptable to take a break and then return to it; just don't abandon it completely! All you have to do is code for an hour every day. I am confident in your ability to complete this.&lt;/p&gt;

&lt;p&gt;Thanks for reading the full article, here is a bonus for you: &lt;br&gt;
Head over to  &lt;a href="https://join.teamtreehouse.com/100-days-of-code/?utm_content=178628742&amp;amp;utm_medium=social&amp;amp;utm_source=twitter&amp;amp;hss_channel=tw-14843763"&gt;treehouse&lt;/a&gt;  to get free reminders to code for at least 30 min per day.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qr33v4Pu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633415638355/9jhCdrFnz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qr33v4Pu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633415638355/9jhCdrFnz.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you shine as bright as the sun 🌞&lt;br&gt;
All the best!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>programming</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>All you need to know about Appwrite team service (Client-side) </title>
      <author>devgossips</author>
      <pubDate>Tue, 26 Oct 2021 04:56:34 +0000</pubDate>
      <link>https://dev.to/devgossips/all-you-need-to-know-about-appwrite-team-service-client-side-1g1b</link>
      <guid>https://dev.to/devgossips/all-you-need-to-know-about-appwrite-team-service-client-side-1g1b</guid>
      <description>&lt;p&gt;&lt;strong&gt;Appwrite&lt;/strong&gt; is a self-hosted backend as a service server that provides web, mobile, and native developers with a set of tools and APIs that aims to help them build applications a lot faster and in a more secure way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#teams-api"&gt;
  &lt;/a&gt;
  Teams API
&lt;/h3&gt;

&lt;p&gt;The Teams service allows you to group users of your project and to enable them to share read and write access to your project resources, such as database documents or storage files.&lt;/p&gt;

&lt;p&gt;Each user who creates a team becomes the team owner and can delegate the ownership role by inviting a new team member. Only team owners can invite new users to their team.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-create-a-new-team"&gt;
  &lt;/a&gt;
  1)  Create a new team
&lt;/h4&gt;

&lt;p&gt;The user who creates the team will automatically be assigned as the owner of the team. The team owner can invite new members, who will be able add new owners and update or delete the team from your project.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-list-team"&gt;
  &lt;/a&gt;
  2) List team
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;GET&lt;/code&gt; &lt;code&gt;/v1/teams&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Get a list of all the current user teams. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project's teams.&lt;br&gt;
&lt;a href="https://appwrite.io/docs/admin"&gt;Learn more about different API modes&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;sdk&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://[HOSTNAME_OR_IP]/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5df5acd0d48c2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;teams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Success&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Failure&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#3-get-team"&gt;
  &lt;/a&gt;
  3) Get Team
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;GET&lt;/code&gt;  &lt;code&gt;/v1/teams/{teamId}&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Get a team by its unique ID. All team members have read access for this resource.&lt;br&gt;
Example request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;sdk&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://[HOSTNAME_OR_IP]/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5df5acd0d48c2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;teams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[TEAM_ID]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Success&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Failure&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#4-update-team"&gt;
  &lt;/a&gt;
  4) Update Team
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;PUT&lt;/code&gt; &lt;code&gt;/v1/teams/{teamId}&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
Update a team by its unique ID. Only team owners have write access for this resource.&lt;br&gt;
Example request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;sdk&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://[HOSTNAME_OR_IP]/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5df5acd0d48c2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;teams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[TEAM_ID]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[NAME]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Success&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Failure&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#5-delete-team"&gt;
  &lt;/a&gt;
  5) Delete Team
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;DELETE&lt;/code&gt;  &lt;code&gt;/v1/teams/{teamId}&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
Delete a team by its unique ID. Only team owners have write access for this resource.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;sdk&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://[HOSTNAME_OR_IP]/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5df5acd0d48c2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;teams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[TEAM_ID]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Success&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Failure&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#6create-team-membership"&gt;
  &lt;/a&gt;
  6)Create Team Membership
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;POST&lt;/code&gt; &lt;code&gt;/v1/teams/{teamId}/memberships&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
Use this endpoint to invite a new member to join your team. If initiated from Client SDK, an email with a link to join the team will be sent to the new member's email address if the member doesn't exist in the project it will be created automatically. If initiated from server side SDKs, new member will automatically be added to the team.&lt;/p&gt;

&lt;p&gt;Use the 'URL' parameter to redirect the user from the invitation email back to your app. When the user is redirected, use the  &lt;a href="https://appwrite.io/docs/client/teams#teamsUpdateMembershipStatus"&gt;Update Team Membership Status&lt;/a&gt;  endpoint to allow the user to accept the invitation to the team. While calling from side SDKs the redirect url can be empty string.&lt;br&gt;
Please note that in order to avoid a &lt;a href="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md"&gt;Redirect Attacks&lt;/a&gt; the only valid redirect URL's are the once from domains you have set when added your platforms in the console interface.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rate Limits&lt;/strong&gt;&lt;br&gt;
This endpoint is limited to  &lt;strong&gt;10 requests&lt;/strong&gt;  in every  &lt;strong&gt;60 minutes&lt;/strong&gt;  per  &lt;strong&gt;IP address&lt;/strong&gt;. We use rate limits to avoid service abuse by users and as a security practice.  &lt;a href="https://appwrite.io/docs/rate-limits"&gt;Learn more about rate limiting&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;sdk&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://[HOSTNAME_OR_IP]/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5df5acd0d48c2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;teams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createMembership&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[TEAM_ID]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email@example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Success&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Failure&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#7update-membership-roles"&gt;
  &lt;/a&gt;
  7)Update Membership Roles
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;PATCH&lt;/code&gt; &lt;code&gt;/v1/teams/{teamId}/memberships/{membershipId}&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;sdk&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://[HOSTNAME_OR_IP]/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5df5acd0d48c2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;teams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateMembershipRoles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[TEAM_ID]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[MEMBERSHIP_ID]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Success&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Failure&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#8-get-team-memberships"&gt;
  &lt;/a&gt;
  8) Get Team Memberships
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;GET&lt;/code&gt; &lt;code&gt;/v1/teams/{teamId}/memberships&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
Get a team members by the team unique ID. All team members have read access for this list of resources.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;sdk&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://[HOSTNAME_OR_IP]/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5df5acd0d48c2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;teams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMemberships&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[TEAM_ID]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Success&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Failure&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#9-update-team-membership-status"&gt;
  &lt;/a&gt;
  9) Update Team Membership Status
&lt;/h4&gt;

&lt;p&gt;Use this endpoint to allow a user to accept an invitation to join a team after being redirected back to your app from the invitation email recieved by the user.&lt;br&gt;
&lt;code&gt;PATCH&lt;/code&gt; &lt;code&gt;/v1/teams/{teamId}/memberships/{membershipId}/status&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;sdk&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://[HOSTNAME_OR_IP]/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5df5acd0d48c2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;teams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateMembershipStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[TEAM_ID]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[MEMBERSHIP_ID]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[USER_ID]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[SECRET]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Success&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Failure&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#10-delete-team-membership"&gt;
  &lt;/a&gt;
  10) Delete Team Membership
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;DELETE&lt;/code&gt; &lt;code&gt;/v1/teams/{teamId}/memberships/{membershipId}&lt;/code&gt;&lt;br&gt;
This endpoint allows a user to leave a team or for a team owner to delete the membership of any other team member. You can also use this endpoint to delete a user membership even if it is not accepted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;sdk&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://[HOSTNAME_OR_IP]/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5df5acd0d48c2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;teams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteMembership&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[TEAM_ID]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[MEMBERSHIP_ID]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Success&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Failure&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Happy Appwritting !!! &lt;br&gt;
Stay tuned for the server-side team service&lt;/p&gt;

</description>
      <category>appwrite</category>
      <category>opensource</category>
      <category>hactoberfest</category>
    </item>
    <item>
      <title>Pardus 19 VirtualBox Kurulumu</title>
      <author>Duygu Ölmez</author>
      <pubDate>Tue, 26 Oct 2021 04:25:43 +0000</pubDate>
      <link>https://dev.to/aciklab/pardus-19-virtualbox-kurulumu-244e</link>
      <guid>https://dev.to/aciklab/pardus-19-virtualbox-kurulumu-244e</guid>
      <description>&lt;p&gt;Pardus 19 işletim sisteminde Virtualbox Pardus'un kendi deposundan aşağıdaki komut ile yüklenebilir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install virtualbox-6.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Kurulumdan sonra sanal makineler başlatılırken aşağıdaki gibi hata alınıyorsa çekirdek modüllerini de yüklemek gerekmektedir.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vqZxU5mr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0sivswgkk5lnksnv1w6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vqZxU5mr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0sivswgkk5lnksnv1w6.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bunun için ilk olarak işletim sistenin güncel olduğundan emin olmak gerek.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt update
sudo apt upgrade
sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Daha sonra aşağıdaki paketlerin yüklenmesi gerekmektedir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apt install linux-headers-`uname -r` build-essential dkms
apt install --reinstall virtualbox-6.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Makine yeniden başlatıldıktan sonra sanal makineler kullanılabilir.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>3 Portfolio Website using HTML, React and Flask.</title>
      <author>Badri Vishal</author>
      <pubDate>Tue, 26 Oct 2021 04:17:27 +0000</pubDate>
      <link>https://dev.to/mrbluebird2/same-websites-but-in-3-languages-2988</link>
      <guid>https://dev.to/mrbluebird2/same-websites-but-in-3-languages-2988</guid>
      <description>&lt;p&gt;I have built three portfolio, The first one is built with HTML, Bootstrap, and CSS, The second one is built with React JS, Bootstrap, and Undraw. The third one is built with Flask, Undraw, and Bootstrap. I did this, because.&lt;/p&gt;

&lt;p&gt;If I'm getting an offer for HTML developer, I can show my HTMl Portfolio, this will increase 20% chances to get hired.&lt;br&gt;
And the same with React and Flask. The link of these 3 websites, is here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mrbluebird2.github.io"&gt;https://mrbluebird2.github.io&lt;/a&gt; - HTML Website&lt;br&gt;
&lt;a href="https://bvmt-react-portfolio.pages.dev"&gt;https://bvmt-react-portfolio.pages.dev&lt;/a&gt; - React Website&lt;br&gt;
&lt;a href="https://bvmt-flask-portfolio.pages.dev"&gt;https://bvmt-flask-portfolio.pages.dev&lt;/a&gt; - Flask Website&lt;/p&gt;

</description>
      <category>react</category>
      <category>flask</category>
      <category>html</category>
      <category>bootstrap</category>
    </item>
    <item>
      <title>Making Sense of Common C# Compiler Errors</title>
      <author>Matt Eland</author>
      <pubDate>Tue, 26 Oct 2021 02:43:01 +0000</pubDate>
      <link>https://dev.to/techelevator/making-sense-of-common-c-compiler-errors-3m1j</link>
      <guid>https://dev.to/techelevator/making-sense-of-common-c-compiler-errors-3m1j</guid>
      <description>&lt;p&gt;&lt;a href="https://killalldefects.com/2021/10/25/making-sense-of-common-c-compiler-errors/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rwh7vlBk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/killalldefects.com/wp-content/uploads/2021/10/CompilerError.png%3Ffit%3D768%252C462%26ssl%3D1" alt="A woman staring at a computer looking dismayed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I get to help a lot of people learn C# programming every year. As I watch new developers grow and get used to working in C# and Visual Studio, it has become fairly clear to me that reading C# compiler errors and even their documentation is an acquired skill. I’ve made a request for Microsoft to &lt;a href="https://killalldefects.com/2020/12/11/making-csharp-more-welcoming/"&gt;improve the error message feedback in Visual Studio&lt;/a&gt;, but until that’s resolved developers still have a tough time working through early obstacles.&lt;/p&gt;

&lt;p&gt;Because of this, I’m creating this unusual post to serve as beginner-friendly documentation to what I personally view as the most likely compiler errors a new developer is likely to encounter. Microsoft has wonderful &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/"&gt;documentation on compiler errors&lt;/a&gt;, and this is something that will help you out significantly as you grow, but early on a paragraph or two aimed at a beginner can be exactly what you need.&lt;/p&gt;

&lt;p&gt;I also snuck in a few of the more interesting compiler errors I noticed about the maximum limits of the C# compiler, so even if you’re very familiar with C# at this point you’ll likely still learn a few things skimming this list.&lt;/p&gt;

&lt;p&gt;Take a look at my list and my recommendations on these issues and &lt;a href="https://twitter.com/IntegerMan"&gt;let me know&lt;/a&gt; if you find this helpful or encounter something I missed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0003-out-of-memory"&gt;
  &lt;/a&gt;
  CS0003 – Out of Memory
&lt;/h3&gt;

&lt;p&gt;This occurs when a computer runs out of memory compiling your code. Close any unnecessary programs and reboot the machine if the problem persists.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0004-warning-treated-as-error"&gt;
  &lt;/a&gt;
  CS0004 – Warning Treated as Error
&lt;/h3&gt;

&lt;p&gt;Developers may configure projects to treat certain warnings as errors. These warnings may be specified in the build section of the project’s properties. Typically it is best to resolve the specific warning listed in the build errors since someone wanted that to be treated severely.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0015-type-name-too-long"&gt;
  &lt;/a&gt;
  CS0015 – Type Name too Long
&lt;/h3&gt;

&lt;p&gt;.NET requires the names of types and namespaces to be less than 1024 characters. If you find yourself getting this error, you may want to reconsider your team’s naming choices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0017-more-than-one-entry-point-defined"&gt;
  &lt;/a&gt;
  CS0017 – More than one entry point defined
&lt;/h3&gt;

&lt;p&gt;This occurs when your program has more than one class defined with a &lt;code&gt;static void main&lt;/code&gt; method. Remove one of them or manually set the project’s startup object in the project properties.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0019-operator-operator-cannot-be-applied-to-operands-of-type-type-and-type"&gt;
  &lt;/a&gt;
  CS0019 – Operator ‘operator’ cannot be applied to operands of type ‘type’ and ‘type’
&lt;/h3&gt;

&lt;p&gt;This occurs when you try to compare two different types in ways that cannot be compared. For example, checking to see if integer values are equal to Boolean values, subtracting a string from a number, etc. This error often occurs when developers forget what type of data is stored by a particular variable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0020-division-by-constant-zero"&gt;
  &lt;/a&gt;
  CS0020 – Division by Constant Zero
&lt;/h3&gt;

&lt;p&gt;This occurs if you try to force a division by zero in your code. You cannot force a division by zero through a numeric literal or by using a constant for the denominator, but you can declare a variable holding 0 and use that as a denominator.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0021-cannot-apply-indexing-to-type"&gt;
  &lt;/a&gt;
  CS0021 – Cannot apply indexing to type
&lt;/h3&gt;

&lt;p&gt;This occurs when you try to use an array or list-style indexer on a type that doesn’t support it. This often occurs when developers assume they’re working with an array, string, or list and are not.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0023-operator-operator-cannot-be-applied-to-operand-of-type-type"&gt;
  &lt;/a&gt;
  CS0023 – Operator ‘operator’ cannot be applied to operand of type ‘type’
&lt;/h3&gt;

&lt;p&gt;This occurs when you try to use a mathematical operator with a type that doesn’t support it. For example, trying to generate a negative value of a string. Double check that your variables are of the type you think they are and re-evaluate what you are trying to do.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0026-keyword-this-cannot-be-used-in-a-static-method"&gt;
  &lt;/a&gt;
  CS0026 – Keyword this cannot be used in a static method
&lt;/h3&gt;

&lt;p&gt;This error occurs when you are working inside of a static method and try to use the &lt;code&gt;this&lt;/code&gt; keyword. Static methods are methods associated with the class itself and not with an instance of the class. As a result, static methods do not have access to any properties, methods, or fields on the class that are not static.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0029-cannot-implicitly-convert-type-type-to-type"&gt;
  &lt;/a&gt;
  CS0029 – Cannot implicitly convert type ‘type’ to ‘type’
&lt;/h3&gt;

&lt;p&gt;This occurs when you have a variable of one type and are trying to store it into a variable of another type. Some types allow you to automatically convert from one type to another (an implicit conversion), but the types you are using do not support that. You may need to use an explicit cast using &lt;code&gt;(type)&lt;/code&gt; syntax.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0030-cannot-convert-type-type-to-type"&gt;
  &lt;/a&gt;
  CS0030 – Cannot convert type ‘type’ to ‘type’
&lt;/h3&gt;

&lt;p&gt;This occurs when there is no implicit or explicit conversion between two different types. If you’re sure you need to do what you’re doing, you could create a method to convert from one type to the other.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0031-constant-value-value-cannot-be-converted-to-a-type"&gt;
  &lt;/a&gt;
  CS0031 – Constant value ‘value’ cannot be converted to a ‘type’.
&lt;/h3&gt;

&lt;p&gt;This occurs when you try to store a value into a variable type that cannot store that particular value. For example, if you try to store 5 billion into an integer (which can store values up to around 2.1 billion) you will get this compiler error. You can resolve this error by storing the value into a type that can hold larger values, such as a &lt;code&gt;long&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0050-inconsistent-accessibility-return-type-type-is-less-accessible-than-method-method"&gt;
  &lt;/a&gt;
  CS0050 – Inconsistent accessibility: return type ‘type’ is less accessible than method ‘method’
&lt;/h3&gt;

&lt;p&gt;This occurs when a method returns a type that has a visibility or access modifier that is &lt;em&gt;more restrictive&lt;/em&gt; than the method and class the method is currently in. For example this error will occur if a public method in a public class returns a type that is defined as internal.&lt;/p&gt;

&lt;p&gt;This error usually occurs when developers forget to mark a class as public. Remember that classes have a default access modifier of internal when no access modifier is specified. Typically the fix for this is to explicitly declare that class as public.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0051-inconsistent-accessibility-parameter-type-type-is-less-accessible-than-method-method"&gt;
  &lt;/a&gt;
  CS0051 – Inconsistent accessibility: parameter type ‘type’ is less accessible than method ‘method’
&lt;/h3&gt;

&lt;p&gt;This occurs when a method takes in a parameter that is of a type that has a visibility or access modifier that is &lt;em&gt;more restrictive&lt;/em&gt; than the method and class the method is currently in. For example this error will occur if a public method in a public class requires a parameter of a type that is defined as internal.&lt;/p&gt;

&lt;p&gt;This error usually occurs when developers forget to mark a class as public. Remember that classes have a default access modifier of internal when no access modifier is specified. Typically the fix for this is to explicitly declare that class as public.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0052-inconsistent-accessibility-field-type-type-is-less-accessible-than-field-field"&gt;
  &lt;/a&gt;
  CS0052 – Inconsistent accessibility: field type ‘type’ is less accessible than field ‘field’
&lt;/h3&gt;

&lt;p&gt;This occurs when a class has a public field that is of a type that has a visibility or access modifier that is &lt;em&gt;more restrictive&lt;/em&gt; than the class the method is currently in. For example this error will occur if a class has a public field of a type that is defined as internal.&lt;/p&gt;

&lt;p&gt;This error usually occurs when developers forget to mark a class as public. Remember that classes have a default access modifier of internal when no access modifier is specified. Typically the fix for this is to explicitly declare that class as public.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0053-inconsistent-accessibility-property-type-type-is-less-accessible-than-property-property"&gt;
  &lt;/a&gt;
  CS0053 – Inconsistent accessibility: property type ‘type’ is less accessible than property ‘property’
&lt;/h3&gt;

&lt;p&gt;This occurs when a class has a property of a type that has a visibility or access modifier that is &lt;em&gt;more restrictive&lt;/em&gt; than the property’s visibility. For example this error will occur if a public property is of a type that is defined as internal.&lt;/p&gt;

&lt;p&gt;This error usually occurs when developers forget to mark a class as public. Remember that classes have a default access modifier of internal when no access modifier is specified. Typically the fix for this is to explicitly declare that class as public.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0060-inconsistent-accessibility-base-class-class1-is-less-accessible-than-class-class2"&gt;
  &lt;/a&gt;
  CS0060 – Inconsistent accessibility: base class ‘class1’ is less accessible than class ‘class2’
&lt;/h3&gt;

&lt;p&gt;This occurs when a class inherits from another class but the subclass’s access modifier is &lt;em&gt;less restrictive&lt;/em&gt; than the base class’s access modifier. For example this error will occur if a public class inherits from an internal class.&lt;/p&gt;

&lt;p&gt;This error usually occurs when developers forget to mark a class as public. Remember that classes have a default access modifier of internal when no access modifier is specified. Typically the fix for this is to explicitly declare that class as public.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0061-inconsistent-accessibility-base-interface-interface-1-is-less-accessible-than-interface-interface-2"&gt;
  &lt;/a&gt;
  CS0061 – Inconsistent accessibility: base interface ‘interface 1’ is less accessible than interface ‘interface 2’
&lt;/h3&gt;

&lt;p&gt;This occurs when an interface inherits from another interface but the child interface’s access modifier is &lt;em&gt;less restrictive&lt;/em&gt; than the base interface’s access modifier. For example this error will occur if a public interface inherits from an internal interface.&lt;/p&gt;

&lt;p&gt;This error usually occurs when developers forget to mark an interface as public. Remember that interfaces have a default access modifier of internal when no access modifier is specified, although every member of an interface is public. Typically the fix for this is to explicitly declare that interface as public.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0100-the-parameter-name-parameter-name-is-a-duplicate"&gt;
  &lt;/a&gt;
  CS0100 – The parameter name ‘parameter name’ is a duplicate
&lt;/h3&gt;

&lt;p&gt;This occurs when a developer declares a method but uses the same parameter name twice in the method’s parameter list. The fix for this is generally to remove an unneeded parameter or to rename parameters so that all parameters have a different name.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0101-the-namespace-namespace-already-contains-a-definition-for-type"&gt;
  &lt;/a&gt;
  CS0101 – The namespace ‘namespace’ already contains a definition for ‘type’
&lt;/h3&gt;

&lt;p&gt;This occurs when a class is defined twice in the same namespace. This can occur when a class is renamed but the old file still exists, when a developer forgot to mark a class as part of a different namespace, or when a developer intended to use the &lt;code&gt;partial&lt;/code&gt; keyword but forgot to specify it. The fix for this will vary based on which files you want and what namespaces they should live in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0102-the-type-type-name-already-contains-a-definition-for-identifier"&gt;
  &lt;/a&gt;
  CS0102 – The type ‘type name’ already contains a definition for ‘identifier’
&lt;/h3&gt;

&lt;p&gt;This occurs when you declare a member such as a field twice in the same class. Often this is a symptom of using an existing variable name instead of choosing a new name.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0103-the-name-identifier-does-not-exist-in-the-current-context"&gt;
  &lt;/a&gt;
  CS0103 – The name ‘identifier’ does not exist in the current context
&lt;/h3&gt;

&lt;p&gt;This error often occurs when trying to use a variable defined in another scope. This commonly occurs when you try to define a variable inside of a &lt;code&gt;try&lt;/code&gt; block and refer to it in a &lt;code&gt;catch&lt;/code&gt; block, when there was no guarantee that the runtime was able to create that variable and therefore the variable is not available.&lt;/p&gt;

&lt;p&gt;The fix for this is typically to declare the variable before the &lt;code&gt;try / catch&lt;/code&gt; block and update its value from the &lt;code&gt;try&lt;/code&gt; block. In this way the &lt;code&gt;catch&lt;/code&gt; block will get either the initial value of the variable or its updated value and will be able to reference it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0111-type-class-already-defines-a-member-called-member-with-the-same-parameter-types"&gt;
  &lt;/a&gt;
  CS0111 – Type ‘class’ already defines a member called ‘member’ with the same parameter types
&lt;/h3&gt;

&lt;p&gt;This occurs when a developer creates a duplicate method or property with an identical signature consisting of a return type and parameter types. The compiler detects that there will not be a way for code outside of the class to distinguish between one member and the other and so this error is raised. Typically when this occurs you need to either rename one of the two members, change the parameters of one of the methods, or merge the two methods together into one method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0117-type-does-not-contain-a-definition-for-identifier"&gt;
  &lt;/a&gt;
  CS0117 – ‘type’ does not contain a definition for ‘identifier’
&lt;/h3&gt;

&lt;p&gt;This occurs when you are trying to call a method or use a property on an instance of an object, but there is no method or property with that name. This can be an issue with capitalization, spelling, or forgetting the name of the member you’re referring to. Code completion can help you find the correct name to use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0120-an-object-reference-is-required-for-the-nonstatic-field-method-or-property-member"&gt;
  &lt;/a&gt;
  CS0120 – An object reference is required for the non-static field, method, or property ‘member’
&lt;/h3&gt;

&lt;p&gt;This often occurs in &lt;code&gt;static&lt;/code&gt; methods when you attempt to work with non-static members of the same class. Remember that &lt;code&gt;static&lt;/code&gt; methods are associated with the class itself and not with a specific instance of that class. As a result, &lt;code&gt;static&lt;/code&gt; methods cannot access properties, fields, and methods that are not marked as &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The fix for this is often to remove the &lt;code&gt;static&lt;/code&gt; keyword from the method that needs to access instance variables. This is counter-intuitive since the compiler pushes you towards adding &lt;code&gt;static&lt;/code&gt; in other places, but if you follow that path to its logical conclusion all of your data becomes &lt;code&gt;static&lt;/code&gt; eventually, so you’re better off removing the &lt;code&gt;static&lt;/code&gt; keyword when confronted by this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0122-member-is-inaccessible-due-to-its-protection-level"&gt;
  &lt;/a&gt;
  CS0122 – ‘member’ is inaccessible due to its protection level
&lt;/h3&gt;

&lt;p&gt;This occurs when you are trying to call a method or use a property on an instance of an object, but that member is defined as private or protected and you are outside of the class or something that inherits from it. You may not be intended to work with the method or property you are using and you should probably look for public members that might meet your needs without compromising the class’s encapsulation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0127-since-function-returns-void-a-return-keyword-must-not-be-followed-by-an-object-expression"&gt;
  &lt;/a&gt;
  CS0127 – Since ‘function’ returns void, a return keyword must not be followed by an object expression
&lt;/h3&gt;

&lt;p&gt;This is a rarer error that occurs when you are in a method defined as void but are trying to return a specific object. Remember that &lt;code&gt;void&lt;/code&gt; methods do not return any value so a return statement should just be listed as &lt;code&gt;return;&lt;/code&gt;. If you find that you do need to return a value, you should change the return type of the method from &lt;code&gt;void&lt;/code&gt; to some specific type.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0128-a-local-variable-named-variable-is-already-defined-in-this-scope"&gt;
  &lt;/a&gt;
  CS0128 – A local variable named ‘variable’ is already defined in this scope
&lt;/h3&gt;

&lt;p&gt;This occurs when you re-declare a variable that already exists. The solution for this is to either use a different variable name or to remove the type name from your statement and change it from a variable declaration to an assignment statement and re-use the existing variable.&lt;/p&gt;

&lt;p&gt;This error often comes from copying and pasting code that declares a new variable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0133-the-expression-being-assigned-to-variable-must-be-constant"&gt;
  &lt;/a&gt;
  CS0133 – The expression being assigned to ‘variable’ must be constant
&lt;/h3&gt;

&lt;p&gt;This occurs when you are declaring a &lt;code&gt;const&lt;/code&gt; and declaring it to another variable. Constants are evaluated at the time your code is compiled and the compiler will not know the value of your variables. As a result, constants must be set to a literal number or string value.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0134-variable-is-of-type-type-a-const-field-of-a-reference-type-other-than-string-can-only-be-initialized-with-null"&gt;
  &lt;/a&gt;
  CS0134 – ‘variable’ is of type ‘type’. A const field of a reference type other than string can only be initialized with null.
&lt;/h3&gt;

&lt;p&gt;This occurs when you are trying to declare a &lt;code&gt;const&lt;/code&gt; of a type other than a numeric or string value. Typically, if you have a &lt;code&gt;const&lt;/code&gt; that needs to store a reference type you should instead use &lt;code&gt;readonly&lt;/code&gt; which is less optimized than a &lt;code&gt;const&lt;/code&gt; but works with reference types and ensures that the value will never change.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0136-a-local-variable-named-var-cannot-be-declared-in-this-scope-because-it-would-give-a-different-meaning-to-var-which-is-already-used-in-a-parent-or-currentchild-scope"&gt;
  &lt;/a&gt;
  CS0136 – A local variable named ‘var’ cannot be declared in this scope because it would give a different meaning to ‘var’, which is already used in a ‘parent or current/child’ scope
&lt;/h3&gt;

&lt;p&gt;This occurs when you declare a new variable with the same name as another variable in a visible scope. The solution for this is to either use a different variable name or to remove the type name from your statement and change it from a variable declaration to an assignment statement and re-use the existing variable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0145-a-const-field-requires-a-value-to-be-provided"&gt;
  &lt;/a&gt;
  CS0145 – A const field requires a value to be provided
&lt;/h3&gt;

&lt;p&gt;This occurs when you declare a &lt;code&gt;const&lt;/code&gt; but do not provide a value. You should set a &lt;code&gt;const&lt;/code&gt; equal to some string or numeric variable when declaring it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0150-a-constant-value-is-expected"&gt;
  &lt;/a&gt;
  CS0150 – A constant value is expected
&lt;/h3&gt;

&lt;p&gt;This occurs when the compiler requires a constant value such as a numeric or string literal but a variable is defined. This can occur when you use a variable in a switch statement or when you are using an array initializer for an array with a variable size.&lt;/p&gt;

&lt;p&gt;Switch statements cannot use cases for specific variables, though switch expressions are more flexible.&lt;/p&gt;

&lt;p&gt;When working with arrays of varying size, you may want to avoid the use of array initializers and instead manually set the elements of the array after creation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0152-the-label-label-already-occurs-in-this-switch-statement"&gt;
  &lt;/a&gt;
  CS0152 – The label ‘label’ already occurs in this switch statement
&lt;/h3&gt;

&lt;p&gt;This occurs when you duplicate a &lt;code&gt;case&lt;/code&gt; statement inside of a &lt;code&gt;switch&lt;/code&gt; statement. Typically this occurs when you didn’t notice the case already existed and you can delete your repeated &lt;code&gt;case&lt;/code&gt; statement.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0160-a-previous-catch-clause-already-catches-all-exceptions-of-this-or-of-a-super-type-type"&gt;
  &lt;/a&gt;
  CS0160 – A previous catch clause already catches all exceptions of this or of a super type (‘type’)
&lt;/h3&gt;

&lt;p&gt;The ordering of &lt;code&gt;catch&lt;/code&gt; statements in a &lt;code&gt;try / catch&lt;/code&gt; matters since the runtime will try to match the first &lt;code&gt;catch&lt;/code&gt; that applies to the exception it encountered. Because of this, the compiler generates this error if it sees a more specific exception type after a less specific exception type since this results in a case where the more specific &lt;code&gt;catch&lt;/code&gt; statement could never be reached.&lt;/p&gt;

&lt;p&gt;Move your more specific &lt;code&gt;catch&lt;/code&gt; statement above the less specific one to fix this error.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0161-not-all-code-paths-return-a-value"&gt;
  &lt;/a&gt;
  CS0161 – Not all code paths return a value
&lt;/h3&gt;

&lt;p&gt;This occurs because the C# compiler believes that it is possible to get to the end of your method without encountering a &lt;code&gt;return&lt;/code&gt; statement. Keep in mind that the C# compiler does very little inferences based on your &lt;code&gt;if&lt;/code&gt; statements and even if it may not &lt;em&gt;actually&lt;/em&gt; be possible to reach the end of the method without returning, the compiler still thinks it is.&lt;/p&gt;

&lt;p&gt;The fix for this is almost always to add a final &lt;code&gt;return&lt;/code&gt; statement.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0165-use-of-unassigned-local-variable"&gt;
  &lt;/a&gt;
  CS0165 – Use of unassigned local variable
&lt;/h3&gt;

&lt;p&gt;This occurs when the compiler sees a variable that is defined but not set to an initial value and determines that the value of that variable needs to be read from later on in the method before the variable is guaranteed to have its value set.&lt;/p&gt;

&lt;p&gt;The fix for this is generally to set the variable to be equal to an initial value.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0176-static-member-member-cannot-be-accessed-with-an-instance-reference-qualify-it-with-a-type-name-instead"&gt;
  &lt;/a&gt;
  CS0176 – Static member ‘member’ cannot be accessed with an instance reference; qualify it with a type name instead
&lt;/h3&gt;

&lt;p&gt;This occurs when you have a &lt;code&gt;static&lt;/code&gt; property or field on a class but are trying to refer to it on a specific instance of that class.&lt;/p&gt;

&lt;p&gt;Use the class name instead of the instance variable to access the static member.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0201-only-assignment-call-increment-decrement-and-new-object-expressions-can-be-used-as-a-statement"&gt;
  &lt;/a&gt;
  CS0201 – Only assignment, call, increment, decrement, and new object expressions can be used as a statement
&lt;/h3&gt;

&lt;p&gt;This typically occurs when you are performing some sort of mathematical operation but not storing the result into a variable. The compiler understands the operation but sees it has no value, so it raises the error.&lt;/p&gt;

&lt;p&gt;The fix for this is to store the result of the mathematical operation into a variable or to remove the unnecessary line.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0204-only-65534-locals-are-allowed"&gt;
  &lt;/a&gt;
  CS0204 – Only 65534 locals are allowed
&lt;/h3&gt;

&lt;p&gt;Apparently you have a method that has over 65 thousand local variables inside of it. The compiler doesn’t like this very much and, frankly, I’m a little concerned why you’d need that many.&lt;/p&gt;

&lt;p&gt;Reconsider your life choices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0230-type-and-identifier-are-both-required-in-a-foreach-statement"&gt;
  &lt;/a&gt;
  CS0230 – Type and identifier are both required in a foreach statement
&lt;/h3&gt;

&lt;p&gt;This occurs when you are writing a &lt;code&gt;foreach&lt;/code&gt; statement without specifying all parts of the statement.  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;foreach&lt;/code&gt; statements require a variable type, a variable name, the word &lt;code&gt;in&lt;/code&gt;, and some variable that can be enumerated over. For example: &lt;code&gt;foreach (string person in people)&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0234-the-type-or-namespace-name-name-does-not-exist-in-the-namespace-namespace-are-you-missing-an-assembly-reference"&gt;
  &lt;/a&gt;
  CS0234 – The type or namespace name ‘name’ does not exist in the namespace ‘namespace’ (are you missing an assembly reference?)
&lt;/h3&gt;

&lt;p&gt;This occurs when you are trying to refer to a type via its fully-qualified name, including the namespace, but no known type exists with that namespace and type name. This can be a spelling error, a mistake as to which namespace the type lives in, or a correct namespace and type, but your project does not yet have a reference to the project the type is defined in.&lt;/p&gt;

&lt;p&gt;If your spelling and namespaces are correct you may need to add a project reference to your project or install a package via nuget.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0236-a-field-initializer-cannot-reference-the-nonstatic-field-method-or-property-name"&gt;
  &lt;/a&gt;
  CS0236 – A field initializer cannot reference the non-static field, method, or property ‘name’.
&lt;/h3&gt;

&lt;p&gt;This occurs when you try to define a field by referencing another field. This error exists to prevent unpredictable behavior based on which field initializers run first.&lt;/p&gt;

&lt;p&gt;The fix for this is to set the value of the field in the constructor instead of in a field initializer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0246-the-type-or-namespace-name-typenamespace-could-not-be-found-are-you-missing-a-using-directive-or-an-assembly-reference"&gt;
  &lt;/a&gt;
  CS0246 – The type or namespace name ‘type/namespace’ could not be found (are you missing a using directive or an assembly reference?)
&lt;/h3&gt;

&lt;p&gt;This occurs when you are trying to refer to a type no known type exists with that type name in the using statements currently in your file.&lt;/p&gt;

&lt;p&gt;This is usually a spelling error or a missing &lt;code&gt;using&lt;/code&gt; statement at the top of your file.&lt;/p&gt;

&lt;p&gt;If your spelling and &lt;code&gt;using&lt;/code&gt; statements are correct you may need to add a project reference to your project or install a package via nuget.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0266-cannot-implicitly-convert-type-type1-to-type2-an-explicit-conversion-exists-are-you-missing-a-cast"&gt;
  &lt;/a&gt;
  CS0266 – Cannot implicitly convert type ‘type1’ to ‘type2’. An explicit conversion exists (are you missing a cast?)
&lt;/h3&gt;

&lt;p&gt;This occurs when you are trying to store a variable of one type into a variable of another type without casting. For example, if you are trying to set a &lt;code&gt;double&lt;/code&gt; value into an &lt;code&gt;int&lt;/code&gt; variable you will see this error.&lt;/p&gt;

&lt;p&gt;The statement “an explicit conversion exists (are you missing a cast)” is telling you that these types are compatible, but the compiler wants to make sure you intend to convert from one to another so it requires you to cast your variable from one type to another.&lt;/p&gt;

&lt;p&gt;You cast variables in C# by using parentheses around a type name like this: &lt;code&gt;int num = (int)myDouble;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0500-class-member-cannot-declare-a-body-because-it-is-marked-abstract"&gt;
  &lt;/a&gt;
  CS0500 – ‘class member’ cannot declare a body because it is marked abstract
&lt;/h3&gt;

&lt;p&gt;This occurs when you declare an &lt;code&gt;abstract&lt;/code&gt; member inside of an &lt;code&gt;abstract&lt;/code&gt; class, but you tried to give it a method body (using &lt;code&gt;{}&lt;/code&gt;). Abstract members do not have method bodies.&lt;/p&gt;

&lt;p&gt;Remove the  &lt;code&gt;{}&lt;/code&gt;’s from your abstract method. Alternatively, if you want to provide a default implementation and allow inheriting classes to optionally override yours, use &lt;code&gt;virtual&lt;/code&gt; instead of &lt;code&gt;abstract&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0501-member-function-must-declare-a-body-because-it-is-not-marked-abstract-extern-or-partial"&gt;
  &lt;/a&gt;
  CS0501 – ‘member function’ must declare a body because it is not marked abstract, extern, or partial
&lt;/h3&gt;

&lt;p&gt;This occurs when you try to declare a method but forget to give it a method body with &lt;code&gt;{}&lt;/code&gt;’s.&lt;/p&gt;

&lt;p&gt;This can also occur when you mean to define an abstract method but forgot to use the &lt;code&gt;abstract&lt;/code&gt; keyword.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0506-function1-cannot-override-inherited-member-function2-because-it-is-not-marked-virtual-abstract-or-override"&gt;
  &lt;/a&gt;
  CS0506 – ‘function1’ : cannot override inherited member ‘function2’ because it is not marked “virtual”, “abstract”, or “override”
&lt;/h3&gt;

&lt;p&gt;In C# you have to mark a method as &lt;code&gt;virtual&lt;/code&gt; or &lt;code&gt;abstract&lt;/code&gt; to be able to override it.&lt;/p&gt;

&lt;p&gt;The fix for this is usually to add the &lt;code&gt;virtual&lt;/code&gt; keyword to the method in the base class.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0507-function1-cannot-change-access-modifiers-when-overriding-access-inherited-member-function2"&gt;
  &lt;/a&gt;
  CS0507 – ‘function1’ : cannot change access modifiers when overriding ‘access’ inherited member ‘function2’
&lt;/h3&gt;

&lt;p&gt;When overriding a method you must keep the same access modifier as the base method. If the access modifier needs to change, change it in all classes that have the method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0508-type-1-return-type-must-be-type-2-to-match-overridden-member-member-name"&gt;
  &lt;/a&gt;
  CS0508 – ‘Type 1’: return type must be ‘Type 2’ to match overridden member ‘Member Name’
&lt;/h3&gt;

&lt;p&gt;When overriding a method you cannot change the return type of the method. If you think you need to return something radically different, you may need to introduce a new method instead of overriding an existing one. Alternatively, creative uses of interfaces or inheritance can allow you to return a more specific version of something from a method through polymorphism.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0513-function-is-abstract-but-it-is-contained-in-nonabstract-class-class"&gt;
  &lt;/a&gt;
  CS0513 – ‘function’ is abstract but it is contained in nonabstract class ‘class’
&lt;/h3&gt;

&lt;p&gt;When you need a method to be &lt;code&gt;abstract&lt;/code&gt;, the entire class needs to be &lt;code&gt;abstract&lt;/code&gt; as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0525-interfaces-cannot-contain-fields"&gt;
  &lt;/a&gt;
  CS0525 – Interfaces cannot contain fields
&lt;/h3&gt;

&lt;p&gt;This one is self-explanatory. An interface is a contract that defines what members need to be present. Fields in classes should be &lt;code&gt;private&lt;/code&gt; and are implementation details that do not belong in an interface.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0526-interfaces-cannot-contain-constructors"&gt;
  &lt;/a&gt;
  CS0526 – Interfaces cannot contain constructors
&lt;/h3&gt;

&lt;p&gt;This one is self-explanatory. An interface is a contract that defines what members need to be present on an already-constructed class. Interfaces do not care about how an instance is created and cannot denote constructors required for a given class.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0531-member-interface-members-cannot-have-a-definition"&gt;
  &lt;/a&gt;
  CS0531 – ‘member’ : interface members cannot have a definition
&lt;/h3&gt;

&lt;p&gt;This occurs when you try to give an interface member a method body. Interfaces denote capabilities that must be in place, not how those capabilities should work.&lt;/p&gt;

&lt;p&gt;If you think you really need a default implementation of a method, you might want to use an abstract class instead of an interface.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0534-function1-does-not-implement-inherited-abstract-member-function2"&gt;
  &lt;/a&gt;
  CS0534 – ‘function1’ does not implement inherited abstract member ‘function2’
&lt;/h3&gt;

&lt;p&gt;This occurs when you inherit from an abstract class that has abstract members but do not override those members. Because of this, the compiler has no implementation for those abstract members and does not know how to handle them if they are called.&lt;/p&gt;

&lt;p&gt;Override the inherited member or mark the inheriting class as abstract as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0535-class-does-not-implement-interface-member-member"&gt;
  &lt;/a&gt;
  CS0535 – ‘class’ does not implement interface member ‘member’
&lt;/h3&gt;

&lt;p&gt;This occurs when you implement an interface but have not provided members that match those defined in the interface. Members must match the exact type signatures of those defined in the interface and should have names that match those in the interface as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0645-identifier-too-long"&gt;
  &lt;/a&gt;
  CS0645 – Identifier too long
&lt;/h3&gt;

&lt;p&gt;This occurs when you try to name a variable or other identifier something longer than 512 letters long.&lt;/p&gt;

&lt;p&gt;What exactly are you trying to do over there that has you naming variables this long?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs0844-cannot-use-local-variable-name-before-it-is-declared"&gt;
  &lt;/a&gt;
  CS0844 – Cannot use local variable ‘name’ before it is declared.
&lt;/h3&gt;

&lt;p&gt;This occurs when you try to use a variable in a method above when that variable is declared. C# does not have hoisting like some other languages do and variables are only available after they are declared.&lt;/p&gt;

&lt;p&gt;Reorder your statements to match your needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs1001-identifier-expected"&gt;
  &lt;/a&gt;
  CS1001 – Identifier expected
&lt;/h3&gt;

&lt;p&gt;This usually occurs when you forget the name of a variable, class, or parameter but have defined other aspects of that line of code. Check some reference materials for what you are trying to do because you’re missing something important.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs1002-semicolon-expected"&gt;
  &lt;/a&gt;
  CS1002 – Semicolon expected
&lt;/h3&gt;

&lt;p&gt;C# requires you to end most statements with a semicolon, including this one. Add a semicolon to the end of the line and all should be well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs1026-expected"&gt;
  &lt;/a&gt;
  CS1026 – ) expected
&lt;/h3&gt;

&lt;p&gt;You have too many opening parentheses and not enough closing parentheses. Check to make sure that all open-parentheses have a matching closing parentheses.&lt;/p&gt;

&lt;p&gt;Clicking on a parentheses in Visual Studio will highlight the matching parentheses making it easier to spot the one you’re missing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs1033-source-file-has-exceeded-the-limit-of-16707565-lines-representable-in-the-pdb-debug-information-will-be-incorrect"&gt;
  &lt;/a&gt;
  CS1033 – Source file has exceeded the limit of 16,707,565 lines representable in the PDB; debug information will be incorrect
&lt;/h3&gt;

&lt;p&gt;What on earth are you even doing over there? Why would you have a source file that requires more than 16 million lines?&lt;/p&gt;

&lt;p&gt;Don’t do that. Just no. It’s time to hire a consultant.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs1034-compiler-limit-exceeded-line-cannot-exceed-number-characters"&gt;
  &lt;/a&gt;
  CS1034 – Compiler limit exceeded: Line cannot exceed ‘number’ characters
&lt;/h3&gt;

&lt;p&gt;Some people like tabs. Some people like spaces. You, apparently solve this debate by removing line breaks entirely.&lt;/p&gt;

&lt;p&gt;You should never need to have a line of code longer than 16 million characters.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs1035-endoffile-found-expected"&gt;
  &lt;/a&gt;
  CS1035 – End-of-file found, ‘*/’ expected
&lt;/h3&gt;

&lt;p&gt;Your code has a block comment start (&lt;code&gt;/*&lt;/code&gt;) but no matching end comment. Add an end comment (&lt;code&gt;*/&lt;/code&gt;) and the compiler will be happier.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs1039-unterminated-string-literal"&gt;
  &lt;/a&gt;
  CS1039 – Unterminated string literal
&lt;/h3&gt;

&lt;p&gt;It looks like you started a string somewhere but forgot to put the other quotation mark. Add it in where it needs to be.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs1501-no-overload-for-method-method-takes-number-arguments"&gt;
  &lt;/a&gt;
  CS1501 – No overload for method ‘method’ takes ‘number’ arguments
&lt;/h3&gt;

&lt;p&gt;This occurs when you are trying to call a method with an incorrect number of arguments or parameters to that method. Check the code or documentation for the method you’re trying to call and ensure you have the correct number of arguments specified.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs1513-expected-missing-closing-scope"&gt;
  &lt;/a&gt;
  CS1513 – } expected (missing closing scope)
&lt;/h3&gt;

&lt;p&gt;You have too many opening curly braces and not enough closing curly braces. Check to make sure that all open curly braces have a matching closing curly brace.&lt;/p&gt;

&lt;p&gt;Clicking on a &lt;code&gt;{&lt;/code&gt; in Visual Studio will highlight the matching &lt;code&gt;}&lt;/code&gt; making it easier to spot the one you’re missing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs1514-expected"&gt;
  &lt;/a&gt;
  CS1514 – { expected
&lt;/h3&gt;

&lt;p&gt;Your code requires a &lt;code&gt;{&lt;/code&gt; but you didn’t provide one. This often happens after declaring a namespace or class. Check your syntax and add curly braces where they need to go.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs1525-invalid-expression-term-character"&gt;
  &lt;/a&gt;
  CS1525 – Invalid expression term ‘character’
&lt;/h3&gt;

&lt;p&gt;This error seems ambiguous, but most of the time when I see this error it comes from someone trying to use &lt;code&gt;==&lt;/code&gt; to assign a value to a variable instead of using the &lt;code&gt;=&lt;/code&gt; operator. If this is not your error, you may need to consult some documentation or reference material for valid syntax for what you’re trying to do.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs1552-array-type-specifier-must-appear-before-parameter-name"&gt;
  &lt;/a&gt;
  CS1552 – Array type specifier, [], must appear before parameter name
&lt;/h3&gt;

&lt;p&gt;This error occurs when you put [] syntax around the variable name and not around the type name when declaring an array.&lt;/p&gt;

&lt;p&gt;Write your arrays as &lt;code&gt;int[] myArray;&lt;/code&gt; instead of &lt;code&gt;int myArray[];&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs1604-cannot-assign-to-variable-because-it-is-readonly"&gt;
  &lt;/a&gt;
  CS1604 – Cannot assign to ‘variable’ because it is read-only
&lt;/h3&gt;

&lt;p&gt;This occurs when you’ve declared a &lt;code&gt;readonly&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; variable and are trying to set its value. You can’t do that. If you need to change its value, it can’t be &lt;code&gt;readonly&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cs7036-no-argument-given-that-corresponds-to-the-required-formal-parameter-incorrect-method-call"&gt;
  &lt;/a&gt;
  CS7036 – No argument given that corresponds to the required formal parameter (incorrect method call)
&lt;/h3&gt;

&lt;p&gt;This error occurs when trying to call a base constructor but not specifying a parameter that is required by that constructor.&lt;/p&gt;

&lt;p&gt;Double check your &lt;code&gt;base()&lt;/code&gt; call and make sure the number and types of parameters lines up with a specific constructor present on your base class.&lt;/p&gt;

&lt;p&gt;The post &lt;a href="https://killalldefects.com/2021/10/25/making-sense-of-common-c-compiler-errors/"&gt;Making Sense of Common C# Compiler Errors&lt;/a&gt; appeared first on &lt;a href="https://killalldefects.com"&gt;Kill All Defects&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>beginners</category>
      <category>visualstudio</category>
    </item>
    <item>
      <title>Technical interviews devs enjoy</title>
      <author>Mage</author>
      <pubDate>Tue, 26 Oct 2021 01:57:28 +0000</pubDate>
      <link>https://dev.to/mage_ai/technical-interviews-devs-enjoy-2828</link>
      <guid>https://dev.to/mage_ai/technical-interviews-devs-enjoy-2828</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Structure your interview to emulate what it’s like to work together on your team.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;How technical interviews are conducted today&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why developers don’t enjoy the current process&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why the current process isn’t great for companies&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mage’s technical interview process&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why developers enjoy this process&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why this process is great for Mage&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Conclusion&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-technical-interviews-are-conducted-today"&gt;
  &lt;/a&gt;
  How technical interviews are conducted today
&lt;/h2&gt;

&lt;p&gt;Most technical interviews today involve a few coding challenges. These coding challenges can be take home assignments, on-site interviews, or coding in real-time via screen sharing or services like &lt;a href="https://www.hackerrank.com/"&gt;HackerRank&lt;/a&gt;. These coding challenges usually involve building an algorithm that solves an esoteric problem. The purpose of these types of challenges is to test the individual’s logical ability to understand a problem and code a general solution that solves it.&lt;/p&gt;

&lt;p&gt;In addition to coding challenges, technical interviews can include architecture design. This interview tests the ability of the developer to design something from a technical perspective. For example, design a key-value store like &lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-developers-dont-enjoy-the-current-process"&gt;
  &lt;/a&gt;
  Why developers don’t enjoy the current process
&lt;/h2&gt;

&lt;p&gt;Take home coding challenges require the developer to spend their own personal time taking a test. Developers don’t have time for that. It also tells them that the company is too busy to interview them in real-time. This isn’t a great experience for the developer.&lt;/p&gt;

&lt;p&gt;Ask any developer what book they read when preparing for interviews and most will tell you &lt;a href="https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/0984782850"&gt;Cracking the Coding Interview&lt;/a&gt;. Why is that? It’s because algorithmic coding challenges feel like taking a standardized test like the SAT or ACT. Developers dread the technical interview process because it has been reduced to memorization instead of creativity.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ux4p9BC4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n40o7t9u7ky9zuwu3i78.gif" alt="Image description"&gt;&lt;em&gt;(Source: Giphy)&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#why-the-current-process-isnt-great-for-companies"&gt;
  &lt;/a&gt;
  Why the current process isn’t great for companies
&lt;/h2&gt;

&lt;p&gt;Testing developers on how well they can memorize algorithms isn’t a strong indicator of whether or not they will be able to build end-to-end features. There can be great test takers that don’t adapt well to fast moving environments.&lt;/p&gt;

&lt;p&gt;Reviewing a take home coding challenge doesn’t reveal much about how well the developer can collaborate with others and their thought process when problem solving. There are developers who can build their own apps very well, but may struggle building things in tandem with other developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mages-technical-interview-process"&gt;
  &lt;/a&gt;
  Mage’s technical interview process
&lt;/h2&gt;

&lt;p&gt;If the position is for an intern (L2), junior developer (L2), or new graduate level (L3), there are 2 parts. The 1st part is a coding challenge where the developer is asked to define a class with multiple methods. The problem is simple, but the devil is in the details. The 2nd part of the technical interview is for us to watch the candidate build a small portion of an existing feature. What they write doesn’t need to be complete or production ready.&lt;/p&gt;

&lt;p&gt;If the position is for a level with 2 or more years of work experience (L4 and above), then there are 2 parts. The 1st part involves a technical design. The candidate will be asked to walk us through how they would design an existing feature from a technical perspective. In the 2nd part of the interview, the candidate will build a small portion of their technical design. What they write doesn’t need to be complete or production ready.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-developers-enjoy-this-process"&gt;
  &lt;/a&gt;
  Why developers enjoy this process
&lt;/h2&gt;

&lt;p&gt;Unlike taking a test that tests your memorization, the ideal technical interview tests the candidate’s creativity. There is no right or wrong answer to the coding challenges, there is only a sliding scale of effort and innovation. This interview process removes the necessity to “study” for it and allows the developer to do what they do best: code and build things. This creates a more natural environment where the candidate can express their thought process and how they approach building features. There is no studying, there is just doing.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H6zkiNkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3kbvj55w75k4acy0h2du.gif" alt="Image description"&gt;&lt;em&gt;Just code and build things. (Source: Giphy)&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#why-this-process-is-great-for-mage"&gt;
  &lt;/a&gt;
  Why this process is great for Mage
&lt;/h2&gt;

&lt;p&gt;The 1st coding challenge of building a class with methods is something that Mage developers do regularly day-to-day. Most people can finish a majority of this challenge. However, the assessment isn’t whether they can finish but how they defined the methods and whether they applied basic software engineering practices while doing it.&lt;/p&gt;

&lt;p&gt;The 2nd coding challenge of building a feature is something Mage developers do everyday. Watching the candidate build a small portion of a feature reveals how they would operate as a team member sitting next to you on any given day.&lt;/p&gt;

&lt;p&gt;The technical design challenge is something Mage developers do with their team before any coding starts on a new feature. Having the candidate walk us through their plan reveals how they share ideas with other people, how they ask questions, how they collect feedback, and how creative their problem solving process is.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RYKnN_Wg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5a7lvi5z8vrzepzbtje.gif" alt="Image description"&gt;&lt;em&gt;(Source: Giphy)&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The goal of this technical interview process is to emulate a day in the life of a developer at Mage. Crafting your interview process to best emulate a typical work day at your company can make the interview process for the candidate both enjoyable and gives them a better sense of what they’re getting into. In addition, it helps you assess whether or not the candidate can perform their responsibilities under the same conditions as reality.&lt;/p&gt;

</description>
      <category>technicalinterview</category>
      <category>developer</category>
      <category>interview</category>
      <category>hiring</category>
    </item>
    <item>
      <title>How do Websites Work?</title>
      <author>Josh</author>
      <pubDate>Tue, 26 Oct 2021 01:16:15 +0000</pubDate>
      <link>https://dev.to/jryther/how-do-websites-work-326p</link>
      <guid>https://dev.to/jryther/how-do-websites-work-326p</guid>
      <description>&lt;p&gt;Last week I went over the basics of the hardware and protocols that allow the internet to function.  In this second part of the series I am going to deep dive into the steps that go into displaying a website so that we can better understand the protocols in place.  The steps are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;DNS Query&lt;/li&gt;
&lt;li&gt;TCP Handshake&lt;/li&gt;
&lt;li&gt;TLS Handshake&lt;/li&gt;
&lt;li&gt;HTTP Request&lt;/li&gt;
&lt;li&gt;HTTP Response&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A DNS query is your computers way of taking a domain name and finding the correct IP address of the site you are trying to visit.  A request is sent to a DNS resolver chosen by the user which then queries the IP address from its DNS servers and returns it to the client that sent the request.  The default DNS resolver is usually your internet service provider.  The URL is broken up into different servers such as a  Top Level Domain (TLD) server which would contain directories for each .com extension.  This example is  known as a recursive DNS query whereas a non-recursive query follows the same procedure but the DNS client (user’s computer) will take on the responsibilities of the resolver and directly ask the servers itself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---aa_UuJR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4mruro8brdih3g1efrb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---aa_UuJR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4mruro8brdih3g1efrb.png" alt="DNS Query Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A TCP handshake is a way of establishing a connection with the host destination.  It is a three-way handshake used to synchronize and acknowledge the packet transmission before the process starts.  The client initiates the transfer by sending a a Synchronize message used to establish a connection and advise of the sequence numbers used to keep track of the packets being sent over.  The host server then responds back with an acknowledge message.  The last message is another acknowledge message sent back to the server and then the connection is established.  After the connection is completed a FIN message is sent to the server to disconnect the session.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PCKA5l9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hqluyuy5f0lhbny0k4u4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PCKA5l9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hqluyuy5f0lhbny0k4u4.png" alt="TCP Handshake Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step in the process is the TLS handshake.  TLS is an encryption protocol for internet communication.  It is the evolution of the previous protocol used, SSL.  The steps of the handshake are to first specify which version of TLS will be used.  Next is to establish the cipher suites utilized.  Third,  authentication of the server through the server’s public key and the SSL certificate authority’s digital signature.  Lastly, generate session keys to use symmetric encryption for the duration of the connection.  This is a generalized version of the exchange which is broken up into more steps and is dependent on the key exchange algorithm and cipher suites supported.  See this &lt;a href="https://www.cloudflare.com/learning/ssl/what-happens-in-a-tls-handshake/"&gt;link&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;The last two steps to view a web page are HTTP requests and responses.  HTTP is a protocol used to request and receive information from a web server.  A request is sent with a method it wishes the server to perform and relevant information needed in order to execute that action.  Common request methods are GET, POST, and UPDATE.  A GET method asks the server for the information at the provided URL  in the header.  Your browser will send a GET method in order to get the HTML and CSS for a website to render.  Once the request is received by the server it will send a response back as a status code.  Status code 200 means the request is OK and the server starts sending over packets of data.  Click &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods"&gt;here&lt;/a&gt; for a list of request methods and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"&gt;here&lt;/a&gt; for status codes.&lt;/p&gt;

&lt;p&gt;What I have provided is a high overview of how an internet web page is rendered.  Each section has a lot more you can spend time researching if you choose to do so.  Below I have provided links to the resources I used to write the post.  I hope you learned something and if you did please feel free to like the post or leave a comment below.  Have a great week and happy programming!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;- DNS Query:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.cloudns.net/wiki/article/254/"&gt;https://www.cloudns.net/wiki/article/254/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smallbusiness.chron.com/primary-secondary-dns-65413.html"&gt;https://smallbusiness.chron.com/primary-secondary-dns-65413.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smallbusiness.chron.com/domain-name-system-dns-resolvers-work-76639.html"&gt;https://smallbusiness.chron.com/domain-name-system-dns-resolvers-work-76639.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;- TCP Handshake&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.guru99.com/tcp-3-way-handshake.html"&gt;https://www.guru99.com/tcp-3-way-handshake.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;- TLS Handshake&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.cloudflare.com/learning/ssl/what-happens-in-a-tls-handshake/"&gt;https://www.cloudflare.com/learning/ssl/what-happens-in-a-tls-handshake/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;- HTTP Request/Response:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>todayilearned</category>
      <category>html</category>
    </item>
    <item>
      <title>Suspense in Svelte: Writing Components That Don't Care</title>
      <author>Brian K</author>
      <pubDate>Tue, 26 Oct 2021 00:10:46 +0000</pubDate>
      <link>https://dev.to/waltzingpenguin/suspense-in-svelte-writing-components-that-dont-care-21aj</link>
      <guid>https://dev.to/waltzingpenguin/suspense-in-svelte-writing-components-that-dont-care-21aj</guid>
      <description>&lt;p&gt;Loading data, managing async requests, and communicating status information back to the end user takes an impressive portion of our time writing web applications.  What would it look like if we could write components that did not care about any part of that?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-component"&gt;
  &lt;/a&gt;
  Our Component
&lt;/h2&gt;

&lt;p&gt;Let's write a simple component that displays all the possible evolutions of a Pokemon using the data supplied from &lt;a href="https://pokeapi.co/"&gt;pokeapi.com&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// file: Evolution.svelte&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./link.svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getEvolution&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getPokemon&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$lib/data.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pokemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getPokemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;evolution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getEvolution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$pokemon&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;evolution_chain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$pokemon&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

{#if $evolution?.length}
  {#each $evolution as id}
    &lt;span class="nt"&gt;&amp;lt;Link&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  {/each}
{:else}
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This Pokemon doesn't evolve!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
{/if}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've accomplished our goal!  This component is really simple and straightforward but also does not care about loading states, error handling, or data fetching. Unfortunately, &lt;em&gt;something&lt;/em&gt; has to worry about those aspects in a production application.  What can we do to allow us to write components this simple without compromising?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-fetching"&gt;
  &lt;/a&gt;
  Data Fetching
&lt;/h2&gt;

&lt;p&gt;As part of the "do not care" mantra, we want to avoid knowing if any other component needs the same data.  Let's just make the request and let our data layer worry about caching and pooling requests between various components.&lt;/p&gt;

&lt;p&gt;An implementation of our &lt;code&gt;getPokemon&lt;/code&gt; function might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// File: $lib/data.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;swr&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@svelte-drama/swr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;suspend&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@svelte-drama/swr/plugin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPokemon&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://pokeapi.co/api/v2/pokemon-species/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/`&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;swr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;suspend&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;@svelte-drama/swr&lt;/code&gt; will cache every request keyed on the url passed to it.  If multiple components request the same key at the same time, only one request will be made and all the components will be updated when it returns.  If this request has been made before, we can even skip making the request at all and just return the cached data.&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;suspend&lt;/code&gt; plugin here notifies our application that we need certain data and this component isn't ready to render until we have finished fetching that data.  Exactly what that means is in the next section.&lt;/p&gt;

&lt;p&gt;Finally, &lt;code&gt;data&lt;/code&gt; returned here is a Svelte store.  It will start off as &lt;code&gt;undefined&lt;/code&gt; while fetching data, which our component unfortunately does need to be aware of, and will update to our data once the request is finished.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#suspense"&gt;
  &lt;/a&gt;
  Suspense
&lt;/h2&gt;

&lt;p&gt;To fit the final piece of the puzzle, we still need to show loading indicators to the user.  Let's take our &lt;code&gt;&amp;lt;Evolution&amp;gt;&lt;/code&gt; component and wrap it in a page that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// index.svelte&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Suspense&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@svelte-drama/suspense&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Evolution&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Evolution.svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Eevee Evolutions&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;Suspense&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Evolution&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;{&lt;/span&gt; &lt;span class="err"&gt;133&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"loading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Loading...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;An error occurred.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Suspense&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;&amp;lt;Suspense&amp;gt;&lt;/code&gt; component here is tied into the &lt;code&gt;suspend&lt;/code&gt; call we made while fetching data.  If any child components (or any of their children) aren't ready to display yet, this component will just show "Loading...".  Once the data comes in, the loading indicator is discard and our components are shown.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#isnt-this-just-raw-await-endraw-"&gt;
  &lt;/a&gt;
  Isn't this just &lt;code&gt;#await&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;{#await}&lt;/code&gt; in templates is a powerful tool and these tools do not replace it.  If all data fetching and loading indicators happen in a single component, then that is a simpler way to achieve these same goals.&lt;/p&gt;

&lt;p&gt;The difference happens when data loading is spread across multiple components.  A change to the APIs &lt;code&gt;&amp;lt;Evolution&amp;gt;&lt;/code&gt; depends on would only impact that single component.  The loading indicators on our main page do not care which data is needed or where it comes from.  If the &lt;code&gt;&amp;lt;Link&amp;gt;&lt;/code&gt; component referenced in our &lt;code&gt;&amp;lt;Evolution&amp;gt;&lt;/code&gt; component also fetched data of its own (e.g. prefetching an image of the Pokemon) we don't have to change any code here at all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This isn't meant to be an in depth explanation for using any of the libraries mentioned here.  For that, consult their documentation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/@svelte-drama/swr"&gt;@svelte-drama/swr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/@svelte-drama/suspense"&gt;@svelte-drama/suspense&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead, hopefully it illuminates their motivations for existing and what problems they are trying to solve.  You can find a full fledged example of the techniques discussed here: &lt;a href="https://pokemon-suspense-demo.vercel.app/"&gt;https://pokemon-suspense-demo.vercel.app/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>suspense</category>
    </item>
    <item>
      <title>How to identify items in an Amazon DynamoDB table that haven't been accessed for a time and move them to Amazon S3.</title>
      <author>Kirk Kirkconnell</author>
      <pubDate>Mon, 25 Oct 2021 23:49:55 +0000</pubDate>
      <link>https://dev.to/nosqlknowhow/how-to-identify-items-in-an-amazon-dynamodb-table-that-havent-been-accessed-for-a-time-and-move-them-to-amazon-s3-fam</link>
      <guid>https://dev.to/nosqlknowhow/how-to-identify-items-in-an-amazon-dynamodb-table-that-havent-been-accessed-for-a-time-and-move-them-to-amazon-s3-fam</guid>
      <description>&lt;p&gt;Question: How to identify items in an Amazon DynamoDB table that haven't been accessed for a time and move them to Amazon S3.&lt;/p&gt;

&lt;p&gt;Answer: There is no built in way for DynamoDB to know which items have or have not been accessed lately. More than likely, your best option is to do the following:&lt;/p&gt;

&lt;p&gt;Prerequisites:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Have TTL enabled on the table and a TTL attribute on every item in the table. If not, you will have to do that first.&lt;/li&gt;
&lt;li&gt;If you do not already update TTL attributes on items when they are accessed, you must change your application code to update the TTL attribute on an item when you access that item. Otherwise none of this will work.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With that in place, enable DynamoDB Streams. Then create a Lambda function that &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/time-to-live-ttl-streams.html"&gt;watches DDB Streams specifically for TTL Deletes&lt;/a&gt; which reads from the table's stream, then write the expired items to S3. &lt;a href="https://aws.amazon.com/blogs/database/automatically-archive-items-to-s3-using-dynamodb-time-to-live-with-aws-lambda-and-amazon-kinesis-firehose/"&gt;Here is an older blog post which should still be mostly relevant for this purpose&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Avoid Duplication! GitHub Actions Reusable Workflows</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Mon, 25 Oct 2021 23:42:59 +0000</pubDate>
      <link>https://dev.to/n3wt0n/avoid-duplication-github-actions-reusable-workflows-3ae8</link>
      <guid>https://dev.to/n3wt0n/avoid-duplication-github-actions-reusable-workflows-3ae8</guid>
      <description>&lt;p&gt;Thanks to the new GitHub Actions feature called "&lt;strong&gt;&lt;em&gt;Reusable Workflows&lt;/em&gt;&lt;/strong&gt;" you can now reference an existing workflow with a single line of configuration rather than copying and pasting from one workflow to another.&lt;/p&gt;

&lt;p&gt;Basically &lt;strong&gt;GitHub Actions Templates on steroids&lt;/strong&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-reusable-workflows"&gt;
  &lt;/a&gt;
  What Are Reusable Workflows
&lt;/h3&gt;

&lt;p&gt;So, Reusable Workflows in GitHub Actions. Thanks to this feature you can now reference an entire Actions workflow in another workflow, like if it were a single action.&lt;/p&gt;

&lt;p&gt;This new feature builds on top of the Composite Actions introduced a while back. If you don't know what Composite Actions are, check &lt;a href="https://dev.to/n3wt0n/github-composite-actions-nest-actions-within-actions-3e5l"&gt;this post&lt;/a&gt; or &lt;a href="https://youtu.be/4lH_7b5lmjo"&gt;this video&lt;/a&gt;, but in short they are &lt;strong&gt;one or more steps packaged together&lt;/strong&gt; which can be then referenced in an Actions workflows by a single line.&lt;/p&gt;

&lt;p&gt;Reusable Workflows extend this concept, allowing you to &lt;strong&gt;reference an entire workflow in another one&lt;/strong&gt;. If Composite Actions can be thought of as Templates, Reusable Workflows is on another new level.&lt;/p&gt;

&lt;p&gt;Right, let's see how to create a reusable workflow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lRypYtmbKMs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/lRypYtmbKMs"&gt;Link to the video: https://youtu.be/lRypYtmbKMs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-reusable-workflow"&gt;
  &lt;/a&gt;
  Create a Reusable Workflow
&lt;/h3&gt;

&lt;p&gt;Reusable workflows are &lt;em&gt;normal&lt;/em&gt; Actions YAML files, and as such they have to reside in the &lt;code&gt;.github/workflows&lt;/code&gt; folder in the root of a repo.&lt;/p&gt;

&lt;p&gt;The only particular thing they have to have is a &lt;em&gt;special trigger&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_call&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The workflow file can also have different triggers, but to make it reusable one of those must be the &lt;code&gt;workflow_call&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also &lt;strong&gt;pass data&lt;/strong&gt; to a reusable workflow, via the trigger &lt;strong&gt;parameters&lt;/strong&gt; which can be of 2 types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;inputs&lt;/li&gt;
&lt;li&gt;secrets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;inputs&lt;/strong&gt; are used to pass &lt;em&gt;normal&lt;/em&gt; data (aka not sensitive information):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;image_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
      &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, where I want to use a reusable workflow as template to build and push a Docker Image to a registry, we can see that we have 2 inputs of type &lt;code&gt;string&lt;/code&gt;, with one required and one not required.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: if a required input has not been passed to the reusable workflow, it will fail &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Other available types are &lt;code&gt;boolean&lt;/code&gt; and &lt;code&gt;number&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;secrets&lt;/strong&gt;, instead, as the name says, are used to pass secret values to the workflow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;registry_username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;registry_password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case you can see that there is no &lt;code&gt;type&lt;/code&gt;, every secret is treated as string.&lt;/p&gt;

&lt;p&gt;Finally, you can use those parameters in your workflow by using &lt;code&gt;{{inputs.NAME_OF_THE_INPUT}}&lt;/code&gt; and &lt;code&gt;{{secrets.NAME_OF_THE_SECRET}}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, in the abovementioned example where I want to use a reusable workflow to build and push a Docker image to a registry, the reusable workflow will look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create and Publish Docker Image&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_call&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;image_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
      &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;registry_username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;registry_password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;      
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup BuildX&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/setup-buildx-action@v1&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Login to the Registry&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/login-action@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.registry_username}}&lt;/span&gt;
          &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.registry_password}}&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set the tag&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;if [ -z "${{inputs.tag}}" ]&lt;/span&gt;
          &lt;span class="s"&gt;then&lt;/span&gt;
            &lt;span class="s"&gt;echo "final_tag=latest" &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
          &lt;span class="s"&gt;else&lt;/span&gt;
            &lt;span class="s"&gt;echo "final_tag=${{inputs.tag}}" &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
          &lt;span class="s"&gt;fi&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build and Push the Image&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/build-push-action@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
          &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.registry_username}}/${{inputs.image_name}}:${{env.final_tag}}&lt;/span&gt;


  &lt;span class="na"&gt;do-something-else&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "Hello"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also note that &lt;strong&gt;reusable workflows can have multiple jobs&lt;/strong&gt;, as you can see in the example (where the &lt;code&gt;do-something-else&lt;/code&gt; does nothing, but it is to show it off)&lt;/p&gt;

&lt;p&gt;Easy right? One thing to keep in mind is that if the reusable workflow has other triggers apart from the &lt;code&gt;workflow_call&lt;/code&gt; you may want to make sure it doesn't accidentally run multiple times.&lt;/p&gt;

&lt;p&gt;Now that we have our reusable workflow, let's see how to use it in another workflow. And stay with me until the end because I will talk about the &lt;strong&gt;limitations&lt;/strong&gt; of reusable workflows and when they can be useful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-a-reusable-workflow"&gt;
  &lt;/a&gt;
  Using a Reusable Workflow
&lt;/h3&gt;

&lt;p&gt;Now that we have our reusable workflow ready, it is time to use it in another workflow.&lt;/p&gt;

&lt;p&gt;To do so, just &lt;strong&gt;add it directly in a job&lt;/strong&gt; of your workflow with this syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt; &lt;span class="na"&gt;job_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;USER_OR_ORG_NAME/REPO_NAME/.github/workflows/REUSABLE_WORKFLOW_FILE.yml@TAG_OR_BRANCH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's analyse this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You create a job with no steps&lt;/li&gt;
&lt;li&gt;You don't add a &lt;code&gt;runs-on&lt;/code&gt; clause, because it is contained in the reusable workflow&lt;/li&gt;
&lt;li&gt;You reference it as &lt;code&gt;uses&lt;/code&gt; passing:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;the name of the user or organization that owns the repo where the reusable workflow is stored&lt;/li&gt;
&lt;li&gt;the repo name&lt;/li&gt;
&lt;li&gt;the base folder&lt;/li&gt;
&lt;li&gt;the name of the reusable workflow yaml file&lt;/li&gt;
&lt;li&gt;and the tag or the branch where the file is store (if you haven't created a tag/version for it)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my real example above, this is how I'd reference it in a job called &lt;em&gt;docker&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;docker&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;n3wt0n/ReusableWorkflow/.github/workflows/buildAndPublishDockerImage.yml@main&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now of course we have to pass the parameters. Let's start with the &lt;strong&gt;inputs&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;image_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-awesome-app&lt;/span&gt;
      &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$GITHUB_RUN_NUMBER&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we just use the &lt;code&gt;with&lt;/code&gt; clause, and we specify the name of the inputs.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Needless to say, the names have to be the same as the ones in the reusable workflow definition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the secrets, instead, we use a new &lt;code&gt;secrets&lt;/code&gt; section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;registry_username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.REGISTRY_USERNAME}}&lt;/span&gt;
      &lt;span class="na"&gt;registry_password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.REGISTRY_PASSWORD}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is it. So the complete example would look like this (you can find it &lt;a href="https://github.com/n3wt0n/ActionsTest/blob/main/.github/workflows/reusableWorkflowsUser.yml"&gt;here&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# This is a basic workflow to showcase the use of Reusable Workflows&lt;/span&gt;

&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Reusable Workflow user&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;do-it&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run a one-line script&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo Hello, world!&lt;/span&gt;

  &lt;span class="na"&gt;docker&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;n3wt0n/ReusableWorkflow/.github/workflows/buildAndPublishDockerImage.yml@main&lt;/span&gt;
    &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;image_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-awesome-app&lt;/span&gt;
      &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$GITHUB_RUN_NUMBER&lt;/span&gt;
    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;registry_username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.REGISTRY_USERNAME}}&lt;/span&gt;
      &lt;span class="na"&gt;registry_password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.REGISTRY_PASSWORD}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once again, as you can see the caller workflow can have multiple jobs as well.&lt;/p&gt;

&lt;p&gt;If we run the workflow, this is what we get:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i5tThZBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gklfn5vy2mklzhhcjbs1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i5tThZBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gklfn5vy2mklzhhcjbs1.png" alt="Workflow run"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see in the image that we have the logs for the &lt;code&gt;do-it&lt;/code&gt; job that is present in the caller, and then for both the jobs in the reusable workflow.&lt;br&gt;
Since those 2 jobs &lt;em&gt;are run&lt;/em&gt; within the &lt;code&gt;docker&lt;/code&gt; job in the caller workflow, they are referenced in the log as &lt;code&gt;docker / build&lt;/code&gt; and &lt;code&gt;docker /do-something-else&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But apart from that, the logs are complete:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KwLbl8SS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onltrx96m0d3fxlpffe4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KwLbl8SS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onltrx96m0d3fxlpffe4.png" alt="Logs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We get &lt;strong&gt;the full details&lt;/strong&gt; of everything that has happened.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#limitations-and-caveats"&gt;
  &lt;/a&gt;
  Limitations and Caveats
&lt;/h3&gt;

&lt;p&gt;So, let's start with a few &lt;strong&gt;notes&lt;/strong&gt;. First, remember that the Reusable Workflows are currently in &lt;strong&gt;beta&lt;/strong&gt;, so things might change by the time they go GA.&lt;/p&gt;

&lt;p&gt;Second, for a workflow to be able to use it, a reusable workflow must be stored in the same repo as the call, or in a public repo, or yet in an internal repo with settings that allow it to be accessed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z4B4_QtA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hw795lt2gzplxe64bfrp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z4B4_QtA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hw795lt2gzplxe64bfrp.png" alt="Repo access settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's talk now about &lt;strong&gt;limitations&lt;/strong&gt;. As direct result of what we have just said, reusable workflows stored in a private repository can be used only by other workflows in the same repo.&lt;/p&gt;

&lt;p&gt;Also, Reusable workflows &lt;strong&gt;cannot call and consume other Reusable workflows&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finally, and this is big one you need to remember, environment variables set at workflow level in the caller workflow are &lt;strong&gt;not passed to the reusable workflow&lt;/strong&gt;. So if you need use any of those variables in the reusable workflow, you'll have to pass them to the workflow via the parameters as I've shown above.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Reusing workflows avoids duplication&lt;/strong&gt;. This makes workflows easier to maintain and allows you to create new workflows more quickly by building on the work of others, just as you do with actions. &lt;/p&gt;

&lt;p&gt;Workflow reuse also promotes &lt;strong&gt;best practices&lt;/strong&gt; by helping you to use workflows that are well designed, have already been tested, and have been proved to be effective. Your organization can build up a library of reusable workflows that can be &lt;strong&gt;centrally maintained&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let me know in the comment section below what you think about these new reusable workflows, if and how you plan to use them, and if there is any feature that you think is missing.&lt;/p&gt;

&lt;p&gt;You may also want to watch &lt;a href="https://youtu.be/4lH_7b5lmjo"&gt;this video&lt;/a&gt; where I talk about the Composite Actions as templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
📧 &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lRypYtmbKMs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>actions</category>
      <category>devops</category>
      <category>cicd</category>
    </item>
    <item>
      <title>Secret dev tools for every code newbie</title>
      <author>Jason Leow ~ golifelog.com</author>
      <pubDate>Mon, 25 Oct 2021 23:36:52 +0000</pubDate>
      <link>https://dev.to/jasonleowsg/secret-dev-tools-for-every-code-newbie-5a8a</link>
      <guid>https://dev.to/jasonleowsg/secret-dev-tools-for-every-code-newbie-5a8a</guid>
      <description>&lt;p&gt;I’d been learning a lot of new programming tricks lately and picking up new tools too. Some of these tools got me really excited that I have to share them! These tools are not commonly recommended in online tutorials or articles and might not be well-known to code newbies:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coding-hosting-glitch"&gt;
  &lt;/a&gt;
  Coding, hosting - &lt;a href="https://glitch.com/"&gt;Glitch&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This really blew my mind. It sounded like just another Github alternative on paper, but when I arrived on the site, all the vibrant colors, cool whimsical illustrations……! It’s like Github but with unicorns and rainbows; like Willy Wonka’s chocolate factory but for coders! It’s got so much personality and confidence in their branding, that I’m super impressed. Such a fun and delightful experience just browsing through all the code repos. And it’s not just a prettier Github, but a better one too. Glitch allows you to code collaboratively in realtime, much like Google Docs. This makes Github feel like Windows 95 Microsoft Word (oh wait, Github was acquired by Microsoft lol). You also see your site or app deployed live in a preview window with a unique subdomain (or custom domain), much like Codepen and JSFiddle. There’s definitely something of a trend here, where community-generated content is built around a collaborative tool.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#command-line-hyper"&gt;
  &lt;/a&gt;
  Command Line - &lt;a href="https://hyper.is/"&gt;Hyper&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Using the terminal used to scare me a lot, but since having to learn Rails and Vue, I had to start using terminal quite a lot and am slowly coming round to it. But not the user experience of it though. The developer experience of using this dark mode interface with neon green characters isn’t the best, so I decided to try out Hyper. It’s an alternative to using your native terminal, and comes with themes to add color to the text, and plugins like search that allows you to search for a particular command you used in the past. Much better UX now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-apis-insomnia"&gt;
  &lt;/a&gt;
  Testing APIs - &lt;a href="https://insomnia.rest/"&gt;Insomnia&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Postman is a popular tool for testing APIs, but it feels bloated. I chanced on Insomnia from a tutorial and loved the simple and well-designed interface for it. Sometimes simple with less features is better for beginners, because it’s not so overwhelming. Coding a Ruby on Rails API is completely new ground for me. It was scary initially, but after following a few tutorials, I feel more confident, and being able to now set up the GET/POST/PUT/DELETE requests and test the API easily had really boosted my morale. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database-tableplus"&gt;
  &lt;/a&gt;
  Database - &lt;a href="https://tableplus.com/"&gt;TablePlus&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This was a real life-saver. I hated trying to access my database over the terminal. A database is best visualised as a table, but command line returns it in text! It just doesn’t go. TablePlus shows the data you have in a table format, allows you to query and search easily, and more.I’ve not even touched the depth of the features available. I’m just so relieved to be able to see my data now in a table format, in a way I can understand, and manipulate my data much more easily.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#design-figma-community"&gt;
  &lt;/a&gt;
  Design - &lt;a href="https://www.figma.com/community/"&gt;Figma Community&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This new Community tab in Figma is still in beta, but I can see that it’s going to be a huge hit amongst designers. Figma is a collaborative UI/UX design tool, kind of like Photoshop remixed with Google Docs, but ten times better. I always felt it had an edge over Sketch (which is another design tool popular with UX designers), but now with the Community feature it’ll really stand out, because the Community feature is like Dribble remixed with Github rolled into one - a bank of Figma templates made by notable tech companies (like Spotify) and great designers. Browsing through all the different templates made available for free, I almost feel like I don’t ever need to design anything original ever again, because all I need to do is to search, and then duplicate and customize to my own project. And it’s not just templates for designing UI for phones or desktop screens, but also lots of cool collaborative tools and templates to hold a remote brainstorming session together, resume templates, everything! It’s like a designer’s dream come through!&lt;/p&gt;




&lt;p&gt;Follow my daily writings on &lt;a href="https://golifelog.com/goals/30"&gt;Lifelog&lt;/a&gt;, where I write about learning to code, goals, productivity, indie hacking and tech for good.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>coding</category>
      <category>decodingcoding</category>
    </item>
  </channel>
</rss>
