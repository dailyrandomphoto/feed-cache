<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Object Destructuring In
JavaScript</title>
      <author>Nikhil Bobade </author>
      <pubDate>Mon, 07 Jun 2021 14:42:16 +0000</pubDate>
      <link>https://dev.to/nikhil27b/object-destructuring-in-javascript-1la</link>
      <guid>https://dev.to/nikhil27b/object-destructuring-in-javascript-1la</guid>
      <description>&lt;h2&gt;
  &lt;a href="#object-destructure-"&gt;
  &lt;/a&gt;
  Object Destructure :
&lt;/h2&gt;

&lt;p&gt;Object destructuring is a very useful feature of JavaScript to extract properties from objects and bind them to variables.&lt;/p&gt;

&lt;p&gt;The Object destructure is extracts multiple properties at only writing a single line. you can access properties from the nested objects and set a default value if that property doesn't exist. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#basic-object-destructuring-"&gt;
  &lt;/a&gt;
  Basic Object destructuring :
&lt;/h4&gt;

&lt;p&gt;This is a basic object identifier that can name property access and expression should evaluate to an object.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WZ76Cl83--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wljlo104l7198zw7ildh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WZ76Cl83--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wljlo104l7198zw7ildh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#assigning-to-new-variable-names-"&gt;
  &lt;/a&gt;
  Assigning to new variable names :
&lt;/h4&gt;

&lt;p&gt;A property can be unpacked from an object and assigned to a variable with a different name than the object property.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vLPKSdJe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rzt3kvb9but9zoi7b2o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vLPKSdJe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rzt3kvb9but9zoi7b2o.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#object-default-values-"&gt;
  &lt;/a&gt;
  Object Default values :
&lt;/h4&gt;

&lt;p&gt;A variable can be assigned as a default value, in if object is undefined that time we can be give a default value.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FMOkkt2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qzuqb75op2pcw8m9lry.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FMOkkt2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qzuqb75op2pcw8m9lry.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#nested-object-destructuring-"&gt;
  &lt;/a&gt;
  Nested Object Destructuring :
&lt;/h4&gt;

&lt;p&gt;In a nested object destructuring you will be defined as an identifier in nesting you can extract properties from is unlimited.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cN-EmL7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kp2yytpdlj4trcabej40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cN-EmL7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kp2yytpdlj4trcabej40.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rest-object-"&gt;
  &lt;/a&gt;
  Rest object :
&lt;/h4&gt;

&lt;p&gt;The rest syntax is useful to collect the remaining properties after the destructuring also you will get the rest of the values only with the spread operator.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I1n63BhS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfm5zk20sogvxp2bz0c7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I1n63BhS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfm5zk20sogvxp2bz0c7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you find this useful in a post like and save this post also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Importance of Keys in DBMS</title>
      <author>hebaShakeel</author>
      <pubDate>Mon, 07 Jun 2021 14:40:43 +0000</pubDate>
      <link>https://dev.to/hebashakeel/importance-of-keys-in-dbms-147g</link>
      <guid>https://dev.to/hebashakeel/importance-of-keys-in-dbms-147g</guid>
      <description>&lt;p&gt;&lt;strong&gt;DBMS Keys&lt;/strong&gt;&lt;br&gt;
It is used to identify unique records by the combination of one or more fields(attributes) in the database table.&lt;br&gt;
Keys play an important role in DBMS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Different Types of Keys:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;i) Candidate Keys&lt;/strong&gt; - It is a minimal(minimum) set of attributes that can identify each tuple/row uniquely in a Relation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; - In the below example of Employee relation, we can see that &lt;strong&gt;EPhone&lt;/strong&gt; is the only unique attribute. Hence it can be treated as a Candidate Key.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--20fJqE1t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7w0x40zozl7tg62vvoip.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--20fJqE1t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7w0x40zozl7tg62vvoip.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ii) Primary Keys&lt;/strong&gt; - It is a set of one or more attributes that can uniquely identify each tuple.&lt;br&gt;
   -&amp;gt; Primary Key cannot have "NULL" values.&lt;br&gt;
   -&amp;gt; Only one Primary Key is possible in a table.&lt;br&gt;
   -&amp;gt; Values of Primary Key are unique and they cannot be repeated.&lt;br&gt;
   -&amp;gt; One of the Candidate Keys is selected as the Primary Key.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iii) Super Keys&lt;/strong&gt; - It is a superset of Candidate Keys.&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;strong&gt;Trivial Super Key&lt;/strong&gt; - It is the set of all attributes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iv) Foreign Keys&lt;/strong&gt; - An attribute which is a key in one table and it also behaves as a Primary Key in another table is known as Foreign Key.&lt;br&gt;
-&amp;gt; It is used to combine two tables logically.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;v) Alternate Key&lt;/strong&gt; - All other Candidate Keys which are not selected as a Primary Key is called as Alternate Keys. It is also called as Secondary Key.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;vi) Composite Keys&lt;/strong&gt; - If a key contains more than one attribute then it is called as a Composite Key.&lt;/p&gt;

&lt;p&gt;Example: Employee table has key=&amp;gt;{eName, eAge, eAddress}. This key will be called as Composite Key.&lt;/p&gt;

&lt;p&gt;Thank You!&lt;br&gt;
See you soon.&lt;/p&gt;

</description>
      <category>database</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>How to easily install kafka without zookeeper</title>
      <author>Aditya Sridhar</author>
      <pubDate>Mon, 07 Jun 2021 14:37:55 +0000</pubDate>
      <link>https://dev.to/adityasridhar/how-to-easily-install-kafka-without-zookeeper-1j2</link>
      <guid>https://dev.to/adityasridhar/how-to-easily-install-kafka-without-zookeeper-1j2</guid>
      <description>&lt;p&gt;&lt;strong&gt;This post was originally published in &lt;a href="https://adityasridhar.com/posts/how-to-easily-install-kafka-without-zookeeper"&gt;adityasridhar.com&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this article we will see how kafka can be setup without using zookeeper. We will setup a 3 node kafka cluster and create a test topic. We will use a kafka producer to produce data into the test topic and also use a kafka consumer to consume data from the kafka topic.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-is-zookeeper-used-in-kafka"&gt;
  &lt;/a&gt;
  Why is zookeeper used in kafka
&lt;/h1&gt;

&lt;p&gt;Zookeeper is used to store kafka cluster metadata information. Zookeeper stores information like topic configuration, topic partition locations and so on.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-will-kafka-work-without-zookeeper"&gt;
  &lt;/a&gt;
  How will kafka work without zookeeper
&lt;/h1&gt;

&lt;p&gt;Zookeeper acts as a external metadata management system for kafka. This creates multiple problems such as data duplication, increased system complexity and also leads to additional java processes being used.&lt;/p&gt;

&lt;p&gt;In order to run kafka without zookeeper, it can be run using &lt;strong&gt;Kafka Raft metadata mode ( KRaft )&lt;/strong&gt;. In &lt;strong&gt;KRaft&lt;/strong&gt; the kafka metadata information will be stored as a partition within kafka itself. There will be a KRaft Quorum of controller nodes which will be used to store the metadata. The metadata will be stored in an internal kafka topic &lt;strong&gt;@metadata&lt;/strong&gt; .&lt;/p&gt;

&lt;p&gt;This is available in an experimental mode in kafka 2.8.0&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Right now using KRaft is experimental and should not be used in production&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setting-up-a-kafka-cluster-without-zookeeper"&gt;
  &lt;/a&gt;
  Setting up a kafka cluster without zookeeper
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#download-kafka"&gt;
  &lt;/a&gt;
  Download kafka
&lt;/h2&gt;

&lt;p&gt;Download kafka 2.8.0 from &lt;a href="https://kafka.apache.org/downloads"&gt;https://kafka.apache.org/downloads&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;wget https://apachemirror.wuchna.com/kafka/2.8.0/kafka_2.12-2.8.0.tgz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Extract kafka&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;tar &lt;/span&gt;xzf  kafka_2.12-2.8.0.tgz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the kafka folder. &lt;strong&gt;All kafka commands should be run in the kafka folder&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;kafka_2.12-2.8.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#kafka-cluster-configuration"&gt;
  &lt;/a&gt;
  Kafka cluster configuration
&lt;/h2&gt;

&lt;p&gt;If you go to &lt;code&gt;config/kraft&lt;/code&gt; folder inside the kafka home directory, you will see a file called &lt;code&gt;server.properties&lt;/code&gt;. This is a sample file which is provided by kafka, to show how kafka can be started without zookeeper&lt;/p&gt;

&lt;p&gt;Create 3 new files from server.properties. This is because we will be creating a 3 node cluster&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;config/kraft
&lt;span class="nb"&gt;cp &lt;/span&gt;server.properties server1.properties
&lt;span class="nb"&gt;cp &lt;/span&gt;server.properties server2.properties
&lt;span class="nb"&gt;cp &lt;/span&gt;server.properties server3.properties
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In server1.properties, modify the following properties. Please keep the other properties as is.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node.id&lt;span class="o"&gt;=&lt;/span&gt;1

process.roles&lt;span class="o"&gt;=&lt;/span&gt;broker,controller

inter.broker.listener.name&lt;span class="o"&gt;=&lt;/span&gt;PLAINTEXT

controller.listener.names&lt;span class="o"&gt;=&lt;/span&gt;CONTROLLER

&lt;span class="nv"&gt;listeners&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;PLAINTEXT://:9092,CONTROLLER://:19092

log.dirs&lt;span class="o"&gt;=&lt;/span&gt;/tmp/server1/kraft-combined-logs

listener.security.protocol.map&lt;span class="o"&gt;=&lt;/span&gt;CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

controller.quorum.voters&lt;span class="o"&gt;=&lt;/span&gt;1@localhost:19092,2@localhost:19093,3@localhost:19094
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me explain what these properties do:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;node.id&lt;/strong&gt;: This will act as the node Id in the cluster. This will help us identify which broker this is. It will also help us identify which kraft controller node this is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;process.roles&lt;/strong&gt;: A node can act as a &lt;strong&gt;broker&lt;/strong&gt; or &lt;strong&gt;controller&lt;/strong&gt; or &lt;strong&gt;both&lt;/strong&gt;. Here we are indicating that this node can be both a kafka broker and a kraft controller node.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;inter.broker.listener.name&lt;/strong&gt;: Here the broker listener name is set to &lt;strong&gt;PLAINTEXT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;controller.listener.names&lt;/strong&gt;: Here the controller listener name is set to &lt;strong&gt;CONTROLLER&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;listeners&lt;/strong&gt;: Here we indicate that the broker will use port 9092 and the kraft controller will use port 19092&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;log.dirs&lt;/strong&gt;: This is the log directory where kafka will store the data&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;listener.security.protocol.map&lt;/strong&gt;: Here the connection security details are added&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;controller.quorum.voters&lt;/strong&gt;: This is used to indicate all the kraft controllers which are available. Here we are indicating that we will have 3 kraft controller nodes running on ports 19092, 19093 and 19094&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;server2.properties&lt;/strong&gt; modify the following properties. Please keep the other properties as is.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node.id&lt;span class="o"&gt;=&lt;/span&gt;2

process.roles&lt;span class="o"&gt;=&lt;/span&gt;broker,controller

controller.quorum.voters&lt;span class="o"&gt;=&lt;/span&gt;1@localhost:19092,2@localhost:19093,3@localhost:19094

&lt;span class="nv"&gt;listeners&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;PLAINTEXT://:9093,CONTROLLER://:19093

inter.broker.listener.name&lt;span class="o"&gt;=&lt;/span&gt;PLAINTEXT

controller.listener.names&lt;span class="o"&gt;=&lt;/span&gt;CONTROLLER

log.dirs&lt;span class="o"&gt;=&lt;/span&gt;/tmp/server2/kraft-combined-logs

listener.security.protocol.map&lt;span class="o"&gt;=&lt;/span&gt;CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Server 2, the broker port is 9093 and controller port is 19093. Also the log.dirs is different&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;server3.properties&lt;/strong&gt; modify the following properties. Please keep the other properties as is.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node.id&lt;span class="o"&gt;=&lt;/span&gt;3

process.roles&lt;span class="o"&gt;=&lt;/span&gt;broker,controller

controller.quorum.voters&lt;span class="o"&gt;=&lt;/span&gt;1@localhost:19092,2@localhost:19093,3@localhost:19094

&lt;span class="nv"&gt;listeners&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;PLAINTEXT://:9094,CONTROLLER://:19094

inter.broker.listener.name&lt;span class="o"&gt;=&lt;/span&gt;PLAINTEXT

controller.listener.names&lt;span class="o"&gt;=&lt;/span&gt;CONTROLLER

log.dirs&lt;span class="o"&gt;=&lt;/span&gt;/tmp/server3/kraft-combined-logs

listener.security.protocol.map&lt;span class="o"&gt;=&lt;/span&gt;CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Server 3 the broker port is 9094 and the controller port is 19094. Also the log.dirs is different&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-complete-server-property-files-are-available-in-this-git-repo"&gt;
  &lt;/a&gt;
  The complete server property files are available in this &lt;a href="https://github.com/aditya-sridhar/kafka-kraft-demo"&gt;Git repo&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#kafka-cluster-id-creation-and-log-directory-setup"&gt;
  &lt;/a&gt;
  Kafka cluster id creation and log directory setup
&lt;/h2&gt;

&lt;p&gt;First we need to create kafka cluster id before starting the servers. This can be done using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./bin/kafka-storage.sh random-uuid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note down the uuid that comes after running the above statement. In my case I got the following uuid&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; ./bin/kafka-storage.sh random-uuid
 9dJzdGvfTPaCY4e8klXaDQ
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we need to format all the storage directories. This is basically the directory that we put in &lt;strong&gt;log.dirs&lt;/strong&gt; property.&lt;/p&gt;

&lt;p&gt;This can be done with the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./bin/kafka-storage.sh format &lt;span class="nt"&gt;-t&lt;/span&gt; &amp;lt;uuid&amp;gt; &lt;span class="nt"&gt;-c&lt;/span&gt; &amp;lt;server_config_location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace &lt;code&gt;&amp;lt;uuid&amp;gt;&lt;/code&gt; with the uuid that you got in the previous step. Replace &lt;code&gt;&amp;lt;server_config_location&amp;gt;&lt;/code&gt; with the server property files&lt;/p&gt;

&lt;p&gt;In my case, I will be running the following commands&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For Server 1:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./bin/kafka-storage.sh format &lt;span class="nt"&gt;-t&lt;/span&gt; 9dJzdGvfTPaCY4e8klXaDQ &lt;span class="nt"&gt;-c&lt;/span&gt; ./config/kraft/server1.properties
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;For Server 2:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./bin/kafka-storage.sh format &lt;span class="nt"&gt;-t&lt;/span&gt; 9dJzdGvfTPaCY4e8klXaDQ &lt;span class="nt"&gt;-c&lt;/span&gt; ./config/kraft/server2.properties
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;For Server 3:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./bin/kafka-storage.sh format &lt;span class="nt"&gt;-t&lt;/span&gt; 9dJzdGvfTPaCY4e8klXaDQ &lt;span class="nt"&gt;-c&lt;/span&gt; ./config/kraft/server3.properties
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the result which you get when you run the 3 commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./bin/kafka-storage.sh format &lt;span class="nt"&gt;-t&lt;/span&gt; 9dJzdGvfTPaCY4e8klXaDQ &lt;span class="nt"&gt;-c&lt;/span&gt; ./config/kraft/server1.properties
Formatting /tmp/server1/kraft-combined-logs
&lt;span class="nv"&gt;$ &lt;/span&gt;./bin/kafka-storage.sh format &lt;span class="nt"&gt;-t&lt;/span&gt; 9dJzdGvfTPaCY4e8klXaDQ &lt;span class="nt"&gt;-c&lt;/span&gt; ./config/kraft/server2.properties
Formatting /tmp/server2/kraft-combined-logs
&lt;span class="nv"&gt;$ &lt;/span&gt;./bin/kafka-storage.sh format &lt;span class="nt"&gt;-t&lt;/span&gt; 9dJzdGvfTPaCY4e8klXaDQ &lt;span class="nt"&gt;-c&lt;/span&gt; ./config/kraft/server3.properties
Formatting /tmp/server3/kraft-combined-logs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#starting-the-kafka-servers"&gt;
  &lt;/a&gt;
  Starting the kafka servers
&lt;/h2&gt;

&lt;p&gt;The kafka servers can be started in daemon mode using the following commands:&lt;/p&gt;

&lt;p&gt;First setup the heap properties&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;KAFKA_HEAP_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"-Xmx200M –Xms100M"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are giving a very small max heap of 200M since we are running all the servers in a single local machine. If you have bigger servers you can give heap size of 1GB or Above.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Start Server 1:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./bin/kafka-server-start.sh &lt;span class="nt"&gt;-daemon&lt;/span&gt; ./config/kraft/server1.properties
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Start Server 2:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./bin/kafka-server-start.sh &lt;span class="nt"&gt;-daemon&lt;/span&gt; ./config/kraft/server2.properties
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Start Server 3:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./bin/kafka-server-start.sh &lt;span class="nt"&gt;-daemon&lt;/span&gt; ./config/kraft/server3.properties
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-a-kafka-topic"&gt;
  &lt;/a&gt;
  Create a kafka topic
&lt;/h2&gt;

&lt;p&gt;Let us create a topic &lt;strong&gt;kraft-test&lt;/strong&gt; in this cluster&lt;/p&gt;

&lt;p&gt;The topic can be created using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./bin/kafka-topics.sh &lt;span class="nt"&gt;--create&lt;/span&gt; &lt;span class="nt"&gt;--topic&lt;/span&gt; kraft-test &lt;span class="nt"&gt;--partitions&lt;/span&gt; 3 &lt;span class="nt"&gt;--replication-factor&lt;/span&gt; 3 &lt;span class="nt"&gt;--bootstrap-server&lt;/span&gt; localhost:9092
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are creating a topic with 3 partitions and 3 replicas since we have 3 nodes.&lt;/p&gt;

&lt;p&gt;We can list the topics present in the cluster using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bin/kafka-topics.sh &lt;span class="nt"&gt;--bootstrap-server&lt;/span&gt; localhost:9093 &lt;span class="nt"&gt;--list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the above command gives the below result&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bin/kafka-topics.sh &lt;span class="nt"&gt;--bootstrap-server&lt;/span&gt; localhost:9093 &lt;span class="nt"&gt;--list&lt;/span&gt;
kraft-test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can describe the topics present in the cluster using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bin/kafka-topics.sh &lt;span class="nt"&gt;--bootstrap-server&lt;/span&gt; localhost:9093 &lt;span class="nt"&gt;--describe&lt;/span&gt; &lt;span class="nt"&gt;--topic&lt;/span&gt; kraft-test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the above command gives the below result&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bin/kafka-topics.sh &lt;span class="nt"&gt;--bootstrap-server&lt;/span&gt; localhost:9093 &lt;span class="nt"&gt;--describe&lt;/span&gt; &lt;span class="nt"&gt;--topic&lt;/span&gt; kraft-test
Topic: kraft-test       TopicId: vZKswHHlQk2mEOw0yzAGAA PartitionCount: 3       ReplicationFactor: 3    Configs: segment.bytes&lt;span class="o"&gt;=&lt;/span&gt;1073741824
        Topic: kraft-test       Partition: 0    Leader: 3       Replicas: 3,2,1 Isr: 3,2,1
        Topic: kraft-test       Partition: 1    Leader: 2       Replicas: 2,3,1 Isr: 2,3,1
        Topic: kraft-test       Partition: 2    Leader: 2       Replicas: 2,3,1 Isr: 2,3,1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exploring-the-kafka-metadata-using-metadata-shell"&gt;
  &lt;/a&gt;
  Exploring the kafka metadata using metadata shell
&lt;/h2&gt;

&lt;p&gt;Similar to zookeeper cli, there is a &lt;strong&gt;metadata shell&lt;/strong&gt; provided by kafka so that we can read the data in the &lt;strong&gt;@metadata&lt;/strong&gt; internal topic.&lt;/p&gt;

&lt;p&gt;Open the shell using the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./bin/kafka-metadata-shell.sh  &lt;span class="nt"&gt;--snapshot&lt;/span&gt; /tmp/server1/kraft-combined-logs/&lt;span class="se"&gt;\@&lt;/span&gt;metadata-0/00000000000000000000.log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The structure here is very similar to what we see in zookeeper&lt;/p&gt;

&lt;p&gt;In order the list the brokers you can type &lt;code&gt;ls brokers/&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;ls &lt;/span&gt;brokers/
1  2  3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to list the topics you can type &lt;code&gt;ls topics/&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;ls &lt;/span&gt;topics/
kraft-test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to see the topic metadata you can type &lt;code&gt;cat topics/kraft-test/0/data&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;cat &lt;/span&gt;topics/kraft-test/0/data
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"partitionId"&lt;/span&gt; : 0,
  &lt;span class="s2"&gt;"topicId"&lt;/span&gt; : &lt;span class="s2"&gt;"vZKswHHlQk2mEOw0yzAGAA"&lt;/span&gt;,
  &lt;span class="s2"&gt;"replicas"&lt;/span&gt; : &lt;span class="o"&gt;[&lt;/span&gt; 3, 2, 1 &lt;span class="o"&gt;]&lt;/span&gt;,
  &lt;span class="s2"&gt;"isr"&lt;/span&gt; : &lt;span class="o"&gt;[&lt;/span&gt; 3, 2, 1 &lt;span class="o"&gt;]&lt;/span&gt;,
  &lt;span class="s2"&gt;"removingReplicas"&lt;/span&gt; : null,
  &lt;span class="s2"&gt;"addingReplicas"&lt;/span&gt; : null,
  &lt;span class="s2"&gt;"leader"&lt;/span&gt; : 3,
  &lt;span class="s2"&gt;"leaderEpoch"&lt;/span&gt; : 0,
  &lt;span class="s2"&gt;"partitionEpoch"&lt;/span&gt; : 0
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to find the controller leader node you can type &lt;code&gt;cat metadataQuorum/leader&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;cat &lt;/span&gt;metadataQuorum/leader
MetaLogLeader&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;nodeId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2, &lt;span class="nv"&gt;epoch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type &lt;code&gt;exit&lt;/code&gt; to get out of the metadata shell&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#producing-and-consuming-data-from-kafka"&gt;
  &lt;/a&gt;
  Producing and consuming data from kafka
&lt;/h2&gt;

&lt;p&gt;Use the following command to start a kafka producer in the terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bin/kafka-console-producer.sh &lt;span class="nt"&gt;--broker-list&lt;/span&gt; localhost:9092 &lt;span class="nt"&gt;--topic&lt;/span&gt; kraft-test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In a different terminal, use the following command to start a kafka consumer&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bin/kafka-console-consumer.sh &lt;span class="nt"&gt;--bootstrap-server&lt;/span&gt; localhost:9092 &lt;span class="nt"&gt;--topic&lt;/span&gt; kraft-test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the producer terminal send a bunch of messages as shown below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bin/kafka-console-producer.sh &lt;span class="nt"&gt;--broker-list&lt;/span&gt; localhost:9092 &lt;span class="nt"&gt;--topic&lt;/span&gt; kraft-test
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;message 1
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;message 2
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;message 3
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;hello
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;bye
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the consumer terminal you would see the messages coming as shown below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bin/kafka-console-consumer.sh &lt;span class="nt"&gt;--bootstrap-server&lt;/span&gt; localhost:9092 &lt;span class="nt"&gt;--topic&lt;/span&gt; kraft-test                                                                       
message 1
message 2
message 3
hello
bye
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#congrats"&gt;
  &lt;/a&gt;
  Congrats 😊
&lt;/h1&gt;

&lt;p&gt;You have now learnt how to setup kafka without zookeeper. &lt;strong&gt;This is still an experimental feature and should not be used in production.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-you-are-interested-in-realtime-analytics-using-kafka-and-apache-pinot-feel-free-to-checkout-my-course-in-udemy-by-clicking-on-the-image-below"&gt;
  &lt;/a&gt;
  If you are interested in realtime analytics using kafka and Apache Pinot, feel free to checkout my course in Udemy by clicking on the Image below
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/apache-pinot-a-hands-on-course/?referralCode=67F5295AA86AF59C00E4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YGk9xtCU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2suzfmqpw1ro7x1r3tt.jpg" alt="Apache Pinot a hands on course"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://kafka.apache.org/"&gt;https://kafka.apache.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-500%3A+Replace+ZooKeeper+with+a+Self-Managed+Metadata+Quorum"&gt;https://cwiki.apache.org/confluence/display/KAFKA/KIP-500&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#feel-free-to-connect-with-me-in-linkedin-or-follow-me-in-twitter"&gt;
  &lt;/a&gt;
  Feel free to connect with me in &lt;a href="https://www.linkedin.com/in/aditya1811/"&gt;LinkedIn&lt;/a&gt; or follow me in &lt;a href="https://twitter.com/adityasridhar18"&gt;twitter&lt;/a&gt;.
&lt;/h3&gt;

</description>
      <category>kafka</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>bigdata</category>
    </item>
    <item>
      <title>❄️ Today I released a version control software for 2D/3D artists and graphic designers, made in Angular+Electron</title>
      <author>Sebastian Rath</author>
      <pubDate>Mon, 07 Jun 2021 14:21:15 +0000</pubDate>
      <link>https://dev.to/sebmtl/today-i-released-a-version-control-software-for-2d-3d-artists-and-graphic-designers-made-in-angular-electron-nck</link>
      <guid>https://dev.to/sebmtl/today-i-released-a-version-control-software-for-2d-3d-artists-and-graphic-designers-made-in-angular-electron-nck</guid>
      <description>&lt;p&gt;Today I released the first public beta version of my desktop application called &lt;a href="http://snowtrack.io/"&gt;Snowtrack&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-snowtrack"&gt;
  &lt;/a&gt;
  What is Snowtrack?
&lt;/h2&gt;

&lt;p&gt;Snowtrack is an intuitive, easy-to-use, and super-fast version control software for graphic projects. Its purpose is to make version control accessible to graphic designers and 2D/3D artists with a non-technical workflow.&lt;/p&gt;

&lt;p&gt;In this blog post, I will cover some basics about technical challenges that lay ahead. To get a better understanding of Snowtracks user interface check out the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6TNE_NWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vq9d2lnwf9ahuy719vfo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6TNE_NWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vq9d2lnwf9ahuy719vfo.png" alt="snowtrack-screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-used-to-build-it"&gt;
  &lt;/a&gt;
  What I used to build it
&lt;/h2&gt;

&lt;p&gt;For the UI application I used a combination of Angular and Electron. The underlying version control engine is called &lt;strong&gt;SnowFS&lt;/strong&gt;, an open-source project I developed a fast and simple alternative to &lt;em&gt;Git&lt;/em&gt; and &lt;em&gt;Git LFS&lt;/em&gt;. Feel free to check it out on &lt;a href="https://github.com/snowtrack/snowfs"&gt;GitHub&lt;/a&gt;. A few months ago I wrote a blog post about it &lt;a href="https://dev.to/sebmtl/snowfs-let-s-bring-version-control-to-graphic-projects-10p8"&gt;here&lt;/a&gt; on &lt;em&gt;dev.to&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technical-challenge-no-1"&gt;
  &lt;/a&gt;
  Technical challenge no. 1
&lt;/h2&gt;

&lt;p&gt;Graphic projects can differ in size tremendously. From a single Photoshop file up to a 50 GB file set of 3D scenes, textures, and assets. These project types come with their own set of problems. In the following I want to clear up some misconceptions about the topic around &lt;em&gt;file locking&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#file-locking"&gt;
  &lt;/a&gt;
  File Locking
&lt;/h2&gt;

&lt;p&gt;Take a look at the code snippet below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Process 1
fd = fs.openSync("~/foo", "w");

// Process 2
fd = fs.openSync("~/foo", "w");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Imagine more than one process wants to open the same file at the same time. What do you think will happen?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; It depends on the OS and if you're the maintainer of all processes.&lt;/p&gt;

&lt;p&gt;When you call &lt;code&gt;fs.openSync&lt;/code&gt; NodeJS will forward the call behind the scenes to an OS function as you can see from &lt;a href="https://github.com/libuv/libuv/blob/b201c1a0f0b1ba2365dc285f466ff6fe5307decf/src/unix/fs.c#L380-L389"&gt;this C code&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;ssize_t&lt;/span&gt; &lt;span class="nf"&gt;uv__fs_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uv_fs_t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;flags&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;O_CLOEXEC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function &lt;code&gt;open(..)&lt;/code&gt; is an OS function and available in all operating systems. But the internals of this function differ between Windows, Linux and macOS so I will cover them separately.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#macoslinux"&gt;
  &lt;/a&gt;
  macOS/Linux
&lt;/h1&gt;

&lt;p&gt;Technically, neither macOS nor Linux have true file-locking mechanisms.. Although you can read or write-lock a file using another function called &lt;a href="https://man7.org/linux/man-pages/man2/fcntl.2.html"&gt;&lt;code&gt;fcntl&lt;/code&gt;&lt;/a&gt;, only programs which use this function regard and respect the file lock. This means, any other process which &lt;strong&gt;doesn't&lt;/strong&gt; use &lt;code&gt;fcntl&lt;/code&gt; can acquire a file handle and manipulate it as long as the file permissions allow it. What a bummer.&lt;/p&gt;

&lt;p&gt;That's why file locking on macOS and Linux is also called &lt;a href="https://news.ycombinator.com/item?id=17601581"&gt;"advisory file locking"&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#windows"&gt;
  &lt;/a&gt;
  Windows
&lt;/h2&gt;

&lt;p&gt;Windows is more complicated in that matter. Windows offers two functions to open a file. Either through the Windows API function called &lt;a href="https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea"&gt;CreateFile&lt;/a&gt; (yes, that's really the name to open files),...&lt;/p&gt;

&lt;p&gt;...or through &lt;a href="https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/open?view=msvc-160"&gt;&lt;code&gt;open(..)&lt;/code&gt;&lt;/a&gt;. But the &lt;code&gt;open(..)&lt;/code&gt; function on Windows is a POSIX extension and uses &lt;code&gt;CreateFile&lt;/code&gt; internally as well.&lt;/p&gt;

&lt;p&gt;As we've seen above NodeJS uses &lt;code&gt;open(..)&lt;/code&gt;, but since we know that this is just a wrapper for &lt;code&gt;CreateFile&lt;/code&gt;, let's check out that function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// The low-level open function of Windows.&lt;/span&gt;
&lt;span class="n"&gt;HANDLE&lt;/span&gt; &lt;span class="nf"&gt;CreateFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;LPCSTR&lt;/span&gt;                &lt;span class="n"&gt;lpFileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;DWORD&lt;/span&gt;                 &lt;span class="n"&gt;dwDesiredAccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;DWORD&lt;/span&gt;                 &lt;span class="n"&gt;dwShareMode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;LPSECURITY_ATTRIBUTES&lt;/span&gt; &lt;span class="n"&gt;lpSecurityAttributes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;DWORD&lt;/span&gt;                 &lt;span class="n"&gt;dwCreationDisposition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;DWORD&lt;/span&gt;                 &lt;span class="n"&gt;dwFlagsAndAttributes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;HANDLE&lt;/span&gt;                &lt;span class="n"&gt;hTemplateFile&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;CreateFile&lt;/code&gt; has a parameter called &lt;code&gt;dwShareMode&lt;/code&gt;. A file that is opened with &lt;code&gt;dwShareMode=0&lt;/code&gt; &lt;strong&gt;cannot&lt;/strong&gt; be opened again until its handle has been closed.&lt;/p&gt;

&lt;p&gt;So if you use &lt;code&gt;open(..)&lt;/code&gt; on a file that was already open by another process with &lt;code&gt;CreateFile(…, dwShareMode=0)&lt;/code&gt; you receive this error message:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The process cannot access the file because it is being used by another process&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the other hand, if you use &lt;code&gt;fs.openSync&lt;/code&gt; in NodeJS, or &lt;code&gt;open(..)&lt;/code&gt; in C/C++, to open a file that hasn't been opened yet, you cannot prevent another application from modifying it*.&lt;/p&gt;

&lt;p&gt;* Unless you you use file permissions as a workaround, but that’s not really a file lock.&lt;/p&gt;

&lt;p&gt;To prove this, you will see that our &lt;code&gt;fs.openSync&lt;/code&gt; call executes &lt;code&gt;CreateFile&lt;/code&gt; with the read/write shared flags to comply with the POSIX standard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OZCspf1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0ghmvit3mr3azndpgur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OZCspf1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0ghmvit3mr3azndpgur.png" alt="foo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means on Windows you cannot prevent another application from opening and modifying your file if you don't use &lt;code&gt;CreateFile&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-this-have-to-do-with-snowtrack"&gt;
  &lt;/a&gt;
  What does this have to do with Snowtrack?
&lt;/h2&gt;

&lt;p&gt;Imagine a user saving a big file in a graphic application and while the file is still being written to disk, the user attempts to commit the file change. How does Snowtrack deal with this?&lt;/p&gt;

&lt;p&gt;As we learned, &lt;code&gt;open(..)&lt;/code&gt; has no file locking and most applications don't even follow the file protocol and Snowtrack cannot control how Photoshop, Blender, and co. open and write their files.&lt;/p&gt;

&lt;p&gt;This means the only reliable chance of detecting if a file is still being written by another process is to check prior to a commit if any process on the system has a write handle on that file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;On Windows, I solved this with a custom helper process and and the Windows API of &lt;a href="https://docs.microsoft.com/en-us/windows/win32/rstmgr/about-restart-manager"&gt;Restart Manager&lt;/a&gt; which is mainly used for installers to ensure the files it is about to replace are not open anymore.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On MacOS I invoke the system process &lt;a href="https://ss64.com/osx/lsof.html"&gt;&lt;code&gt;/usr/sbin/lsof&lt;/code&gt;&lt;/a&gt; (list open files) with an inclusion of the working-directory to speed up the execution of this command.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-else"&gt;
  &lt;/a&gt;
  What else?
&lt;/h3&gt;

&lt;p&gt;The development of Snowtrack came with countless technical challenges and I would be happy to share more insights. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;File locking&lt;/em&gt;, &lt;em&gt;Electron/Angular&lt;/em&gt; &lt;em&gt;race conditions&lt;/em&gt;, &lt;em&gt;I/O saturation&lt;/em&gt;, &lt;em&gt;build server&lt;/em&gt;, &lt;em&gt;update mechanisms&lt;/em&gt;, &lt;em&gt;edge cases&lt;/em&gt;, .. with this project I touched many subjects and I would be happy to write a follow-up blog post if you are interested. Let me know in the comments below.&lt;/p&gt;

&lt;p&gt;If you want to support SnowFS, Snowtrack or me then feel free to join me on &lt;a href="https://twitter.com/snowtrack_io"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading :-)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Don't get me started on file-locking.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#addendum-what-about-the-file-in-use-dialog-in-windows"&gt;
  &lt;/a&gt;
  Addendum: What about the &lt;em&gt;"File In Use"&lt;/em&gt; dialog in Windows?
&lt;/h2&gt;

&lt;p&gt;If you are a Windows user you might have seen this error message before:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Okawakut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ah632ge0flhg77dgd4pf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Okawakut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ah632ge0flhg77dgd4pf.png" alt="Untitled"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Windows, or rather NTFS, behaves very different compared to other file systems like &lt;em&gt;HFS+&lt;/em&gt;, &lt;em&gt;APFS&lt;/em&gt;, &lt;em&gt;ext3&lt;/em&gt;, ...&lt;/p&gt;

&lt;p&gt;There is no equivalent to inodes in NTFS and therefore no garbage collection deletes the file if the last file handle to an already deleted file is closed. The &lt;em&gt;File in Use&lt;/em&gt; dialog only indicates, that if any process has a file handle to a given file (no matter how it got opened), it cannot be renamed, moved, or deleted. That does not imply a file lock on the file content.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>typescript</category>
      <category>angular</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Programmatically generating color palettes</title>
      <author>Siddharth</author>
      <pubDate>Mon, 07 Jun 2021 14:09:18 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/programmatically-generating-color-palettes-5cgn</link>
      <guid>https://dev.to/siddharthshyniben/programmatically-generating-color-palettes-5cgn</guid>
      <description>&lt;p&gt;You may have seen color palettes like the &lt;a href="https://material.io/design/color/the-color-system.html#:~:text=2014%20Material%20Design,Design%20color%20palettes"&gt;Material Palette&lt;/a&gt; or the &lt;a href="https://tailwindcss.com/docs/customizing-colors"&gt;tailwind colors&lt;/a&gt;. Well, I wanted to know how these were generated and wanted to generate my own too. Here's how I did it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-base-colors"&gt;
  &lt;/a&gt;
  The Base Colors
&lt;/h2&gt;

&lt;p&gt;This was the easiest one because I could just &lt;a href="https://dev.to/siddharthshyniben/why-hsl-is-better-3inl"&gt;use &lt;code&gt;hsl&lt;/code&gt;&lt;/a&gt; to adjust the hue by a certain step. So we get &lt;code&gt;hsl(0, 50%, 50%)&lt;/code&gt;, &lt;code&gt;hsl(20, 50%, 50%)&lt;/code&gt;, &lt;code&gt;hsl(40, 50%, 50%)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jnGrHh4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kq88u0ojl9zd0kppd6u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jnGrHh4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kq88u0ojl9zd0kppd6u.png" alt="Base colors"&gt;&lt;/a&gt;&lt;/p&gt;
That was easy enough



&lt;h2&gt;
  &lt;a href="#the-rest-of-the-palette"&gt;
  &lt;/a&gt;
  The rest of the palette
&lt;/h2&gt;

&lt;p&gt;Then, I thought of iterating over the saturation to brighten or darken the colors. So I iterated again, adding in 10 to the value, but there was always grey at the start of every color.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nGBsfLo8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5rhodyhl7xwi0dfn9uz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nGBsfLo8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5rhodyhl7xwi0dfn9uz.png" alt="Color palette with grey at the start"&gt;&lt;/a&gt;&lt;br&gt;Not quite right
 &lt;/p&gt;

&lt;p&gt;Tweaking the loop gave me this final palette:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/SiddharthShyniben/embed/JjWLBYe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Not the best, but OK by my standards&lt;/p&gt;

</description>
      <category>css</category>
      <category>design</category>
      <category>javascript</category>
      <category>color</category>
    </item>
    <item>
      <title>Tools for Auditing CSS</title>
      <author>Silvestar Bistrović</author>
      <pubDate>Mon, 07 Jun 2021 14:03:29 +0000</pubDate>
      <link>https://dev.to/starbist/tools-for-auditing-css-54n2</link>
      <guid>https://dev.to/starbist/tools-for-auditing-css-54n2</guid>
      <description>&lt;p&gt;Auditing CSS is not a common task in a developer's everyday life, but sometimes you just have to do it. Maybe it's part of a performance review to identify critical CSS and reduce unused selectors. Perhaps is part of effort to improve accessibility where all the colors used in the codebase evaluated for contrast. It might even be to enforce consistency!&lt;/p&gt;

&lt;p&gt;Whatever the case and whenever that moment arrives, I usually reach for some of the tools I'll cover in the article. But before that, let's see what it even means to "audit" CSS in the first place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#auditing-css-is-hard"&gt;
  &lt;/a&gt;
  Auditing CSS is hard
&lt;/h2&gt;

&lt;p&gt;Generally, code auditing involves analyzing code to find bugs or other irregularities, like possible performance issues. For most programming languages, the concept of auditing code is relatively straightforward: it works or it doesn't. But CSS is a specific language where errors are mostly ignored by browsers. Then there's the fact that you could &lt;a href="https://css-tricks.com/hearts-in-html-and-css/"&gt;achieve the same style in many different ways&lt;/a&gt;. This makes CSS a little tricky to audit, to say the least.&lt;/p&gt;

&lt;p&gt;Finding those errors might be prevented by using an extension for your favorite code editor or setting up a linter or code checker. But that is not what I want to show here, and that is not enough. We could still use &lt;a href="https://css-tricks.com/a-quick-css-audit-and-general-notes-about-design-systems/"&gt;too many&lt;/a&gt; colors, typographic definitions, or z-indexes, all of which could lead to a messy, unmaintainable, unstable CSS codebase.&lt;/p&gt;

&lt;p&gt;To truly audit CSS, we would need to dig deeper and find places that are not considered best practices. To find those places, we could use the following tools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browser-devtools"&gt;
  &lt;/a&gt;
  Browser DevTools
&lt;/h2&gt;

&lt;p&gt;Let's take a look at the Chrome DevTools tools for CSS auditing. I'm using Brave here, which is Chromium-based. You might also want to &lt;a href="https://css-tricks.com/whats-new-in-devtools-2020/"&gt;check out this article by Umar Hansa&lt;/a&gt;, who compiled a whole bunch of great DevTool features that released in 2020.&lt;/p&gt;

&lt;p&gt;If you like inspecting CSS code manually, there is the Inspect tool. Using that, we could see the CSS code applied to a specific element. Using the "Inspect arrow" we could even see additional details about colors, fonts, size and accessibility.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--76ZbrINy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxwjy78w3kkgublc4jwn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--76ZbrINy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxwjy78w3kkgublc4jwn.png" alt="Screenshot of Chrome DevTools."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grid-and-flex-inspector"&gt;
  &lt;/a&gt;
  Grid and Flex inspector
&lt;/h3&gt;

&lt;p&gt;There's a lot of practical details in the DevTools interface, but my favorite is the Grid and Flex inspector. To enable them, go to the Settings (a little gear icon at the top right of the DevTools), click on Experiments, then enable CSS Grid and Flexbox debugging features. Although this tool is mainly used for debugging layout issues, I sometimes use it to quickly determine if CSS Grid or Flexbox is even used on the page at all.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--88KZswce--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bcmychndhrpcefyzorc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--88KZswce--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bcmychndhrpcefyzorc.png" alt="Screenshot of DevTools Grid and Flex inspector."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-overview"&gt;
  &lt;/a&gt;
  CSS Overview
&lt;/h3&gt;

&lt;p&gt;Inspecting CSS is pretty basic, and everything needs to be done manually. Let's look at some more advanced DevTools features.&lt;/p&gt;

&lt;p&gt;CSS Overview is one of them. To enable CSS Overview tool, go to the Settings, click on Experiments, and enable CSS Overview option. To open the CSS Overview panel, you could use the &lt;code&gt;CMD&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;P&lt;/code&gt; shortcut, type "css overview," then select "Show CSS Overview." This tool summarizes CSS properties like colors, fonts, contrast issues, unused declarations, and media queries. I usually use this tool to get the "feel" of how good or poor CSS code is. For example, if there are "50 shades of gray" or too many typographic definitions, that means that the style guide wasn't respected, or one might not even exist.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dt6JHV9_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gi5700ir8zga2i4a9h5w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dt6JHV9_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gi5700ir8zga2i4a9h5w.png" alt="Screenshot of DevTools CSS Overview."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that this tool summarizes the style applied to a specific page, not the whole file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coverage-panel"&gt;
  &lt;/a&gt;
  Coverage panel
&lt;/h3&gt;

&lt;p&gt;The Coverage tool shows the amount and the percentage of code used on the page. To view it, use the &lt;code&gt;CMD&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;P&lt;/code&gt; shortcut, type "coverage," select Show Coverage, and click on the "refresh" icon.&lt;/p&gt;

&lt;p&gt;You could filter only CSS files by typing ".css" in the URL filter input. I usually use this tool to understand the delivery technique of the site. For example, if I see that the coverage is pretty high, I could assume that the CSS file is generated for each page separately. It may not be critical data to know, but sometimes it helps to understand the caching strategy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XQxQsFI8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8lyl8ulnkta5qqpgthzq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XQxQsFI8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8lyl8ulnkta5qqpgthzq.png" alt="Screenshot of DevTools Coverage panel."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rendering-panel"&gt;
  &lt;/a&gt;
  Rendering panel
&lt;/h3&gt;

&lt;p&gt;The Rendering panel is another useful tool. To open the Rendering panel, use &lt;code&gt;CMD&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;P&lt;/code&gt; again, type "rendering" this time, and choose the "Show Rendering" option. This tool has many options, but my favorite ones are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Paint flashing — shows green rectangles when a repaint event happens. I use it to identify areas that take too much time for rendering.&lt;/li&gt;
&lt;li&gt;Layout Shift Regions — shows blue rectangles when the layout shift occurs. To make the most of these options, I usually set the "Slow 3G" preset under the "Network" tab. I sometimes record my screen and then slow down the video to find the layout shifts.&lt;/li&gt;
&lt;li&gt;Frame Rendering Stats — shows the real-time usage of GPU and frames. This tool is handy when identifying heavy animations and scrolling issues.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These tools are something that the regular audit doesn't imply, but I find it essential to understand if the CSS code is performant and doesn't drain a device's energy.&lt;/p&gt;

&lt;p&gt;Other options may be more beneficial for debugging issues, like emulation and disabling of various features, forcing the &lt;code&gt;prefers-color-scheme&lt;/code&gt; feature or print media type, and disabling local fonts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0TMY3l2_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mw15f0sr3kzxesmh3lhg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0TMY3l2_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mw15f0sr3kzxesmh3lhg.png" alt="Screenshot of DevTools Rendering panel."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance-monitor"&gt;
  &lt;/a&gt;
  Performance Monitor
&lt;/h3&gt;

&lt;p&gt;Another tool for auditing the performance CSS code is the Performance Monitor. To enable it, use &lt;code&gt;CMD&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;P&lt;/code&gt; again, type "performance monitor," and select the Show Performance Monitor option. I usually use this tool to see how many recalculations and layouts are triggered when interacting with the page, or when the animation occurs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--coa-isSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jh9dq7z40odncxa6mccm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--coa-isSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jh9dq7z40odncxa6mccm.png" alt="Screenshot of DevTools Performance Monitor."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#perfomance-panel"&gt;
  &lt;/a&gt;
  Perfomance panel
&lt;/h3&gt;

&lt;p&gt;The Performance panel shows a detailed view of all browser events during page load. To enable the Performance tool, do &lt;code&gt;CMD&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;P&lt;/code&gt;, type "performance," select Show Performance, then click the "reload" icon. I usually enable the "Screenshots" and "Web Vitals" options. The most interesting metrics to me are First Paint, First Contentful Paint, Layout Shifts, and Largest Contentful Paint. There is also a pie chart showing the Painting and Rendering time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UotzX0S0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/soz5bzdovu7tve5sn90p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UotzX0S0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/soz5bzdovu7tve5sn90p.png" alt="Screenshot of DevTools Perfomance panel."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DevTools might not be considered a classical auditing tool, but it helps us understand which CSS features are used, the efficiency of the code, and how it performs — all of which are key things to audit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#online-tools"&gt;
  &lt;/a&gt;
  Online tools
&lt;/h2&gt;

&lt;p&gt;DevTools is just one tool that is packed with a lot of features. But there are other available tools we can use to audit CSS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#specificity-visualizer"&gt;
  &lt;/a&gt;
  Specificity Visualizer
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://isellsoap.github.io/specificity-visualizer/"&gt;Specificity Visualizer&lt;/a&gt; shows the specificity of CSS selectors in the codebase. Simply visit the site and paste in the CSS.&lt;/p&gt;

&lt;p&gt;The main chart displays the specificity in relation to the location in the stylesheet. The other two charts show the usage of specificities. I often use this site to find "bad" selectors. For example, if I see many specificities marked as red, I could easily conclude that the code could be better. It is helpful to save the screenshots for reference as you work to improve things.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZBgyrxQt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g432ke9osa1059n6eoz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZBgyrxQt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g432ke9osa1059n6eoz.png" alt="Screenshot of Specificity Visualizer site."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-specificity-graph-generator"&gt;
  &lt;/a&gt;
  CSS Specificity Graph Generator
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://jonassebastianohlsson.com/specificity-graph/"&gt;CSS Specificity Graph Generator&lt;/a&gt; is a similar tool for visualizing specificity. It shows a slightly different chart that might help you see how your CSS selectors are organized by specificity. As it says on the tool's page, "spikes are bad, and the general trend should be towards higher specificity later in the stylesheet." It would be interesting to discuss that further, but it's out of scope for this article. However, Harry Roberts did write about it extensively in his article &lt;a href="https://csswizardry.com/2014/10/the-specificity-graph/"&gt;"The Specificity Graph"&lt;/a&gt; which is worth checking out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ej_0Ix4F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmrxqvtap20xxzt6uhkw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ej_0Ix4F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmrxqvtap20xxzt6uhkw.png" alt="Screenshot of CSS Specificity Graph Generator site."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-stats"&gt;
  &lt;/a&gt;
  CSS Stats
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://cssstats.com/stats"&gt;CSS Stats&lt;/a&gt; is another tool that provides analytics and visualizations for your stylesheets. In fact, &lt;a href="https://css-tricks.com/a-quick-css-audit-and-general-notes-about-design-systems/"&gt;Robin wrote about it&lt;/a&gt; a little while back and showed how he used it to audit the stylesheet at his job.&lt;/p&gt;

&lt;p&gt;All you need to do is to enter the URL of the site and hit &lt;code&gt;Enter&lt;/code&gt;. The information is segmented into meaningful sections, from declaration count to colors, typography, z-indexes, specificity, and more. Again, you might want to store the screenshots for later reference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kg5_cYLR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9gtuusuyct2xr8dv0ud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kg5_cYLR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9gtuusuyct2xr8dv0ud.png" alt="Screenshot of CSS Stats site."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-wallace"&gt;
  &lt;/a&gt;
  Project Wallace
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.projectwallace.com/analyze-css"&gt;Project Wallace&lt;/a&gt; is made by Bart Veneman, who already &lt;a href="https://css-tricks.com/in-search-of-a-stack-that-monitors-the-quality-and-complexity-of-css/"&gt;introduced the project here on CSS-Tricks&lt;/a&gt;. The power of Project Wallace is that it can compare and visualize changes based on imports. That means you could see previous states of your CSS code base and see how your code changes between states. I find this feature quite useful, especially when you want to convince someone that the code is improved. The tool is free for a single project and offers paid plans for more projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MgnP2dOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fbzsjsdwgfjp77s5xng4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MgnP2dOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fbzsjsdwgfjp77s5xng4.png" alt="Screenshot of Project Wallace site."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cli-tools"&gt;
  &lt;/a&gt;
  CLI tools
&lt;/h2&gt;

&lt;p&gt;In addition to DevTools and online tools, there are command line interface (CLI) tools that can help audit CSS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wallace"&gt;
  &lt;/a&gt;
  Wallace
&lt;/h3&gt;

&lt;p&gt;One of my favorite CLI tools is &lt;a href="https://github.com/bartveneman/wallace-cli"&gt;Wallace&lt;/a&gt;. Once installed, type &lt;code&gt;wallace&lt;/code&gt; and then the site name. The output shows everything you need to know about the CSS code for the site. My favorite things to look at are the number of times &lt;code&gt;!important&lt;/code&gt; is used, as well as how many IDs are in the code. Another neat piece of information is the top specificity number and how many selectors use it. These might be red flags for "bad" code.&lt;/p&gt;

&lt;p&gt;What I like the most about this tool is that it extracts all of the CSS code from the site, not only external files, but also inline code as well. That is why the report from CSS Stats and Wallace mismatch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZBgyrxQt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g432ke9osa1059n6eoz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZBgyrxQt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g432ke9osa1059n6eoz.png" alt="Screenshot of Wallace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#csscss"&gt;
  &lt;/a&gt;
  csscss
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://github.com/zmoazeni/csscss"&gt;csscss&lt;/a&gt; CLI tool shows which rules share the same declarations. This is useful for identifying duplicated code and opportunities to reduce the amount of code that's written. I would think twice before doing that as it might not be worthwhile, especially with today's caching mechanisms. It is worth mentioning that csscss requires Ruby.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eQgMuyhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cpqm5q6qpjk7s5ljjuta.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eQgMuyhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cpqm5q6qpjk7s5ljjuta.png" alt="Screenshot of csscss tool."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-useful-tools"&gt;
  &lt;/a&gt;
  Other useful tools
&lt;/h2&gt;

&lt;p&gt;Other CSS tools might not be used for auditing but are still useful. Let's list those, too:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/bartveneman/color-sorter"&gt;Color Sorter&lt;/a&gt; — Sort CSS colors by hue, then by saturation.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/projectwallace/css-analyzer"&gt;CSS Analyzer&lt;/a&gt; — Generate an analysis for a string of CSS.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bartveneman/constyble"&gt;constyble&lt;/a&gt; — This is a CSS complexity linter, based on CSS Analyzer.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://extract-css.now.sh/"&gt;Extract CSS Now&lt;/a&gt; — Get all the CSS from a single webpage.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://content-project-wallace.vercel.app/get-css"&gt;Get CSS&lt;/a&gt; — Scrape all the CSS from a page.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/oyvindeh/ucss"&gt;uCSS&lt;/a&gt; — Crawl websites to identify unused CSS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;CSS is everywhere around us, and we need to consider it a first-class citizen of every project. It does not matter what other people think about your CSS, but what you think about it really does matter. If your CSS is organized and well-written, you will spend less time debugging it and more time developing new features. In an ideal world, we would educate everyone to write good CSS, but that takes time.&lt;/p&gt;

&lt;p&gt;Let today be the day when you start caring for your CSS code.&lt;/p&gt;

&lt;p&gt;I know that auditing CSS isn't going to be fun for everyone. But if you run your code against any of these tools and try to improve even one part of your CSS codebase, then this post has done its job.&lt;/p&gt;

&lt;p&gt;I am thinking about CSS code more and more lately, and I am trying to make more developers write CSS code more respectfully. I even started a new project at &lt;a href="http://css-auditors.com/"&gt;css-auditors.com&lt;/a&gt; (yay for hyphenated domain names!) that's dedicated to auditing CSS.&lt;/p&gt;

&lt;p&gt;If you know of any other tools, let me know in the comments.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>Upgrade your project with linters, prettier &amp; husky</title>
      <author>Kaiwalya Koparkar</author>
      <pubDate>Mon, 07 Jun 2021 13:27:01 +0000</pubDate>
      <link>https://dev.to/kaiwalyakoparkar/upgrade-your-project-with-linters-prettier-husky-cd1</link>
      <guid>https://dev.to/kaiwalyakoparkar/upgrade-your-project-with-linters-prettier-husky-cd1</guid>
      <description>&lt;p&gt;Hello everyone, If you have ever worked on a open source project or any project in general where multiple people collaborate together then you might have faced issues like commit convention does not match. There is no proper/even indentation to the code or simply the difference of &lt;code&gt;' '&lt;/code&gt; and &lt;code&gt;" "&lt;/code&gt; in the code.&lt;br&gt;
This actually makes the codebase messier. Now how can you overcome that? So there are many predifined plugins/libraries which help you in overcoming all the abouve mentioned problems.&lt;br&gt;
So in this blog we are going to see the following things&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ESLint (For generalizing the style standards for js code)&lt;/li&gt;
&lt;li&gt;Prettier (For indenting your codebase evenly)&lt;/li&gt;
&lt;li&gt;Husky (Running the tests and commit convention check in local machine before commiting so that you don't face linting and test fail errors afterwords)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This linting style are of my personal choice. You can tweak in the codes to fit in your linting and style standards :)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#extension-for-vs-code"&gt;
  &lt;/a&gt;
  Extension for VS code
&lt;/h2&gt;

&lt;p&gt;(This is my personal recommendation. It's personal choice)&lt;br&gt;
If you want to follow along then I would recommend you to download it. For downloading you can copy the code given with the name below, into the extension search box and the extension will pop up. Click on install and it will get added to your vs code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Eslint ==&amp;gt; &lt;code&gt;dbaeumer.vscode-eslint&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Prettier ==&amp;gt; &lt;code&gt;esbenp.prettier-vscode&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#initializations-amp-installations"&gt;
  &lt;/a&gt;
  Initializations &amp;amp; Installations
&lt;/h2&gt;

&lt;p&gt;Open the project in the terminal and run the following commands by the same sequence.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the following command (if not clonned and started fresh in local machine)
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Run the following command (This is initialize package.json in your project)
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Run the following command (This will creat node modules and packge-lock.json)
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;--save-dev&lt;/span&gt; eslint eslint-config-prettier eslint-plugin-prettier husky lint-staged prettier
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#eslint"&gt;
  &lt;/a&gt;
  Eslint
&lt;/h2&gt;

&lt;p&gt;Create file &lt;strong&gt;.eslintrc.json&lt;/strong&gt; in the root of the project and paste the following in it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"env"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"es2020"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"eslint:recommended"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"plugin:prettier/recommended"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"linebreak-style"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"unix"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"quotes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"single"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"allowTemplateLiterals"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"semi"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"always"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"prefer-const"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"eqeqeq"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"always"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"curly"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#prettier"&gt;
  &lt;/a&gt;
  Prettier
&lt;/h2&gt;

&lt;p&gt;Now create &lt;strong&gt;.prettierrc&lt;/strong&gt; in the root of the project file and paste the following in the file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"endOfLine"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"useTabs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"singleQuote"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#git-ignore"&gt;
  &lt;/a&gt;
  Git Ignore
&lt;/h2&gt;

&lt;p&gt;Now create &lt;strong&gt;.gitignore&lt;/strong&gt; file in the root of the project and paste the following in the file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/node_modules/
.env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#huskey"&gt;
  &lt;/a&gt;
  Huskey
&lt;/h2&gt;

&lt;p&gt;Now create &lt;strong&gt;.huskyrc&lt;/strong&gt; file in the root of the project and paste the following in it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"hooks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"pre-commit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lint-staged"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now go to package.json and add this at the end before the last &lt;strong&gt;}&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"lint-staged"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"*.js"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"eslint --fix"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --write"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run the following commands one by one in the terminal&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Installing husky to the local project directory
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;husky &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Intall husky package
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx husky &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Initialize husky package and install dependencies
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx husky-init &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create husky folder&lt;/p&gt;

&lt;p&gt;Now go to &lt;strong&gt;pre-commit&lt;/strong&gt; file in the husky folder and delete the &lt;strong&gt;npm test&lt;/strong&gt; command. As we don't have tests as of now&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Installing conventional commit style
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; @commitlint/cli @commitlint/config-conventional
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Add the command to commitlint.config.js file
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"module.exports = {extends: ['@commitlint/config-conventional']}"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; commitlint.config.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Adding husky reference commit message library
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx husky add .husky/commit-msg &lt;span class="s1"&gt;'npx --no-install commitlint --edit "$1"'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it !!! You have setup your project with cool tools which would ease your work as a maintainer or reviewer. This will take care of all of your style guidelines.&lt;/p&gt;

&lt;p&gt;You are all set-up with your js project. If you can to configure it with js follow &lt;a href="https://www.nhcarrigan.com/notes/#/node-ts-config/index"&gt;Nicholas Carrigan Notes&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference-"&gt;
  &lt;/a&gt;
  Reference :
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://youtu.be/FKVjAz505cY"&gt;Eddie Jaoude Youtube Video&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.nhcarrigan.com/notes/#/node-ts-config/index"&gt;Nicholas Carrigan Notes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://commitlint.js.org/#/"&gt;Commit lint org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://typicode.github.io/husky/#/"&gt;Huskey official documentation&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  ❤️ Thank you for reading ❤️
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;🌏 Like | Follow | Share 🌏&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;My Socials:&lt;/strong&gt; &lt;a href="https://twitter.com/kaiwalya_13"&gt;Twitter&lt;/a&gt; | &lt;a href="https://linkedin.com/in/kaiwalyakoparkar"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/kaiwalyakoparkar"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>todayilearned</category>
      <category>programming</category>
      <category>powerfuldevs</category>
    </item>
    <item>
      <title>Vue.js vs. React — Not Your Usual Comparison</title>
      <author>Domagoj Vidovic</author>
      <pubDate>Mon, 07 Jun 2021 13:24:54 +0000</pubDate>
      <link>https://dev.to/domagojvidovic/vue-js-vs-react-not-your-usual-comparison-2omm</link>
      <guid>https://dev.to/domagojvidovic/vue-js-vs-react-not-your-usual-comparison-2omm</guid>
      <description>&lt;p&gt;From the moment I started learning React, I completely fell in love with it.&lt;/p&gt;

&lt;p&gt;I can create beautiful UIs just with JavaScript? Suddenly, I had the power of JavaScript inside HTML and CSS?&lt;/p&gt;

&lt;p&gt;I absolutely loved it. Amazing.&lt;/p&gt;

&lt;p&gt;I used the tool for years, but I couldn’t help myself from observing the Vue.js hype. Apparently, every developer that uses it loves it so much!&lt;/p&gt;

&lt;p&gt;How’s that possible? I love React, but sometimes it makes me frustrated; why is there much less frustration in the Vue.js world?&lt;/p&gt;

&lt;p&gt;I’ve started Vue on a commercial project a few months ago and completely moved from React.&lt;/p&gt;

&lt;p&gt;I was a bit sad when I found out that I had moved from my beloved tool.&lt;/p&gt;

&lt;p&gt;But those frameworks are just tools; we should never make strict career decisions based on them.&lt;/p&gt;

&lt;p&gt;It’s the front-End world — all the tools will vanish soon; new ones will come quickly.&lt;/p&gt;

&lt;p&gt;Now, after tons of experience in frontend development and frameworks like Vue.js, React, and Ember.js — let me explain why I find Vue.js the best.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#one-really-simple-app"&gt;
  &lt;/a&gt;
  One Really Simple App
&lt;/h2&gt;

&lt;p&gt;We’re building a super simple app in both React and Vue.js today. It looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7wOeDoLc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2ki894xuns0kr702ttt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7wOeDoLc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2ki894xuns0kr702ttt.gif" alt="our-really-complex-app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s dive into the code here. React, you come first. This is a project created with &lt;code&gt;create-react-app&lt;/code&gt;; I slightly modified &lt;code&gt;App.js&lt;/code&gt; here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isMagicalAnswerVisible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsMagicalAnswerVisible&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"magicalQuestion"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Which FE framework is the best?
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"magicalButton"&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setIsMagicalAnswerVisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Find out!
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isMagicalAnswerVisible&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"magicalAnswer"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        .....what is life?
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I know React well, so I can understand all of this. But let’s assume I’m don’t know anything about React — only something about FE development and Web in general.&lt;/p&gt;

&lt;p&gt;With that knowledge, I want to know what will be rendered on the screen. When I look at the browser, I see only styled HTML elements there. Not JavaScript.&lt;/p&gt;

&lt;p&gt;And here — everything is JavaScript! How do I know what will actually render on the screen?&lt;/p&gt;

&lt;p&gt;I can see that this &lt;code&gt;function App()&lt;/code&gt; returns some code that looks similar to HTML, but it’s not HTML. What is this?&lt;/p&gt;

&lt;p&gt;Ok. I’ll assume that thing will render.&lt;/p&gt;

&lt;p&gt;What is &lt;code&gt;useState&lt;/code&gt; here? Why do need to assign its result to an array immediately?&lt;/p&gt;

&lt;p&gt;I don’t care so much about the functionality. I want to see the same thing that I will see on the screen. Why is this strange stuff written first?&lt;/p&gt;

&lt;p&gt;What is &lt;code&gt;className&lt;/code&gt;? Why can’t I just use &lt;code&gt;class&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;onClick={() =&amp;gt; setIsMagicalAnswerVisible(true)}&lt;/code&gt; why do I have to do this, can’t I just do &lt;code&gt;onClick={setIsMagicalAnswerVisible(true)}&lt;/code&gt;? Oh, getting some errors now. I will return the arrow function even though I don’t know why.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{isMagicalAnswerVisible &amp;amp;&amp;amp; &amp;lt;p className=”magicalAnswer”&amp;gt;…..what is life?&amp;lt;/p&amp;gt;}&lt;/code&gt; What is this? What’s with the curly braces? Oh, the JS operator &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; is here. &lt;code&gt;p&lt;/code&gt; will render if that’s &lt;code&gt;true&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Imagine a huge component here. I want to see what I will see on the screen. But I can’t, because I have to scroll the first 100 lines of code to find the &lt;code&gt;return&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;I trust the naming of the functions. I believe they do what they say. I don’t want to look at the implementation details first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let me see what will render!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-vuejs-has-to-offer"&gt;
  &lt;/a&gt;
  What Vue.js Has To Offer
&lt;/h2&gt;

&lt;p&gt;This is a project created with the Vue CLI. I modified &lt;code&gt;App.vue&lt;/code&gt; here a bit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"magical-question"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Which FE framework is the best?
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"magical-button"&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"findOutMoreAboutThatMagicalFramework"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Find out!
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"isMagicalAnswerVisible"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"magical-answer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    .....what is life?
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;isMagicalAnswerVisible&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;findOutMoreAboutThatMagicalFramework&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isMagicalAnswerVisible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hmm, what can I see here? Oh, the template! I guess I will see this template on the screen.&lt;/p&gt;

&lt;p&gt;Oh nice, &lt;code&gt;class&lt;/code&gt; is here. Is this an HTML file?&lt;/p&gt;

&lt;p&gt;Hmm, here is &lt;code&gt;@click&lt;/code&gt;, as well as &lt;code&gt;v-if&lt;/code&gt;. A bit strange at first, but actually makes a lot of sense.&lt;/p&gt;

&lt;p&gt;And it’s so simple.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag is here. Wait, is this really not an HTML file? Should I rename the extension from &lt;code&gt;*.vue&lt;/code&gt; to &lt;code&gt;*.html&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Nah, it’s probably fine.&lt;/p&gt;

&lt;p&gt;What’s inside the &lt;code&gt;export default&lt;/code&gt; here?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;data();&lt;/code&gt; what’s this? I’ll need to google it. Oh, it’s just the component’s state.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;methods&lt;/code&gt;? Pretty straightforward.&lt;/p&gt;

&lt;p&gt;I see exactly what will render first. I see something which looks like an HTML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But it’s not. It’s an extremely powerful Vue.js app.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vuejs-looks-so-familiar"&gt;
  &lt;/a&gt;
  Vue.js Looks… So Familiar
&lt;/h2&gt;

&lt;p&gt;I want to style my component. What do I need to do?&lt;br&gt;
I’ll assume that it’s the same as in HTML; I’ll just add a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag at the bottom of a &lt;code&gt;*.vue.js&lt;/code&gt; file. Nah, that can’t work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But it works!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The learning curve for React can be huge, especially if you deal with more complex stuff. Remember the times before hooks? So many Render Props, Higher-Order Components, and a bunch of other stuff.&lt;/p&gt;

&lt;p&gt;How about &lt;code&gt;this.handleClick = this.handleClick.bind(this)&lt;/code&gt;? I know so many React developers who don’t have a clue what’s going on behind the scenes here.&lt;/p&gt;

&lt;p&gt;On the other side, everything is so simple with Vue.js. It feels like an updated version of HTML.&lt;/p&gt;

&lt;p&gt;I’ve worked so much with Vue.js in the last couple of months, and the amount of frustration is minimal.&lt;/p&gt;

&lt;p&gt;I can focus only on the real problem, not the actual implementation.&lt;/p&gt;

&lt;p&gt;I wonder all the time — how is that possible? I grasped the core knowledge in 2 weeks, and I can build almost everything now?&lt;/p&gt;

&lt;p&gt;It wasn’t like this with React. At times, it was really frustrating. But I still loved it just because it’s all JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#everything-in-javascript-is-amazing-but-its-just-not-true"&gt;
  &lt;/a&gt;
  Everything in JavaScript is Amazing, But It’s Just Not True
&lt;/h2&gt;

&lt;p&gt;The Web is composed out of HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;p&gt;If we want to have a deep understanding of it, we mustn’t confuse ourselves with saying that everything is JavaScript.&lt;/p&gt;

&lt;p&gt;With Vue.js, I have a feeling that I learn much more general web-related knowledge, not just Vue-related.&lt;/p&gt;

&lt;p&gt;With React, it was the opposite. You need to break your deep understanding of the web to adopt that mindset.&lt;/p&gt;

&lt;p&gt;The problem is — the web will stay, and React will fade. It’s not a programming language, just a library.&lt;/p&gt;

&lt;p&gt;Facebook will release something new; something better.&lt;/p&gt;

&lt;p&gt;All your knowledge will vanish with React itself.&lt;/p&gt;

&lt;p&gt;Of course, you’re learning a lot of things other than React itself — but with Vue, you’ll learn even more.&lt;/p&gt;

&lt;p&gt;Vue works like the web. It’s a bunch of components, looking like the HTML, emitting the events like the real web.&lt;/p&gt;

&lt;p&gt;Yes, you don’t pass a function as a prop. You catch a bubbled event that your child component emitted.&lt;/p&gt;

&lt;p&gt;Same as in the real web.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#am-i-overexaggerating"&gt;
  &lt;/a&gt;
  Am I overexaggerating?
&lt;/h2&gt;

&lt;p&gt;Ok, I know I am a bit.&lt;/p&gt;

&lt;p&gt;Nevertheless, I still love React. Even though I don’t agree with the JavaScript-only web.&lt;/p&gt;

&lt;p&gt;But I have a feeling that I can learn the fundamentals better with Vue.&lt;/p&gt;

&lt;p&gt;I can focus on the real business problem, not the implementation.&lt;/p&gt;

&lt;p&gt;Everything is so simple, yet so powerful.&lt;/p&gt;

&lt;p&gt;So fun too, because there’s no frustration.&lt;/p&gt;

&lt;p&gt;What do you think about this? I would love to hear something from you.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>react</category>
      <category>javascript</category>
      <category>frontend</category>
    </item>
    <item>
      <title>JavaScript Interview Question #46: Length of JS functions</title>
      <author>Coderslang: Become a Software Engineer</author>
      <pubDate>Mon, 07 Jun 2021 13:20:21 +0000</pubDate>
      <link>https://dev.to/coderslang/javascript-interview-question-46-length-of-js-functions-494f</link>
      <guid>https://dev.to/coderslang/javascript-interview-question-46-length-of-js-functions-494f</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oqhl_vYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oqhl_vYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-46.png" alt="javascript interview question #46"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What's the value of the &lt;code&gt;length&lt;/code&gt; field for JavaScript functions? What will be logged to the console?&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;A lot of JavaScript entities have the &lt;code&gt;length&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;For example, it holds the total number of element in JavaScript arrays.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For strings — it’s the number of characters. Literally, the length of a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;welcomeMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;goodbyeMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Goodbye!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emptyString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;welcomeMessage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;goodbyeMessage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 8&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emptyString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Regular objects don’t have the &lt;code&gt;length&lt;/code&gt; field by default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;32&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But the functions do have it! And it holds not the "length of a function", which is hard to define, but rather the number of function parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;noop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;noop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;ANSWER&lt;/strong&gt;: The &lt;code&gt;length&lt;/code&gt; field holds the number of parameters for all JavaScript functions. Thus, the output is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the function &lt;code&gt;sayHello&lt;/code&gt; has one parameter and the function &lt;code&gt;confirmSubscription&lt;/code&gt; has zero parameters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://js.coderslang.com"&gt;Learn Full-Stack JavaScript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Windows, Ruby and Long Paths</title>
      <author>Gabriel Nagy</author>
      <pubDate>Mon, 07 Jun 2021 12:58:30 +0000</pubDate>
      <link>https://dev.to/puppet/windows-ruby-and-long-paths-3jag</link>
      <guid>https://dev.to/puppet/windows-ruby-and-long-paths-3jag</guid>
      <description>&lt;p&gt;Over the past few months, we've had a long-standing issue related to Puppet on Windows resurface (&lt;a href="https://github.com/puppetlabs/Puppet.Dsc/issues/144"&gt;puppetlabs/Puppet.Dsc#144&lt;/a&gt;). More specifically, Puppet modules with long file paths could not be installed on Windows due to a limitation in the Windows operating system. In short, if a file path surpasses 260 characters, it's open season: the path has to be referred to in a different format, first-party apps like Notepad or File Explorer start to behave erratically, and there's no guarantee what works and what doesn't anymore.&lt;/p&gt;

&lt;p&gt;Buckle up, as we're about to go on a perilous journey where we'll encounter and modify old code, graft resources onto Windows executables, build Ruby with the help of renowned triple-A videogame Hitman&lt;sup&gt;TM&lt;/sup&gt; (I'm 100% serious) and generally have a good time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-1-the-windows"&gt;
  &lt;/a&gt;
  Part 1: The Windows
&lt;/h2&gt;

&lt;p&gt;In theory, Windows's NTFS filesystem supports a maximum of an approximate 32767 characters in a file path. However, there's also a hard limit of 260 characters, &lt;code&gt;MAX_PATH&lt;/code&gt;, which is enforced in all Win32 API file management functions.&lt;/p&gt;

&lt;p&gt;A short Google search for "&lt;a href="https://www.google.com/search?q=windows+long+file+paths"&gt;windows long file paths&lt;/a&gt;" shows that this issue is frequently hit by developers and regular users alike. Since 260 characters is really &lt;em&gt;not&lt;/em&gt; that much for a file path, the limit can be hit easily. Off the top of my head I remember seeing the error when installing the boost libraries on Windows, fortunately I was able to work around it by specifying a shorter install path.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bypassing-the-raw-maxpath-endraw-limitation"&gt;
  &lt;/a&gt;
  Bypassing the &lt;code&gt;MAX_PATH&lt;/code&gt; limitation
&lt;/h3&gt;

&lt;p&gt;If there's one thing I've grown to appreciate from Microsoft, it's their extensive API documentation (I'm looking at you, Apple 👀). For this long path problem they've put together a nice document&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt; detailing how to work around &lt;code&gt;MAX_PATH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The two options are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;specify long paths using the extended-length format (e.g. &lt;code&gt;\\?\D:\very long path&lt;/code&gt;)

&lt;ul&gt;
&lt;li&gt;this format does not support relative paths&lt;/li&gt;
&lt;li&gt;it would also require extensive refactoring throughout any software that decides to implement long path support&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;disable the limitation by changing a registry value (needs at least Windows 10, version 1607)

&lt;ul&gt;
&lt;li&gt;doing this will remove the limitation in the Win32 functions, and will enable them to work with long paths without the extended prefix&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second options comes with a catch, which we failed to notice when we first investigated the problem. In Microsoft's article, just under registry example lies an application manifest:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;application&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"urn:schemas-microsoft-com:asm.v3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;windowsSettings&lt;/span&gt; &lt;span class="na"&gt;xmlns:ws2=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.microsoft.com/SMI/2016/WindowsSettings"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ws2:longPathAware&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/ws2:longPathAware&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/windowsSettings&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/application&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;What we thought needs to happen:&lt;/strong&gt; by conflating other (wrong) sources with Microsoft's official documentation, we came to the (wrong) conclusion that the &lt;code&gt;MAX_PATH&lt;/code&gt; limitation is globally controlled by the registry key, and on a per-application basis through the application manifest. This. Is. Not. True.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What actually needs to happen:&lt;/strong&gt; &lt;em&gt;in addition to&lt;/em&gt; having the registry key set, the application that wants to use long paths &lt;strong&gt;NEEDS&lt;/strong&gt; to embed that application manifest at build time. Microsoft devs are playing it extra safe here, showing how much they care about backwards compatibility. And in a way they're right, who knows how much of the third-party software out there makes wrong assumptions about this limitation so it would only make sense for it to be an opt-in feature.&lt;/p&gt;

&lt;p&gt;This definitely explained why most of the things did not Just Work&lt;sup&gt;TM&lt;/sup&gt; after setting the registry key, but it also gave us hope. Well, we still needed to figure out what the hell an application manifest was, how to embed it in the executable, and if possible to automate all this without the help of the Visual Studio GUI.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#application-manifests-what-do-they-know-do-they-know-things-lets-find-out"&gt;
  &lt;/a&gt;
  Application Manifests! What do they know? Do they know things?? Let's find out!
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;"When in doubt, check what the Python folks &lt;a href="https://github.com/python/cpython/commit/19ab0fd456a79fa1fdfdb543ac423723667cb2d0"&gt;do&lt;/a&gt;." -anonymous proverb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quoting from the Windows documentation, application manifests are XML files that describe and identify the shared and private side-by-side assemblies that an application should bind to at run time.&lt;sup id="fnref2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt; Got it? Me neither, and this was as far as I was willing to go reading documentation 😆. I left it at "put manifest in executable file" for simplicity.&lt;/p&gt;

&lt;p&gt;During my time at Puppet I've grown to be wary with everything regarding Windows development. It couldn't possibly be that hammering an XML file in an executable would magically get rid of the long path limitation &lt;small&gt;&lt;em&gt;(It does)&lt;/em&gt;&lt;/small&gt;. There must be more to it &lt;small&gt;&lt;em&gt;(There wasn't)&lt;/em&gt;&lt;/small&gt;. Other, more complicated theories were running through my head, among them a far-fetched one suggesting that the manifest was somehow read by Microsoft's compiler which in turn optimized the Win32 function calls, making this solution impossible to use with different compilers. I also presumed that this manfest thing is C# specific, hence not applicable to Ruby which is written in C.&lt;/p&gt;

&lt;p&gt;From the comments in the related Ruby bug&lt;sup id="fnref3"&gt;&lt;a href="#fn3"&gt;3&lt;/a&gt;&lt;/sup&gt; I knew that Python had this feature, so I started digging through their source code fully expecting to see path manipulation with the &lt;code&gt;\\?\&lt;/code&gt; prefix for every Win32 API call. Adding to the fact that the Ruby issue was like 5 years old at this point, I was sure that this long paths fix would be a massive effort and likely impossible without knowing the ins and outs of the Ruby C implementation.&lt;/p&gt;

&lt;p&gt;I started going through the Python codebase, but all I could find was &lt;a href="https://github.com/python/cpython/commit/19ab0fd456a79fa1fdfdb543ac423723667cb2d0"&gt;the addition of&lt;/a&gt; the &lt;code&gt;longPathAware&lt;/code&gt; manifest key, which kind of dismantled all my preconceptions about how application manifests work. Maybe having the manifest was indeed enough.&lt;/p&gt;

&lt;p&gt;From another useful Microsoft document,&lt;sup id="fnref4"&gt;&lt;a href="#fn4"&gt;4&lt;/a&gt;&lt;/sup&gt; I found that a manifest can be embedded into an executable using the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mt.exe -manifest MyApp.exe.manifest -outputresource:MyApp.exe;1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To do this for a library, replace the &lt;code&gt;1&lt;/code&gt; at the end with &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As a quick sanity check, I opened up Visual Studio, created a new C project in which I simply called &lt;a href="https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createdirectoryw"&gt;&lt;code&gt;CreateDirectory&lt;/code&gt;&lt;/a&gt; with a long path. The call errored out as the path was too long, but after including the manifest it worked. Granted, it took me &lt;em&gt;way&lt;/em&gt; too long to find out how to include a manifest through the VS user interface, but hey, it worked!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-2-the-ruby"&gt;
  &lt;/a&gt;
  Part 2: The Ruby
&lt;/h2&gt;

&lt;p&gt;Coming from a Linux background, I definitely did &lt;em&gt;not&lt;/em&gt; expect to have so much fun compiling Ruby on Windows (it's been a few weeks since I've done this so the bad memories have mostly gone away).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-this-thing"&gt;
  &lt;/a&gt;
  Building this thing
&lt;/h3&gt;

&lt;p&gt;Ruby on Windows can be compiled with both MinGW/GCC and Visual C++, and I decided to start with the latter as I already had the Visual C++ compiler installed.&lt;/p&gt;

&lt;p&gt;Building Ruby from the git source requires an extra set of commands like &lt;code&gt;bison&lt;/code&gt;, &lt;code&gt;patch&lt;/code&gt; and &lt;code&gt;sed&lt;/code&gt;. To get these on Windows I installed Cygwin and &lt;a href="https://community.chocolatey.org/packages/cyg-get"&gt;cyg-get&lt;/a&gt;, and made sure to have the Cygwin bin path properly set. After that it was just a matter of calling &lt;code&gt;cyg-get&lt;/code&gt; to install each required package.&lt;/p&gt;

&lt;p&gt;Afterwards, Ruby can be built by executing the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;win32\configure.bat
nmake
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately my first Ruby build failed fast with a &lt;code&gt;ucrtbase.dll&lt;/code&gt; error somewhere &lt;a href="https://github.com/ruby/ruby/blob/44cff500a0ad565952e84935bc98523c36a91b06/win32/win32.c#L2612"&gt;here&lt;/a&gt;.  I still have no idea what this code does, I assume it searches for a function in my &lt;code&gt;ucrtbase.dll&lt;/code&gt;. I blamed it on the fact that I'm running Windows builds from the Dev Channel which may have newer versions of DLLs, and I started my search for the perfect &lt;code&gt;ucrtbase.dll&lt;/code&gt;. This is a good moment to plug &lt;a href="https://www.voidtools.com/downloads/"&gt;Everything&lt;/a&gt;, an awesome search tool for Windows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--joJ7o_wJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qajlnnoj91vzq0muiog.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--joJ7o_wJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qajlnnoj91vzq0muiog.png" alt="Everything ucrtbase.dll"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I kid you not, I ended up taking the &lt;code&gt;ucrtbase.dll&lt;/code&gt; from my Hitman installation, copied it to the Ruby directory and prepended the path to the &lt;code&gt;LIB&lt;/code&gt; environment variable. Thanks to Agent 47 I was able to successfully build Ruby with Visual C++.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8lfzvF8N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xy4lh76nj0c80ztzc4cu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8lfzvF8N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xy4lh76nj0c80ztzc4cu.png"&gt;&lt;/a&gt;&lt;br&gt;Look at that unsettling smile! Also, did you know that Agent 47 is &lt;a href="https://hitman.fandom.com/wiki/Agent_47"&gt;partly Romanian&lt;/a&gt;?
  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-to-put-the-manifest-the-visual-c-version"&gt;
  &lt;/a&gt;
  Where to put the manifest: The Visual C++ version
&lt;/h3&gt;

&lt;p&gt;The good part is that I found a spot in the Makefile where &lt;code&gt;mt.exe&lt;/code&gt; &lt;a href="https://github.com/ruby/ruby/blob/93be7a4c6bda8269b3d82ce4cfde6b2bde3b9718/win32/Makefile.sub#L307-L310"&gt;is called&lt;/a&gt;.  The bad part is that &lt;code&gt;mt.exe&lt;/code&gt; is a tool only provided in the Visual C++ toolchain, and the Makefile was Visual C++-specific, so this would only fix half of the problem. At Puppet, we vendor our own Ruby, but we compile it with MinGW/GCC so we wouldn't be able to benefit from the Visual C++ changes.&lt;/p&gt;

&lt;p&gt;Either way, it was late at night and I just wanted to get that manifest inside the Ruby executable, so I started desecrating the Makefile to make it behave the way I wanted. I ended up embedding the manifest into &lt;em&gt;EVERY&lt;/em&gt; executable and library generated by the compiler (including all native extensions), so I might have gone a bit overboard with that. On the bright side, I was able to confirm that long paths now worked!&lt;/p&gt;

&lt;p&gt;Still, it was a piece of ugly code, I shared it in &lt;a href="https://bugs.ruby-lang.org/issues/12551#note-8"&gt;a comment&lt;/a&gt; on the original Ruby ticket, and to my surprise just a few hours later &lt;a href="https://github.com/nobu"&gt;&lt;strong&gt;nobu&lt;/strong&gt;&lt;/a&gt; responded with a cleaner solution which I validated, and looked something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gh"&gt;diff --git a/win32/Makefile.sub b/win32/Makefile.sub
index c88ae6f9d1..22198aa358 100644
&lt;/span&gt;&lt;span class="gd"&gt;--- a/win32/Makefile.sub
&lt;/span&gt;&lt;span class="gi"&gt;+++ b/win32/Makefile.sub
&lt;/span&gt;&lt;span class="p"&gt;@@ -305,9 +305,10 @@&lt;/span&gt; XCFLAGS = -DRUBY_EXPORT $(INCFLAGS) $(XCFLAGS)
 !if $(MSC_VER) &amp;gt;= 1400
 # Prevents VC++ 2005 (cl ver 14) warnings
 MANIFESTTOOL = mt -nologo
&lt;span class="gd"&gt;-LDSHARED_0 = @if exist $(@).manifest $(MINIRUBY) -run -e wait_writable -- -n 10 $@
-LDSHARED_1 = @if exist $(@).manifest $(MANIFESTTOOL) -manifest $(@).manifest -outputresource:$(@);2
-LDSHARED_2 = @if exist $(@).manifest @$(RM) $(@:/=\).manifest
&lt;/span&gt;&lt;span class="gi"&gt;+LDSHARED_0 = $(Q)$(MINIRUBY) -run -e wait_writable -- -n 10 $@
+LDSHARED_1 = $(Q)if exist $(@).manifest (set MANIFEST=$(@).manifest) else (set MANIFEST=$(win_srcdir)/ruby.manifest) &amp;amp;&amp;amp; \
+            call $(MANIFESTTOOL) -manifest ^%MANIFEST% -outputresource:$(@);2
+LDSHARED_2 = $(Q)@$(RM) $(@:/=\).manifest
&lt;/span&gt; !endif
 CPPFLAGS = $(DEFS) $(ARCHDEFS) $(CPPFLAGS)
 !if "$(USE_RUBYGEMS)" == "no"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;small&gt;&lt;em&gt;If you look closely you can see that &lt;code&gt;mt&lt;/code&gt; is called with &lt;code&gt;2&lt;/code&gt; which means it only works for libraries. After some debugging I extended the Makefile with additional commands to make it work for executables as well, but the changes got a bit more complicated than I wanted, so I'll skip over them; especially since the final fix is completely different.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;The remaining issue was to make it also work with GCC.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-to-put-the-manifest-the-gcc-version"&gt;
  &lt;/a&gt;
  Where to put the manifest: The GCC version
&lt;/h3&gt;

&lt;p&gt;After some Google searching I found out that the MinGW toolchain provides &lt;a href="https://sourceware.org/binutils/docs/binutils/windres.html"&gt;&lt;code&gt;windres&lt;/code&gt;&lt;/a&gt;, a tool that can manipulate &lt;a href="https://en.wikipedia.org/wiki/Resource_(Windows)"&gt;Windows resources&lt;/a&gt;. What are Windows resources you might ask? Well, various things that can be embedded into an application, like icons, cursors, fonts, and... application manifests!&lt;/p&gt;

&lt;p&gt;I was able to find &lt;a href="https://github.com/ruby/ruby/blob/44cff500a0ad565952e84935bc98523c36a91b06/cygwin/GNUmakefile.in#L49-L51"&gt;usage of &lt;code&gt;windres&lt;/code&gt;&lt;/a&gt; inside the Ruby Cygwin Makefile:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight make"&gt;&lt;code&gt;&lt;span class="nl"&gt;%.res.@OBJEXT@&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;%.rc&lt;/span&gt;
    &lt;span class="nv"&gt;$(ECHO)&lt;/span&gt; compiling &lt;span class="nv"&gt;$@&lt;/span&gt;
    &lt;span class="nv"&gt;$(Q)&lt;/span&gt; &lt;span class="nv"&gt;$(WINDRES)&lt;/span&gt; &lt;span class="nt"&gt;--include-dir&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;--include-dir&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;D&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;--include-dir&lt;/span&gt; &lt;span class="nv"&gt;$(srcdir)&lt;/span&gt;/win32 &lt;span class="nv"&gt;$&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nl"&gt;%.rc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;$(RBCONFIG) $(srcdir)/revision.h $(srcdir)/win32/resource.rb&lt;/span&gt;
    &lt;span class="nv"&gt;$(ECHO)&lt;/span&gt; generating &lt;span class="nv"&gt;$@&lt;/span&gt;
    &lt;span class="nv"&gt;$(Q)&lt;/span&gt; &lt;span class="nv"&gt;$(MINIRUBY)&lt;/span&gt; &lt;span class="nv"&gt;$(srcdir)&lt;/span&gt;/win32/resource.rb &lt;span class="se"&gt;\&lt;/span&gt;
      &lt;span class="nt"&gt;-ruby_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$(RUBY_INSTALL_NAME)&lt;/span&gt; &lt;span class="nt"&gt;-rubyw_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$(RUBYW_INSTALL_NAME)&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      &lt;span class="nt"&gt;-so_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$(DLL_BASE_NAME)&lt;/span&gt; &lt;span class="nt"&gt;-output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;F&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$(icondirs)&lt;/span&gt; &lt;span class="nv"&gt;$(srcdir)&lt;/span&gt;/win32
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Makefile lingo this means that &lt;code&gt;.rc&lt;/code&gt; files are turned into &lt;code&gt;.res&lt;/code&gt; files, &lt;em&gt;and&lt;/em&gt; &lt;code&gt;.rc&lt;/code&gt; files are created through the execution of the &lt;a href="https://github.com/ruby/ruby/blob/44cff500a0ad565952e84935bc98523c36a91b06/win32/resource.rb"&gt;&lt;code&gt;win32/resource.rb&lt;/code&gt;&lt;/a&gt; Ruby script. In short, for each Ruby executable and library generated by the compiler—&lt;code&gt;ruby.exe&lt;/code&gt;, &lt;code&gt;rubyw.exe&lt;/code&gt;, and the Ruby DLL library)—the script creates a &lt;code&gt;.rc&lt;/code&gt; file containing various things like the Ruby icon and copyright information. After a quick look through the script, I found the place where the manifest can be included, and it was as simple as including the following line in the generated &lt;code&gt;.rc&lt;/code&gt; file, provided that &lt;code&gt;ruby.manifest&lt;/code&gt; contains the appropriate long path manifest:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 RT_MANIFEST ruby.manifest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;small&gt;&lt;em&gt;1 stands for the resource ID, &lt;code&gt;RT_MANIFEST&lt;/code&gt; is the type defined in &lt;code&gt;winuser.h&lt;/code&gt; for application manifests (it maps to the integer &lt;code&gt;24&lt;/code&gt;, which can also be used if you don't have access to the header file), and &lt;code&gt;ruby.manifest&lt;/code&gt; is the file which contains the application manifest.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Below is a simplified version of the &lt;code&gt;win32/resource.rb&lt;/code&gt; code that generates the &lt;code&gt;.rc&lt;/code&gt; files, with the newly added manifest line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="c1"&gt;# base name    extension         file type  desc, icons&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="vg"&gt;$ruby_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="no"&gt;CONFIG&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"EXEEXT"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;'VFT_APP'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'CUI'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ruby_icon&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="vg"&gt;$rubyw_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="no"&gt;CONFIG&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"EXEEXT"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;'VFT_APP'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'GUI'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rubyw_icon&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;ruby_icon&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="vg"&gt;$so_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="s1"&gt;'.dll'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;           &lt;span class="s1"&gt;'VFT_DLL'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'DLL'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dll_icons&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vg"&gt;$output&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="vg"&gt;$output&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;
  &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'.rc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;binmode&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="sr"&gt;/mingw/&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="no"&gt;RUBY_PLATFORM&lt;/span&gt;

    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;EOF&lt;/span&gt;&lt;span class="sh"&gt;
#include &amp;lt;windows.h&amp;gt;
#include &amp;lt;winver.h&amp;gt;

&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;
1 RT_MANIFEST ruby.manifest
VS_VERSION_INFO VERSIONINFO
 FILEVERSION    &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;nversion&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;
 PRODUCTVERSION &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;nversion&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;
 FILEFLAGSMASK  0x3fL
 FILEFLAGS      0x0L
 FILEOS         VOS__WINDOWS32
 FILETYPE       &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;
 FILESUBTYPE    VFT2_UNKNOWN
BEGIN
 BLOCK "StringFileInfo"
 BEGIN
  BLOCK "000004b0"
  BEGIN
   VALUE "Comments",         "&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;RUBY_RELEASE_DATE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sh"&gt;0"
   VALUE "CompanyName",      "http://www.ruby-lang.org/&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sh"&gt;0"
   VALUE "FileDescription",  "Ruby interpreter (&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;desc&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;) &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;sversion&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt; [&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;RUBY_PLATFORM&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;]&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sh"&gt;0"
   VALUE "FileVersion",      "&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;sversion&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sh"&gt;0"
   VALUE "InternalName",     "&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sh"&gt;0"
   VALUE "LegalCopyright",   "Copyright (C) 1993-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;RUBY_RELEASE_DATE&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;/\d+/&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt; Yukihiro Matsumoto&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sh"&gt;0"
   VALUE "OriginalFilename", "&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sh"&gt;0"
   VALUE "ProductName",      "Ruby interpreter &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;sversion&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt; [&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;RUBY_PLATFORM&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;]&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sh"&gt;0"
   VALUE "ProductVersion",   "&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;sversion&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sh"&gt;0"
  END
 END
 BLOCK "VarFileInfo"
 BEGIN
  VALUE "Translation", 0x0, 0x4b0
 END
END
&lt;/span&gt;&lt;span class="no"&gt;EOF&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A tool that helped me a lot in debugging the executables generated by GCC and Visual C++ is &lt;a href="http://www.angusj.com/resourcehacker/"&gt;Resource Hacker&lt;/a&gt;. It can open up executables and show you what resources they contain. This was how I was able to notice that if I set an ID different than 1 to the manifest, GCC would include a default manifest which shadowed my long path manifest, causing the feature to no longer work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L9cCzHKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63bl6odzmuap2yajm68k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L9cCzHKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63bl6odzmuap2yajm68k.png"&gt;&lt;/a&gt;&lt;br&gt;Right above the manifest we just added, there's also the &lt;code&gt;Version Info&lt;/code&gt; resource which we saw in the code above!
  &lt;/p&gt;

&lt;p&gt;I glossed over the build process for MinGW/GCC, because it's... not as complicated and it didn't involve any Hitman DLLs. I did it using the &lt;a href="https://www.msys2.org/"&gt;MSYS2&lt;/a&gt; toolchain which gives you a bash prompt, then compiled Ruby as if I was on Linux.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;After some digging I realized that the &lt;code&gt;resource.rb&lt;/code&gt; script which created the &lt;code&gt;.rc&lt;/code&gt; files with the manifest was also executed during the Visual C++ build, so changing that Ruby script would accomodate both compilers without the need for additional code changes. One thing to note is that with Visual C++, the &lt;a href="https://docs.microsoft.com/en-us/windows/win32/menurc/resource-compiler"&gt;&lt;code&gt;rc&lt;/code&gt;&lt;/a&gt; tool is used instead of &lt;a href="https://sourceware.org/binutils/docs/binutils/windres.html"&gt;&lt;code&gt;windres&lt;/code&gt;&lt;/a&gt; which achieves similar results, and there's no need for &lt;code&gt;mt&lt;/code&gt; anymore.&lt;/p&gt;

&lt;p&gt;I hurried to open a &lt;a href="https://github.com/ruby/ruby/pull/4505"&gt;pull request&lt;/a&gt;, where &lt;a href="https://github.com/nobu"&gt;&lt;strong&gt;nobu&lt;/strong&gt;&lt;/a&gt; again provided feedback and promptly merged it!&lt;/p&gt;

&lt;p&gt;In the end it was one of those few-line fixes with a huge impact. I'm happy it could be done in a few lines of code, and that I had the chance to learn a lot about Windows and Ruby on Windows in the meantime.&lt;/p&gt;

&lt;p&gt;Things I learned by working on this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If something fails to compile, copying random DLLs around might just fix your problems&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Make sure the code you expect to run is actually running&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;if you modify something like a Makefile and nothing appears to change, don't blame your coding skills just yet—find a way to figure out if and when that code path is executed (&lt;code&gt;nmake V=1&lt;/code&gt; may provide more context for Ruby on Windows)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Isolate the problem you want to fix&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;when I was unsure about what the application manifest did, I validated it with the shortest possible C program to confirm its behavior; this way I knew what I was going for when looking through the Ruby codebase&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Find a reliable way to validate your changes&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;for this type of problem, the solution consisted in making the OS aware of the fact that it should enable long paths support, so it's helpful to figure out how that actually happens for an application; i.e. getting as close as possible to how Windows makes this check&lt;/li&gt;
&lt;li&gt;at first I tested my changes by creating directories with paths longer than 260 characters through &lt;code&gt;irb&lt;/code&gt;, but how do you dig deeper when that doesn't work?&lt;/li&gt;
&lt;li&gt;after a lot of trial and error, I found that the most reliable way to validate my changes was to open &lt;code&gt;ruby.exe&lt;/code&gt; in Resource Hacker, and make sure it only included my manifest, with ID 1&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Sleep on it, and don't be afraid to experiment&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;I managed to get a working fix in the first day, but with each following day I changed up the code, and the final fix ended up being in a totally different place than initially expected&lt;/li&gt;
&lt;li&gt;when you feel that something gets more and more complicated and you're not even close to fixing the problem, see if you can approach it in a different way; this made for a way cleaner solution in my case&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;To finish things up, here's an oversimplified diagram of the Ruby on Windows build process:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0FTKWc_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5b5q8m225wzqp6l763h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0FTKWc_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5b5q8m225wzqp6l763h.png" alt="Ruby Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here's the story of Ruby trying to access long paths on Windows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4jVb_2te--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9e7527te83jvz417jqsy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4jVb_2te--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9e7527te83jvz417jqsy.png" alt="Ruby Comic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The End?
&lt;/h2&gt;

&lt;p&gt;If you take &lt;a href="https://github.com/puppetlabs/Puppet.Dsc/issues/144#issuecomment-852667097"&gt;a closer look&lt;/a&gt; at the GitHub issue I referred to in the introduction, this does not fully solve our problem in Puppet. On Windows, we use the &lt;a href="https://github.com/halostatue/minitar"&gt;&lt;strong&gt;minitar&lt;/strong&gt;&lt;/a&gt; gem to build and install Puppet modules (which are just tarballs downloaded from the Puppet Forge). Unfortunately, there is an issue with minitar being unable to unpack the tarballs it creates if the file paths exceed a certain length. This leaves us in a state where the modules in question can be built, but cannot be installed.&lt;br&gt;
The plan is to attempt to fix the issue in minitar, and maybe blog about it, so stay tuned for the next installment in the &lt;em&gt;Long Paths&lt;/em&gt; series!&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=cmd"&gt;https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=cmd&lt;/a&gt; &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/windows/win32/sbscs/application-manifests"&gt;https://docs.microsoft.com/en-us/windows/win32/sbscs/application-manifests&lt;/a&gt; &lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn3"&gt;
&lt;p&gt;&lt;a href="https://bugs.ruby-lang.org/issues/12551"&gt;https://bugs.ruby-lang.org/issues/12551&lt;/a&gt; &lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn4"&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/cpp/build/how-to-embed-a-manifest-inside-a-c-cpp-application"&gt;https://docs.microsoft.com/en-us/cpp/build/how-to-embed-a-manifest-inside-a-c-cpp-application&lt;/a&gt; &lt;a href="#fnref4"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>ruby</category>
      <category>windows</category>
      <category>puppet</category>
    </item>
    <item>
      <title>Rebuilding Promise.all()</title>
      <author>Drew Clements</author>
      <pubDate>Mon, 07 Jun 2021 12:54:15 +0000</pubDate>
      <link>https://dev.to/drewclem/rebuilding-promise-all-52g9</link>
      <guid>https://dev.to/drewclem/rebuilding-promise-all-52g9</guid>
      <description>&lt;p&gt;I was presented with an interesting challenge recently. That challenge was to recreate a method provided by Javascript. Any guesses what that method was? That's right! &lt;code&gt;Promise.all().&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The purpose of the exercise was to get a deeper understanding of how promises in Javascript work. If you've worked with anything &lt;code&gt;Promises&lt;/code&gt; or &lt;code&gt;Async/Await&lt;/code&gt; before, then you know that there are specific things that have to happen in a certain way and order to work- and this is all by design.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gathering-context"&gt;
  &lt;/a&gt;
  Gathering Context
&lt;/h2&gt;

&lt;p&gt;With that said, we can deduce a few things from &lt;code&gt;Promise.all()&lt;/code&gt; and use that to scope what our function needs to do.&lt;/p&gt;

&lt;p&gt;What do we know about &lt;code&gt;Promise.all()&lt;/code&gt;? We know it accepts an array of promises. We know it returns an array of what those promises return. We know the returned array is itself a promise. We also know that it only does that last step &lt;em&gt;if&lt;/em&gt; all promises succeed- so it errors if any of the passed in promises fail.&lt;/p&gt;

&lt;p&gt;Our Definition of Done list could look something like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It accepts an array of promises&lt;/li&gt;
&lt;li&gt;It returns a promise&lt;/li&gt;
&lt;li&gt;It returns an array of those promises' returned value&lt;/li&gt;
&lt;li&gt;It errors if any of the passed in promises fail&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#jumping-into-the-code"&gt;
  &lt;/a&gt;
  Jumping into the Code
&lt;/h2&gt;

&lt;p&gt;We're only going to be writing a single function for this article. If you want to code along then you can pop open a new index.js file and use your terminal to test it once we're done.&lt;/p&gt;

&lt;p&gt;Step one of this is to create the function. Since we're mimic-ing &lt;code&gt;Promise.all()&lt;/code&gt;, we can call this function &lt;code&gt;promiseAll&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;promiseAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not too tough, huh? The next step is to let the function know to expect an array of promises when it is called.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;promiseAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's Definition of Done number one off of our list!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;It accepts an array of promises&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;It returns a promise&lt;/li&gt;
&lt;li&gt;It returns an array of those promises' returned value&lt;/li&gt;
&lt;li&gt;It errors if any of the passed in promises fail&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next we want to set this function up to &lt;em&gt;return&lt;/em&gt; a &lt;em&gt;promise&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;I highlighted those two words because they almost literally tell us what we need to do next. How do you make a function return? How do you create a new Promise?&lt;/p&gt;

&lt;p&gt;If you can answer those two questions, then you already know what our next code snippet should look like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;promiseAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See what I mean? We had to &lt;code&gt;return&lt;/code&gt; a &lt;code&gt;new Promise&lt;/code&gt;. And that's item two of of our checklist&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;It accepts an array of promises&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;It returns a promise&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;It returns an array of those promises' returned value&lt;/li&gt;
&lt;li&gt;It errors if any of the passed in promises fail&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#returning-an-array-of-promises"&gt;
  &lt;/a&gt;
  Returning an Array of Promises
&lt;/h2&gt;

&lt;p&gt;Number 3 on our checklist is where the difficulty ramps up a bit.&lt;/p&gt;

&lt;p&gt;Let's break down what we need.&lt;/p&gt;

&lt;p&gt;We need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;an array we can return&lt;/li&gt;
&lt;li&gt;to get the returned values of the promises passed in&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's take that one step further. We know we're only going to return the promises' values in an array &lt;em&gt;if&lt;/em&gt; they all return successfully.&lt;/p&gt;

&lt;p&gt;Knowing that, lets create an array called &lt;code&gt;successes&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;promiseAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;successes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to somehow get the returned values of all promises passed in. Can you think of a couple of ways we can iterate through each promise? &lt;/p&gt;

&lt;p&gt;We can use a for loop or the &lt;code&gt;.map()&lt;/code&gt; method. Either here would work, but I'm going to use the &lt;code&gt;.map()&lt;/code&gt; since I'm more familiar with it. Read up on .map() &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's map through our &lt;code&gt;promises&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;promiseAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;successes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can do promise stuff within the scope of each individual promise passed in.&lt;/p&gt;

&lt;p&gt;What we'll be doing here is calling each promise individually and using a &lt;code&gt;.then()&lt;/code&gt; to then get access to its returned value.&lt;/p&gt;

&lt;p&gt;We'll also want to add a &lt;code&gt;.catch&lt;/code&gt; to handle any errors. This actually checks off the fourth thing on our list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;promiseAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;successes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember that our larger function is trying to return an &lt;code&gt;array&lt;/code&gt; of returned values. Knowing that, we shouldn't immediately resolve our promises.&lt;/p&gt;

&lt;p&gt;Instead, we'll push our returned values to our successes array we created earlier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;promiseAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;successes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;successes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're getting close!!&lt;/p&gt;

&lt;p&gt;Do you know what should happen next? Let's recap.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our function is returning a promise.&lt;/li&gt;
&lt;li&gt;Our function is set to error if any of the passed in promises fail.&lt;/li&gt;
&lt;li&gt;And we're pushing our returned values to a &lt;code&gt;successes&lt;/code&gt; array.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So what's left? &lt;em&gt;Now&lt;/em&gt; we need to &lt;code&gt;resolve&lt;/code&gt; our promise, but there's a condition with it.&lt;/p&gt;

&lt;p&gt;We only want to resolve &lt;em&gt;if&lt;/em&gt; all passed in promises succeed.&lt;/p&gt;

&lt;p&gt;We can do that with an if statement by comparing the length of our successes array to the length of the promises passed in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;promiseAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;successes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;successes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;successes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;successes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we're making promises we can keep!&lt;/p&gt;

&lt;p&gt;Congratulations! You've just rebuilt the functionality of &lt;code&gt;Promise.all()&lt;/code&gt; and that's the last thing on our list!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;It accepts an array of promises&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;It returns a promise&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;It returns an array of those promises' returned value&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;It errors if any of the passed in promises fail&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#running-our-promise"&gt;
  &lt;/a&gt;
  Running our Promise
&lt;/h2&gt;

&lt;p&gt;Finishing up, let's run our function and see how it works.&lt;/p&gt;

&lt;p&gt;Add these to the bottom of your index.js file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;promiseAll&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, in your terminal-- be sure you're in the right directory- and run &lt;code&gt;node index.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You should see the fruits of your labor console.logged before you!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h3&gt;

&lt;p&gt;There's a small bug in this code. Can you see what it is?&lt;/p&gt;

&lt;p&gt;Given the nature of promises, we can assume that there is a good chance that the promises passed in won't return in the same order as when they're passed in.&lt;/p&gt;

&lt;p&gt;We're using &lt;code&gt;.push()&lt;/code&gt; to add our returned value to the successes array. This means that values will always be inserted to the end of the array, so if promise 2 returns before promise 1, it will actually show up in the first index of the successes array.&lt;/p&gt;

&lt;p&gt;You can actually see this in our example now.&lt;/p&gt;

&lt;p&gt;You would expect to see &lt;code&gt;[2, 1]&lt;/code&gt; since we passed the args in this order &lt;code&gt;(P2, P1)&lt;/code&gt;- but they're actually backwards! What we see in the terminal is &lt;code&gt;[1, 2]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is because P1 resolves immediately, whereas p2 returns a new promise and &lt;em&gt;then&lt;/em&gt; resolves.&lt;/p&gt;

&lt;p&gt;How would you fix this?&lt;/p&gt;

&lt;p&gt;Hint: You &lt;em&gt;could&lt;/em&gt; use the index of each passed in promise and then insert their returned value at that index of the successes array.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>Win Mac Book Pro</title>
      <author>Amit</author>
      <pubDate>Mon, 07 Jun 2021 12:38:19 +0000</pubDate>
      <link>https://dev.to/amitxc/win-mac-book-pro-gec</link>
      <guid>https://dev.to/amitxc/win-mac-book-pro-gec</guid>
      <description>&lt;p&gt;Get Change to Win MacBook Pro&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developereconomics.net/?member_id=KgN1BPYe&amp;amp;lang=en&amp;amp;locale=en"&gt;https://developereconomics.net/?member_id=KgN1BPYe&amp;amp;lang=en&amp;amp;locale=en&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What’s your favourite programming language? Take the new #DeveloperNationSurvey to support your choice! You could win a #SamsungGalaxy S21, a #macbookpro, #GitKraken Pro license, #Amazon vouchers and more! #JavaScript #csharp #python #java #PHP #kotlin&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>kotlin</category>
      <category>flutter</category>
    </item>
  </channel>
</rss>
