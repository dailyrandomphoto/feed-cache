<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Security of AWS CloudHSM Backups | AWS White Paper Summary </title>
      <author>Salah Elhossiny</author>
      <pubDate>Fri, 27 Aug 2021 17:54:31 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/security-of-aws-cloudhsm-backups-aws-white-paper-summary-58d6</link>
      <guid>https://dev.to/awsmenacommunity/security-of-aws-cloudhsm-backups-aws-white-paper-summary-58d6</guid>
      <description>&lt;ul&gt;
&lt;li&gt;AWS CloudHSM clusters provide high availability and redundancy by distributing cryptographic operations across all hardware security modules (HSMs) in the cluster.&lt;/li&gt;
&lt;li&gt;Backup and restore is the mechanism by which a new HSM in a cluster is synchronized.&lt;/li&gt;
&lt;li&gt;This whitepaper provides details on thecryptographic mechanisms supporting backup and restore functionality, and the security mechanisms protecting the Amazon Web Services (AWS)-managed backups.&lt;/li&gt;
&lt;li&gt;It also provides in-depth information on how backups are protected in all three phases of the CloudHSM backup lifecycle process: Creation, Archive, and Restore.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For the purposes of this whitepaper, it is assumed that you have a basic understanding of AWS CloudHSM and cluster architecture.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS offers two options for securing cryptographic keys in the AWS Cloud: AWS Key Management Service (AWS KMS) and AWS CloudHSM.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS KMS is a managed service that uses hardware security modules (HSMs) to protect the security of your encryption keys. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS CloudHSM delivers fully managed HSMs in the AWS Cloud, which allows you to add secure, validated key storage and high-performance crypto acceleration to your AWS applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CloudHSM offers you the option of single-tenant access and control over your HSMs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CloudHSM is based on Federal Information Processing Standards (FIPS) 140-2 Level 3 validated hardware.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CloudHSM delivers fully managed HSMs in the AWS Cloud. CloudHSM delivers all the benefits of traditional HSMs including secure generation, storage, and management of cryptographic keys used for data encryption that are controlled and accessible only by you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HSM capacity can be scaled quickly by adding and removing HSMs from your cluster on demand. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The backup and restore functionality of CloudHSM is what enables scalability, reliability, and high availability in CloudHSM. A key aspect of the backup and restore feature is a secure backup protocol that CloudHSM uses to back up your cluster. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This paper takes an in-depth look at the security mechanisms in place around this feature.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#aws-cloudhsm-managed-by-aws-controlled-by-you"&gt;
  &lt;/a&gt;
  AWS CloudHSM: Managed by AWS, controlled by you
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;AWS CloudHSM provides HSMs in a cluster. A cluster is a collection of individual HSMs that AWS CloudHSM keeps in sync. &lt;/li&gt;
&lt;li&gt;You can think of a cluster as one logical HSM. When you perform a key generation task or operation on one HSM in a cluster, the other HSMs in that cluster are automatically kept up to date. &lt;/li&gt;
&lt;li&gt;Each HSM in a cluster is a single-tenant HSM under your control. &lt;/li&gt;
&lt;li&gt;At the hardware level, each HSM includes hardware-enforced isolation of crypto operations and key storage. &lt;/li&gt;
&lt;li&gt;Each HSM runs on dedicated cryptographic cores.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each HSM appears as a network resource in your virtual private cloud (VPC).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS manages the HSM on your behalf, performing functions such as health checks, backups, and synchronization of HSMs within a cluster&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;However, you alone control the user accounts, passwords, login policies, key rotation procedures, and all aspects of configuring and using the HSMs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The implication of this control is that your cryptographic data is secure from external compromise. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is important to financial applications subject to PCI regulations, healthcare applications subject to HIPAA regulations, and streaming video solutions subject to contractual DRM requirements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You interact with the HSMs in a cluster via the AWS CloudHSM client.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Communication occurs over an end-to-end encrypted channel. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS does not have visibility into your communication with your HSM, which occurs within this end-to-end encrypted channel.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#high-availability"&gt;
  &lt;/a&gt;
  High availability
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CloudHSM makes scalability and high availability simple without compromising security.&lt;/li&gt;
&lt;li&gt;When you use CloudHSM you begin by creating a cluster in a particular AWS Region. &lt;/li&gt;
&lt;li&gt;A cluster can contain multiple individual HSMs. For idle workloads, you can delete all HSMs and simply retain the empty cluster. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;For production workloads, you should have at least two HSMs spread across multiple Availability Zones. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CloudHSM automatically synchronizes and load balances the HSMs within a cluster.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The CloudHSM client load-balances cryptographic operations across all HSMs in the cluster based on the capacity of each HSM for additional processing. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a cluster requires additional throughput, you can expand your cluster by adding more HSMs through a single API call or a click in the CloudHSM console.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you expand a cluster, CloudHSM automatically provisions a new HSM as a clone of the other HSMs in the cluster. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is done by taking a backup of an existing HSM and restoring it to the newly added HSM. When you delete an HSM from a cluster, a backup is automatically taken. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This way, when you create a new HSM later, you can pick up where you left off. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Should an HSM fail for any reason, the service will automatically replace it with a new, healthy HSM. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This HSM is restored from a backup of another HSMs in the cluster if available. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Otherwise, the new HSM is restored from the last available backup taken for the cluster.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cloudhsm-cluster-backups"&gt;
  &lt;/a&gt;
  CloudHSM cluster backups
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Backups are initiated, archived, and restored by CloudHSM. &lt;/li&gt;
&lt;li&gt;A backup is a complete, encrypted snapshot of the HSM.&lt;/li&gt;
&lt;li&gt;Each AWS-managed backup contains the entire contents of the HSM, including keys, certificates, users, policies, quorum settings, and configuration options.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This includes:&lt;/p&gt;

&lt;p&gt;• Certificates on the HSM, including the cluster certificate.&lt;br&gt;&lt;br&gt;
• All HSM users (COs, CUs, and AU).&lt;br&gt;&lt;br&gt;
• All key material on the HSM.&lt;br&gt;&lt;br&gt;
• HSM configurations and policies.  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#archiving-a-backup"&gt;
  &lt;/a&gt;
  Archiving a backup
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;CloudHSM stores the cluster backups in a service-controlled Amazon S3 location in the same AWS Region as your cluster.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DyoPJ63Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/130732655-561b5e18-acf2-496b-a00e-0650b2eacee8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DyoPJ63Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/130732655-561b5e18-acf2-496b-a00e-0650b2eacee8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#restoring-a-backup"&gt;
  &lt;/a&gt;
  Restoring a backup
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Backups are used in two scenarios: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When you provision a new cluster using an existing backup.&lt;/li&gt;
&lt;li&gt;When a second (or subsequent) HSM is added to a cluster, or when CloudHSM automatically replaces an unhealthy HSM.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In both scenarios, the backup is restored to a newly created HSM.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;During restoration, the backup is decrypted within an HSM. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The decryption relies on a set of keys available only within an authentic hardware instance from the original manufacturer, installed in the AWS Cloud.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Note that while CloudHSM manages backups, the service does not have any access to the data, cryptographic material, user information, and the keys encapsulated within the backup. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Specifically, AWS has no way to recover your keys if you lose your access credentials to log in to the HSM.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#security-of-backups"&gt;
  &lt;/a&gt;
  Security of backups
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The CloudHSM backup mechanism has been validated under &lt;a href="https://csrc.nist.gov/csrc/media/projects/cryptographic-module-validation-program/documents/security-policies/140sp2850.pdf"&gt; FIPS 140-2 Level 3 &lt;/a&gt; .&lt;/li&gt;
&lt;li&gt;A backup taken by an HSM configured in FIPS-mode cannot be restored to an HSM that is not also in FIPS-mode.&lt;/li&gt;
&lt;li&gt;An HSM in FIPS-mode is running production firmware provided by the manufacturer and signed with a FIPS production key.&lt;/li&gt;
&lt;li&gt;This ensures other parties cannot forge the firmware.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#key-hierarchy"&gt;
  &lt;/a&gt;
  Key hierarchy
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;A backup is encrypted within the HSM before it is provided to CloudHSM for archival. The backup is encrypted using a backup encryption key, described in the following section.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7BCuCy12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/130733652-3c935b13-782f-4ae2-bee7-1549153de7d7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7BCuCy12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/130733652-3c935b13-782f-4ae2-bee7-1549153de7d7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#manufacturers-key-backup-key-mkbk"&gt;
  &lt;/a&gt;
  Manufacturer’s key backup key (MKBK)
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The manufacturer’s key backup key (MKBK) exists in the HSM hardware provided by the manufacturer.&lt;/li&gt;
&lt;li&gt;The MKBK cannot be accessed or used by any user or for any purpose other than the generation of the backup encryption key.&lt;/li&gt;
&lt;li&gt;Specifically, AWS does not have access to or visibility into the MKBK.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#aws-key-backup-key-akbk"&gt;
  &lt;/a&gt;
  AWS key backup key (AKBK)
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The AWS key backup key (AKBK) is securely installed by the CloudHSM service when the hardware is placed into operation within the CloudHSM fleet.&lt;/li&gt;
&lt;li&gt;This key is unique to hardware installed by AWS within our CloudHSM infrastructure.&lt;/li&gt;
&lt;li&gt;The AKBK is generated securely within an offline FIPS-compliant hardware security module, and loaded under two-person control into newly commissioned CloudHSM hardware.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#backup-encryption-key-bek"&gt;
  &lt;/a&gt;
  Backup Encryption Key (BEK)
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The backup of the HSM is encrypted using a backup encryption key (BEK). &lt;/li&gt;
&lt;li&gt;The BEK is an AES-256 key that is generated within the HSM when a backup is requested. &lt;/li&gt;
&lt;li&gt;The HSM uses the BEK to encrypt its backup. &lt;/li&gt;
&lt;li&gt;The encrypted backup includes a wrapped copy of the BEK.&lt;/li&gt;
&lt;li&gt;The BEK is wrapped with an AES 256-bit wrapping key using a FIPS-approved
AES key wrapping method.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#refernces"&gt;
  &lt;/a&gt;
  Refernces
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://d1.awsstatic.com/whitepapers/Security/security-of-aws-cloudhsm-backups.pdf"&gt; Original paper &lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>security</category>
      <category>cloud</category>
    </item>
    <item>
      <title>DOM Explained</title>
      <author>Anamika</author>
      <pubDate>Fri, 27 Aug 2021 17:44:34 +0000</pubDate>
      <link>https://dev.to/anamkaa_/dom-explained-12dd</link>
      <guid>https://dev.to/anamkaa_/dom-explained-12dd</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-dom"&gt;
  &lt;/a&gt;
  What is DOM?
&lt;/h3&gt;

&lt;p&gt;DOM stands for Document Object Model. It is an programming interface for web documents. It shows how document content is accessed and modified. It defines the logical structure of documents. It represents the document as nodes and objects, such that any programming language can interact with the page.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#dom-structure"&gt;
  &lt;/a&gt;
  DOM Structure
&lt;/h5&gt;

&lt;p&gt;It can be depicted as a tree-like structure. The objects are organized in a hierarchical manner. It follows as :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Window object &lt;/li&gt;
&lt;li&gt;Document object &lt;/li&gt;
&lt;li&gt;Form object &lt;/li&gt;
&lt;li&gt;Form control elements
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--duYkCLyd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://th.bing.com/th/id/R.e5ec90a049ac4d89cfe6f473f5e90a62%3Frik%3D2vAe4wP0zSwDrw%26riu%3Dhttp%253a%252f%252fwww.tutorialspoint.com%252fimages%252fhtml-dom.jpg%26ehk%3Dro8ZmiKVyvunucBegQ%252fCWt%252bbTEBzRMdYdCz28fipr5s%253d%26risl%3D%26pid%3DImgRaw%26r%3D0" alt="DOM structure"&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#html-dom"&gt;
  &lt;/a&gt;
  HTML DOM
&lt;/h3&gt;

&lt;p&gt;Whenever a web document is loaded, the browser creates &lt;strong&gt;D&lt;/strong&gt;ocument &lt;strong&gt;O&lt;/strong&gt;bject &lt;strong&gt;M&lt;/strong&gt;odel of the page. It can be modified with a scripting language such as javascript.&lt;br&gt;
HTML DOM is standard object model and programming interface for HTML. It helps to define:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML elements as &lt;strong&gt;objects&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Properties&lt;/strong&gt; of those elements &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Methods&lt;/strong&gt; to access html elements &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Events&lt;/strong&gt; for those elements&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#how-html-dom-is-constructed"&gt;
  &lt;/a&gt;
  How HTML DOM is constructed?
&lt;/h4&gt;

&lt;p&gt;It is characterized as a hierarchical tree, where each element in the document tree is called Node.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J4tyVQ2b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://visionofgeek.com/wp-content/uploads/HTML-DOMDocument-Object-Model-1080x805.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J4tyVQ2b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://visionofgeek.com/wp-content/uploads/HTML-DOMDocument-Object-Model-1080x805.png" alt="HTML DOM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DOM nodes represents all the elements of the document. The document node is called the root node and it contains other nodes. The head and body elements are called parent nodes. The parent nodes also contain other elements inside them , which are considered child nodes.&lt;br&gt;
The elements having same hierarchical level are considered to be sibling nodes, here the head and body can be said to be sibling nodes.&lt;br&gt;
Some nodes are self closing like img tag. These are called void nodes and they cannot be a parent node.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#dom-methods"&gt;
  &lt;/a&gt;
  DOM Methods
&lt;/h4&gt;

&lt;p&gt;The document object represents our web page and to access any element of our HTML page, we need to access the document object.&lt;br&gt;
DOM Methods are used to access and manipulate HTML elements.&lt;/p&gt;

&lt;p&gt;Few of them are :&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#finding-html-elements"&gt;
  &lt;/a&gt;
  Finding HTML Elements
&lt;/h5&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;METHOD&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;document.getElementById(id)&lt;/td&gt;
&lt;td&gt;Find elements by id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;document.getElementByTagName(name)&lt;/td&gt;
&lt;td&gt;Find elements by tag name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;document.getElementByClassName(name)&lt;/td&gt;
&lt;td&gt;Find elements by class name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;document.querySelector()&lt;/td&gt;
&lt;td&gt;Find elements by css selector and returns first element that matches the selector&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;document.querySelectorAll()&lt;/td&gt;
&lt;td&gt;Find elements by css selector and returns a node list collection of all matching elements.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YJVHRI3h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/VvYp5XsB/image5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YJVHRI3h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/VvYp5XsB/image5.png" alt="method example"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#dom-properties"&gt;
  &lt;/a&gt;
  DOM Properties
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#changing-html-elements"&gt;
  &lt;/a&gt;
  Changing HTML Elements
&lt;/h5&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;PROPERTY&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;element.innerText = new text&lt;/td&gt;
&lt;td&gt;Change inner text of an HTML element&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element.innerHTML = new HTML content&lt;/td&gt;
&lt;td&gt;Change inner HTML of an element&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element.style.property = new style&lt;/td&gt;
&lt;td&gt;Change style of an HTML element&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qOJ174p1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/sXYqYnbF/image6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qOJ174p1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/sXYqYnbF/image6.png" alt="property example"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 27 Aug 2021 17:41:08 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-5g7c</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-5g7c</guid>
      <description>&lt;p&gt;Hi everyone! &lt;/p&gt;

&lt;p&gt;Looking back on this past week, what was something you were proud of accomplishing?&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Staying hydrated... or whatever else might spark joy ❤️ &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Happy Friday! Take a victory lap — you deserve it! 🏃‍♀️ &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JFnZWgzQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/QMozgDyV3CutNj2cVs/giphy.gif%3Fcid%3Decf05e47qtcrrh35204aut154y2ju478zogg8ziovpfer81a%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JFnZWgzQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/QMozgDyV3CutNj2cVs/giphy.gif%3Fcid%3Decf05e47qtcrrh35204aut154y2ju478zogg8ziovpfer81a%26rid%3Dgiphy.gif%26ct%3Dg" alt="Cool GIF"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>Do you know these Software concepts? </title>
      <author>femolacaster</author>
      <pubDate>Fri, 27 Aug 2021 17:28:18 +0000</pubDate>
      <link>https://dev.to/femolacaster/do-you-know-these-software-concepts-ppl</link>
      <guid>https://dev.to/femolacaster/do-you-know-these-software-concepts-ppl</guid>
      <description>&lt;p&gt;We would be taking a look at some software concepts in this series. Some in the field of software design, network automation, database design, and engineering, and IT philosophy. &lt;/p&gt;

&lt;p&gt;The focus would be more on concepts that have evolved, unconventional concepts, and unpopular concepts maybe due to new trends and you may never have to know or worry about them any longer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A. Schrodinger's Tables&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eB_L3kRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53uw5bfbtvz5z4x6yy7r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eB_L3kRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53uw5bfbtvz5z4x6yy7r.jpg" alt="Schrodinger MySQL Cat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Schrodinger’s experiment brought about a spark in quantum physics. Just like me, I guess Schrodinger was a helpless cat lover. The experiment involved a cat, flask of poison, and radioactive source placed in a box. If radioactivity is detected by an internal monitor, the flask is shattered which releases a poison that kills the cat. But after some time, when the box is looked at, the cat appears either alive or dead when in fact it is alive and dead simultaneously. Magical and supernatural I must say. But the Schrodinger’s rule not only occurs in cats but also in databases and database tables. There is a possibility where the database can both be alive and dead at the same time. So next time your database goes missing and presents at the same time, then it could be Shrondiger and his cats. The fix is to replace the ibdata1 and ib type files for MySQL but you can read more on the probable causes and fixes &lt;a href="http://www.conroyp.com/2014/02/23/schrodingers-mysql-table-does-it-exist/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;B. The Promiscuous CPU&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nd409nfP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a20ojkxzqfsly4w2vlu9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nd409nfP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a20ojkxzqfsly4w2vlu9.jpg" alt="The promiscuous CPU"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is in the field of network automation that asynchronicity matters most. Network devices need to get multiple packets at the same time. But sometimes, the CPU can get promiscuous requests which are the requests it doesn’t need.  Right when the CPU enters this stage, it enters the promiscuous mode. So before you start the casting of aspersion on the CPU, be aware that these promiscuous requests are involuntary. And the CPU didn’t mean to cheat.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C. Unix theory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xk29qDM6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/js77edrtaq1waem78cez.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xk29qDM6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/js77edrtaq1waem78cez.png" alt="Unix theory"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We may have heard of the service-oriented architecture, DRY, and other theories that focus on reusability. The Unix theory is one of the philosophies that gave rise to such philosophical evolution. &lt;/p&gt;

&lt;p&gt;In summary, it says:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Write programs that do one thing and do it well.&lt;/li&gt;
&lt;li&gt;Write programs to work together.&lt;/li&gt;
&lt;li&gt;Write programs to handle text streams, because that is a universal interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The UNIX theory has been a helping theory for the growth of the open-source community because not only were programs built to work together, but even people now worked better together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;D. Principle of least astonishment:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XrFs4vFm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dpp5n5uwhr6t3gezw2u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XrFs4vFm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dpp5n5uwhr6t3gezw2u.jpg" alt="Principle of least astonishment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It proposes that a component of a system should behave in a way that most users will expect it to behave i.e. "if a necessary feature has a high astonishment factor, it may be necessary to redesign the feature." The rule tries to improve the learnability and memorability experience of users by proposing that all extensions and enhancement should be of a gradual learning curve than a steep and 🏃‍♂️ learning curve. So, if you want your users to stay even during disruption, keep this rule at the back of your mind.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;E. Principle of least privilege:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hTzDeEKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guo5itv2j91gdb6wt520.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hTzDeEKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guo5itv2j91gdb6wt520.jpg" alt="principle of least privilege"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Better if the least access control is given than extra unnecessary access. This security rule is to achieve confidentiality, integrity, and availability. The least privilege rule addresses the second A(&lt;strong&gt;authorization&lt;/strong&gt;) in the triple-A(&lt;strong&gt;AAA&lt;/strong&gt;) information security rule.  So, besides verifying the identity of the user(&lt;strong&gt;authentication&lt;/strong&gt;), it is important to know what the user can do(&lt;strong&gt;authorization&lt;/strong&gt;), as well as knowing what individual actions the user has taken(&lt;strong&gt;accounting&lt;/strong&gt;). So next time you want to connect an application with root access, think of less-privileged.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
      <category>database</category>
    </item>
    <item>
      <title>#100daysofcode [Day-14]
</title>
      <author>Al Siam</author>
      <pubDate>Fri, 27 Aug 2021 17:18:56 +0000</pubDate>
      <link>https://dev.to/alsiamworld/100daysofcode-day-14-48a9</link>
      <guid>https://dev.to/alsiamworld/100daysofcode-day-14-48a9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day14"&gt;
  &lt;/a&gt;
  100daysofcode [Day-14]
&lt;/h1&gt;

&lt;p&gt;I'm trying to gain more knowledge about ES6 and today I've learnt es6 filter, destructuring, map, forEach and something more. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YNGqnWe_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axhgij23gt4hg0lgiu95.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YNGqnWe_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axhgij23gt4hg0lgiu95.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Reasons To Use Recursion and How It Works</title>
      <author>Manar Abdelkarim</author>
      <pubDate>Fri, 27 Aug 2021 17:04:19 +0000</pubDate>
      <link>https://dev.to/manarabdelkarim/why-and-how-to-solve-iterative-problems-recursively-the-smart-coding-4nj2</link>
      <guid>https://dev.to/manarabdelkarim/why-and-how-to-solve-iterative-problems-recursively-the-smart-coding-4nj2</guid>
      <description>&lt;h4&gt;
  &lt;a href="#hello-engineers"&gt;
  &lt;/a&gt;
  Hello Engineers
&lt;/h4&gt;

&lt;p&gt;Today, I will to about recursion in what, why, and how.&lt;br&gt;
What is recursion , why to use it, and how to solve problems with it.&lt;br&gt;
The examples will be in Python since Python is easy to understand and close to the algorithms ..&lt;/p&gt;

&lt;p&gt;Shall we start ? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ft0yabiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.giphy.com/media/H4DjXQXamtTiIuCcRU/200.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ft0yabiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.giphy.com/media/H4DjXQXamtTiIuCcRU/200.gif" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-recursion"&gt;
  &lt;/a&gt;
  What is recursion?
&lt;/h3&gt;

&lt;p&gt;A more complex definition of recursion is: a technique that solve a problem by solving a smaller problems of the same type . We can simplify the definition by saying that recursion is a function that call it self directly or indirectly .. don't worry for now, it will be much clearer when we start writing our examples.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#why-to-use-recursion"&gt;
  &lt;/a&gt;
  Why to use recursion?
&lt;/h3&gt;

&lt;p&gt;I choose this question over "when to use recursion" because many programming learners who learnt recursion wanted to know why to use it since that all the problems we can solve it in recursion , we can also solve it in normal iterative loops .. so here is my answer:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1- Learning recursion makes you a better programmer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Learning and practicing recursion help you improve your problem solving skills because you will learn how to break down bit problems into smaller ones. Also, you will learn the principle of stack in data structure (A stack is an abstract data type that holds an ordered, linear sequence of items), the principle of LIFO (Last In Last Out) and how to make use of the call stack.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2- Using recursion makes the code clearer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recursion code is simpler and shorter than an iterative code. The recursion function will be written in less lines of code and will be easier for debugging.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3- Recursion is data structure's best friend:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As I mentioned above, recursive functions use the call stack of the interpreter. So, we can make use of the existing of call stack instead of writing code and creating a stack or use any external  libraries. which means we can use recursion whenever we want to use stack. two good implementation examples for using recursion in data structures are trees and graphs in-depth traversal.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-write-recursive-functions"&gt;
  &lt;/a&gt;
  How to write recursive functions?
&lt;/h3&gt;

&lt;p&gt;Before writing a recursive function ,let's talk about few factors to determine :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1- Determine the size factor:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The size factor means that your problem should not exceed your static value or your memory allocation for that particular program. In simple language your program should not have large numbers and not too many iterations. Because again, recursion functions use call stack and the call stack has a limit. When the stack becomes full the program will crash and you will have an error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--la5xXZ9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nabxiju4v37hs5pnbq81.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--la5xXZ9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nabxiju4v37hs5pnbq81.png" alt="recursionerror"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2- Determine the base case/s:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The base cause could be a single or multiple values depending on your program. I will use a while loop here to explain the base case .. if we want to write a program that print "hello world" 5 times using while, we will write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def display_hello(i):
    while(i &amp;gt; 0):
        print("hello world")
        i -=1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The base cause determines when the loop will stop .. in our example the base cause is i=0 because when the value of i becomes zero the looping will break and stop  &lt;/p&gt;

&lt;p&gt;Base case in recursion is that particular value that if we reach we want to stop recalling of the function and start removing and executing every function in the call stack.   &lt;/p&gt;

&lt;p&gt;Not having a base cause will make the function call itself until the call stack becomes full and the program crashes, and having a wrong base cause will result to a wrong output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hDY5tZ1f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8zs2lqtl47178g04q46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hDY5tZ1f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8zs2lqtl47178g04q46.png" alt="base cause"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3- Determine the general case/s:&lt;/strong&gt;&lt;br&gt;
General cause is the one where the problem expressed as a small version of itself.  Which means, the program will continue iterate the general causes until it reaches the base cause &lt;/p&gt;

&lt;p&gt;In our example above, when considered i=0 as the base cause and we send 5 as a parameter , then we can think of:&lt;br&gt;
i=1, i=2, i=3, i=4, and i=5 as the general causes.&lt;/p&gt;

&lt;p&gt;Now, let's Write a recursive function and trace it using the previous problem:&lt;/p&gt;

&lt;p&gt;We want to write a function that write "hello world" 5 times:&lt;/p&gt;

&lt;p&gt;Let's analyze the problem:&lt;/p&gt;

&lt;p&gt;The function will check the base cause, if the current case doesn't match the base cause then the function will call itself one time  .. So the increasing is a liner (it could be O(n)) (it will be propaply safe for the call stack size)&lt;br&gt;
let's try writing our function now by using our while loop example&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1- The base cause -&amp;gt; i =0&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def display_hello(i):
   if i&amp;gt;0:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2- The print command -&amp;gt; print("hello world")&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def display_hello(i):
   if i&amp;gt;0:
       print("hello world")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3- The changes in every iteration -&amp;gt; i-=1&lt;/strong&gt;&lt;br&gt;
to send the new value of the variable to the next function call we have to write it as a parameter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def display_hello(i):
   if i&amp;gt;0:
       print("hello world")
       display_hello(i-1)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1ud1XOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwk5w9akkavmuzy0f5j2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1ud1XOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwk5w9akkavmuzy0f5j2.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it for this small problem .. Before tracing it let's add one print command after the function call and show the result at the end to make the tracing more interesting&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Assuming that the first invocation was :&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;display_hello(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;And our function is :&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def display_hello(i):
    if i &amp;gt; 0:
        print("hello world!")
        display_hello(i-1)
        print(f'The i value is {i}')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Now we will trace it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the first call the function will enter the call stack &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gG899TIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj8mo5zuuekz4ayia490.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gG899TIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj8mo5zuuekz4ayia490.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then the program will execute the commands :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vmMc4GW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8dhpz3jf0qgvl9v2gre.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vmMc4GW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8dhpz3jf0qgvl9v2gre.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the execution reaches line 4 (the function recall) it will stop there (it will pause the execution of the rest commands) and add another function to the stack :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xfxh5V4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1m5v7och63bnjfzpz57.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xfxh5V4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1m5v7och63bnjfzpz57.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then the program will execute the commands in the second recalled function :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zocdb0xH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93hjilm0ibrga4z42jpq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zocdb0xH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93hjilm0ibrga4z42jpq.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again , when the execution reaches line 4 (the function recall) it will stop there (it will pause the execution of the rest commands) and add another function to the stack :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D1k3Nayg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kg7tpzmyzh69a3liujba.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D1k3Nayg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kg7tpzmyzh69a3liujba.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this time too , our base cause didn't satisfied yet because i is still bigger than zero, so the execution will continue until the function recall and then adds another function to the stack.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5wnj15M7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0yt5qcq5omqrlzlnvob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5wnj15M7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0yt5qcq5omqrlzlnvob.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now finally the parameter is 0 which is the value of i&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AjbqgaQM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0uhuk6ibng237irnxeie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AjbqgaQM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0uhuk6ibng237irnxeie.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The execution will start until line 2 because the condition says that i should be bigger than zero, but i is equal to zero .. So we reached the base cause and we will not reach the recall "invocation" and the prints&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m9q7Ycpt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5q8yflb26t7hp8jam6w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m9q7Ycpt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5q8yflb26t7hp8jam6w.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because this function finished all the commands that should be executed, it's the time to pop the function out of the stack :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Py-Nalbq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60xym2sjxt6lucmn060w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Py-Nalbq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60xym2sjxt6lucmn060w.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we returned to the previous function when the parameter was 1&lt;br&gt;
so now the program will execute the rest command/s:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OCUXIeOZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jiwaywbpajqg722pzr7r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OCUXIeOZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jiwaywbpajqg722pzr7r.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The function now is completed all the commands that should be executed, it's the time to pop the function out of the stack :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xfxh5V4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1m5v7och63bnjfzpz57.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xfxh5V4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1m5v7och63bnjfzpz57.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we returned to the function that its parameter is two and we will execute the rest of the commands :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---beO9PC4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x58hd9upkojv3jz2wdqk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---beO9PC4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x58hd9upkojv3jz2wdqk.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again, after we done the execution we will remove the function from the stack:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gG899TIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj8mo5zuuekz4ayia490.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gG899TIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj8mo5zuuekz4ayia490.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have the first call which 3 was its parameter, and we will execute the rest commands:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OnGnxayC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hg29vx3sqw27rno8od1q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OnGnxayC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hg29vx3sqw27rno8od1q.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here the last function will pop out from the stack and the stack will become empty and here is the end of our program&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wBlx0_oW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sajlfw27cr15rk1p2r9d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wBlx0_oW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sajlfw27cr15rk1p2r9d.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Checking if our tracing was right by execute the code :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R4E1Nr6s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lrfucdwiwjwclpofp57t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R4E1Nr6s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lrfucdwiwjwclpofp57t.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So here we reach the end of today's article &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#happy-recursion"&gt;
  &lt;/a&gt;
  Happy recursion 😁
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#happy-recursion"&gt;
  &lt;/a&gt;
  Happy recursion 😁
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#happy-recursion"&gt;
  &lt;/a&gt;
  Happy recursion 😁
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#happy-recursion"&gt;
  &lt;/a&gt;
  Happy recursion 😁
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#happy-recursion"&gt;
  &lt;/a&gt;
  Happy recursion 😁
&lt;/h6&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/recursion/"&gt;Recursion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@williambdale/recursion-the-pros-and-cons-76d32d75973a"&gt;Recursion: The Pros and Cons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/recursion-in-python-and-c/"&gt;Learn All About Recursion in Python and C++ - Udemy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>algorithms</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Practical guide to parsing your Date and Time in Go</title>
      <author>Rajkumar</author>
      <pubDate>Fri, 27 Aug 2021 17:00:08 +0000</pubDate>
      <link>https://dev.to/rajkumargosavi/practical-guide-to-parsing-your-date-and-time-in-go-5blb</link>
      <guid>https://dev.to/rajkumargosavi/practical-guide-to-parsing-your-date-and-time-in-go-5blb</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Cjl1sP1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gasknkntr6pkmrn656z5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Cjl1sP1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gasknkntr6pkmrn656z5.png" alt="Gopher with a watch"&gt;&lt;/a&gt;&lt;br&gt;
Often we find ourselves with a Date Time that is not in some standard format. This is where we identify the pattern of the date time and then try to write a custom layout.&lt;/p&gt;

&lt;p&gt;Let us see how we can achieve this in go using the standard &lt;strong&gt;time&lt;/strong&gt; package. The &lt;strong&gt;time&lt;/strong&gt; package provides us with several functionalities which includes functions like &lt;strong&gt;Parse&lt;/strong&gt; and &lt;strong&gt;Format&lt;/strong&gt; that serves our purpose.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parse&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Parse parses a formatted string and returns the time value it represents.&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;longForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Jan 2, 2006 at 3:04pm (MST)"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;longForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Feb 3, 2013 at 7:54pm (PST)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;shortForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"2006-Jan-02"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shortForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"2013-Feb-03"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output:
2013-02-03 19:54:00 +0000 PST
2013-02-03 00:00:00 +0000 UTC
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go Playground Link: &lt;a href="https://play.golang.org/p/jYyQtEPTW--"&gt;Parse Example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Format&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Format returns a textual representation of the time value formatted according to the layout defined by the argument.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnixDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Wed Feb 25 11:06:39 PST 2015"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c"&gt;// Always check errors even if they should not happen.&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"default format:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unix format:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnixDate&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output:
default format: 2015-02-25 11:06:39 +0000 PST
Unix format: Wed Feb 25 11:06:39 PST 2015
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go Playground Link: &lt;a href="https://play.golang.org/p/QnOrTVGpGLI"&gt;Format Example&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#predefined-layouts-available-in-time-package"&gt;
  &lt;/a&gt;
  &lt;a href="https://pkg.go.dev/time#pkg-constants"&gt;Predefined Layouts&lt;/a&gt; available in &lt;strong&gt;time&lt;/strong&gt; package
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Label&lt;/th&gt;
&lt;th&gt;Definition&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Layout&lt;/td&gt;
&lt;td&gt;01/02 03:04:05PM '06 -0700&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ANSIC&lt;/td&gt;
&lt;td&gt;Mon Jan _2 15:04:05 2006&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UnixDate&lt;/td&gt;
&lt;td&gt;Mon Jan _2 15:04:05 MST 2006&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RubyDate&lt;/td&gt;
&lt;td&gt;Mon Jan 02 15:04:05 -0700 2006&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RFC822&lt;/td&gt;
&lt;td&gt;02 Jan 06 15:04 MST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RFC822Z&lt;/td&gt;
&lt;td&gt;02 Jan 06 15:04 -0700&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RFC850&lt;/td&gt;
&lt;td&gt;Monday, 02-Jan-06 15:04:05 MST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RFC1123&lt;/td&gt;
&lt;td&gt;Mon, 02 Jan 2006 15:04:05 MST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RFC1123Z&lt;/td&gt;
&lt;td&gt;Mon, 02 Jan 2006 15:04:05 -0700&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RFC3339&lt;/td&gt;
&lt;td&gt;2006-01-02T15:04:05Z07:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RFC3339Nano&lt;/td&gt;
&lt;td&gt;2006-01-02T15:04:05.999999999Z07:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kitchen&lt;/td&gt;
&lt;td&gt;3:04PM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Stamp&lt;/td&gt;
&lt;td&gt;Jan _2 15:04:05&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StampMilli&lt;/td&gt;
&lt;td&gt;Jan _2 15:04:05.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StampMicro&lt;/td&gt;
&lt;td&gt;Jan _2 15:04:05.000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StampNano&lt;/td&gt;
&lt;td&gt;Jan _2 15:04:05.000000000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#building-blocks-for-creating-your-own-layout"&gt;
  &lt;/a&gt;
  Building Blocks for creating your own layout
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Options&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Year&lt;/td&gt;
&lt;td&gt;"2006", "06"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Month&lt;/td&gt;
&lt;td&gt;"Jan", "January", "1", "01"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Textual day of the week&lt;/td&gt;
&lt;td&gt;"Mon", "Monday"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Numeric day of the month&lt;/td&gt;
&lt;td&gt;"2", "_2", "02"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Numeric day of the year&lt;/td&gt;
&lt;td&gt;"__2", "002"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hour&lt;/td&gt;
&lt;td&gt;"15", "3", "03" (PM or AM)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Minute&lt;/td&gt;
&lt;td&gt;"4", "04"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Second&lt;/td&gt;
&lt;td&gt;"5", "05"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AM/PM mark&lt;/td&gt;
&lt;td&gt;"PM"&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;For layouts specifying the two-digit year 06, a value NN &amp;gt;= 69 will be treated as 19NN and a value NN &amp;lt; 69 will be treated as 20NN.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#numeric-time-zone-offsets-format-as-follows"&gt;
  &lt;/a&gt;
  Numeric time zone offsets format as follows:
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;"-0700"&lt;/td&gt;
&lt;td&gt;±hhmm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"-07:00"&lt;/td&gt;
&lt;td&gt;±hh:mm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"-07"&lt;/td&gt;
&lt;td&gt;±hh&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Replacing the sign in the format with a Z triggers the ISO 8601 behavior of printing Z instead of an offset for the UTC zone. Thus:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;"Z0700"&lt;/td&gt;
&lt;td&gt;Z or ±hhmm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"Z07:00"&lt;/td&gt;
&lt;td&gt;Z or ±hh:mm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"Z07"&lt;/td&gt;
&lt;td&gt;Z or ±hh&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#final-example"&gt;
  &lt;/a&gt;
  Final Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ipTimes&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"24 Aug 2021 7:20:50 PM"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"Aug 24 2021 07:20:50PM"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"24-08-2021 17:20:50"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"08-24-2021 13:12:32"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"24/8/21 9:00:12"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"8/24/2021 10:10:10"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"1993-11-23 7**12**44PM"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"24 October 97 7:12:45PM+05:30"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// 24 th January 1997&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;layouts&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"2 Jan 2006 3:04:05 PM"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"Jan 2 2006 03:04:05PM"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"2-01-2006 15:04:05"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"01-02-2006 15:4:5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"2/1/06 3:4:5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"1/2/2006 3:4:5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"2006-01-02 3**4**5PM"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"2 January 06 3:4:5PMZ07:00"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipTimes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layouts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ipTimes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c"&gt;// parsing to get time value&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                              &lt;span class="c"&gt;// check for errors&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"    Input DateTime String: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ipTimes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"                   Layout: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layouts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Time value Default Format: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"   Time in RFC3339 Format: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RFC3339&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us take one such example to iterate through it&lt;/p&gt;

&lt;p&gt;Input:  "24 October 97 7:12:45PM+05:30"&lt;br&gt;
Layout: "2 January 06 3:4:5PMZ07:00"&lt;/p&gt;

&lt;p&gt;From the building blocks listed above we can map things &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Layout Key&lt;/th&gt;
&lt;th&gt;Actual Value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;Numeric day of the month&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;January&lt;/td&gt;
&lt;td&gt;October&lt;/td&gt;
&lt;td&gt;month&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;06&lt;/td&gt;
&lt;td&gt;97&lt;/td&gt;
&lt;td&gt;Year (1997)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;Hour&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;Minute&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;Second&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Z07:00&lt;/td&gt;
&lt;td&gt;+05:30&lt;/td&gt;
&lt;td&gt;Offset&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Since PM is specified 7:12:45 is in 12 hour format.&lt;/p&gt;

&lt;p&gt;Using the Layout blocks specified we can easily see the pattern and can create our own layout.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fun-tip"&gt;
  &lt;/a&gt;
  Fun Tip
&lt;/h4&gt;

&lt;p&gt;Ever wondered why &lt;code&gt;time.Now()&lt;/code&gt; on &lt;a href="https://play.golang.org/"&gt;golang playground&lt;/a&gt; prints the same time (2009-11-10 23:00:00 +0000 UTC m=+0.000000001) ?&lt;/p&gt;

&lt;p&gt;Drum roll!!!!!!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;It is the time and date of Go Lang's birthday.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hope you learnt something new or had your concepts revised.&lt;/p&gt;

&lt;p&gt;Let me know if I missed something.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://play.golang.org/p/_D90gfCLnDS"&gt;Complete Working Date Time Example&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://pkg.go.dev/time@go1.17#Time.Format"&gt;Time Format&lt;/a&gt;&lt;br&gt;
&lt;a href="https://pkg.go.dev/time@go1.17#Parse"&gt;Time Parse&lt;/a&gt;&lt;br&gt;
&lt;a href="https://pkg.go.dev/time@go1.17#pkg-constants"&gt;Constants&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
    </item>
    <item>
      <title>Meet PreviewDevice 0.7.0</title>
      <author>Anton Paliakou</author>
      <pubDate>Fri, 27 Aug 2021 16:56:35 +0000</pubDate>
      <link>https://dev.to/toni777772/meet-previewdevice-0-7-0-1dpg</link>
      <guid>https://dev.to/toni777772/meet-previewdevice-0-7-0-1dpg</guid>
      <description>&lt;p&gt;&lt;strong&gt;PreviewDevice&lt;/strong&gt; - a library with elegant syntax for preview device in SwiftUI.&lt;/p&gt;

&lt;p&gt;The first question that comes to mind is,&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-do-i-need-to-use-the-thirdparty-library-for-swiftui-preview-"&gt;
  &lt;/a&gt;
  Why do I need to use the third-party library for SwiftUI preview ?
&lt;/h3&gt;

&lt;p&gt;For answer this question will compare Apple API for preview with PreviewDevice library. Let's look at real cases on projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case"&gt;
  &lt;/a&gt;
  Case:
&lt;/h3&gt;

&lt;p&gt;Preview on device. Let's say you want to see a preview in the iPhone SE 2 Generation (4.7 inch screen size) with preview device name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apple way&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone SE (2nd generation)"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone SE (2nd generation)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;PreviewDevice lib&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;device&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphoneSE_2Gen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is easy make mistake in iphone device name when use standard Apple way. Also you need to know and keep in your brain the correct iPhone name. PreviewDevice library provides a type-safe way for preview devices. The library has &lt;code&gt;Device&lt;/code&gt; enum with all devices types: all iphones, all ipads, all apple watches, ipod, mac.&lt;/p&gt;

&lt;p&gt;Result: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1XF6weEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdxobakjgnu0bqv437fj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1XF6weEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdxobakjgnu0bqv437fj.png" alt="Result"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#case"&gt;
  &lt;/a&gt;
  Case:
&lt;/h3&gt;

&lt;p&gt;Make preview on some devices. As example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iPhone 8&lt;/li&gt;
&lt;li&gt;iPhone 8 Plus&lt;/li&gt;
&lt;li&gt;iPhone12 Pro&lt;/li&gt;
&lt;li&gt;iPhone 12&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Apple way&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;Group&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 8"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 8 Plus"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 8 Plus"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 12 Pro"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 12 Pro"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;PreviewDevice lib&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;devices&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphone8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphone8Plus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphone12Pro&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphone12&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The library awesome managed this case! Single line solution 💪&lt;/p&gt;

&lt;p&gt;Result:&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tkpOOqpS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ciz0rd74ur57c4u6u33m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tkpOOqpS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ciz0rd74ur57c4u6u33m.png" alt="Result2"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#case"&gt;
  &lt;/a&gt;
  Case:
&lt;/h3&gt;

&lt;p&gt;Make preview on the device for light and night mode. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apple way&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;Group&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;preferredColorScheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;preferredColorScheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;PreviewDevice lib&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;device&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphone12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;colorSchemes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Single line solution from the library 💪 💪&lt;/p&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xCiOQEpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix0z0fobp0mlroebza8j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xCiOQEpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix0z0fobp0mlroebza8j.png" alt="Result3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case"&gt;
  &lt;/a&gt;
  Case:
&lt;/h3&gt;

&lt;p&gt;Make preview on the device with different interface orientations (portrait, landscape left, landscape right). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apple way&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;@available&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iOS&lt;/span&gt; &lt;span class="mf"&gt;15.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;Group&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portrait&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;landscapeLeft&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;landscapeRight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;PreviewDevice lib&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;@available&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iOS&lt;/span&gt; &lt;span class="mf"&gt;15.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;device&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphone12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;orientations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portrait&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;landscapeLeft&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;landscapeRight&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tpf0cXOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8688y8hn0v2gppioqlr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tpf0cXOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8688y8hn0v2gppioqlr.png" alt="Result4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One line code 💪 💪 💪&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installation-library"&gt;
  &lt;/a&gt;
  Installation library
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Requearements&lt;/em&gt; &lt;em&gt;Xcode13&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#cocoapods"&gt;
  &lt;/a&gt;
  &lt;a href="https://guides.cocoapods.org/using/using-cocoapods.html"&gt;CocoaPods&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Specify next line in Podfile:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;pod&lt;/span&gt; &lt;span class="no"&gt;PreviewDevice&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#swift-package-manager"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/apple/swift-package-manager"&gt;Swift Package Manager&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Open Xcode, File -&amp;gt; Swift Packages -&amp;gt; Add Packages.. and paste library git url:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://github.com/Toni77777/PreviewDevice.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;PreviewDevice&lt;/strong&gt; is a type-safe syntax sugar for preview device on SwiftUI.&lt;/p&gt;

&lt;p&gt;Do you have a cool idea for a preview? Welcome to &lt;a href="https://github.com/Toni77777/PreviewDevice"&gt;contribute&lt;/a&gt;!&lt;br&gt;
Thanks for reading! See you soon. 👋&lt;/p&gt;

</description>
      <category>swift</category>
      <category>ios</category>
      <category>swiftui</category>
      <category>xcode</category>
    </item>
    <item>
      <title>love -von</title>
      <author>Antwan R. Wimberly-Jackson</author>
      <pubDate>Fri, 27 Aug 2021 16:56:16 +0000</pubDate>
      <link>https://dev.to/armw4/love-von-30k7</link>
      <guid>https://dev.to/armw4/love-von-30k7</guid>
      <description>&lt;p&gt;big-pussy-cat-low-mein-chow&lt;/p&gt;

&lt;p&gt;must go bye bye - aka Adios&lt;/p&gt;

&lt;p&gt;for my great grandfather Diego has a checkpoint around the bend on the rendezvous fretting Lindsey and zeh big unit and zeh african women are sooo genrerioussss I mean it's not like bald head is already going swaffor and Luka coach shaw Howard Adina is so son is Dwight Howard's nat naeeee&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>firebase</category>
      <category>bad</category>
      <category>bigdata</category>
    </item>
    <item>
      <title>Express your intentions in your coding - short lived variables</title>
      <author>João M.C. Teixeira</author>
      <pubDate>Fri, 27 Aug 2021 16:51:20 +0000</pubDate>
      <link>https://dev.to/joaomcteixeira/express-your-intentions-in-your-coding-short-lived-variables-38hn</link>
      <guid>https://dev.to/joaomcteixeira/express-your-intentions-in-your-coding-short-lived-variables-38hn</guid>
      <description>&lt;p&gt;Short Friday post. Let's talk a bit about &lt;strong&gt;implementation intentions&lt;/strong&gt; and how you reflect those in your code.&lt;/p&gt;

&lt;p&gt;The more I code, and the more I review others code, some little things start to "stress" me out a bit 😄 but it's positive stress, I've to say.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have you considered how others read and understand the scope of your variables?&lt;/strong&gt; More and more, I try to express my intentions when naming variables. And no, I am not talking about &lt;em&gt;long names&lt;/em&gt; or &lt;em&gt;short cryptic names&lt;/em&gt;. Here, I am talking about the &lt;strong&gt;time&lt;/strong&gt; and the &lt;strong&gt;length&lt;/strong&gt; (scope) a variable will have in the execution/implementation. Let's see. Imagine the following block of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;# some logic
&lt;/span&gt;
&lt;span class="c1"&gt;# some logic defined in 2 or 3 lines 
# using var1
&lt;/span&gt;
&lt;span class="c1"&gt;# the code continues on and var1 is never used again.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another more rigorous example could be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;# some long-line logic about 80 chars
# one shorter line using var1
&lt;/span&gt;
&lt;span class="c1"&gt;# the code continues on and var1 is never used again.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How do you know that &lt;code&gt;var1&lt;/code&gt; is not used anywhere else in the implementation when you read these lines? You don't (until you search for it and find it's not present anywhere else). So here comes the question: How can we inform the reader that &lt;code&gt;var1&lt;/code&gt; is used only in the immediate scope of the following lines?&lt;/p&gt;

&lt;p&gt;Here's what I do: prefix the variable name with &lt;code&gt;_&lt;/code&gt;. Like this, when reading &lt;code&gt;_var1&lt;/code&gt;, we know its scope will end in the subsequent short implementation. Of course, you can argue we could use &lt;code&gt;_&lt;/code&gt; only instead of &lt;code&gt;_var1&lt;/code&gt;. That is true, and you are right. But sometimes, it is nice to name variables to give them a purpose. Also because the pure underscore &lt;code&gt;_&lt;/code&gt; is most often used for &lt;em&gt;not used variables&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You can also use &lt;code&gt;_var1&lt;/code&gt; to temporarily store the result of some logic to facilitate the reading in the following lines. Here's the example I used in my &lt;a href="https://dev.to/joaomcteixeira/don-t-make-cryptic-strings-for-formatting-fh2"&gt;previous post&lt;/a&gt;, where I use &lt;code&gt;_tmp&lt;/code&gt; to simplify the next logic step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# reduce the long call to a short temporary variable
&lt;/span&gt;&lt;span class="n"&gt;_tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;someobj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;somemethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"run_dir"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;somejob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;rundir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;fileroot&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;_&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_tmp&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;_&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;somevar&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;w'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all for this Friday short post. Let me know your comments,&lt;br&gt;
Cheers,&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>python</category>
      <category>codequality</category>
      <category>codereview</category>
    </item>
    <item>
      <title>Best Practices for Deploying Microsoft SQL Server on Amazon EC2 | Summary</title>
      <author>Haytham Mostafa</author>
      <pubDate>Fri, 27 Aug 2021 16:45:16 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/best-practices-for-deploying-microsoft-sql-server-on-amazon-ec2-summary-jjg</link>
      <guid>https://dev.to/awsmenacommunity/best-practices-for-deploying-microsoft-sql-server-on-amazon-ec2-summary-jjg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1-high-availability-and-disaster-recovery"&gt;
  &lt;/a&gt;
  1. High availability and disaster recovery
&lt;/h1&gt;

&lt;p&gt;Every business seeks data solutions that can address their operational requirements. These requirements translate to specific values of the Recovery Time Objective (RTO), and Recovery Point Objective (RPO). &lt;br&gt;
• The RTO indicates how long the business can endure database and application outages.&lt;br&gt;
• The RPO determines how much data loss is tolerable. &lt;br&gt;
The combination of RTO and RPO requirements dictates what solution should be adopted. &lt;br&gt;
Typically, applications with RPO and RTO values close to zero should use a high availability (HA) solution, whereas disaster recovery (DR) solutions can be used for those with higher values. In many cases, HA and DR solutions can be mixed to address more complex requirements.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hImbnrEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knjzvnzr4s6hw8sjsgc0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hImbnrEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knjzvnzr4s6hw8sjsgc0.png" alt="Table 1"&gt;&lt;/a&gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &lt;em&gt;Table 1: HA/DR options in Microsoft SQL Server&lt;/em&gt; &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;br&gt;
• Always On basic availability groups in SQL Server 2019 Standard edition support a single passive replicas (in addition to the primary replica) for a single database per availability group. For multiple databases in HA mode, a separate availability group needs to be defined for each database. &lt;br&gt;
• MSSQL Failover Cluster Instance is often used as a pure HA solution. &lt;br&gt;
These solutions rely on one or more secondary servers, with SQL Server running as active or passive standby. Based on the specific HA/DR requirements, these servers can be located in close proximity to each other or far apart. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-availability-zones-and-multiaz-deployment"&gt;
  &lt;/a&gt;
  1.1   Availability Zones and multi-AZ deployment
&lt;/h2&gt;

&lt;p&gt;• AWS Availability Zone are a good solution for synchronous replication of your databases using Mirroring, Always On Availability Groups, Basic Availability Groups, or Failover Cluster Instances.&lt;br&gt;
• SQL Server provides zero data loss and, when combined with the low-latency infrastructure of AZs, provides high performance. This is one of the main differences between most on-premises deployments and AWS. For example, Always On Failover Cluster Instance (FCI) is often used inside a single data center, because all nodes in an FCI cluster must have access to the same shared storage. Locating these nodes in different data centers could degrade performance. &lt;br&gt;
• In AWS, FCI nodes can be located in separate AZs and still provide high performance because of the low-latency network link between all AZs within a Region. &lt;br&gt;
• SQL Server FCI relies on shared storage being accessible from all nodes participating in FCI.&lt;br&gt;
• Amazon FSx for Windows File Server is a fully managed service providing shared storage that automatically replicates the data synchronously across two AZs, provides high availability with automatic failure detection, failover, and failback, and fully supports the Server Message Block (SMB) Continuous Availability (CA) feature.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C9CITImg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uny6tjzkuiqbqiiymo1c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C9CITImg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uny6tjzkuiqbqiiymo1c.png" alt="Figure 1"&gt;&lt;/a&gt;&lt;em&gt;Figure 1: Using Amazon FSx as file-share for Failover Cluster Instance, or as file-share witness in Windows Server Failover Cluster&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-using-aws-launch-wizard-to-deploy-microsoft-sql-server-on-amazon-ec2-instances"&gt;
  &lt;/a&gt;
  2. Using AWS Launch Wizard to deploy Microsoft SQL Server on Amazon EC2 instances
&lt;/h1&gt;

&lt;p&gt;AWS Launch Wizard is a service that offers a guided way of sizing, configuring, and deploying AWS resources for third party applications, such as Microsoft SQL Server. &lt;br&gt;
You can use this service to deploy MS SQL Server with following configurations: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  SQL Server single instance on Windows &lt;/li&gt;
&lt;li&gt;  SQL Server single instance on Linux &lt;/li&gt;
&lt;li&gt;  SQL Server HA using Always On Availability Groups on Windows &lt;/li&gt;
&lt;li&gt;  SQL Server HA using Always On Availability Groups on Linux &lt;/li&gt;
&lt;li&gt;  SQL Server HA using Always On Failover Cluster Instance on Windows 
AWS Launch Wizard:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;a.&lt;/strong&gt;  Provides an estimated cost of deployment, and enables you to modify your resources to instantly view an updated cost assessment.&lt;br&gt;
&lt;strong&gt;b.&lt;/strong&gt;  Handles all the heavy-lifting, including installation and configuration of Always On Availability Groups or Failover Cluster Instance.&lt;br&gt;
&lt;strong&gt;c.&lt;/strong&gt;  Creates CloudFormation templates that can serve as a baseline to accelerate subsequent deployments. For post-deployment management, AWS Systems Manager (SSM) Application Manager automatically imports application resources created by AWS Launch Wizard. From the Application Manager console, you can view operations and perform operations tasks.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b43LdelE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ufks5zsyfogqcp7ajtas.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b43LdelE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ufks5zsyfogqcp7ajtas.png" alt="Figure 2"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt; &lt;em&gt;Figure 2: AWS Launch Wizard deploys MS SQL FCI using Amazon FSx for Windows File Server&lt;/em&gt; &amp;lt;&amp;lt;&amp;lt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#21-multiregion-deployments"&gt;
  &lt;/a&gt;
  2.1   Multi-Region deployments
&lt;/h2&gt;

&lt;p&gt;You can leverage the global scale of AWS to ensure availability under almost any circumstances. By default, Amazon VPC is confined within a single Region. Therefore, for a multi-region deployment, you need to establish connectivity between your SQL Server instances that are deployed in different Regions. In AWS, there are a number of ways to do this: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  VPC peering &lt;/li&gt;
&lt;li&gt;  AWS Transit Gateway&lt;/li&gt;
&lt;li&gt;  VPN connections&lt;/li&gt;
&lt;li&gt;  VPC sharing &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;• If applications or users were deployed in remote Regions which need to connect to your SQL Server instances, you can use the AWS Direct Connect. &lt;br&gt;
• It is possible to have synchronous replication in a multi-region SQL Server deployment, the farther apart your selected Regions are, the more severe the performance penalty is for a synchronous replication.&lt;br&gt;
• The best practice for multi-region deployments is to establish an asynchronous replication, especially for Regions that are geographically distant. &lt;br&gt;
• For those workloads that come with aggressive RPO requirements, asynchronous multi-Region deployment can be combined with a Multi-AZ or Single-AZ synchronous replication. &lt;br&gt;
• You can also combine all three methods into a single solution. &lt;br&gt;
• In cases involving several replicas across two or more Regions, distributed availability groups might be the most suitable option. &lt;br&gt;
• Distributed availability groups can also be used to increase the number of read replicas.&lt;br&gt;
• A traditional availability group allows up to 8 read replicas. This means you can have a total of 9 replicas, including the primary. Using a distributed availability group, a second availability group can be added to the first, increasing the total number of replicas to 18. This process can be repeated with a third availability group and a second distributed availability group. &lt;br&gt;
• The second distributed availability group can be configured to include either the first or second availability groups as its primary. &lt;br&gt;
• Distributed availability group is the means through which SQL Server Always On can achieve virtually unlimited scale.&lt;br&gt;
• Another use of a distributed availability group is zero downtime database migrations. The independence of SQL Server Distributed Availability Group from Active Directory and Windows Server Failover Cluster (WSFC) is the main benefactor for these cases. It enables you to keep both sides of the migration synchronized without having to worry about the complexities of Active Directory or WSFC.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GM5sBJ43--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxqiptvsmtzy7rjeqq2l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GM5sBJ43--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxqiptvsmtzy7rjeqq2l.png" alt="Figure 2"&gt;&lt;/a&gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &lt;em&gt;Figure 2: SQL Server distributed availability group in AWS&lt;/em&gt; &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#22-disaster-recovery"&gt;
  &lt;/a&gt;
  2.2   Disaster recovery
&lt;/h2&gt;

&lt;p&gt;• DR solutions require a replica of SQL Server databases in another server. The other server is often in a remote site far away from the primary site. This means higher latency, and therefore, lower performance if you rely on HA solutions that use synchronous replication. &lt;br&gt;
• DR solutions often rely on asynchronous replication of data. &lt;br&gt;
• DR solutions are based on either block-level or database-level replication. &lt;br&gt;
• AWS also provides CloudEndure Disaster Recovery. You can use CloudEndure DR to reduce downtime to a few minutes, protect against data loss for sub-second RPO, simplify implementation, increase reliability, and decrease the total cost of ownership. &lt;br&gt;
• CloudEndure is an agent-based solution that replicates entire virtual machines, including the operating system, all installed applications, and all databases, into a staging area. &lt;br&gt;
• The staging area contains low-cost resources automatically provisioned and managed by CloudEndure Disaster Recovery. Because the staging area does not run a live version of your workloads, you don’t need to pay for duplicate software licenses or high-performance compute. Rather, you pay for low-cost compute and storage. &lt;br&gt;
• The fully provisioned recovery environment, with the right-sized compute and higher-performance storage required for recovered workloads, is launched only during a disaster or drill. AWS also makes CloudEndure available at no additional cost for migration projects.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8hT9KNut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilu5pycz13loilmo0wez.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8hT9KNut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilu5pycz13loilmo0wez.png" alt="Figure 3"&gt;&lt;/a&gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &lt;em&gt;Figure 3: CloudEndure disaster recovery&lt;/em&gt; &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-performance-optimization"&gt;
  &lt;/a&gt;
  3. Performance optimization
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#31-using-amazon-elastic-block-store-amazon-ebs"&gt;
  &lt;/a&gt;
  3.1   Using Amazon Elastic Block Store (Amazon EBS)
&lt;/h2&gt;

&lt;p&gt;• Amazon EBS is a Single-AZ block storage service with a number of flexible options to cater to diverse requirements. &lt;br&gt;
• For maximizing performance on a single volume, use a Provisioned IOPS Solid State Drive (SSD). &lt;br&gt;
• You can provision up to 64,000 IOPS per io2 EBS volume, along with 1000-MiB/s throughput. &lt;br&gt;
• For more demanding workloads, the io2 Block Express EBS volumes guarantee 256,000 IOPS and 4,000 MiB/s throughput per volume. &lt;br&gt;
• For more IOPS and throughput than provided by a single EBS volume, you can create multiple volumes and stripe them in your Windows or Linux instance. &lt;br&gt;
• Remember to use EBS-optimized EC2 instance types, this means a dedicated network connection is allocated to serve requests between your EC2 instance and the EBS volumes attached to it. &lt;br&gt;
• gp2 and gp3 volumes offer a better balance of price and performance for SQL Server workloads. gp2 volumes deliver single-digit ms latencies and the ability to burst to 16,000 IOPS for extended periods. The IOPS load generated by SQL Server database tends to spike frequently. &lt;br&gt;
• One of the major benefits of using EBS volumes is the ability to create point-in-time and instantaneous EBS snapshots. This feature copies the EBS snapshot to Amazon S3 infrastructure, which provides 99.999999999% durability. &lt;br&gt;
• Despite EBS volumes being confined to a single AZ, EBS snapshots can be restored to any AZ within the same Region. &lt;br&gt;
• The block-level snapshots are not the same as database backups, and not all features of database backups are attainable this way. Therefore, this method is often combined and complemented with a regular database backup plan. &lt;br&gt;
• Although each EBS volume can be as large as 64 TB, and therefore, could take a long time to transfer all its data to Amazon S3, EBS snapshots are always point-in-time. &lt;br&gt;
• After restore a volume from a snapshot, the volume is immediately available to applications for read and write but it takes some time to get its full performance capacity. Using Amazon EBS fast snapshot restore, helps in eliminate the latency of I/O operations on a block when it is accessed for the first time. &lt;br&gt;
• You can use AWS Systems Manager Run Command to take application-consistent EBS snapshots of your online SQL Server files at any time, with no need to offline your database or put it in read-only mode. The snapshot process uses Windows Volume Shadow Copy Service (VSS) to take image-level backups of VSS-aware applications. MS SQL Server is VSS-aware and perfectly compatible with this technique. It is also possible to take VSS snapshots of Linux instances.&lt;br&gt;
• You can also take crash-consistent EBS snapshots across multiple EBS volumes, attached to a Windows or Linux EC2 instance, without using orchestrator applications. Using this method, only lose uncommitted transactions and writes that are not flushed to the disk. &lt;br&gt;
• SQL Server is capable of restoring databases to a consistent point before the crash time, this feature is also supported through AWS Backup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#32-instance-storage"&gt;
  &lt;/a&gt;
  3.2   Instance storage
&lt;/h2&gt;

&lt;p&gt;• Storage-optimized EC2 instance types choosing storage-optimized EC2 instance types for maximum performance, it is essential to understand that some of the smaller instance types provide instance storage that is shared with other instances. &lt;br&gt;
• These are virtual disks that reside on a physical disk attached to the physical host.&lt;br&gt;
• By selecting instance type, such as i3.2xlarge, you ensure that there is a 1:1 correspondence between your instance store disk and the underlying physical disk. &lt;br&gt;
• Instance disks are ephemeral and live only as long as their associated EC2 instance. &lt;br&gt;
• If the EC2 instance fails, or stopped or ended, all of its instance storage disks are wiped out and the data stored on them is irrecoverable. Unlike EBS volumes, instance storage disks cannot be backed up using a snapshot. Therefore, if you choose to use EC2 instance storage for your permanent data, you need to provide a way to increase its durability. &lt;br&gt;
• One suitable use for instance storage may be the tempdb system database files, those files are recreated each time the SQL Server service is restarted. &lt;br&gt;
&lt;strong&gt;a.&lt;/strong&gt;  As a best practice, the tempdb files should be stored on a fast volume, separate from user databases. &lt;br&gt;
&lt;strong&gt;b.&lt;/strong&gt;  For the best performance, ensure that the tempdb data files within the same filegroup are the same size and stored on striped volumes. Another use for EC2 instance storage is the buffer pool extension. This feature uses fast random-access disks (SSD) as a secondary cache between RAM and persistent disk storage, striking a balance between cost and performance when running workloads on SQL Server. &lt;br&gt;
• Although instance storage disks are the fastest available to EC2 instances, their performance is capped at the speed of the physical disk. &lt;br&gt;
• You can go beyond the single disk maximum by striping across several disks. You could also use instance storage disks as the cache layer in Storage Spaces (for single Windows instances) and Storage Spaces Direct (for Windows Server failover clusters) storage pools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#33-amazon-fsx-for-windows-file-server"&gt;
  &lt;/a&gt;
  3.3   Amazon FSx for Windows File Server
&lt;/h2&gt;

&lt;p&gt;Amazon FSx for Windows File Server is another storage option for SQL Server on Amazon EC2. This option is suitable for three major use-cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  As shared storage used by SQL Server nodes participating in a Failover Cluster Instance. &lt;/li&gt;
&lt;li&gt;  As file-share witness to be used with any SQL Server cluster on top of Windows Server Failover Cluster.&lt;/li&gt;
&lt;li&gt;  As an option to attain higher throughput levels than available in dedicated EBS optimization
To better understand the third case:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;a.&lt;/strong&gt;  Notice that EBS throughput depends on EC2 instance size.&lt;br&gt;
&lt;strong&gt;b.&lt;/strong&gt;  Smaller EC2 instance sizes provide lower EBS throughput; therefore, to attain EBS higher throughput, you need bigger instance sizes.&lt;br&gt;
&lt;strong&gt;c.&lt;/strong&gt;  If a workload leaves a big portion of its network bandwidth unused, but requires higher throughput to access underlying storage, using a shared file system over SMB may unlock its required performance, while reducing cost by using smaller EC2 instance sizes. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Amazon FSx provides fast performance with baseline throughput up to 2 GB/second per file system, hundreds of thousands of IOPS, and consistent sub-millisecond latencies. &lt;/li&gt;
&lt;li&gt;  To provide the right performance for your SQL instances, you can choose a throughput level that is independent of your file system size. Higher levels of throughput capacity also come with higher levels of IOPS that the file server can serve to the SQL Server instances accessing it. &lt;/li&gt;
&lt;li&gt;  The storage capacity determines not only how much data you can store, but also how many IOPS you can perform on the storage – each GB of storage provides three IOPS. You can provision each file system to be up to 64 TB in size.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#34-bandwidth-and-latency"&gt;
  &lt;/a&gt;
  3.4   Bandwidth and latency
&lt;/h2&gt;

&lt;p&gt;It is important to remember the difference between latency and bandwidth. You should find a balance between network latency and availability. To gain the highest bandwidth on AWS, you can leverage enhanced networking and Elastic Network Adapter (ENA), or the new Elastic Fabric Adapter (EFA) which, when combined with new generation of EC2 instances such as C6gn, C5n, R5n, I3en, or G4dn instances, can provide up to 100Gbps bandwidth. But this quite high bandwidth has no effect on latency. Network latency changes in direct correlation with the distance between interconnecting nodes. Clustering nodes is a way to increase availability, but placing cluster nodes too close to each other increases the probability of simultaneous failure, reducing availability. Putting them too far apart yields the highest availability, but at the expense of higher latency. AWS AZs within each AWS Region are engineered to provide a balance that fits most practical cases. Each AZ is engineered to be physically separated from other AZs, while keeping in close geographic proximity to provide low network latency. Therefore, in the overwhelming number of cases, the best practice is to spread cluster nodes across multiple AZ.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#35-read-replicas"&gt;
  &lt;/a&gt;
  3.5   Read replicas
&lt;/h2&gt;

&lt;p&gt;You might determine that many of your DB transactions are read-only queries, and that the sheer number of incoming connections is flooding your database. Read replicas are a known solution for this situation. You can offload your read-only transactions from your primary SQL Server instance to one or more read replica instances. Read replicas can also be used to perform backup operations, relieving primary instance from performance hits during backup windows. When using availability group listeners, if you mark your connection strings as read-only, SQL Server routes incoming connections to any available read replicas and only sends read/write transactions to the primary instance. &lt;br&gt;
Always On Availability Groups supports up to four secondary replicas. There might be cases where you have users or applications connecting to your databases from geographically dispersed locations. If latency is a concern, you can locate read replicas close to your users and applications. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-security-optimization"&gt;
  &lt;/a&gt;
  4. Security optimization
&lt;/h1&gt;

&lt;p&gt;AWS security features can be combined with the built-in security features of MS SQL Server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#41-amazon-vpc"&gt;
  &lt;/a&gt;
  4.1   Amazon VPC
&lt;/h2&gt;

&lt;p&gt;A best practice is to deploy your SQL Server instances in private subnets inside a VPC, and only allow access to the internet through a VPC NAT gateway, or a custom NAT instance. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#42-encryption-at-rest"&gt;
  &lt;/a&gt;
  4.2   Encryption at rest
&lt;/h2&gt;

&lt;p&gt;If you are using EBS volumes to store your SQL Server database files, you have the option to enable block-level encryption. Amazon EBS transparently handles the encryption and decryption. This is available through a simple check box. Amazon FSx for Windows File Server also includes built-in encryption at rest. Both EBS and Amazon FSx are integrated with AWS KMS for managing encryption keys. So, through AWS KMS, you can either use keys provided by AWS, or bring your own keys. At the database level, you can use SQL Server Transparent Data Encryption (TDE), a feature available in MS SQL Server that provides transparent encryption of your data at rest. TDE is available on Amazon RDS for SQL Server, and you can also enable it on your SQL Server workloads on EC2 instances. Previously, TDE was only available on SQL Server Enterprise Edition. However, SQL Server 2019 has also made it available on Standard Edition. If you want to have encryption-at-rest for your database files on Standard Edition on an earlier version of SQL Server, you can use EBS encryption instead. It’s important to understand the tradeoffs and differences between EBS encryption and TDE. EBS encryption is done at the block level, that is, data is encrypted when it is stored and decrypted when it is retrieved. However, with TDE, the encryption is done at the file level. Database files are encrypted, and can only be decrypted using the corresponding certificate. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#43-encryption-in-transit"&gt;
  &lt;/a&gt;
  4.3   Encryption in transit
&lt;/h2&gt;

&lt;p&gt;You can enable encryption in transit for your SQL Server workloads using the SSL/TLS protocol. MS SQL Server supports encrypted connections, and SQL Server workloads in AWS are no exception. When using SMB protocol for SQL Server storage layer, Amazon FSx automatically encrypts all data in transit using SMB encryption as you access your file system, without the need for you to modify SQL Server or other applications’ configurations. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#44-encryption-in-use"&gt;
  &lt;/a&gt;
  4.4   Encryption in use
&lt;/h2&gt;

&lt;p&gt;MS SQL Server offers Always Encrypted to protect sensitive data using client certificates. This provides a separation between those who own the data and can view it, and those who manage the data but should have no access. This feature is also available on both Amazon RDS for SQL Server, as well as SQL Server workloads on Amazon EC2. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#45-aws-key-management-service-aws-kms"&gt;
  &lt;/a&gt;
  4.5   AWS Key Management Service (AWS KMS)
&lt;/h2&gt;

&lt;p&gt;AWS KMS is a fully managed service to create and store encryption keys. You can use KMS-generated keys or bring your own keys. In either case, keys never leave AWS KMS and are protected. You can use KMS keys to encrypt your SQL Server backup files when you store them on Amazon S3, Amazon S3 Glacier, or any other storage service. Amazon EBS encryption also integrates with AWS KMS. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#46-security-patches"&gt;
  &lt;/a&gt;
  4.6   Security patches
&lt;/h2&gt;

&lt;p&gt;In AWS, you can use AWS Systems Manager Patch Manager to automate this process. Note that use cases for Patch Manager are not restricted to security patches. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-cost-optimization"&gt;
  &lt;/a&gt;
  5. Cost optimization
&lt;/h1&gt;

&lt;p&gt;SQL Server can be hosted on AWS through License Included (LI) and Bring Your Own License (BYOL) licensing models. The advantage of LI model is that you do not need to have any long-term commitments and can stop using the product at any time and stop paying for its usage. &lt;br&gt;
However, many businesses already have considerable investments in SQL Server licenses and might want to reuse their existing licenses on AWS. This is possible using BYOL: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  If you have Software Assurance (SA), one of its benefits is the Microsoft License Mobility through Software Assurance program. This program enables you to use your licenses on server instances running anywhere, including on Amazon EC2 instances. &lt;/li&gt;
&lt;li&gt;  If you don’t have SA, you may still be able to use your own licenses on AWS using Amazon EC2 Dedicated Hosts.
The BYOL option on EC2 Dedicated Hosts can significantly reduce costs, as the number of physical cores on an EC2 host is about half of the total number of vCPU available on that host. However, it’s difficult to track the license usage and compliance. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#51-using-sql-server-developer-edition-for-nonproduction"&gt;
  &lt;/a&gt;
  5.1   Using SQL Server Developer Edition for non-production
&lt;/h2&gt;

&lt;p&gt;One of the easiest ways to save licensing costs is to use MS SQL Developer Edition for environments that are not going to be used by application end-users. For this, you can download SQL Server Developer Edition installation media and install it on your EC2 instances. SQL Server Developer Edition is equivalent to SQL Server Enterprise Edition, with full features and functionality.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#52-amazon-ec2-cpu-optimization"&gt;
  &lt;/a&gt;
  5.2   Amazon EC2 CPU optimization
&lt;/h2&gt;

&lt;p&gt;The z1d instance types provide the maximum CPU power, enabling you to reduce the number of CPU cores for compute-intensive SQL Server deployments. The SQL Server deployments might not be compute-intensive and require an EC2 instance type that provides intensity on other resources, such as memory or storage. Because EC2 instance types that provide these resources are also providing a fixed number of cores that might be more than your requirement, AWS offers to use EC2 CPU optimization to reduce the number of cores available to an EC2 instance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#53-switch-to-sql-server-standard-edition"&gt;
  &lt;/a&gt;
  5.3   Switch to SQL Server Standard Edition
&lt;/h2&gt;

&lt;p&gt;• Enterprise-grade features of SQL Server are exclusively available in the Enterprise edition.&lt;br&gt;
• Many of these features have also been available in the Standard edition, enabling you to switch to the Standard edition if you’ve been using Enterprise edition only for those features. &lt;br&gt;
• One of the most common reasons for using Enterprise edition has always been its mission-critical HA capabilities. &lt;br&gt;
• Now, there are alternative options that enable switching to Standard edition without degrading availability. One option is using Always On Basic Availability Groups. This option is similar to Always On Availability Groups, but comes with a number of limitations. The most important limitation is that you can have only one database in a basic availability group. The other option is using Always On Failover Cluster Instance (FCI). &lt;br&gt;
• Since FCI provides HA at the instance level, it doesn’t matter how many databases are hosted on your SQL Server instance. Traditionally this option was restricted to HA within a single DC. &lt;br&gt;
To simplify the complexity and cost of running MS SQL FCI deployments using Amazon FSx in the following scenarios: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Due to the complexity and cost of implementing a shared storage solution for FCI, you might have opted to use availability groups and SQL Server Enterprise Edition. &lt;/li&gt;
&lt;li&gt;  You might already use SQL Server FCI with shared storage using a third-party storage replication software solution. That implies that you purchased a license for the storage replication solution, and then deployed, administered, and maintained the shared storage solution yourself. You can now switch to using a fully managed shared storage solution with Amazon FSx, simplifying and reducing costs for your SQL Server FCI deployment. &lt;/li&gt;
&lt;li&gt;  You ran your SQL Server Always On deployment on-premises, using a combination of FCI and AG-FCI to provide HA within your primary data center site, and AG provided a DR solution across sites.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#54-z1d-and-r5b-ec2-instance-types"&gt;
  &lt;/a&gt;
  5.4   Z1d and R5b EC2 instance types
&lt;/h2&gt;

&lt;p&gt;This instance type is optimized for workloads with high licensing costs, such as MS SQL Server and Oracle databases. For example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hQjYh-Th--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwxrf6xl48bxxxd7ikf6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hQjYh-Th--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwxrf6xl48bxxxd7ikf6.png" alt="Figure 4"&gt;&lt;/a&gt; &amp;gt;&amp;gt;&amp;gt; &lt;em&gt;Figure 4: TCO comparison between SQL Server on r4.4xlarge and z1d.3xlarge&lt;/em&gt; &amp;lt;&amp;lt;&amp;lt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#55-eliminating-active-replica-licenses"&gt;
  &lt;/a&gt;
  5.5   Eliminating active replica licenses
&lt;/h2&gt;

&lt;p&gt;Another opportunity for cost optimization is through applying a combination of BYOL and LI models. Active replicas are used primarily for: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Reporting &lt;/li&gt;
&lt;li&gt;  Backup &lt;/li&gt;
&lt;li&gt;  OLAP Batch jobs &lt;/li&gt;
&lt;li&gt;  HA
The first three options are often performed intermittently. This means you would not need an instance continuously up and dedicated to running those operations. In a traditional on-premises environment, you would have to create an active replica that is continuously synchronized with the primary instance. This means you need to obtain an additional license for the active replica.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RICDs_Q5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0oz0plgi2dowegxzupo.png" alt="Figure 5"&gt; &amp;gt;&amp;gt;&amp;gt; &lt;em&gt;Figure 5: SQL Server active replication on-premises&lt;/em&gt; &amp;lt;&amp;lt;&amp;lt;
In AWS, you can optimize this architecture by replacing the active replica with a passive replica, therefore relegating its role solely to the purpose of HA. Other operations can be performed on a separate instance using License Included, which could run for a few hours and then be shut down or ended. The data can be restored through an EBS snapshot of the primary instance.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FqQaV-Yb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/okkvclfk0p1jicg0x0j2.png" alt="Figure 6"&gt; &amp;gt;&amp;gt;&amp;gt; &lt;em&gt;Figure 6: Eliminating active replica licenses in AWS&lt;/em&gt; &amp;lt;&amp;lt;&amp;lt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This solution is applicable when jobs on the active replica run with a low frequency. If you need a replica for jobs that run continuously or at a high frequency, consider using AWS Database Migration Service to continuously replicate data from your primary instance into a secondary. The primary benefit of this method is because you can do it using SQL Server Standard edition.  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-sql-server-on-linux"&gt;
  &lt;/a&gt;
  6. SQL Server on Linux
&lt;/h1&gt;

&lt;p&gt;Deploying SQL Server on Linux is a way to eliminate Windows license costs. Installation and configuration of MS SQL on Linux can be non-trivial.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-operational-excellence"&gt;
  &lt;/a&gt;
  7. Operational excellence
&lt;/h1&gt;

&lt;p&gt;It must considering the post-deployment operating and maintaining of the MSSQL Server workloads in AWS. The best practice is to assume that failures and incidents happen all the time. It’s important to be prepared and equipped to respond to these incidents. This objective is composed of three subobjectives: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Observe and detect anomaly&lt;/li&gt;
&lt;li&gt;  Detect the root cause &lt;/li&gt;
&lt;li&gt;  Act to resolve the problem &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#71-observability-and-root-cause-analysis"&gt;
  &lt;/a&gt;
  7.1   Observability and root cause analysis
&lt;/h2&gt;

&lt;p&gt;Amazon CloudWatch is a service that enables real-time monitoring of AWS resources &lt;br&gt;
and other applications. Amazon CloudWatch Application Insights for .NET and SQL Server is a feature of Amazon CloudWatch that is designed to enable operational excellence for Microsoft SQL Server and .NET applications. It continuously monitors the metrics and logs to detect anomalies and errors, while using AI / ML to correlate detected errors and anomalies.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#72-reducing-mean-time-to-resolution-mttr"&gt;
  &lt;/a&gt;
  7.2   Reducing mean time to resolution (MTTR)
&lt;/h2&gt;

&lt;p&gt;The automated dashboards generated by Amazon CloudWatch Application Insights help you to take swift remedial actions to keep your applications healthy and to prevent impact to the end users of your application. It also creates OpsItems so you can resolve problems using AWS Systems Manager OpsCenter. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#73-patch-management"&gt;
  &lt;/a&gt;
  7.3   Patch management
&lt;/h2&gt;

&lt;p&gt;AWS Systems Manager Patch Manager is a comprehensive patch management solution, fully integrated with native Windows APIs, and supporting Windows Server and Linux operating systems, as well as Microsoft applications, including Microsoft SQL Server&lt;/p&gt;

</description>
      <category>aws</category>
      <category>database</category>
    </item>
    <item>
      <title>8 Great Plugins ⚙️ for Web Developers 🧑‍💻</title>
      <author>Roden</author>
      <pubDate>Fri, 27 Aug 2021 16:44:55 +0000</pubDate>
      <link>https://dev.to/kerthin/8-great-plugins-for-web-developers-3701</link>
      <guid>https://dev.to/kerthin/8-great-plugins-for-web-developers-3701</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Today I would like to talk about browser plugins that help make the life of a web developer easier.&lt;/p&gt;

&lt;p&gt;In this post, I decided to give an example of 8 plugins that I often use while working or if I surf in the browser.&lt;/p&gt;

&lt;p&gt;So let's get started&lt;/p&gt;

&lt;h1&gt;1. &lt;a href="https://chrome.google.com/webstore/detail/colorzilla/bhlhnicpbhignbdhedgjhgdocnmhomnp"&gt;ColorZilla&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;With ColorZilla you can get a color reading from any point in your browser, quickly adjust this color and paste it into another program.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a great plugin that will help you &lt;code&gt;determine the code of any color on any pixel that you have pointed at with a special pipette&lt;/code&gt;. This works with both websites and images. If you can't point the eyedropper at the image, because the image begins to disappear, then open the image in a separate window.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a)&lt;/strong&gt; Click &lt;code&gt;Pick Color From Page&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dRwtPKSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qeh3q558pbhojnow3567.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dRwtPKSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qeh3q558pbhojnow3567.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b)&lt;/strong&gt; We point the &lt;code&gt;pipette&lt;/code&gt; at the &lt;code&gt;desired area&lt;/code&gt; and &lt;code&gt;click&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z1WI7va_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhamkwks8dn690nekz3e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z1WI7va_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhamkwks8dn690nekz3e.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c)&lt;/strong&gt; Open the &lt;code&gt;Color Picker&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9LUMR0Qh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lt72dybh95vqv1nunb8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9LUMR0Qh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lt72dybh95vqv1nunb8.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;2. &lt;a href="https://chrome.google.com/webstore/detail/perfectpixel-by-welldonec/dkaagdgjmgdmbnecmcefdhjekcoceebi?hl=en"&gt;PerfectPixel&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;PerfectPixel allows developers and markup designers put a semi-transparent image overlay over the top of the developed HTML and perform pixel perfect comparison between them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_9jNvIaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46386j3kiqf9iefaht44.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_9jNvIaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46386j3kiqf9iefaht44.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;3. &lt;a href="https://chrome.google.com/webstore/detail/window-resizer/kkelicaakdanhinjdeammmilcgefonfh?hl=en"&gt;Window Resizer&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;This extension re-sizes the browser's window in order to emulate various resolutions. It is particularly useful for web designers and developers by helping them test their layouts on different browser resolutions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RsJ1oE8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvzdgfcg9e8pu3q1d309.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RsJ1oE8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvzdgfcg9e8pu3q1d309.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;4. &lt;a href="https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg?hl=en"&gt;Wappalyzer&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Wappalyzer is a browser extension that uncovers the technologies used on websites. It detects content management systems, eCommerce platforms, web servers, JavaScript frameworks, analytics tools and many more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-vNuAQT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8m9zk69ss7jyyr003z1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-vNuAQT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8m9zk69ss7jyyr003z1.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;5. &lt;a href="https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg?hl=en"&gt;FireShot&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Take FULL webpage screenshots. Capture, edit and save them to &lt;code&gt;PDF/JPEG/GIF/PNG&lt;/code&gt;, upload, print, send to OneNote, clipboard or email.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WspUwwIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7r6dlc7hq2yzgt1qd35.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WspUwwIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7r6dlc7hq2yzgt1qd35.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;6. &lt;a href="https://chrome.google.com/webstore/detail/pinterest-save-button/gpdjojdkbbmdfjfahjcgigfpmkopogic?hl=en"&gt;Pinterest Save Button&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Save your favorite ideas online so you can easily get back to them later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With this plugin, you can add any images you like from any to yours collections to your &lt;code&gt;Pinterest account&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When you hover over the image, you will see a red button in the upper right corner with which you can select the Pinterest collection to which you want to save the image.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;a)&lt;/strong&gt; Choosing the image&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C-Qq5bIK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2ybfbdj97i3fbvd94pz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C-Qq5bIK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2ybfbdj97i3fbvd94pz.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b)&lt;/strong&gt; Save&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3_-ilLAM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4cjuseoxefz13azof7h.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3_-ilLAM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4cjuseoxefz13azof7h.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;7. &lt;a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=en"&gt;Vue.js devtools&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Chrome and Firefox DevTools extension for debugging Vue.js applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An amazing plugin that simplifies your work in the browser. Allows you to see your &lt;code&gt;component tree&lt;/code&gt;, as well as the &lt;code&gt;data of the components&lt;/code&gt; themselves. I believe that this plugin is necessary for any Vue developer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Utjtvu2j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppzv5pulvxe2bo79hnoa.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Utjtvu2j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppzv5pulvxe2bo79hnoa.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;8. &lt;a href="https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=en"&gt;JSON Formatter&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;A very convenient plugin that makes JSON files more readable, and also makes &lt;code&gt;links clickable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--75HQ6xNT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkhr3fuuix8vckq5x2xr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--75HQ6xNT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkhr3fuuix8vckq5x2xr.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;The End&lt;/h1&gt;

&lt;p&gt;Thank you for devoting your time to my post. You can also recommend plugins that you use. Or suggest a better alternative to the plugins that are presented in the post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Transform your browsers&lt;strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K2GGN_9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/R9zXHWAHyTjnq/giphy.gif%3Fcid%3Decf05e471wxmdw8bmsl5ci988ji3ahyck34ar7pvcrnn27ut%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K2GGN_9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/R9zXHWAHyTjnq/giphy.gif%3Fcid%3Decf05e471wxmdw8bmsl5ci988ji3ahyck34ar7pvcrnn27ut%26rid%3Dgiphy.gif%26ct%3Dg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
