<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>CSS Animated Button with Offset Border</title>
      <author>Abbey Perini</author>
      <pubDate>Mon, 25 Jan 2021 16:38:23 +0000</pubDate>
      <link>https://dev.to/abbeyperini/css-animated-button-with-offset-border-1ibi</link>
      <guid>https://dev.to/abbeyperini/css-animated-button-with-offset-border-1ibi</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9GmOF9YV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jfwdly6qr2qcrjcepphs.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9GmOF9YV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jfwdly6qr2qcrjcepphs.gif" alt="Animated add button being clicked"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’m a believer in finding joy in the little things, and during my last project, that little thing was this button. I have been reading a lot about web design, and wanted my primary buttons to stand out in a big way. I had seen an image of a square button with an offset border while researching a design for an even earlier project, but never got the time to implement it. So for weeks, I’ve been trying to find the time to build this baby, and it was worth the wait.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#to-div-or-not-to-div" class="anchor"&gt;
  &lt;/a&gt;
  To div or not to div
&lt;/h1&gt;

&lt;p&gt;I researched a few ways to make the offset border without wrapping it in a container, but ultimately, I wanted an animation that looked like the button was moving into the offset border. If you are looking for an offset border and are ok with it moving with the button itself, you can use position: absolute; and z-index: -1; on the button with the ::before pseudo-selector to create an offset border. (Keep in mind transitions and animations using ::before are not supported in IE or Safari.) Similarly, you can also use an offset box shadow to create a double box effect that will move with the button.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-div-solution" class="anchor"&gt;
  &lt;/a&gt;
  The div solution
&lt;/h1&gt;

&lt;p&gt;First create a div container — using position: relative; and left:, we’ll position the whole button where we want it on the page. Changing the left: property will change its position horizontally, and you can use top: or bottom: to move it vertically. Adjusting the margin will also help.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.primary-button-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;90px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#EBCBAD&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, the actual button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.primary-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;58px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;82px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#EBCBAD&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#EBCBAD&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#123440&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-37px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;-25px&lt;/span&gt; &lt;span class="m"&gt;-37px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And, finally, the animation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.primary-button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you’d like to prevent the blue focus outline, you can use this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
   &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;However, you should add something else (like a new &lt;code&gt;background-color:&lt;/code&gt;) in its place.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;You can check out this button (and a sweet HTML radio button/label icon selector) in detail on my Github and in action at &lt;a href="http://bujo-to-go.surge.sh/#/index"&gt;BujoToGo&lt;/a&gt; (an app I wrote in a week). Tag me on Twitter (or Github or somewhere…) if you end up using this button! I would be thrilled to see it out in the world spreading more joy.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published on Medium on December 16, 2020&lt;/em&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Shipping Jamstack like a hero - beware, it's cool</title>
      <author>Geoffroy Empain</author>
      <pubDate>Mon, 25 Jan 2021 16:23:20 +0000</pubDate>
      <link>https://dev.to/gempain/shipping-jamstack-like-a-hero-beware-it-s-cool-2a3f</link>
      <guid>https://dev.to/gempain/shipping-jamstack-like-a-hero-beware-it-s-cool-2a3f</guid>
      <description>&lt;p&gt;So you love React, Angular, Vue, Gatsby and other Jamstack frameworks ? Hooray, I do too 🎉 &lt;/p&gt;

&lt;p&gt;But.... we've all had these issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How do I deploy ? With Netlify, Docker, or a good old HTTP server ? 🤔&lt;/li&gt;
&lt;li&gt;When I need to change my API URL... I have to rebuild and re-deploy 😞&lt;/li&gt;
&lt;li&gt;When I need to preview a small change... re-deploying takes forever 😞&lt;/li&gt;
&lt;li&gt;Managing SSL certificates is a pain. It should be automatic when I ship a new site 😡&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The solution: &lt;a href="https://github.com/getmeli/meli"&gt;Meli&lt;/a&gt;, a self-hosted platform built on top of the well-known &lt;a href="https://github.com/caddyserver/caddy"&gt;Caddy Server&lt;/a&gt;. Out of the box, you get automatic HTTPs, zero-downtime, and heavy-duty performance.&lt;/p&gt;

&lt;p&gt;I've installed Meli on my VPS, so I'll skip this part which takes about 2 minutes with Docker Compose, but checkout &lt;a href="https://docs.meli.sh/get-started/installation"&gt;the docs&lt;/a&gt; for instructions. From here, I'll assume you've installed Meli at &lt;code&gt;https://meli.company.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yl48NyKk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tzj5ts3lrp2vmfsbyy1y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yl48NyKk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tzj5ts3lrp2vmfsbyy1y.png" alt="Meli login scren"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-a-site-to-meli" class="anchor"&gt;
  &lt;/a&gt;
  Deploying a site to Meli
&lt;/h2&gt;

&lt;p&gt;Let's start with a very simple site, &lt;code&gt;dist/index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Meli example Vue.js app&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
Hello !
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once logged in to your Meli instance:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;create a site named &lt;code&gt;hello&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D2e1vSZQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ssge8x05d8snqqjre0vd.gif" alt="Create a site in Meli"&gt; &lt;/li&gt;
&lt;li&gt;get your site ID
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--brFMNEkn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vayv9ksga18ffn93u6uj.gif" alt="Get your site ID in Meli"&gt;
&lt;/li&gt;
&lt;li&gt;get your upload token
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aI1-Ibcg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b296yrvsely46lj0q65b.gif" alt="Get your site upload token in Meli"&gt; &lt;/li&gt;
&lt;li&gt;upload your site
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx @getmeli/cli upload &lt;span class="se"&gt;\&lt;/span&gt;
   ./dist &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--url&lt;/span&gt; http://localhost:80 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--site&lt;/span&gt; &lt;span class="s2"&gt;"8f30f74f-4b63-4dc3-b8dc-788ca43740a8"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--token&lt;/span&gt; &amp;lt;site-token&amp;gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--branch&lt;/span&gt; &lt;span class="s2"&gt;"latest"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Your site is now available at &lt;code&gt;https://hello.meli.company.com&lt;/code&gt; 🚀&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ncVrp7hu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ze7zn5ugh9uej7sihj70.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ncVrp7hu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ze7zn5ugh9uej7sihj70.png" alt="Example site in meli"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serve-your-site-at-httpshellocom" class="anchor"&gt;
  &lt;/a&gt;
  Serve your site at &lt;a href="https://hello.com"&gt;https://hello.com&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Okay, I'll agree, &lt;a href="https://hello.meli.company.com"&gt;https://hello.meli.company.com&lt;/a&gt; isn't really sexy. We want our awesome site to be served at &lt;code&gt;https://hello.com&lt;/code&gt;. To do this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In your Meli site, configure a custom domain with &lt;code&gt;hello.com&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IYIELHka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/901nr9xxaw7zr74h8z2o.gif" alt="Configure custom domain"&gt; &lt;/li&gt;
&lt;li&gt;In the DNS zone of &lt;code&gt;hello.com&lt;/code&gt;, add an &lt;code&gt;A&lt;/code&gt; record that points the IP of &lt;code&gt;meli.company.com&lt;/code&gt;. For subdomains like &lt;code&gt;sub.hello.com&lt;/code&gt;, you can use a &lt;code&gt;CNAME&lt;/code&gt; record that points to &lt;code&gt;hello.meli.domain.com&lt;/code&gt; &lt;strong&gt;only&lt;/strong&gt; when it is the &lt;strong&gt;single&lt;/strong&gt; record (all types combined) configured for that subdomain.&lt;/li&gt;
&lt;li&gt;Browse &lt;a href="https://hello.com"&gt;https://hello.com&lt;/a&gt;, and off you go !&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#deploying-to-meli-from-your-ci" class="anchor"&gt;
  &lt;/a&gt;
  Deploying to Meli from your CI
&lt;/h2&gt;

&lt;p&gt;You can also automatically deploy when you push to your Git repository. For example, with Github Actions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;push&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;12'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;publish"&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;npx @getmeli/cli@next upload \&lt;/span&gt;
            &lt;span class="s"&gt;./dist \&lt;/span&gt;
            &lt;span class="s"&gt;--url "https://meli.domain.com" \&lt;/span&gt;
            &lt;span class="s"&gt;--site "&amp;lt;your-site-id&amp;gt;" \&lt;/span&gt;
            &lt;span class="s"&gt;--token "$MELI_TOKEN"&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;MELI_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.MELI_TOKEN }}&lt;/span&gt;
          &lt;span class="c1"&gt;# using default GITHUB_TOKEN set by Github Actions&lt;/span&gt;
          &lt;span class="na"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that &lt;code&gt;--branch&lt;/code&gt; is not used here, it is auto-detected by the Meli CLI.&lt;/p&gt;

&lt;p&gt;With this setup, you'll get pull request previews in Github:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uG3ccLyn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2ncbu5osjdcw2ktegk3s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uG3ccLyn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2ncbu5osjdcw2ktegk3s.png" alt="Screen Shot 2021-01-25 at 15.40.50"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#runtime-environment-variables-in-your-static-site" class="anchor"&gt;
  &lt;/a&gt;
  Runtime environment variables in your static site
&lt;/h2&gt;

&lt;p&gt;Meli allows you to override any path in your site with dynamically generated content, per branch.&lt;/p&gt;

&lt;p&gt;Let's see how this works with a basic Vue app. We'll replace our &lt;code&gt;dist/index.html&lt;/code&gt; and upload it to our &lt;code&gt;hello&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Meli example Vue.js app&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"loading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Loading...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ error }}&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"env"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{{ env.name }}&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;/span&gt;{{JSON.stringify(env, null, 2)}}&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;el&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;created&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/env.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Notice that we're fetching &lt;code&gt;/env.json&lt;/code&gt;. We'll configure this file in Meli using the UI. For now, let's upload our site to our &lt;code&gt;latest&lt;/code&gt; branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx @getmeli/cli upload &lt;span class="se"&gt;\&lt;/span&gt;
   ./dist &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--url&lt;/span&gt; http://localhost:80 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--site&lt;/span&gt; &lt;span class="s2"&gt;"8f30f74f-4b63-4dc3-b8dc-788ca43740a8"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--token&lt;/span&gt; &amp;lt;site-token&amp;gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--branch&lt;/span&gt; &lt;span class="s2"&gt;"latest"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This branch will be available at &lt;code&gt;https://hello.meli.domain.com&lt;/code&gt;. Now let's upload it to a new branch named &lt;code&gt;demo&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx @getmeli/cli upload &lt;span class="se"&gt;\&lt;/span&gt;
   ./dist &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--url&lt;/span&gt; http://localhost:80 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--site&lt;/span&gt; &lt;span class="s2"&gt;"8f30f74f-4b63-4dc3-b8dc-788ca43740a8"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--token&lt;/span&gt; &amp;lt;site-token&amp;gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--branch&lt;/span&gt; &lt;span class="s2"&gt;"demo"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This branch will be served at &lt;code&gt;https://demo.hello.meli.domain.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, let's configure &lt;code&gt;/env.json&lt;/code&gt; in Meli:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;under branch &lt;code&gt;latest&lt;/code&gt;, add a file redirect for path &lt;code&gt;/env.json&lt;/code&gt; and with content &lt;code&gt;{"name": "prod"}&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LK05YVcN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/irp3c844lcswxgzngnvz.gif" alt="Add file redirect to latest branch"&gt; &lt;/li&gt;
&lt;li&gt;in under branch &lt;code&gt;demo&lt;/code&gt;, add a file redirect for path &lt;code&gt;/env.json&lt;/code&gt; and with content &lt;code&gt;{"name": "demo"}&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--njqnX0Mz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gu4f79lu5jl5tlop8mln.gif" alt="Create env redirect for demo branch"&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, when you go to &lt;code&gt;https://hello.meli.domain.com&lt;/code&gt;, you see this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OV9kdRgk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p2kctdr10xjyupfo9d34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OV9kdRgk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p2kctdr10xjyupfo9d34.png" alt="Environment preview of main branch in Meli demo site"&gt;&lt;/a&gt;&lt;br&gt;
and &lt;code&gt;https://demo.hello.meli.domain.com&lt;/code&gt; shows:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mQibmqeN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l03jwhcanwrb77cobrdr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mQibmqeN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l03jwhcanwrb77cobrdr.png" alt="Screen Shot 2021-01-25 at 14.45.24"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;p&gt;Meli is a really cool project which allows you to self-host your static sites and frontend apps. It features a lot of cool things, and more are to come.&lt;/p&gt;

&lt;p&gt;Further reading:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.meli.sh/"&gt;Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getmeli/meli"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/getmeli"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>angular</category>
      <category>vue</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Testing Rails 6 Zeitwerk Autoloading</title>
      <author>Marc Qualie</author>
      <pubDate>Mon, 25 Jan 2021 14:17:50 +0000</pubDate>
      <link>https://dev.to/marcqualie/testing-rails-6-zeitwerk-autoloading-23if</link>
      <guid>https://dev.to/marcqualie/testing-rails-6-zeitwerk-autoloading-23if</guid>
      <description>&lt;p&gt;Rails 6 introduced a new autoloader called Zeitwerk. While it has many many improvements, one of the main changes is how strict it is with filenames and the constants they define. Unless you have full coverage on your application (few apps actually reach 100%) it can be quite easy to end up with an app that won't boot in your staging/production environment.&lt;/p&gt;

&lt;p&gt;This is a welcome change from me, I believe it leads to much more stable and predictable codebases when the filenames and constants match 1:1. This can become an issue for anyone used to working with the rails classic autoloader since that allowed developers to get away with mostly anything inside their files.&lt;/p&gt;

&lt;p&gt;Adding the following spec to any new rails 6+ project will protect from such problems, as the autoloading will be triggered in the CI environment instead; before merge and deploy. This is also perfect if you're upgrading any older Rails 5 apps and you're nervous about switching to the new autoloader.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# spec/zeitwerk_spec.rb&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rails_helper'&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'Zeitwerk'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'eager loads all files'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="no"&gt;Zeitwerk&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Loader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;eager_load_all&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_not&lt;/span&gt; &lt;span class="n"&gt;raise_error&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Original reference post for code snippet &lt;a href="https://mvaragnat.medium.com/rails-6-and-rspec-how-to-test-zeitwerk-mode-81782b6d3388"&gt;Rails 6 and Rspec : How to test Zeitwerk mode&lt;/a&gt; by Matthieu Varagnat&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can take this a step further on CI and have a dedicated job that runs specifically to check the autoloading. This can be dne before the tests (to avoid wasted minutes), or in parallel to highlight an autoloading issues in your PR status checks.&lt;/p&gt;

&lt;p&gt;The following line can run in any shell to perform the same job as the rspec snippet above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails r &lt;span class="s1"&gt;'Zeitwerk::Loader.eager_load_all'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here is an example of my CircleCI flow for a recently upgraded rails project. Notice how Zeitwerk failure prevented a ton of other jobs triggering, which would have used quite a lot of resources and failed much later.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ayBhr4NP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/SObuqzISCSF58TfizHGx" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ayBhr4NP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/SObuqzISCSF58TfizHGx" alt="Screen-Shot-2021-01-20-14-02-56.26.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GBoWzojQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/vrfoog6yQTacEtKB7y0x" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GBoWzojQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/vrfoog6yQTacEtKB7y0x" alt="Screen-Shot-2021-01-20-14-05-09.95.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This, of course, does not replace the need for an extensive test suite, but it can save you in the early days of prototype development where a typo or unused class can slip into the codebase when working at a fast pace.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>ci</category>
      <category>circleci</category>
    </item>
    <item>
      <title>How the Web Works</title>
      <author>Lanre Fagbeyiro</author>
      <pubDate>Mon, 25 Jan 2021 13:11:19 +0000</pubDate>
      <link>https://dev.to/lanrewaju/how-the-web-works-41pn</link>
      <guid>https://dev.to/lanrewaju/how-the-web-works-41pn</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ILjeMe8J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610578125443/PG_IEHzLD.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ILjeMe8J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610578125443/PG_IEHzLD.jpeg" alt="pexels-photo-206901.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by  &lt;a href="https://www.pexels.com/@pixabay"&gt;Pixabay&lt;/a&gt;  on  &lt;a href="https://www.pexels.com/photo/abstract-arachnid-art-black-and-white-206901/"&gt;Pexels&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-web-is-not-the-internet" class="anchor"&gt;
  &lt;/a&gt;
  The Web is not the Internet
&lt;/h2&gt;

&lt;p&gt;Most people have gotten accustomed to using the terms “internet” and “web” interchangeably. Although the net and web are married to each other, they are fundamentally different. In simple terms, the internet is the connection between countless, separate servers, computers, and devices, as I explain in detail  &lt;a href="https://dev.to/lanrewaju/how-the-internet-works-3jno"&gt;here.&lt;/a&gt;  While the World Wide Web or Web is just a common digital space for information exchange, facilitated by global computer networks or the Internet, you connect to the Internet to access the web. The Web is the medium where we edit, discover, and share information — through links — according to a standard language: HTML. Now we understand that the internet connects participants while the web connects information.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#history-of-the-web" class="anchor"&gt;
  &lt;/a&gt;
  History of the Web
&lt;/h2&gt;

&lt;p&gt;Before the web or internet existed, there were computers but they were big and lonely and could not really talk to one another. In order to connect disparate global machines, you would need a network of networks, this need led to the rise of the internet.&lt;/p&gt;

&lt;p&gt;On October 29, 1969,  &lt;a href="https://en.wikipedia.org/wiki/Leonard_Kleinrock"&gt;Leonard Kleinrock&lt;/a&gt;  and a team at UCLA needed a way to share documents through the internet so; they decided to send the word “LOGIN” to a different model of a computer at Standford. They sent the “L” and it arrived, they sent the “O,” and it arrived and then the system crashed but still the first message sent over the internet was a big deal and it was literally “LO.”&lt;/p&gt;

&lt;p&gt;Two decades later, CERN was working on a variety of projects with different people and technologies, the way information was organized on the internet was illogical, and based on hierarchies. It was lame and  &lt;a href="https://en.wikipedia.org/wiki/Tim_Berners-Lee"&gt;Tim Berners-Lee&lt;/a&gt;  was not happy with it.&lt;/p&gt;

&lt;p&gt;In March of 1989, Tim Berners-Lee wrote a powerful paper simply titled “Information Management: A Proposal”. He argued that notes with links like references between them are far more useful than a fixed hierarchical system. Instead of trees, Berners-Lee was proposing a web. Webbed systems that connect documents in non-linear ways already existed, they were called hypertext but Tim Berners-Lee officiated the marriage of hypertext webs and the internet to produce a web that was worldwide.&lt;/p&gt;

&lt;p&gt;The first website was  &lt;a href="http://info.cern.ch/"&gt;info.cern.ch.&lt;/a&gt;  Today it provides a simulator that allows us to view the web as it appeared as a baby.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-the-web-works" class="anchor"&gt;
  &lt;/a&gt;
  How the Web Works
&lt;/h2&gt;

&lt;p&gt;When talking about how the web works, we have to mention HTTP. The HTTP protocol is the most used internet protocol in the world and it stands for Hypertext Transfer Protocol. This is a protocol and a standardized set of rules for how a form of communication should work.&lt;/p&gt;

&lt;p&gt;HTTP is a set of conventions that dictate how a client like a web browser on your MAC or PC talks to a web server and it is a protocol in the sense that it’s not a programming language per se, more like a set of predetermined talking points or greetings. HTTPS is HTTP with encryption, which stands for Hypertext Transfer Protocol Secure, so the messages exchanged between the client and the server are encrypted.&lt;/p&gt;

&lt;p&gt;HTTP is an application layer protocol that allows web-based applications to communicate and exchange data. You can think of HTTP as the messenger of the web, it is a TCP/IP based protocol and is used to deliver contents like images, videos, audios, documents, etc.&lt;/p&gt;

&lt;p&gt;Documents are transferred on the web via HTTP and are identified by URLs — Uniform Resource Locators.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#requestresponse-cycle" class="anchor"&gt;
  &lt;/a&gt;
  Request-Response Cycle
&lt;/h3&gt;

&lt;p&gt;A request-response cycle refers to the complete flow of information from when you send a request by say, making a google search until when you receive a response in the form of your search results. The process consists of two basic actors; the client and the server. While you might consider yourself the client, and you aren’t completely wrong, to the web your web browser application is the true client. It makes the request and the server, in this case, one of Google’s servers, literally serves by responding to this request and giving you the information you requested.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html" class="anchor"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zhyv3s-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611579743612/8xMkjJNk5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zhyv3s-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611579743612/8xMkjJNk5.gif" alt="structure.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The HTML file that stands for Hypertext Markup Language is responsible for the structure and content of your website. So if a website were a house, then the HTML would be the builders who come in to build the walls, demarcate the kitchen, toilet, basically establish the structure of your house. When we write HTML code, we also build up the structure of our website. We could use HTML to add an image or button or text box, whatever it is that you need in your website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css" class="anchor"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VAWm3y8b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611579815524/q0yVUdhpt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VAWm3y8b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611579815524/q0yVUdhpt.gif" alt="styling.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second type of file is the CSS file, which stands for Cascading Style Sheets. These files are responsible for the presentation of the content. They are for styling and for laying out the elements on your website. If you were building a house, then these would be the painters and decorators. They add stylistic flourishes to your place and generally making it look the way you want it to. This is what CSS code does as well. When you incorporate CSS, it allows you to specify how you want your website to look. Say, for instance, we create a button using HTML, but it looks boring and we want to make it red. CSS allows us to specify the colour, grading, and other visual elements of that button. As well, we can specify fonts, font styles, and so on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript" class="anchor"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tnx9Hixq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611579926438/HocMESUAA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tnx9Hixq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611579926438/HocMESUAA.gif" alt="ezgif.com-gif-maker.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The final component is the JavaScript file and this is the code that allows your website to actually do things or have behavior, it allows interactive effects, DOM manipulation, and much more. As you were building your house, you would have an electrician come in to connect the wires so that the lightbulbs actually switch on. A plumber to do the plumbing so that you can open the bathroom tap. JavaScript does exactly these, it allows your website to function and be interactive. Take, for example, that red button we added earlier on with HTML and CSS code only when we have the JavaScript code it can actually do something interesting like send off an email.&lt;/p&gt;

&lt;p&gt;Going back to the Google website as an example, once we receive these files from the Google server, our browser loads up the HTML files, we’ll get to see the structure of the website. Namely, an image that has their logo, two buttons, and a text box where we can enter our search.&lt;/p&gt;

&lt;p&gt;Now when we receive the CSS files, these will modify the appearance of all of the components. We don’t have any more images, but they now look the way that google wanted them to.&lt;/p&gt;

&lt;p&gt;Finally, when we incorporate the JavaScript files then our website actually starts having some functionality and is able to do things rather than just display images and text.&lt;/p&gt;

&lt;p&gt;In a nutshell, we need three files which are HTML, CSS, and JavaScript to create web pages and use HTTP, TCP/IP protocols to send information.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>design</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Linux Terminal: The Ultimate Cheat Sheet</title>
      <author>Mauro Garcia</author>
      <pubDate>Mon, 25 Jan 2021 12:11:38 +0000</pubDate>
      <link>https://dev.to/maurogarcia_19/linux-terminal-the-ultimate-cheat-sheet-2g5b</link>
      <guid>https://dev.to/maurogarcia_19/linux-terminal-the-ultimate-cheat-sheet-2g5b</guid>
      <description>&lt;p&gt;If you're a Linux user, the Terminal is probably the most powerful tool you would ever have. But the thing about the Terminal is that you need to learn how to use it if you want to benefit from it.&lt;/p&gt;

&lt;p&gt;For the last few months, I've been playing with the Terminal a lot, and I came up with a long list of useful commands that I use regularly. Please let me know if I missed something important so I can add it to future posts.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Basic commands&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Zoom in ➜ &lt;code&gt;[CTRL] + [+]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Zoom out ➜ &lt;code&gt;[CTRL] + [-]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Print working directory ➜ &lt;code&gt;pwd&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Clear the terminal ➜ &lt;code&gt;[CTRL] + [l]&lt;/code&gt; or &lt;code&gt;clear&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Assign an alias ➜ &lt;code&gt;alias [alias-name]="[command-to-run]"&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Source a file ➜ &lt;code&gt;source [name-of-the-file-to-read-and-execute]&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Change directory command (cd)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Move to a specific directory ➜ &lt;code&gt;cd [name-of-your-directory]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Move to the parent directory ➜ &lt;code&gt;cd ..&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Move to the home directory ➜ &lt;code&gt;cd&lt;/code&gt; or &lt;code&gt;cd ~&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Move to the last directory yo were in ➜ &lt;code&gt;cd -&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;List command (ls)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;List all visible files and directories ➜ &lt;code&gt;ls&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;List all files and directories (include hidden files) ➜ &lt;code&gt;ls -a&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Long Listed Format ➜ &lt;code&gt;ls -l&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Human Readable Format ➜ &lt;code&gt;ls -lh&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Combining arguments: Human Readable Format + Hidden files ➜ &lt;code&gt;ls -lah&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Learn more about the ls command ➜ &lt;code&gt;man ls&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Search&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Locate the binary for a program ➜ &lt;code&gt;which [name-of-the-program]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Locate the binary, source and user manual for a program ➜ &lt;code&gt;whereis [name-of-the-program]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Locate files and directories by name ➜ &lt;code&gt;find [path-to-search] -iname [name-of-the-file-you-want-to-search]&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Learn more about the find command ➜ &lt;code&gt;man find&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Get a brief description for a command ➜ &lt;code&gt;whatis [command-name]&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;History&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Get previous commands (one by one) ➜ Use the &lt;code&gt;Up Arrow key&lt;/code&gt; ⬆️ to navigate your history&lt;/li&gt;
&lt;li&gt;Get previous commands (full list) ➜ &lt;code&gt;history&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Repeat commands from history (bang command) ➜ &lt;code&gt;history&lt;/code&gt; ➜ &lt;code&gt;![number-of-the-command-to-repeat]&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Repeat last command (bang-bang command) ➜ &lt;code&gt;!!&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Working with files and directories&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Create a new file (without open it) ➜ &lt;code&gt;touch [name-of-your-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create a new file using a text editor ➜ &lt;code&gt;vim [name-of-your-file]&lt;/code&gt; or &lt;code&gt;nano [name-of-your-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Copy a file ➜ &lt;code&gt;cp [source-path-of-your-file] [destination-path-for-your-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create a new directory ➜ &lt;code&gt;mkdir [new-directory-name]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Remove an empty directory ➜ &lt;code&gt;rmdir [name-of-the-directory-you-want-to-remove]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Remove command (rm)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Remove a file ➜ &lt;code&gt;rm [name-of-your-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Remove a directory recursively (use with caution) ➜ &lt;code&gt;rm -rf [name-of-your-directory]&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Concatenate command (cat)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;View a single file ➜ &lt;code&gt;cat [name-of-your-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;View a single file including the line numbers ➜ &lt;code&gt;cat -n [name-of-your-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Copy the content of one file to another file ➜ &lt;code&gt;cat [filename-whose-contents-is-to-be-copied] &amp;gt; [destination-filename]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Learn more about the cat command ➜ &lt;code&gt;man cat&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Move command (mv)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Move a file ➜ &lt;code&gt;mv [source-path-of-your-file] [destination-path-for-your-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Rename a file ➜ &lt;code&gt;mv [name-of-your-file] [new name-of-your-file]&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#basic-commands" class="anchor"&gt;
  &lt;/a&gt;
  Basic commands
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#zoom-in" class="anchor"&gt;
  &lt;/a&gt;
  Zoom in
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;[CTRL] + [+]&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#zoom-out" class="anchor"&gt;
  &lt;/a&gt;
  Zoom out
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;[CTRL] + [-]&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pwd-print-working-directory-command" class="anchor"&gt;
  &lt;/a&gt;
  pwd: Print Working Directory command
&lt;/h2&gt;

&lt;p&gt;It prints the working directory path, starting from the root directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes

mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#clear-command" class="anchor"&gt;
  &lt;/a&gt;
  Clear command
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;clear&lt;/code&gt; or &lt;code&gt;[CTRL] + [l]&lt;/code&gt; to clear the entire terminal screen and get a clean terminal to keep working.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alias-command" class="anchor"&gt;
  &lt;/a&gt;
  Alias command
&lt;/h2&gt;

&lt;p&gt;If you usually run a long command regularly and want to save time, you can assign a shorter alias for that command. Type &lt;code&gt;alias [alias-name]="[command-to-run]"&lt;/code&gt; to assign a new alias:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Running the ls command&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;projects

&lt;span class="c"&gt;## Assign an alias, so we don't need to add the arguments every time we need to list something&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;alias ls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ls -lah"&lt;/span&gt;

&lt;span class="c"&gt;## Running ls again (we get the result of `ls -lah`)&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;total 16K
drwxr-xr-x 1 mauro_codes mauro_codes  512 Jan 22 17:41 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 root        root         512 Jan 22 10:38 ..
&lt;span class="nt"&gt;-rw-------&lt;/span&gt; 1 mauro_codes mauro_codes 3.0K Jan 22 23:58 .bash_history
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes  220 Jan 22 10:38 .bash_logout
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes 3.7K Jan 22 17:32 .bashrc
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes  807 Jan 22 10:38 .profile
drwxr-xr-x 1 mauro_codes mauro_codes  512 Jan 22 12:55 projects
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note that this alias won't be persisted for future uses. If you want to persist your aliases, add them at the end of your .bashrc file located in your home directory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#source-a-file" class="anchor"&gt;
  &lt;/a&gt;
  Source a file
&lt;/h2&gt;

&lt;p&gt;You can use the &lt;code&gt;source&lt;/code&gt; command to read and execute the content of a file line by line. Type &lt;code&gt;source [name-of-the-file-to-read-and-execute]&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Print the content of the script.txt file (contains two commands)&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;script.txt
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"hello world"&lt;/span&gt; &lt;span class="c"&gt;## Print a hello message&lt;/span&gt;
cal                &lt;span class="c"&gt;## Print a calendar&lt;/span&gt;

&lt;span class="c"&gt;## Source the script.txt to run each command inside&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source &lt;/span&gt;script.txt
hello world

    January 2021
Su Mo Tu We Th Fr Sa
                1  2
 3  4  5  6  7  8  9
10 11 12 13 14 15 16
17 18 19 20 21 22 23
24 25 26 27 28 29 30
31
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#change-directory-command-cd" class="anchor"&gt;
  &lt;/a&gt;
  Change Directory command (cd)
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#move-to-a-specific-directory" class="anchor"&gt;
  &lt;/a&gt;
  Move to a specific directory
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;cd [name-of-your-directory]&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check current directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes

&lt;span class="c"&gt;## Change directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;projects/

&lt;span class="c"&gt;## Check new working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#move-to-the-parent-directory" class="anchor"&gt;
  &lt;/a&gt;
  Move to the parent directory
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;cd ..&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check current directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects

&lt;span class="c"&gt;## Move to the parent directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ..

&lt;span class="c"&gt;## Check new working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#move-to-the-home-directory" class="anchor"&gt;
  &lt;/a&gt;
  Move to the home directory
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;cd ~&lt;/code&gt; or just &lt;code&gt;cd&lt;/code&gt; as an alternative&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check current directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/awesome-app&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects/awesome-app

&lt;span class="c"&gt;## Move to the home directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/awesome-app&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~

&lt;span class="c"&gt;## Check new working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#move-to-the-last-directory-you-were-in" class="anchor"&gt;
  &lt;/a&gt;
  Move to the last directory you were in
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;cd -&lt;/code&gt; to navigate to the previous directory you were in&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check the current directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects/landing-page

&lt;span class="c"&gt;## Move to another directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /home/mauro_codes/

&lt;span class="c"&gt;## Check the new directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes

&lt;span class="c"&gt;## Go back to the previus directory you were in&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; -
/home/mauro_codes/projects/landing-page
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#list-command-ls" class="anchor"&gt;
  &lt;/a&gt;
  List command (ls)
&lt;/h1&gt;

&lt;p&gt;Lists the content of the directory you're currently in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#list-all-visible-files-and-directories" class="anchor"&gt;
  &lt;/a&gt;
  List all visible files and directories
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;ls&lt;/code&gt; without any additional argument to get all the files and directories (this command will exclude hidden files like the &lt;a href="https://wiki.archlinux.org/index.php/Dotfiles"&gt;dotfiles&lt;/a&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects

&lt;span class="c"&gt;## List the content for the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;awesome-app  landing-page  nextjs-tailwindcss-blog-starter  personal-blog
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#list-all-files-and-directories" class="anchor"&gt;
  &lt;/a&gt;
  List all files and directories
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;ls -a&lt;/code&gt; to get all the files and directories (including the hidden files)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects

&lt;span class="c"&gt;## List the content for the working directory (including hidden files)&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt;
&lt;span class="nb"&gt;.&lt;/span&gt;  ..  .config  .configu  awesome-app  landing-page  nextjs-tailwindcss-blog-starter  personal-blog
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#long-listed-format" class="anchor"&gt;
  &lt;/a&gt;
  Long Listed Format
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;ls -l&lt;/code&gt; to get all the visible files and directories including additional metadata like permissions, owner, size and modified date and time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/nextjs-tailwindcss-blog-starter&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects/nextjs-tailwindcss-blog-starter

&lt;span class="c"&gt;## List the content for the working directory (using the long listed format)&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/nextjs-tailwindcss-blog-starter&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-l&lt;/span&gt;
total 140
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes   4487 Jan 22 12:55 README.md
drwxr-xr-x 1 mauro_codes mauro_codes    512 Jan 22 12:55 components
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes   1068 Jan 22 12:55 config.ts
drwxr-xr-x 1 mauro_codes mauro_codes    512 Jan 22 12:55 helpers
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#human-readable-format" class="anchor"&gt;
  &lt;/a&gt;
  Human Readable Format
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;ls -lh&lt;/code&gt; to get all the visible files and directories in long-listed format, but with a Human Readable Format (User-friendly file size).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/nextjs-tailwindcss-blog-starter&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects/nextjs-tailwindcss-blog-starter

&lt;span class="c"&gt;## List the content for the working directory (using the long listed format + human readable format)&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/nextjs-tailwindcss-blog-starter&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lh&lt;/span&gt;
total 140K
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes 4.4K Jan 22 12:55 README.md
drwxr-xr-x 1 mauro_codes mauro_codes  512 Jan 22 12:55 components
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes 1.1K Jan 22 12:55 config.ts
drwxr-xr-x 1 mauro_codes mauro_codes  512 Jan 22 12:55 helpers
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#combining-arguments" class="anchor"&gt;
  &lt;/a&gt;
  Combining arguments
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;ls -lah&lt;/code&gt; to get all the files and directories (including hidden files) in Human Readable Format.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/nextjs-tailwindcss-blog-starter&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects/nextjs-tailwindcss-blog-starter

&lt;span class="c"&gt;## List the content for the working directory (include hidden files + human readable format)&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/nextjs-tailwindcss-blog-starter&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 140K
drwxr-xr-x 1 mauro_codes mauro_codes  512 Jan 22 13:08 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes  512 Jan 22 12:55 ..
drwxr-xr-x 1 mauro_codes mauro_codes  512 Jan 22 12:55 .git
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes  362 Jan 22 12:55 .gitignore
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes 4.4K Jan 22 12:55 README.md
drwxr-xr-x 1 mauro_codes mauro_codes  512 Jan 22 12:55 components
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes 1.1K Jan 22 12:55 config.ts
drwxr-xr-x 1 mauro_codes mauro_codes  512 Jan 22 12:55 helpers
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#learn-more-about-the-raw-ls-endraw-command" class="anchor"&gt;
  &lt;/a&gt;
  Learn more about the &lt;code&gt;ls&lt;/code&gt; command
&lt;/h2&gt;

&lt;p&gt;There are dozens of arguments that you can use with the &lt;code&gt;ls&lt;/code&gt; command. If you want to dig dipper,&lt;br&gt;
type &lt;code&gt;man ls&lt;/code&gt; in your terminal to display the user manual for the &lt;code&gt;ls&lt;/code&gt; command.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#search" class="anchor"&gt;
  &lt;/a&gt;
  Search
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#locate-the-binary-for-a-program" class="anchor"&gt;
  &lt;/a&gt;
  Locate the binary for a program
&lt;/h2&gt;

&lt;p&gt;If you want to locate where the binary (executable) for a specific command or program is located. You can use the &lt;code&gt;which&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Locate binary for the ls command&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;which &lt;span class="nb"&gt;ls&lt;/span&gt;
/usr/bin/ls
&lt;span class="c"&gt;## Locate binary for git&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;which git
/usr/bin/git
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#locate-the-binary-source-and-user-manual-for-a-program" class="anchor"&gt;
  &lt;/a&gt;
  Locate the binary, source, and user manual for a program
&lt;/h2&gt;

&lt;p&gt;You can use the &lt;code&gt;whereis&lt;/code&gt; command to locate the binary, source, and user manual for a program. You can use the &lt;code&gt;-b&lt;/code&gt;, &lt;code&gt;-m&lt;/code&gt;, and &lt;code&gt;-s&lt;/code&gt; arguments to limit the results to binaries, manual and source, respectively&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Locate binary, manual, and source for git&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;whereis git
git: /usr/bin/git /mnt/c/Program Files/Git/cmd/git.exe /usr/share/man/man1/git.1.gz
&lt;span class="c"&gt;## Locate only binary and manual for Git, and only the manual for ls command&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;whereis &lt;span class="nt"&gt;-bm&lt;/span&gt; git &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="nb"&gt;ls
&lt;/span&gt;git: /usr/bin/git /mnt/c/Program Files/Git/cmd/git.exe /usr/share/man/man1/git.1.gz
&lt;span class="nb"&gt;ls&lt;/span&gt;: /usr/share/man/man1/ls.1.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#locate-files-and-directories-by-name" class="anchor"&gt;
  &lt;/a&gt;
  Locate files and directories by name
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;find [path-to-search] -iname [name-of-the-file-you-want-to-search]&lt;/code&gt; to find any file or directory that contain the given name in their title. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The path to search is optional. If it is not specified, the &lt;code&gt;find&lt;/code&gt; command will run on your current working directory (and its descendants)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;-iname&lt;/code&gt; argument means that our search will be case insensitive.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;- If you want to learn more about this &lt;span class="nb"&gt;command&lt;/span&gt;, &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;man find&lt;span class="sb"&gt;`&lt;/span&gt; to display the user manual.
&lt;span class="c"&gt;## Check current working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects

&lt;span class="c"&gt;## Find files that contain "posts" on my current working directory and its descendants&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;find &lt;span class="nt"&gt;-iname&lt;/span&gt; posts
./nextjs-tailwindcss-blog-starter/pages/posts
./nextjs-tailwindcss-blog-starter/posts
&lt;span class="c"&gt;## Find files that contain "posts" on a specific directory and its descendants&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;find ./nextjs-tailwindcss-blog-starter/pages/ &lt;span class="nt"&gt;-iname&lt;/span&gt; posts
./nextjs-tailwindcss-blog-starter/pages/posts
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#get-a-brief-description-for-a-command" class="anchor"&gt;
  &lt;/a&gt;
  Get a brief description for a command
&lt;/h2&gt;

&lt;p&gt;If you don't know what a certain command does, Type &lt;code&gt;whatis [command-name]&lt;/code&gt; like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Asking about the cat command&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;whatis &lt;span class="nb"&gt;cat
cat&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;              - concatenate files and print on the standard output
&lt;span class="c"&gt;## Asking about the find command&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;whatis find
find &lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;             - search &lt;span class="k"&gt;for &lt;/span&gt;files &lt;span class="k"&gt;in &lt;/span&gt;a directory hierarchy
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#history" class="anchor"&gt;
  &lt;/a&gt;
  History
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#get-previous-commands-one-by-one" class="anchor"&gt;
  &lt;/a&gt;
  Get previous commands (one by one)
&lt;/h2&gt;

&lt;p&gt;You can access your recent command by pressing the &lt;code&gt;Up Arrow key&lt;/code&gt; ⬆️. This is very useful if you want to repeat your last command. Let's say we move to a specific directory, and then we check our working directory like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Move to a specific directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;projects/awesome-app/

&lt;span class="c"&gt;## Check the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/awesome-app&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects/awesome-app
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;⬆️ We'll get the &lt;code&gt;pwd&lt;/code&gt; command&lt;/p&gt;

&lt;p&gt;⬆️⬆️ We'll get the &lt;code&gt;cd projects/awesome-app&lt;/code&gt; command&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#repeat-previous-commands-full-list" class="anchor"&gt;
  &lt;/a&gt;
  Repeat previous commands (full list)
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;history&lt;/code&gt; to get a numerated list containing the previous commands you run. Then, type &lt;code&gt;![number-of-the-command-to-repeat]&lt;/code&gt; to repeat that command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Get the history list&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;history
    &lt;/span&gt;1  &lt;span class="nb"&gt;ls
    &lt;/span&gt;2  clear
    3  &lt;span class="nb"&gt;pwd
    &lt;/span&gt;4  &lt;span class="nb"&gt;mkdir &lt;/span&gt;projects
    5  &lt;span class="nb"&gt;cd &lt;/span&gt;projects

&lt;span class="c"&gt;## Run command number 1 (ls)&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;1
projects
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#repeat-the-last-command" class="anchor"&gt;
  &lt;/a&gt;
  Repeat the last command
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;!!&lt;/code&gt; (bang-bang command) to repeat the last command. This is especially useful when you forgot to add &lt;code&gt;sudo&lt;/code&gt; on your last command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Running update without sudo (Permission denied)&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;apt update
Reading package lists... Done
E: Could not open lock file /var/lib/apt/lists/lock - open &lt;span class="o"&gt;(&lt;/span&gt;13: Permission denied&lt;span class="o"&gt;)&lt;/span&gt;
E: Unable to lock directory /var/lib/apt/lists/
W: Problem unlinking the file /var/cache/apt/pkgcache.bin - RemoveCaches &lt;span class="o"&gt;(&lt;/span&gt;13: Permission denied&lt;span class="o"&gt;)&lt;/span&gt;
W: Problem unlinking the file /var/cache/apt/srcpkgcache.bin - RemoveCaches &lt;span class="o"&gt;(&lt;/span&gt;13: Permission denied&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;## Using the bang-bang command to append the last command after sudo&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;sudo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; password &lt;span class="k"&gt;for &lt;/span&gt;mauro_codes:
Get:1 http://security.ubuntu.com/ubuntu focal-security InRelease &lt;span class="o"&gt;[&lt;/span&gt;109 kB]
Hit:2 http://archive.ubuntu.com/ubuntu focal InRelease
Get:3 http://archive.ubuntu.com/ubuntu focal-updates InRelease &lt;span class="o"&gt;[&lt;/span&gt;114 kB]
...
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#working-with-files-and-directories" class="anchor"&gt;
  &lt;/a&gt;
  Working with files and directories
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#create-a-new-file-without-open-it" class="anchor"&gt;
  &lt;/a&gt;
  Create a new file (without open it)
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;touch [name-of-your-file]&lt;/code&gt; to create a new file without open it on a text editor. This is useful if you just want to create an empty file but don't need to change it right now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects/landing-page

&lt;span class="c"&gt;## List the content for the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md

&lt;span class="c"&gt;## Create an empty js file&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;main.js

&lt;span class="c"&gt;## List the content for the working directory (including your new file) &lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  main.js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-a-new-file-using-a-text-editor" class="anchor"&gt;
  &lt;/a&gt;
  Create a new file using a text editor
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;nano [name-of-your-file]&lt;/code&gt; to create a new file and open it using the text editor &lt;a href="https://www.nano-editor.org/"&gt;nano&lt;/a&gt;. If you want to learn more about nano, you can Type &lt;code&gt;man nano&lt;/code&gt; on your terminal to display the nano user manual.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects/landing-page

&lt;span class="c"&gt;## List the content for the working directory &lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  main.js

mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;nano index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After running the last command, you'll be able to edit the file using nano:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TqGbrKcm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3MxGlF2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TqGbrKcm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3MxGlF2.png" alt="Nano text editor"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#copy-a-file" class="anchor"&gt;
  &lt;/a&gt;
  Copy a file
&lt;/h2&gt;

&lt;p&gt;You can use the &lt;code&gt;cp&lt;/code&gt; (Copy) command to copy files and directories&lt;br&gt;
Type &lt;code&gt;cp [source-path-of-your-file] [destination-path-for-your-file]&lt;/code&gt; to copy a file into a new destination.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## List the content for the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  index.html  main.js  temp

&lt;span class="c"&gt;## Copy the README.md file into the temp directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cp &lt;/span&gt;README.md temp/README.md

&lt;span class="c"&gt;## List the content for the working directory and check that your file is still there.&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  index.html  main.js  temp

&lt;span class="c"&gt;## List the temp directory's content and check if your file was copied.&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls &lt;/span&gt;temp/
README.md  index-copy.html
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-a-new-directory" class="anchor"&gt;
  &lt;/a&gt;
  Create a new directory
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;mkdir [new-directory-name]&lt;/code&gt; to create a new directory in your current working directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## List the content for the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  index-empty-copy.html  index.html  main.js

&lt;span class="c"&gt;## Create a new directory called "scripts"&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;scripts

&lt;span class="c"&gt;## List the content to check if our new directory was created&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  index-empty-copy.html  index.html  main.js  scripts
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#remove-an-empty-directory" class="anchor"&gt;
  &lt;/a&gt;
  Remove an empty directory
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;rmdir [name-of-the-directory-you-want-to-remove]&lt;/code&gt; to remove an empty directory. Please note that this command will only work with empty directories.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## List the content for the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  index.html  main.js  temp

&lt;span class="c"&gt;## Remove the "temp" empty directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;rmdir &lt;/span&gt;temp

&lt;span class="c"&gt;## List the content and check that the directory was removed&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  index.html  main.js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#remove-command-rm" class="anchor"&gt;
  &lt;/a&gt;
  Remove command (rm)
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#remove-a-file" class="anchor"&gt;
  &lt;/a&gt;
  Remove a file
&lt;/h3&gt;

&lt;p&gt;Type &lt;code&gt;rm [name-of-your-file]&lt;/code&gt; to remove a file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## List the content for the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page/temp&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  index-copy.html

&lt;span class="c"&gt;## Remove the index-copy.html file&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page/temp&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;rm &lt;/span&gt;index-copy.html

&lt;span class="c"&gt;## List the content for the working directory and check that the file was removed&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page/temp&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#remove-a-directory-recursively" class="anchor"&gt;
  &lt;/a&gt;
  Remove a directory recursively
&lt;/h3&gt;

&lt;p&gt;Type &lt;code&gt;rm -rfi [name-of-your-directory]&lt;/code&gt; to recursively remove a directory with all its files and sub-directories.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Please be careful!&lt;/strong&gt; This is one of the most dangerous commands you can run. If you run &lt;code&gt;rm -rfi /&lt;/code&gt;, you'll erase your entire root partition. Be sure to specify the path for the directory you want to delete. In this example, In this example, I include the &lt;code&gt;-i&lt;/code&gt; argument to ask for confirmation.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## List the content of the temp folder (It has one file)&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls &lt;/span&gt;temp/
total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 24 19:45 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 24 19:44 ..
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes   8 Jan 24 19:45 file.txt

&lt;span class="c"&gt;## Recursively remove the temp folder&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; temp/

&lt;span class="c"&gt;## Check that the temp folder was removed&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls &lt;/span&gt;temp/
&lt;span class="nb"&gt;ls&lt;/span&gt;: cannot access &lt;span class="s1"&gt;'temp/'&lt;/span&gt;: No such file or directory
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#concatenate-command-cat" class="anchor"&gt;
  &lt;/a&gt;
  Concatenate command (cat)
&lt;/h2&gt;

&lt;p&gt;You can use the &lt;code&gt;cat&lt;/code&gt; (concatenate) command to read data from a file and print their content as output&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#view-a-single-file" class="anchor"&gt;
  &lt;/a&gt;
  View a single file
&lt;/h3&gt;

&lt;p&gt;Type &lt;code&gt;cat [name-of-your-file]&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects/landing-page

&lt;span class="c"&gt;## Print the content of the index.html file&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;index.html
&amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;DOCTYPE html&amp;gt;
&amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &amp;lt;&lt;span class="nb"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;meta &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"utf-8"&lt;/span&gt; /&amp;gt;
    &amp;lt;meta http-equiv&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"x-ua-compatible"&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ie=edge"&lt;/span&gt; /&amp;gt;
    &amp;lt;meta &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"viewport"&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"width=device-width, initial-scale=1"&lt;/span&gt; /&amp;gt;

    &amp;lt;title&amp;gt;My Website&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;
    &amp;lt;script &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"js/main.js"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#view-a-single-file-including-the-line-numbers" class="anchor"&gt;
  &lt;/a&gt;
  View a single file including the line numbers
&lt;/h3&gt;

&lt;p&gt;Type &lt;code&gt;cat -n [name-of-your-file]&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects/landing-page

&lt;span class="c"&gt;## Print the content of the index.html file&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; index.html
     1  &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;DOCTYPE html&amp;gt;
     2  &amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     3    &amp;lt;&lt;span class="nb"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     4      &amp;lt;meta &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"utf-8"&lt;/span&gt; /&amp;gt;
     5      &amp;lt;meta http-equiv&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"x-ua-compatible"&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ie=edge"&lt;/span&gt; /&amp;gt;
     6      &amp;lt;meta &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"viewport"&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"width=device-width, initial-scale=1"&lt;/span&gt; /&amp;gt;
     7
     8      &amp;lt;title&amp;gt;My Website&amp;lt;/title&amp;gt;
     9    &amp;lt;/head&amp;gt;
    10
    11    &amp;lt;body&amp;gt;
    12      &amp;lt;script &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"js/main.js"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&amp;lt;/script&amp;gt;
    13    &amp;lt;/body&amp;gt;
    14  &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#copy-the-content-of-one-file-to-another-file" class="anchor"&gt;
  &lt;/a&gt;
  Copy the content of one file to another file
&lt;/h3&gt;

&lt;p&gt;Type &lt;code&gt;cat [filename-whose-contents-is-to-be-copied] &amp;gt; [destination-filename]&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Create an empty file called index-empty-copy.html&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;index-empty-copy.html

&lt;span class="c"&gt;## Copy the content of index.html to index-empty-copy.html&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;index.html &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; index-empty-copy.html

&lt;span class="c"&gt;## Print the content of the index-empty-copy.html file&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;index-empty-copy.html
&amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;DOCTYPE html&amp;gt;
&amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &amp;lt;&lt;span class="nb"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;meta &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"utf-8"&lt;/span&gt; /&amp;gt;
    &amp;lt;meta http-equiv&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"x-ua-compatible"&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ie=edge"&lt;/span&gt; /&amp;gt;
    &amp;lt;meta &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"viewport"&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"width=device-width, initial-scale=1"&lt;/span&gt; /&amp;gt;

    &amp;lt;title&amp;gt;My Website&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;
    &amp;lt;script &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"js/main.js"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#learn-more-about-the-raw-cat-endraw-command" class="anchor"&gt;
  &lt;/a&gt;
  Learn more about the &lt;code&gt;cat&lt;/code&gt; command
&lt;/h3&gt;

&lt;p&gt;Type &lt;code&gt;man cat&lt;/code&gt; to display the user manual for the &lt;code&gt;cat&lt;/code&gt; command&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#move-command-mv" class="anchor"&gt;
  &lt;/a&gt;
  Move command (mv)
&lt;/h2&gt;

&lt;p&gt;You can use the &lt;code&gt;mv&lt;/code&gt; (move) command for moving and renaming files&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#move-a-file" class="anchor"&gt;
  &lt;/a&gt;
  Move a file
&lt;/h3&gt;

&lt;p&gt;Type &lt;code&gt;mv [source-path-of-your-file] [destination-path-for-your-file]&lt;/code&gt; to move a file into a new directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## List the content for the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  index-empty-copy.html  index.html  main.js  temp

&lt;span class="c"&gt;## Move the index-empty-copy.html file to the temp directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mv &lt;/span&gt;index-empty-copy.html temp/index-empty-copy.html

&lt;span class="c"&gt;## List the content again and check that the file is no longer in the current working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  index.html  main.js  temp

&lt;span class="c"&gt;## List the temp folder and check that the file is now there.&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls &lt;/span&gt;temp/
index-empty-copy.html
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rename-a-file" class="anchor"&gt;
  &lt;/a&gt;
  Rename a file
&lt;/h3&gt;

&lt;p&gt;Type &lt;code&gt;mv [name-of-your-file] [new name-of-your-file]&lt;/code&gt; to rename a file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="c"&gt;## List the content for the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page/temp&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;index-empty-copy.html

&lt;span class="c"&gt;## Rename the index-empty-copy.html file&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page/temp&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mv &lt;/span&gt;index-empty-copy.html index-copy.html

&lt;span class="c"&gt;## List the content for the working directory (check if your file's name was updated)&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page/temp&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;index-copy.html
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#final-words" class="anchor"&gt;
  &lt;/a&gt;
  Final words
&lt;/h1&gt;

&lt;p&gt;I missed tons of powerful commands on this post, but I decided to keep them for a future post. This is already huge.😄 &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-would-love-to-hear-your-feedback-about-this-format-is-it-clear-is-it-useful-let-me-know-if-you-want-me-to-cover-any-particular-command-on-my-next-post" class="anchor"&gt;
  &lt;/a&gt;
  I would love to hear your feedback about this format. Is it clear? Is it useful? Let me know if you want me to cover any particular command on my next post.
&lt;/h3&gt;

</description>
      <category>linux</category>
      <category>terminal</category>
      <category>beginners</category>
    </item>
    <item>
      <title>DocRaptor vs. WeasyPrint: A PDF Export Showdown</title>
      <author>Tyler Hawkins</author>
      <pubDate>Mon, 25 Jan 2021 12:03:02 +0000</pubDate>
      <link>https://dev.to/thawkin3/docraptor-vs-weasyprint-a-pdf-export-showdown-34f</link>
      <guid>https://dev.to/thawkin3/docraptor-vs-weasyprint-a-pdf-export-showdown-34f</guid>
      <description>&lt;p&gt;I recently published an &lt;a href="https://levelup.gitconnected.com/how-to-convert-html-tables-into-beautiful-pdfs-eac2ce4c77de"&gt;article comparing HTML-to-PDF export libraries&lt;/a&gt;. In it, I explored options like the native &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/print"&gt;browser print&lt;/a&gt; functionality, open-source libraries &lt;a href="https://github.com/MrRio/jsPDF"&gt;jsPDF&lt;/a&gt; and &lt;a href="http://pdfmake.org/"&gt;pdfmake&lt;/a&gt;, and the paid service &lt;a href="https://docraptor.com/"&gt;DocRaptor&lt;/a&gt;. Here's a quick recap of my findings:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want the simplest solution and don’t need a professional-looking document, the native browser print functionality should be just fine. If you need more control over the PDF output, then you’ll want to use a library.&lt;/p&gt;

&lt;p&gt;jsPDF shines when it comes to single-page content generated based on HTML shown in the UI. pdfmake works best when generating PDF content from data rather than from HTML. DocRaptor is the most powerful of them all with its simple API and its beautiful PDF output. But again, unlike the others, it is a paid service. However, if your business depends on elegant, professional document generation, DocRaptor is well worth the cost.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the comment section for my article on Dev.to, &lt;a href="https://dev.to/thawkin3/how-to-convert-html-tables-into-beautiful-pdfs-1k08/comments"&gt;one person suggested&lt;/a&gt; I take a look at &lt;a href="https://www.pagedjs.org/"&gt;Paged.js&lt;/a&gt; and &lt;a href="https://weasyprint.org/"&gt;WeasyPrint&lt;/a&gt; as additional alternatives to consider. (This person is Andreas Zettl by the way, and he has an awesome demo site full of &lt;a href="https://printcss.live/"&gt;Print CSS examples&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;So today we'll explore the relative strengths and weaknesses of DocRaptor and WeasyPrint.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#weasyprint-overview" class="anchor"&gt;
  &lt;/a&gt;
  WeasyPrint Overview
&lt;/h2&gt;

&lt;p&gt;Let's start with WeasyPrint, an open-source library developed by &lt;a href="https://kozea.fr/"&gt;Kozea&lt;/a&gt; and supported by &lt;a href="https://www.courtbouillon.org/"&gt;Court Bouillon&lt;/a&gt;. For starters, &lt;strong&gt;it's free&lt;/strong&gt;, which is a plus. It's licensed under the &lt;a href="https://github.com/Kozea/WeasyPrint/blob/master/LICENSE"&gt;BSD 3-Clause License&lt;/a&gt;, a relatively permissive and straightforward license. WeasyPrint allows you to generate content as either a PDF or a PNG, which should adequately cover most use cases. It's built for Python 3.6+, which is great if you're a Python developer. If Python is not your forte or not part of your company's tech stack, then this may be a non-starter for you.&lt;/p&gt;

&lt;p&gt;One of the biggest caveats to be aware of is that &lt;a href="https://github.com/Kozea/WeasyPrint/issues/454"&gt;WeasyPrint does not support JavaScript-generated content&lt;/a&gt;! So when using this library, you'll need to be exporting content that is generated server-side. If you are relying on dynamically generated content or charts and tables powered by JavaScript, this library is not for you.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#installing-weasyprint" class="anchor"&gt;
  &lt;/a&gt;
  Installing WeasyPrint
&lt;/h2&gt;

&lt;p&gt;Getting up and running with WeasyPrint is fairly easy. They provide &lt;a href="https://weasyprint.readthedocs.io/en/latest/install.html"&gt;installation instructions&lt;/a&gt; on their website, but I use &lt;code&gt;pyenv&lt;/code&gt; to &lt;a href="https://opensource.com/article/19/5/python-3-default-mac"&gt;install and manage Python&lt;/a&gt; rather than Homebrew, so my installation steps looked more like this:&lt;/p&gt;

&lt;p&gt;Installing &lt;code&gt;pyenv&lt;/code&gt; and Python:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# install pyenv using Homebrew&lt;/span&gt;
brew install pyenv

&lt;span class="c"&gt;# install Python 3.7.3 using pyenv&lt;/span&gt;
pyenv install 3.7.3

&lt;span class="c"&gt;# specify that I'd like to use version 3.7.3 when I use Python&lt;/span&gt;
pyenv global 3.7.3

&lt;span class="c"&gt;# quick sanity check&lt;/span&gt;
pyenv version

&lt;span class="c"&gt;# add `pyenv init` to my shell to enable shims and autocompletion&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s1"&gt;'if command -v pyenv 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then\n  eval "$(pyenv init -)"\nfi'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Installing WeasyPrint and running it against the WeasyPrint website:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;WeasyPrint

weasyprint https://weasyprint.org/ weasyprint.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see, the simplest way to use WeasyPrint from your terminal is to run the &lt;code&gt;weasyprint&lt;/code&gt; command with two arguments: the URL input and the filename output. This creates a file called &lt;code&gt;weasyprint.pdf&lt;/code&gt; in the directory from which you run the command. Here's a screenshot of the PDF output when viewed in the Preview app on a Mac:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i1BErpXm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yvfjqcuajrw24qxepweo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i1BErpXm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yvfjqcuajrw24qxepweo.png" alt="Sample PDF output from WeasyPrint"&gt;&lt;/a&gt;&lt;/p&gt;
Sample PDF output from WeasyPrint



&lt;p&gt;Looks great! WeasyPrint also has a full &lt;a href="https://weasyprint.org/samples/"&gt;page of examples&lt;/a&gt; you can check out which showcases &lt;a href="https://weasyprint.org/samples/report/report.pdf"&gt;reports&lt;/a&gt;, &lt;a href="https://weasyprint.org/samples/invoice/invoice.pdf"&gt;invoices&lt;/a&gt;, and even &lt;a href="https://weasyprint.org/samples/ticket/ticket.pdf"&gt;event tickets&lt;/a&gt; complete with a barcode.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#docraptor-overview" class="anchor"&gt;
  &lt;/a&gt;
  DocRaptor Overview
&lt;/h2&gt;

&lt;p&gt;Now let's consider DocRaptor. &lt;a href="https://docraptor.com/"&gt;DocRaptor&lt;/a&gt; is closed-source and is available through a paid license subscription (although you can generate test documents for free). It uses the PrinceXML HTML-to-PDF engine and is the only API powered by this technology.&lt;/p&gt;

&lt;p&gt;Unlike WeasyPrint's Python-only usage, DocRaptor has SDKs for PHP, Python, Node, Ruby, Java, .NET, and JavaScript/jQuery. It can also be used directly via an HTTP request, so you can generate a PDF right from your terminal using cURL. This is great news if you're someone like me who doesn't have Python in their arsenal.&lt;/p&gt;

&lt;p&gt;DocRaptor can export content as a PDF, XLS, or XLSX document. This can come in handy if your content is meant to be a table compatible with Excel. For the time being though, we'll just look at PDFs since that's something both WeasyPrint and DocRaptor support.&lt;/p&gt;

&lt;p&gt;One relative strength of DocRaptor compared to WeasyPrint is that it &lt;em&gt;can&lt;/em&gt; wait for JavaScript on the page to be executed, so it's perfect for use with dynamically generated content and charting libraries.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#getting-started-with-docraptor" class="anchor"&gt;
  &lt;/a&gt;
  Getting Started with DocRaptor
&lt;/h2&gt;

&lt;p&gt;DocRaptor has &lt;a href="https://docraptor.com/documentation/jquery"&gt;guides for each of their SDKs&lt;/a&gt; that are well worth reading when first trying out their service. Since we ran the WeasyPrint example from the command line, let's also &lt;a href="https://docraptor.com/documentation"&gt;run DocRaptor in our terminal&lt;/a&gt; by using cURL to make an HTTP request. DocRaptor is API-based, so there's no need to download or install anything.&lt;/p&gt;

&lt;p&gt;Here's their example you can try:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl http://YOUR_API_KEY_HERE@docraptor.com/docs &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--fail&lt;/span&gt; &lt;span class="nt"&gt;--silent&lt;/span&gt; &lt;span class="nt"&gt;--show-error&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--header&lt;/span&gt; &lt;span class="s2"&gt;"Content-Type:application/json"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--data&lt;/span&gt; &lt;span class="s1"&gt;'{"test": true,
           "document_url": "http://docraptor.com/examples/invoice.html",
           "type": "pdf" }'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docraptor.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And here's the output after running that code snippet in your terminal:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Khme5ZpH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hecltzcc7xfarminmsiy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Khme5ZpH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hecltzcc7xfarminmsiy.png" alt="Sample PDF output from DocRaptor"&gt;&lt;/a&gt;&lt;/p&gt;
Sample PDF output from DocRaptor



&lt;p&gt;Voila: a nice and simple invoice. DocRaptor's example here isn't as complex as WeasyPrint's was, so let's try generating a PDF from one of DocRaptor's more advanced examples.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl http://YOUR_API_KEY_HERE@docraptor.com/docs &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--fail&lt;/span&gt; &lt;span class="nt"&gt;--silent&lt;/span&gt; &lt;span class="nt"&gt;--show-error&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--header&lt;/span&gt; &lt;span class="s2"&gt;"Content-Type:application/json"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--data&lt;/span&gt; &lt;span class="s1"&gt;'{"test": true,
           "document_url": "https://docraptor.com/samples/cookbook.html",
           "type": "pdf" }'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docraptor_cookbook.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here's the output for this cookbook recipe PDF:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dm6fmay9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j20ps32u6n34ss6lejh1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dm6fmay9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j20ps32u6n34ss6lejh1.png" alt="Sample PDF output from DocRaptor using their Cookbook Recipe example"&gt;&lt;/a&gt;&lt;/p&gt;
Sample PDF output from DocRaptor using their Cookbook Recipe example



&lt;p&gt;Pretty neat! Just like WeasyPrint, DocRaptor can handle complex designs and full-bleed layouts that extend to the very edge of the page. One important callout here is that DocRaptor supports footnotes, as seen in this example. WeasyPrint, on the other hand, has not yet fully implemented the &lt;a href="https://www.w3.org/TR/css-page-3/"&gt;CSS paged media specifications&lt;/a&gt;, so it can't handle footnote generation.&lt;/p&gt;

&lt;p&gt;You can view more DocRaptor &lt;a href="https://docraptor.com/samples"&gt;examples on their site&lt;/a&gt; including a &lt;a href="https://docraptor.com/samples/statement.pdf"&gt;financial statement&lt;/a&gt;, a &lt;a href="https://docraptor.com/samples/brochure.pdf"&gt;brochure&lt;/a&gt;, an &lt;a href="https://docraptor.com/samples/invoice.pdf"&gt;invoice&lt;/a&gt;, and an &lt;a href="https://docraptor.com/samples/ebook.pdf"&gt;e-book&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#javascript-execution" class="anchor"&gt;
  &lt;/a&gt;
  JavaScript Execution
&lt;/h2&gt;

&lt;p&gt;So far we've seen the powers and similarities of both DocRaptor and WeasyPrint. But one core difference we touched on above is that WeasyPrint does not wait for JavaScript to execute before generating the PDF. This is crucial for applications built with a framework like React. By default, React apps contain only a root container &lt;code&gt;div&lt;/code&gt; in the HTML, and then JavaScript runs to inject the React components onto the page.&lt;/p&gt;

&lt;p&gt;So if you try to generate a PDF from the command line for an app built with React, you won't get the actual app content! Instead, you'll likely see the content of the &lt;code&gt;noscript&lt;/code&gt; tag, which typically contains a message stating something like "You need to enable JavaScript to run this app."&lt;/p&gt;

&lt;p&gt;This is also the case for applications that rely on charting libraries like &lt;a href="https://developers.google.com/chart"&gt;Google Charts&lt;/a&gt;, &lt;a href="https://www.highcharts.com/"&gt;HighCharts&lt;/a&gt;, or &lt;a href="https://www.chartjs.org/"&gt;Chart.js&lt;/a&gt;. Without the JavaScript running, no chart is created.&lt;/p&gt;

&lt;p&gt;As an example, &lt;a href="http://tylerhawkins.info/docraptor-js-demo/"&gt;consider this simple web page&lt;/a&gt; I've put together. It contains a page header, a paragraph included in the HTML source code, and a paragraph inserted into the DOM by JavaScript. You can find the &lt;a href="https://github.com/thawkin3/docraptor-js-demo"&gt;code on GitHub&lt;/a&gt;. Here's what the page looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BWXGjn9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/az5421zkewrtl5ql66tv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BWXGjn9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/az5421zkewrtl5ql66tv.png" alt="DocRaptor JS demo web page"&gt;&lt;/a&gt;&lt;/p&gt;
DocRaptor JS demo web page



&lt;p&gt;Now, let's use WeasyPrint to generate a PDF from the web page by running the following command in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;weasyprint http://tylerhawkins.info/docraptor-js-demo/ weasyprint_js_demo.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here's the output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cy9jbPz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5kd2os3p0cpwggts5h1m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cy9jbPz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5kd2os3p0cpwggts5h1m.png" alt="JS demo PDF output from WeasyPrint"&gt;&lt;/a&gt;&lt;/p&gt;
JS demo PDF output from WeasyPrint



&lt;p&gt;Oh no! Where's the second paragraph? It's not there, because the JavaScript was never executed.&lt;/p&gt;

&lt;p&gt;Now let's try again, but this time with DocRaptor. In order to have JavaScript run on the page, we must provide DocRaptor with the &lt;code&gt;"javascript": true&lt;/code&gt; argument in our options object. Here's the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl http://YOUR_API_KEY_HERE@docraptor.com/docs &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--fail&lt;/span&gt; &lt;span class="nt"&gt;--silent&lt;/span&gt; &lt;span class="nt"&gt;--show-error&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--header&lt;/span&gt; &lt;span class="s2"&gt;"Content-Type:application/json"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--data&lt;/span&gt; &lt;span class="s1"&gt;'{"test": true,
           "javascript": true,
           "document_url": "http://tylerhawkins.info/docraptor-js-demo/",
           "type": "pdf" }'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docraptor_js_demo.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And the output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mQR8FzNb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sml1n9q1p483oq5pks7x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mQR8FzNb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sml1n9q1p483oq5pks7x.png" alt="JS demo PDF output from DocRaptor"&gt;&lt;/a&gt;&lt;/p&gt;
JS demo PDF output from DocRaptor



&lt;p&gt;Tada! The JavaScript has been successfully executed, leading to the insertion of the second paragraph.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So, which should you use, WeasyPrint or DocRaptor? It depends on your use case. &lt;/p&gt;

&lt;p&gt;If your app contains static content that doesn't rely on JavaScript, if Python is part of your tech stack, or if you need PNG image output, then WeasyPrint is an excellent choice. It's open source, free, and flexible enough to handle visually complex output.&lt;/p&gt;

&lt;p&gt;If you need to use a programming language other than Python, or you rely on the execution of JavaScript to render the content you need exported, DocRaptor is the right choice.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-comparisons" class="anchor"&gt;
  &lt;/a&gt;
  Table of Comparisons
&lt;/h2&gt;

&lt;p&gt;As an added bonus, here's a comparison table for a quick summary of these two libraries:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XWGPUuwy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mgms7ei6rr7fe83h37oh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XWGPUuwy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mgms7ei6rr7fe83h37oh.png" alt="DocRaptor vs. WeasyPrint comparison table"&gt;&lt;/a&gt;&lt;/p&gt;
DocRaptor vs. WeasyPrint comparison table



&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>bash</category>
      <category>docraptor</category>
    </item>
    <item>
      <title>3 Ways Headless Commerce Will Take Your Shopify Store to the Next Level</title>
      <author>yuyaohshimo</author>
      <pubDate>Mon, 25 Jan 2021 09:25:58 +0000</pubDate>
      <link>https://dev.to/yuyaohshimo/3-ways-headless-commerce-will-take-your-shopify-store-to-the-next-level-27e9</link>
      <guid>https://dev.to/yuyaohshimo/3-ways-headless-commerce-will-take-your-shopify-store-to-the-next-level-27e9</guid>
      <description>&lt;p&gt;How Ramen Hero, a D2C startup based in the San Francisco Bay area, relaunched their online store including background and history.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-this-article" class="anchor"&gt;
  &lt;/a&gt;
  About This Article
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Those who manage D2C services&lt;/li&gt;
&lt;li&gt;Those who manage online stores&lt;/li&gt;
&lt;li&gt;Shopify users&lt;/li&gt;
&lt;li&gt;Software engineers (especially startup companies)&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Og_95i4e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kgqdl8buqmu3tep2wqox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Og_95i4e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kgqdl8buqmu3tep2wqox.png" alt="Ramen Hero online store"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am the senior lead engineer at &lt;a href="https://ramenhero.com"&gt;Ramen Hero&lt;/a&gt; (&lt;a href="https://twitter.com/van_sf_engineer"&gt;@va_sf_engineer&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Ramen Hero is a D2C food startup based in the San Francisco Bay area.&lt;/p&gt;

&lt;p&gt;We deliver authentic frozen ramen kits all over America, excluding some areas.&lt;/p&gt;

&lt;p&gt;We rebranded and relaunched our online store in April, 2020.&lt;/p&gt;

&lt;p&gt;At that time, we replaced our system architecture with a modern structure.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#pros-and-cons-of-using-shopify-as-an-online-store" class="anchor"&gt;
  &lt;/a&gt;
  Pros and Cons of Using Shopify as an Online Store
&lt;/h2&gt;

&lt;p&gt;We are using Shopify as a CMS for creating an online store.&lt;/p&gt;

&lt;p&gt;First of all, for the relaunching, we considered the pros and the cons of our existing online store using Shopify.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;👍 Pros 1: Shopify has all the features necessary for an online store because of CMS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Shopify has the necessary features for online stores such as the product management feature, the customer management feature, and the order management feature.&lt;/p&gt;

&lt;p&gt;Creating such fetures is costly and requires a lot of human resources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;👍 Pros 2: Shopify has checkout pages which are available for a variety of payment methods&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For security reasons, it is not recommended that we create our own checkout pages.&lt;/p&gt;

&lt;p&gt;We are not sure if Shopify’s checkout pages are 100% secure, but those pages should be created by professionals with security experience.&lt;/p&gt;

&lt;p&gt;Also, since they have some payment methods based on the customer’s device like Apple Pay, the customer can complete purchase without entering their shipping address and payment information.&lt;/p&gt;

&lt;p&gt;This feature eliminates the hassle of entering some information and prevents abandonment through the checkout flow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HPK3-Ybf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v0iz6531zbycq80drknc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HPK3-Ybf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v0iz6531zbycq80drknc.png" alt="Shopify checkout page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;😕 Cons 1: It’s difficult to improve website performance&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The pages rendered by Shopify are published on the server side dynamically each time a customer visits the page.&lt;/p&gt;

&lt;p&gt;Therefore, the rendering page speed is slower than the pages that are rendered statically.&lt;/p&gt;

&lt;p&gt;Also, too many plugins make the rendering page speed slower.&lt;/p&gt;

&lt;p&gt;The redering page speed is very important for online stores.&lt;/p&gt;

&lt;p&gt;Amazon found a 100-ms delay sacrifices their sales by 1%.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;😕 Cons 2: We cannot use general web development stacks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Typically, the source code of a web application is managed by a version control system such as GitHub.&lt;/p&gt;

&lt;p&gt;Therefore, we can see the difference in changes and we can revert to the previous version if there is a critical bug.&lt;/p&gt;

&lt;p&gt;However, since we can change the code on the Shopify dashboard, we cannot find the difference in changes and it is likely to cause bugs.&lt;/p&gt;

&lt;p&gt;Also, since some codes are added when Shopify plugins are installed automatically, so it is almost impossible to control the source code.&lt;/p&gt;

&lt;p&gt;*Strictly speaking, Shopify publishes a CLI called &lt;a href="https://github.com/Shopify/themekit"&gt;Theme Kit&lt;/a&gt; that also allows us to edit source code locally. Initially, we used this, but since the source code on the dashboard could be changed, version control was almost impossible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;😕 Cons 3: We cannot always customize the design of the plugin&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We sometimes need to get features which Shopify doesn’t have to install the plugins.&lt;/p&gt;

&lt;p&gt;It would be nice if plugins had a setting to flexibly change the design, but many plugins have a locked design.&lt;/p&gt;

&lt;p&gt;This will have a significant impact on the branding.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#use-shopify-as-a-part-of-headless-commerce" class="anchor"&gt;
  &lt;/a&gt;
  Use Shopify as a Part of Headless Commerce
&lt;/h2&gt;

&lt;p&gt;We focesed on having our own front-end while using strong Shopify features for our online store as a back-end so that we could get rid of the cons while leaving the pros we mentioned in the previous section.&lt;/p&gt;

&lt;p&gt;In other words, &lt;strong&gt;use Shopify as a part of headless commerce&lt;/strong&gt; (see more details about headless commerce &lt;a href="https://www.shopify.ca/plus/solutions/headless-commerce"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Fortunately, since Shopify provides &lt;strong&gt;Shopify Storefront API&lt;/strong&gt;, we can embrace this architecture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E_rDqlcH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4bms7gyidsh0y7o6n26h.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E_rDqlcH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4bms7gyidsh0y7o6n26h.jpeg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We created the front-end ourselves and we used the Shopify Storefront API to get online store features like the above image.&lt;/p&gt;

&lt;p&gt;Also, since it is not secure to create checkout pages ourselves, we use Shopify checkout pages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Front-end&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since we stopped using Shopify front-end, we could use a framework to maximize website performance.&lt;/p&gt;

&lt;p&gt;So, we decided to use &lt;strong&gt;Next.js&lt;/strong&gt;, which supports SSG (Static Site Generation).&lt;/p&gt;

&lt;p&gt;Next.js is a framework which includes the best practices for modern front-end development.&lt;/p&gt;

&lt;p&gt;Since Next.js can render pages statically due to SSG, the rendering page speed is faster than pages rendered dynamically as I mentioned earlier.&lt;/p&gt;

&lt;p&gt;Also, since Next.js officially supports ISR (Incremental Static Regeneration) at v9.5, we can update pages statically and nearly dynamically.&lt;/p&gt;

&lt;p&gt;Therefore, ISR accomplishes online store content updates without updating the code.&lt;/p&gt;

&lt;p&gt;Another reason we decided to use Next.js is that we wanted to use component-oriented programming.&lt;/p&gt;

&lt;p&gt;Component-oriented programmig makes improvement speed faster because we can change the design to alter only the combination of components.&lt;/p&gt;

&lt;p&gt;Due to this, we can try to change content to continually adjust the needs of customers. That is the most important thing for online stores.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Back-end&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We added a feature which Shopify doesn’t have to install plugins.&lt;/p&gt;

&lt;p&gt;However, as I mentioned earlier, we may not be able to change the design as we like, or we may not have features we want.&lt;/p&gt;

&lt;p&gt;So, &lt;strong&gt;we developed an API in the back-end which has features to cover our own business logic that Shopify doesn’t cover&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A structure is simple to use with the Serverless Framework, but we can use the API flexibly because the design is not locked such as plugins.&lt;/p&gt;

&lt;p&gt;For example, since we have a custom zip code validation logic, we created an API endpoint for that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final Architecture&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UXLyyvdI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1ssx2ktmfll7n8nyjb6x.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UXLyyvdI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1ssx2ktmfll7n8nyjb6x.jpeg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We use Next.js for our front-end and that is delivered by &lt;strong&gt;Vercel&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Vercel has a feature to publish changes integrated with GitHub.&lt;/p&gt;

&lt;p&gt;Also, that has some convenient features like automatically creating a preview environment based on a development branch.&lt;/p&gt;

&lt;p&gt;The back-end is a hybrid structure containing a &lt;strong&gt;Shopify StoreFront API and a customized API using the Serverless Framework&lt;/strong&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;👉 Remove restrictions of CMS to use headless commerce&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It takes a lot of time and money to create a full customized online store. Therefore, we should use CMS.&lt;/p&gt;

&lt;p&gt;However, it is true that we have some restrictions with CMS.&lt;/p&gt;

&lt;p&gt;In terms of online store performance, headless commerce could be an option.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;👉 Create a customized API for features for your business logic&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have some restrictions with plugins as well. Also, almost all plugins are not free.&lt;/p&gt;

&lt;p&gt;We can create ideal features to create a customized API.&lt;/p&gt;

&lt;p&gt;Also, since online stores do not have as much traffic, we may be able to have an API for free with serverless architechture like AWS Lambda.&lt;/p&gt;

&lt;p&gt;In addition, we can reuse the features for selling products on other platforms not on the web.&lt;/p&gt;

&lt;p&gt;For example, a chatbot system on SMS or Facebook Messenger.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;👉 Most importantly, think about the efficiency of improvement&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is important to try to change the content to continually adjust to the needs of customers.&lt;/p&gt;

&lt;p&gt;To use modern tech stacks like GitHub, Vercel, and Next.js may increase the efficiency of changes.&lt;/p&gt;

&lt;p&gt;As a result, we can optimize the online store for our customers and increase conversion rates.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#takeaway" class="anchor"&gt;
  &lt;/a&gt;
  Takeaway
&lt;/h2&gt;

&lt;p&gt;We tried to create a full customized online store at first.&lt;/p&gt;

&lt;p&gt;But, this is not suitable for startups with a small development team.&lt;/p&gt;

&lt;p&gt;The reason is startups require optimal speed above all else, and we were short on time, money, and human resources.&lt;/p&gt;

&lt;p&gt;I know that engineers want to create everything themselves.&lt;/p&gt;

&lt;p&gt;However, &lt;strong&gt;I believe that creating the best system based on the company and team situation is a necessary skill for engineers at startups&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Also, since we reduced development resources to use third-party services, we could not only improve changes in speed, but could also focus on improving quality of service.&lt;/p&gt;

&lt;p&gt;This improvement is essetial for any business.&lt;/p&gt;

&lt;p&gt;We’re hiring engineers who are interested in headless commerce development at Ramen Hero.&lt;/p&gt;

&lt;p&gt;Also, I am available for personal consultations on headless commerce and online store development.&lt;/p&gt;

&lt;p&gt;Please DM me at the above contact via &lt;a href="https://twitter.com/van_sf_engineer"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>shopify</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>An easy way for adding Copy to Clipboard functionality in React App</title>
      <author>Yogesh Chavan</author>
      <pubDate>Mon, 25 Jan 2021 08:59:05 +0000</pubDate>
      <link>https://dev.to/myogeshchavan97/an-easy-way-for-adding-copy-to-clipboard-functionality-in-react-app-4oo0</link>
      <guid>https://dev.to/myogeshchavan97/an-easy-way-for-adding-copy-to-clipboard-functionality-in-react-app-4oo0</guid>
      <description>&lt;p&gt;In this article, we will see how to use the most popular React library for adding copy to clipboard functionality in React app.&lt;/p&gt;

&lt;p&gt;The library I'm talking about is &lt;a href="https://www.npmjs.com/package/react-copy-to-clipboard"&gt;react-copy-to-clipboard&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--72lqljdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/8a8dbf922fe4d4f4b860b8c962d8cdf47e51f081/copy-clipboard.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--72lqljdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/8a8dbf922fe4d4f4b860b8c962d8cdf47e51f081/copy-clipboard.png" alt="React Copy To Clipboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's a very popular npm library that is built on top of another popular javascript &lt;a href="https://www.npmjs.com/package/copy-to-clipboard"&gt;copy-to-clipboard&lt;/a&gt; library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation" class="anchor"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;To install the library execute the following command from the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;clipboard&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-the-library" class="anchor"&gt;
  &lt;/a&gt;
  Using the library
&lt;/h2&gt;

&lt;p&gt;The library provides a &lt;code&gt;CopyToClipboard&lt;/code&gt; component that accepts the following props:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;text&lt;/code&gt;: The text that needs to be copied to the clipboard. It's a required prop&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onCopy&lt;/code&gt;: An optional callback function that will be executed after a successful copy operation&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;options&lt;/code&gt;: optional options that the &lt;a href="https://www.npmjs.com/package/copy-to-clipboard"&gt;copy-to-clipboard&lt;/a&gt; library accepts&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;In between the opening and closing &lt;code&gt;CopyToClipbard&lt;/code&gt; tag, we define the content that will trigger the copy functionality.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take a look at the below Code Sandbox Demo: &lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/affectionate-butterfly-tbquf"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here's the complete code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CopyToClipboard&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-copy-to-clipboard&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isCopied&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsCopied&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onCopyText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIsCopied&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setIsCopied&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Type some text here"&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CopyToClipboard&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onCopy&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onCopyText&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"copy-area"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Copy to Clipboard&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`copy-feedback &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;isCopied&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            Copied!
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;CopyToClipboard&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, the user entered input is stored in the state with name &lt;code&gt;text&lt;/code&gt; and the same value we're passing to the &lt;code&gt;CopyToClipboard&lt;/code&gt; component as a &lt;code&gt;text&lt;/code&gt; prop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CopyToClipboard&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onCopy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onCopyText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So when the button is clicked, the &lt;code&gt;onCopy&lt;/code&gt; function will be triggered that will call our custom &lt;code&gt;onCopyText&lt;/code&gt; function to set the &lt;code&gt;isCopied&lt;/code&gt; state value and based on the &lt;code&gt;isCopied&lt;/code&gt; state value, we're showing the feedback to the user.&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;onCopyText&lt;/code&gt; function, we set the &lt;code&gt;isCopied&lt;/code&gt; state value to true so the &lt;code&gt;Copied!&lt;/code&gt; text will be displayed to the user and after 1 second (1000ms) we reset the state value to false so the &lt;code&gt;Copied!&lt;/code&gt; text will disappear. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a3ZO61i6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/8a8dbf922fe4d4f4b860b8c962d8cdf47e51f081/copied_1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a3ZO61i6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/8a8dbf922fe4d4f4b860b8c962d8cdf47e51f081/copied_1.gif" alt="Demo1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see above, the text entered into the input field is correctly copied into the clipboard.&lt;/p&gt;

&lt;p&gt;Take a look at the below Code Sandbox Demo:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/hungry-jones-bgp4t"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here's a complete code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CopyToClipboard&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-copy-to-clipboard&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MdContentCopy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-icons/md&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isCopied&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsCopied&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;codeSnippet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
  const a = 10, b = 20;
  const sum = a + b;
  console.log(sum);
  `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onCopyText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIsCopied&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setIsCopied&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"code-snippet"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"code-section"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;codeSnippet&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CopyToClipboard&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;codeSnippet&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onCopy&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onCopyText&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isCopied&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Copied!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MdContentCopy&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;CopyToClipboard&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the demo, we've implemented the copy functionality for the snippet of code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GZ59V0yB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/8a8dbf922fe4d4f4b860b8c962d8cdf47e51f081/copied_2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GZ59V0yB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/8a8dbf922fe4d4f4b860b8c962d8cdf47e51f081/copied_2.gif" alt="Demo 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So from these two demos, you now have a clear idea of how to easily implement the copy to clipboard functionality in React.&lt;/p&gt;

&lt;p&gt;That's it about this article. I hope you found it useful.&lt;/p&gt;




&lt;p&gt;Join my highly popular &lt;strong&gt;FREE&lt;/strong&gt; &lt;a href="https://yogeshchavan.podia.com/react-router-introduction"&gt;Introduction to React Router&lt;/a&gt; course If you have not joined it yet. &lt;/p&gt;

&lt;p&gt;Subscribe to my &lt;a href="https://yogeshchavan.dev/"&gt;weekly newsletter&lt;/a&gt; to join 1000+ other subscribers to get amazing tips, tricks, articles and discount deals directly in your inbox.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>The right way to make advanced and efficient MongoDB pagination</title>
      <author>Maxim Vynohradov</author>
      <pubDate>Mon, 25 Jan 2021 08:57:41 +0000</pubDate>
      <link>https://dev.to/max_vynohradov/the-right-way-to-make-advanced-and-efficient-mongodb-pagination-16oa</link>
      <guid>https://dev.to/max_vynohradov/the-right-way-to-make-advanced-and-efficient-mongodb-pagination-16oa</guid>
      <description>&lt;p&gt;Onсe upon a time, we had a complex project enough (ride-sharing and taxi application) with stack Node.js and MongoDB. We have chosen this stack because it was preferable by the customer, good known by our team, and at the same time looks like good a suite for project tasks.&lt;/p&gt;

&lt;p&gt;Everything was great, the number of users became more than twelve thousand, the number of active drivers was close to three hundred drivers. In one year, the number of rides becomes more than two million.&lt;/p&gt;

&lt;p&gt;But once we need to create an admin panel to control and monitor all processes (from the business point of view) in the main application. The huge percent of requirements was to have advanced lists of a variety of entities, with bind statistics over them. &lt;/p&gt;

&lt;p&gt;Because we use &lt;a href="https://www.npmjs.com/package/mongoose"&gt;mongoose&lt;/a&gt;, as ODM, first of all, we take a look at its plugins. The most popular of them, that related to pagination are&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/mongoose-paginate"&gt;&lt;strong&gt;mongoose-paginate&lt;/strong&gt;&lt;br&gt;
*Pagination plugin for Mongoose Note: This plugin will only work with Node.js &amp;gt;= 4.0 and Mongoose &amp;gt;= 4.0. Add plugin to…*www.npmjs.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/mongoose-paginate-v2"&gt;&lt;strong&gt;mongoose-paginate-v2&lt;/strong&gt;&lt;br&gt;
*A cursor based custom pagination library for Mongoose with customizable labels.*www.npmjs.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/mongoose-aggregate-paginate"&gt;&lt;strong&gt;mongoose-aggregate-paginate&lt;/strong&gt;&lt;br&gt;
*mongoose-aggregate-paginate is a Mongoose plugin easy to add pagination for aggregates. This plugin can be used in…*www.npmjs.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/mongoose-aggregate-paginate-v2"&gt;&lt;strong&gt;mongoose-aggregate-paginate-v2&lt;/strong&gt;&lt;br&gt;
*A cursor based custom aggregate pagination library for Mongoose with customizable labels. If you are looking for basic…*www.npmjs.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another requirement was to have a possibility to choose a specific page on-demand, so the approach to use “&lt;em&gt;previous-next&lt;/em&gt;”-like pagination, that based on cursors was prohibited immediately — its &lt;em&gt;mongoose-paginate-v2&lt;/em&gt; and *mongoose-aggregate-paginate-v2 *libraries.&lt;/p&gt;

&lt;p&gt;The oldest, and probably the simplest in usage is &lt;em&gt;mongoose-paginate&lt;/em&gt; — it uses simple search queries, limit, sort, and the skip operations. I guess it’s a good variant for simple pagination — just install a plugin, add few lines of code to your endpoint, and that’s all — work is done. It even can use “&lt;em&gt;populate&lt;/em&gt;” of mongoose, — something that emulates joins from SQL world. Technically it just makes additional queries to the database, that probably not the way you want. Even more, when you just have a little bit more complicated query, with any data transformation, it will be totally unusable. I know just one way to normally use it in such cases — first create &lt;a href="https://docs.mongodb.com/manual/core/views/"&gt;MongoDB View&lt;/a&gt; — technically its pre-saved queries, that MongoDB represents as read-only collections. And just then run pagination using mongoose-paginate over this view. Not bad — you will hide complicated queries under view, but we have a better idea of how to solve this problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MongoDB Aggregation Framework is here!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You know, I guess, it was really day for the MongoDB community when Aggregation Framework was released. Probably it allows for most of the queries that you can imagine. So, we think about taking &lt;em&gt;mongoose-aggregate-paginate&lt;/em&gt; into use*.*&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But the next two things that disappointed us:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;**What does this plugin need? **I mean — what task does it help to solve, that cannot be solved without this plugin, with the same effort. Looks like it just one more additional dependency in your project, because it doesn’t bring any profit, even don’t save your time…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Internal codebase, and general approach&lt;/strong&gt; to making queries. This library makes &lt;strong&gt;TWO&lt;/strong&gt; calls into a database and waits for responses via &lt;em&gt;Promise.all&lt;/em&gt;. First — to fetch query result and second — to calculate the count of total records that query returns, without &lt;strong&gt;$filter&lt;/strong&gt; and &lt;strong&gt;$limit&lt;/strong&gt; stages. It needs this to calculate the number of total pages.&lt;/p&gt;

&lt;p&gt;How we can avoid additional queries into the database? The worst thing here that we need to run all aggregation pipeline twice, that can be costly enough in terms of memory and CPU usage. Even more, if collection huge, and documents tend to be few megabytes, it can impact Disc I/O usage, that also a big problem.&lt;/p&gt;

&lt;p&gt;The good news — Aggregation Framework has a specific stage in its arsenal, that can solve this problem. It’s &lt;strong&gt;$facet:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Processes multiple &lt;a href="https://docs.mongodb.com/manual/core/aggregation-pipeline/#id1"&gt;aggregation pipelines&lt;/a&gt; within a single stage on the same set of input documents. Each sub-pipeline has its field in the output document where its results are stored as an array of documents.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://docs.mongodb.com/manual/reference/operator/aggregation/facet/"&gt;MongoDB documentation about $facet stage&lt;/a&gt; . &lt;/p&gt;

&lt;p&gt;Aggregation Pipeline for pagination will have the next shape:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nl"&gt;$facet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;outputField1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;stage1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;stage2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;outputField2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;stage1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;stage2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;

   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Also, pipelines for pagination can be improved by customization for specific cases. Some tips are listed below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Run all operations, that don’t directly affect on final pagination result, after all possible filters (&lt;em&gt;$match&lt;/em&gt; stages). There are stages like $project or &lt;em&gt;$lookup&lt;/em&gt; — that don’t change the number or order of result documents. Try to cut off as many documents as you can at once.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Try to make your models as more self-sufficient, to avoid additional &lt;em&gt;$lookups&lt;/em&gt;. It’s normal to duplicate some data or make pre-computing fields.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you have a really huge pipeline, that processes many data, your query will probably &lt;a href="https://docs.mongodb.com/manual/core/aggregation-pipeline-limits/#memory-restrictions"&gt;use more than 100MB&lt;/a&gt;. In this case, you need to use &lt;strong&gt;&lt;em&gt;allowDiskUse&lt;/em&gt;&lt;/strong&gt; flag.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Follow Aggregation Pipelines performance &lt;a href="https://docs.mongodb.com/manual/core/aggregation-pipeline-optimization/"&gt;optimization guide&lt;/a&gt;. This advice helps you to make your queries more efficient.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And technically — you can make dynamic queries on your application code side — depends on conditions you can add, remove or modify specific stages. It can speed up your queries, and moreover, make your code more eloquent.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Coz NDA, I cannot show you real database schema and real queries. But let me show you a small example of such pagination. &lt;/p&gt;

&lt;p&gt;Imagine that you have two collections — &lt;strong&gt;Statistic&lt;/strong&gt; and &lt;strong&gt;Drivers&lt;/strong&gt;. &lt;em&gt;Drivers&lt;/em&gt; collection is static enough in thinking of types and amount of fields in different documents.  But &lt;em&gt;Statistic&lt;/em&gt; is polymorphic, can be changed during time, as a result of business requirements updates. Also, some drivers could have big statistic documents and history in general. So you cannot make Statistic as subdocument of Driver.&lt;/p&gt;

&lt;p&gt;So code and MongoDB query will have the next shape:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ridesInfoPaginationPipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="nx"&gt;skip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
    &lt;span class="na"&gt;$match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;$sort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;createdAt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;$lookup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;statistic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;localField&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;foreignField&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;driverId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;driver&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;$unwind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$driver&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;preserveNullAndEmptyArrays&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;$project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;$ifNull&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
          &lt;span class="na"&gt;$concat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$driver.firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$driver.lastName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Technical&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;entityId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;createdAt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;$facet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;total&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="na"&gt;$count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;createdAt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;}],&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="na"&gt;$addFields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$_id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;$unwind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$total&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;$project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;$slice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;$ifNull&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$total.createdAt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}]&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;total&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$total.createdAt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;$literal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;$literal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;skip&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;$ceil&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;$divide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$total.createdAt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;



&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;executePagination&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Statistic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ridesInfoPaginationPipeline&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you see, using &lt;em&gt;Aggregation Framework&lt;/em&gt; and &lt;em&gt;$facet&lt;/em&gt; stage we can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;make data transformation and complex queries;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fetch data from multiple collections;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;get metadata of pagination (total, page, pages)in the one query without additional query execution. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regarding the &lt;strong&gt;main drawbacks&lt;/strong&gt; of such an approach, I guess just one is major — &lt;strong&gt;&lt;em&gt;higher complicity of development and debug process, along with higher entry threshold&lt;/em&gt;&lt;/strong&gt;. It includes performance troubleshooting, knowledge of a variety of stages, and data modeling approaches.&lt;/p&gt;




&lt;p&gt;So, pagination, that based on MongoDB Aggregation Framework, is not pretending to be a silver bullet. But after many attempts and pitfalls — we found that this solution is covered all our cases, with no effects and no high coupling to a specific library.&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>mongoose</category>
      <category>node</category>
      <category>database</category>
    </item>
    <item>
      <title>Understanding Docker: part 28 – Build images </title>
      <author>Aurélie Vache</author>
      <pubDate>Mon, 25 Jan 2021 07:49:15 +0000</pubDate>
      <link>https://dev.to/aurelievache/understanding-docker-part-28-build-images-2op3</link>
      <guid>https://dev.to/aurelievache/understanding-docker-part-28-build-images-2op3</guid>
      <description>&lt;p&gt;Understanding Docker can be difficult or time-consuming. In order to spread knowledge about Cloud technologies I started to create sketchnotes about Docker. I think it could be a good way, more visual, to explain Docker (and other technologies like Kubernetes and Istio).&lt;/p&gt;

&lt;p&gt;We continue the series of Docker sketchnotes with an explanation about how to build an image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Raym1hxx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3lkoqavvljqv5q76opqq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Raym1hxx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3lkoqavvljqv5q76opqq.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ocn83gnR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1v2gp1suretlcddciemb.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ocn83gnR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1v2gp1suretlcddciemb.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As usual, if you like theses sketchnotes, you can follow me, and tell me what do you think. I will publish others sketchs shortly :-).&lt;/p&gt;

&lt;p&gt;If you are interested, I published all the sketchnotes on Kubernetes (and new ones!) to make a "book" of 120 pages: ["Understanding Kubernetes in a visual way"] and a sketchbook about Istio (&lt;a href="https://gumroad.com/aurelievache#uCxcr"&gt;https://gumroad.com/aurelievache#uCxcr&lt;/a&gt;).&lt;/p&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>beginners</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Frontend Security: Content Security Policy</title>
      <author>Mads Stoumann</author>
      <pubDate>Mon, 25 Jan 2021 07:43:42 +0000</pubDate>
      <link>https://dev.to/madsstoumann/frontend-security-content-security-policy-17dl</link>
      <guid>https://dev.to/madsstoumann/frontend-security-content-security-policy-17dl</guid>
      <description>&lt;p&gt;In my &lt;a href="https://dev.to/madsstoumann/frontend-security-npm-audit-and-script-integrity-kl3"&gt;previous article on security&lt;/a&gt;, I wrote about &lt;code&gt;npm audit&lt;/code&gt; and script integrity. Next up is &lt;em&gt;Content Security Policy&lt;/em&gt;, or &lt;em&gt;CSP&lt;/em&gt; for short. &lt;/p&gt;

&lt;p&gt;This can either be added as response-headers on the server, or as a &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt;-tag in the html. &lt;/p&gt;

&lt;p&gt;I'm going to focus on the latter here. &lt;/p&gt;

&lt;p&gt;A CSP will tell the webpage from which domains it will allow loading images, fonts, iframes, scripts etc. from:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"Content-Security-Policy"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"
  default-src;
  script-src 'self';
  style-src 'self';
  img-src 'self' data:;
  font-src;
  connect-src 'self';
  media-src 'self';
  object-src 'none';
  child-src;
  frame-src;
  form-action;
  base-uri;
  manifest-src 'self';
"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It's &lt;em&gt;one long string&lt;/em&gt; within the double quotes, so I've added line-breaks and tabs for clarity.&lt;br&gt;&lt;br&gt;
Each entry ends with a semicolon &lt;code&gt;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note the word 'self'. That's how you allow to run the various types from the same domain as the current document.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#scripts" class="anchor"&gt;
  &lt;/a&gt;
  Scripts
&lt;/h2&gt;

&lt;p&gt;To allow a script from an external site, maybe a delivery network such as &lt;em&gt;unpkg.com&lt;/em&gt;, add &lt;code&gt;unpkg.com&lt;/code&gt; to the &lt;code&gt;script-src&lt;/code&gt;-part of the CSP:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;script-src 'self' unpkg.com;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Cloudflare provides edge-caching and/or minification for assets, as well as a "Rocket Loader™", which will improve the paint-time for sites using JavsScript. I use it on my sites, but had to add this to my CSP:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;script-src 'self' ajax.cloudflare.com;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A new entry is just a space, so combined, the current &lt;code&gt;script-src&lt;/code&gt; looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;script-src 'self' unpkg.com ajax.cloudflare.com;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#google-fonts" class="anchor"&gt;
  &lt;/a&gt;
  Google Fonts
&lt;/h2&gt;

&lt;p&gt;For Google Fonts, you'll have to add entries to both &lt;code&gt;font-src&lt;/code&gt; and &lt;code&gt;style-src&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;font-src fonts.gstatic.com;
style-src 'self' fonts.googleapis.com ;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#youtube" class="anchor"&gt;
  &lt;/a&gt;
  YouTube
&lt;/h2&gt;

&lt;p&gt;For YouTube, you need entries to &lt;code&gt;frame-src&lt;/code&gt; since it's iframe-based &lt;strong&gt;and&lt;/strong&gt; to &lt;code&gt;img-src&lt;/code&gt; as it provides thumbnail images as well. CSP is not always easy, but it's the quickest way to add an extra layer of protection to your site!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;frame-src *.youtube.com;
img-src 'self' img.youtube.com data:;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you include the YouTube API as well, you must add it to the &lt;code&gt;script-src&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;script-src *.youtube.com;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;YouTube-videos works with these additions, but will occasionally generate errors for it's "doubleclick"-network and others. You can just ignore these, or add them to your CSP (if you trust them!):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;script-src: https://www.googleadservices.com https://googleads.g.doubleclick.net https://www.google.com
img-src: https://www.google.com
frame-src: https://bid.g.doubleclick.net
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#vimeo" class="anchor"&gt;
  &lt;/a&gt;
  Vimeo
&lt;/h2&gt;

&lt;p&gt;Vimeo just need the &lt;code&gt;frame-src&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;frame-src: *.vimeo.com
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But if you want to use their API, add an entry to &lt;code&gt;script-src&lt;/code&gt; as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;script-src: *.vimeo.com
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#warning-marketeers-and-seopeople-hate-csps" class="anchor"&gt;
  &lt;/a&gt;
  Warning: Marketeers and SEO-people &lt;em&gt;hate&lt;/em&gt; CSP's!
&lt;/h2&gt;

&lt;p&gt;With a CSP in place, marketeers can no longer just add a cool new tracking-script via &lt;em&gt;Google Tag Manager&lt;/em&gt; or similar. So: be prepared to hear &lt;strong&gt;a lot of complaints&lt;/strong&gt;, unless you create a CMS-block, where they can add/remove CSP entries themselves!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Google Chrome&lt;/em&gt; supports many more CSP-entries than listed above. Unfortunately most of these doesn't work in &lt;em&gt;Apple Safari&lt;/em&gt;, and can actually cause it to &lt;em&gt;not&lt;/em&gt; parse JavaScript, so be sure to test in &lt;em&gt;all&lt;/em&gt; browsers.&lt;/p&gt;

&lt;p&gt;More info here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://content-security-policy.com/"&gt;https://content-security-policy.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And to help you create one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://report-uri.com/home/generate"&gt;https://report-uri.com/home/generate&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-add-preconnect" class="anchor"&gt;
  &lt;/a&gt;
  Bonus: Add preconnect
&lt;/h2&gt;

&lt;p&gt;While you're adding entries to your CSP, add a &lt;code&gt;&amp;lt;link rel="preconnect"&amp;gt;&lt;/code&gt;-tag for the same entries to speed up communication between your site and these resources. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example for "Google Fonts":&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preconnect"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.gstatic.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>security</category>
    </item>
    <item>
      <title>How to Access Object Properties in JavaScript in Three Ways</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 25 Jan 2021 07:17:29 +0000</pubDate>
      <link>https://dev.to/alexdevero/how-to-access-object-properties-in-javascript-in-three-ways-4hde</link>
      <guid>https://dev.to/alexdevero/how-to-access-object-properties-in-javascript-in-three-ways-4hde</guid>
      <description>&lt;p&gt;Objects are one area every JavaScript developer must know very well. Accessing object properties belongs to this area as well. In this tutorial, you will learn how to access object properties in three ways. You will learn how to use dot notation, bracket notation and destructuring.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-how-to-access-object-properties" class="anchor"&gt;
  &lt;/a&gt;
  Introduction to how to access object properties
&lt;/h2&gt;

&lt;p&gt;Objects are one of the data types in JavaScript. They allow you to store data in key-value pairs. Those "keys" in those pairs are also called properties. If you are not familiar with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"&gt;objects&lt;/a&gt; yet, you can think about them as &lt;a href="https://blog.alexdevero.com/javascript-variables-introduction/"&gt;variables&lt;/a&gt;. These variables exist only on the object that contains them, not anywhere outside these objects.&lt;/p&gt;

&lt;p&gt;In JavaScript there are multiple ways you can use to access one of those properties. These are dot notation, bracket notation and destructuring. Dot notation is sometimes also called dot property accessor. Another name for bracket notation is square brackets property access. There is one important thing to mention.&lt;/p&gt;

&lt;p&gt;All these ways assume you know the name of the property you want to access. If you don't know it, nothing is lost. You can &lt;a href="https://blog.alexdevero.com/javascript-loops/"&gt;loops&lt;/a&gt; to iterate over the object to get all properties, including the one you want. But now, let's take a look at those three ways you can use to access object properties.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dot-notation" class="anchor"&gt;
  &lt;/a&gt;
  Dot notation
&lt;/h2&gt;

&lt;p&gt;Dot notation, or dot property accessor, is probably the most popular way to access object properties in JavaScript. This method is very easy to learn and just as easy to use. The syntax is as follows. First, you specify some object. Second, you specify the name of the property. Between the object and property name goes a dot (&lt;code&gt;.&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;You can use the same process also to access deeper properties. In this case, you chain multiple properties together. You chain them in the way they are nested. So, the most shallow property will come as first, right after the object name. The deepest property will come as the last one: &lt;code&gt;obj.shallowProp.deeperProp.DeepestProp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's say you want to access property whose value is an array. You want to access specific item in that array. In this case, you can do what you would normally do if the array was a variable. You use the dot notation to access the property you want. After that, you use square brackets and index to get the item in the array you want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an object using object literal:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Anthony Edward Stark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Iron Man&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;education&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MIT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;current&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Avengers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;creators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Stan Lee&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Larry Lieber&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Don Heck&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack Kirby&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;good&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// Accessing object properties with dot notation:&lt;/span&gt;
&lt;span class="c1"&gt;// First: name of the object.&lt;/span&gt;
&lt;span class="c1"&gt;// Second: name of the property to access.&lt;/span&gt;
&lt;span class="c1"&gt;// Third: dot character between the object and property.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Anthony Edward Stark'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Iron Man'&lt;/span&gt;


&lt;span class="c1"&gt;// Accessing deeper object properties:&lt;/span&gt;
&lt;span class="c1"&gt;// Access the "current" property that exists&lt;/span&gt;
&lt;span class="c1"&gt;// in nested object assigned to "affiliation" property&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Avengers'&lt;/span&gt;


&lt;span class="c1"&gt;// Accessing array items in objects:&lt;/span&gt;
&lt;span class="c1"&gt;// Access the first item inside the array&lt;/span&gt;
&lt;span class="c1"&gt;// assigned to "creators" property.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;creators&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Stan Lee'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dot-notation-and-valid-property-names" class="anchor"&gt;
  &lt;/a&gt;
  Dot notation and valid property names
&lt;/h3&gt;

&lt;p&gt;In JavaScript, there are rules saying what is and what is not a valid identifier. A valid identifier can contain Unicode letters, &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt;, and digits 0-9. However, it can't start with a digit. Following these rules is necessary especially when you want to declare new variables.&lt;/p&gt;

&lt;p&gt;These rules are also important for when you want to access object properties. This is especially true for dot notation. Dot notation works only with valid identifiers. It will not work if the property at hand violates these rules. For example, if it starts with number, or contains only number. Or, if it contains &lt;code&gt;-&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to access some property that violates these rules, don't use dot notation. Instead, use bracket notation. This way, you will still be able to work with that property as usual. You will learn about bracket notation in the next section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an object:&lt;/span&gt;
&lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;First property&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first-name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bruce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Try to use dot notation&lt;/span&gt;
&lt;span class="c1"&gt;// to access properties on "myObj".&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// SyntaxError: Unexpected token&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// NaN&lt;/span&gt;


&lt;span class="c1"&gt;// Try to use bracket notation&lt;/span&gt;
&lt;span class="c1"&gt;// to access properties on "myObj".&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'First property'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'First property'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first-name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Bruce'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bracket-notation" class="anchor"&gt;
  &lt;/a&gt;
  Bracket notation
&lt;/h2&gt;

&lt;p&gt;The second way you can use to access object properties is bracket notation. The main characteristic of method this method are square brackets. The syntax is similar to the dot notation. However, there are some important differences. You again start with the name of the object you are working with.&lt;/p&gt;

&lt;p&gt;As second comes the name of the property. Here, you have to wrap the name of the property with quotes and square brackets. It doesn't matter if you use single or double quotes. What matters is that you use them to wrap the name of the property. Then, you wrap this with square brackets and put it after the object. No dot between them.&lt;/p&gt;

&lt;p&gt;Bracket notation also allows you to access deeper properties. This works similarly to dot notation. All properties are chained together, from the most shallow to the deepest. In case of brackets, there are no dots between properties. Furthermore, you must wrap all properties with quotes and square brackets.&lt;/p&gt;

&lt;p&gt;Accessing items inside arrays assigned to properties works similarly. First, specify the property name and wrap it with quotes and square brackets. Then, add additional pair of square bracket with the index of the item you want to access.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an object:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bruce Thomas Wayne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Batman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Batman Family&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Justice League&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Outsiders&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Guild of Detection&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;good&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;occupation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;businessman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// Accessing object properties with bracket notation:&lt;/span&gt;
&lt;span class="c1"&gt;// First: name of the object.&lt;/span&gt;
&lt;span class="c1"&gt;// Second: name of the property to access.&lt;/span&gt;
&lt;span class="c1"&gt;// Note: property name must be wrapped with quotes&lt;/span&gt;
&lt;span class="c1"&gt;// and then with square brackets.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Bruce Thomas Wayne'&lt;/span&gt;


&lt;span class="c1"&gt;// Accessing deeper object properties:&lt;/span&gt;
&lt;span class="c1"&gt;// Access the "alignment" property that exists&lt;/span&gt;
&lt;span class="c1"&gt;// in nested object assigned to "status" property&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;status&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alignment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'good'&lt;/span&gt;


&lt;span class="c1"&gt;// Accessing array items in objects:&lt;/span&gt;
&lt;span class="c1"&gt;// Access the second item inside the array&lt;/span&gt;
&lt;span class="c1"&gt;// assigned to "affiliation" property.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;affiliation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Justice League'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#bracket-notation-and-computed-object-properties" class="anchor"&gt;
  &lt;/a&gt;
  Bracket notation and computed object properties
&lt;/h3&gt;

&lt;p&gt;One interesting thing bracket notation allows is to use computed property names. These property names might not be known at the beginning, but later, or at runtime. One example can be a property name stored inside a variable. You can reference this variable to access property that matches the variable value.&lt;/p&gt;

&lt;p&gt;This variable might be undefined at the beginning and assigned later. That doesn't matter if you use it at the right time. Using computed object properties with bracket notation is similar to what you would normally do. The difference is that, now, you omit the quotes. You put the variable name between the brackets without them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an object:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;James Howlett&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Wolverine&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;good&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Assign a property you want to access to a variable:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myProp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alias&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Use the variable to access specific property ("alias"):&lt;/span&gt;
&lt;span class="c1"&gt;// Referencing "myProp" will return value "alias",&lt;/span&gt;
&lt;span class="c1"&gt;// which will be used to access the same property ("alias").&lt;/span&gt;
&lt;span class="c1"&gt;// I.e.: myObj[myProp] =&amp;gt; myObj['alias']&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;myProp&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Wolverine'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#object-destructuring" class="anchor"&gt;
  &lt;/a&gt;
  Object destructuring
&lt;/h2&gt;

&lt;p&gt;Object destructuring is the last way to access object properties. It is also the newest. Dot and bracket notation have been around for a long time. Destructuring was added to JavaScript quite recently as part of the ES6 specification. Nonetheless, it quickly became very popular among JavaScript developers due to simplicity and usability.&lt;/p&gt;

&lt;p&gt;You use it when you declare new variable. On the left side of the assignment, you specify the name of the property and wrap it with curly brackets. On the right side, you reference the object you want to work with. This will assign the variable with the value of the property you specified.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an object:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Unknown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The Joker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Black Glove&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Injustice Gang&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Injustice League&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joker League of Anarchy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Justice League of Arkham&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bad&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;occupation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;criminal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// Extract the value of "alias" property:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;alias&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Log the value of new "alias" variable:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'The Joker'&lt;/span&gt;


&lt;span class="c1"&gt;// Extract the value of "affiliation" property:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;affiliation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Log the value of new "affiliation" variable:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// [&lt;/span&gt;
&lt;span class="c1"&gt;//   'Black Glove',&lt;/span&gt;
&lt;span class="c1"&gt;//   'Injustice Gang',&lt;/span&gt;
&lt;span class="c1"&gt;//   'Injustice League',&lt;/span&gt;
&lt;span class="c1"&gt;//   'Joker League of Anarchy',&lt;/span&gt;
&lt;span class="c1"&gt;//   'Justice League of Arkham'&lt;/span&gt;
&lt;span class="c1"&gt;// ]&lt;/span&gt;


&lt;span class="c1"&gt;// Extract the value of "status" property:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Log the value of new "status" variable:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// { alignment: 'bad', occupation: 'criminal' }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#destructuring-multiple-properties" class="anchor"&gt;
  &lt;/a&gt;
  Destructuring multiple properties
&lt;/h3&gt;

&lt;p&gt;You can use object destructuring to "destructure" multiple properties. Put another way, to assign multiple variables at the same time. To do this, you add additional properties inside the curly braces on the left side of the assignment. These properties have to be separated by commas.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an object:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dr. Reed Richards&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mister Fantastic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Fantastic Four&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;good&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// Use object destructuring to assign multiple variables:&lt;/span&gt;
&lt;span class="c1"&gt;// Desctructure "name", "alias", "affiliation" and "status".&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Log the values of new variables:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Dr. Reed Richards'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Mister Fantastic'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Fantastic Four'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// { alignment: 'good' }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#custom-variable-names-and-aliases" class="anchor"&gt;
  &lt;/a&gt;
  Custom variable names and aliases
&lt;/h3&gt;

&lt;p&gt;Assigning values to variables with object destructuring is very easy. What if you want to use different variable name than is the name of the property? You can. Object destructuring allows you to specify an alias for the variable. You can use this alias to reference the variable using different name than the property.&lt;/p&gt;

&lt;p&gt;When you want to create an alias, you specify it inside the curly brackets on the left side of the assignment. You add colons (&lt;code&gt;:&lt;/code&gt;) followed by the new alias right after the property name. From now on, you can use this alias when you want to reference that variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an object:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bruce Banner&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hulk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;S.H.I.E.L.D.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;good&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// Extract the value of "name" property&lt;/span&gt;
&lt;span class="c1"&gt;// and assign it to variable called "realName" (new alias).&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;realName&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Use new alias "realName" to get the value&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;realName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Bruce Banner'&lt;/span&gt;


&lt;span class="c1"&gt;// Extract the value of "alias" property&lt;/span&gt;
&lt;span class="c1"&gt;// and assign it to variable called "heroName" (new alias).&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;heroName&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Use new alias "heroName" to get the value&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heroName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Hulk'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#custom-variable-names-aliases-for-multiple-properties" class="anchor"&gt;
  &lt;/a&gt;
  Custom variable names (aliases) for multiple properties
&lt;/h3&gt;

&lt;p&gt;Just like you can change the variable name for one property you can change it for multiple. The process is the same. You have to add additional colons and new alias inside the curly brackets. Do this for each property for which you want to change the variable name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an object:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Oliver Jonas Queen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Green Arrow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Justice League&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Justice Society International&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;good&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Change multiple variable names:&lt;/span&gt;
&lt;span class="c1"&gt;// Change variable for "name" to "realName".&lt;/span&gt;
&lt;span class="c1"&gt;// Change variable for "alias" to "heroName".&lt;/span&gt;
&lt;span class="c1"&gt;// Change variable for "affiliation" to "connection".&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;realName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;heroName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Log all values using new variable names:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;realName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Oliver Jonas Queen'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heroName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Green Arrow'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// [ 'Justice League', 'Justice Society International' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#object-destructuring-aliases-and-default-values" class="anchor"&gt;
  &lt;/a&gt;
  Object destructuring, aliases and default values
&lt;/h3&gt;

&lt;p&gt;Object destructuring might be cool, but what if the property you want to access doesn't exist? One thing you can do with object destructuring is to provide some default value. If the property doesn't exist, the variable will be assigned this default value. Otherwise, it will be assigned the existing value.&lt;/p&gt;

&lt;p&gt;When you want to specify default value for any property, you do it also inside the curly brackets. You specify the default value after the property name. You also have to separate those two with equal sign (&lt;code&gt;=&lt;/code&gt;). If there is an alias, then, the default value comes after the alias, as last.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an object:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Richard John Grayson&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nightwing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;good&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Deconstruct the "name" property&lt;/span&gt;
&lt;span class="c1"&gt;// and add default value in case it doesn't exist.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Anonymous&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Log the value of name&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Richard John Grayson'&lt;/span&gt;


&lt;span class="c1"&gt;// Deconstruct the "gender" property&lt;/span&gt;
&lt;span class="c1"&gt;// and add default value in case it doesn't exist.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Unknown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Log the value of "name":&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Unknown'&lt;/span&gt;


&lt;span class="c1"&gt;// Deconstruct the "name" property&lt;/span&gt;
&lt;span class="c1"&gt;// and "affiliation" property,&lt;/span&gt;
&lt;span class="c1"&gt;// change it to "connections" and add default value&lt;/span&gt;
&lt;span class="c1"&gt;// in case "affiliation" property doesn't exist.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;connections&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;No connections&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Log the value of new variable "connections":&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'No connections'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#object-destructuring-and-computed-properties" class="anchor"&gt;
  &lt;/a&gt;
  Object destructuring and computed properties
&lt;/h3&gt;

&lt;p&gt;Similarly to bracket notation, object destructuring also allows to use computed property names. The way to use it is following. Wrap the variable name, that contains the property name, with square brackets and put it inside the curly brackets. One thing to remember is that you have to specify an alias. Otherwise, you will get SyntaxError.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an object:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Max Eisenhardt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Magneto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bad&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;creators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Stan Lee&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack Kirby&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Assign a property you want to access to a variable:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myProp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Use the variable to access specific property ("name")&lt;/span&gt;
&lt;span class="c1"&gt;// and also create alias for it:&lt;/span&gt;
&lt;span class="c1"&gt;// Referencing "myProp" will now return value "name",&lt;/span&gt;
&lt;span class="c1"&gt;// which will be used to access the "name" property.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;myProp&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Log the value of new variable "name":&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Wolverine'&lt;/span&gt;


&lt;span class="c1"&gt;// Use computed property name with default value:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myProp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;powers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Use the variable to access specific property ("powers")&lt;/span&gt;
&lt;span class="c1"&gt;// and create alias "abilities" for it.&lt;/span&gt;
&lt;span class="c1"&gt;// If the property doesn't exist, use 'Unknown'&lt;/span&gt;
&lt;span class="c1"&gt;// as the default value for the new variable.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;myProp&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;abilities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Unknown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Log the value of new variable "abilities":&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;abilities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Unknown'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-how-to-access-object-properties-in-javascript-in-three-ways" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion: How to access object properties in JavaScript in three ways
&lt;/h2&gt;

&lt;p&gt;These are three ways to access object properties in JavaScript: dot and bracket notation and object destructuring. I hope this tutorial helped you understand how all they all work and how to use them. Now, find the one you feel the most comfortable with and start using it. Remember, there are no good or bad ways to access properties.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
