<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>A snippy JS function to trim those long strings</title>
      <author>Brett Thurston</author>
      <pubDate>Fri, 05 Feb 2021 16:23:04 +0000</pubDate>
      <link>https://dev.to/brettthurs10/a-snippy-js-function-to-trim-those-long-strings-116h</link>
      <guid>https://dev.to/brettthurs10/a-snippy-js-function-to-trim-those-long-strings-116h</guid>
      <description>&lt;p&gt;In this article you'll find a method to use whenever you have a long string that may funk up your UI components. &lt;/p&gt;

&lt;p&gt;I was working on a list item component for a project and found a problem we run into a lot. What I have is a list of cards that bring in a title, publish date, and an episode description. Instead of manually trimming the string in the component itself, what if we could trim the string on the fly? This is especially useful when working with JS frameworks like React JS and Vue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C_OyW4Q2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a38faqhp502ort0lg0zr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C_OyW4Q2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a38faqhp502ort0lg0zr.png" alt="Screen Shot 2021-02-05 at 9.27.07 AM"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The description length of each episode will vary from each publication. I'm positive the descriptions will run past the limit I want them to in these card components. Then my list of cards will all have different heights. I like symmetry so I needed to trim these description strings on the fly. Here's how I did it and one of many different ways to do it.&lt;/p&gt;






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function truncate(string, characterLimit) {
/* first argument, pass in a string */
/* optional second argument: pass in a character 
      limit for this string. */
/* reminder: ?? is a nullish coalescing operator. 
      if we find that the 2nd argument passed in is 
      null or undefined, we default the character limit 
      to 160 characters */
  let limit = characterLimit ?? 160;
/* set up a variable called finalString to return at the end.  */
  let finalString;
/* if condition that asks if the string character count is 
       greater than or equal to the limit variable. if it is then 
       we want to remove everything after the number of the 
       limit set and append ellipse ("...") */
  if (string.length &amp;gt;= limit) {
    finalString = string.substring(0, limit);
    finalString = finalString + "...";
  } else {
/* if the string is less than or equal to the limit, let's go 
       ahead and pass the string by assigning it to our 
       finalString variable */
    finalString = string;
  }
  return finalString;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's see what happens when we use this method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const shortDescription = "If a parsley farmer gets sued, can they garnish his wages?"

const longDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam ex ante, molestie eu nisl non, tempor rutrum tortor. Suspendisse ultricies odio ac turpis porta volutpat. Vestibulum rhoncus laoreet elit ut dictum. Ut id lorem ut ipsum cursus eleifend sed vitae dui. Mauris commodo elit at leo consectetur, ut blandit lacus laoreet. Vivamus placerat congue consectetur. Vivamus non nisi a tortor aliquet dictum. Sed ut condimentum nunc. In hac habitasse platea dictumst. Praesent id egestas libero. Vivamus sed tellus orci. Ut luctus mauris nunc, pulvinar bibendum urna dictum non. Duis bibendum commodo arcu, ut elementum diam vulputate vitae."

truncate(longDescription)
/* "Lorem ipsum dolor sit amet, consectetur adipiscing elit. 
Etiam ex ante, molestie eu nisl non, tempor rutrum tortor. 
Suspendisse ultricies odio ac turpis porta v..." */

truncate(longDescription, 250)
/* "Lorem ipsum dolor sit amet, consectetur adipiscing elit. 
Etiam ex ante, molestie eu nisl non, tempor rutrum tortor. 
Suspendisse ultricies odio ac turpis porta volutpat. Vestibulum 
rhoncus laoreet elit ut dictum. Ut id lorem ut ipsum cursus 
eleifend s..." */

truncate(shortDescription)
/* "If a parsley farmer gets sued, can they garnish his wages?" */

shortDescription.length
/* 58
58 is less than the default 160 limit, so the string is passed 
through unmodified */
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So this function not only trims your long copy descriptions, but it also allows you to pass in a limit to override whatever default limit you set. This is super handy because now, you've written a function that becomes super nimble. For instance, I used the same truncate function in this fixed audio player bar I'm working on. Notice it's trimming the episode title.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IA43C8ny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hiwxd57ms9oizuy6ig9i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IA43C8ny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hiwxd57ms9oizuy6ig9i.png" alt="Screen Shot 2021-02-05 at 10.02.55 AM"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Whenever you're writing your functions make sure they have one responsibility, but allow for customization as needed. &lt;/p&gt;

&lt;p&gt;So now you've got one way to trim a long description in the UI. You've seen how to write a function that considers future use in other areas of your program too.&lt;/p&gt;

&lt;p&gt;How would you handle this equation? Share your solutions below. &lt;/p&gt;

&lt;p&gt;Thanks for reading and happy snipping!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Photo by &lt;a href="https://unsplash.com/@triconautes?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Les Triconautes&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/scissors-thread?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>The Question to Ask Yourself When Imposter Syndrome Strikes</title>
      <author>Ana Vela</author>
      <pubDate>Fri, 05 Feb 2021 14:40:16 +0000</pubDate>
      <link>https://dev.to/anaveecodes/the-question-to-ask-yourself-when-imposter-syndrome-strikes-kmk</link>
      <guid>https://dev.to/anaveecodes/the-question-to-ask-yourself-when-imposter-syndrome-strikes-kmk</guid>
      <description>&lt;p&gt;Imposter Syndrome is what happens when you feel inadequate as a developer. Despite all the skills and experience you have, this feeling still creeps up from time to time. From junior to senior developers, everyone will face this at one point or another.&lt;/p&gt;

&lt;p&gt;After reading this article by Mark Manson, I found one way to recalibrate when it comes to the way I'm feeling about my work.  &lt;a href="https://markmanson.net/question"&gt;The Most Important Question of Your Life&lt;/a&gt; can apply to just about anything, so I modified the question for developers. And the question is:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Are you willing to sustain the pain that comes with learning, improving, and working in web development?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And how do developers suffer? Well, here are a few examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Debugging issues with no clear solution&lt;/li&gt;
&lt;li&gt;Learning difficult concepts that don't sink in easily&lt;/li&gt;
&lt;li&gt;Having to learn more new technology to stay relevant&lt;/li&gt;
&lt;li&gt;Deleting code you worked hard to write because it is not needed anymore&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your answer to the question above is &lt;strong&gt;yes&lt;/strong&gt;, then here are some tips to ease the pain of pursuing web development:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reverse-engineer-the-role-you-want-to-have" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Reverse Engineer the Role You Want to Have&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Look up and carefully read job descriptions for your dream role. Find interviews of developers holding that role to learn more about what they do. Some great podcasts where you can find interviews are &lt;a href="https://www.codenewbie.org/podcast"&gt;The Code Newbie Podcast&lt;/a&gt; and &lt;a href="https://learntocodewith.me/podcast/"&gt;The Learn Code With Me Podcast&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Reach out to companies who hire for that role and ask them how they evaluate potential applicants so you can plan to build those skills.  Create goals and review them every day to make sure you are on the right path. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connect-with-others" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Connect with Others&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;If you are going to suffer anyway, why not suffer together? Join meetups, discord servers, and/or get more active on social media. I highly recommend learning more about communities such as &lt;a href="https://devinitelyhealthy.xyz/"&gt;#devinitelyhealthy&lt;/a&gt; and &lt;a href="https://www.100daysofcode.com/"&gt;#100daysofcode&lt;/a&gt; that have great support for developers of all levels. &lt;/p&gt;

&lt;p&gt;If you prefer one-on-one interaction, either look into getting a mentor or become a mentor yourself.  &lt;a href="https://blog.pragmaticengineer.com/"&gt;Gergely Orosz&lt;/a&gt; wrote a comprehensive article about &lt;a href="https://blog.pragmaticengineer.com/developers-mentoring-other-developers/"&gt;developers mentoring other developers&lt;/a&gt; that gives you a good sense of what mentorship is like.  &lt;a href="https://www.samjulien.com/"&gt;Sam Julien&lt;/a&gt;  has useful recommendations if you prefer to  &lt;a href="https://samjulien.hashnode.dev/how-to-self-mentor-ckiz5pad900ttr1s1fjqg4fah"&gt;self-mentor&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-projects" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Build Projects&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Whether you are solidifying your current skills or trying to learn new concepts, building projects is a way to show what your learning. These projects can be talking points for interview questions or ways to share what you are learning with others. Create small projects and constantly keep building. You don’t need to add so many technologies to one project. It could be focused on concepts you want to reinforce or maybe you want to try something new.&lt;/p&gt;

&lt;p&gt;If you need project ideas, take a look at Florin Pop's  &lt;a href="https://github.com/florinpop17/app-ideas"&gt;App Ideas Collection&lt;/a&gt; on GitHub. Project ideas are organized by level with lots of detailed information to get you started. You could also try some coding challenges that come with designs and specs for you to build a project from sites like &lt;a href="https://www.frontendmentor.io/"&gt;Frontend Mentor&lt;/a&gt;  or  &lt;a href="https://www.frontendmentor.io/"&gt;Dev Challenges&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#teach-what-you-know" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Teach What You Know&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Sharing your knowledge forces you to get clear about basic concepts in a way that is easy for others to understand. For example, you could create tutorials or share how you went about learning a new technology. You can write blogs, start a YouTube channel, or even write an e-book. You can also help other developers troubleshoot issues. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#maintain-a-career-doc" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Maintain a Career Doc&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;With all this activity, you'll want to keep track of what you are doing and learning.  &lt;a href="https://udaraw.com/"&gt;Udara Weerasinghe&lt;/a&gt; wrote a detailed post about this called  &lt;a href="https://udaraw.com/career-docs/"&gt;Level Up Your Resume: Why You Should Start a Career Doc&lt;/a&gt;. You'll see how much progress you've made by regularly logging what you're learning and these details will be ready for you when you are job hunting. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Imposter Syndrome does not have to stop you from pursuing what you want. Make it the fuel that gets you out of your comfort zone, into your dream role, or leveling up in your current position.&lt;/p&gt;

&lt;p&gt;What are some ways you deal with imposter syndrome? Feel free to add a comment here or reach out to me on  &lt;a href="https://twitter.com/anaveecodes"&gt;Twitter&lt;/a&gt;  or  &lt;a href="https://www.instagram.com/anaveecodes/"&gt;Instagram&lt;/a&gt; . &lt;/p&gt;

&lt;p&gt;&lt;span&gt;Photo by &lt;a href="https://unsplash.com/@jeshoots?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;JESHOOTS.COM&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/frustrated?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>motivation</category>
      <category>codenewbie</category>
      <category>career</category>
    </item>
    <item>
      <title>Hosting Kotlin/JS on GitHub Pages via GitHub Actions</title>
      <author>Sebastian Aigner</author>
      <pubDate>Fri, 05 Feb 2021 12:16:28 +0000</pubDate>
      <link>https://dev.to/kotlin/hosting-kotlin-js-on-github-pages-via-github-actions-3gep</link>
      <guid>https://dev.to/kotlin/hosting-kotlin-js-on-github-pages-via-github-actions-3gep</guid>
      <description>&lt;p&gt;&lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; is an easy way to &lt;strong&gt;host your Kotlin/JS application&lt;/strong&gt; - and in combination with the &lt;strong&gt;continuous integration&lt;/strong&gt; service &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;, you can easily set up a smooth development (and deployment!) experience for your projects. Read on to learn how you can &lt;strong&gt;build and test your application on GitHub's CI&lt;/strong&gt;, and get your &lt;strong&gt;Kotlin/JS web apps published for free&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this post, we are going to configure GitHub Actions and Pages so that &lt;strong&gt;new code&lt;/strong&gt; pushed to our repository or added via pull request &lt;strong&gt;is automatically validated&lt;/strong&gt; (by having the project built and our tests run on GitHub's servers), and code pushed to the main branch of our project is automatically made &lt;strong&gt;available to the public&lt;/strong&gt; (by generating and publishing production artifacts of our app).&lt;/p&gt;

&lt;p&gt;To achieve this, we are going to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#sample-setup"&gt;Set up a quick Kotlin/JS project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#github-integration"&gt;Share its code on GitHub&lt;/a&gt; (via IntelliJ IDEA's Git integration)&lt;/li&gt;
&lt;li&gt;&lt;a href="#gh-action-setup"&gt;Set up GitHub Actions' workflow YAML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gh-pages-setup"&gt;Set up GitHub pages to work with the result of our Actions workflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;If you already know the basics, and want to skip straight to the configuration section, &lt;a href="#gh-action-setup"&gt;click here&lt;/a&gt; – or &lt;a href="https://github.com/SebastianAigner/kotlin-js-on-gh-pages"&gt;find the sample project directly on GitHub&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-our-sample-kotlinjs-application" class="anchor"&gt;
  &lt;/a&gt;
  Setting up our sample Kotlin/JS application &lt;a&gt;
&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;To &lt;em&gt;deploy&lt;/em&gt; a project, we must first &lt;em&gt;have&lt;/em&gt; a project. For this demo, I will use an &lt;strong&gt;example generated via project wizard&lt;/strong&gt; – if you already have a Kotlin/JS application you would like to deploy, feel free to skip ahead and use it instead.&lt;/p&gt;

&lt;p&gt;A boilerplate Kotlin/JS project is quickly generated in &lt;a href="https://www.jetbrains.com/idea/"&gt;IntelliJ IDEA&lt;/a&gt; by navigating to File | New | Project..., selecting "Kotlin" in the sidebar, and choosing a &lt;strong&gt;project template&lt;/strong&gt; in the "Kotlin/JS" section (I'm choosing a React project). We just need to make sure that a Project JDK is selected. For everything else, the default settings are fine and don't need to be adjusted:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8F45ZQep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1nzk5keyrms4u7bh619e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8F45ZQep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1nzk5keyrms4u7bh619e.png" alt="new-project-wizard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we have a basic project, let's start by &lt;strong&gt;getting it on GitHub&lt;/strong&gt; - creating a repository and pushing our code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#putting-our-code-on-github" class="anchor"&gt;
  &lt;/a&gt;
  Putting our code on GitHub &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We could, of course, use &lt;a href="https://guides.github.com/activities/hello-world/#repository"&gt;GitHub's web interface&lt;/a&gt; to set up our repository, and wire up our local repository manually – but &lt;strong&gt;&lt;a href="https://www.jetbrains.com/help/idea/version-control-integration.html"&gt;IntelliJ IDEA's Version Control Integration&lt;/a&gt;&lt;/strong&gt; makes it &lt;strong&gt;even smoother&lt;/strong&gt; to move our project code into a new GitHub Repository. We simply select "&lt;strong&gt;Share Project on GitHub&lt;/strong&gt;" in the "VCS" tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WkkRshol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e5y09kdv0ube2dmztwq9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WkkRshol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e5y09kdv0ube2dmztwq9.png" alt="share project on github"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If this is your first time using this feature, IntelliJ IDEA might ask you to &lt;strong&gt;authenticate&lt;/strong&gt; using your GitHub account. You then get to specify your repository name, its visibility (private/public), and can provide a short description that will show up on GitHub:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zWudM5hT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i42fc1w8jug5l95wafiv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zWudM5hT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i42fc1w8jug5l95wafiv.png" alt="share proj"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once confirmed, IntelliJ IDEA will create a GitHub project for you, and show you the "Add Files For Initial Commit" window, which we can simply accept by pressing "Add":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rZIM4gfc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/29g49u26awwu8ebz8ig3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rZIM4gfc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/29g49u26awwu8ebz8ig3.png" alt="initial commit including gitignore"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you might have noticed, IntelliJ IDEA makes our life a bit easier here by &lt;strong&gt;auto-generating&lt;/strong&gt; a default set of &lt;code&gt;.gitignore&lt;/code&gt; files, making sure that any files which shouldn't be checked into source control (such as build artifacts or local configurations) are &lt;strong&gt;correctly ignored&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once the commit is finished, we see a small notification bubble containing a &lt;strong&gt;link to our GitHub repository&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PseGI43A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/st0uwzx0v3qi9s66k4w6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PseGI43A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/st0uwzx0v3qi9s66k4w6.png" alt="success"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-github-actions" class="anchor"&gt;
  &lt;/a&gt;
  Setting up GitHub Actions &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Time to set up GitHub Actions! Actions will be responsible for &lt;strong&gt;building and testing&lt;/strong&gt; our project – turning our Kotlin source files into &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.html&lt;/code&gt; artifacts, running any unit tests we might have, and copying files into the right location for deployment on GitHub Pages (a branch called &lt;code&gt;gh-pages&lt;/code&gt; by convention). We configure Actions using so-called &lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions"&gt;&lt;strong&gt;workflows&lt;/strong&gt;&lt;/a&gt;, which are YAML configuration files containing instructions on how to transform and build code.&lt;/p&gt;

&lt;p&gt;GitHub looks for workflows in the &lt;code&gt;.github/workflows&lt;/code&gt; directory, so let's create this directory structure at our project's root. Inside, let's create a new file called &lt;code&gt;build-and-publish-kjs.yml&lt;/code&gt;, and add the following configuration to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build and Publish&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;pull_request&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Test and Build&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

      &lt;span class="c1"&gt;# Setup Java 1.8 environment for the next steps&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup Java&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-java@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;java-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.8&lt;/span&gt;

      &lt;span class="c1"&gt;# Check out current repository&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Fetch Sources&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="c1"&gt;# Build application&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Test and Build&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./gradlew build&lt;/span&gt;

      &lt;span class="c1"&gt;# If main branch update, deploy to gh-pages&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;JamesIves/github-pages-deploy-action@3.7.1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
          &lt;span class="na"&gt;BRANCH&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gh-pages&lt;/span&gt; &lt;span class="c1"&gt;# The branch the action should deploy to.&lt;/span&gt;
          &lt;span class="na"&gt;FOLDER&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build/distributions&lt;/span&gt; &lt;span class="c1"&gt;# The folder the action should deploy.&lt;/span&gt;
          &lt;span class="na"&gt;CLEAN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;# Automatically remove deleted files from the deploy branch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#understanding-our-action-yaml" class="anchor"&gt;
  &lt;/a&gt;
  Understanding our Action YAML
&lt;/h3&gt;

&lt;p&gt;We could just use this configuration as is, and move on to the next step – but it's always good to try and understand what's going on in our project. And while the YAML configuration reads quite naturally, I still want to quickly look at this configuration file section by section (Additionally, feel free to consult the &lt;a href="https://docs.github.com/en/actions/learn-github-actions"&gt;GitHub Actions documentation&lt;/a&gt; for more information):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We first give our workflow a &lt;code&gt;name&lt;/code&gt; – in this case, &lt;code&gt;Build and Publish&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Next, we define the triggers for this workflow – what events &lt;strong&gt;kick off&lt;/strong&gt; this process. Because we want to make sure that pushed code always compiles, and that pull requests are also fine, we set the value to &lt;code&gt;push&lt;/code&gt; and &lt;code&gt;pull_request&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Next, we define a &lt;code&gt;job&lt;/code&gt;, which &lt;strong&gt;groups&lt;/strong&gt; the different steps we want to run in a given environment (in our case, &lt;code&gt;ubuntu-latest&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Now, we define the different &lt;code&gt;steps&lt;/code&gt; our build needs to go through:

&lt;ul&gt;
&lt;li&gt;The Kotlin compiler needs Java to be present, so we use a &lt;a href="https://github.com/actions/setup-java"&gt;predefined GitHub Action&lt;/a&gt; to &lt;strong&gt;install Java &lt;code&gt;1.8&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;We use &lt;a href="https://github.com/actions/checkout"&gt;another predefined Action&lt;/a&gt; to &lt;strong&gt;check out the code&lt;/strong&gt; for our project.&lt;/li&gt;
&lt;li&gt;We run the &lt;code&gt;./gradlew build&lt;/code&gt; command. &lt;code&gt;build&lt;/code&gt; is a &lt;strong&gt;standard lifecycle&lt;/strong&gt; task for Kotlin/JS projects which installs all dependencies from npm and Gradle, compiles the application, and runs any tests included in the project.&lt;/li&gt;
&lt;li&gt;Lastly, we use &lt;a href="https://github.com/JamesIves/github-pages-deploy-action"&gt;another Action&lt;/a&gt; to &lt;strong&gt;deploy our project&lt;/strong&gt; to GitHub Pages – but &lt;strong&gt;only if the workflow is running on the &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;main&lt;/code&gt; branch&lt;/strong&gt; (we don't want development branches to be deployed to the public!). We point this action to the &lt;code&gt;build/distributions&lt;/code&gt; folder, which is where building a Kotlin/JS project creates the final &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.html&lt;/code&gt; artifacts.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: This workflow &lt;strong&gt;builds and tests all commits and pull requests&lt;/strong&gt; – if the commit is on the &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;main&lt;/code&gt; branch, the changes are prepared for &lt;strong&gt;publishing via Pages&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#committing-the-workflow-file" class="anchor"&gt;
  &lt;/a&gt;
  Committing the workflow file
&lt;/h3&gt;

&lt;p&gt;To enable our newly created workflow in the GitHub project, we &lt;strong&gt;commit and push&lt;/strong&gt; our new &lt;code&gt;build-and-publish-kjs.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you do this via IntelliJ IDEA's "Commit and Push" functionality, please note that, depending on how your GitHub account is authenticated, you may encounter the following error when pushing a commit containing workflow files to your GitHub repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;error: failed to push some refs to 'https://github.com/SebastianAigner/kotlin-js-on-github-pages.git'
To https://github.com/SebastianAigner/kotlin-js-on-github-pages.git
!   refs/heads/master:refs/heads/master [remote rejected] (refusing to allow an OAuth App to create or update workflow `.github/workflows/build-and-publish-kjs.yml` without `workflow` scope)
Done
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is because of an OAuth issue with GitHub requiring a specific scope to push workflow-modifying commits. You can find more info on it and &lt;a href="https://youtrack.jetbrains.com/issue/IDEA-247361"&gt;vote on it here&lt;/a&gt;. Instead, you can commit the code via the terminal integrated in IntelliJ IDEA, using &lt;code&gt;git push origin master&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ru3o1w5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h3rijixf4qmhfsezqpc4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ru3o1w5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h3rijixf4qmhfsezqpc4.png" alt="git-push-origin-master"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the push has finished, we can watch the progress of our Kotlin/JS application being built and prepared for publishing in the "Actions" tab of our GitHub repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s1H33EX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ztnb7qdc5qpk4phezuqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s1H33EX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ztnb7qdc5qpk4phezuqa.png" alt="action_running"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-github-pages" class="anchor"&gt;
  &lt;/a&gt;
  Setting up GitHub Pages &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;After it finished, the workflow we created and triggered in the previous section put our final &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.html&lt;/code&gt; artifacts on the &lt;code&gt;gh-pages&lt;/code&gt; branch of our repository, just as we planned:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EB3RP9ij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r6lhyhlsxutuk9tux4oh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EB3RP9ij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r6lhyhlsxutuk9tux4oh.png" alt="gh-pages-branch"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;It's time to &lt;strong&gt;enable the GitHub Pages feature&lt;/strong&gt; of our repository, and point it to this branch. We can do this using the "Settings" tab.&lt;/p&gt;

&lt;p&gt;Somewhere close to the bottom, we can find a section labelled "GitHub Pages". We select the &lt;code&gt;gh-pages&lt;/code&gt; branch and &lt;code&gt;/ (root)&lt;/code&gt; (default) and hit "Save":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JQV31bBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/66pf58m8og9xrbnzg01z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQV31bBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/66pf58m8og9xrbnzg01z.png" alt="github-pages-enable"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After saving our changes, scrolling back to this section reveals the &lt;strong&gt;URL under which our application is available&lt;/strong&gt;. (I have previously set up a custom domain for GitHub pages, so this one is used by default.) If you don't have a &lt;a href="https://docs.github.com/en/github/working-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site"&gt;custom configuration&lt;/a&gt;, the URL of your application usually takes the shape of &lt;code&gt;&amp;lt;username&amp;gt;.github.io/&amp;lt;reponame&amp;gt;&lt;/code&gt;. Visiting this URL shows our Kotlin/JS application in all its glory, and for the world to see:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kQajKrUZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xr3ooqc9l4rgrpjia265.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kQajKrUZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xr3ooqc9l4rgrpjia265.png" alt="ready to be published"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You can use this link to &lt;strong&gt;share your Kotlin/JS application&lt;/strong&gt; with friends and colleagues, or post it on your favorite news aggregator and wait for the upvotes to roll in! 😉&lt;/p&gt;

&lt;p&gt;(If your project is located in a private repository, you might want to change the GitHub Pages visibility. You can find more info on this in the &lt;a href="https://docs.github.com/en/github/working-with-github-pages/changing-the-visibility-of-your-github-pages-site"&gt;GitHub docs&lt;/a&gt;.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#take-your-project-for-a-spin" class="anchor"&gt;
  &lt;/a&gt;
  Take your project for a spin!
&lt;/h2&gt;

&lt;p&gt;We're done! From now on, whenever you push code, your project will automatically be built on GitHub's CI servers. If a commit is faulty, you can see so on the web interface – and you will even be reminded via email!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xh9fs7_Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hvu8r28kptsqq99ys2rd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xh9fs7_Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hvu8r28kptsqq99ys2rd.png" alt="checks failed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pushing to the main branch of the repository means your page (which is reachable at &lt;code&gt;&amp;lt;username&amp;gt;.github.io/&amp;lt;reponame&amp;gt;&lt;/code&gt;) will &lt;strong&gt;automatically&lt;/strong&gt; be updated.&lt;/p&gt;

&lt;p&gt;And when somebody makes a pull request, build and test status is also shown &lt;strong&gt;directly in context&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iQSE8eUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u3wl5tcsahepdma6pbbq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iQSE8eUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u3wl5tcsahepdma6pbbq.png" alt="pr failed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you" class="anchor"&gt;
  &lt;/a&gt;
  Thank you!
&lt;/h2&gt;

&lt;p&gt;I hope you found this post useful. &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; is a &lt;strong&gt;powerful, but also complex tool&lt;/strong&gt;, and I hope that these instructions make it a bit easier to get started together with Kotlin/JS. You can find the &lt;a href="https://github.com/SebastianAigner/kotlin-js-on-gh-pages"&gt;sample project I used&lt;/a&gt; to create the screenshots for this tutorial on GitHub as well, and use it as a source of inspiration or template for a future project.&lt;/p&gt;

&lt;p&gt;If you're interested in similar content, consider &lt;strong&gt;giving me a follow&lt;/strong&gt;, here on dev.to or on Twitter &lt;a href="https://twitter.com/sebi_io"&gt;@sebi_io&lt;/a&gt; to stay up to date.&lt;/p&gt;

&lt;p&gt;If you have ideas for future tutorials, please &lt;strong&gt;share them&lt;/strong&gt; in the comments below, or anywhere else you can get a hold of me!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Special thanks to &lt;a href="https://twitter.com/hszanowski"&gt;Jakub Chrzanowski&lt;/a&gt; for sharing some of his CI wisdom with me for this blog post.&lt;/em&gt;!&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>javascript</category>
      <category>github</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Concurrency in modern programming languages: JavaScript on NodeJS</title>
      <author>Deepu K Sasidharan</author>
      <pubDate>Fri, 05 Feb 2021 11:07:01 +0000</pubDate>
      <link>https://dev.to/deepu105/concurrency-in-modern-programming-languages-javascript-on-nodejs-epo</link>
      <guid>https://dev.to/deepu105/concurrency-in-modern-programming-languages-javascript-on-nodejs-epo</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://deepu.tech/concurrency-in-modern-languages-js/"&gt;deepu.tech&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Please follow me on &lt;a href="https://twitter.com/deepu105"&gt;Twitter&lt;/a&gt; for updates and let me know what can be improved in the post.&lt;/p&gt;




&lt;p&gt;This is a multi-part series where I'll be talking about concurrency in modern programming languages and will be building and benchmarking a concurrent web server, inspired by the example from the &lt;a href="https://doc.rust-lang.org/book/ch20-00-final-project-a-web-server.html"&gt;Rust book&lt;/a&gt;, in popular languages like Rust, Go, JavaScript (NodeJS), TypeScript (Deno), Kotlin and Java to compare concurrency and its performance between these languages/platforms. The chapters of this series are as below.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-introduction-ckk"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-rust-19co"&gt;Concurrent web server in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-golang-439i"&gt;Concurrent web server in Golang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Concurrent web server in JavaScript with NodeJS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Concurrent web server in TypeScript with Deno&lt;/li&gt;
&lt;li&gt;Concurrent web server in Java with JVM&lt;/li&gt;
&lt;li&gt;Concurrent web server in Kotlin with JVM&lt;/li&gt;
&lt;li&gt;Comparison and conclusion of benchmarks&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#concurrency-in-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Concurrency in JavaScript
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScript has a concurrency model based on an event loop, which is responsible for executing the code, collecting and processing events, and executing queued sub-tasks. This model is quite different from models in other languages like C and Java.&lt;/p&gt;

&lt;p&gt;-- MDN Web Docs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Concurrency in JavaScript is quite different from other languages we are looking at. The biggest difference is that JavaScript is single-threaded and hence multi-threading and parallelism is out of the question -- at least not traditional multi-threading or parallelism like in other languages, we will come to that later. But concurrency on the other hand is the heart and soul of the JavaScript event loop. It is how JavaScript is able to bridge the gap of multi-threading making JavaScript a serious contender in an arena filled with multi-threaded languages like Java, Go, Python, Rust, and so on. Read the &lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-introduction-ckk"&gt;introduction chapter&lt;/a&gt; to see why the difference matters.&lt;/p&gt;

&lt;p&gt;The JavaScript event loop relies on message passing concurrency to execute items on its stack in a non-blocking way, more like, it gives a perception of being non-blocking, because, in reality, it does block for a short moment since its single-threaded and execution is interleaved. This makes it perfect for most of the concurrency use cases you would encounter and you will rarely miss having multi-threading and true parallelism support and in many use cases, you can go head to head with a fully multi-threaded language.&lt;/p&gt;

&lt;p&gt;While languages like Rust offer &lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-rust-19co"&gt;flexibility and power&lt;/a&gt; and Go &lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-golang-439i"&gt;offers simplicity and performance&lt;/a&gt;, JavaScript was never meant for concurrency but that didn't stop the awesome people behind NodeJS to come up with a platform that was fully focused on concurrency and non-blocking I/O. While JavaScript event loop already paved the way for it, NodeJS made JS a truly viable option for server-side concurrency. All this is made possible thanks to the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop"&gt;event loop&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Callback_function"&gt;Callbacks&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;Promises&lt;/a&gt;, and &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await"&gt;Async/Await&lt;/a&gt; support in JavaScript.&lt;/p&gt;

&lt;p&gt;Unlike in many other languages, maybe except Go, concurrency is used a lot in JavaScript by developers, sometimes without even realizing it, especially in NodeJS applications. It's due to the programming model followed by NodeJS which relies heavily on callbacks and Promises and also because it is extremely easy to do so due to the flexible nature of JavaScript. The NodeJS standard library also uses concurrency where ever possible and there is no much overhead in doing so.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The default for concurrency in JavaScript is an asynchronous programming model using callbacks, Promise or async/await.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With JavaScript, it's possible to do some level of multi-threaded concurrency and parallelization. It's not as flexible as Rust or as simple as Go, but still, you can achieve almost everything possible in other languages and still get quite decent performance for most of those use cases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multithreading" class="anchor"&gt;
  &lt;/a&gt;
  Multi-threading
&lt;/h3&gt;

&lt;p&gt;JavaScript is single-threaded hence the only way to achieve multi-threading is by spinning up multiple instances of the JS Engine. But then how do you communicate between these instances? That is where &lt;a href="https://developer.mozilla.org/en-us/docs/Web/API/Web_Workers_API"&gt;Web Workers&lt;/a&gt; come in.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Web Workers makes it possible to run a script operation in a background thread separate from the main execution thread of a web application&lt;/p&gt;

&lt;p&gt;-- MDN Web Docs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the help of web workers, it is possible to offload heavy computations to a separate thread hence freeing up the main thread. These workers and the main thread communicate using events and a worker thread can spawn other worker threads.&lt;/p&gt;

&lt;p&gt;Now when it comes to NodeJS, there are few ways to spawn additional threads and processes. There is the classical &lt;a href="https://nodejs.org/api/child_process.html"&gt;&lt;code&gt;child_process&lt;/code&gt;&lt;/a&gt; module, the more modern &lt;a href="https://nodejs.org/dist/latest-v15.x/docs/api/worker_threads.html"&gt;&lt;code&gt;worker_threads&lt;/code&gt;&lt;/a&gt; module which is quite similar to web workers, and the &lt;a href="https://nodejs.org/api/cluster.html#cluster_cluster"&gt;&lt;code&gt;cluster&lt;/code&gt;&lt;/a&gt; module for creating clusters of NodeJS instances.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Workers (threads) are useful for performing CPU-intensive JavaScript operations. They do not help much with I/O-intensive work.&lt;/p&gt;

&lt;p&gt;-- NodeJS docs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Be it web workers or worker threads, they are not as flexible or easy as the multi-threading implementations in other languages and has many limitations and hence these are mostly used only when there are CPU intensive tasks or background tasks to be performed for other use cases concurrency using asynchronous processing would be sufficient.&lt;/p&gt;

&lt;p&gt;JavaScript doesn't provide access to OS threads or green threads, the same applies for NodeJS however worker threads and the cluster comes close, and hence advanced multi-threading is not feasible. Message-passing concurrency is possible and is used by the JS event loop itself and can be used for both workers and the standard concurrency model in JS. Shared-state concurrency is possible in the standard concurrency model and with workers using array buffers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#asynchronous-processing" class="anchor"&gt;
  &lt;/a&gt;
  Asynchronous processing
&lt;/h3&gt;

&lt;p&gt;Technically asynchronous programming is not part of concurrency but in practice, it goes hand in hand for many use cases and improves performance, and makes resource usage more efficient. Since the JavaScript event loop is non-blocking and asynchronous, it's perfect for asynchronous programming and that's why the concept is so popular among JS developers than in other languages and is heavily used especially in NodeJS and on the client-side with modern SPA frameworks. In a way, asynchronous programming was made popular by JavaScript and NodeJS. JavaScript provides 3 ways to do asynchronous programming, Callbacks, Promises, and Async/Await. In recent times Async/Await is becoming more widely used instead of or together with promises and callbacks due to its cleaner approach (Read, no callback hell). In NodeJS all I/O operations are async(non-blocking) by default, you would have to use sync alternatives provided to do synchronous I/O. This makes it easy to write concurrent applications in NodeJS using these constructs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// sequential&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getMessages&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// do stuff&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// concurrent&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;getMessages&lt;/span&gt;&lt;span class="p"&gt;()]);&lt;/span&gt;
  &lt;span class="c1"&gt;// do stuff&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#benchmarking" class="anchor"&gt;
  &lt;/a&gt;
  Benchmarking
&lt;/h2&gt;

&lt;p&gt;Now that we have some basic understanding of concurrency features in JavaScript &amp;amp; NodeJS, let us build a simple concurrent web server in NodeJS. Since asynchronous concurrency is the best way to achieve this in NodeJS we'll build a sample application using the standard &lt;code&gt;http&lt;/code&gt; module and then improve it using the &lt;code&gt;cluster&lt;/code&gt; module. The NodeJS version used is the latest (15.8.0) at the time of writing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#async-http-concurrent-webserver" class="anchor"&gt;
  &lt;/a&gt;
  Async HTTP concurrent webserver
&lt;/h3&gt;

&lt;p&gt;This example is closer to the Rust Asynchronous example we built in the &lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-rust-19co"&gt;second chapter&lt;/a&gt;. You can find the full example on &lt;a href="https://github.com/deepu105/concurrency-benchmarks/tree/main/jsws"&gt;GitHub here&lt;/a&gt;. We are not using any external dependency in this case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// set router&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;requestListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// set listen port&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is running on http://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;requestListener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// add 2 second delay to every 10th request&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Adding delay. Count: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/hello.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// read html file&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Connection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keep-alive&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 200 OK&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// send data to client side&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see we create an HTTP server and bind it to port 8080 and listen to all incoming requests. Each request is processed in a callback function that internally uses &lt;code&gt;async/await&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let us run a benchmark using ApacheBench. We will make 10000 requests with 100 concurrent requests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ab &lt;span class="nt"&gt;-c&lt;/span&gt; 100 &lt;span class="nt"&gt;-n&lt;/span&gt; 10000 http://127.0.0.1:8080/

This is ApacheBench, Version 2.3 &amp;lt;&lt;span class="nv"&gt;$Revision&lt;/span&gt;: 1879490 &lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt;
...

Server Software:
Server Hostname:        127.0.0.1
Server Port:            8080

Document Path:          /
Document Length:        174 bytes

Concurrency Level:      100
Time taken &lt;span class="k"&gt;for &lt;/span&gt;tests:   21.329 seconds
Complete requests:      10000
Failed requests:        0
Total transferred:      2540000 bytes
HTML transferred:       1740000 bytes
Requests per second:    468.85 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="c"&gt;#/sec] (mean)&lt;/span&gt;
Time per request:       213.286 &lt;span class="o"&gt;[&lt;/span&gt;ms] &lt;span class="o"&gt;(&lt;/span&gt;mean&lt;span class="o"&gt;)&lt;/span&gt;
Time per request:       2.133 &lt;span class="o"&gt;[&lt;/span&gt;ms] &lt;span class="o"&gt;(&lt;/span&gt;mean, across all concurrent requests&lt;span class="o"&gt;)&lt;/span&gt;
Transfer rate:          116.30 &lt;span class="o"&gt;[&lt;/span&gt;Kbytes/sec] received

Connection Times &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
              min  mean[+/-sd] median   max
Connect:        0    0   0.9      0      11
Processing:     0  207 599.9      4    2048
Waiting:        0  206 600.0      3    2038
Total:          0  208 599.9      4    2048

Percentage of the requests served within a certain &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
  50%      4
  66%      8
  75%     13
  80%     19
  90%   2000
  95%   2004
  98%   2012
  99%   2017
 100%   2048 &lt;span class="o"&gt;(&lt;/span&gt;longest request&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's see if there is a difference in performance with multi-threading using the &lt;code&gt;cluster&lt;/code&gt; package.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multithreaded-webserver-cluster" class="anchor"&gt;
  &lt;/a&gt;
  Multi-threaded webserver cluster
&lt;/h3&gt;

&lt;p&gt;This example is quite similar to the previous one except that we are using the &lt;code&gt;cluster&lt;/code&gt; module to fork into master and worker threads, one worker per CPU thread. We are still using the &lt;code&gt;http&lt;/code&gt; module and callbacks here. You can find the full example on &lt;a href="https://github.com/deepu105/concurrency-benchmarks/tree/main/jsws_thread"&gt;GitHub here&lt;/a&gt;. We are not using any external dependency in this case as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cluster&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cluster&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numCPUs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;os&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;cpus&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// set router&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;requestListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isMaster&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Master &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is running`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Fork workers.&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;numCPUs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;exit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`worker &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; died`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// set listen port, TCP connection is shared by all workers&lt;/span&gt;
  &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Worker &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: Server is running on http://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;requestListener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// add 2 second delay to every 10th request&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Adding delay. Count: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/hello.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// read html file&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Connection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keep-alive&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 200 OK&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// send data to client side&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// sleep function since NodeJS doesn't provide one&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see we used the same code from previous example and moved the &lt;code&gt;server.listen&lt;/code&gt; to the worker nodes. The cluster module forks into master and workers. We assign a callback function to handle each request which internally calls the &lt;code&gt;requestListener&lt;/code&gt; method. The code here is a bit more complex compared to the previous one.&lt;/p&gt;

&lt;p&gt;Let us run a benchmark using ApacheBench. We will make 10000 requests with 100 concurrent requests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ab &lt;span class="nt"&gt;-c&lt;/span&gt; 100 &lt;span class="nt"&gt;-n&lt;/span&gt; 10000 http://127.0.0.1:8080/

This is ApacheBench, Version 2.3 &amp;lt;&lt;span class="nv"&gt;$Revision&lt;/span&gt;: 1879490 &lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt;
...

Server Software:
Server Hostname:        127.0.0.1
Server Port:            8080

Document Path:          /
Document Length:        174 bytes

Concurrency Level:      100
Time taken &lt;span class="k"&gt;for &lt;/span&gt;tests:   21.075 seconds
Complete requests:      10000
Failed requests:        0
Total transferred:      2540000 bytes
HTML transferred:       1740000 bytes
Requests per second:    474.50 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="c"&gt;#/sec] (mean)&lt;/span&gt;
Time per request:       210.747 &lt;span class="o"&gt;[&lt;/span&gt;ms] &lt;span class="o"&gt;(&lt;/span&gt;mean&lt;span class="o"&gt;)&lt;/span&gt;
Time per request:       2.107 &lt;span class="o"&gt;[&lt;/span&gt;ms] &lt;span class="o"&gt;(&lt;/span&gt;mean, across all concurrent requests&lt;span class="o"&gt;)&lt;/span&gt;
Transfer rate:          117.70 &lt;span class="o"&gt;[&lt;/span&gt;Kbytes/sec] received

Connection Times &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
              min  mean[+/-sd] median   max
Connect:        0    0   0.8      0      11
Processing:     0  206 600.1      4    2047
Waiting:        0  205 600.1      3    2045
Total:          1  206 600.1      4    2047

Percentage of the requests served within a certain &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
  50%      4
  66%      8
  75%     11
  80%     14
  90%     88
  95%   2005
  98%   2012
  99%   2016
 100%   2047 &lt;span class="o"&gt;(&lt;/span&gt;longest request&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We got almost identical results here. If you look close, the multi-threaded one is slightly faster but then the added complexity might not be worth it for all use cases. So it might be preferable to just use the &lt;code&gt;http&lt;/code&gt; package without clustering for such use cases as it's cleaner.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As I explained in the &lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-introduction-ckk"&gt;first part&lt;/a&gt; of this serious, this simple benchmarking is not an accurate representation for all concurrency use cases. It's a simple test for a very particular use case, a simple concurrent web server that just serves a file. The idea is to see the differences in solutions and to understand how concurrency works in JavaScript specifically on NodeJS. And for this particular use case, an asynchronous server using the &lt;code&gt;http&lt;/code&gt; module provided by the standard library does seem to be the best choice.&lt;/p&gt;

&lt;p&gt;So stay tuned for the next post where we will look at concurrency in &lt;a href="https://deno.land/"&gt;Deno&lt;/a&gt; and build the same use case in TypeScript.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references" class="anchor"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop"&gt;developer.mozilla.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tsh.io/blog/simple-guide-concurrency-node-js/"&gt;tsh.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@onejohi/concurrency-in-javascript-f5bb387708d8"&gt;medium.com/@onejohi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/a-complete-guide-to-threads-in-node-js-4fa3898fe74f/"&gt;blog.logrocket.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/node-js-multithreading-what-are-worker-threads-and-why-do-they-matter-48ab102f8b10/"&gt;blog.logrocket.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/ideas-at-igenius/some-beginner-tips-for-concurrency-with-async-await-and-promise-all-dc28b5a4411e"&gt;medium.com/ideas-at-igenius&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;If you like this article, please leave a like or a comment.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/deepu105"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/deepu05/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cover image credit: Photo by &lt;a href="https://unsplash.com/@mparzuchowski?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Michał Parzuchowski&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>languages</category>
      <category>concurrency</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>3 ways to convert HTML text to plain text
</title>
      <author>Sanchithasr</author>
      <pubDate>Fri, 05 Feb 2021 10:35:42 +0000</pubDate>
      <link>https://dev.to/sanchithasr/3-ways-to-convert-html-text-to-plain-text-52l8</link>
      <guid>https://dev.to/sanchithasr/3-ways-to-convert-html-text-to-plain-text-52l8</guid>
      <description>&lt;p&gt;I was working with a rich text editor the other day and needed to strip the HTML tags from the string and store it in the database. And here are the few ways I learned that could come in handy to anyone who is trying to do the same.&lt;br&gt;
What we are trying to do is remove the tags from the string and make the string printable as plain text. Let’s dive in and see how it works.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-using-replaceltgtgtg-" class="anchor"&gt;
  &lt;/a&gt;
  1) Using .replace(/&amp;lt;[^&amp;gt;]*&amp;gt;/g, ‘’)
&lt;/h2&gt;

&lt;p&gt;This method is a simple and efficient way to remove the tags from the text. This method uses the string method &lt;code&gt;.replace(old value,new value)&lt;/code&gt; which replaces the HTML tag values with the empty string. The &lt;code&gt;/g&lt;/code&gt; is used for it to happen globally (every value found in the string is replaced with the specified if the &lt;code&gt;/g&lt;/code&gt; is used).&lt;br&gt;
The drawback of this method is that we can’t remove some HTML entities. It still works well though.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;Jimbo.&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;p&amp;gt;That's what she said&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;strippedHtml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myHTML&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&amp;lt;&lt;/span&gt;&lt;span class="se"&gt;[^&lt;/span&gt;&lt;span class="sr"&gt;&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+&amp;gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Jimbo.&lt;/span&gt;
&lt;span class="c1"&gt;// That's what she said&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stripedHtml&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-create-a-temporary-dom-element-and-retrieve-the-text" class="anchor"&gt;
  &lt;/a&gt;
  2) Create a temporary DOM element and retrieve the text
&lt;/h2&gt;

&lt;p&gt;This is the most efficient way of doing the task. Create a dummy element and assign it to a variable. We can extract later using the element objects. Assign the HTML text to innerHTML of the dummy element and we will get the plain text from the text element objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;convertToPlain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="c1"&gt;// Create a new div element&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tempDivElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Set the HTML content with the given value&lt;/span&gt;
    &lt;span class="nx"&gt;tempDivElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Retrieve the text property of the element &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;tempDivElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;tempDivElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;htmlString&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;Bears Beets Battlestar Galactica &amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;p&amp;gt;Quote by Dwight Schrute&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;convertToPlain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;htmlString&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// Expected Result:&lt;/span&gt;
&lt;span class="c1"&gt;// Bears Beets Battlestar Galactica &lt;/span&gt;
&lt;span class="c1"&gt;// Quote by Dwight Schrute&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-htmltotext-npm-package" class="anchor"&gt;
  &lt;/a&gt;
  3) html-to-text npm package
&lt;/h2&gt;

&lt;p&gt;This is the package I discovered recently. This is the converter that parses HTML and returns beautiful text. It comes with many options to convert it to plain text like &lt;code&gt;wordwrap&lt;/code&gt;, &lt;code&gt;tags&lt;/code&gt;, &lt;code&gt;whitespaceCharacters&lt;/code&gt; , &lt;code&gt;formattersetc&lt;/code&gt;.&lt;br&gt;
Package.json is needed to use the package. We need to install the package first and then use it in our file.&lt;br&gt;
You can find the official doc of the package &lt;a href="https://www.npmjs.com/package/html-to-text"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#installation" class="anchor"&gt;
  &lt;/a&gt;
  Installation
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  Usage
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;htmlToText&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;html-to-text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlToText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;div&amp;gt;Nope Its not Ashton Kutcher. It is Kevin Malone. &amp;lt;p&amp;gt;Equally Smart and equally handsome&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;wordwrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// expected result: &lt;/span&gt;
&lt;span class="c1"&gt;// Nope Its not Ashton Kutcher. It is Kevin Malone.&lt;/span&gt;

&lt;span class="c1"&gt;// Equally Smart and equally handsome&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Find the example of the project &lt;a href="https://github.com/Sanchithasharma/htmlToText"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And that sums it up. Thank you!!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>intermediate</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Writing clean JavaScript code: Variables</title>
      <author>stephanieopala</author>
      <pubDate>Fri, 05 Feb 2021 10:15:45 +0000</pubDate>
      <link>https://dev.to/stephanieopala/writing-clean-javascript-code-variables-2kij</link>
      <guid>https://dev.to/stephanieopala/writing-clean-javascript-code-variables-2kij</guid>
      <description>&lt;p&gt;What is clean code? &lt;strong&gt;It is code that is easy to understand by humans and easy to change or extend.&lt;/strong&gt;&lt;br&gt;
In this post, I will cover JavaScript clean coding best practices when it comes to variables.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use meaningful and pronounceable variables.
You should name your variables such that they reveal the intention behind it. This makes it easier to read and understand.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;DON'T&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Stephanie&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;DO&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Stephanie&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Use ES6 constants when variable values do not change.&lt;br&gt;
At this point, you have interacted with JavaScript ES6 severally/ a few times depending on your level of expertise therefore, keep this in mind.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the same vocabulary for the same type of variable.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;DON'T&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;getUserInfo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;getClientData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;getCustomerRecord&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;DO&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Use searchable names.
This is helpful when you are looking for something or refactoring your code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;DON'T&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blastOff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;86400000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//what is 86400000???&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;DO&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MILLISECONDS_IN_A_DAY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//86400000;&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blastOff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MILLISECONDS_IN_A_DAY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Do not add unneeded context.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;DON'T&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Laptop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;laptopMake&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dell&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;laptopColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Grey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;laptopPrice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2400&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;DO&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Laptop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;make&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dell&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Grey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2400&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Eleventy in eleven minutes</title>
      <author>Lea Rosema (she/her)</author>
      <pubDate>Fri, 05 Feb 2021 09:34:27 +0000</pubDate>
      <link>https://dev.to/s2engineers/eleventy-in-eleven-minutes-2mno</link>
      <guid>https://dev.to/s2engineers/eleventy-in-eleven-minutes-2mno</guid>
      <description>&lt;p&gt;&lt;em&gt;Image by &lt;a href="https://www.11ty.dev/"&gt;11ty.dev&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I would like to share my opinionated path how I got started using.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-eleventy"&gt;What is Eleventy?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-eleventy"&gt;Why Eleventy?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#new-project"&gt;Create a new project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-content"&gt;Adding content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#running-building"&gt;Running and building&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#html-templates"&gt;HTML templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#providing-data"&gt;Providing data for your site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collections"&gt;Collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#filters"&gt;Filters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#plugins"&gt;Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tooling"&gt;Adding toolchains for CSS and JS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-is-eleventy" class="anchor"&gt;
  &lt;/a&gt;
  What is Eleventy? &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://11ty.dev"&gt;Eleventy&lt;/a&gt; is a popular static site generator. It creates a static site from your input files. The input files eleventy looks for are content files, html template files and data files which will be covered in this article. &lt;/p&gt;

&lt;p&gt;It supports several data file formats, content file formats and html template engines which you can use together. In this article, I'm using &lt;a href="https://guides.github.com/features/mastering-markdown/"&gt;Markdown&lt;/a&gt; files together with &lt;a href="https://mozilla.github.io/nunjucks/"&gt;Nunjucks&lt;/a&gt; templates.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-eleventy" class="anchor"&gt;
  &lt;/a&gt;
  Why Eleventy? &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;There are many static site generators out there and you may wonder what benefits it offers compared to others. The key points which make me really love Eleventy are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it is built on node.js&lt;/li&gt;
&lt;li&gt;it does one job and does that well: create markup from content plus templates&lt;/li&gt;
&lt;li&gt;it is completely unopinionated about client-side JS+CSS toolchains: bring your own&lt;/li&gt;
&lt;li&gt;no angular/react/vue knowledge necessary. &lt;/li&gt;
&lt;li&gt;html first approach which makes it great for progressive enhancement.&lt;/li&gt;
&lt;li&gt;easily extendible and combinable with npm packages&lt;/li&gt;
&lt;li&gt;similar to jekyll, but with node.js as a base&lt;/li&gt;
&lt;li&gt;easy to mock data via the data folder.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#create-a-new-project" class="anchor"&gt;
  &lt;/a&gt;
  Create a new project &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;my-awesome-site
&lt;span class="nb"&gt;cd &lt;/span&gt;my-awesome-site
git config &lt;span class="nt"&gt;--global&lt;/span&gt; init.defaultBranch main
npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
npm i @11ty/eleventy &lt;span class="nt"&gt;-D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#initialize-your-repository" class="anchor"&gt;
  &lt;/a&gt;
  Initialize your repository &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Additionally, run &lt;code&gt;git init&lt;/code&gt; and provide a &lt;code&gt;.gitignore&lt;/code&gt; if you are working with git:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node_modules
.DS_Store
Thumbs.db

&lt;span class="c"&gt;# Eleventy output folder&lt;/span&gt;
public
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configuration" class="anchor"&gt;
  &lt;/a&gt;
  Configuration &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Configuration is done via a single javascript file named &lt;code&gt;.eleventy.js&lt;/code&gt;. Providing a configuration is optional.&lt;/p&gt;

&lt;p&gt;My personal preference is to provide &lt;code&gt;src&lt;/code&gt; as input folder and  &lt;code&gt;public&lt;/code&gt; as output folder. Additionally, I use to specify folders that are copied over to the output folder on build. These are also automatically watched by eleventy when starting the development server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;module.exports &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;config&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  // specify folders to be copied to the output folder
  config.addPassthroughCopy&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'./src/js/'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  config.addPassthroughCopy&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'./src/css/'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    markdownTemplateEngine: &lt;span class="s1"&gt;'njk'&lt;/span&gt;,
    htmlTemplateEngine: &lt;span class="s1"&gt;'njk'&lt;/span&gt;,
    &lt;span class="nb"&gt;dir&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
      input: &lt;span class="s1"&gt;'src'&lt;/span&gt;,    // default: &lt;span class="s1"&gt;'.'&lt;/span&gt;
      output: &lt;span class="s1"&gt;'public'&lt;/span&gt; // default: &lt;span class="s1"&gt;'_site'&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#adding-content" class="anchor"&gt;
  &lt;/a&gt;
  Adding content &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Create a markdown file and name it like this: &lt;code&gt;src/index.md&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Hello&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;world"&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="gh"&gt;# Hello World&lt;/span&gt;

Welcome to my awesome {{title}} site! 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#markdown-and-front-matter" class="anchor"&gt;
  &lt;/a&gt;
  Markdown and front matter &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Markdown files can optionally provide a metadata block, which is marked via three hyphens &lt;code&gt;---&lt;/code&gt; in the beginning and the end of the block. In this block, you can specify meta data in &lt;a href="https://yaml.org/"&gt;YAML&lt;/a&gt; notation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#from-content-to-paths" class="anchor"&gt;
  &lt;/a&gt;
  From content to paths &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;For each markdown content file, eleventy creates a folder with an &lt;code&gt;index.html&lt;/code&gt; for nice urls:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;index.md            --&amp;gt; /
about.md            --&amp;gt; /about/
faq.md              --&amp;gt; /faq/
blog/hello-world.md --&amp;gt; /blog/hello-world/
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#running-and-building" class="anchor"&gt;
  &lt;/a&gt;
  Running and building &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Finally, we can start adding the start and build tasks to our &lt;code&gt;package.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eleventy --serve&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;build&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eleventy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;npm start&lt;/code&gt; -&amp;gt; start Development server&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run build&lt;/code&gt; -&amp;gt; build your website&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npx serve public&lt;/code&gt; -&amp;gt; test your build&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The development server is using &lt;code&gt;browsersync&lt;/code&gt; which automatically keeps track of changes and updates your DOM. Additionally, if you open the page in multiple browsers, events are kept in sync, which is useful for cross-browser-testing.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#html-templates" class="anchor"&gt;
  &lt;/a&gt;
  HTML templates &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;To define your HTML structure and layouts, you can use HTML templates. There are several template engines available in Eleventy. In this example, I'm using the &lt;a href="https://mozilla.github.io/nunjucks/"&gt;Nunjucks&lt;/a&gt; template engine.&lt;/p&gt;

&lt;p&gt;Other template formats supported are &lt;code&gt;.html&lt;/code&gt;, &lt;code&gt;.liquid&lt;/code&gt;, &lt;code&gt;.hbs&lt;/code&gt;, &lt;code&gt;.ejs&lt;/code&gt;, &lt;code&gt;.haml&lt;/code&gt;, &lt;code&gt;.pug&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A general approach is to build a base html file and then build &lt;br&gt;
several other structures as you need based upon it.&lt;/p&gt;

&lt;p&gt;Add a &lt;code&gt;src/_includes/base.njk&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{ title }}&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
      {% block main %}
        {{ content | safe }}
      {% endblock %}
    &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Via the &lt;code&gt;{% block %}{% endblock %}&lt;/code&gt; syntax, you can add several slots into your template which you can use when extending your template. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;content&lt;/code&gt; variable is a reserved variable which contains the content body of the current content file. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;| safe&lt;/code&gt; directive is a builtin filter which tells the template engine that the content you want to insert is safe. This way, HTML tags are not converted to plain text containing &lt;a href="https://dev.w3.org/html5/html-author/charref"&gt;HTML entities&lt;/a&gt;. This allows using html inside your content.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#using-your-templates-in-your-content-files" class="anchor"&gt;
  &lt;/a&gt;
  Using your templates in your content files &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;In the front matter of your markdown file, specify the layout you want to use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;layout: base
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#extending-your-templates" class="anchor"&gt;
  &lt;/a&gt;
  Extending your templates &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Next to your &lt;code&gt;base.njk&lt;/code&gt; file, create an &lt;code&gt;article.njk&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{% extends "base.njk" %}

{% block main %}
  &lt;span class="nt"&gt;&amp;lt;article&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"article"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ content | safe }}
  &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Nunjucks also has a section about inheritance in the documentation: &lt;a href="https://mozilla.github.io/nunjucks/templating.html#template-inheritance"&gt;https://mozilla.github.io/nunjucks/templating.html#template-inheritance&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#includes" class="anchor"&gt;
  &lt;/a&gt;
  Includes &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;You can include partial layouts anywhere in your njk or markdown files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{% include "header.njk" %}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#providing-data-for-your-site" class="anchor"&gt;
  &lt;/a&gt;
  Providing data for your site &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;There are several ways to provide data that can be used from inside your templates or content files: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;file specific: in the markdown's front matter &lt;/li&gt;
&lt;li&gt;folder specific: add a json file to a content folder&lt;/li&gt;
&lt;li&gt;globally &lt;code&gt;_data&lt;/code&gt; directory: globally available&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;_data&lt;/code&gt; supports &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.yaml&lt;/code&gt;, &lt;code&gt;.json&lt;/code&gt; files&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-raw-data-endraw-example" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;_data&lt;/code&gt; example
&lt;/h2&gt;

&lt;p&gt;Imagine you would like to build a navigation and provide all the url entries from a JSON file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/_data/nav.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Blog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/blog/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, you can create a partial html snippet to include in your main template, eg. &lt;code&gt;src/_includes/nav.njk&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    {% for link in nav %}
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ link.url }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ link.title }}&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    {% endfor %}
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-data-endraw-javascript-example" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;_data&lt;/code&gt; javascript example
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;_data/site.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My awesome site&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://awesome.site/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Can be used like this in the content: &lt;br&gt;
&lt;code&gt;{{ site.name }}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Having a &lt;code&gt;.js&lt;/code&gt; file instead of a plain json or yaml file brings the flexibility to use node.js environment variables (like, checking if you're in the development or production environment). Also, you can do API fetches from there to pull in a headless CMS, for example.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#collections" class="anchor"&gt;
  &lt;/a&gt;
  Collections &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;You can tag your content with a keyword and then iterate through these via collections.&lt;/p&gt;

&lt;p&gt;This is useful for auto-generating table of contents or listing articles that are related to each other&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#collections-example" class="anchor"&gt;
  &lt;/a&gt;
  Collections example
&lt;/h2&gt;

&lt;p&gt;In your src folder, add a &lt;code&gt;blog&lt;/code&gt; folder with a bunch of markdown files. Tag them as &lt;code&gt;posts&lt;/code&gt; in your front matter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;tags: posts
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, in your markdown or include files, you can iterate through these collection via a for loop:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.md&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# Blog&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;{% for post in collections.posts %}&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ post.url }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ post.date | date('YYYY-MM-DD') }}: {{ post.data.title }}
  &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;{% endfor %}&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#filters" class="anchor"&gt;
  &lt;/a&gt;
  Filters &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Filters provide a way to further process your content. You can use these filters from inside your content and template files by using the pipe. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-custom-filter" class="anchor"&gt;
  &lt;/a&gt;
  Adding a custom filter
&lt;/h2&gt;

&lt;p&gt;In your &lt;code&gt;.eleventy.js&lt;/code&gt; file, you can add several filters you can use inside your file. You can also use third party libraries here. This is an example for a scream filter and a date formatting filter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;moment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;moment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;date&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;moment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YYYY-MM-DD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scream&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="c1"&gt;// ...additional config &lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, you can use this filter in your content and template files like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{{ content | scream | safe }}`
{{ page.date | date('YYYY-MM-DD') }}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#processing-include-files-with-a-filter" class="anchor"&gt;
  &lt;/a&gt;
  Processing include files with a filter
&lt;/h2&gt;

&lt;p&gt;If you would like to process an include with a filter, you can use the nunjucks &lt;code&gt;set&lt;/code&gt; directive to store includes into a variable. In my personal site, I've used this technique to minify WebGL shader code on the fly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{% set vertexShader %}
{% include 'shaders/vertex-shader.vs' %}
{% endset %}

{{ vertexShader | glslminify | safe }}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#builtin-filters" class="anchor"&gt;
  &lt;/a&gt;
  Built-in filters
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;you can use all &lt;a href="https://mozilla.github.io/nunjucks/templating.html#builtin-filters"&gt;built-in nunjucks filters&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://mozilla.github.io/nunjucks/templating.html#safe"&gt;&lt;code&gt;safe&lt;/code&gt;&lt;/a&gt; – the content is safe to insert, so html specific characters are not converted to html entities (use this to inject html and scripts). &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.11ty.dev/docs/filters/url/"&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; – specify a prefix path (useful for deployment into a subdirectory, eg. on github pages).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.11ty.dev/docs/filters/slug"&gt;&lt;code&gt;slug&lt;/code&gt;&lt;/a&gt; – convert a string to an url-friendly slug (eg &lt;code&gt;My site&lt;/code&gt; to &lt;code&gt;my-site&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.11ty.dev/docs/filters/collection-items/"&gt;&lt;code&gt;get*CollectionItem&lt;/code&gt;&lt;/a&gt; – get next or previous item in collection&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#plugins-and-tools" class="anchor"&gt;
  &lt;/a&gt;
  Plugins and tools &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Eleventy provides a rich plugin ecosystem where you can add further magic✨ to your workflow 🙌. &lt;/p&gt;

&lt;p&gt;Check out the &lt;a href="https://www.11ty.dev/docs/plugins/"&gt;Eleventy plugins documentation&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#adding-toolchains-for-css-and-js" class="anchor"&gt;
  &lt;/a&gt;
  Adding toolchains for CSS and JS &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;In the article, we used a pass-through-copy command and used CSS and JS without any bundling or further processing. My favorite approach is to use a CSS preprocessor plus ES module JavaScript files. These are not supported in legacy browsers such as IE11. When using progressive enhancement, JavaScript is not required to read&lt;br&gt;
your content. &lt;/p&gt;

&lt;p&gt;In the following, I will demonstrate the approach I used (only using a CSS transpiles) and a complete JS+CSS toolchain using parcel as an alternative approach. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#css-transpiler-only" class="anchor"&gt;
  &lt;/a&gt;
  CSS transpiler only
&lt;/h2&gt;

&lt;p&gt;In my personal project, I used the sass together with concurrently, to start two processes concurrently running in my &lt;code&gt;npm start&lt;/code&gt; script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i sass concurrently &lt;span class="nt"&gt;-D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To build the CSS, I'm running &lt;code&gt;sass src/scss:src/css&lt;/code&gt; which compiles every .scss to CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"concurrently 'npm:watch-css' 'npm:serve-11ty'"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  
    &lt;/span&gt;&lt;span class="nl"&gt;"build-11ty"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eleventy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"serve-11ty"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eleventy --serve"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build-css"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"sass src/scss/:src/css/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"watch-css"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"sass src/scss/:src/css/ --watch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run build-css -s &amp;amp;&amp;amp; npm run build-11ty -s"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#or-complete-javascriptcss-toolchain" class="anchor"&gt;
  &lt;/a&gt;
  Or complete Javascript+CSS toolchain.
&lt;/h2&gt;

&lt;p&gt;If you would like to have a complete frontend toolchain taking care of compiling JavaScript and CSS, one way to do is is to use &lt;a href="https://parceljs.org/getting_started.html"&gt;Parcel&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i parcel-bundler concurrently &lt;span class="nt"&gt;-D&lt;/span&gt;
&lt;span class="nb"&gt;echo &lt;/span&gt;src/dist &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; .gitignore
&lt;span class="nb"&gt;echo&lt;/span&gt; .cache &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For the development mode, I'm also using &lt;code&gt;concurrently&lt;/code&gt; to start eleventy and parcel in parallel:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"concurrently 'npm:watch-bundle' 'npm:serve-11ty'"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run build-bundle -s &amp;amp;&amp;amp; npm run build-11ty -s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"watch-bundle"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"parcel watch src/app/index.js -d src/dist"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build-bundle"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"parcel build src/app/index.js -d src/dist"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"serve-11ty"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eleventy --serve"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build-11ty"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eleventy"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;src/app&lt;/code&gt;, put an &lt;code&gt;index.js&lt;/code&gt; file. Additionally, put any CSS import of your choice into it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./scss/styles.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, in your eleventy config, change the pass through copy to copy the parcel output into your eleventy output folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addPassthroughCopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/dist/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, parcel creates an index.js and index.css in the dist folder, which you can use in your html templates like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- in your head tag --&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/dist/index.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- right before your closing &amp;lt;/body&amp;gt; tag --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/dist/index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#example-project" class="anchor"&gt;
  &lt;/a&gt;
  Example project
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/terabaud/lea-codes/"&gt;https://github.com/terabaud/lea-codes/&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://terabaud.github.io/eleventy-talk/"&gt;https://terabaud.github.io/eleventy-talk/&lt;/a&gt; - My slides for a talk about 11ty (useful as a summary of this article)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://11ty.dev/"&gt;https://11ty.dev/&lt;/a&gt; - Official site&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://11ty.rocks/"&gt;https://11ty.rocks/&lt;/a&gt; - Eleventy rocks&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://piccalil.li/course/learn-eleventy-from-scratch"&gt;https://piccalil.li/course/learn-eleventy-from-scratch&lt;/a&gt; - in-depth course&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#thank-you" class="anchor"&gt;
  &lt;/a&gt;
  Thank you 👩‍💻
&lt;/h1&gt;

</description>
      <category>eleventy</category>
      <category>thingsivelearned</category>
      <category>blazingfast</category>
      <category>staticsitegenerator</category>
    </item>
    <item>
      <title>How to Get Out of Tutorial Hell: Be more like Tony Hawk!</title>
      <author>Jamees Bedford</author>
      <pubDate>Fri, 05 Feb 2021 08:00:01 +0000</pubDate>
      <link>https://dev.to/jameesy/how-to-get-out-of-tutorial-hell-be-more-like-tony-hawk-1md8</link>
      <guid>https://dev.to/jameesy/how-to-get-out-of-tutorial-hell-be-more-like-tony-hawk-1md8</guid>
      <description>&lt;p&gt;When learning to code, many of you will experience something that I call &lt;em&gt;'the tutorial loop'&lt;/em&gt; or &lt;em&gt;'tutorial hell'&lt;/em&gt;. It was something that plagued my learning for a while - in fact I would consider not resolving this sooner was one of the biggest mistakes I made whilst learning web development. This article is my thoughts on how one should attempt to break away from this loop, why this is immensely bad for your learning, and then some of the strategies I used to learn more effectively.&lt;/p&gt;

&lt;p&gt;The Tutorial Loop is the never ending cycle you may find yourself in when learning to code, where you watch tutorial after tutorial but never leave them with any working knowledge of the technology it is teaching. This prompts the developer to typically label the course as useless, and then find another one that may contain the 'secret sauce' to gaining superior programming knowledge.&lt;/p&gt;

&lt;p&gt;It's a frustrating place to be in. You code along to the video, building out the same application as the teacher, and it leaves you feeling with a sense of accomplishment and pride, but ultimately this course has not really left you with any real world skills. In fact, all it has done has taught you how to code along to someone else.&lt;/p&gt;

&lt;p&gt;There is a reason for this. &lt;em&gt;You are not making any decisions or figuring things out for yourself.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When I was eleven or twelve, I got a Tony Hawk "Learn to Skate" video. I watched it for hours, soaking up every single word that Tony said. One of the main things I was interested in was how to "Drop in", a fundamental tricks any skateboarder would have to master, which is being able to roll down a quarter pipe ramp.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e77k_bRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x9sxxln7yyaamt6mm22c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e77k_bRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x9sxxln7yyaamt6mm22c.png" alt="Dropping in"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's a hard trick for a beginner, because due to the nature of it, if you mess it up it has a large consequence. If you get overconfident and lean too far forward, you will fall flat on your face. Not confident enough, the skateboard will fly out from underneath you and backwards you go.&lt;/p&gt;

&lt;p&gt;When I got to the skate ramp for the first time, I was so full of confidence due to having soaked up this knowledge from the man himself that there was absolutely no way I could fail. His words rung in my ears as I hovered over the drop, I leaned forwards and BAM, I slammed against the concrete. No major injuries, just a big dent in my pride.&lt;/p&gt;

&lt;p&gt;Whilst listening to someone talk about how to do a certain task builds us with confidence and makes us think we can accomplish the skill being discussed, actually it requires practice. Repeating the same action, over and over again, practice after practice.&lt;/p&gt;

&lt;p&gt;A typical 'Learn to Code' tutorial will usually have a 'code-along' video, or will build a final project. We see the final app in the tutorial, and we may even have recreated it ourselves by writing the code as it is taught to us. But what we didn't see is the hours the teacher put into to getting that application working in the first place, working through the design process, all the initial thinking as to exactly how this app is going to come together, all the bugs and errors they encountered along the way. They are showing you the polished, complete project rather than the process the took to getting there. Not to mention, the hours and hours of learning they have put in to get to a level of ability where they can comfortably teach a topic.&lt;/p&gt;

&lt;p&gt;Much like Tony Hawk is able to nail his tricks and his How To video was perfect, we didn't see the hours and hours he had dedicated to learning these tricks, falling off and getting back up time and time again. The real learning to be had is in the process of figuring the hard bits out for ourself. And of course, failing, but consistently trying again.&lt;/p&gt;

&lt;p&gt;It is important, that as a new software engineer, that you understand that this is the case and that learning to code is a long process. In fact, the sooner you realise that only relying on watching other people code the apps you want to be making is not the best way to learn, in your journey the better.&lt;/p&gt;

&lt;p&gt;In Robert Greene's 'Mastery', he talks about how we each have the capability to go on to become a master in our craft, as long as we approach it in the right way:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"We enter a new field with excitement, but also fear about how much there is to learn ahead of us. The greatest danger here is boredom, impatience, fear, and confusion. Once we stop observing and learning, the process towards mastery comes to a halt."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As a new developer, we crave output. We enjoy going through a tutorial, coding along to the instructor because usually we will have an app or a project to show for it at the end. We feel fulfilled. Making slow progress on our own is boring and frustrating, but to become a master at any skill we must accept that boredom is part and parcel with the package. We can embrace boredom and choose to practice effectively!&lt;/p&gt;

&lt;p&gt;They say to learn a spoken language, the best thing you can do is to go to a country that speaks it and practice it. In my opinion, a programming language is exactly the same. Pick through codebases that already exist, pull things apart, fix bugs in open source projects, create new projects. Anything that is requiring you to think and grow your knowledge. You need to figure out how to solve problems and overcome issues that you don't know the answer to. Use this experience to get good at finding out the answers yourself, by Googling/Stack Overflowing and reading documentation.&lt;/p&gt;

&lt;p&gt;I'm not in this instance saying that you should avoid all tutorials, quite the contrary. Tutorials are really useful learning resources and are a great start to learning a new piece of tech, however, a 'start' is all they are.&lt;/p&gt;

&lt;p&gt;Tony Hawk didn't learn to skate by watching other people skating.. and you shouldn't learn to program by watching others code.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Multi-threading and  Parallel Programming</title>
      <author>Kwerenachi Utosu</author>
      <pubDate>Fri, 05 Feb 2021 07:34:20 +0000</pubDate>
      <link>https://dev.to/kwereutosu/multi-threading-and-parallel-programming-1l9m</link>
      <guid>https://dev.to/kwereutosu/multi-threading-and-parallel-programming-1l9m</guid>
      <description>&lt;p&gt;Multi-threading is a widespread programming and execution model that allows multiple threads to exist within the context of one process. Each of these threads can run in parallel and these thread share similar address space. Okay let's start from the very beginning.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-thread" class="anchor"&gt;
  &lt;/a&gt;
  What is a Thread?
&lt;/h3&gt;

&lt;p&gt;A &lt;code&gt;thread&lt;/code&gt; of execution is the smallest sequence of programmed instructions that can be managed independently by a scheduler, which is typically a part of the operating system. Most times a thread exist within the process and multiple threads can exist within a single process, hence multi-threading.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cPJA4gXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pwtqtgnrq62dh5n6io8a.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cPJA4gXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pwtqtgnrq62dh5n6io8a.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I'd say a Computer Scientist would see A &lt;code&gt;Thread&lt;/code&gt; the same way a Chemist would see an An &lt;code&gt;Atom&lt;/code&gt; .&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These &lt;code&gt;threads&lt;/code&gt; run concurrently and they share resources. The implementation of &lt;code&gt;threads&lt;/code&gt; and processes differ between operating systems, but in most cases a thread is a component of a process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-process" class="anchor"&gt;
  &lt;/a&gt;
  What is a Process?
&lt;/h3&gt;

&lt;p&gt;Processes are instances of programs which typically run independent from each other. For Example, if you start a Java program the operating system spawns a new &lt;code&gt;process&lt;/code&gt; which runs in parallel to other programs. Inside those processes we can utilize threads to execute code concurrently, so we can make the most out of the available cores of the CPU.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DECvI84H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cudzw6gzhi20es4l3nvg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DECvI84H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cudzw6gzhi20es4l3nvg.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unlike Threads, processes do not share resource with one another. A &lt;code&gt;process&lt;/code&gt; is a unit of resources, while a thread is a unit of scheduling and execution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thread-pool" class="anchor"&gt;
  &lt;/a&gt;
  Thread Pool
&lt;/h3&gt;

&lt;p&gt;Creating a brand-new OS thread requires memory allocation and CPU instructions in order to set it up and also kill it down. In order to better handle the usage of a thread and also avoid the creation of new ones, the operating systems or platforms reckon with a &lt;code&gt;Thread Pool&lt;/code&gt; feature, which allows the application to take an already existing thread to use.&lt;/p&gt;

&lt;p&gt;That’s a much more efficient way to handle multiple threads without dealing with its creation or destruction. Furthermore, the OSs know when a thread from the thread pool is not actively in use thus, they can automatically “skip” it during the threads’ iteration.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#descriptive-programming-representations-of-threads" class="anchor"&gt;
  &lt;/a&gt;
  Descriptive Programming Representations Of Threads
&lt;/h3&gt;

&lt;p&gt;We'd take a look at threads as implemented from two classes in Java, &lt;code&gt;Executors&lt;/code&gt; and &lt;code&gt;Runnable&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Executors&lt;/strong&gt;
&lt;code&gt;Executors&lt;/code&gt; as a class in Java that abstracts most of the manual thread creation process. They are capable of running asynchronous tasks and typically manage a pool of threads, so we don't have to create new threads manually.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The class &lt;code&gt;Executors&lt;/code&gt; provides convenient factory methods for creating different kinds of executor services. In the sample below we use an executor with a thread pool of size one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K9hBkL5E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5hbjoi52xqi9rw6osdwy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K9hBkL5E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5hbjoi52xqi9rw6osdwy.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The result looks similar to the above sample but when running the code you'll notice an important difference, the java process never stops! &lt;code&gt;Executors&lt;/code&gt; have to be stopped explicitly - otherwise they keep listening for new tasks.&lt;/p&gt;

&lt;p&gt;An &lt;code&gt;ExecutorService&lt;/code&gt; provides two methods for that purpose: &lt;code&gt;shutdown()&lt;/code&gt; waits for currently running tasks to finish while &lt;code&gt;shutdownNow()&lt;/code&gt; interrupts all running tasks and shut the executor down immediately. This service is mostly used when working with socket connections, to facilitate asynchronous calls(Sink-Source connections). &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Runnable&lt;/strong&gt;
A &lt;code&gt;Runnable&lt;/code&gt; is functional interface defining a single void no-arguments method &lt;code&gt;run()&lt;/code&gt;. Before starting a new thread you have to specify the code to be executed by this thread, often called the task and this is done by implementing a &lt;code&gt;Runnable&lt;/code&gt;. Note that, you can have as many tasks as possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZM2bzQND--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z8r4h7b8gjhbt7ga4k4y.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZM2bzQND--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z8r4h7b8gjhbt7ga4k4y.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the example above, we utilize Java 8 lambda expressions to print the current threads name to the console. First we execute the runnable directly on the main thread before starting a new thread. See the sample outputs below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello main
Hello Thread-0
Done!
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Or that:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello main
Done!
Hello Thread-0
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We have two possible outputs because due to concurrent execution we cannot predict if the runnable will be invoked before or after printing &lt;code&gt;Done&lt;/code&gt;. The order is non-deterministic, thus making concurrent programming a complex task in larger applications. Although Threads can also be put to sleep for a certain duration.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multithreading-indepth" class="anchor"&gt;
  &lt;/a&gt;
  Multi-threading in-depth
&lt;/h3&gt;

&lt;p&gt;Like we've clearly stated earlier, A &lt;code&gt;multi-threaded&lt;/code&gt; program contains two or more parts that can run concurrently and each part can handle a different task at the same time making optimal use of the available resources specially when your computer has multiple CPUs. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XmfUXLmh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b9a62hzkm6gjaxff5e9g.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XmfUXLmh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b9a62hzkm6gjaxff5e9g.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Multi-threading&lt;/code&gt; extends the idea of multitasking into applications where you can subdivide specific operations within a single application into individual threads. It enables you to write in a way where multiple activities can proceed concurrently in the same program.&lt;/p&gt;

&lt;p&gt;There are a handful of programming languages that give room for &lt;code&gt;multi-threading&lt;/code&gt;, and most of the languages are Object Oriented Programming languages(OOP). Languages like &lt;code&gt;Java&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;,&lt;code&gt;C++&lt;/code&gt; and even &lt;code&gt;.NET&lt;/code&gt; frameworks. Some other interpreted languages also made the cut, like &lt;code&gt;Ruby MRI&lt;/code&gt; for &lt;code&gt;Ruby&lt;/code&gt; and &lt;code&gt;CPython&lt;/code&gt; for &lt;code&gt;Python&lt;/code&gt;. If you were waiting to see &lt;code&gt;Javascript&lt;/code&gt;, well you won't because JavaScript does not support multi-threading and that's because the &lt;code&gt;JavaScript&lt;/code&gt; interpreter in the browser is a single thread.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heavily-multithreaded-applications" class="anchor"&gt;
  &lt;/a&gt;
  Heavily Multi-threaded Applications
&lt;/h3&gt;

&lt;p&gt;Almost all well-built applications support multi-threading. Let's look at browsers. Most browsers are multi-threaded from &lt;code&gt;firefox&lt;/code&gt; to &lt;code&gt;Safari&lt;/code&gt; to &lt;code&gt;Chrome&lt;/code&gt; and many others. But today we'd talk more about &lt;code&gt;Chrome&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google Chrome&lt;/strong&gt;&lt;br&gt;
Chrome has a multi-process architecture and each process is heavily multi-threaded. The main goal is to keep the main thread (“UI” thread in the browser process) and IO thread (each process’ thread for handling IPC) responsive. This means offloading any blocking I/O or other expensive operations to other threads.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HH4lOhBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gp3ddpyezcuqmmomh349.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HH4lOhBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gp3ddpyezcuqmmomh349.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;Chrome&lt;/code&gt;, each and every tab you open gets its own content process. Five tabs, 5 processes, one hundred tabs, 100 processes. This approach maximizes performance, but you pay a hefty penalty in memory consumption and battery life. Ever wondered why the CPU consumption for Chrome on your task manager is always high? Well, here you go.&lt;/p&gt;

&lt;p&gt;Every chrome process has, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;main thread&lt;/code&gt;
This thread updates the UI and runs most of Blink.&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;IO thread&lt;/code&gt;
This thread handles IPCs and network requests&lt;/li&gt;
&lt;li&gt;A few more &lt;code&gt;special-purpose threads&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A pool of &lt;code&gt;general-purpose threads&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Chrome Compared to Firefox&lt;/strong&gt;&lt;br&gt;
While &lt;code&gt;Chrome&lt;/code&gt; creates a content process for each tab, &lt;code&gt;Firefox&lt;/code&gt; instead spins up to four content process threads by default. In Firefox, the first 4 tabs each use those 4 processes and additional tabs then use threads within those processes. Multiple tabs within a process share the browser engine that already exists in memory, instead of each creating their own.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--wHfrQvoW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1347357572723040256/gCVhTmg0_normal.jpg" alt="Jkwery ✊🏼 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jkwery ✊🏼
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/kwereutosu"&gt;@kwereutosu&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Sometimes, I remember that for every Chrome Tab you have open is a different process with multiple threads running on each of them. Fifty tabs, 50 processes🥴
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:48 PM - 04 Feb 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1357400668835823617" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1357400668835823617" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1357400668835823617" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#threads-vs-processes" class="anchor"&gt;
  &lt;/a&gt;
  Threads Vs Processes
&lt;/h3&gt;

&lt;p&gt;Threads are different from the conventional multitasking process in so many ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Processes are typically independent, while threads exist as subsets of a process.&lt;/li&gt;
&lt;li&gt;Processes carry considerably more state information than threads, whereas multiple threads within a process share process state as well as memory and other resources.&lt;/li&gt;
&lt;li&gt;Processes have separate address spaces, whereas threads share their address space.&lt;/li&gt;
&lt;li&gt;Processes interact only through system-provided inter-process communication mechanisms.&lt;/li&gt;
&lt;li&gt;Context switching between threads in the same process typically occurs faster than context switching between processes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#parallelism" class="anchor"&gt;
  &lt;/a&gt;
  Parallelism
&lt;/h3&gt;

&lt;p&gt;Parallelism relate to the concept were the work is distributed in multiple units, in such a way that it doesn't compromise the final product but minimizing the total execution time.&lt;/p&gt;

&lt;p&gt;Parallel execution is the ability of two (or more) tasks to run at the very same time. While Concurrency stands for the possibility, Parallelism is the reality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Multithreading is now an important part of modern software development. It’s supported by many programming languages and platforms and goes all the way down to the operating system. Knowing how to work with multiple threads can definitely lead developers to build better applications.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>multithreading</category>
      <category>java</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Understanding useContext in React</title>
      <author>Elizabeth</author>
      <pubDate>Fri, 05 Feb 2021 07:26:45 +0000</pubDate>
      <link>https://dev.to/ilizette/understanding-usecontext-in-react-26gf</link>
      <guid>https://dev.to/ilizette/understanding-usecontext-in-react-26gf</guid>
      <description>&lt;h1&gt;
  &lt;a href="#usecontext" class="anchor"&gt;
  &lt;/a&gt;
  useContext
&lt;/h1&gt;

&lt;p&gt;In React, context is more like a global variable that can be used across all components in an application. An example of when to use the context hook is to set the preferred theme or to store the currently signed-in user.&lt;/p&gt;

&lt;p&gt;You should use the context hook only when you need some data to be accessible by many components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-with-usecontext" class="anchor"&gt;
  &lt;/a&gt;
  working with useContext
&lt;/h2&gt;

&lt;p&gt;To understand useContext better we'll be creating a context that stores a user's details and we'll be showing some things to the user if their details are stored in the context.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#first-things" class="anchor"&gt;
  &lt;/a&gt;
  First things
&lt;/h4&gt;

&lt;p&gt;You should have a react app created already and install react-router-dom from npm (just for this example, you don't need react-router-dom for useContext). Now create a file in your source folder and name it &lt;code&gt;userDetails.jsx&lt;/code&gt; this is the file that will be creating the context. Then do this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState, createContext } from 'react';

const UserContext = createContext(); 

const UserProvider = (props) =&amp;gt; {
    const [username, setUsername] = useState('');
// the state that we'll be storing the username into

    return (
        &amp;lt;UserContext.Provider
            value={{username, setUsername}}
        &amp;gt;
            {props.children}
        &amp;lt;/UserContext.Provider&amp;gt;
    );
}
export { UserContext, UserProvider };

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the code above, we just created a context called UserContext using react's createContext(), create context will tell react that we want to create a global variable. Then we created a component that contains the state we want to access globally. You'll notice that we're using a provider from the UserContext. &lt;code&gt;UserContext.Provider&lt;/code&gt; The provider is a method from useContext that we can warp all the other components in like we're about to do in our App component.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;App.jsx&lt;/code&gt; file import the &lt;code&gt;UserProvider&lt;/code&gt; that was exported.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { BrowserRouter, Switch, Route } from "react-router-dom";
import { UserProvider } from './userDetails';

const App = () =&amp;gt;  {
  return (
  &amp;lt;UserProvider&amp;gt;
      &amp;lt;BrowserRouter&amp;gt;
        &amp;lt;Switch&amp;gt;
          &amp;lt;Route path="/" exact component={SetUserDetails} /&amp;gt;
          &amp;lt;Route
             path="/user"
             exact
             component={FetchUserDetails} /&amp;gt;
        &amp;lt;/Switch&amp;gt;
      &amp;lt;/BrowserRouter&amp;gt;
    &amp;lt;/UserProvider&amp;gt;
 )
}

export default App;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the code above we're wrapping the provider into our other components. Let's create the components in the Route and use the context inside them.&lt;/p&gt;

&lt;p&gt;Create a file and name it SetUserDetails.jsx and paste this in the file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState, useContext } from "react";
import { useHistory } from "react-router-dom";
import { UserContext } from "./userDetails";

const SetUserDetails = () =&amp;gt; {
  const [name, setName] = useState("");
  const history = useHistory();

  const { setUsername } = useContext(UserContext);
  const handleSetName = () =&amp;gt; {
    setUsername(name);
    history.push("/user");
  };
  return (
    &amp;lt;&amp;gt;
      &amp;lt;input 
          value={name} 
          onChange={(e) =&amp;gt; setName(e.target.value)} /&amp;gt;
      &amp;lt;button onClick={handleSetName}&amp;gt;Set Name &amp;lt;/button&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

export default SetUserDetails;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the code above we created a component that accepts a username and stores it into our context. You'll notice the use of the useContext hook. We're using the hook to get the context we created earlier, in this case, we're getting setUsername. Once the user clicks on the button it will assign the name in this local state to the context.&lt;/p&gt;

&lt;p&gt;Next, let's get the context. Create a file and name it FetchUserDetails.jsx (this is the other file in the route)&lt;/p&gt;

&lt;p&gt;Then paste this into the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useContext } from "react";
import { UserContext } from "./userDetails";

const FetchUserDetails = () =&amp;gt; {
  const { username } = useContext(UserContext);

  return &amp;lt;&amp;gt;{username ? `Hello ${username}` : `Hello User`}&amp;lt;/&amp;gt;;
};

export default FetchUserDetails;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, we're getting the username state and checking for a value in the state. if it is empty we'll display 'Hello User', and if not we'll display the username. &lt;/p&gt;

&lt;p&gt;Try running the code and testing it.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/twilight-shadow-fr77s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You'll notice that the username is available in the other component. Thanks to useContext hook.&lt;/p&gt;

&lt;p&gt;Now, try creating a context on your own and also try persisting the context.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;This is just a basic usage for useContext there's more you can do with context, like saving a user's preferred theme or some other preferences and persisting it in your local storage.&lt;/p&gt;

&lt;p&gt;Thank you for reading. &lt;br&gt;
In my next post, I'd be looking at the useMemo hook.&lt;br&gt;
If you enjoyed this post please like and share. If you have questions please feel free to drop them in the comments section. Keep coding and doing amazing things.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Test Case Generator</title>
      <author>Tanmay Khandelwal</author>
      <pubDate>Fri, 05 Feb 2021 03:41:34 +0000</pubDate>
      <link>https://dev.to/dude901/test-case-generator-hff</link>
      <guid>https://dev.to/dude901/test-case-generator-hff</guid>
      <description>&lt;h4&gt;
  &lt;a href="#generate-test-cases-for-competitive-coding" class="anchor"&gt;
  &lt;/a&gt;
  Generate test cases for Competitive Coding.
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Visit Project &lt;a href="https://github.com/Tanmay-901/test-case-generator"&gt;here&lt;/a&gt; and download the zip file&lt;/li&gt;
&lt;li&gt;For more convenience,

&lt;ol&gt;
&lt;li&gt;right click on 'test_case.exe' after extraction.&lt;/li&gt;
&lt;li&gt;click on &lt;code&gt;pin to start&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Now the tool's icon is pinned to your start menu and can be used directly from there which saves the hussle of going 
inside the &lt;code&gt;dist&lt;/code&gt; folder everytime you want to run the tool.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#to-be-kept-in-mind" class="anchor"&gt;
  &lt;/a&gt;
  To be kept in mind:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This is a &lt;strong&gt;plug'n'play&lt;/strong&gt; tool i.e. no installation is required&lt;/li&gt;
&lt;li&gt;There could be a case when your web browser or windows defender shows a warning regarding security issue or virus
detected and in that case, you would either have to pause your antivirus and/or windows defender for the time being before downloading(can be resumed
right after downloading completes).&lt;/li&gt;
&lt;li&gt;If the pc shows a warning similar to this "Operation did not complete because the file contains a virus or unwanted file", it is 
probably due to an issue with &lt;strong&gt;py2exe&lt;/strong&gt; and &lt;strong&gt;pyinstaller&lt;/strong&gt; which are used to convert the python program into an executable file. It can be overcome by 
allowing "insatallation from unknown sources" and setting it up as "Ask always" under the privacy settings.
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#about-project" class="anchor"&gt;
  &lt;/a&gt;
  About Project
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This project is a combined application of &lt;strong&gt;Object Oriented Programming, Competitive coding and Tkinter toolkit&lt;/strong&gt;.
&lt;/li&gt;
&lt;li&gt;I got the motivation to develop this project after I begun my competitive programming journey(not a great one yet though but working my way up gradually), 
there were many times when I saw people(including me and my friends) stuck on trying to struggle in thinking test cases when their program 
fails the submission, especially the case with beginners and that is the main reason this project is developed.&lt;/li&gt;
&lt;li&gt;However, it is not advised to directly use this tool everytime without trying and thinking test cases on your own, but 
treat it like a hint to a problem, you should try to solve the problem first before looking up the hint and if you're unable to get ahead 
then it is advisable to go for the hint instead of just wasting more time. Treat this tool similarly.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#home-page" class="anchor"&gt;
  &lt;/a&gt;
  Home Page:
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Click on the desired type of Test Case.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gU-x83Or--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/whvpkfmmrga4f7hstv4y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gU-x83Or--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/whvpkfmmrga4f7hstv4y.png" alt="Home page"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#input-screen" class="anchor"&gt;
  &lt;/a&gt;
  Input Screen
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Enter the constraints here&lt;br&gt;&lt;br&gt;
Make sure that none of the constraints is having &lt;strong&gt;values more than 10&lt;sup&gt;7&lt;/sup&gt; and T*maximum_value_of_n/m/k &amp;lt;=10&lt;sup&gt;7&lt;/sup&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
This limit is applied because Outputs are in the form of arrays, and any array having size more than that would completely use up memory of&lt;br&gt;
a standard PC and would cause it to hang. This issue is under consideration and would be soon dealt with.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aZwdp3Eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wfuf1l0rk3nwxrbk66es.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aZwdp3Eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wfuf1l0rk3nwxrbk66es.png" alt="Input Constraints Screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#output-screen" class="anchor"&gt;
  &lt;/a&gt;
  Output Screen
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Finally Output is shown.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g9hc46oK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/94p9sh7q627tiuaxi8zi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g9hc46oK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/94p9sh7q627tiuaxi8zi.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the output screen you can use multiple handy features as well like &lt;strong&gt;&lt;em&gt;copy, regenerate new test case, change constraints&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
on single click.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Pre-requisites:
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#-to-use-codes-apart-from-first-release-tkinter-must-be-installed" class="anchor"&gt;
  &lt;/a&gt;
  * To use codes apart from first release, 'tkinter' must be installed.  
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#challenges-faced" class="anchor"&gt;
  &lt;/a&gt;
  Challenges faced:
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;S.N.&lt;/th&gt;
&lt;th&gt;Issue&lt;/th&gt;
&lt;th&gt;Solution/proposed Solution&lt;/th&gt;
&lt;th&gt;Resolved or not&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;Application window appeared different on windows and Linux based system&lt;/td&gt;
&lt;td&gt;Manually designed the GUI similar to the Linux one&lt;/td&gt;
&lt;td&gt;✔️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;PC freezed when input constraints were too big&lt;/td&gt;
&lt;td&gt;Set lower and upper limit for constraints&lt;/td&gt;
&lt;td&gt;✔️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;Working on big input values&lt;/td&gt;
&lt;td&gt;split the test case in two or more parts and then concatenate them as strings to generate on large constraints OR Use Heap memory&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;Windows defender/Antivirus/Chrome virus check treated the file as malicious and blocked download&lt;/td&gt;
&lt;td&gt;Used py2exe instead of pyinstaller and uploaded zip of multiple files instead of &lt;code&gt;--onefile&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;✔️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;Code became Surprisingly long&lt;/td&gt;
&lt;td&gt;Converted whole program from simple functions and methods to OOPs&lt;/td&gt;
&lt;td&gt;✔️&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#journey-of-development-of-this-project" class="anchor"&gt;
  &lt;/a&gt;
  Journey of Development of this project:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I learned Tkinter a whole lot better while building this project compared to when I just learned and copy pasted code from tutorial.&lt;/li&gt;
&lt;li&gt;Before this project, All I knew about OOPs was its definition, types and example and used them only for exam and interview purpose but with 
this project I have used them a lot thoroghly now and now undderstand every bit of what I earlier used to mug up. while developing this 
project I faced an unforeseen issue of working on a very very long code. In the starting phase when the program was all
commands, functions and methods, &lt;strong&gt;the code was more than 1500 lines for just 5 types of test cases&lt;/strong&gt; and that too without other additional features 
(like copy, regenerate, change constraints and others).&lt;/li&gt;
&lt;li&gt;It started to be really inconvenient for me to traverse in that program from top to bottom every 5 minutes and it took a lot of time just
to find what i was searching for to work upon. Then I thought of trying OOPs- Inheritance and Abstraction, because there were things which 
seemed like a little bit common for most of the test cases although it cost me a few more days just to get it done (change whole code in 
classes and methods), the code started to &lt;strong&gt;optimise and its length reduced drastically and within a week the program was less than 
half(600 lines approx) of what it was&lt;/strong&gt; and that too with those additional buttons and features which currently are present.
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#updates" class="anchor"&gt;
  &lt;/a&gt;
  Updates:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Support for Test cases for larger constraint values is being worked upon.&lt;/li&gt;
&lt;li&gt;New test case types are being added continuously.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>testcase</category>
      <category>tkinter</category>
      <category>competitivecoding</category>
    </item>
    <item>
      <title>NodeJS, ExpressJS,  MongoDB - Paginate - series #04</title>
      <author>Functional Javascript</author>
      <pubDate>Fri, 05 Feb 2021 02:49:50 +0000</pubDate>
      <link>https://dev.to/functional_js/nodejs-expressjs-redis-mongodb-series-04-jle</link>
      <guid>https://dev.to/functional_js/nodejs-expressjs-redis-mongodb-series-04-jle</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;A quick example on actually a very important feature: "paginate"&lt;/p&gt;

&lt;p&gt;Always paginate your resultsets. This protects your system from accidental or malicious oversized resulsets being retrieved.&lt;/p&gt;

&lt;p&gt;Pagination is very easy in MongoDB. See the notes section below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiEnum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api_find_artists__songRegex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;searchTerm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;//#guard 1&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isNotBetween&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//defaultVal&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;//#guard 2&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEmptyStrOrNil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchTerm&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;the search term was empty&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}]);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;searchTerm&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;i&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;mgArr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dbEnum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nlpdb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;collEnum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songsColl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;copyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;searchResult&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;albums&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;unwindArr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;searchResult&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;unwindArr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;searchResult.albumSongs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;matchRegex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;searchResult.albumSongs.song&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;//54&lt;/span&gt;
    &lt;span class="nx"&gt;paginate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#notes" class="anchor"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;See series #03 for an explanation of some of these stages like "copyField" and "unwindArr". Here we'll concentrate on the one database query stage, "paginate".&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The above Node.js Express router endpoint returns the paged results of a user search for a string of characters in a song.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The paginate wrapper func wraps the skip and limit funcs&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
@func
limit a resultset to a particular requested page of results

@param {number} lim - page size
@param {number} page - page number to retrieve
@return {object[]}
*/&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paginate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lim&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="c1"&gt;// 50 * 2 gets results 51 to 100&lt;/span&gt;
    &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lim&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The skip and limit funcs both wrap the MongoDB $skip and $limit pipeline stage operators
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lim&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;$limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lim&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;skip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;$skip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;So paginate returns an arr of two stages because it uses two staging operators. You don't have think about that though.&lt;br&gt;
You only have to call paginate and pass in two numbers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An example of the resultset in the UI:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--65X7xie---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tkck2mos5831enmwxav7.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--65X7xie---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tkck2mos5831enmwxav7.JPG" alt="song matches"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next" class="anchor"&gt;
  &lt;/a&gt;
  What's Next
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you have any questions let me know&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We'll keep moving the needle forward with more enterprise patterns in the subsequent articles in this series&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>node</category>
      <category>mongodb</category>
      <category>javascript</category>
      <category>database</category>
    </item>
  </channel>
</rss>
