<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>CodeLand is almost here! üåà </title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Sat, 18 Sep 2021 00:55:43 +0000</pubDate>
      <link>https://dev.to/devteam/codeland-is-almost-here-3meb</link>
      <guid>https://dev.to/devteam/codeland-is-almost-here-3meb</guid>
      <description>&lt;p&gt;Hey everyone! &lt;/p&gt;

&lt;p&gt;I just wanted to share a quick reminder that &lt;a href="https://codelandconf.com"&gt;CodeLand 2021&lt;/a&gt; is coming up &lt;em&gt;next week&lt;/em&gt;. This event is such a special celebration of the challenging, fascinating, and fun journey that is coding. I hope to see you there (virtually üòâ). &lt;/p&gt;

&lt;p&gt;Whether you're an early-career developer, brand new to coding, or you care about making this industry friendlier for all levels, CodeLand is the place to be. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-quick-info"&gt;
  &lt;/a&gt;
  Some quick info:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;If you are registered already&lt;/strong&gt;, expect an email next week with all the details you'll need to join us on Thursday and Friday (September 23 &amp;amp; 24).
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;If you are registered and have a workshop ticket&lt;/strong&gt;, you should have gotten an email this week with some specific reminders for the one you'll be participating in. Check your spam folder if you don't see it!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;If you haven't registered yet&lt;/strong&gt;, don't worry... there's still time! Grab your ticket (starting at $0) &lt;a href="https://ti.to/codenewbie/codeland-2021"&gt;here&lt;/a&gt;.
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Have a great weekend!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cRtrSsF---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/SKGo6OYe24EBG/giphy.gif%3Fcid%3Decf05e47slj3mexidjjk8nyf1nyf8caoe62jrwohccyumfdb%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cRtrSsF---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/SKGo6OYe24EBG/giphy.gif%3Fcid%3Decf05e47slj3mexidjjk8nyf1nyf8caoe62jrwohccyumfdb%26rid%3Dgiphy.gif%26ct%3Dg" alt="Spongebob Rainbow"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codeland</category>
      <category>codenewbie</category>
      <category>meta</category>
    </item>
    <item>
      <title>Building A math community. MathJax</title>
      <author>Tristan Elliott</author>
      <pubDate>Sat, 18 Sep 2021 00:09:35 +0000</pubDate>
      <link>https://dev.to/theplebdev/building-a-math-community-mathjax-dp0</link>
      <guid>https://dev.to/theplebdev/building-a-math-community-mathjax-dp0</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;This series is going to be dedicated to building and launching my first web app, which is a website focused around individuals creating and sharing math content. Join me and let us try to to make our way through this.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-did-i-found-out-about-mathjax"&gt;
  &lt;/a&gt;
  How did I found out about MathJax?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I simply created a post on twitter asking, &lt;code&gt;Does anyone know any good JavaScript libraries for visualizing math equations?&lt;/code&gt;. Eventually, a geophysicist replied with one word, &lt;code&gt;MathJax&lt;/code&gt; and that is how I found it. So if you ever have a question, tweet about it into the endless void that is twitter and maybe the void might answer back.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-mathjax"&gt;
  &lt;/a&gt;
  What is MathJax?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It is a open-source JavaScript display engine for LaTeX, MathML and AsciiMat notation that works in all modern browsers. It was created with the goal to combine the power of modern web technologies with mathematics. MathJax requires no setup  on the part of the user(no plugins), so the page author can just write documents that include mathematics and be confident that users will be able to view it properly. Basically, just add  MathJax to the project and it will handle displaying all the math.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In MathJax mathematics is text based rather than image based, meaning that it can improve SEO because the equations are searchable just like normal text on websites.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MathJax includes the ability to generate speakable text versions of equations that can be used with screen readers. MathJax is highly configurable, allowing authors to customize it for the special requirements for any site&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MathJax also has a rich API that can be used to make the mathematics on our webpages interactive and dynamic.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;So now that we all know a little big more about MathJax I am working on creating a text editor in React that has the abilities of MathJax.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Thank you for taking the time out of your day to read this blog post of mine. If you have any questions or concerns please comment below or reach out to me on &lt;a href="https://twitter.com/TristAndroidDev"&gt;Twitter&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>math</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Entendendo o Node.js e seu funcionamento</title>
      <author>Leonardo de S√°</author>
      <pubDate>Fri, 17 Sep 2021 23:18:44 +0000</pubDate>
      <link>https://dev.to/leonardodesa/entendendo-o-node-js-e-seu-funcionamento-1p9e</link>
      <guid>https://dev.to/leonardodesa/entendendo-o-node-js-e-seu-funcionamento-1p9e</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introdu%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Introdu√ß√£o
&lt;/h1&gt;

&lt;p&gt;Neste artigo, voc√™ ir√° entender &lt;strong&gt;o que √© o Node.JS&lt;/strong&gt;, e a sua principal funcionalidade que √© indispens√°vel para qualquer desenvolvedor compreender o funcionamento da linguagem, chamada de &lt;strong&gt;Event Loop&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#o-que-%C3%A9-o-nodejs"&gt;
  &lt;/a&gt;
  O que √© o Node.js
&lt;/h1&gt;

&lt;p&gt;Node.js, ou simplesmente Node, √© um software de c√≥digo aberto baseado no interpretador V8 do Google e que &lt;strong&gt;permite a execu√ß√£o do c√≥digo javascript do lado do servidor&lt;/strong&gt; de forma simples, r√°pida e perform√°tica.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#interpretador-do-node"&gt;
  &lt;/a&gt;
  Interpretador do Node
&lt;/h1&gt;

&lt;p&gt;O Interpretador √© um &lt;strong&gt;software especializado que interpreta e executa javascript&lt;/strong&gt;. O Node utiliza o Interpretador V8, que tem como proposta acelerar o desempenho de uma aplica√ß√£o compilando o c√≥digo Javascript para o formato que a m√°quina ir√° entender antes de execut√°-lo.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#call-stack"&gt;
  &lt;/a&gt;
  Call Stack
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;√â uma pilha de eventos&lt;/strong&gt;, esses eventos podem ser uma fun√ß√£o disparada pelo c√≥digo. Por isso o event-loop fica monitorando para que, toda vez que uma fun√ß√£o for disparada, ele dever√° execut√°-la somente uma coisa por vez.&lt;/p&gt;

&lt;p&gt;Vamos ver um exemplo:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ITYHks0k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxiywwa5zgbghfpkxt2k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ITYHks0k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxiywwa5zgbghfpkxt2k.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aqui temos um exemplo bem simples para entendermos como funciona a stack. Basicamente a fun√ß√£o &lt;strong&gt;&lt;code&gt;generateCarDescription&lt;/code&gt;&lt;/strong&gt; √© chamada recebendo o nome do carro e sua vers√£o, e retorna uma senten√ßa com os par√¢metros concatenados. A fun√ß√£o &lt;strong&gt;&lt;code&gt;generateCarDescription&lt;/code&gt;&lt;/strong&gt; depende da fun√ß√£o &lt;strong&gt;&lt;code&gt;generateNameAndVersion&lt;/code&gt;&lt;/strong&gt;, que √© respons√°vel por unir as informa√ß√µes de nome e vers√£o.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hl0O-DkC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/me7byfq1flt535vpm4c3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hl0O-DkC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/me7byfq1flt535vpm4c3.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quando a fun√ß√£o &lt;strong&gt;&lt;code&gt;generateCarDescription&lt;/code&gt;&lt;/strong&gt; √© invocada, ela depende da fun√ß√£o &lt;strong&gt;&lt;code&gt;generateNameAndVersion&lt;/code&gt;&lt;/strong&gt; para atribuir o valor do nome e vers√£o do carro na vari√°vel &lt;strong&gt;&lt;code&gt;nameAndVersion&lt;/code&gt;&lt;/strong&gt; e, quando ela for chamada, ela ser√° adicionada na stack como no exemplo abaixo:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cG_pbT3d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfsaq36vgr15mijwmxju.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cG_pbT3d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfsaq36vgr15mijwmxju.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ap√≥s a execu√ß√£o da func√£o &lt;strong&gt;&lt;code&gt;generateCarDescription&lt;/code&gt;&lt;/strong&gt;, logo em seguida a vari√°vel &lt;strong&gt;&lt;code&gt;nameAndVersion&lt;/code&gt;&lt;/strong&gt; ir√° receber o retorno da fun√ß√£o &lt;strong&gt;&lt;code&gt;generateNameAndVersion&lt;/code&gt;&lt;/strong&gt; que foi imediatamente adicionada na stack, at√© que sua execu√ß√£o finalize e o retorno seja feito. Ap√≥s o retorno, a stack ficar√° assim:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j8IaxCKr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k43bpfytx9egpq80htrs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j8IaxCKr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k43bpfytx9egpq80htrs.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A √∫ltima etapa ser√° retornar a vari√°vel &lt;strong&gt;&lt;code&gt;nameAndVersion&lt;/code&gt;&lt;/strong&gt;, que cont√©m o nome e vers√£o do ve√≠culo. Isso n√£o ir√° alterar em nada na stack. Quando a fun√ß√£o &lt;code&gt;generateCarDescription&lt;/code&gt; terminar, as demais linhas ser√£o executadas. No nosso exemplo ser√° o &lt;strong&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/strong&gt; imprimindo a vari√°vel &lt;strong&gt;&lt;code&gt;infoCar&lt;/code&gt;&lt;/strong&gt;. E por fim, ser√° adicionado o &lt;strong&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/strong&gt; quando tudo acima j√° estiver sido executado.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DMno1ixy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bv2bw8bozdxyt0xvrqok.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DMno1ixy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bv2bw8bozdxyt0xvrqok.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Como a &lt;strong&gt;stack s√≥ executa uma fun√ß√£o por vez&lt;/strong&gt;, de acordo com o tamanho da fun√ß√£o e o que ser√° processado, isso ir√° ocupar mais tempo na stack, fazendo com que as pr√≥ximas chamadas esperem mais tempo para serem executadas.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#io-opera%C3%A7%C3%A3o-bloqueante-e-n%C3%A3o-bloqueante"&gt;
  &lt;/a&gt;
  I/O - Opera√ß√£o bloqueante e n√£o bloqueante
&lt;/h1&gt;

&lt;p&gt;I/O se refere, principalmente, √† intera√ß√£o com o disco do sistema e a integra√ß√£o com a &lt;a href="https://libuv.org/"&gt;libuv&lt;/a&gt;.&lt;br&gt;
&lt;strong&gt;Opera√ß√£o bloqueante √© a execu√ß√£o do c√≥digo no processo do Node precisa esperar&lt;/strong&gt; at√© que uma opera√ß√£o seja conclu√≠da. Isso acontece porque o event loop √© incapaz de continuar executando alguma tarefa, enquanto uma opera√ß√£o bloqueante est√° sendo executada.&lt;br&gt;
&lt;strong&gt;Todos os m√©todos I/O na biblioteca padr√£o do Node tem uma vers√£o ass√≠ncrona, que, por defini√ß√£o, s√£o n√£o-bloqueantes&lt;/strong&gt;, e aceitam fun√ß√µes de callback. Alguns m√©todos tamb√©m t√™m suas vers√µes bloqueantes, que possuem o sufixo &lt;strong&gt;Sync&lt;/strong&gt; no nome. Para maiores Informa√ß√µes sobre I/O, acesse: &lt;a href="https://nodejs.org/pt-br/docs/guides/blocking-vs-non-blocking/"&gt;I/O&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#singlethread"&gt;
  &lt;/a&gt;
  Single-Thread
&lt;/h1&gt;

&lt;p&gt;O Node √© uma plataforma orientada a eventos, que utiliza o conceito de thread √∫nica para gerenciar a stack. Quem √© &lt;strong&gt;single thread √© o v8 do Google&lt;/strong&gt;, respons√°vel por rodar o c√≥digo do Node, a stack faz parte do v8, ou seja, ela √© single thread, que executa uma fun√ß√£o de cada vez.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#multithreading"&gt;
  &lt;/a&gt;
  Multi-Threading
&lt;/h1&gt;

&lt;p&gt;Para trabalhar com opera√ß√µes paralelas, e obter um ganho de desempenho, o Node e sua stack por si s√≥ s√£o incapazes de resolver m√∫ltiplas opera√ß√µes ao mesmo tempo, por isso, ele conta com uma lib chamada de &lt;a href="https://libuv.org/"&gt;libuv&lt;/a&gt;, &lt;strong&gt;que √© capaz de gerenciar processos em background de I/O ass√≠ncrono n√£o bloqueantes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Exemplo de uma fun√ß√£o ass√≠ncrona sendo executada:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vvKkJD2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lied917dt47n8cvnqdka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vvKkJD2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lied917dt47n8cvnqdka.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nesse exemplo, a fun√ß√£o &lt;strong&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/strong&gt; √© executada na stack e jogada para uma thread, enquanto ela vai sendo processada e administrada pela libuv. A stack continua executando as pr√≥ximas fun√ß√µes e, quando terminar o processamento, a fun√ß√£o de callback ser√° adicionada na Task Queue para ser processada quando a stack estiver vazia.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--udM7w96b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qfox2rznpsmkp7xp6bpe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--udM7w96b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qfox2rznpsmkp7xp6bpe.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#task-queue"&gt;
  &lt;/a&gt;
  Task queue
&lt;/h1&gt;

&lt;p&gt;Algumas fun√ß√µes s√£o enviadas para serem executadas em outra thread, permitindo que a stack siga para as pr√≥ximas fun√ß√µes e n√£o bloqueie nossa aplica√ß√£o.&lt;br&gt;
Essas fun√ß√µes que s√£o enviadas para outra thread precisam ter um callback, que √© uma fun√ß√£o que ser√° executada quando a fun√ß√£o principal for finalizada.&lt;br&gt;
Os callbacks aguardam a sua vez para serem executados na stack. Enquanto esperam, eles ficam em um lugar chamado de task queue. &lt;strong&gt;Sempre que a thread principal finalizar uma tarefa, o que significa que a stack estar√° vazia, uma nova tarefa √© movida da task queue para a stack, onde ser√° executada&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Aqui temos um exemplo para facilitar:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k7VQefl4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7p1f2dflk1st5fywlrnz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k7VQefl4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7p1f2dflk1st5fywlrnz.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;O Event Loop √© respons√°vel por buscar essas tarefas de background, e execut√°-las na stack&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#micro-e-macro-tasks"&gt;
  &lt;/a&gt;
  Micro e macro tasks
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;O Event Loop √© formado por macro tasks e micro tasks&lt;/strong&gt;. As macro tasks que ser√£o enfileiradas no background, e que quando forem processadas, ter√£o um callback dentro da task queue que ser√° chamado quando a stack estiver vazia. dentro de cada ciclo, o &lt;strong&gt;event loop ir√° executar primeiramente as micro tasks&lt;/strong&gt; dispon√≠veis. As micro tasks v√£o sendo processadas, at√© que a fila de microtask esteja esgotada, assim que todas as chamadas de micro tasks forem feitas, ent√£o no pr√≥ximo ciclo, o callback da macro task que est√° na task queue ser√° executado. Ou seja, &lt;strong&gt;dentro de um mesmo ciclo, as micro tasks, ser√£o executadas antes das macro tasks&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#macro-tasks"&gt;
  &lt;/a&gt;
  Macro tasks
&lt;/h1&gt;

&lt;p&gt;Vou citar alguns exemplos de fun√ß√µes que se comportam como &lt;strong&gt;macro tasks&lt;/strong&gt;: &lt;strong&gt;&lt;code&gt;setTimeout&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;I/O&lt;/code&gt;&lt;/strong&gt; e &lt;strong&gt;&lt;code&gt;setInterval&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#micro-tasks"&gt;
  &lt;/a&gt;
  Micro tasks
&lt;/h1&gt;

&lt;p&gt;Alguns exemplos conhecidos de &lt;strong&gt;micro tasks&lt;/strong&gt; s√£o as &lt;strong&gt;&lt;code&gt;promises&lt;/code&gt;&lt;/strong&gt; e o &lt;strong&gt;&lt;code&gt;process.nextTick&lt;/code&gt;&lt;/strong&gt;. As micro tasks normalmente s√£o tarefas que devem ser executadas rapidamente ap√≥s alguma a√ß√£o, ou realizar algo ass√≠ncrono sem a necessidade de inserir uma nova task na task queue.&lt;br&gt;
Vamos tentar entender melhor com alguns exemplos, coloquei algumas anota√ß√µes para facilitar o entendimento:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7VO9hKTm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uemly3cddxmt7hc4rfnf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7VO9hKTm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uemly3cddxmt7hc4rfnf.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ao executar o c√≥digo acima, teremos o seguinte resultado de prioriza√ß√£o:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NFMMULcs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1w2ul7vpuds9cf6aws2d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NFMMULcs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1w2ul7vpuds9cf6aws2d.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Voc√™ deve estar se perguntando o porqu√™ n√£o est√° sendo executado em ordem, vou tentar explicar com as anota√ß√µes que fiz no c√≥digo.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[A]&lt;/strong&gt;: &lt;strong&gt;Executado diretamente na stack&lt;/strong&gt;, dessa forma ele √© s√≠ncrono, ent√£o o restante do c√≥digo ir√° aguardar o resultado para ser executado.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[B]&lt;/strong&gt;: Enfileirado como uma tarefa futura, &lt;strong&gt;prioridade macro task&lt;/strong&gt;, ser√° executado apenas no pr√≥ximo loop.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[C]&lt;/strong&gt;: Enfileirado como uma tarefa futura, &lt;strong&gt;prioridade micro task&lt;/strong&gt;, ser√° executado imediatamente ap√≥s todas as tarefas/tasks do loop atual e antes do pr√≥ximo loop.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[D]&lt;/strong&gt;: &lt;strong&gt;Executado diretamente na stack&lt;/strong&gt;, dessa forma ele √© s√≠ncrono, ent√£o o restante do c√≥digo ir√° aguardar o resultado para ser executado.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclus√£o
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Nesse artigo vimos o que √© o Node e como ele funciona ‚Äúpor baixo dos panos‚Äù&lt;/strong&gt;, espero que voc√™s tenham entendido com clareza e que essa vis√£o ajude voc√™s a escreverem c√≥digos melhores e de uma maneira que tire maior proveito desse funcionamento. Aconselho tamb√©m a leitura complementar dos links de refer√™ncias que ir√£o facilitar o entendimento.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#links-relacionados"&gt;
  &lt;/a&gt;
  Links relacionados
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://nodejs.org/pt-br/docs/guides/blocking-vs-non-blocking/"&gt;https://nodejs.org/pt-br/docs/guides/blocking-vs-non-blocking/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://imasters.com.br/front-end/node-js-o-que-e-esse-event-loop-afinal"&gt;https://imasters.com.br/front-end/node-js-o-que-e-esse-event-loop-afinal&lt;/a&gt;&lt;br&gt;
&lt;a href="https://fabiojanio.com/2020/03/12/introducao-ao-node-js-single-thread-event-loop-e-mercado/"&gt;https://fabiojanio.com/2020/03/12/introducao-ao-node-js-single-thread-event-loop-e-mercado/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://oieduardorabelo.medium.com/javascript-microtasks-e-macrotasks-fac33016de4f"&gt;https://oieduardorabelo.medium.com/javascript-microtasks-e-macrotasks-fac33016de4f&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ"&gt;https://www.youtube.com/watch?v=8aGhZQkoFbQ&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Python tutorial: Get started with Python arrays</title>
      <author>Erin Schaffer</author>
      <pubDate>Fri, 17 Sep 2021 22:41:57 +0000</pubDate>
      <link>https://dev.to/educative/python-tutorial-get-started-with-python-arrays-4ob6</link>
      <guid>https://dev.to/educative/python-tutorial-get-started-with-python-arrays-4ob6</guid>
      <description>&lt;p&gt;Python is one of the most popular programming languages. It‚Äôs used in many different fields like web development, data science, machine learning, and more. Arrays are an important data structure in Python. Arrays allow us to store multiple values at a time and perform actions on those values. In this Python tutorial, we‚Äôll explore Python arrays, array operations, and more. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We‚Äôll cover&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#array"&gt;What are Python arrays?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create"&gt;Create Python array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#operations"&gt;Common array operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2d"&gt;2D Python arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#nextsteps"&gt;Wrapping up and next steps&lt;/a&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-python-arrays"&gt;
  &lt;/a&gt;
  What are Python arrays?
&lt;/h2&gt;

&lt;p&gt;A Python array is a container that can hold a number of elements of the same data type in one single variable. This allows us to store multiple elements of the same type together.&lt;/p&gt;

&lt;p&gt;Arrays are very common. Most data structures use arrays to execute algorithms, and arrays are very commonly used in fields like data science and machine learning. We can use arrays when we want to manipulate data of a certain type. They‚Äôre very useful when working with large amounts of data because arrays can hold a large number of elements. An array &lt;strong&gt;element&lt;/strong&gt; is an item stored in an array. So the items ‚ÄúSpot‚Äù, ‚ÄúMax‚Äù, and ‚ÄúSam‚Äù from our &lt;code&gt;dogs&lt;/code&gt; array are elements. The &lt;strong&gt;index&lt;/strong&gt; refers to the numerical index location of each element. We can use the index to identify and access elements. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-python-lists"&gt;
  &lt;/a&gt;
  What are Python lists?
&lt;/h3&gt;

&lt;p&gt;Although the two are sometimes confused, a Python list is different than a Python array. A list is a collection of items that contains data of different data types. This means that the first element of the list can be a string, the second element can be an integer, and the third can be a list of strings, etc. Lists are ordered, mutable, and their elements don‚Äôt need to be unique.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We can convert our Python lists to arrays using the NumPy Python library using one of the following NumPy array functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;numpy.array()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;numpy.asarray()&lt;/code&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-python-array"&gt;
  &lt;/a&gt;
  Create Python array
&lt;/h2&gt;

&lt;p&gt;We can create a new array using the array module and the &lt;code&gt;import array&lt;/code&gt; command. Let‚Äôs take a look at an example Python program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dogs = ["Spot", "Max", "Sam", "Charlie", "Cooper", "Duke", "Bear", "Buddy", "Milo", "Murphy"]

print(dogs)

=&amp;gt; ['Spot', 'Max', 'Sam', 'Charlie', 'Cooper', 'Duke', 'Bear', 'Buddy', 'Milo', 'Murphy']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let‚Äôs take a look at the different operations we can perform on Python arrays.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#common-array-operations"&gt;
  &lt;/a&gt;
  Common array operations
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#add-elements"&gt;
  &lt;/a&gt;
  Add elements
&lt;/h3&gt;

&lt;p&gt;There are a couple of different ways to add elements to an array. We can append elements to the end of the array using the &lt;code&gt;append()&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dogs = ["Spot", "Max", "Sam", "Charlie", "Cooper", "Duke", "Bear", "Buddy", "Milo", "Murphy"]

dogs.append("Wrigley")

print(dogs)

=&amp;gt; ['Spot', 'Max', 'Sam', 'Charlie', 'Cooper', 'Duke', 'Bear', 'Buddy', 'Milo', 'Murphy', 'Wrigley']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use the &lt;code&gt;insert()&lt;/code&gt; method to add an element to a given index location within our array. Here‚Äôs an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dogs = ["Spot", "Max", "Sam", "Charlie", "Cooper", "Duke", "Bear", "Buddy", "Milo", "Murphy"]

dogs.insert(1, "Wrigley")

print(dogs)

=&amp;gt; ['Spot', 'Wrigley', 'Max', 'Sam', 'Charlie', 'Cooper', 'Duke', 'Bear', 'Buddy', 'Milo', 'Murphy']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#access-elements"&gt;
  &lt;/a&gt;
  Access elements
&lt;/h3&gt;

&lt;p&gt;We can access an array item by referring to its index number. For example, if we want to get the value of the first array item, we can use the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dogs = ["Spot", "Max", "Sam", "Charlie", "Cooper", "Duke", "Bear", "Buddy", "Milo", "Murphy"]

x = dogs[0]

print(x)

=&amp;gt; Spot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want to access a specific element and change that element, we access the index number and set it equal to the modified value. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dogs = ["Spot", "Max", "Sam", "Charlie", "Cooper", "Duke", "Bear", "Buddy", "Milo", "Murphy"]

dogs[0] = "Jack"

print(dogs)

=&amp;gt; ['Jack', 'Max', 'Sam', 'Charlie', 'Cooper', 'Duke', 'Bear', 'Buddy', 'Milo', 'Murphy']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#remove-elements"&gt;
  &lt;/a&gt;
  Remove elements
&lt;/h3&gt;

&lt;p&gt;There are a couple of different ways to remove elements of an array. We can use the &lt;code&gt;pop()&lt;/code&gt; Python function to remove an element at a specified position. Let‚Äôs say we want to remove the last element of our &lt;code&gt;dogs&lt;/code&gt; array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dogs = ["Spot", "Max", "Sam", "Charlie", "Cooper", "Duke", "Bear", "Buddy", "Milo", "Murphy"]

dogs.pop(9)

print(dogs)

=&amp;gt; ['Spot', 'Max', 'Sam', 'Charlie', 'Cooper', 'Duke', 'Bear', 'Buddy', 'Milo']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use the &lt;code&gt;remove()&lt;/code&gt; method to remove a specified element from an array. Here‚Äôs an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dogs = ["Spot", "Max", "Sam", "Charlie", "Cooper", "Duke", "Bear", "Buddy", "Milo", "Murphy"]

dogs.remove("Duke")

print(dogs)

=&amp;gt; ['Spot', 'Max', 'Sam', 'Charlie', 'Cooper', 'Bear', 'Buddy', 'Milo', 'Murphy']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#find-array-length"&gt;
  &lt;/a&gt;
  Find array length
&lt;/h3&gt;

&lt;p&gt;We can use the &lt;code&gt;len()&lt;/code&gt; method to return the length of an array. If we want to return the number of elements in the &lt;code&gt;dogs&lt;/code&gt; array, we can use the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dogs = ["Spot", "Max", "Sam", "Charlie", "Cooper", "Duke", "Bear", "Buddy", "Milo", "Murphy"]

x = len(dogs)

print(x)

=&amp;gt; 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sort-python-array"&gt;
  &lt;/a&gt;
  Sort Python array
&lt;/h3&gt;

&lt;p&gt;We can use the &lt;code&gt;sort()&lt;/code&gt; method to sort our array in ascending or descending order. If we want to sort our array in ascending order, we can use the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;numbers = [5, 13, 25, 2, 98, 56, 4, 8]

numbers.sort()

print(numbers)

=&amp;gt; [2, 4, 5, 8, 13, 25, 56, 98]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To sort our array in descending order, we can use the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;numbers = [5, 13, 25, 2, 98, 56, 4, 8]

numbers.sort(reverse=True)

print(numbers)

=&amp;gt; [98, 56, 25, 13, 8, 5, 4, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#count-elements"&gt;
  &lt;/a&gt;
  Count elements
&lt;/h3&gt;

&lt;p&gt;We can use the &lt;code&gt;count()&lt;/code&gt; method to return the number of elements with the specified value. For example, let‚Äôs say we want to return the number of times the value ‚ÄúSpot‚Äù appears in our &lt;code&gt;dogs&lt;/code&gt; array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dogs = ["Spot", "Max", "Sam", "Charlie", "Cooper", "Duke", "Bear", "Buddy", "Milo", "Murphy"]

x = dogs.count("Spot")

print(x)

=&amp;gt; 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2d-python-arrays"&gt;
  &lt;/a&gt;
  2D Python arrays
&lt;/h2&gt;

&lt;p&gt;A 2D array, or a two-dimensional array, is when there‚Äôs an array within an array. In a standard array, each element has an index. In a 2D array, each element has two indices. Let‚Äôs move on to an example. Imagine we need to keep track of how the temperature changes throughout the day. We‚Äôll take four temperatures: one in the early morning, one in the late morning, one in the afternoon, and one in the evening. We can store these temperatures in a 2D array.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Day one&lt;/strong&gt;: 52, 60, 66, 63&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Day two&lt;/strong&gt;: 50, 58, 62, 60&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Day three&lt;/strong&gt;: 53, 61, 67, 64&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Day four&lt;/strong&gt;: 51, 59, 65, 62
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;temperatures = [[52, 60, 66, 63], [50, 58, 62, 60], [53, 61, 67,64], [51, 59, 65, 62]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can perform the same actions on 2D arrays as we can on standard arrays. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up-and-next-steps"&gt;
  &lt;/a&gt;
  Wrapping up and next steps
&lt;/h2&gt;

&lt;p&gt;Congrats on taking your first steps with Python arrays! Arrays are an important and common data structure. They have a wide range of uses and are commonly used to execute algorithms. There‚Äôs still a lot more to learn about the Python programming language. Some recommended concepts to cover next include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python dictionaries&lt;/li&gt;
&lt;li&gt;Python tuples&lt;/li&gt;
&lt;li&gt;Python strings&lt;/li&gt;
&lt;li&gt;Python syntax&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get started learning these concepts and more, check out Educative‚Äôs learning path &lt;a href="https://www.educative.io/path/python-for-programmers"&gt;&lt;strong&gt;Python for Programmers&lt;/strong&gt;&lt;/a&gt;. In this path, you‚Äôll start by learning the fundamentals of Python, and then move into more advanced concepts including modules and web-related tasks. By the end, you‚Äôll have the advanced knowledge to confidently use Python in your next project.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continue-learning-about-python"&gt;
  &lt;/a&gt;
  Continue learning about Python
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/python-pandas-tutorial"&gt;Data analysis made simple: Python Pandas tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/reverse-string-javascript-cpp-python"&gt;Best practices for reversing a string in JavaScript, C++, &amp;amp; Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/python-interview-questions"&gt;50 Python interview questions and answers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
      <category>python</category>
    </item>
    <item>
      <title>The REAL difference between 5gz or 2.4gz WiFi</title>
      <author>Ben Halpern</author>
      <pubDate>Fri, 17 Sep 2021 22:18:50 +0000</pubDate>
      <link>https://dev.to/ben/the-real-difference-between-5gz-or-2-4gz-wifi-5046</link>
      <guid>https://dev.to/ben/the-real-difference-between-5gz-or-2-4gz-wifi-5046</guid>
      <description>&lt;p&gt;This post comes from some interesting tweets I saw, and really speaks to how difficult it can be to get the right amount of "correctness" when you seek to find out about how technology works.&lt;/p&gt;

&lt;p&gt;Maybe you know the answer posed in the title, maybe you think you know, maybe you were afraid to ask. Lucky for you, &lt;a class="mentioned-user" href="https://dev.to/bnb"&gt;@bnb&lt;/a&gt;
 came asking.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--QC642jpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1433091103318814723/fuQwkhru_normal.jpg" alt="Tierney Cyren profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Tierney Cyren
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @bitandbang
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Honest question: is 5gz or 2.4gz better for WiFi?&lt;br&gt;&lt;br&gt;I thought it was the former but have seen some tech people making the inverse assertion.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:25 PM - 17 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1438886755156045832" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1438886755156045832" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1438886755156045832" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Several folks popped in with answers...&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tlk3BB5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1432101325529964545/FH-g7eA4_normal.jpg" alt="Laurie Voss profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Laurie Voss
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/seldo"&gt;@seldo&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/bitandbang"&gt;@bitandbang&lt;/a&gt; They're not better or worse, just different. 5ghz being higher frequency can provide higher bandwidth under optimal conditions; 2.4ghz being lower frequency can travel "through" more things. So which is best depends how far you are from the router and what's between you and it.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:28 PM - 17 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1438887540132438016" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1438887540132438016" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1438887540132438016" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--R_CxK5FY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/897079141719195648/_mvh-QJH_normal.jpg" alt="Abraham Williams profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Abraham Williams
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/abraham"&gt;@abraham&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/bitandbang"&gt;@bitandbang&lt;/a&gt; 5 is faster and has short range and poor wall penetration. 2.4 is slower with better range
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:27 PM - 17 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1438887304878333963" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1438887304878333963" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1438887304878333963" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OPBRHrfS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1385606593690017793/9rWH23Os_normal.jpg" alt="vantreeseba profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        vantreeseba
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @vantreeseba
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/bitandbang"&gt;@bitandbang&lt;/a&gt; It depends.&lt;br&gt;&lt;br&gt;5ghz has higher bandwidth, 2.4ghz has better penetration.&lt;br&gt;E.G. Phones use tons of diff freq for this reason, 5g uses 36-24ghz, 2.5-3.7ghz and 600-850mhz, all because of penetration problems with higher freq.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:06 PM - 17 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1438897154500792322" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1438897154500792322" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1438897154500792322" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;We have consensus, right?&lt;/p&gt;

&lt;p&gt;Basic Internet research would back this up...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lWpzQ6th--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drazdenpas61tlwef994.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lWpzQ6th--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drazdenpas61tlwef994.png" alt="5 vs 2.4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Case closed... Except.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vk8AeXq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1247154720080191490/RTBtUks5_normal.jpg" alt="Malte Ubl profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Malte Ubl
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @cramforce
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/bitandbang"&gt;@bitandbang&lt;/a&gt; 5GHz is better in every way. The myth (see other replies) that 2.4 GHz is longer range comes from bad APs which scan for open channels and pick the least busy ones which are the subset of channels that are permitted for less power output than 2.4 GHz.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:46 PM - 17 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1438892061487366144" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1438892061487366144" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1438892061487366144" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vk8AeXq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1247154720080191490/RTBtUks5_normal.jpg" alt="Malte Ubl profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Malte Ubl
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @cramforce
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/bitandbang"&gt;@bitandbang&lt;/a&gt; The main benefit of 5 GHz comes from the many more available channels and hence less congestion. If you really want good Wifi you want&lt;br&gt;- a modern AP (they got sooo much better over the last 4 years)&lt;br&gt;- have many APs on the same SSID (ideally one per room) and wire them together.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:48 PM - 17 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1438892507480289284" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1438892507480289284" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1438892507480289284" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;That's a whole different story. But the whole Internet is telling me about "shorter range" at 5GHz.&lt;/p&gt;

&lt;p&gt;I don't want to leave anyone here with an absolute conclusion, as I don't want to take anyone here "at face value".&lt;/p&gt;

&lt;p&gt;If anyone wants to go deeper in the comments in the comments with some absolute facts on the issue, I very much welcome them.&lt;/p&gt;

</description>
      <category>wifi</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>All Day Mobbing Can Lead to a Poor Developer Experience</title>
      <author>Attila Komaromi</author>
      <pubDate>Fri, 17 Sep 2021 21:58:58 +0000</pubDate>
      <link>https://dev.to/twinbird24/all-day-mobbing-can-lead-to-a-poor-developer-experience-1ahi</link>
      <guid>https://dev.to/twinbird24/all-day-mobbing-can-lead-to-a-poor-developer-experience-1ahi</guid>
      <description>&lt;h1&gt;
  &lt;a href="#all-day-mobbing-can-lead-to-a-poor-developer-experience"&gt;
  &lt;/a&gt;
  All Day Mobbing Can Lead to a Poor Developer Experience
&lt;/h1&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-mobbing"&gt;
  &lt;/a&gt;
  What is mobbing?
&lt;/h3&gt;

&lt;p&gt;Mob programming is like pairing, but with 3 or more people, sometimes up to 8 or more. It doesn‚Äôt have to be just programmers in the mob, it could be designers or product managers too, for example. There will be one keyboard, mouse, and monitor‚Äîonly one person in control at a time, who is dubbed ‚Äúthe driver.‚Äù Besides the driver, you also have the navigator, who is in charge of keeping the driver focused on the main goals at hand, offering direction on what to write and how to write it. The remaining group is also part of the mob, usually not directly engaged but may occasionally offer suggestions or ask questions. The individuals in these roles will regularly rotate, the navigator becomes the driver, the driver moves into the mob, and a new person previously in the mob will now navigate. The mob usually decides when to rotate, and may do it after each commit, or at specific timed intervals, for example. In my experience, 5 minute timed intervals are common. The teams I work with often use the following tool to set up and manage their mobs: &lt;a href="https://mobti.me"&gt;https://mobti.me&lt;/a&gt;. Taking a look at how this tool works may also give you a better understanding of how mob programming is generally structured.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mob-programming-all-day"&gt;
  &lt;/a&gt;
  Mob programming all day
&lt;/h3&gt;

&lt;p&gt;Mobbing has benefits, it can be a great idea when working on a complex architectural set up, for example, where you want your entire team to understand the foundational concepts and have experience in setting up the infrastructure. It can be great when making modifications to a design, where you can have input from someone who is more design oriented and someone more business oriented, which can cut down the time needed to fix a design issue. It can be great for ramping up a junior dev on a project. Problems arise, however, when you take several programmers, especially those with related expertise, and force them to mob &lt;em&gt;all&lt;/em&gt; day, on &lt;em&gt;every&lt;/em&gt; feature.&lt;/p&gt;

&lt;p&gt;When engaged in constant mobbing sessions, I'm not given the opportunity to dig through the code individually without distractions and I'm not given the responsibility to make individual contributions. Instead, I'm constrained by the remote "mobbing" server‚ÄîI can't take advantage of my crisp 4K monitor and local set-up that I've grown accustomed to over the years. My team is at the whims of the remote server that occasionally goes down, or suffers from connection issues.&lt;/p&gt;

&lt;p&gt;Over time, constant mobbing on every issue, every day, creates a diffusion of responsibility, leading to less individual ownership of the code and less incentive to be creative yourself‚Äîit creates a reliance on the mob that decreases personal problem solving skills and discourages creativity and curiosity.&lt;/p&gt;

&lt;p&gt;Personally, I learn much faster by being alone with the codebase and struggling with the solution myself‚Äîusing tools like pairing only when required, if I get stuck on a problem for too long or need extra input, for example. Having to mob constantly isn't a permanent solution for situations like this, and instead leads to &lt;a href="https://en.wikipedia.org/wiki/Zoom_fatigue"&gt;Zoom fatigue&lt;/a&gt;, only causing further frustration.&lt;/p&gt;

&lt;p&gt;Mobbing certainly has benefits, like I mentioned earlier, but it's a tool, and just like any other tool, it has a time and place to be used. When mobbing is turned into a golden hammer, and everything becomes a nail, is when mobbing stops being an effective tool. All-day mobbing becomes the new paradigm‚Äîthe standard way to solve issues‚Äîrather than just another tool in our belts. It's just assumed that every problem can be solved by the mob, and mobbing is the quintessential way of delivering code. This couldn't be further from the truth, however. The reality is that the majority of software teams deploy the currently accepted, tried and tested methods of creating software: individual focused work (sometimes referred to as "flow"), occasionally pairing or mobbing, code reviews, and open communication. When paired with remote and asynchronous work (which has become commonplace since 2019) we have a developer experience that allows the individual to contribute meaningful, creative and  thoughtful code while still having the luxury to use whatever tools necessary to finish the job at their own convenience, at the pace they find comfortable and, most of all, without the constant distractions of an all-day mob.&lt;/p&gt;

&lt;p&gt;And it's the constant distraction of the all-day mob that is one of its greatest downfalls. Having to rotate every 5 minutes for 1.5 hour periods, for example, is quite draining. The context switching leads to Zoom fatigue much faster, and can prevent an individual from doing focused work. While you are driving (i.e. actively writing code) you are at the whims of the navigator who dictates what you should do and how you should do it. The navigator is constantly derailing your train of thought with suggestions, opinions, and questions. While you are navigating, you are giving commands to another user, who from my personal experience, usually already knows what they should be doing. While in a non-active mob role (i.e. neither driving nor navigating) you are essentially just watching someone else work‚Äîit's a very disengaging position to be in. The situation is made worse when the work at hand isn't particularly engaging to begin with‚Äîwhen it's work that absolutely doesn't need 3 engineers to work on at the same time. Bug tickets, or data entry work, for example. I've personally come into situations like this many times, where the mob is needlessly drudging through a bug ticket or data fix only because it's "just the way we work" irrespective of the fact that it's wasting time and resources. That‚Äôs not to say that this setup always leads to a terrible developer experience, the point I‚Äôm trying to drive home is that mobbing has a time and place. It‚Äôs up to the team to decide what is an acceptable time to mob, what is an acceptable issue to work on, and who can benefit the most from‚Äîor contribute the most to‚Äîthe mob.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#does-mobbing-lead-to-faster-delivery"&gt;
  &lt;/a&gt;
  Does mobbing lead to faster delivery
&lt;/h3&gt;

&lt;p&gt;One major argument I‚Äôve heard a lot is that mobbing leads to a tighter feedback loop, and ultimately faster deployment of features. You have your entire team mobbing on the feature, so you can skip the code review. You have your entire team mobbing on the feature, so bugs are spotted more frequently and squashed. You have your entire team mobbing on the feature, so instead of spending time researching or browsing Stack Overflow, you‚Äôre more likely to have another experienced member jump in with the solution. In theory, this is what should happen. From experience, this is often not the case.&lt;/p&gt;

&lt;p&gt;In many scenarios, it‚Äôs hard to completely eliminate the PR review process. Your client‚Äôs devs will still want to review it, or perhaps a team member couldn‚Äôt make it to the mob and they still need to review the code. Perhaps an individual in another department, or overseas, needs to review the code before it gets merged. I‚Äôve almost never encountered a situation where the mob was able to actually skip the PR review process completely and push the code directly to staging or production.&lt;/p&gt;

&lt;p&gt;When your entire team is mobbing on the same feature, they eventually adopt the same train of thought. Their experience with the codebase begins to converge and knowledge transfer of important concepts has already occurred. In the long run, this means that knowledge transfer and experience will only grow in the constraints of the mobbing computer‚Äîand this decreases diversity and could lead to groupthink. A feature developed by this team may actually benefit from a code review by a fresh pair of eyes‚Äîsomeone not as familiar with the system who can offer a unique perspective.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mobbing-is-just-another-tool"&gt;
  &lt;/a&gt;
  Mobbing is just another tool
&lt;/h3&gt;

&lt;p&gt;Mob programming can be a great tool, but it should not be the default way to work. It should not be the &lt;em&gt;de facto&lt;/em&gt; solution for all problems. Your team should discuss what it means to mob, what benefits it brings, and every individual involved should be on board with the process. These thoughts align with those of Peter Nycander, another developer who has experience with mob programming. He echoes the same sentiments‚Äîmobbing should not be something we do all the time. He does an excellent job summarizing a lot of the things I bring up here and expanding on the issues that constant mobbing can create, you can read his article here: &lt;a href="https://dev.to/peternycander/why-you-should-not-only-do-mob-programming-4jo9"&gt;https://dev.to/peternycander/why-you-should-not-only-do-mob-programming-4jo9&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Mobbing has benefits, but when it's used as a golden hammer and not practically applied, it leads to fatigue, frustration, and an overall worse developer experience. Mobbing should be used as a tool, not as a doctrine.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>workplace</category>
      <category>mobbing</category>
    </item>
    <item>
      <title>What is Data Wrangling? Definition, Benefits and data wrangling operations.</title>
      <author>Phylis Jepchumba</author>
      <pubDate>Fri, 17 Sep 2021 21:18:10 +0000</pubDate>
      <link>https://dev.to/phylis/what-is-data-wrangling-definition-benefits-and-data-wrangling-operations-5881</link>
      <guid>https://dev.to/phylis/what-is-data-wrangling-definition-benefits-and-data-wrangling-operations-5881</guid>
      <description>&lt;p&gt;Data wrangling, also known as data munging and data cleaning enables  businesses tackle complex data with less time, make concrete and timely solutions and also produce more accurate results.&lt;br&gt;
This article provides you with a detailed understanding of;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is data wrangling?&lt;/li&gt;
&lt;li&gt;Benefits of data wrangling.&lt;/li&gt;
&lt;li&gt;Data wrangling operations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;
  &lt;a href="#what-is-data-wrangling"&gt;
  &lt;/a&gt;
  What is data wrangling?
&lt;/h6&gt;

&lt;p&gt;Data wrangling is the process of cleaning, organizing and transforming raw data into a desired format to make it appropriate and valuable for various purposes.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#benefits-of-data-wrangling"&gt;
  &lt;/a&gt;
  Benefits of data wrangling.
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Data wrangling acts as preparation stage for data mining mining process which involves data gathering.&lt;/li&gt;
&lt;li&gt;Data wrangling improves usability by converting it into compatible format.&lt;/li&gt;
&lt;li&gt;Enables users process large volumes of data easily.&lt;/li&gt;
&lt;li&gt;Enables users cleanse data from noise, flawed and missing elements.&lt;/li&gt;
&lt;li&gt;Helps business users make timely and concrete decisions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;
  &lt;a href="#data-wrangling-operations"&gt;
  &lt;/a&gt;
  Data wrangling operations.
&lt;/h6&gt;

&lt;p&gt;1.Data manipulation.&lt;br&gt;
Includes sorting, merging, grouping, and altering the data.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#sorting"&gt;
  &lt;/a&gt;
  Sorting.
&lt;/h6&gt;

&lt;p&gt;Sorts a dataframe in ascending (default) or descending order.&lt;br&gt;
Uses &lt;strong&gt;sort_values&lt;/strong&gt; function. &lt;br&gt;
It uses quicksort by default for sorting and can be replaced with mergesort or heapsort using kind property. &lt;/p&gt;

&lt;p&gt;Example.&lt;br&gt;
Sorting a column in a dataframe in descending order as shown;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--037aw_IR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4sckwrgg7tfuinpvgup2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--037aw_IR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4sckwrgg7tfuinpvgup2.png" alt="Screenshot (125)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sort_values.html"&gt;Read more about sorting&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#merging-and-concatenation"&gt;
  &lt;/a&gt;
  Merging and concatenation.
&lt;/h6&gt;

&lt;p&gt;Merge function is  used to combine two dataframes.&lt;br&gt;
concat function combines two dataframes into a new one.&lt;/p&gt;

&lt;p&gt;For example when we have two dataframes df1 and df2 we can concatenate them into one dataframe as follows;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#grouping"&gt;
  &lt;/a&gt;
  Grouping.
&lt;/h6&gt;

&lt;p&gt;Grouping is used to aggregate the data into different categories.&lt;br&gt;
A groupby operation involves  combining of splitting the object, applying a function, and combining the results.&lt;br&gt;
&lt;a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html"&gt;Read more about groupby()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.Data Filtration.&lt;br&gt;
Data Filtration is the process of choosing a smaller part of your data set and using that subset for viewing or analysis.&lt;/p&gt;

&lt;p&gt;Given a dataset with several columns, you can choose columns that are useful by filtering the column names as shown;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Course'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.filter.html"&gt;Read more about data Filtration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.Dealing with missing values.&lt;br&gt;
On my previous article, I wrote about ways to handle missing values in a dataset.&lt;br&gt;
&lt;a href="https://dev.to/phylis/how-to-handle-missing-values-in-a-dataset-using-python-1d2e"&gt;Handling missing values in python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.Encoding data.&lt;br&gt;
Not all datasets have numeric data and since most machine learning models accept numerical values, encoding categorical variables is an important operation in data wrangling.&lt;br&gt;
Categorical variables are usually represented as &lt;strong&gt;strings&lt;/strong&gt; or &lt;strong&gt;categories&lt;/strong&gt; and are finite in number. &lt;br&gt;
There are many ways of encoding categorical data. In this article we are going to look at &lt;strong&gt;label encoding technique&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d7Dxsx3i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9x7xchfpi6nf1bymx0f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d7Dxsx3i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9x7xchfpi6nf1bymx0f.png" alt="Screenshot (126)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the above code, ' Gender ' column has categorical variables . Using label encoder each label is converted into an integer value.&lt;/p&gt;

&lt;p&gt;5.Normalization.&lt;br&gt;
A dataset may contain data with multiple features and each has a different unit of measurement. Normalization involves converting all possible features to the same standard scale.&lt;/p&gt;

&lt;p&gt;Min-Max scaling is a commonly used technique in normalizing the data where the data is scaled to a fixed range - usually 0 to 1.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html"&gt;More about Min-Max scaling &lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>What is the DRY/ KISS Principal</title>
      <author>Albert Bennett</author>
      <pubDate>Fri, 17 Sep 2021 20:59:26 +0000</pubDate>
      <link>https://dev.to/albertbennett/what-is-the-dry-kiss-principal-1h3n</link>
      <guid>https://dev.to/albertbennett/what-is-the-dry-kiss-principal-1h3n</guid>
      <description>&lt;p&gt;If you learned something new feel free to connect with me on &lt;a href="https://www.linkedin.com/in/albert-bennett/"&gt;linkedin&lt;/a&gt; or follow me on dev.to :)&lt;/p&gt;

&lt;p&gt;I feel like this is one of those topics in clean coding that doesn't get talked about too much, it's almost as if it's a little old fashioned and yet, once every so often I get asked about it in an interview or it comes up in conversation. So, I'm taking the opportunity to talk about it now.&lt;/p&gt;

&lt;p&gt;Both DRY (Don't Repeat Yourself) and KISS (Keep it Stupidly Simple) are software design principals. When followed they can lead to better designed and easier maintained code. Now with adhering to any principals, I have found that they each have a time and a place and that time isn't every-time. The reason I say this is that there can be situations when following them to strictly can lead to unnecessary complexity or even OVER-KILL (think trying to swat a fly with a bazooka). We don't want that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The DRY Principal&lt;/strong&gt;&lt;br&gt;
Some might have seen it as WET (Wasting Everyone's Time). To say that something is DRY is to make sure that the code written, is as reusable and small as possible. Code re-usability can be better achieved by introducing abstractions, and by refactoring the code into smaller more manageable pieces. The overall goal should be to reduce, reuse and recycle. The benefits of this is firstly to make the code look better, and easier to maintain. Also it helps to reduce the number of bugs in your software, and should help with identifying where bugs are if any occur. Again it is possible to make something overly DRY such as abstracting an already small object with little reusability, so watch out!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The KISS Principal&lt;/strong&gt;&lt;br&gt;
Essentially, keep methods small &amp;lt;20 lines. Also each method should do one thing, and only one thing (single responsibility). The benefits of using KISS is that it, again makes your code easier to maintain and also helps with readability. The simpler, more Englishly reading your code can be the better. You are coding so that someone else will read it after all. Easier to read code == easier to maintain. I'd like to think that when writing code if someone looked over my shoulder they should be able to tell what is going on like in a book... well maybe a complex book with variables in it. Also for the love of all things codey, watch out when using magic strings/ numbers. I'd avoid them altogether if you can. And that methods at most have 4 parameters in them, anymore and it is clearly is doing more than what it needs to be or you need to pass in a object that incapsulates the parameters of the method.&lt;/p&gt;

&lt;p&gt;In conclusion each principal should be used where appropriate, and each of them should be in the forefront of your mind when developing/ maintaining software.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>computerscience</category>
      <category>cleancoding</category>
    </item>
    <item>
      <title>24 YouTube Channels üì∫ that will help you become a better Developer üßë‚Äçüíª</title>
      <author>Roden</author>
      <pubDate>Fri, 17 Sep 2021 20:44:01 +0000</pubDate>
      <link>https://dev.to/kerthin/24-youtube-channels-that-will-help-you-become-a-better-developer-45k5</link>
      <guid>https://dev.to/kerthin/24-youtube-channels-that-will-help-you-become-a-better-developer-45k5</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;The profession of a programmer, like many other professions related to IT, implies constant training. For even if you are a good specialist in your field, this does not mean that you have comprehended all the peaks of your profession. We always have something to learn. You can't just learn certain rules and formulas in order to become a professional.&lt;/p&gt;

&lt;p&gt;You can study in different ways: read books and articles, find a mentor who will help you in mastering the knowledge of your profession, and so on.&lt;/p&gt;

&lt;p&gt;But as a rule, in most cases we turn to YouTube. The fact is that it is much easier for us to perceive information through video, when there is a person who will explain everything to us simply and easily, how some function or technology works, what types of algorithms there are, and so on. Unfortunately, sometimes it is difficult for us to perceive information through simple text.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8QK3fLFn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/1iu8uG2cjYFZS6wTxv/giphy-downsized-large.gif%3Fcid%3Decf05e4788yw5v31rh5cg72qxhp3prrccavusnqatig0absz%26rid%3Dgiphy-downsized-large.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8QK3fLFn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/1iu8uG2cjYFZS6wTxv/giphy-downsized-large.gif%3Fcid%3Decf05e4788yw5v31rh5cg72qxhp3prrccavusnqatig0absz%26rid%3Dgiphy-downsized-large.gif%26ct%3Dg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But fortunately we have YouTube. What would we do without him? He is our savior.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e9DNQ3ws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/ek4CUx2FONgHaMz9V5/giphy-downsized-large.gif%3Fcid%3Decf05e47lcjxmne36ii3yyekd9sqsxqlz7aul208xbir92ho%26rid%3Dgiphy-downsized-large.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e9DNQ3ws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/ek4CUx2FONgHaMz9V5/giphy-downsized-large.gif%3Fcid%3Decf05e47lcjxmne36ii3yyekd9sqsxqlz7aul208xbir92ho%26rid%3Dgiphy-downsized-large.gif%26ct%3Dg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that is why today I decided to give a list of channels that could at least help you become a better specialist for a little bit. (But this is not a fact)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DAe9_daF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/JtLrtaN4VPoKXJRKGB/giphy.gif%3Fcid%3Decf05e479mvs1h9tcx7ketd3mw8ygktwisl9wv0rm43kozk4%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DAe9_daF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/JtLrtaN4VPoKXJRKGB/giphy.gif%3Fcid%3Decf05e479mvs1h9tcx7ketd3mw8ygktwisl9wv0rm43kozk4%26rid%3Dgiphy.gif%26ct%3Dg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;1. &lt;a href="https://www.youtube.com/c/TraversyMedia"&gt;Traversy Media&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hKtd7VMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uruurvzbchwezqagkgrd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hKtd7VMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uruurvzbchwezqagkgrd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here you can find excellent tutorials on layout, on the programming languages JS and PHP, as well as on the React and Vue frameworks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;2. &lt;a href="https://www.youtube.com/c/DevTipsForDesigners"&gt; DevTips&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oYOSKt9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkh2zkk1ngtyk3ey45ua.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oYOSKt9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkh2zkk1ngtyk3ey45ua.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The channel has a number of interesting videos like how to make CSS animation with physics simulation or how to work with legacy code, as well as many interesting videos on CSS animations and React lessons. There are also videos where conversations with other developers are conducted. The only disadvantage is that the videos rarely come out, but they will not clog your tape. üòÅ&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;3. &lt;a href="https://www.youtube.com/c/programmingwithmosh/featured"&gt; Programming with Mosh&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X_HyuLmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lehc50lsz85ilzqe875d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X_HyuLmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lehc50lsz85ilzqe875d.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Courses on React, React Native, Redux. Videos about Java, Python, MySQL and many other interesting things.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;4. &lt;a href="https://www.youtube.com/c/DesignCourse/featured"&gt; DesignCourse&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HVw3RBE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgol3cegc8nzam7y9oep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HVw3RBE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgol3cegc8nzam7y9oep.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An amazing channel where you can learn various CSS tricks, how to create beautiful animations, how to create SVG, which you can then animate, and so on. A great channel with a very interesting feed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;5. &lt;a href="https://www.youtube.com/c/FryingPan/featured"&gt;Frying Pan&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vEB_GIaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/66n9om5dtaqwlxobddn5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vEB_GIaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/66n9om5dtaqwlxobddn5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A young channel where a guy who studies at a university and interns at a big tech company talks about general lifestyle, coding, academics/career paths, tech industry. There are no courses on the channel, but its videos are interesting to watch.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;6. &lt;a href="https://www.youtube.com/c/BenAwad97/featured"&gt;Ben Awad&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Y76UmQW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka6g0cd3d0bxd02m3oc4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Y76UmQW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka6g0cd3d0bxd02m3oc4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Channel Description&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I'm a software developer who makes videos about React, React Native, GraphQL, Typescript, Node.js, PostgreSQL, Python, and all things coding.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;7. &lt;a href="https://www.youtube.com/c/Fireship"&gt;Fireship&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--68FAy6aA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ognr4eb3130c4leqyrt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--68FAy6aA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ognr4eb3130c4leqyrt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A great channel that contains videos that, from a theoretical point of view, tell you how various programming languages work. There are also a number of videos on the topic of layout and animation creation. There are many great short and informative videos like "Tailwind in 100 Seconds" or "PostCSS in 100 Seconds". I think many people may like this channel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;8. &lt;a href="https://www.youtube.com/user/flintyara"&gt;Yuri Artyukh&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UNq2J_ri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fuxk8lfnlicjfk0ct1kp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UNq2J_ri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fuxk8lfnlicjfk0ct1kp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On the channel you can find a lot of good videos on working with libraries such as Three.js and Pixi.js. There are also videos on Canvas and Webgl. Suitable for those who study 3D on the Web.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;9. &lt;a href="https://www.youtube.com/c/AdamWathan/featured"&gt;Adam Wathan&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8P6N6Dkd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dpjbphj89eaxbk3muzmm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8P6N6Dkd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dpjbphj89eaxbk3muzmm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A channel where there are a huge number of videos on the Tailwind Css framework.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;10. &lt;a href="https://www.youtube.com/c/LevelUpTuts/featured"&gt;LevelUpTuts&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hh9XTIgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99bj0a0g9oexrb1oy642.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hh9XTIgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99bj0a0g9oexrb1oy642.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Channel Description&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1000+ free video tutorials created, recorded, edited, published and maintained by Scott Tolinski.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;11. &lt;a href="https://www.youtube.com/c/DesignMedium/featured"&gt;Design Medium&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aXTWqyZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7ui5g7f4lj455ljts86.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aXTWqyZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7ui5g7f4lj455ljts86.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Channel Description&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Design Medium is all about UI Design and Front-end Development. Here you'll find videos on Adobe XD, Web Design using HTML, CSS and JavaScript and Mobile App Design using React Native.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;12. &lt;a href="https://www.youtube.com/c/WrongAkram/videos"&gt;Wrong Akram&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IkkcQc_2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gnivbb2s2jb5fw3s2n5k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IkkcQc_2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gnivbb2s2jb5fw3s2n5k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The channel is dedicated to creating a user interface using Adobe Xd and Invision Studio. There is also a video on how to implement these interfaces and animations using React.js and Node.js.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;13. &lt;a href="https://www.youtube.com/c/CodingNepal/videos"&gt;CodingNepal&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0mc5wIp2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0uthqy02v07b8uofm690.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0mc5wIp2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0uthqy02v07b8uofm690.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Channel Description&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Welcome to my channel "CodingNepal". Here I upload videos related to HTML, CSS, JavaScript, and PHP along with creative coding stuff such as CSS Animations &amp;amp; Effects.&lt;/p&gt;

&lt;p&gt;I always provide the source codes of each video on my website - codingnepalweb.com for free. I believe my videos or codes help to inspire web designers &amp;amp; developers and also help to improve their skills.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;14. &lt;a href="https://www.youtube.com/c/dcode-software"&gt;dcode&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YZgtD5cM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whoo7na3ykvtgdvtgc03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YZgtD5cM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whoo7na3ykvtgdvtgc03.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Channel Description&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On my channel you can find HTML, CSS &amp;amp; JavaScript tutorials, PHP tutorials, Node.js tutorials and Rust tutorials, as well as many other topics covered in web development. I also enjoy building JavaScript projects every now and then&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CC23u1Cw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmvbhpo989kavn68fuhq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CC23u1Cw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmvbhpo989kavn68fuhq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;15. &lt;a href="https://www.youtube.com/c/Freecodecamp/videos"&gt;freeCodeCamp.org&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xRa5ZOLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0r8ler0ulicaqyuhz9en.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xRa5ZOLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0r8ler0ulicaqyuhz9en.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The channel is dedicated to everything related to programming. Learning various APIs, React, JS, GIT, browsers, and much more. A very good channel with a lot of useful information.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;16. &lt;a href="https://www.youtube.com/c/JavaScriptMastery/videos"&gt;JavaScript Mastery&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uwwHE5Kv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2r63ozzwpmq7kosh7rkr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uwwHE5Kv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2r63ozzwpmq7kosh7rkr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A channel with videos on how to create various chats, messengers, travel apps and much more using React.js.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;17. &lt;a href="https://www.youtube.com/channel/UCsKsymTY_4BYR-wytLjex7A"&gt;Brian Design&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KDSacTNi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vglynx5f48zjjsaq01v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KDSacTNi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vglynx5f48zjjsaq01v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On this channel you can find a lot of videos on how to create a slider, animation when scrolling, adaptive website design and also a lot of different elements using React.js&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;18. &lt;a href="https://www.youtube.com/kepowob/videos"&gt;Kevin Powell&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V_fX0eq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9mmb6opk1gmy1kh4gssv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V_fX0eq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9mmb6opk1gmy1kh4gssv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A wonderful channel dedicated to the deep study of CSS. Required for any Frontend developer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;19. &lt;a href="https://www.youtube.com/c/WebDevSimplified/featured"&gt;Web Dev Simplified&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K6TFHkNm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56qsjh65f61eulwtckzc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K6TFHkNm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56qsjh65f61eulwtckzc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Channel Description&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Web Dev Simplified is all about teaching web development skills and techniques in an efficient and practical manner. If you are just getting started in web development Web Dev Simplified has all the tools you need to learn the newest and most popular technologies to convert you from a no stack to full stack developer. Web Dev Simplified also deep dives into advanced topics using the latest best practices for you seasoned web developers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;20. &lt;a href="https://www.youtube.com/c/wcandillon/videos"&gt;William Candillon&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AtNIwEyk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzsbc3fxd6y8m0zpeno7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AtNIwEyk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzsbc3fxd6y8m0zpeno7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All content on the channel is strictly only about React.js. Here you will learn how to create interfaces and animations. Also on the channel there are many interesting conversational videos on the topic React.js&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;21. &lt;a href="https://www.youtube.com/c/CodingTech/videos"&gt;Coding Tech&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8UGD3Udd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ofyshj011scjy6jo3vj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8UGD3Udd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ofyshj011scjy6jo3vj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The site is dedicated to It technologies. Here you will find videos from the usual videos on CSS, JS, Python and Django to blockchain and microservices. A very informative channel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;22. &lt;a href="https://www.youtube.com/channel/UCxhgW0Q5XLvIoXHAfQXg9oQ/videos"&gt;Hunor M√°rton Borb√©ly&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1T2GmK4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ad7d8e9arafrnls82vhm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1T2GmK4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ad7d8e9arafrnls82vhm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An interesting channel about the development of games in the browser, as well as the creation of SVG and 3D elements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;23. &lt;a href="https://www.youtube.com/c/AniaKub%C3%B3w/videos"&gt;Code with Ania Kub√≥w&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NEGhpCsx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dejn29z1yyu0qa16dogp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NEGhpCsx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dejn29z1yyu0qa16dogp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Channel about JavaScript, React, React-Native, Next.js, Node.js, Express, GraphQL, serverless functions, working with databases and much more!&lt;/p&gt;

&lt;h1&gt;24. &lt;a href="https://www.youtube.com/c/JomaOppa/videos"&gt;Joma Tech&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aNSDf8gZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s646kcnbr2mxrwxxaa0l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aNSDf8gZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s646kcnbr2mxrwxxaa0l.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The author of the channel talks about his life in Silicon Valley and about working at big tech companies. Very interesting.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;The End&lt;/h1&gt;

&lt;p&gt;Thank you for taking the time to my post. I want to warn you right away that in this collection I have made exactly those channels that I like. I am well aware that you may not like some of them, but believe me, they at least deserve attention. Thank you again and you can also offer your options for good YouTube channels in the comments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WFkahiFb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/h7No5m3tAeV4Q/giphy.gif%3Fcid%3Decf05e47ggknq0jqnus8032t9hgjxx45q6l49xtl3k4bdtfe%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WFkahiFb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/h7No5m3tAeV4Q/giphy.gif%3Fcid%3Decf05e47ggknq0jqnus8032t9hgjxx45q6l49xtl3k4bdtfe%26rid%3Dgiphy.gif%26ct%3Dg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I can advise you to subscribe to my &lt;a href="https://twitter.com/BelichenkoRoden"&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/a&gt;, I also post my works there.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to use Gatsby with Typescript.</title>
      <author>Manos Menexis</author>
      <pubDate>Fri, 17 Sep 2021 20:19:23 +0000</pubDate>
      <link>https://dev.to/skil3e/how-to-use-gatsby-with-typescript-2d79</link>
      <guid>https://dev.to/skil3e/how-to-use-gatsby-with-typescript-2d79</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;As a JAMstack &amp;amp; React enthusiast one of my favorite SSG - (Static Site Generator) Frameworks is &lt;a href="https://www.gatsbyjs.org/"&gt;Gatsbyjs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have used &lt;a href="https://www.gatsbyjs.org/"&gt;Gatsbyjs&lt;/a&gt; to create my &lt;a href="http://emmbrand.com/"&gt;company's website&lt;/a&gt; as well as a bunch of other customers' too.&lt;/p&gt;

&lt;p&gt;A couple of years ago I started playing around with Typescript and instantly fell in love with it. It helped me write better and more predictable code, while it also provided a level of documentation around my codebase.&lt;/p&gt;

&lt;p&gt;While Gatsbyjs supports Typescript out of the box, I found out that there was not enough documentation about their &lt;a href="https://www.gatsbyjs.com/docs/reference/config-files/"&gt;Config Files&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Inside its configuration files, Gatsby provides a rich set of lifecycle APIs to hook into its bootstrap, build, and client runtime operations. They allow sourcing data, creating pages, and customizing generated HTML pages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this article we will take a look on how to set up our Gatsby website and support it fully with Typescript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initial-setup"&gt;
  &lt;/a&gt;
  Initial setup
&lt;/h2&gt;

&lt;p&gt;After generating a Gatsby site with &lt;code&gt;gatsby new&lt;/code&gt;, you can immediately rename any file inside of &lt;code&gt;/src&lt;/code&gt; from &lt;code&gt;.js&lt;/code&gt; to &lt;code&gt;.tsx&lt;/code&gt; and it will work out of the box. So that's done. What you will find though is that files like &lt;code&gt;gatsby-browser.js&lt;/code&gt;, &lt;code&gt;gatsby-node.js&lt;/code&gt; or &lt;code&gt;gatsby-ssr.js&lt;/code&gt; wont work out of the box with this method.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-packages"&gt;
  &lt;/a&gt;
  Installing packages
&lt;/h2&gt;

&lt;p&gt;Its really useful to install types for react, react-dom, node and probably react-helmet. You can install thouse via npm like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @types/node @types/react @types/react-dom @types/react-helmet &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we also need ts-node.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;ts-node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then on &lt;code&gt;gatsby-config.js&lt;/code&gt; in the beginning of the file add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// gatsby-config.js&lt;/span&gt;

&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ts-node&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;compilerOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;commonjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;es2017&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// rest of the config&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tsconfigjson"&gt;
  &lt;/a&gt;
  tsconfig.json
&lt;/h2&gt;

&lt;p&gt;Even though there is a plugin for it, I usually like to add my own &lt;code&gt;tsconfig.json&lt;/code&gt; file in the root of my project. My &lt;code&gt;tsconfig.json&lt;/code&gt; file looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"module"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"commonjs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"esnext"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jsx"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"preserve"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lib"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"dom"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"es2015"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"es2017"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"strict"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"noEmit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"isolatedModules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"esModuleInterop"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"skipLibCheck"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"noUnusedLocals"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"noUnusedParameters"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"experimentalDecorators"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"emitDecoratorMetadata"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"resolveJsonModule"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"include"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"./src/**/*"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-rest-of-the-files"&gt;
  &lt;/a&gt;
  The rest of the files
&lt;/h2&gt;

&lt;p&gt;After setting up my &lt;code&gt;tsconfig.json&lt;/code&gt; I create a folder inside &lt;code&gt;/src&lt;/code&gt; called &lt;code&gt;app&lt;/code&gt;. I usually store all my config and provider files there.&lt;/p&gt;

&lt;p&gt;For the sake of time i will provide two example files that i use in every project and I am pretty sure you can figure out how to apply it to the rest.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gatsbynodejs-createpages"&gt;
  &lt;/a&gt;
  gatsby-node.js - createPages
&lt;/h2&gt;

&lt;p&gt;If you worked with Gatsby before this should look familiar with the only difference being that is written in Typescript.&lt;/p&gt;

&lt;p&gt;Let's assume we want to create pages from a list of article we fed into Gatsby's internal graphql.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/app/GatsbyNode.tsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GatsbyNode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gatsby&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;TypePost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;TypeData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;allPost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TypePost&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createPages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GatsbyNode&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;createPages&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createPage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TypeData&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;`
      {
          allPost {
              nodes {
                  id
                  title
                  slug
                  content
              }
          }
      }
      `&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Create Post Pages  &lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postTemplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/templates/Post.tsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createPostPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;allPost&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;createPage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`posts/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;component&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;postTemplate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;context&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="c1"&gt;// anything else you want to pass to your context&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;createPostPromise&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then on &lt;code&gt;gatsby-node.js&lt;/code&gt; we do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// gatsby-node.js&lt;/span&gt;

&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onCreatePage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/app/GatsbyNode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;onCreatePages&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are using multiple apis inside of &lt;code&gt;./src/app/GatsbyNode.ts&lt;/code&gt; &lt;br&gt;
like &lt;code&gt;onCreatePage&lt;/code&gt; or &lt;code&gt;onCreateWebpackConfig&lt;/code&gt; you can also do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// gatsby-node.js&lt;/span&gt;

&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/app/GatsbyNode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will run all the functions of &lt;code&gt;./src/app/GatsbyNode.ts&lt;/code&gt;, but you have to make sure you export the functions with the correct name based on Gatsby's documentation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gatsbybrowserjs-amp-gatsbyssrjs-wraprootelement"&gt;
  &lt;/a&gt;
  gatsby-browser.js &amp;amp; gatsby-ssr.js - wrapRootElement
&lt;/h2&gt;

&lt;p&gt;So let's assume we also want to add a theme provider to our app. On the &lt;code&gt;src/app/&lt;/code&gt; folder that we created before we add the file &lt;code&gt;WrapRootElement.tsx&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/app/WrapRootElement.tsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GatsbyBrowser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gatsby&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./ThemeContext&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wrapRootElement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GatsbyBrowser&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wrapRootElement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;            
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ThemeProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;wrapRootElement&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then on &lt;code&gt;gatsby-browser.js&lt;/code&gt; &amp;amp; &lt;code&gt;gatsby-ssr.js&lt;/code&gt; files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// gatsby-browser.js &amp;amp; gatsby-ssr.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;WrapRootElement&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/app/WrapRootElement&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wrapRootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;WrapRootElement&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this tutorial helps you use Gatsby &amp;amp; Typescript more effectively and save you some time searching how to actually use the config files of Gatsby with Typesript. Thank you for your time!!!&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>gatsby</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Frosted glass on CSS</title>
      <author>Ellaine Tolentino</author>
      <pubDate>Fri, 17 Sep 2021 20:17:03 +0000</pubDate>
      <link>https://dev.to/tolentinoel/frosted-glass-on-css-37bg</link>
      <guid>https://dev.to/tolentinoel/frosted-glass-on-css-37bg</guid>
      <description>&lt;p&gt;Another week of learning something new! In this blog I am going to share with you how to make frosted glass just through CSS! There are a lot of variations you can do and that you can definitely find online. So let's go and explore together!&lt;/p&gt;

&lt;p&gt;By the end of this blog, we should have something like Kyle Wetton's frosted glass on &lt;a href="https://codepen.io/kylewetton/pen/bGbaazX"&gt;CodePen&lt;/a&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---SSN79WL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfeninxqehh9dv4g4acv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---SSN79WL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfeninxqehh9dv4g4acv.png" alt="Kyle Wetton's Frosted Glass"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So first of, let's make an html with all the elements we need. In my case, I wanted to make a mock login screen with that frosted glass design.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y1zWDEVM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jp722arh4c34dh7ul91.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y1zWDEVM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jp722arh4c34dh7ul91.png" alt="HTML Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now on our CSS file, we can apply our background-image to our 'body', adjust positioning and indicate the sizes you need then we'll get into the frosted glass.&lt;/p&gt;

&lt;p&gt;There's a lot of ways to implement this. Below are what I've tried:&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#glass-1"&gt;
  &lt;/a&gt;
  Glass 1
&lt;/h4&gt;

&lt;p&gt;On your 'formDiv', you can apply backdrop-filter and box-shadow. In this case, box-shadow is inset with 200px spread with its shade and color opacity has been set. While backdrop-filter is set to blur at 8px. More of backdrop-filter on my next blog!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;-webkit-backdrop-filter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;blur&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;8&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  &lt;span class="c"&gt;/* Safari 9+ */&lt;/span&gt;
&lt;span class="nt"&gt;backdrop-filter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;blur&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;8&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* Chrome and Opera */&lt;/span&gt;
&lt;span class="nt"&gt;box-shadow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;inset&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;200&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="nt"&gt;rgba&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;08&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--awYZg7iG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93av4mcbqm19ikhr2cpn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--awYZg7iG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93av4mcbqm19ikhr2cpn.png" alt="Frosted glass 1"&gt;&lt;/a&gt;We got our frost! This looks more likely of a frosted film than glass.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#glass-2"&gt;
  &lt;/a&gt;
  Glass 2
&lt;/h4&gt;

&lt;p&gt;In this glass, we're setting the box-shadow darker, outset(the default by removing 'inset'), &amp;amp; less transparent, plus adding a background-color.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;-webkit-backdrop-filter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;blur&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;8&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  &lt;span class="c"&gt;/* Safari 9+ */&lt;/span&gt;
&lt;span class="nt"&gt;backdrop-filter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;blur&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;8&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* Chrome and Opera */&lt;/span&gt;
&lt;span class="nt"&gt;box-shadow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;10&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;15&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;10&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="nt"&gt;rgb&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="err"&gt;15&lt;/span&gt;&lt;span class="o"&gt;%);&lt;/span&gt;
&lt;span class="nt"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;rgb&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;228&lt;/span&gt; &lt;span class="err"&gt;228&lt;/span&gt; &lt;span class="err"&gt;228&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="err"&gt;15&lt;/span&gt;&lt;span class="o"&gt;%);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Es1L72v9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvxvf5ezwkfmisb74pij.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Es1L72v9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvxvf5ezwkfmisb74pij.png" alt="frosted Glass 2"&gt;&lt;/a&gt;The shadow gives it a bit more perspective. But still similar to our first one.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#glass-3"&gt;
  &lt;/a&gt;
  Glass 3
&lt;/h4&gt;

&lt;p&gt;Another thing I have tried is using filter! but instead of using blur as the filter, I used drop-shadow with combination of background-color, and box-shadow(inset).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;drop-shadow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;4&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;6&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="nt"&gt;black&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;rgb&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;152&lt;/span&gt; &lt;span class="err"&gt;151&lt;/span&gt; &lt;span class="err"&gt;151&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="err"&gt;25&lt;/span&gt;&lt;span class="o"&gt;%);&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;You&lt;/span&gt; &lt;span class="nt"&gt;can&lt;/span&gt; &lt;span class="nt"&gt;definitely&lt;/span&gt; &lt;span class="nt"&gt;adjust&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;color&lt;/span&gt; &lt;span class="nt"&gt;or&lt;/span&gt; &lt;span class="nt"&gt;opacity&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;make&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;text&lt;/span&gt; &lt;span class="nt"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="nt"&gt;box-shadow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;inset&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;200&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="nt"&gt;rgb&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;255&lt;/span&gt; &lt;span class="err"&gt;255&lt;/span&gt; &lt;span class="err"&gt;255&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="err"&gt;8&lt;/span&gt;&lt;span class="o"&gt;%);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yl_yiAoQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guvcse6cnj1qvi35kuk8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yl_yiAoQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guvcse6cnj1qvi35kuk8.png" alt="Frosted glass 4"&gt;&lt;/a&gt;&lt;/p&gt;
In this case, it will look more of a tinted glass than frosted glass.






&lt;h4&gt;
  &lt;a href="#glass-4"&gt;
  &lt;/a&gt;
  Glass 4
&lt;/h4&gt;

&lt;p&gt;If play around with it until you get the blur you want and want to add a little spice, you can also attach another backdrop-filter and some border!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;backdrop-filter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;grayscale&lt;/span&gt;&lt;span class="o"&gt;(.&lt;/span&gt;&lt;span class="err"&gt;8&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;blur&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;box-shadow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;inset&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;200&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="nt"&gt;rgba&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;08&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nt"&gt;border-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="nt"&gt;solid&lt;/span&gt; &lt;span class="nt"&gt;rgba&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;225&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;225&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;225&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;border-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="nt"&gt;solid&lt;/span&gt; &lt;span class="nt"&gt;rgba&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;225&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;225&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;225&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;border-right&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="nt"&gt;solid&lt;/span&gt; &lt;span class="nt"&gt;rgba&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;225&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;225&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;225&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OWNVH6BX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ohshv57sazjr6pzdulo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OWNVH6BX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ohshv57sazjr6pzdulo.png" alt="Glass 5"&gt;&lt;/a&gt;See that grayscale take effect anything under the glass and the border gives it thickness!&lt;/p&gt;

&lt;p&gt;Check out my CodePen for the final results!&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/tolentinoel/embed/wvzbbEY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I had so much fun making this! I hope you did too!&lt;br&gt;
Until the next!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References/Links:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://css-tricks.com/frosting-glass-css-filters/"&gt;CSS Tricks&lt;/a&gt; - Frosted Glass on CSS using filter()&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://images4.alphacoders.com/114/1144182.jpg"&gt;Background photo&lt;/a&gt; - Vector Nature wallpaper&lt;/li&gt;
&lt;li&gt;Google Fonts used:

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Raleway"&gt;Raleway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Fredoka+One"&gt;Fredoka One&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>codenewbie</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>[PT-BR] O Poder do M√≥dulo Task do Elixir -Task.Supervisor</title>
      <author>Felipe Araujo </author>
      <pubDate>Fri, 17 Sep 2021 20:09:38 +0000</pubDate>
      <link>https://dev.to/felipearaujos/pt-br-o-poder-do-modulo-task-do-elixir-task-supervisor-2697</link>
      <guid>https://dev.to/felipearaujos/pt-br-o-poder-do-modulo-task-do-elixir-task-supervisor-2697</guid>
      <description>&lt;p&gt;Caso prefira em ingl√™s voc√™ pode encontrar &lt;a href="https://dev.to/felipearaujos/the-power-of-elixir-task-module-into-task-supervisor-5365"&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A  &lt;a href="https://dev.to/felipearaujos/pt-br-o-poder-do-modulo-task-do-elixir-o-inicio-3eh6"&gt;publica√ß√£o anterior&lt;/a&gt; foi uma intro sobre o m√≥dulo task e como ele funciona de uma forma geral.&lt;/p&gt;

&lt;p&gt;Agora vamos tornar as coisas um pouco mais complexas em nossa jornada com &lt;code&gt;Task.Supervisor&lt;/code&gt; e ver mais alguns conceitos do elixir.&lt;/p&gt;

&lt;p&gt;Antes de avan√ßar, vamos dar uma olhada da defini√ß√£o desses conceitos:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hexdocs.pm/elixir/Supervisor.html"&gt;&lt;strong&gt;Supervisor&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Um &lt;em&gt;supervisor&lt;/em&gt; √© um processo que supervisiona outros processos, que n√≥s chamamos de &lt;em&gt;child processes&lt;/em&gt;. Supervisors s√£o usados para construir a estrutura de  processos hier√°rquicos chamados &lt;em&gt;supervision tree&lt;/em&gt;. &lt;em&gt;Supervision trees&lt;/em&gt; provem toler√¢ncia a falha e encapsulam como nossas aplica√ß√£o iniciam ou desligam.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://elixir-lang.org/getting-started/processes.html#:~:text=In%20Elixir%2C%20all%20code%20runs,and%20communicate%20via%20message%20passing.&amp;amp;text=Processes%20in%20Elixir%20are%20extremely,in%20many%20other%20programming%20languages"&gt;&lt;strong&gt;Processes&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;No Elixir, todo c√≥digo √© executado dentro de processos. Os processos s√£o isolados uns dos outros, s√£o executados simultaneamente entre si e se comunicam por meio da passagem de mensagens.&lt;/p&gt;

&lt;p&gt;Os processos do Elixir n√£o devem ser confundidos com os processos do sistema operacional. Os processos no Elixir s√£o extremamente leves em termos de mem√≥ria e CPU (mesmo em compara√ß√£o com os threads usados ‚Äã‚Äãem muitas outras linguagens de programa√ß√£o). Por causa disso, n√£o √© incomum ter dezenas ou mesmo centenas de milhares de processos em execu√ß√£o simultaneamente.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vamos usar &lt;code&gt;Task.Supervisor&lt;/code&gt; para criar processos respons√°veis ‚Äã‚Äãpor gerenciar o &lt;em&gt;child process&lt;/em&gt; relacionado.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#criando-o-playground"&gt;
  &lt;/a&gt;
  Criando o Playground
&lt;/h1&gt;

&lt;p&gt;O primeiro passo √© criar uma nova aplica√ß√£o elixir com √°rvore de supervis√£o, mais informa√ß√µes sobre &lt;code&gt;mix&lt;/code&gt; pode ser encontrada &lt;a href="https://hexdocs.pm/mix/Mix.html"&gt;na documenta√ß√£o oficial&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;mix&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;newsample&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;sup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vamos ver o que foi criado:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  lib
  lib/newsample
  lib/newsample.ex
  lib/newsample/application.ex
test
  test/newsample_test.exs
  test/test_helper.exs
README.md
mix.exs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nesse momento vamos trabalhar somente com os arquivos &lt;code&gt;lib/newsample.ex&lt;/code&gt; e &lt;code&gt;lib/newsample/application.ex&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O pr√≥ximo passo ser√° criar a mesma fun√ß√£o do &lt;a href="https://dev.to/felipearaujos/pt-br-o-poder-do-modulo-task-do-elixir-o-inicio-3eh6"&gt;post anterior&lt;/a&gt; dentro do arquivo &lt;code&gt;lib/newsample.ex&lt;/code&gt; com algumas pequenas mudan√ßas para facilitar os testes.&lt;/p&gt;

&lt;p&gt;Para for√ßar um comportamento explosivo usar um &lt;em&gt;pattern matching&lt;/em&gt; dentro da fun√ß√£o &lt;code&gt;say_hello&lt;/code&gt; com o valor "alpha":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"alpha"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Error to say hello to &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="ss"&gt;:ok&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"alpha"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"beta"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"gama"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;await&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hora de usar o &lt;a href="https://hexdocs.pm/iex/IEx.html"&gt;elixir's interactive shell&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex -S mix
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E ent√£o executar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;
&lt;span class="c1"&gt;#PID&amp;lt;0.145.0&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;
&lt;span class="no"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;beta&lt;/span&gt;
&lt;span class="no"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;gama&lt;/span&gt;

&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;54.276&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt; &lt;span class="c1"&gt;#PID&amp;lt;0.148.0&amp;gt; started from #PID&amp;lt;0.145.0&amp;gt; terminating&lt;/span&gt;
&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newsample&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;anonymous&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="no"&gt;Newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elixir&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invoke_mfa&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elixir&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdlib&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;proc_lib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;erl:&lt;/span&gt;&lt;span class="mi"&gt;226&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:proc_lib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_p_do_apply&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="ss"&gt;Function:&lt;/span&gt; &lt;span class="c1"&gt;#Function&amp;lt;1.13017213/0 in Newsample.process/1&amp;gt;&lt;/span&gt;
    &lt;span class="ss"&gt;Args:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;EXIT&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="c1"&gt;#PID&amp;lt;0.145.0&amp;gt;) shell process exited with reason: an exception was raised:&lt;/span&gt;
    &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newsample&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;anonymous&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="no"&gt;Newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elixir&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invoke_mfa&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elixir&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdlib&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;proc_lib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;erl:&lt;/span&gt;&lt;span class="mi"&gt;226&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:proc_lib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_p_do_apply&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="no"&gt;Interactive&lt;/span&gt; &lt;span class="no"&gt;Elixir&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;press&lt;/span&gt; &lt;span class="no"&gt;Ctrl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="no"&gt;C&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="k"&gt;exit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="no"&gt;ENTER&lt;/span&gt; &lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;
&lt;span class="c1"&gt;#PID&amp;lt;0.151.0&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como podemos ver a exception foi propagada at√© a sess√£o do &lt;code&gt;iex&lt;/code&gt; podemos checar comparando o &lt;code&gt;PID&lt;/code&gt; antes &lt;code&gt;#PID &amp;lt;0.145.0&amp;gt;&lt;/code&gt; e ap√≥s &lt;code&gt;#PID &amp;lt;0.151.0&amp;gt;&lt;/code&gt; executar o c√≥digo.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ent%C3%A3o-como-podemos-evitar-esse-comportamento-explosivo"&gt;
  &lt;/a&gt;
  Ent√£o, como podemos evitar esse comportamento explosivo?
&lt;/h1&gt;

&lt;p&gt;Finalmente chegamos no momento de usar &lt;code&gt;supervised task&lt;/code&gt;, hora de abrir o arquivo &lt;code&gt;lib/newsample/application.ex&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;strategy:&lt;/span&gt; &lt;span class="ss"&gt;:one_for_one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name:&lt;/span&gt; &lt;span class="no"&gt;Newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervisor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="no"&gt;Supervisor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hora de criar o &lt;code&gt;Task.Supervisor&lt;/code&gt; como um  &lt;em&gt;child process&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;  &lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervisor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name:&lt;/span&gt; &lt;span class="no"&gt;Newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;TaskSupervisor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E agora com essa &lt;em&gt;supervised task&lt;/em&gt; a function &lt;code&gt;process&lt;/code&gt; e inicie como &lt;code&gt;async_no_link&lt;/code&gt;. Isso significa que n√£o h√° v√≠nculo entre esse &lt;em&gt;child process&lt;/em&gt; e o &lt;em&gt;parent&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"alpha"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"beta"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"gama"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervisor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async_nolink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;TaskSupervisor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;await&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Se executarmos novamente tudo vai funcionar sem essa propaga√ß√£o de erro.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;
&lt;span class="c1"&gt;#PID&amp;lt;0.158.0&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;
&lt;span class="no"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;beta&lt;/span&gt;
&lt;span class="no"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;gama&lt;/span&gt;

&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;48.200&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt; &lt;span class="c1"&gt;#PID&amp;lt;0.161.0&amp;gt; started from #PID&amp;lt;0.158.0&amp;gt; terminating&lt;/span&gt;
&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newsample&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;say_hello&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elixir&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invoke_mfa&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elixir&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdlib&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;proc_lib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;erl:&lt;/span&gt;&lt;span class="mi"&gt;226&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:proc_lib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_p_do_apply&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="ss"&gt;Function:&lt;/span&gt; &lt;span class="c1"&gt;#Function&amp;lt;1.39266525/0 in Newsample.process/0&amp;gt;&lt;/span&gt;
    &lt;span class="ss"&gt;Args:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;exited&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;await&lt;/span&gt;&lt;span class="p"&gt;(%&lt;/span&gt;&lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;owner:&lt;/span&gt; &lt;span class="c1"&gt;#PID&amp;lt;0.158.0&amp;gt;, pid: #PID&amp;lt;0.161.0&amp;gt;, ref: #Reference&amp;lt;0.1303494724.713818114.156158&amp;gt;}, 5000)&lt;/span&gt;
    &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;EXIT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="ss"&gt;raised:&lt;/span&gt;
        &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newsample&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;say_hello&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elixir&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invoke_mfa&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elixir&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdlib&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;proc_lib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;erl:&lt;/span&gt;&lt;span class="mi"&gt;226&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:proc_lib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_p_do_apply&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elixir&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;639&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;await&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elixir&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;1411&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"-map/2-lists^map/1-0-"&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;
&lt;span class="c1"&gt;#PID&amp;lt;0.158.0&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como podemos ver, o &lt;code&gt;PID&lt;/code&gt; √© o mesmo antes e depois da execu√ß√£o.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Processes&lt;/code&gt; e &lt;code&gt;Supervision trees&lt;/code&gt; s√£o os componentes importantes do elixir para construir sistemas resiliente e tolerante a falhas.&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>braziliandevs</category>
      <category>task</category>
      <category>async</category>
    </item>
  </channel>
</rss>
