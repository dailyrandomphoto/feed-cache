<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top JavaScript Frameworks for 2022</title>
      <author>Devesh Tiwari</author>
      <pubDate>Thu, 18 Nov 2021 09:49:14 +0000</pubDate>
      <link>https://dev.to/deveshtiwari/top-javascript-frameworks-for-2022-35g0</link>
      <guid>https://dev.to/deveshtiwari/top-javascript-frameworks-for-2022-35g0</guid>
      <description>&lt;p&gt;There are more than 200 tools available for JavaScript Development, out of which you should learn to use in 2022. In this article, we will find out the top 10 JavaScript Frameworks for 2022. Here we included 10 javascript frameworks with our extensive research that you can learn and use in Development. But first, we have to get proper knowledge of JavaScript and what is their framework.&lt;/p&gt;

&lt;p&gt;What is JavaScript&lt;/p&gt;

&lt;p&gt;JavaScript is a modern programming language that complies with the ECMAScript spec. JavaScript is high-end, often just-in-time compiled and multi-paradigm. It has dynamic typing, prototype-based object orientation, and first-class functions.&lt;/p&gt;

&lt;p&gt;What is a JavaScript Framework&lt;/p&gt;

&lt;p&gt;Frameworks are different from libraries; They have more control of your app. It directly helps and affects the architecture and many other objects. Frameworks include almost everything that might require to build an application. They also consist of one or more libraries to provide effortless Development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://externlabs.com/blogs/top-25-best-javascript-libraries-and-frameworks-for-2022/"&gt;Top JavaScript Frameworks to know about&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lodash&lt;/p&gt;

&lt;p&gt;It makes JavaScript development more peaceful by taking out the trouble of working with arrays, numbers, objects, strings, etc. Lodash can be used directly inside a browser and also with Node.js. However, working with objects using JavaScript can be pretty challenging, particularly if you have lots of manipulation to do with them. Underscore comes with lots of features that ease your work with objects.&lt;/p&gt;

&lt;p&gt;Lodash offers modular methods that are excellent for:&lt;/p&gt;

&lt;p&gt;Iterating arrays, objects, &amp;amp; strings&lt;br&gt;
Handling &amp;amp; testing values&lt;br&gt;
Building composite functions&lt;/p&gt;

&lt;p&gt;ExpressJS&lt;/p&gt;

&lt;p&gt;Express.js is a back-end web-application framework for NodeJS, published as free to use and open source software supporting the MIT License. It can design and build web applications and APIs. It has also been known as the de facto standard server framework for NodeJS.&lt;/p&gt;

&lt;p&gt;The fundamental author, TJ Holowaychuk, described it as a Sinatra-inspired server implying that it is almost minimal with many features offered as plug-ins. ExpressJS is the back-end component of popular development stacks, including the MEAN, MERN, or MEVN stack, with the help of the MongoDB database and a JavaScript front-end framework or library.&lt;/p&gt;

&lt;p&gt;Webpack&lt;/p&gt;

&lt;p&gt;Webpack is not a framework or library instead a module bundler. Its primary purpose is to bundle JavaScript files for usage in a browser, yet it can also transform, bundle, or package just about any resource or asset.&lt;br&gt;
Webpack is on this list because it can bundle javaScript files to use in a browser.&lt;/p&gt;

&lt;p&gt;React&lt;/p&gt;

&lt;p&gt;React comes as the first choice of most developers in web application development. It has been used by many well-established companies and trendy startups, including Instagram, AirBnB, NYT, Netflix. In addition, react offers much-advanced stuff in Development, making it a better option than other frameworks and libraries for the front-end web development field.&lt;/p&gt;

&lt;p&gt;React empowers developers to build large web applications that can modify data without reloading the web page. The main objective of React is to be fast, scalable, and simple to work with. React works only on UI or UX in the application. This epistolizes to view in the MVC template. we can use it with other JavaScript libraries or frameworks, such as AngularJS in MVC.&lt;/p&gt;

&lt;p&gt;Mochar&lt;/p&gt;

&lt;p&gt;Mocha is a feature-rich JavaScript test framework running on Node.js and in the browser, making asynchronous testing simple and fun. In addition, Mocha tests run serially, allowing for flexible and accurate reporting while mapping uncaught exceptions to the correct test cases. &lt;/p&gt;

&lt;p&gt;Vue JS&lt;/p&gt;

&lt;p&gt;Vue JS is an open-source model–view–ViewModel front-end JavaScript framework for building user interfaces and single-page applications.&lt;br&gt;
Vue JS offers an incrementally versatile architecture that focuses on declarative rendering and component composition where the core library is concentrated on the view layer only. There officially supported libraries and pachages provides support for advanced functions and features even for complex projects.&lt;br&gt;
Vue JS allows for extending HTML with HTML attributes called directives. The directives offer functionality to HTML applications and come as either built-in or user-defined directives.&lt;/p&gt;

&lt;p&gt;Angular&lt;/p&gt;

&lt;p&gt;Google Inc. developed AngularJS is an open-source front-end framework. It's considered a front-end framework for innovative single-page web applications and based on the popular JavaScript used widely in Development and JS in the name.&lt;br&gt;
AngularJS is developed and has support from Google and an open community of AngularJS developers. This helps to keep continuous Development, improvement, and new features.&lt;/p&gt;

&lt;p&gt;NextJS&lt;/p&gt;

&lt;p&gt;Next.js is an open source development framework built on top of Node.js, enabling React-based web applications functions like server side rendering and building static websites. React documentation states Next.js amongst "Recommended Toolchains," suggesting it to developers as a solution for "building a server-rendered website with Node.js." Traditionally React Apps renders on only client side browsers but with next js this can extend to server side as well.&lt;/p&gt;

&lt;p&gt;Svelte&lt;/p&gt;

&lt;p&gt;Svelte is a free to use, open source and front end compiler. Svelte applications doesnt need a framework script. Instead, building a Svelte application creates the basic code to handle the DOM within each component, which may decrease the size of given files and give better client start-up and run-time optimization. Svelte has its compiler for converting app code into client-side JavaScript at build time. Although it is written in TypeScript, unlike the common frameworks, which bear out the bulk of the work in browser, Svelte transfers this work into a compile step when an app is built.&lt;/p&gt;

&lt;p&gt;Gatsby&lt;/p&gt;

&lt;p&gt;Gatsby is an open source SSG or static website generator based on the front-end development framework React and uses Webpack and GraphQL technology. It can be used to build static sites that are progressive web apps, follow the latest web standards, and optimize for speed and security.&lt;/p&gt;

&lt;p&gt;These are the top JavaScript Frameworks to learn and work with, in 2022. There are many frameworks available for JavaScript, but you can find one that will be enough for your specific work.&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Digital marketing</title>
      <author>Digvijay Karadia</author>
      <pubDate>Thu, 18 Nov 2021 09:47:58 +0000</pubDate>
      <link>https://dev.to/digvijay_karadia/digital-marketing-1nc5</link>
      <guid>https://dev.to/digvijay_karadia/digital-marketing-1nc5</guid>
      <description>&lt;p&gt;Digital marketing, also called online marketing, is the elevation of brands to unite with potential clients by making use internet and additional forms of digital messages. This includes not only email, social media, and web-based advertising, but also text and multimedia messages as a marketing channel.&lt;br&gt;
Basically, if a marketing campaign involves digital publication, it's digital marketing.&lt;br&gt;
Everything nowadays is running online, so why not your own shop's website? Ever thought just like dominos, pizza hut, etc, even your shop would have its official website? No right? But with digital marketing even the smallest shops in our neighborhood can have their website available.&lt;br&gt;
Now you must be thinking, why should I have my shop's website? so here are the advantages-:&lt;br&gt;
1) Customers would be able to check out the menu and place orders online, making it simpler than calling again and again for queries.&lt;br&gt;
2) The online website would make people order from it and would make a little less traffic in the shop making it better for both the pandemic and even managing the shop and making orders quicker.&lt;br&gt;
3) Your website would be more profitable than zomato as you can place your driver who would do the delivery, and you wouldn't even have to worry about the ratio you would have to give away.&lt;br&gt;
4) And in the future online business are going to rule the market so why not start from now so you can be well established till the era of the only online market takes it place.&lt;br&gt;
5) Customers can see the offers that you place on the website, which could make your sales a bit more as they would know your offers and would visit your shop for them.&lt;br&gt;
6) Online shopping is the best way to make the most of your business and you can even have a good reputation for your shop only by opening an online source for your shop, which we will help you for making.&lt;/p&gt;

</description>
      <category>digitalmarketing</category>
      <category>marketing</category>
      <category>socialmedia</category>
      <category>digitalbranding</category>
    </item>
    <item>
      <title>Fun Linux commands:-</title>
      <author>Digvijay Karadia</author>
      <pubDate>Thu, 18 Nov 2021 09:39:15 +0000</pubDate>
      <link>https://dev.to/digvijay_karadia/fun-linux-commands--3och</link>
      <guid>https://dev.to/digvijay_karadia/fun-linux-commands--3och</guid>
      <description>&lt;p&gt;The Linux command line can be the home of power users and sysadmins. However, Linux is more than just a lot of hard work. Linux was developed by fun-loving people who created an array of comical commands. Try playing around with these yourself when you want a smile.&lt;/p&gt;

&lt;p&gt;Steam locomotive (SL)&lt;br&gt;
For no reason whatsoever, you can cause a steam locomotive to zip across your terminal using the sl command. Install Steam Locomotive with your package manager. For example, on Fedora:&lt;br&gt;
$ sudo dnf install sl&lt;/p&gt;

&lt;p&gt;locomotive.png&lt;br&gt;
A steam locomotive engine drawing made from symbols and characters&lt;br&gt;
Don Watkins, CC BY-SA 4.0&lt;/p&gt;

&lt;p&gt;Real uses&lt;br&gt;
As far as I know, the sl command is truly just for fun. Do you have an interesting use for sl? Let me know in the comments.&lt;/p&gt;

&lt;p&gt;Fireplace (aafire)&lt;br&gt;
Warm your heart and your terminal with aafire command, which causes a fireplace animation to play. You can install aafire with your package manager. On Debian, Mint, Elementary, and similar:&lt;/p&gt;

&lt;p&gt;$ sudo apt install libaa-bin&lt;/p&gt;

&lt;p&gt;On Fedora, CentOS, and others:&lt;/p&gt;

&lt;p&gt;$ sudo dnf install aalib&lt;/p&gt;

&lt;p&gt;fireside.png&lt;br&gt;
A black and white image of a fire made from text symbols and characters&lt;br&gt;
Don Watkins, CC BY-SA 4.0&lt;/p&gt;

&lt;p&gt;Real uses&lt;br&gt;
This image is a subtle way to communicate to your team or boss that everything's about to go up in smoke.&lt;/p&gt;

&lt;p&gt;Yes&lt;br&gt;
You can use the yes command to print out a string of text until it is forcibly stopped with Ctrl+C. For example, I am a Buffalo Bills fan, so I chose to print out an endless series of Buffalo Bills with the yes command:&lt;/p&gt;

&lt;p&gt;$ yes Buffalo Bills&lt;/p&gt;

&lt;p&gt;bills.png&lt;br&gt;
A screenshot showing repeated lines of Buffalo Bills (left edge slightly cut off)&lt;br&gt;
Don Watkins, CC BY-SA 4.0&lt;/p&gt;

&lt;p&gt;Real uses&lt;br&gt;
You can use this command to pipe confirmation to scripts so that when a script pauses to ask for confirmation, it automatically receives yes. For example, imagine there's a script you run that often stops to ask you for confirmation:&lt;/p&gt;

&lt;p&gt;$ foo&lt;br&gt;
Are you sure you want to do this? Y/n  Y&lt;br&gt;
Are you sure? y/N  Y&lt;br&gt;
But are you? y/N&lt;br&gt;
You can auto-accept such messages bypassing yes to the command:&lt;/p&gt;

&lt;p&gt;$ yes | foo&lt;/p&gt;

&lt;p&gt;Alternatively, you can auto-deny messages using yes as well:&lt;/p&gt;

&lt;p&gt;$ yes no | foo&lt;/p&gt;

&lt;p&gt;Fortune&lt;br&gt;
You can have your fortune told on the command line by installing Fortune. Fortune prints a random and possibly meaningful message.&lt;/p&gt;

&lt;p&gt;Install Fortune with your package manager:&lt;/p&gt;

&lt;p&gt;$ sudo apt install fortune&lt;/p&gt;

&lt;p&gt;On Fedora:&lt;/p&gt;

&lt;p&gt;$ sudo dnf install fortune-mod&lt;/p&gt;

&lt;p&gt;The fortune command has many datasets it can draw from. For instance, you can get famous quotes from literature or the science-fiction TV show Firefly, or choose from jokes, tips about Linux, and much more. Search your repository for "fortune" to see what options your distribution provides.&lt;/p&gt;

&lt;p&gt;$ fortune&lt;br&gt;
Johnson's law:&lt;br&gt;
  Systems resemble the organizations that create them.&lt;br&gt;
Real uses&lt;br&gt;
You can use Fortune to generate a pseudo-random number. There's not enough entropy to make it cryptographically secure, but when you need an unexpected number, you can count characters or words:&lt;/p&gt;

&lt;p&gt;$ fortune | wc --chars&lt;br&gt;
38&lt;br&gt;
$ fortune | wc --words&lt;br&gt;
8&lt;br&gt;
$ fortune | wc --chars&lt;br&gt;
169&lt;br&gt;
Lolcat&lt;br&gt;
Lolcat is a program that concatenates files, or standard input, to standard output (like the generic cat) and adds rainbow coloring to it. You can pipe the output of other commands to lolcat, which provides a rainbow hue to the result.&lt;/p&gt;

&lt;p&gt;Here's the result of lolcat -h for its help output:&lt;/p&gt;

&lt;p&gt;lolcat_rainbow.png&lt;br&gt;
onscreen text colored in a rainbow gradient&lt;br&gt;
Don Watkins, CC BY-SA 4.0&lt;/p&gt;

&lt;p&gt;Figlet and banner&lt;br&gt;
The figlet and banner commands let you create simple ASCII text banners. Here's a text banner for a CentOS system:&lt;/p&gt;

&lt;p&gt;$ figlet centos.com&lt;/p&gt;

&lt;p&gt;figlet_centos.png&lt;br&gt;
Text banner reading "centos.com" composed from symbols and characters&lt;br&gt;
Don Watkins, CC BY-SA 4.0&lt;/p&gt;

&lt;p&gt;Pipe figlet to lolcat for a colorful banner:&lt;/p&gt;

&lt;p&gt;$ figlet centos.com | lolcat&lt;/p&gt;

&lt;p&gt;lolcat_figlet_centos.png&lt;br&gt;
A text banner reading "centos.com" made rainbow colored with lolcat&lt;br&gt;
Don Watkins, CC BY-SA 4.0&lt;/p&gt;

&lt;p&gt;$ banner Hello World&lt;/p&gt;

&lt;p&gt;hello_world.png&lt;br&gt;
A banner reading "Hello World" spelled out with pound symbols&lt;br&gt;
Don Watkins, CC BY-SA 4.0&lt;/p&gt;

&lt;p&gt;Espeak&lt;br&gt;
You can add speech capabilities to your command line funnies by installing espeak.&lt;/p&gt;

&lt;p&gt;Once espeak is installed, turn up the volume on your computer and have some fun listening to your machine talk to you. Espeak is a software speech synthesizer, and there are a few different voice libraries available.&lt;/p&gt;

&lt;p&gt;$ espeak "Linux is the best operating system."&lt;/p&gt;

</description>
      <category>linux</category>
      <category>linuxcommands</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to make a password generator with python.</title>
      <author>Vaarun Sinha</author>
      <pubDate>Thu, 18 Nov 2021 09:32:09 +0000</pubDate>
      <link>https://dev.to/vaarun_sinha/how-to-make-a-password-generator-with-python-2b1a</link>
      <guid>https://dev.to/vaarun_sinha/how-to-make-a-password-generator-with-python-2b1a</guid>
      <description>&lt;p&gt;In this tutorial we will make a password generator with the secrets module. Why not random module? see the first post in this series to understand.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So Let's Begin!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Generate a random password, according to the user input.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#sub-problems"&gt;
  &lt;/a&gt;
  Sub problems
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Get user input&lt;/li&gt;
&lt;li&gt;Create lists for letters etc...&lt;/li&gt;
&lt;li&gt;Loop over lists and make a password.&lt;/li&gt;
&lt;li&gt;Print the password.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lets-write-some-code"&gt;
  &lt;/a&gt;
  Let's write some code!
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Get user input
Here we will use try/except blocks so that when user types a string we do not get an error.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will get inputs for number of special characters, small letters, big letters and numbers required for generating the password.&lt;/p&gt;

&lt;p&gt;Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;num_of_numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"How many numbers should your password have: "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;num_of_numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"How many numbers should your password have: "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;num_of_special&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"How many special characters should your password have: "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;num_of_special&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"How many special characters should your password have: "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;num_of_small_letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"How many small letters should your password have: "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;num_of_small_letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"How many small letters should your password have: "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;num_of_cap_letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"How many big letters should your password have:  "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;num_of_cap_letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"How many big letters should your password have:  "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;### Create Lists for numbers to choose from. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We could hardcode this like:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;number_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;But this will take us way more time!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;So let's use the string module!&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="n"&gt;number_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we could just have a string right? then why make it list you will find this out later on in this blog!&lt;/p&gt;

&lt;p&gt;Let's do this for everything.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;

&lt;span class="n"&gt;smallLetters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_lowercase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;bigLetters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_uppercase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;specialCharacters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;punctuation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So now we can loop over these lists, and make a list!&lt;/p&gt;

&lt;p&gt;First let's declare empty variables!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;spPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

&lt;span class="n"&gt;numPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

&lt;span class="n"&gt;smallPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

&lt;span class="n"&gt;bigPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's loop over the lists.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_of_numbers&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;randNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;numPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randNum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_of_special&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;randSp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;specialCharacters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;spPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;randSp&lt;/span&gt;


    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_of_small_letters&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;randSm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smallLetters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;smallPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smallPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;randSm&lt;/span&gt;


    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_of_cap_letters&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;randBig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bigLetters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bigPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bigPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;randBig&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's add the parts to make a password.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;spPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;smallPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;bigPart&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's refactor the code, by putting this into a function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;num_of_numbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_of_special&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_of_small_letters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_of_cap_letters&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;smallLetters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_lowercase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;bigLetters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_uppercase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;specialCharacters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;punctuation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;spPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

    &lt;span class="n"&gt;numPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

    &lt;span class="n"&gt;smallPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

    &lt;span class="n"&gt;bigPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

    &lt;span class="c1"&gt;# ANCHOR: Generating Password
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_of_numbers&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;randNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;numPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randNum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_of_special&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;randSp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;specialCharacters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;spPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;randSp&lt;/span&gt;


    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_of_small_letters&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;randSm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smallLetters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;smallPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smallPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;randSm&lt;/span&gt;


    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_of_cap_letters&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;randBig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bigLetters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bigPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bigPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;randBig&lt;/span&gt;

    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;spPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;smallPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;bigPart&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if we print/generate the password every time ,there is a predictable format, first numbers then special etc..&lt;/p&gt;

&lt;p&gt;So how we can solve this?&lt;/p&gt;

&lt;p&gt;We will solve this in the next short blog coming very quickly after this blog, so stay tuned!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Happy Coding!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>project</category>
      <category>security</category>
    </item>
    <item>
      <title>Feedback would be appreciated</title>
      <author>Liftoff</author>
      <pubDate>Thu, 18 Nov 2021 09:28:32 +0000</pubDate>
      <link>https://dev.to/liftoffka/feedback-would-be-appreciated-388g</link>
      <guid>https://dev.to/liftoffka/feedback-would-be-appreciated-388g</guid>
      <description>&lt;p&gt;Hi everyone&lt;br&gt;
I would appreciate some feedback on my portfolio that I made&lt;br&gt;
&lt;a href="https://portfolio.liftoff-ka.repl.co/"&gt;https://portfolio.liftoff-ka.repl.co/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks a lot in advance 😃&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>career</category>
    </item>
    <item>
      <title>Leverage Postman to Consume APIs Using OAuth2</title>
      <author>Anthony Viard 🥑</author>
      <pubDate>Thu, 18 Nov 2021 09:22:48 +0000</pubDate>
      <link>https://dev.to/entando/leverage-postman-to-consume-apis-using-oauth2-707</link>
      <guid>https://dev.to/entando/leverage-postman-to-consume-apis-using-oauth2-707</guid>
      <description>&lt;p&gt;&lt;em&gt;My Fellow Developers -&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you haven’t heard about Postman yet, get ready to become close friends with this tool!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;No matter what authentication mode you are using for APIs,  Postman is a well known, functional and amazing tool for your developing needs.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Personally, I’ve used it a lot for testing &amp;amp; executing requests on personal and public APIs.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It’s my go-to tool to install immediately when I refresh an environment or even when upgrading to a new computer. After several years of implementation, it has easily become one of my favorite developer tools.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you’re new to this developer tool, I admit, at first glance it can be discouraging when starting out with your configurations. Especially if you’re using the OAuth2 protocol (which is extremely popular) because it does change the way we authenticate users and APIs connections.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Enter your fearless developer, Anthony, with my newest tutorial to walk you through consuming APIs using OAuth2!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You’ll quickly learn how to create a collection, define the variables, and configure your Postman tool to retrieve tokens before adding request definitions.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Psst - this especially works well with your JHipster and Entando generated applications.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Enjoy!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3yfHIVWddqk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
    </item>
    <item>
      <title>IPC144 Course Curriculum Renewal  </title>
      <author>Minsu Kim</author>
      <pubDate>Thu, 18 Nov 2021 09:18:55 +0000</pubDate>
      <link>https://dev.to/mkim219/ipc144-course-curriculum-renewal-5d0p</link>
      <guid>https://dev.to/mkim219/ipc144-course-curriculum-renewal-5d0p</guid>
      <description>&lt;p&gt;Our weekly tasks in this week contribute external and internal project. The one of the internal project in Seneca is &lt;a href="https://github.com/Seneca-ICTOER/IPC144"&gt;IPC144&lt;/a&gt; course curriculum renewal. The project is renewal &lt;a href="https://ict.senecacollege.ca/~ipc144/"&gt;original course note&lt;/a&gt; into &lt;a href="https://cghub.ca/"&gt;new course note&lt;/a&gt; by using &lt;a href="https://docusaurus.io/"&gt;Docusaurus&lt;/a&gt;. The design of current original course note is not user friendly and outdated. Therefore, the this open source project replaces old course note to new course note.  &lt;/p&gt;

&lt;p&gt;As I talked about Docusarus on previous week, the Docusaurus is a project for easily deploying, building, and maintaining the websites. The most part of content is implemented but the website needs contribution for reviewing and improving correctness. The &lt;a href="https://github.com/Seneca-ICTOER/IPC144/issues/67"&gt;issue&lt;/a&gt; indicates that the &lt;a href="https://cghub.ca/Resources-Appendices/ebcdic-collating-sequence"&gt;page&lt;/a&gt; uses EBCDIC Collating Sequence table as an image which is not accessible. The task should convert into text and Markdown table. &lt;/p&gt;

&lt;p&gt;The conversion itself is very simple. However, I should have to convert with extra carefulness because the task has to be manually converted which there is change that I mess up the table. The table is accessible than the image table after I converted into table.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--STFWoTGk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zd00hfhgbn5v952zd97g.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--STFWoTGk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zd00hfhgbn5v952zd97g.PNG" alt="After-Fix" width="880" height="427"&gt;&lt;/a&gt; I have created &lt;a href="https://github.com/Seneca-ICTOER/IPC144/pull/77"&gt;PR&lt;/a&gt; and received reviews from other student. I will talk about more peer review next post.  &lt;/p&gt;

</description>
      <category>opensource</category>
      <category>docusarus</category>
    </item>
    <item>
      <title>New Tips In Laravel</title>
      <author>Marcos Gad</author>
      <pubDate>Thu, 18 Nov 2021 09:14:46 +0000</pubDate>
      <link>https://dev.to/marcosgad/new-tips-in-laravel-1a9d</link>
      <guid>https://dev.to/marcosgad/new-tips-in-laravel-1a9d</guid>
      <description>&lt;p&gt;mask() - before() - after()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Support\Str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'marcosgaad@gmail.com'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;Str&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// marc****************&lt;/span&gt;
&lt;span class="nc"&gt;Str&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// marc***aad@gmail.com&lt;/span&gt;
&lt;span class="nc"&gt;Str&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// marcosgaad@gmail****&lt;/span&gt;
&lt;span class="nc"&gt;Str&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// marcosgaad@gmail***m&lt;/span&gt;

&lt;span class="nv"&gt;$before&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Str&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'@'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// marcosgaad&lt;/span&gt;
&lt;span class="nc"&gt;Str&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$before&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'@'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nc"&gt;Str&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;after&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'@'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// **********@gmail.com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you enjoy the code.&lt;/p&gt;

</description>
      <category>php</category>
      <category>laravel</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>你的資料庫支援時間資料型別嗎？</title>
      <author>Leon</author>
      <pubDate>Thu, 18 Nov 2021 09:10:24 +0000</pubDate>
      <link>https://dev.to/leon0824/ni-de-zi-liao-ku-zhi-yuan-shi-jian-zi-liao-xing-bie-ma--3c19</link>
      <guid>https://dev.to/leon0824/ni-de-zi-liao-ku-zhi-yuan-shi-jian-zi-liao-xing-bie-ma--3c19</guid>
      <description>&lt;p&gt;「資料庫支援時間資料型別嗎？」這好像不應該是個問題，但是最近在普查資料庫系統時，才意識到這的確是該被考慮的問題之一，特別是在 NoSQL 系的資料庫，受限於 JSON 原生沒有日期與時間型態的先天限制，各家 NoSQL 資料庫系統對時間與日期的處理方式也因此花招百出。&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E7%82%BA%E4%BB%80%E9%BA%BC%E6%97%A5%E6%9C%9F%E6%99%82%E9%96%93%E8%A6%81%E7%94%A8%E7%89%B9%E6%9C%89%E7%9A%84%E8%B3%87%E6%96%99%E5%9E%8B%E6%85%8B"&gt;
  &lt;/a&gt;
  為什麼日期、時間要用特有的資料型態？
&lt;/h2&gt;

&lt;p&gt;資料庫做為儲存巨量資料的系統，提供了一些通用或特有的查詢語言讓我們與其溝通，像是 SQL 語言就是通用於 FireBird、PostreSQL、MariaDB、SQLite、MySQL 的查詢語言，儘管他們之間有著若干的語法差異，但對一般查詢工作上是沒有太大影響的，資料庫系統在做出查詢之後會回覆查詢結果。&lt;/p&gt;

&lt;p&gt;對於一個有支援日期與時間型態的資料庫系統，我們可以直接在 SQL 寫出針對時間的查詢條件，例如一個存有數十萬筆交易紀錄的表中調出 3/2 號下午兩點到三點的交易，這樣的時間區間會成為資料庫系統的查詢條件之一，也因此它只會回覆符合查詢區間內的那些交易紀錄，反之若是資料庫系統不支援日期、時間型態，也就是說像這樣的時間紀錄 &lt;code&gt;2021-03-02T14:13:14.567Z&lt;/code&gt; 資料庫系統看不懂，只能當它是一組無意義的字串，那麼前面的例子就只能改成讓資料庫系統回覆全部數十萬筆的資料，再用自己寫的程式去把這巨量資料做二次加工篩選挑出我們要的那一小時交易紀錄，這樣的機制顯然是不現實的，因此資料庫系統在設計上必然得支援時間、日期型態，或者是必須提供其它的方式讓我們可以針對時間做出查詢。&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E9%82%A3%E4%BA%9B%E4%B8%8D%E6%94%AF%E6%8F%B4%E6%99%82%E9%96%93%E8%B3%87%E6%96%99%E5%9E%8B%E6%85%8B%E7%9A%84%E8%B3%87%E6%96%99%E5%BA%AB%E7%B3%BB%E7%B5%B1"&gt;
  &lt;/a&gt;
  那些不支援時間資料型態的資料庫系統
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#sqlite"&gt;
  &lt;/a&gt;
  SQLite
&lt;/h3&gt;

&lt;p&gt;SQL 系的資料庫系統大多數都支援日期與時間資料型態，唯一的例外是 SQLite，SQLite 並不在欄位層級支援時間、日期資料型態，時間或日期在表格內是以字串型態被儲存，SQLite 是以時間或日期相關函式的方式讓我們對查詢下出時間條件，例如下面查詢自 2014 某刻至今的秒數：&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'%s'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'now'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'%s'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'2004-01-01 02:34:56'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deta-base"&gt;
  &lt;/a&gt;
  Deta Base
&lt;/h3&gt;

&lt;p&gt;Deta Base 是個雲端的 NoSQL 服務，之前曾經在〈&lt;a href="https://editor.leonh.space/2021/short-comparison-to-serverless-vendors/"&gt;各家 Serverless 短評&lt;/a&gt;〉介紹過 Deta 的另一個 serverless 服務 Deta Micros。&lt;/p&gt;

&lt;p&gt;Deta Base 有提供 Python、JavaScript 的套件以及 REST API 的方式做查詢，但不論是何種方式都必須把程式語言的時間或日期物件轉換成字串包進 JSON 內，才能打進 Deta Base，Deta Base 本身也不認得時間，不像 SQLite 還有提供函式可以做處理，而 Deta 建議的處理方式是把時間轉換成 Unix 時間，以數字儲存，也因此可以做出加減運算，相當 geek：&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ke5HMWwI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l895fw0ybp45lbap9hsp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ke5HMWwI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l895fw0ybp45lbap9hsp.png" alt="Deta do not have native date / time types." width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一段典型的 Unix 時間會是這樣：&lt;code&gt;1616670631&lt;/code&gt;，而因為要做運算 Deta Base 要我們用整數型態去存 Unix 時間，但 Deta Base 並未告知他們的整數是 int32 或 int64，有可能有 &lt;a href="https://zh.wikipedia.org/wiki/2038%E5%B9%B4%E9%97%AE%E9%A2%98"&gt;2038 年問題&lt;/a&gt;的風險。&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backendless-database"&gt;
  &lt;/a&gt;
  Backendless Database
&lt;/h3&gt;

&lt;p&gt;Backendless 顧名思義是提供一系列 serverless 後端的服務，有點像 Firebase，近來 Backendless 也開始擴展服務項目往 codeless 應用開發領域發展，Backendless Database 則是它們家的資料庫服務。&lt;/p&gt;

&lt;p&gt;Backendless 提供的套件有 Flutter、Swift、Android、Java、.NET、JavaScript，也有提供 REST API 接口，Backendless Database 具有 NoSQL 的特性 schema-less，也就是說不需要先行定義表格（在 NoSQL 的世界通常稱為 collection）內的欄位與型態，每次丟到同一個表的欄位也可以長不一樣，在 Backendless Database 裡，最終表格的欄位會是所有紀錄的欄位的聯集，例如第一次丟的 JSON 是長這樣：&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Saving Single Object"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"link_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://backendless.com/docs/rest/data_single_object_create.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"score"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"timestamp2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"05/20/2016 03:58:23"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;而第二次你對同一個表格丟的 JSON 卻長這樣：&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Client-side Setup"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"link_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://backendless.com/docs/js/setup.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rank"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"timestamp2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"05/20/2016 03:58:23"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;那麼這張表聯集完的欄位是長這樣：&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Client-side Setup"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"link_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://backendless.com/docs/js/setup.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rank"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"score"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"timestamp2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"05/20/2016 03:58:23"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;當然實際上不太可能出現上面 &lt;code&gt;score&lt;/code&gt;、&lt;code&gt;rank&lt;/code&gt; 傻傻分不清的離譜狀況。&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/7BrjWa6apLU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Schema-less 特性帶來的是省去 &lt;code&gt;ALTER TABLE&lt;/code&gt; 的操作，不再需要 ORM 的 migration 機制。&lt;/p&gt;

&lt;p&gt;但如同上面的例子 REST API 接受的內容格式是 JSON，JSON 的原始定義內是沒有日期與時間的資料型態的，必須轉為字串，因此 Backendless 那端收到的也視為字串處理。&lt;/p&gt;

&lt;p&gt;想要定義正確的時間型態，得在 Backendless 的 schema editor 先定義好欄位的型態：&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cThG8KYr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7up0c815ag54e7m6ve6u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cThG8KYr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7up0c815ag54e7m6ve6u.png" alt="Backednless schema editor" width="598" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;雖然前面說過 NoSQL 的 schema-less 特性，但其實還是可以定義欄位型態的，只是這動作變成非必要的，但在 Backendless Database 我們為了正確的指定欄位的時間型態，卻又必須「回歸正道」的設定欄位型態，這樣做等於放棄了 schema-less 的特性，並且 Backendless 也沒有提供透過 API 定義欄位型態的方式，最終這在 Backendless 變成一種比 migration 還不方便的機制，爾等必須手動去做每一次相當於 &lt;code&gt;ALTER TABLE&lt;/code&gt; 的操作。&lt;/p&gt;

&lt;p&gt;但即便這樣一波帥氣的手動操作完了，丟上去的 DATETIME 資料，再透過 REST API 傳回來，又變成 Unix 時間…：&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"score"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rank"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"created"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1616721085418&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"link_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://backendless.com/docs/rest/data_single_object_create.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ownerId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Saving Single Object"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"objectId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2D0BBC30-5D01-4015-8CA3-2B4CC3BF36A1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"timestamp"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1463716703000&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;注意到不論是我自己加的欄位 &lt;code&gt;timestamp&lt;/code&gt; 或 Backendless 預帶的 &lt;code&gt;created&lt;/code&gt; 都是整數型態的 Unix 時間。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xzJ3BBKk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxleot5gux5bfexr9qb2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xzJ3BBKk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxleot5gux5bfexr9qb2.jpg" alt="意不意外？開不開心？" width="600" height="337"&gt;&lt;/a&gt;&lt;/p&gt;
來源：《家有囍事》



&lt;p&gt;追根究底還是回到 JSON 的老問題，JSON 就是沒有時間日期的資料型態，因此只能使出各種奇技淫巧來應付日期時間的需求，特別是在廣泛使用 JSON 格式的 REST API 這樣的問題就更加突顯，如果是不用 REST API，而是用 Backendless 提供的語言套件，那或許可以直接原生支援該語言的時間物件轉換成 Backendless 的時間型態，但這也意味著語言的選擇受限，或者走 REST API 就必須多一層 workaround 的功夫。&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E9%82%A3%E4%BA%9B%E7%B9%9E%E9%81%8E-json-%E4%B8%8D%E6%94%AF%E6%8F%B4%E6%99%82%E9%96%93%E5%9E%8B%E6%85%8B%E5%95%8F%E9%A1%8C%E7%9A%84%E8%B3%87%E6%96%99%E5%BA%AB%E7%B3%BB%E7%B5%B1"&gt;
  &lt;/a&gt;
  那些繞過 JSON 不支援時間型態問題的資料庫系統
&lt;/h2&gt;

&lt;p&gt;JSON 不支援時間、日期資料型態顯然是個問題，那些 NoSQL 系統也注意到了，因此有了這幾種典型解法：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不用 JSON，改用 BSON。BSON 是 binary JSON 的意思，除了變成二進位容量更小傳輸更快外，BSON 也支援日期與時間的資料型態，採用 BSON 最有代表性的就是 NoSQL 的老大 MongoDB，並且 MongoDB 的 API 套件也封裝的很優雅，程式語言原生的日期型態會被 MongoDB 套件自動地轉換成 BSON 的日期型態，這一切都是隱式發生的。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;擴充 JSON，讓 JSON 支援時間型態，RethinkDB 與 Fauna 就是這麼做的，他們的語言套件也類似 MongoDB，能幫我們自動的轉換日期、時間型態。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 Unix 時間，其他都不管了，如同前面提到的，這也算是一招。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;像 SQLite 那樣用函式處理日期字串，除了 SQLite 外，還有 Couchbase 也是用這招。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那麼上面這四招，哪招用起來最舒服呢？個人是愛前兩種，他們都提供封裝優雅的語言套件，自動的幫我們做轉換，讓我們不用煩惱底層的資料型態問題。&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E5%90%8C%E5%A0%B4%E5%8A%A0%E6%98%A0-graphsql"&gt;
  &lt;/a&gt;
  同場加映 GraphSQL
&lt;/h2&gt;

&lt;p&gt;前面都在講 JSON 的壞話，那 GraphQL 又是如何對待時間日期的呢？&lt;/p&gt;

&lt;p&gt;GraphQL 原生的資料型態也沒有日期時間，它比較像是上面擴充 JSON 的做法，GraphQL 是可以自行定義新的資料型態的，或者是一樣用整數存 Unix 時間，看起來和 JSON 差不多。&lt;/p&gt;

&lt;p&gt;那麼為何 JSON 和 GraphQL 都不把時間日期劃入原生型態呢？我也很想知道，知道的請告訴我。&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99"&gt;
  &lt;/a&gt;
  參考資料
&lt;/h2&gt;

&lt;p&gt;內文有帶到 shema-less 的特性，在此附上兩篇 MongoDB schema 設計的好文共賞：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;〈&lt;a href="https://blog.toright.com/posts/4483/mongodb-schema-%E8%A8%AD%E8%A8%88%E6%8C%87%E5%8D%97.html"&gt;MongoDB Schema 設計指南&lt;/a&gt;〉&lt;/li&gt;
&lt;li&gt;〈&lt;a href="https://blog.toright.com/posts/4537/mongodb-schema-%E8%A8%AD%E8%A8%88%E6%8C%87%E5%8D%97-part-ii-%E5%8F%8D%E6%AD%A3%E8%A6%8F%E5%8C%96%E7%9A%84%E5%A8%81%E5%8A%9B.html"&gt;MongoDB Schema 設計指南 (Part Ⅱ) - 反正規化的威力&lt;/a&gt;〉&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>database</category>
      <category>json</category>
      <category>nosql</category>
    </item>
    <item>
      <title>🆕 New Pyluos shell in the Luos Python lib</title>
      <author>Emanuel Allely</author>
      <pubDate>Thu, 18 Nov 2021 09:08:55 +0000</pubDate>
      <link>https://dev.to/luos/new-pyluos-shell-in-the-luos-python-lib-3ak4</link>
      <guid>https://dev.to/luos/new-pyluos-shell-in-the-luos-python-lib-3ak4</guid>
      <description>&lt;p&gt;🆕 Luos feature: the Pyluos &lt;strong&gt;shell&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;"pyluos-shell" is a new command line coming with the &lt;strong&gt;open-source&lt;/strong&gt; Luos &lt;strong&gt;Python&lt;/strong&gt; lib Pyluos allowing you to directly find and connect to a gate on your &lt;strong&gt;embedded&lt;/strong&gt; system and open an Ipython cession. This command line is extremely useful to make quick tests.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.luos.io/docs/get-started/get-started2/"&gt;https://docs.luos.io/docs/get-started/get-started2/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>embedded</category>
      <category>python</category>
      <category>opensource</category>
      <category>luos</category>
    </item>
    <item>
      <title>Sohbet Siteleri</title>
      <author>sohbetcicomtr</author>
      <pubDate>Thu, 18 Nov 2021 09:02:50 +0000</pubDate>
      <link>https://dev.to/sohbetcicomtr/sohbet-siteleri-2dbp</link>
      <guid>https://dev.to/sohbetcicomtr/sohbet-siteleri-2dbp</guid>
      <description>&lt;p&gt;&lt;a href="https://sohbet.page"&gt;https://sohbet.page&lt;/a&gt; Sohbet siteleri mobil chat avantajlarını web chat sohbet odaları fırsatları ile sohbet ederek chat yaparak yeni kişilerle tanışmak ve arkadaş bulmak için hemen değerlendirmeye başlayın.&lt;/p&gt;

&lt;p&gt;🍏Ücretsiz ve üyelik gerektirmeyen sohbet ve chat fırsatlarından hemen yararlan, yeni kişilerle tanışmak, arkadaş bulmak, eğlenceli zaman geçirmek sohbet siteleri sayesinde hiç bu kadar kolay olmamıştır.&lt;/p&gt;

</description>
      <category>sohbet</category>
      <category>chat</category>
      <category>sohbetodalari</category>
      <category>webchat</category>
    </item>
    <item>
      <title>Google Trends Analysis</title>
      <author>Padmashree Jha</author>
      <pubDate>Thu, 18 Nov 2021 08:30:40 +0000</pubDate>
      <link>https://dev.to/codewithpom/google-trends-analysis-576f</link>
      <guid>https://dev.to/codewithpom/google-trends-analysis-576f</guid>
      <description>&lt;p&gt;So I am back with my new blog and in this blog we will see trends on Google using the &lt;strong&gt;pytrends&lt;/strong&gt; Python Module.&lt;/p&gt;

&lt;p&gt;Below is a gist that shows the graph for a single term&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;and if you want to test it online you can try it on gitpod as in my previous blog&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/codewithpom" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SOsaYB-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--RF4y1wvF--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/713553/4ee70c90-6975-4374-a588-0676142a1402.png" alt="codewithpom"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/codewithpom/gitpod-vscode-is-browser-8d4" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Gitpod VScode is browser&lt;/h2&gt;
      &lt;h3&gt;Padmashree Jha ・ Nov 2 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vscode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;or if you do not have time just go to the below link and see the results&lt;/p&gt;

&lt;p&gt;&lt;a href="https://datalore.jetbrains.com/view/notebook/ReZJNUQPvcsJfiSQJmme48"&gt;Datalore&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and below is other implementation but with comparison of two things&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;and on datalore below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://datalore.jetbrains.com/view/notebook/vggEKnVNb9XoDQhtcsTdhr"&gt;Datalore&lt;/a&gt;&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>python</category>
      <category>jupyter</category>
      <category>analytics</category>
    </item>
  </channel>
</rss>
