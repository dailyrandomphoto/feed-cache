<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to install python in window and print “Hello World”</title>
      <author>Shreyansh Singh</author>
      <pubDate>Fri, 14 Jan 2022 10:25:13 +0000</pubDate>
      <link>https://dev.to/shreyansh0322/how-to-install-python-in-window-and-print-hello-world-488d</link>
      <guid>https://dev.to/shreyansh0322/how-to-install-python-in-window-and-print-hello-world-488d</guid>
      <description>&lt;p&gt;&lt;strong&gt;How to install python in window and print “Hello World”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, we'll download and install Python as well as an IDE called PyCharm. First of all, let's head to Python's official website and download Python:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Go to this link&lt;/strong&gt; -&lt;a href="https://www.python.org/downloads/"&gt; Python page &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;From the above link, download the latest version of Python.&lt;/li&gt;
&lt;li&gt;After visiting this link, click on the "Download Python" button.&lt;/li&gt;
&lt;li&gt;Your download will start as soon as you click the button.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--noSnQe_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5kkupxqxbdmqppdt0f5u.png" alt="Python.org page " width="880" height="444"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After download is complete, open the downloaded file &lt;br&gt;
1   It will ask that you want to make changes to your pc. &lt;br&gt;
        Then click “Yes”.&lt;/p&gt;

&lt;p&gt;2   Then follow the following steps&lt;br&gt;
a)  Check on box to add Path and select customized as shown&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J20m5OEO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjrly2v7ipkrkgrtl1iq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J20m5OEO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjrly2v7ipkrkgrtl1iq.png" alt="First page " width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;b)  See all boxes are checked and click on “Next”&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OtWs-bKD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/inclhfzht5tzhrd289yq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OtWs-bKD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/inclhfzht5tzhrd289yq.png" alt="Second Page " width="880" height="471"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;c)  Check the boxes and browse the location where you want to save the python or leave the default path as it is .&lt;br&gt;
Then click on install and wait for completion.&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wBjlI8E3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stf6j00jhbtpg87zg96a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wBjlI8E3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stf6j00jhbtpg87zg96a.png" alt="Third Page" width="880" height="471"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;d)  After completion you will be shown this window &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1dsvdufO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kx4jen3kuare54o800zq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1dsvdufO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kx4jen3kuare54o800zq.png" alt="Last page of completion" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;e)  Open Command Prompt and wrte python then “Enter”&lt;br&gt;
You will be shown latest version of python&lt;br&gt;
Then write exit() and click “Enter”.&lt;br&gt;
Also write pip and check no error comes .&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l7D7HxJ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lflzor3xowbqjywnz4r4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l7D7HxJ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lflzor3xowbqjywnz4r4.png" alt="Command Prompt" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: If you are getting this or similar error - "The term 'pip' is not recognized as the name of a cmdlet, function, or operable program," watch this video here - &lt;a href="https://youtu.be/xdj0mGmuNjc."&gt;help-url&lt;/a&gt;&lt;br&gt;
Then Install Pycharm like any other software and do not make any changes while installing it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nice!&lt;/strong&gt; You can run the installer and install Python. Now, let's &lt;strong&gt;download the Pycharm IDE&lt;/strong&gt;. But what is Pycharm, and why do we need it?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pycharm&lt;/strong&gt; is one of the best Integrated Development Environments (IDEs) for Python Language developed by the Czech company JetBrains. To download Pycharm, follow the steps below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Go to this link - &lt;a href="https://www.jetbrains.com/pycharm/download/#section=windows"&gt;PyCharm link&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;  After visiting the above link, download the community version of Pycharm.&lt;/li&gt;
&lt;li&gt;  Click on the community button to download it.&lt;/li&gt;
&lt;li&gt;  Your download will start.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fjj4034U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1x8gfte28209wrhjqj0f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fjj4034U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1x8gfte28209wrhjqj0f.png" alt="PyCharm official page" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now , Open the downloaded PyCharm file and it will ask for permission , press "Yes"&lt;br&gt;
Now, the following page will open &lt;br&gt;
Click to “Next”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AZbAUqG8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tw4ajj9s18vxpd4kv6s5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AZbAUqG8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tw4ajj9s18vxpd4kv6s5.png" alt="First page" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on “Next”, ”Next” as follows :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1acOijDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmyc9ubw8zt737hb960p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1acOijDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmyc9ubw8zt737hb960p.png" alt="Second page" width="880" height="473"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bbbxedvk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ttq4mtfq2v8kb766md6k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bbbxedvk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ttq4mtfq2v8kb766md6k.png" alt="Third page" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--91op5eTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ct5wey0dhsephj88i4ee.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--91op5eTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ct5wey0dhsephj88i4ee.png" alt="Fourth page" width="880" height="465"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the installation will begin , wait till it finish . It will take little time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bKwqQh24--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57a57bzjhogbu393n14s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bKwqQh24--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57a57bzjhogbu393n14s.png" alt="Installing process is on" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check on Run PyCharm box and click “Finish”&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HqhQ-3F8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nj36t3bvxjv2r69mrknq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HqhQ-3F8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nj36t3bvxjv2r69mrknq.png" alt="Last page of installation" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check on “Do not import settings” and click “OK”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WN9iV6gS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gne1wor6dk6gp8zqsv4s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WN9iV6gS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gne1wor6dk6gp8zqsv4s.png" alt="Click ok" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on New Project :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i9ZVzDuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22cl4gypeprtzdnd4iu3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i9ZVzDuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22cl4gypeprtzdnd4iu3.png" alt="Click on new project" width="880" height="477"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is important step , change the check box from “New environment using..” to “Previously configured interpreter”  . And click on three dot in last .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QhD0gAWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ez6plg1dmzvx0wp3owsj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QhD0gAWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ez6plg1dmzvx0wp3owsj.png" alt="Check on Previously configured interpreter" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select  “System Interpreter “ and confirm Interpreter path consist of python.exe. “python.exe “will  be in python folder you installed during python installation.&lt;br&gt;
Then Click on “OK”&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8tznjV3c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p48ym6wwrsopziho2swg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8tznjV3c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p48ym6wwrsopziho2swg.png" alt="Click on three dot" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now , it will look like following .&lt;br&gt;
Click on “Create”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HTOihVqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5gyte43i9s96isqhg06z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HTOihVqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5gyte43i9s96isqhg06z.png" alt="Click on create" width="880" height="471"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now , the following page will open .&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5-GgtDw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0djky0m0jryjug4v35ew.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5-GgtDw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0djky0m0jryjug4v35ew.png" alt="PyCharm IDE will open" width="880" height="485"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check on following box and close .&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oW32o8xc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6myj0teiluxnhj4nywsv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oW32o8xc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6myj0teiluxnhj4nywsv.png" alt="Close the box" width="880" height="478"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Press right click on pythonProject --&amp;gt; New --&amp;gt; File--&amp;gt;  then “Enter”.&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j5megIny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmawmpcu3tirqfk4xgyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j5megIny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmawmpcu3tirqfk4xgyi.png" alt="Create new python file" width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Name the New file and add “.py” in last as follow :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8vCDBI_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8o92tidjvkqa3fsazcj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8vCDBI_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8o92tidjvkqa3fsazcj.png" alt="Add .py " width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, write print(“Hello World”) in main.py file as follow.&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HWRh-G2c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/waqblgdx34y6ccbxzfe7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HWRh-G2c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/waqblgdx34y6ccbxzfe7.png" alt="Print Hello World" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Press  right click and click on “Run” as shown &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HqfMFru6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6j13pw3mi4tvpadmlarr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HqfMFru6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6j13pw3mi4tvpadmlarr.png" alt="Click on Run" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yeappp    , We completed our first program in Python .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DA71qcsD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0fpd3dblrdyklbrd0q1v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DA71qcsD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0fpd3dblrdyklbrd0q1v.png" alt="Finishing the task" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Having a great developer onboarding</title>
      <author>Oscar Bustos</author>
      <pubDate>Fri, 14 Jan 2022 09:44:51 +0000</pubDate>
      <link>https://dev.to/elchiconube/having-a-great-developer-onboarding-319b</link>
      <guid>https://dev.to/elchiconube/having-a-great-developer-onboarding-319b</guid>
      <description>&lt;p&gt;Great onboarding for developers can have a big impact on a new member joining the team.&lt;/p&gt;

&lt;p&gt;A well-documented, well-planned onboarding with various meetings and slow challenges or achievements is far better than just bringing someone in and figuring everything out on the fly. Such planning shows that your team cares about people and values their time.&lt;/p&gt;

&lt;p&gt;What you need to have a great onboarding:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An intro with the team.&lt;/li&gt;
&lt;li&gt;Intro to all communication channels.&lt;/li&gt;
&lt;li&gt;Several 1:1 meetings (including functional and technical explanations, intro to other teams...)&lt;/li&gt;
&lt;li&gt;How to set up a local dev environment.&lt;/li&gt;
&lt;li&gt;Useful links to different environments, and other useful links.&lt;/li&gt;
&lt;li&gt;Technical guidelines&lt;/li&gt;
&lt;li&gt;Technical processes.&lt;/li&gt;
&lt;li&gt;Previous video explanations if you have them (if not, record them this time)&lt;/li&gt;
&lt;li&gt;Goals for your first 3-4 weeks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you don't have a prepared document, it's time to create one.&lt;/p&gt;

&lt;p&gt;The next person who joins your team will thank you A LOT.&lt;/p&gt;

&lt;p&gt;What else is part of your onboarding process?&lt;/p&gt;

</description>
      <category>onboarding</category>
      <category>developer</category>
      <category>job</category>
    </item>
    <item>
      <title>REASONS TO LEARN PYTHON WITH DJANGO IN 2022</title>
      <author>Faith Mueni Kilonzi </author>
      <pubDate>Fri, 14 Jan 2022 09:31:39 +0000</pubDate>
      <link>https://dev.to/global_codess/reasons-to-learn-python-with-django-in-2022-248m</link>
      <guid>https://dev.to/global_codess/reasons-to-learn-python-with-django-in-2022-248m</guid>
      <description>&lt;p&gt;It is that time of the year – the beginning- where everyone is giving their opinion on the booming tech stack. This year, I have resolved to focus on Python as my core language and sticking with that. When it comes to Python for web development, Django and Flask are the two go-to web frameworks. While Flask is an equally good framework, I am going with Django. I will be sharing my journey and the insights gotten thereof. &lt;br&gt;
This piece will discuss some of the golden reasons why you should start learning Django in 2022.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-opensource-python-web-framework"&gt;
  &lt;/a&gt;
  1 Open-Source Python Web Framework
&lt;/h1&gt;

&lt;p&gt;Django is a high-level open-source python framework that has neem escalating demands in the market ever since with assured growth.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-increasing-demand"&gt;
  &lt;/a&gt;
  2 Increasing Demand
&lt;/h1&gt;

&lt;p&gt;The demand for Django professional is increasing every single day with high demanding salary and career launches. &lt;br&gt;
The average salary of a Django developer is $120,000 per year. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-new-interview-opportunities"&gt;
  &lt;/a&gt;
  3 New Interview Opportunities
&lt;/h1&gt;

&lt;p&gt;Getting a job is nice but getting an interview might change your life. This is because an interview offers you the opportunity to promote yourself and negotiate. Django Framework is used by most big tech companies, including Instagram, National Geographic, Mozilla, Spotify, Pinterest, Disqus, Bitbucket, Eventbrite, and Prezi.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-high-job-market-share"&gt;
  &lt;/a&gt;
  4 High Job Market Share
&lt;/h1&gt;

&lt;p&gt;The market share and demand for Django developers is high, with over 70,000 vacancies and a market share of over 28% since 2021.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-industry-opportunities"&gt;
  &lt;/a&gt;
  5 Industry Opportunities
&lt;/h1&gt;

&lt;p&gt;Learning Django will provide you a huge advantage in the industry, opening you new doors and allowing you to develop a variety of skills. This ensures that Django professionals will have plenty of career opportunities.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;With so many new languages, frameworks, and technologies being released on a regular basis, deciding which stack to use is a personal choice. The above discussion, on the other hand, is a guidance for individuals who are unsure about their path in Python, Django, and even Flask.&lt;/p&gt;

</description>
      <category>python</category>
      <category>django</category>
      <category>technologies</category>
      <category>2022</category>
    </item>
    <item>
      <title>Running SSH in an Alpine Docker Container</title>
      <author>Alexey Yakovlev</author>
      <pubDate>Fri, 14 Jan 2022 09:31:30 +0000</pubDate>
      <link>https://dev.to/yakovlev_alexey/running-ssh-in-an-alpine-docker-container-3lop</link>
      <guid>https://dev.to/yakovlev_alexey/running-ssh-in-an-alpine-docker-container-3lop</guid>
      <description>&lt;p&gt;When deploying your web application you will likely be using &lt;a href="http://docker.com"&gt;Docker&lt;/a&gt; for containerization. Many base Docker images like &lt;a href="https://hub.docker.com/_/node"&gt;Node&lt;/a&gt; or &lt;a href="https://hub.docker.com/_/python"&gt;Python&lt;/a&gt; are running &lt;a href="https://alpinelinux.org"&gt;Alpine Linux&lt;/a&gt;. It is a great Linux distro that is secure and extremely lightweight. &lt;/p&gt;

&lt;p&gt;However many Docker images provide Alpine without its &lt;a href="https://github.com/OpenRC/openrc"&gt;OpenRC&lt;/a&gt; init system. This causes a few issues when trying to run sidecar services with your primary process in a Docker Container.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#table-of-contents"&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#case-study"&gt;Case study&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#configuring-ssh"&gt;Configuring SSH&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#configuring-user"&gt;Configuring user&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing-ssh"&gt;Installing SSH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#running-sshd"&gt;Running sshd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wrapping-up"&gt;Wrapping up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#case-study"&gt;
  &lt;/a&gt;
  Case study
&lt;/h2&gt;

&lt;p&gt;Let's imagine that we have a remote server hosted &lt;em&gt;somewhere&lt;/em&gt;. We are using this server for deploying our production application. To run the application in an isolated environment we are continerizing a Node.js/Python/nginx or any other app. To administrate processes we would want to have direct access to production environment - docker container in this case. SSH is the way to go here, but how should we setup it?&lt;/p&gt;

&lt;p&gt;We could SSH into the remote server and then use &lt;code&gt;docker exec&lt;/code&gt; but that would not be a particularly secure or elegant solution. Perhaps we should forward SSH connection to the Docker container itself?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6cyVblaS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2g5yhndlzr7m3cu9upj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6cyVblaS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2g5yhndlzr7m3cu9upj.jpg" alt="A possible setup" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Binding ports is fairly easy - we will bind not only port 443 (or any other port you might use for your use case) but also port 22. Run command would like something like &lt;code&gt;docker run -p 443:&amp;lt;docker_app_port&amp;gt; -p 22:22 &amp;lt;container_id&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The more challenging part would setting up the actual SSH inside the container. We will take a simple Node.js Dockerfile as a base.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:12.22-alpine&lt;/span&gt;

&lt;span class="c"&gt;# added code goes here&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn build

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["yarn", "start"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configuring-ssh"&gt;
  &lt;/a&gt;
  Configuring SSH
&lt;/h2&gt;

&lt;p&gt;To reproduce the connection to a remote server we would be running this Docker image locally and connecting using &lt;code&gt;localhost&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-user"&gt;
  &lt;/a&gt;
  Configuring user
&lt;/h3&gt;

&lt;p&gt;Firstly, in order to be able to login as root (or any other user) we would have to unlock the user and add authorized &lt;a href="https://www.ssh.com/academy/ssh/key"&gt;SSH keys&lt;/a&gt; (unless you would want to use text passwords to login which is very insecure).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# create user SSH configuration&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /root/.ssh &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="c"&gt;# only this user should be able to read this folder (it may contain private keys)&lt;/span&gt;
    &amp;amp;&amp;amp; chmod 0700 /root/.ssh \
    # unlock the user
    &amp;amp;&amp;amp; passwd -u root
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the &lt;code&gt;root&lt;/code&gt; user is unlocked to be logged into and there is a folder for SSH configuration. However at the moment anyone can login as &lt;code&gt;root&lt;/code&gt; since there is not password and password auth is enabled by default. Our goal would be to disable password auth and to add our public key as an authorized one for this user.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You may also use a different user for this purpose - just replace &lt;code&gt;/root&lt;/code&gt; with the path to the desired users home directory and replace username.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# supply your pub key via `--build-arg ssh_pub_key="$(cat ~/.ssh/id_rsa.pub)"` when running `docker build`&lt;/span&gt;
&lt;span class="k"&gt;ARG&lt;/span&gt;&lt;span class="s"&gt; ssh_pub_key&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$ssh_pub_key&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /root/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#installing-ssh"&gt;
  &lt;/a&gt;
  Installing SSH
&lt;/h3&gt;

&lt;p&gt;Now in order to disable password auth via SSH we have to first install SSH. I will be using &lt;a href="https://www.openssh.com"&gt;OpenSSH&lt;/a&gt; for this but other implementations should work similarly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;apk add openrc openssh &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ssh-keygen &lt;span class="nt"&gt;-A&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"PasswordAuthentication no"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Stripped Alpine Docker images like the Node one do not provide OpenRC by default so we should install it ourselves. Then generate host SSH keys so clients may authorize our container as an SSH host. Finally, append &lt;code&gt;PasswordAuthentication no&lt;/code&gt; to the end of &lt;code&gt;sshd_config&lt;/code&gt; to disable password auth via SSH.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For real applications you would invest in pre-generating host keys so that keys do not update every time a new container is built. However this and managing keys more elegantly is out of scope for this post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this point we may start the &lt;code&gt;sshd&lt;/code&gt; service.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;rc-status &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="c"&gt;# touch softlevel because system was initialized without openrc&lt;/span&gt;
    &amp;amp;&amp;amp; touch /run/openrc/softlevel \
    &amp;amp;&amp;amp; rc-service sshd start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However when you run the container you would see something like &lt;code&gt;kex_exchange_identification&lt;/code&gt; error. When &lt;code&gt;docker exec&lt;/code&gt; into the container and execute &lt;code&gt;rc-status&lt;/code&gt; you would see that &lt;code&gt;sshd&lt;/code&gt; service is crashed. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#running-sshd"&gt;
  &lt;/a&gt;
  Running sshd
&lt;/h3&gt;

&lt;p&gt;Service is crashed because Alpine Docker images allow only a single process to be launched. It is actually a good concept that facilitates using microservices and creating docker compositions. However in this particular case there is not way to run SSH in a different container. To avoid that the actual &lt;code&gt;ENTRYPOINT&lt;/code&gt; or &lt;code&gt;CMD&lt;/code&gt; command should boot multiple processes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:12.22-alpine&lt;/span&gt;

&lt;span class="k"&gt;ARG&lt;/span&gt;&lt;span class="s"&gt; ssh_pub_key&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /root/.ssh &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;chmod &lt;/span&gt;0700 /root/.ssh &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; passwd &lt;span class="nt"&gt;-u&lt;/span&gt; root &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$ssh_pub_key&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /root/.ssh/authorized_keys &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add openrc openssh &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ssh-keygen &lt;span class="nt"&gt;-A&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"PasswordAuthentication no"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/ssh/sshd_config &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /run/openrc &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;touch&lt;/span&gt; /run/openrc/softlevel

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn build

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["sh", "-c", "rc-status; rc-service sshd start; yarn start"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this final Dockerfile I combined all previous &lt;code&gt;RUN&lt;/code&gt; commands into a single one to reduce the amount of layers. Instead of running &lt;code&gt;rc-status &amp;amp;&amp;amp; rc-service sshd start&lt;/code&gt; in &lt;code&gt;RUN&lt;/code&gt; we do that in &lt;code&gt;ENTRYPOINT&lt;/code&gt; inside &lt;code&gt;sh -c&lt;/code&gt;. This way Docker container will execute only a single process &lt;code&gt;sh -c&lt;/code&gt; that would spawn childs.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a side effect this Node.js application will not recieve SIGINT/SIGTERM signals (or any other signals from Docker) when stopping Docker container.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Run built container using &lt;code&gt;docker run -p 7655:22 &amp;lt;container_id&amp;gt;&lt;/code&gt;. In a different terminal instance run &lt;code&gt;ssh root@localhost -p 7655&lt;/code&gt;. Voila - you successfully SSHed into a Docker Container. Using SSH for your production app would be the same except you would be using its IP instead of &lt;code&gt;localhost&lt;/code&gt; and a valid port.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To properly build and run container without an app around it replace &lt;code&gt;yarn start&lt;/code&gt; with &lt;code&gt;node&lt;/code&gt; and remove &lt;code&gt;yarn&lt;/code&gt;/&lt;code&gt;yarn build&lt;/code&gt; directives.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#troubleshooting"&gt;
  &lt;/a&gt;
  Troubleshooting
&lt;/h2&gt;

&lt;p&gt;When any difficulties with running SSH may arise first try to &lt;code&gt;docker exec&lt;/code&gt; into the container and check &lt;code&gt;rc-status&lt;/code&gt;. &lt;code&gt;sshd&lt;/code&gt; service should be &lt;code&gt;started&lt;/code&gt;. If it has &lt;code&gt;crashed&lt;/code&gt; or is not present you may not be starting it properly in &lt;code&gt;ENTRYPOINT&lt;/code&gt; or have incorrect configuration in &lt;code&gt;sshd_config&lt;/code&gt;. You may also be missing SSH host keys or use an already bound port.&lt;/p&gt;

&lt;p&gt;To further troubleshoot you can run the container with &lt;code&gt;docker run -p 7655:22 7656:10222 &amp;lt;container_id&amp;gt;&lt;/code&gt;. Then &lt;code&gt;docker exec &amp;lt;container_id&amp;gt;&lt;/code&gt; and run &lt;code&gt;$(which sshd) -Ddp 10222&lt;/code&gt;. This would create another instance of &lt;code&gt;sshd&lt;/code&gt; that would listen on a different port (10222) with verbose logging. From there you should see informational messages on why the process might crash.&lt;/p&gt;

&lt;p&gt;If the process does not crash attempt connecting. Run &lt;code&gt;ssh root@localhost -p 7656&lt;/code&gt; on the &lt;em&gt;Docker&lt;/em&gt; host machine. From this point you will see additional logs in your previous terminal window with details on why the connection has been refused. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;While this tutorial is pretty specific to running SSH in an Alpine Docker container, you may reuse this knowledge to run SSH in other Linux Docker distros. Or you may have better luck configuring other sidecar services inside an Alpine Docker container. In any case I hope you found what you were looking for in this post or learnt something new. &lt;/p&gt;

</description>
      <category>docker</category>
      <category>ssh</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to predict the future using Python 🐍?</title>
      <author>Yash Makan</author>
      <pubDate>Fri, 14 Jan 2022 09:17:08 +0000</pubDate>
      <link>https://dev.to/yash_makan/how-to-predict-future-using-python--3i39</link>
      <guid>https://dev.to/yash_makan/how-to-predict-future-using-python--3i39</guid>
      <description>&lt;p&gt;Hi fellas! I am Yash Makan, a black magician 🦹‍♂️ and you know what I can predict anything. Yup! I can predict the future of covid, google stock price, bitcoin price and your business profit. To avail of my services simply go to &lt;a href="http://www.blackmagicfool.com"&gt;www.blackmagicfool.com&lt;/a&gt;. It would be a pleasure working with you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/09bVX2WzBhZK8KwhqP/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/09bVX2WzBhZK8KwhqP/giphy.gif" alt="https://media.giphy.com/media/09bVX2WzBhZK8KwhqP/giphy.gif" width="480" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#different-models-of-predictive-analysis"&gt;
  &lt;/a&gt;
  Different Models of Predictive Analysis
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;ARIMA - Auto-Regressive Integrated Moving Average&lt;/li&gt;
&lt;li&gt;LSTM - Long Short Term Memory&lt;/li&gt;
&lt;li&gt;Auto-Regressive model&lt;/li&gt;
&lt;li&gt;Exponential Smoothing&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of these models have one thing in common that they require data to be trained in and then we have to tweak the parameters accordingly to see whichever yield the best results. But today we are not going to use these models, I am going to show you a third party library created by Facebook known as &lt;code&gt;fbpropet&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-why-fbprophet"&gt;
  &lt;/a&gt;
  But why fbprophet?
&lt;/h2&gt;

&lt;p&gt;I know you must be thinking that why do we are using a third party Facebook library if we already have these models. The problem with these models is that you have to tweak the parameters to see which way yields the best result whereas fbprophet lets all of this work on its own. It is a simple yet powerful library in which you simply has to pass the historical data and it can predict the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;To install fbprophet you must have anaconda installed or you can use google colab and the installation works flawlessly. I personally will be using google colab&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First, you have to install &lt;code&gt;pystan&lt;/code&gt; that helps run fbprophet easily. You can install pystan using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;!pip install pystan
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you can install fbpropeht using the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;!pip install fbprophet
or
conda install -c conda-forge fbprophet
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we will be using yfinance to fetch the data of the stock price&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;!pip install yfinance
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At last, we have to install pandas and plotly to work with historical data and plot it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;!pip install plotly==4.4.1
!pip install pandas==1.3.4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implementation-in-python"&gt;
  &lt;/a&gt;
  Implementation in Python
&lt;/h2&gt;

&lt;p&gt;So, as an example, let’s predict the future 3 years of the reliance share price using python.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Importing libraries&lt;/strong&gt;&lt;br&gt;
First, we have to import the necessary libraries that we have just installed&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_wj2jyIX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/790ljahy0yo3pn5weomv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_wj2jyIX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/790ljahy0yo3pn5weomv.png" alt="Import libraries" width="509" height="178"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Optional) Ignore any warnings to make the output cleaner&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YE5nR0GY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plq29wcakw9es9uuho8r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YE5nR0GY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plq29wcakw9es9uuho8r.png" alt="warning" width="446" height="49"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Optional) To show plotly plots in google colab&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P6BKr3Ux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8b4jza5wuq7jxmi57gm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P6BKr3Ux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8b4jza5wuq7jxmi57gm.png" alt="Plotly in google colab" width="880" height="182"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Download the historical data from the internet.&lt;/strong&gt; &lt;br&gt;
I am using yahoo finance API to install the historical data but you can fetch data from anywhere. Also, I have assigned the prediction time to 3 years&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zHcH5mtA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4yoeilalet91he1rad1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zHcH5mtA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4yoeilalet91he1rad1.png" alt="Fetching historical data" width="495" height="113"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The data is from 1996 where this stock IPO till current date and it looks something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cfoAwto3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nyv5890lhht7bcs4onr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cfoAwto3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nyv5890lhht7bcs4onr.png" alt="Historical data output" width="880" height="333"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Format the historical data for the fbprophet library.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Here as you can see I created a new dataframe and assigned the date column as &lt;code&gt;ds&lt;/code&gt; and close values as &lt;code&gt;y&lt;/code&gt;. This is very important as the column names must be ds and y as fbprophet will be looking for these columns.&lt;br&gt;
&lt;code&gt;df[’ds’]&lt;/code&gt; —&amp;gt; column of date&lt;br&gt;
&lt;code&gt;df[’y’]&lt;/code&gt;  —&amp;gt;  the historical values that you have to feed to the model&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ewLR4Ep_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhgvq4oke7rn1ct6uxab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ewLR4Ep_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhgvq4oke7rn1ct6uxab.png" alt="Formatting the historical data" width="669" height="121"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Training the model&lt;/strong&gt;&lt;br&gt;
Training the model basically means to feed the historical data and the model trains it feeding data one by one and reducing the loss. Loss is basically a number that represents how bad the model is predictions on the given data. The lesser the loss number, the better your model would be.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Spi3av_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kylx6t7supfc3u2ixa9e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Spi3av_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kylx6t7supfc3u2ixa9e.png" alt="Training the model" width="260" height="73"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Making future predictions&lt;/strong&gt;&lt;br&gt;
Here we will use our previously trained model and predict the future possible outcomes&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Bvb3GbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16b345n3wblo3x2p9x09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Bvb3GbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16b345n3wblo3x2p9x09.png" alt="Making future predictions" width="880" height="61"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The forecast looks something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6lKIZPRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4rglc5zztzywm87uqla.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6lKIZPRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4rglc5zztzywm87uqla.png" alt="Future 3 years forecast output" width="880" height="69"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Plotting the forecast&lt;/strong&gt;&lt;br&gt;
Actually, we have successfully predicted the future but for the analysis purpose, it is a great practice to visualize using graphs. Here I will be using a scatter plot and it’ll look something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E80QtAxA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zok0e4vgld5skazu302h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E80QtAxA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zok0e4vgld5skazu302h.png" alt="Plotting the forecast table in scatter plot graph" width="880" height="399"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;What does this forecast represent?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On the y axis, you can see the share price and on the x-axis, you can see the dates.&lt;/li&gt;
&lt;li&gt;The black line is the actual price&lt;/li&gt;
&lt;li&gt;The predicted range be the green and blue lines. This means that the share price will be between the green and blue line&lt;/li&gt;
&lt;li&gt;The red line shows the trend and in this example, the trend is clearly showing up in the next 3 years&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://colab.research.google.com/drive/11ueJlrR7KhuOlMb-oBamoEOogQcmBObk"&gt;Get The Source Code For This Blog&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So there you have it, it's that easy to predict future values using python. Now let me clear one thing that this blog is not a financial advice blog and if anyone from India reading this blog thinks, “Oh! this is a great opportunity to invest in reliance India”, then I would like to say hold your horses and do proper technical analysis before investing in any stock either in Indian stock market or any other. Also if you want to predict future values of anything else other than stocks then you can do that as well. You simply need the historical data. The more data you have, the better be the prediction. With all that being said, I would like to conclude my today’s blog. You can follow me &lt;a href="https://dev.to/yash_makan"&gt;here&lt;/a&gt; or on &lt;a href="https://twitter.com/Yash_Makan"&gt;twitter&lt;/a&gt; to get the latest updates whenever I post new cool tech material. Also if you are willing to donate, then I will highly appreciate that and you can do that using this &lt;a href="https://www.buymeacoffee.com/yashmakan"&gt;link&lt;/a&gt;. If you have any doubts, just comment down below and I will surely help you out. Alrighty! It’s time to say b-bye!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4y5n1K-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/TfFDiw5gBuEns4ykJl/giphy.gif%3Fcid%3D790b7611431abc7a85c76da6c399a5727f24e501f9a5cae9%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4y5n1K-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/TfFDiw5gBuEns4ykJl/giphy.gif%3Fcid%3D790b7611431abc7a85c76da6c399a5727f24e501f9a5cae9%26rid%3Dgiphy.gif%26ct%3Dg" alt="https://media4.giphy.com/media/TfFDiw5gBuEns4ykJl/giphy.gif?cid=790b7611431abc7a85c76da6c399a5727f24e501f9a5cae9&amp;amp;rid=giphy.gif&amp;amp;ct=g" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contact-me"&gt;
  &lt;/a&gt;
  Contact Me
&lt;/h2&gt;

&lt;p&gt;Website: &lt;a href="http://yashmakan.co.in"&gt;yashmakan.co.in&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/Yash_Makan"&gt;@Yash_Makan&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contribute"&gt;
  &lt;/a&gt;
  Contribute
&lt;/h2&gt;

&lt;p&gt;buymeacoffee: &lt;a href="https://www.buymeacoffee.com/yashmakan"&gt;@Here&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-interesting-articles"&gt;
  &lt;/a&gt;
  Other Interesting Articles
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/21-must-read-books-for-kids-begineer-advanced-interview-with-pdf-56c7"&gt;21 must-read books for kids, beginner, advanced &amp;amp; interview with PDF 🐍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/everything-about-automation-in-python-pc-mobile-web-raspberry-pi-4cgh"&gt;Improve your workflow using Automation in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/4-ways-to-create-modern-gui-in-python-in-easiest-way-possible-5e0e"&gt;4 ways to create modern GUI in python in the easiest way possible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/4-best-python-web-app-hosting-services-for-freewith-complete-process-57nb"&gt;4 Free hosting platforms for python web app with step-by-step process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/18-python-one-liners-that-will-speed-up-your-coding-process-21md"&gt;18 Python one-liners that will speed up your coding process.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/ai-bot-that-could-answer-any-questions-asked-gmn"&gt;AI bot that could answer your questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/generate-your-own-favourite-tv-episode-using-python-1pb3"&gt;Generate your own favourite TV episode using python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>fbprophet</category>
      <category>programming</category>
    </item>
    <item>
      <title>Why practicing DRY in tests is bad for you </title>
      <author>Matti Bar-Zeev</author>
      <pubDate>Fri, 14 Jan 2022 08:58:43 +0000</pubDate>
      <link>https://dev.to/mbarzeev/why-practicing-dry-in-tests-is-bad-for-you-j7f</link>
      <guid>https://dev.to/mbarzeev/why-practicing-dry-in-tests-is-bad-for-you-j7f</guid>
      <description>&lt;p&gt;This post is a bit different from the recent ones I’ve published. I’m going to share my point of view on practicing DRY in unit tests and why I think it is bad for you. Care to know why? Here we go - &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-dry"&gt;
  &lt;/a&gt;
  What is DRY?
&lt;/h2&gt;

&lt;p&gt;Assuming that not all of us know what DRY means here is a quick explanation:&lt;br&gt;
“Don't Repeat Yourself (DRY) is a principle of software development aimed at reducing repetition of software patterns” (from &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;here&lt;/a&gt;). We don’t like duplications since “Duplication can lead to maintenance nightmares, poor factoring, and logical contradictions.” (from &lt;a href="http://wiki.c2.com/?DontRepeatYourself"&gt;here&lt;/a&gt;).&lt;br&gt;
An example can be having a single service which is responsible for fetching data from the server instead of duplicating the code all over the code base.&lt;br&gt;
The main benefit is clear - a single source of logic, where each modification for it applies to all which uses it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#where-does-dry-apply-in-tests"&gt;
  &lt;/a&gt;
  Where does DRY apply in tests?
&lt;/h2&gt;

&lt;p&gt;In tests we thrive to assert as much as needed in order to give us the future modification confidence we feel comfortable with. This means that there will be a lot of tests that differ in nuances in order to make sure we cover each of the edge cases well. &lt;br&gt;
What the previous sentence means in code is that tests tend to have a lot of repetitive and duplicated code to them, this is where the DRY principle finds its way in.&lt;/p&gt;

&lt;p&gt;Let me try and explain with examples from the React world - &lt;br&gt;
We are testing a custom component and we’re using the React Testing Library (and jest-dom) in order to test the component’s rendering. It may look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Confirmation component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should render&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Confirmation&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dialog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here I’m testing that once the Confirmation component is being rendered, the element with the “dialog” role is present on the document.&lt;br&gt;
This is great but it is just a single test among the many cases this component has, and that means that for each test you will have the same repetitive render code, which sometimes can be complex with props for the component, and perhaps wrapping it in a context provider. &lt;br&gt;
So what many choose to do is to create a “helper” render function which encapsulates the rendering and then each test can call it, before starting its assertions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;renderConfirmationComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Confirmation&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Confirmation component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should render&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderConfirmationComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
       &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dialog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We gain the benefit of DRY, where if we want to change the rendering for all the tests, we do it in a single place.&lt;/p&gt;

&lt;p&gt;Another example of DRY in tests is using loops in order to generate many different test cases. An example can be testing an “add” function which receives 2 arguments and returns the result for it.&lt;br&gt;
Instead of duplicating the code many times for each case, you can loop over a “data-provider” (or "data-set") for the test and generate the test cases, something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Add function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dataProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;542&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;557&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;124&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;146&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="p"&gt;];&lt;/span&gt;

   &lt;span class="nx"&gt;dataProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;testCase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`should return a &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;testCase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt; result for adding &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;testCase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt; and &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;testCase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;testCase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;testCase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
           &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;testCase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
       &lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the test result looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Add &lt;span class="k"&gt;function&lt;/span&gt;
    ✓ should &lt;span class="k"&gt;return &lt;/span&gt;a 3 result &lt;span class="k"&gt;for &lt;/span&gt;adding 1 and 2 &lt;span class="o"&gt;(&lt;/span&gt;1 ms&lt;span class="o"&gt;)&lt;/span&gt;
    ✓ should &lt;span class="k"&gt;return &lt;/span&gt;a 24 result &lt;span class="k"&gt;for &lt;/span&gt;adding 3 and 21 &lt;span class="o"&gt;(&lt;/span&gt;1 ms&lt;span class="o"&gt;)&lt;/span&gt;
    ✓ should &lt;span class="k"&gt;return &lt;/span&gt;a 44 result &lt;span class="k"&gt;for &lt;/span&gt;adding 1 and 43
    ✓ should &lt;span class="k"&gt;return &lt;/span&gt;a 557 result &lt;span class="k"&gt;for &lt;/span&gt;adding 15 and 542
    ✓ should &lt;span class="k"&gt;return &lt;/span&gt;a 24 result &lt;span class="k"&gt;for &lt;/span&gt;adding 5 and 19 &lt;span class="o"&gt;(&lt;/span&gt;1 ms&lt;span class="o"&gt;)&lt;/span&gt;
    ✓ should &lt;span class="k"&gt;return &lt;/span&gt;a 146 result &lt;span class="k"&gt;for &lt;/span&gt;adding 124 and 22
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;BTW Jest even encourages you to do that with its built-in API, like &lt;a href="https://jestjs.io/docs/api#testeachtablename-fn-timeout"&gt;test.each&lt;/a&gt; and &lt;a href="https://jestjs.io/docs/api#describeeachtablename-fn-timeout"&gt;describe.each&lt;/a&gt;. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is (somewhat) the same example with that API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataProvider&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.add(%i, %i)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks great, right? I created 6 test cases in just a few lines of code. So why am I saying it’s bad for you?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#searching"&gt;
  &lt;/a&gt;
  Searching
&lt;/h2&gt;

&lt;p&gt;The scenario is typically this - a test fails, you read the output on the terminal and go searching for that specific failing test case. What you have in your hand is the description of the test case, but what you don’t know is that this description is a concatenation of strings. &lt;br&gt;
You won't be able to find “should return a 3 result for adding 1 and 2” in the code because it simply does not exist. It really depends on how complex your test’s data-provider is, but this can become a real time waster trying to figure out what to search for.  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#readability"&gt;
  &lt;/a&gt;
  Readability
&lt;/h2&gt;

&lt;p&gt;So you found you test and it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;dataProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;testCase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`should return &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;testCase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt; result for adding &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;testCase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt; and &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;testCase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;testCase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;testCase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
           &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;testCase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
       &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You gotta admit that this is not intuitive. Even with the sugar (is it really sweeter?) syntax Jest offers it takes you some time to wrap your head around all the flying variables and string concatenations to realize exactly what’s been tested. &lt;br&gt;
When you do realize what’s going on, you need to isolate the case which failed by breaking the loop or modifying your data-provider, since you cannot isolate the failing test case to run alone.&lt;br&gt;
One of the best “tools” I use to resolve failing tests is to isolate them completely and avoid the noise from the other tests, and here it is much harder to do.&lt;br&gt;
Tests should be easy to read, easy to understand and easy to modify. It is certainly not the place to prove that a test can be written in a one-liner, or with (god forbid) a reducer. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#state-leakage"&gt;
  &lt;/a&gt;
  State leakage
&lt;/h2&gt;

&lt;p&gt;Running tests in loops increases the potential of tests leaking state from one another. You can sometimes find out that after you’ve isolated the test which fails, it suddenly passes with flying colors. This usually means that previous tests within that loop leaked a certain state which caused it to fail.&lt;br&gt;
When you have each test as a standalone isolated unit, the potential of one test affecting the others dramatically reduces. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-cost-of-generic-code"&gt;
  &lt;/a&gt;
  The cost of generic code
&lt;/h2&gt;

&lt;p&gt;Let’s go back to our React rendering example and expand it a little. Say that our generic rendering function receives props in order to render the component differently for each test case, and it might also receive a state “store” with different attributes to wrap the component with. &lt;br&gt;
If, for some reason, you need to change the way you want to render the component for a certain test case you will need to add another argument to the rendering generic function, and your generic function will start growing into this little monster which needs to support any permutation of your component rendering. &lt;br&gt;
As with any generic code, there is a cost of maintaining it and keeping it compatible with the evolving conditions.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;I know. &lt;br&gt;
There are cases where looping over a data-provider to create test cases, or creating “helper” functions is probably the best way for achieving a good code coverage with little overhead. However, I would like you to take a minute and understand the cost of going full DRY mode in your tests given all the reasons mentioned above. &lt;br&gt;
There is a clear purpose for your tests and that is to prevent regressions and provide confidence when making future changes. Your tests should not become a burden to maintain or use. &lt;br&gt;
I much prefer simple tests, where everything which is relevant to a test case can be found between its curly brackets, and I really don’t care if that code repeats itself. It reassures me that there is little chance that this test is affected somehow by any side effect I’m not aware of.&lt;/p&gt;

&lt;p&gt;As always, if you have any thoughts or comments about what's written here, please share with the rest of us :)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hey! If you liked what you've just read check out &lt;a href="https://twitter.com/mattibarzeev?ref_src=twsrc%5Etfw"&gt;@mattibarzeev&lt;/a&gt; on Twitter&lt;/em&gt; 🍻&lt;/p&gt;

</description>
      <category>testing</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>13 Questions You Need to Ask Before Buying a Deep Learning Course</title>
      <author>Yaniv Noema</author>
      <pubDate>Fri, 14 Jan 2022 08:57:23 +0000</pubDate>
      <link>https://dev.to/yanivnoema/13-questions-you-need-to-ask-before-buying-a-deep-learning-course-3j8h</link>
      <guid>https://dev.to/yanivnoema/13-questions-you-need-to-ask-before-buying-a-deep-learning-course-3j8h</guid>
      <description>&lt;p&gt;Have you considered taking a deep learning course? If so, then there are some questions that you need to ask before diving in. You may not know what you're getting into with this type of course and it's important to take the time and think about your needs and goals for buying a course. In this blog post we will discuss 10 questions that every learner should ask before buying a deep learning course!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-what-are-the-prerequisites"&gt;
  &lt;/a&gt;
  1. What are the prerequisites?
&lt;/h2&gt;

&lt;p&gt;One of the most important questions to ask is what the prerequisites are for the course. Do you need to have a certain level of programming experience? Are you comfortable with matrix operations and calculus? It's important that you know what is required of you before buying a course, so that you don't end up spending money on something that you can't actually use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-what-format-is-the-course"&gt;
  &lt;/a&gt;
  2. What format is the course?
&lt;/h2&gt;

&lt;p&gt;When you're looking for a deep learning course, it's important to consider what format the course will be in. Will it be mostly video lectures? Text-based? Or maybe there are interactive exercises included? Each learner has different preferences when it comes to learning, so you'll want to make sure the course is in a format that will work for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-who-is-the-instructor"&gt;
  &lt;/a&gt;
  3. Who is the instructor?
&lt;/h2&gt;

&lt;p&gt;When you're taking a deep learning course, it's important to know who your instructor is. Do they have a lot of experience in the field? Are they active researchers in the area? Or are they just teaching the course because they know how to code? It's important to have an instructor who is knowledgeable and passionate about the subject matter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-what-type-of-learning-style-do-you-prefer"&gt;
  &lt;/a&gt;
  4. What type of learning style do you prefer?
&lt;/h2&gt;

&lt;p&gt;Some people learn best by listening to lectures, while others prefer reading texts. Some people need lots of practice exercises while others can learn by just watching examples. It's important to know what type of learner you are so that you can find a course that will work best for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-is-the-course-uptodate"&gt;
  &lt;/a&gt;
  5. Is the course up-to-date?
&lt;/h2&gt;

&lt;p&gt;It's important to make sure that any course you buy is up-to-date with the latest research and developments in the field. You don't want to be learning outdated techniques that are no longer used in practice. Make sure to ask the instructor or course provider about this before buying a course.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-what-topics-are-covered"&gt;
  &lt;/a&gt;
  6. What topics are covered?
&lt;/h2&gt;

&lt;p&gt;Another important question to ask is what topics are covered in the course. Are you interested in deep learning for natural language processing? Neural networks? Computer vision? Make sure that the course you buy covers the topics that you're interested in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-is-there-a-lot-of-theory-or-is-it-mostly-handson"&gt;
  &lt;/a&gt;
  7. Is there a lot of theory or is it mostly hands-on?
&lt;/h2&gt;

&lt;p&gt;Some people prefer to learn with a mix of theory and practice, while others prefer just to focus on exercises. It's important to know what type of learner you are so that you can find a course that will work best for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-how-much-time-is-required"&gt;
  &lt;/a&gt;
  8. How much time is required?
&lt;/h2&gt;

&lt;p&gt;It's important to know how much time is required for the course. If you're only able to commit a few hours per week, then you'll want to find a course that isn't too intensive. If you have more time to spare, then you can look for a course that is more intensive.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-what-type-of-learner-are-you"&gt;
  &lt;/a&gt;
  9. What type of learner are you?
&lt;/h2&gt;

&lt;p&gt;It's important to know what type of learner you are before buying a deep learning course. Do you like lots of practice exercises? Or do you prefer listening to lectures? Make sure to consider your preferences before making a purchase.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-what-is-the-courses-refund-policy"&gt;
  &lt;/a&gt;
  10. What is the course's refund policy?
&lt;/h2&gt;

&lt;p&gt;It's important to know what the course's refund policy is before you buy it. Some courses may have a no-refund policy, while others may offer a money-back guarantee if you're not happy with the product. Make sure to read the fine print before making a purchase.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-how-is-the-course-delivered"&gt;
  &lt;/a&gt;
  11. How is the course delivered?
&lt;/h2&gt;

&lt;p&gt;When you're looking for a deep learning course, it's important to consider how the course is delivered. Some courses may be delivered entirely online, while others may require you to attend in-person sessions. Make sure to consider your availability and whether or not you're able to attend in-person sessions before buying a course.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-what-software-is-required"&gt;
  &lt;/a&gt;
  12. What software is required?
&lt;/h2&gt;

&lt;p&gt;Some courses may require you to have certain software installed on your computer in order to participate. Make sure you know what software is required before making a purchase. If you don't have the required software, you may be unable to participate in the course.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#13-what-are-the-courses-prerequisites"&gt;
  &lt;/a&gt;
  13. What are the course's prerequisites?
&lt;/h2&gt;

&lt;p&gt;Some courses may have prerequisites that you need to meet in order to be eligible to participate. Make sure you know what the prerequisites are before making a purchase. If you don't meet the prerequisites, you may not be able to take the course.&lt;/p&gt;




&lt;p&gt;These are just a few of the questions you should ask before buying a deep learning course. Make sure to do your research and ask around to find the best course for you.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; provide you with an easy way to build image datasets.&lt;br&gt;
15K+ categories to choose from&lt;br&gt;
Consistent folders structure for easy parsing&lt;br&gt;
Advanced tools for dataset pre-processing: image format, data split, image size and data augmentation.&lt;/p&gt;

&lt;p&gt;👉Visit &lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; to learn more&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Clean  Code - Javascript</title>
      <author>Swaraj Panigrahi</author>
      <pubDate>Fri, 14 Jan 2022 07:56:42 +0000</pubDate>
      <link>https://dev.to/swrjp/clean-code-javascript-2hla</link>
      <guid>https://dev.to/swrjp/clean-code-javascript-2hla</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;It is not enough for code to work.&lt;/em&gt; - Robert C. Martin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Having spent hours of time writing, reviewing, and architecting web products, if there is one thing that gives me utmost satisfaction is a well-written code.&lt;/p&gt;

&lt;p&gt;Writing clean code, to me, should not be a cliché rather a table stake for any software product. During the initial days of my career, I've been fortunate(and grateful) to be mentored by developers for whom "Clean Code" was a matter of habit. As I grew up the ladder in engineering teams, I felt the necessity to document my learnings to a blog. &lt;/p&gt;

&lt;p&gt;In this blog, I have addressed ten ideas that will help you start your journey towards writing clean maintainable code. Since I've spent the majority of my career writing code in Javascript my examples here are in Javascript. The concepts, however, can be applied to any programming language.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-meaningful-variable-names"&gt;
  &lt;/a&gt;
  1. Meaningful Variable Names
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't do this 💩
const a = 3.14;`

// Do this 👌 
const PI = 3.14
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-no-magic-numbers-or-strings"&gt;
  &lt;/a&gt;
  2. No Magic Numbers or Strings
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
// Don't do this 💩
const circumference = 2*3.14*radius;
const isAdminUser = user.type === "ADMIN";

// Do this 👌 
const PI = 3.14;
const USER_ROLES = {
    admin : "ADMIN",
    clerk : "CLERK"
}

const circumference = 2*3.14*radius;
const isAdminUser = user.type === USER_ROLES.admin;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why? &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If a magic string is being written in multiple places you have to change all of them. &lt;/li&gt;
&lt;li&gt;More manual work increases chances of typos.&lt;/li&gt;
&lt;li&gt;Magic numbers/Strings are not self-documenting.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-avoid-unwanted-context"&gt;
  &lt;/a&gt;
  3. Avoid Unwanted context
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't do this 💩
const car = {
    carMake: "BMW",
    carColor: "Black",
    carModel: "X5",
};

// Do this 👌 
const car = {
    make: "BMW",
    color: "Black",
    model: "X5",
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-functions-should-do-one-thing"&gt;
  &lt;/a&gt;
  4. Functions should do one thing
&lt;/h2&gt;

&lt;p&gt;This has to be the most important rule of software engineering. When a function does more than one thing, it is very difficult to write concise test cases for it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't do this 💩
function calculateAndDisplaySum(number1, number2) {
   let sum = number1 + number2;
   console.log(`Sum is ${sum}`);
}
calculateAndDisplaySum(5, 6);


// Do this 👌 
function calculateSum(number1, number2) {
   let sum = number1 + number2;
   return sum;
}

function displaySum(number){
   console.log(`Sum is ${number}`);
}

const sum = calculateSum(5,6);
displaySum(sum);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-less-than-2-arguments"&gt;
  &lt;/a&gt;
  5. Less than 2 arguments
&lt;/h2&gt;

&lt;p&gt;When the number of arguments is less than two, it makes easier for writing effective test cases.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't do this 💩

function createButton(name, title, disabled, onClick){
  //....
}

// Do this 👌 

function createButton({name, title, disabled, onClick}){
  //....
}

const addToCartBtn = createButton({
    name: "addToCart",
    title: "\"Add to Cart\","
    disabled: false,
    onClick: handleClick,
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-no-booleans-as-function-arguments"&gt;
  &lt;/a&gt;
  6. No Booleans as function arguments
&lt;/h2&gt;

&lt;p&gt;Flags tell that this function does more than one thing. Functions should do one thing(Refer #4). Split out your functions if they are following different code paths based on a boolean. This helps your code to stick to Single Responsibility Principle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't do this 💩
distance(pointA, pointB, true)

// Do this 👌 
distanceInKms(pointA, pointB);
distanceInMiles(pointA, pointB);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-naming-functions-right-approach"&gt;
  &lt;/a&gt;
  7. Naming functions - Right approach
&lt;/h2&gt;

&lt;p&gt;Function names should say what they do. It is a good idea to set a baseline among your development team members on how to approach this. Once this is done it is easier for anyone in the team to understand what the function is expected to do.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// This fetches data instantaneously.
const getUser = () =&amp;gt; {};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// This function sets data to an object.
const setUser = (user) =&amp;gt; {};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// This function gets data asynchronously.
const fetchUser = () =&amp;gt; {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// This function helps to render DOM.
const renderUser = () =&amp;gt; {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// This function helps to modify a object.
const updateUser = () =&amp;gt; {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// This function helps to handle event.
const handleUserCardClick = (evt) =&amp;gt; {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// These functions returns booleans to take decisions.
const shouldRenderUser = () =&amp;gt; {}
const isAdminUser = () =&amp;gt; {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#8-polymorphism-over-conditionals"&gt;
  &lt;/a&gt;
  8. Polymorphism over conditionals
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function test (condition) {
    if (condition === "A") {
        // do something related to "A" here
    } else if (condition === "B") {
        // do something related to "B" here
    } else if (condition === "C") {
        // do something related to "C" here
    }
}

test('A');
test('B');
test('C');

// Write it this way instead

const A = {
    doTheThing: function(){
        // code related to "A" here
    }
}

const B = {
    doTheThing: function(){
        // code related to "B" here
    }
}

const C = {
    doTheThing: function(){
        //  code related to "C" here
    }
}

function test (condition) {
    condition.doTheThing();    
}

test(A);
test(B);
test(C);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#9-use-promises-not-callbacks"&gt;
  &lt;/a&gt;
  9. Use Promises, not callbacks
&lt;/h2&gt;

&lt;p&gt;Javascript functions are first class citizens, but they are messy as callbacks! They are not clean and cause excessive amount of nesting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't do this 💩
get("https://datasource.url/endpoint"),
  (requestErr, response, body) =&amp;gt; {
    if (requestErr) {
      console.error(requestErr);
    } else {
      writeFile("newfile.html", body, writeErr =&amp;gt; {
        if (writeErr) {
          console.error(writeErr);
        } else {
          console.log("File written");
        }
      });
    }
  }
);

// Do this 👌 
get("https://datasource.url/endpoint"),
  .then(body =&amp;gt; {
    return writeFile("newfile.html", body);
  })
  .then(() =&amp;gt; {
    console.log("File written");
  })
  .catch(err =&amp;gt; {
    console.error(err);
  });

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#10-comments"&gt;
  &lt;/a&gt;
  10. Comments
&lt;/h2&gt;

&lt;p&gt;How much comment is too much comment? There are various schools of thoughts for this. I firmly believe in the idea of &lt;br&gt;
&lt;em&gt;"Good code mostly documents itself."&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I follow the principle of only commenting things that have business logic complexity. &lt;/p&gt;




&lt;p&gt;Learning to write clean code is a journey and not a destination.&lt;/p&gt;

&lt;p&gt;For further reading, do consider reading these books.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3EFwfwy"&gt;Clean Code by Robert C Martin &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/33diM17"&gt;Clean Coder by Robert C Martin&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>The Metaverse</title>
      <author>PranavUpadhyay7</author>
      <pubDate>Fri, 14 Jan 2022 07:52:39 +0000</pubDate>
      <link>https://dev.to/getintoweb3/the-metaverse-499g</link>
      <guid>https://dev.to/getintoweb3/the-metaverse-499g</guid>
      <description>&lt;p&gt;You might be hearing the word “Metaverse” these days a lot and probably wondering what it actually is.&lt;/p&gt;

&lt;p&gt;In brief, it's a combination of multiple elements of technology, including virtual reality(VR), augmented reality(AR), and video where users "live" within a digital universe. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0rxdbCtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s59dzljgau1u6hmdons6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0rxdbCtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s59dzljgau1u6hmdons6.png" alt="Virtual meeting" width="712" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-exactly-is-the-metaverse"&gt;
  &lt;/a&gt;
  What exactly is the Metaverse?
&lt;/h1&gt;

&lt;p&gt;There is no clear definition for the Metaverse as of yet. Some call it a virtual world, some call it a video game while some term it an internet server with human bots which are managed online.&lt;/p&gt;

&lt;p&gt;Many large, centralised organisations, such as Meta, place a premium on connecting a virtual world through a server that is active 24 hours a day. There have been multiple successful attempts at this project, and some servers remain operational 24 hours a day, seven days a week, even if they have not yet been made public. "The next platform will be even more immersive – an embodied internet where you're in the experience, not just looking at it. We call this the Metaverse, and it will touch every product we build.", says Meta CEO Mark Zuckerberg.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HhKUjDCy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10utjvgl29ywfhurvb3i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HhKUjDCy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10utjvgl29ywfhurvb3i.png" alt="Mark" width="880" height="561"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-long-would-it-take-the-metaverse-to-take-command"&gt;
  &lt;/a&gt;
  How long would it take the Metaverse to take command?
&lt;/h1&gt;

&lt;p&gt;The word "Metaverse" was coined by author Neal Stephenson in his 1992 science fiction novel "Snow Crash," in which he imagined lifelike avatars meeting in realistic 3D buildings and other virtual reality scenarios, so it's safe to assume that the concept has been around for a while. Despite having the notion of the Metaverse but being unable to implement it due to a lack of technology, the work to achieve it began a few years ago, and at current rate, it does not appear that we will be entering the period of the Metaverse anytime soon.&lt;/p&gt;

&lt;p&gt;Since then, a number of advancements have paved the road toward a true Metaverse, an online virtual environment that combines augmented reality, virtual reality, 3D holographic avatars, video, and other forms of communication. As the Metaverse grows, it will provide you with a hyper-real alternative universe in which to coexist.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BPO5NTQh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v67owvk05djjah9c8a3v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BPO5NTQh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v67owvk05djjah9c8a3v.png" alt="VR" width="880" height="459"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mark Zuckerberg, the CEO of the newly renamed Meta (previously Facebook), predicts that the Metaverse's primary capabilities will take five to ten years to become ubiquitous. However, some features of the Metaverse are currently visible. Even if they aren't available to everyone, ultra-fast broadband rates, virtual reality headgear, and persistent always-on online worlds are already available.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-will-we-be-able-to-do-in-the-metaverse"&gt;
  &lt;/a&gt;
  What will we be able to do in the Metaverse?
&lt;/h1&gt;

&lt;p&gt;Things like attending a virtual performance, spending a virtual vacation, viewing or making artwork, and trying on or purchasing digital apparel are just a few examples.&lt;/p&gt;

&lt;p&gt;Imagine a world where you could meet someone and spend a day with them without ever meeting them in the real world; isn't that fascinating?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5yDaJKNg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pp28u4yk3792gzpa51vh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5yDaJKNg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pp28u4yk3792gzpa51vh.png" alt="VR shopping" width="880" height="546"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yes, it can be termed a miracle, but these are all predictions, and predictions always have a small chance of going wrong, so none of these things can be guaranteed.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#will-it-be-as-efficient-as-said"&gt;
  &lt;/a&gt;
  Will it be as efficient as said?
&lt;/h1&gt;

&lt;p&gt;We cannot ignore the issues that the Metaverse can generate, despite all of the benefits it can provide. Imagine someone spending a day off in virtual reality with his family and friends when his connection (internet server) suddenly goes down; the turmoil would be enormous!&lt;/p&gt;

&lt;p&gt;Some tech experts believe that the Metaverse will be able to solve a wide range of problems, but because it will be an online web server, we cannot entirely rely on it. Although the Metaverse would be extremely useful for the next generation of technology, it would unlock numerous features of the web that are currently ignored or unusable.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-metaverse-is-coming"&gt;
  &lt;/a&gt;
  The Metaverse is coming!
&lt;/h1&gt;

&lt;p&gt;The Metaverse has evolved over the last few years from a fantasy future envisioned in numerous works of fiction to an actual reality that exists now, albeit in an early stage of development. The stage has been prepared for the next wave of immersive metaverse applications to emerge, and the underlying technologies are progressing at a rapid pace.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ur1dtCOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pch2b8lsybdu0t872nb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ur1dtCOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pch2b8lsybdu0t872nb.png" alt="F" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's impossible to predict whether we'll see a dismal reality such to that depicted in Snow Crash and the Matrix, or a gamified virtual world replete with nostalgic references like Ready Player One. Perhaps the metaverse will manifest in ways we haven't yet imagined. With the metaverse's future state yet unknown, builders, artists, users, and visionaries must work together to create a user-owned digital realm characterised by decentralisation, immersion, and connectedness.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-ideas-do-you-have-for-the-metaverse"&gt;
  &lt;/a&gt;
  What ideas do you have for the Metaverse?
&lt;/h2&gt;

&lt;p&gt;Let us know in the comment section. We'd love to hear your thoughts.&lt;/p&gt;

&lt;p&gt;Also, don't forget to follow us on &lt;a href="https://twitter.com/GetIntoWeb3"&gt;Twitter&lt;/a&gt; and join the &lt;a href="https://discord.gg/invite/nbbpBG3SCT"&gt;Discord&lt;/a&gt; community to learn more- &lt;a href="https://discord.gg/invite/nbbpBG3SCT"&gt;https://discord.gg/invite/nbbpBG3SCT&lt;/a&gt;&lt;/p&gt;

</description>
      <category>metaverse</category>
      <category>web3</category>
      <category>crypto</category>
      <category>beginners</category>
    </item>
    <item>
      <title>MongoDB Atlas Hackathon:  S/F E-Commerce Creation</title>
      <author>Ryan Collicutt</author>
      <pubDate>Fri, 14 Jan 2022 07:36:44 +0000</pubDate>
      <link>https://dev.to/ryancoll/mongodb-atlas-hackathon-sf-e-commerce-creation-f3b</link>
      <guid>https://dev.to/ryancoll/mongodb-atlas-hackathon-sf-e-commerce-creation-f3b</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Building an E-Commerce platform has never been easier with MongoDB's Atlas Search. You can create custom indexes on your products, get lightning fast results on searches within your database, and use a wide range of popular features, like autocomplete. &lt;/p&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/irenewuu"&gt;@irenewuu&lt;/a&gt; and &lt;a class="mentioned-user" href="https://dev.to/ryancoll"&gt;@ryancoll&lt;/a&gt; present...&lt;/p&gt;

&lt;p&gt;Streetz Footwear:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R_mQeSrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wi21hp8yhlj9tpigpjp5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R_mQeSrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wi21hp8yhlj9tpigpjp5.png" alt="Streetz Footwear Homepage:" width="880" height="709"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h2&gt;

&lt;p&gt;Streetz Footwear is a responsive e-commerce website built with Next.js, React.js, Mongoose, and MongoDB Atlas Search.&lt;br&gt;
Visit the web-app: &lt;a href="https://streetzfootwear.vercel.app/"&gt;Streetz Footwear&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h2&gt;

&lt;p&gt;E-Commerce Creation&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/RyanColl"&gt;
        RyanColl
      &lt;/a&gt; / &lt;a href="https://github.com/RyanColl/E-Commerce-MongoDB-Hackathon-2022"&gt;
        E-Commerce-MongoDB-Hackathon-2022
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Investigate MongoDB's Atlas Search with autocomplete in this stunning E-Commerce Creation.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h2&gt;
E-Commerce Store integrating Atlas Search using MongoDB and NextJS&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.mongodb.com/" rel="nofollow"&gt;MongoDB&lt;/a&gt; is a general purpose, document-based, distributed database built for modern application developers and for the cloud era. This example will show you how to connect to and use MongoDB as your backend for your Next.js app.&lt;/p&gt;
&lt;p&gt;If you want to learn more about MongoDB, visit the following pages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mongodb.com/atlas" rel="nofollow"&gt;MongoDB Atlas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/" rel="nofollow"&gt;MongoDB Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to learn more about NextJS, vistit the following pages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/vercel/next.js/#getting-started"&gt;NextJS Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app" rel="nofollow"&gt;NextJS Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Configuration&lt;/h2&gt;
&lt;h3&gt;
Set up a MongoDB database&lt;/h3&gt;
&lt;p&gt;Set up a MongoDB database either locally or with &lt;a href="https://mongodb.com/atlas" rel="nofollow"&gt;MongoDB Atlas for free&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
Set up environment variables&lt;/h3&gt;
&lt;p&gt;Copy the &lt;code&gt;env.local.example&lt;/code&gt; file in this directory to &lt;code&gt;.env.local&lt;/code&gt; (which will be ignored by Git):&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;cp .env.local.example .env.local&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Set each variable on &lt;code&gt;.env.local&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;MONGODB_URI&lt;/code&gt; - Your MongoDB connection string. If you are using &lt;a href="https://mongodb.com/atlas" rel="nofollow"&gt;MongoDB Atlas&lt;/a&gt; you can find this by clicking the "Connect" button for your cluster.&lt;/li&gt;
&lt;/ul&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/RyanColl/E-Commerce-MongoDB-Hackathon-2022"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#atlas-search"&gt;
  &lt;/a&gt;
  Atlas Search
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#indexes"&gt;
  &lt;/a&gt;
  Indexes
&lt;/h4&gt;

&lt;p&gt;Three Indexes were set up (the maximum for a free cluster) for different purposes for this app.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first index searches our database for a single element of a collection: type.
The type being passed as a parameter is either 'mens', or 'womens', and the database is searched accordingly.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getProductsByType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;$search&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wildcard&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The second index searches our database for a single element of a collection: collectionName.
The collection being passed as a parameter is either 'sport', 'luxury', or 'collectors', and the database is searched accordingly.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getProductsByCollection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;$search&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;collectionName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wildcard&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The third index setup for this app is the most powerful and one I would like to show off for purposes of the hackathon. This index is setup using MongoDB's Atlas Search's &lt;a href="https://docs.atlas.mongodb.com/atlas-search/autocomplete/"&gt;AutoComplete&lt;/a&gt;. Autocomplete allows us to take a complete index of our database, and search through a specific field for products that match the spelling of a word. We can even apply a fuzzy filter, so when users misspell our product names, MongoDB still knows what they mean. The index is as follows:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;atlasSearch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchText&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;$search&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;autocomplete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
              &lt;span class="na"&gt;autocomplete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;searchText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;fuzzy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;maxEdits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;prefixLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The name of this index is autocomplete, and the path we are looking through is the description of the products. We could look through names/titles if we had simpler products like groceries, but with shoe descriptions, Atlas Search uses score based returns to order the products from the query based on their score. Using a simple dropdown, I have placed the products underneath the search bar in a scrollable menu.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#autocomplete-preview"&gt;
  &lt;/a&gt;
  Autocomplete Preview
&lt;/h4&gt;

&lt;p&gt;Autocomplete for "comfort":&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L07DCwrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vez7kma86llwyofptsdh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L07DCwrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vez7kma86llwyofptsdh.png" alt='Autocomplete for "comfort":' width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Autocomplete for "style":&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K4HieEOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rb1fn32efheq9bw1p7kg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K4HieEOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rb1fn32efheq9bw1p7kg.png" alt='Autocomplete for "style":' width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#products-page"&gt;
  &lt;/a&gt;
  Products Page
&lt;/h4&gt;

&lt;p&gt;Streetz Footwear Products Page:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tOLY41Gy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/214wbsa81d3mgj1iynrf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tOLY41Gy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/214wbsa81d3mgj1iynrf.png" alt="Streetz Footwear Products Page:" width="880" height="718"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#individual-product-page"&gt;
  &lt;/a&gt;
  Individual Product Page
&lt;/h4&gt;

&lt;p&gt;Streetz Footwear Individual Product Page:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0irDRFy3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/an6tsq7dobdgtodwinl6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0irDRFy3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/an6tsq7dobdgtodwinl6.png" alt="Streetz Footwear Individual Product Page:" width="880" height="458"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#collaborators"&gt;
  &lt;/a&gt;
  Collaborators
&lt;/h4&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/irenewuu"&gt;@irenewuu&lt;/a&gt; &lt;br&gt;
UX/UI DESIGNER &amp;amp; FRONT END DEV 🎨💻&lt;/p&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/ryancoll"&gt;@ryancoll&lt;/a&gt; &lt;br&gt;
FULL STACK WEB DEV 🥞💻&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tech-stack-%F0%9F%9B%A0"&gt;
  &lt;/a&gt;
  Tech Stack 🛠💻
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Next.js&lt;/li&gt;
&lt;li&gt;React.js&lt;/li&gt;
&lt;li&gt;SCSS&lt;/li&gt;
&lt;li&gt;Mongoose&lt;/li&gt;
&lt;li&gt;MongoDB Atlas Search&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to &lt;a class="mentioned-user" href="https://dev.to/mongodb_staff"&gt;@mongodb_staff&lt;/a&gt; for this opportunity!&lt;/p&gt;

</description>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>What is AWS Community Builders and what's in it for you</title>
      <author>Andra Glavan (she/her)</author>
      <pubDate>Fri, 14 Jan 2022 07:00:52 +0000</pubDate>
      <link>https://dev.to/aws-builders/what-is-aws-community-builders-and-whats-in-it-for-you-1e6a</link>
      <guid>https://dev.to/aws-builders/what-is-aws-community-builders-and-whats-in-it-for-you-1e6a</guid>
      <description>&lt;p&gt;A few days ago the application for the AWS Community Builders program has opened and I happily shared the news on Twitter (@ AndraGlavan) and &lt;a href="https://www.linkedin.com/in/andra-glavan-0003ab69/"&gt;LinkedIn&lt;/a&gt;. Since then, I keep getting DMs like "What exactly is AWS Community Builders program?" and "Could you help me with my application?" and I am delighted to help. &lt;br&gt;
A few of my colleagues have already written some great articles on this topic, but I would like to highlight what the program is about and what you can get from it ✨.&lt;/p&gt;

&lt;p&gt;❗The application is open from January 10th through January 24th EOD Pacific Time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-aws-community-builders-program"&gt;
  &lt;/a&gt;
  What is AWS Community Builders Program
&lt;/h2&gt;

&lt;p&gt;You can read everything about it on the &lt;a href="https://aws.amazon.com/developer/community/community-builders/"&gt;main page&lt;/a&gt;, but basically it is a great way to connect the people from all around the globe (94 countries now) who are activly involved in the AWS community, all in one place. Of course, it will be impossible to manage a program like this if everyone in the AWS space gets in, and this is why only a small percent of the applicants receive the great news. In the last round of applications - October 2021, only 10% of the applicantions were approved. &lt;br&gt;
To stand out you have to really be involved, write more articles, do some Meetup presentations, organize Meetups, have an YouTube channel, a Podcast, be very active on Twitter. You don't have to be doing all of them, you just have to stand out among the applicants. And it's not all about that, the questions cover your motivation for joining, what is your unique perspective, and what are your future plans.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#eager-to-find-out-more"&gt;
  &lt;/a&gt;
  Eager to find out more
&lt;/h6&gt;

&lt;p&gt;To know more about who should apply and how, you can read this &lt;a href="https://dev.to/pawelpiwosz/aws-community-builders-program-1m75"&gt;article&lt;/a&gt; by &lt;a class="mentioned-user" href="https://dev.to/pawelpiwosz"&gt;@pawelpiwosz&lt;/a&gt; &lt;br&gt;
For a more in depth information about the program and some of its benefits, you can read this &lt;a href="https://dev.to/aws-builders/aws-community-builders-program-6kf"&gt;article&lt;/a&gt; by &lt;a class="mentioned-user" href="https://dev.to/andrewbrown"&gt;@andrewbrown&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-in-it-for-you"&gt;
  &lt;/a&gt;
  What's in it for you
&lt;/h2&gt;

&lt;p&gt;It is all about the community ❤️ and it comes with some extra benefits 🎁.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS Commnity Builders is a great community - I've met some of my collegues for the first time &lt;del&gt;this&lt;/del&gt; last year at re:Invent, and it was amazing to start feeling comfortable with people I have actually never met before. Being in the Slack workspace, you get a lot of help and support, but also a chance to do some networking and to make new friends, or just finding out about things you never heard about before 😄.&lt;/li&gt;
&lt;li&gt;Free stuff - Everybody loves free stuff, especially when they are branded with the cloud you love or with the great community logo. You get an Welcome Kit, AWS Credits, exam voucher and some extra things that usually vary.&lt;/li&gt;
&lt;li&gt;Exclusiveness - There are exclusive events with people from AWS and sessions with the AWS Heroes. This is more amazing than I can describe. The chance to do some networking with the Heroes and to be able to attend a presentation from Jeff Barr itself is just beyond awesome 🦄.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#eager-to-find-out-more"&gt;
  &lt;/a&gt;
  Eager to find out more
&lt;/h6&gt;

&lt;p&gt;Then this &lt;a href="https://dev.to/aws-builders/10-benefits-to-joining-aws-community-builders-4cle"&gt;article&lt;/a&gt; on 10 benefits of the program by &lt;a class="mentioned-user" href="https://dev.to/vattybear"&gt;@vattybear&lt;/a&gt; is the right place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this was a quick read that covered the basics of what the AWS Community Builders program is and what benefits it can bring you if you will join. Keep being great and keep trying! If you don't get in easily, doesn't mean you won't get in at all! 🎓&lt;/p&gt;

</description>
      <category>awscommunitybuilders</category>
      <category>aws</category>
      <category>community</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Hashnode is taking over the world</title>
      <author>Chris Bongers</author>
      <pubDate>Fri, 14 Jan 2022 06:39:41 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/hashnode-is-taking-over-the-world-37jf</link>
      <guid>https://dev.to/dailydevtips1/hashnode-is-taking-over-the-world-37jf</guid>
      <description>&lt;p&gt;And it's not a bad thing!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hashnode.com/@dailydevtips/joinme"&gt;Hashnode&lt;/a&gt; for those who don't know, it is a blogging platform for technical articles.&lt;br&gt;
Since the early days, I've been a member, and it has grown massively since then.&lt;/p&gt;

&lt;p&gt;Recently one of the founders shared these impressive statistics on Twitter:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--cFm6-zSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1480406297061126144/6lUNBr8t_normal.jpg" alt="Syed Fazle Rahman profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Syed Fazle Rahman
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/fazlerocks"&gt;@fazlerocks&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Thrilled to share some &lt;a href="https://twitter.com/hashnode"&gt;@hashnode&lt;/a&gt; YoY numbers from a very successful 2021⚡️&lt;br&gt;&lt;br&gt;Blogs:     17K➡️100K (+488%)&lt;br&gt;Articles: 18K➡️73K (+405%)&lt;br&gt;Reads:    5M➡️31M (+600%)&lt;br&gt;Hackathons: 0➡️4&lt;br&gt;Team:             5➡️19&lt;br&gt;Funding: 8.7M&lt;br&gt;Twitter: 43K+&lt;br&gt;Discord: 6K+&lt;br&gt;&lt;br&gt;Thank you to our amazing community. 💙
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      06:49 AM - 10 Jan 2022
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1480431473580675074" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1480431473580675074" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1480431473580675074" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;And right before that Nazanin, announced on Twitter that she would organize a &lt;a href="https://twitter.com/nazanin_ashrafi/status/1479860636385484810"&gt;CSS art challenge&lt;/a&gt;, before I even knew what it was going to be about, I've said yes.&lt;/p&gt;

&lt;p&gt;And here we are. This article describes how I made my CSS artwork for this Hashnode CSS Art Challenge.&lt;/p&gt;

&lt;p&gt;My result looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qNHHvob1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642013095101/kzoVmjFk6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qNHHvob1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642013095101/kzoVmjFk6.gif" alt="Hashnode is taking over the world" width="500" height="505"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: You can try it out at the bottom&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-rules-and-my-idea"&gt;
  &lt;/a&gt;
  The rules and my idea
&lt;/h2&gt;

&lt;p&gt;The rules for this challenge are super simple.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use the Hashnode logo and run it into whatever you think of.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I was trying to fall asleep, but this challenge kept me up. I just couldn't put my finger on what I wanted to create.&lt;/p&gt;

&lt;p&gt;And then it hit me!&lt;/p&gt;

&lt;p&gt;Hashnode is taking over the world!&lt;br&gt;
So let's make a character out of this logo and have it walk around the world.&lt;/p&gt;

&lt;p&gt;My idea is to combine the CSS art I know and try out &lt;a href="https://pokecoder.hashnode.dev/making-pixel-art-with-pure-css"&gt;pixel art&lt;/a&gt;, as that sounds cool to me!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-the-logo"&gt;
  &lt;/a&gt;
  Creating the logo
&lt;/h2&gt;

&lt;p&gt;Let's start with the logo. I'm sure you might think, oh well, you can use a rounded square and put a round div over it, r right?&lt;/p&gt;

&lt;p&gt;And yes, we could do that, but then we can't use backgrounds behind it.&lt;/p&gt;

&lt;p&gt;So I decided to go with a little different approach.&lt;/p&gt;

&lt;p&gt;I've added a div that I called &lt;code&gt;hashnode&lt;/code&gt; and inside created a &lt;code&gt;body&lt;/code&gt; which will hold the logo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.hashnode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;aspect-ratio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;.body&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;27%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2962ff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;-webkit-mask&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;#0000&lt;/span&gt; &lt;span class="m"&gt;28%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="m"&gt;28%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;#0000&lt;/span&gt; &lt;span class="m"&gt;28%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="m"&gt;28%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The magic here is actually in the &lt;code&gt;webkit-mask&lt;/code&gt;. This defines a transparent radial gradient.&lt;br&gt;
This will create a round gap in the body.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: This idea was &lt;a href="https://codepen.io/alvaromontoro/pen/RwLYRpr"&gt;demoed out by Alvaro&lt;/a&gt;. Thank you very much for that.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then I decided to add arms to the character, which would move. The arms are two times the same styling with a different offset.&lt;br&gt;
I've also made sure the right arm is one second delayed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.arm&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#001&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;#001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;70%&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt; &lt;span class="n"&gt;move-arm&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;&amp;amp;:before&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;aspect-ratio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-5%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;-left&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;-right&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see I used the &lt;code&gt;before&lt;/code&gt; selector to add the little round hand-like shapes, which would make the arms look neater.&lt;/p&gt;

&lt;p&gt;This shape is a square box where we color only two sides of a rounded border.&lt;/p&gt;

&lt;p&gt;This is what it looks like if we color it completely.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hr5WLw4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642006228783/QAhF4JPDV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hr5WLw4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642006228783/QAhF4JPDV.png" alt="Arm color" width="174" height="177"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A good thing to note about the arm is this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;transform-origin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;bottom&lt;/span&gt; &lt;span class="nt"&gt;left&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This defines what axis the transform should take place. Setting this to &lt;code&gt;bottom left&lt;/code&gt; allows the rotation to happen on a solid axis, making the arm "swing".&lt;/p&gt;

&lt;p&gt;As for the swing animation goes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;move-arm&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A very straightforward rotating from 45 degrees to 0 and back.&lt;br&gt;
I'm using the scaleY to invert because I started upside down and was too lazy to revert it 😂.&lt;/p&gt;

&lt;p&gt;The legs are a very similar approach, but they are longer, and the shoes are slightly different.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.leg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;45%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt; &lt;span class="n"&gt;move-leg&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;&amp;amp;:before&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;90%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;-left&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;-right&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for the animation, I used the same approach. But with fewer degrees since your legs don't swing as much as your arms.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;move-leg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#meme-glasses-pixel-art"&gt;
  &lt;/a&gt;
  Meme glasses pixel art
&lt;/h2&gt;

&lt;p&gt;I decided to give the character some glasses and meme glasses for that Mather.&lt;/p&gt;

&lt;p&gt;They are perfect for trying out pixel art, as they are pixels.&lt;/p&gt;

&lt;p&gt;The glasses look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.glasses&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;90px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;110px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;130px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;140px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;160px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;170px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;180px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;190px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;90px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;130px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;140px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;150px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;160px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;170px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;180px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;190px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;80px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;90px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;130px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;140px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;160px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;170px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;180px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;190px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;130px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;140px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;160px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;170px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;180px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;60px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;140px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;160px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;170px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This stacking of border shadows allows us to create a pixel-like effect.&lt;/p&gt;

&lt;p&gt;I enjoyed using this and will most likely dedicate a complete article to pixel art and how it works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-the-character-whistle"&gt;
  &lt;/a&gt;
  Making the character whistle
&lt;/h2&gt;

&lt;p&gt;I thought it would be cool to make the character whistle. In this case, it means a musical note comes out of its "hole" (mouth?).&lt;/p&gt;

&lt;p&gt;For this, I used the &lt;code&gt;before&lt;/code&gt; selector on the hashnode div.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.hashnode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;&amp;amp;:before&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'🎵'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5s&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, it plays an infinite &lt;code&gt;notes&lt;/code&gt; animation.&lt;br&gt;
The notes animation looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;75&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;360deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;360deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It starts by setting the opacity to 1 and resetting the rotation.&lt;br&gt;
Then we use a 5% step not to make the animation super fast and rotate the note as we move it upwards.&lt;br&gt;
And eventually, we fade it out.&lt;/p&gt;

&lt;p&gt;This will then re-loop, making it start from 0%.&lt;/p&gt;

&lt;p&gt;I think it turned out to be quite a fantastic addition.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#run-the-world-animation"&gt;
  &lt;/a&gt;
  Run the world animation
&lt;/h2&gt;

&lt;p&gt;The last part is the globe that spins around.&lt;br&gt;
For this, I created a big circle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.world&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;75vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;aspect-ratio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(https://cdn.hashnode.com/res/hashnode/image/upload/v1641971056244/tPSv8apET.png)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15s&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The circle is then filled with a PNG image of the world. You can open the above image to see what it looks like.&lt;/p&gt;

&lt;p&gt;I've added a &lt;code&gt;world&lt;/code&gt; animation that will spin it around. It's important to note the &lt;code&gt;linear&lt;/code&gt; animation so it won't slow down once it's almost complete but move at the same speed all the time.&lt;/p&gt;

&lt;p&gt;The animation itself looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;360deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just a simple from 0 degrees to 360 degrees animation that makes the world go round, and round and round!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finishing-touch"&gt;
  &lt;/a&gt;
  Finishing touch
&lt;/h2&gt;

&lt;p&gt;Go ahead, click the character...&lt;/p&gt;

&lt;p&gt;(Put your music up! 🎵)&lt;/p&gt;

&lt;p&gt;Yes, I decided to add "Daft Punk - Around the world" when clicking the logo.&lt;/p&gt;

&lt;p&gt;For this, we leverage a little bit of JavaScript that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Audio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://download.mp3very.buzz/d/Daft-Punk-Around-The-World.mp3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hashnode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.hashnode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;hashnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paused&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will load a new Audio object, and once we click the logo, it will toggle between playing and pausing the music.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I loved doing this challenge as it allowed me to try out different types of CSS art.&lt;/p&gt;

&lt;p&gt;And I think it came out pretty cool 😂&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/wvrQzMq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;A big shoutout to the following people for all their parts of information around it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nazanin Ashrafi for setting this up! ⚡️&lt;/li&gt;
&lt;li&gt;Alvaro Montoro for the mask setup 💖&lt;/li&gt;
&lt;li&gt;Ale Thomas Ale for the pixel-art idea 👾&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>watercooler</category>
    </item>
  </channel>
</rss>
