<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Becoming a Junior++ Developer</title>
      <author>Simon Barker</author>
      <pubDate>Mon, 05 Jul 2021 19:01:52 +0000</pubDate>
      <link>https://dev.to/allthecode/becoming-a-junior-developer-2epa</link>
      <guid>https://dev.to/allthecode/becoming-a-junior-developer-2epa</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6MKgmY6k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rj4ilzp0q79eu2gj55w9.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6MKgmY6k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rj4ilzp0q79eu2gj55w9.jpeg" alt="Person sat on table cross legged with a laptop"&gt;&lt;/a&gt;&lt;br&gt;
When I started in my first dev job I hit on the idea of being a Junior++ developer. It was clear that the expectations on a junior developer were incredibly low and that there was plenty of time and room to explore and develop. I made sure to finish my tickets and get the work I needed to done, but I also did three things to set myself apart as more than a typical junior that I think anyone can do.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-i-made-time-to-work-with-other-juniors"&gt;
  &lt;/a&gt;
  1. I made time to work with other juniors.
&lt;/h3&gt;

&lt;p&gt;Working with senior developers is not uncommon, it's the best way to learn about the code base. But taking time to work with other juniors is a great way to mutually learn on something that you are likely equally lost on.&lt;/p&gt;

&lt;p&gt;Working with a senior can become a very passive experience as they are so far ahead of you that you just sit and learn and absorb. Juniors tend to be ahead in some areas and behind in others, so we would unblock each others thinking at different points but the gap in knowledge was small and so no one felt like they were left out.&lt;/p&gt;

&lt;p&gt;It was a very rewarding and engaging process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-fix-user-pains-that-are-too-small-to-make-it-on-to-the-backlog"&gt;
  &lt;/a&gt;
  2. Fix user pains that are too small to make it on to the backlog
&lt;/h3&gt;

&lt;p&gt;Making time to speak to users directly let me fix a few tiny bug bears for people in the wider business. Things like a list being ordered the wrong way or a form clearing on error are minor enough to never make it to the top of the backlog but can be fixed by pretty much anyone with a spare 15 minutes.&lt;/p&gt;

&lt;p&gt;Fixing these little annoyances shows initiative and also gains you fans in the wider business as you fixed their specific problem. It also gives you great experience working with users and owning a feature (no matter how small) from start to finish.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-do-something-to-save-your-team-or-department-time"&gt;
  &lt;/a&gt;
  3. Do something to save your team or department time
&lt;/h3&gt;

&lt;p&gt;We had an API that caused a number of support tickets per week. This was about 30 minutes of time for devs to fix. Not massive but annoying. The issue lay in the way the API fetched data from the database and an assumption made about the data in the request URL query params.&lt;/p&gt;

&lt;p&gt;I spent five days across two sprints rewriting the logic in that API to fix that assumption and remove those support tickets.&lt;/p&gt;

&lt;p&gt;Fixing this made me realise that the production logging wasn't good enough. So I proposed to my manager that I have a go at making a logging module that could be added to all out APIs and persist logs in one place. She gave me the ok and over 4 weeks, in between main ticket work, I created a Node logger that we could inject into all our APIs.&lt;/p&gt;

&lt;p&gt;I worked with a senior developer on the logger and got it into production within a few days of it being completed.&lt;/p&gt;

&lt;p&gt;Find a small pain point for you team and fix it, they will love you for it.&lt;/p&gt;

&lt;p&gt;These three things combined are a great way to build a good reputation in you team and the business. They also help break up your day a little a give some variety of work that can sometimes be lacking in development roles.&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Towards the Personal Potential of Software</title>
      <author>Jeff Lindsay</author>
      <pubDate>Mon, 05 Jul 2021 18:34:18 +0000</pubDate>
      <link>https://dev.to/progrium/towards-the-personal-potential-of-software-5g5a</link>
      <guid>https://dev.to/progrium/towards-the-personal-potential-of-software-5g5a</guid>
      <description>&lt;p&gt;Hello everybody!&lt;/p&gt;

&lt;p&gt;Since starting work under &lt;a href="http://progrium.com"&gt;Progrium Technology Company&lt;/a&gt;, I've had a single objective: to build a system called Tractor. It's what I've been slowly approaching in my dense 22 year career as an independent programmer. The Tractor System is still hard for me to describe at this stage, but its goal is to make building production-grade personal software systems like building with Legos: fast and fun.&lt;/p&gt;

&lt;p&gt;After a difficult year heads-down in 2020, I started posting here in January with the intention of sharing and officially releasing components I've been working on that are building up to Tractor. Besides warming up for when I'd eventually talk about Tractor, I wanted people to see how I make independently useful building blocks towards an ideal. That's a core part of the Tractor philosophy.&lt;/p&gt;

&lt;p&gt;Let's review what I've shared so far, and then set up what's coming in the next 6 months.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U8r5grIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k38vrxqkzvmr9ek72l3i.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U8r5grIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k38vrxqkzvmr9ek72l3i.gif" alt="MacDriver"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first big release of the year was the &lt;a href="https://github.com/progrium/macdriver"&gt;macdriver&lt;/a&gt; project, which got a significant response on Hacker News. It gives us Objective-C and Apple framework bindings for Go, letting you build simple Apple apps entirely from Go. That wasn't possible before, so it was a little exciting, but it was early. The native Go APIs included for commonly used Foundation and Cocoa classes were far from complete. They could still be used if you knew what you were doing, but with an ideal of total coverage of Apple frameworks, that wouldn't be enough. There were also unresolved issues just deciding how to best manage memory and pointers, which I knew would fall on me to figure out and take some time.&lt;/p&gt;

&lt;p&gt;Luckily I've since gotten a colleague involved in the company, and he's been helping push &lt;a href="https://github.com/progrium/macdriver"&gt;macdriver&lt;/a&gt; towards a real beta. Part of this was made possible by a project I spun out of macdriver and &lt;a href="https://dev.to/progrium/apple-api-schemas-for-code-generation-and-more-1phj"&gt;posted about&lt;/a&gt;, though again in a very early state. That project was &lt;a href="https://github.com/progrium/macschema"&gt;macschema&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With the &lt;a href="https://github.com/progrium/macschema"&gt;macschema&lt;/a&gt; toolchain, you can generate API schemas about any Apple framework, class, function, etc based on their documentation and header declarations. This is useful for us in generating framework bindings in macdriver, but it would be useful for any project doing similar work, such as bindings for other languages. This sort of approach will play a big part in how Tractor will integrate with "whatever we want" down the line. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MUL03ZK6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plpudhz4v7dponsucy91.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MUL03ZK6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plpudhz4v7dponsucy91.gif" alt="topframe"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Along the way, I released a few demos for macdriver to make clear the possibilities and provide reference examples. One of them I spun off into a standalone project called &lt;a href="https://github.com/progrium/topframe"&gt;topframe&lt;/a&gt;, which is also serving as a test bed for how we are doing cross-platform support. More on that in a moment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i9aga02O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2xo2fuvpkt30kfsrprr.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i9aga02O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2xo2fuvpkt30kfsrprr.jpeg" alt="Multiplexing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unrelated to macdriver, I released a protocol called &lt;a href="https://github.com/progrium/qmux"&gt;qmux&lt;/a&gt; with &lt;a href="https://dev.to/progrium/the-history-and-future-of-socket-level-multiplexing-1d5n"&gt;a post&lt;/a&gt; explaining why this (but really any) muxing protocol, including and especially QUIC, is such a great primitive for network programming. The project came with two implementations, Go and TypeScript, with more on the way. The post about it was the first explainer article I'd done in a while and people liked it. This was important because the idea behind it was really more valuable than the protocol itself, but regardless we still need implementations of it to exist. To show the idea in action, I built a &lt;a href="https://github.com/progrium/qmux/tree/main/demos/groktunnel"&gt;130 line version of Ngrok&lt;/a&gt;, which turned into &lt;a href="https://dev.to/progrium/building-your-own-ngrok-in-130-lines-2lif"&gt;a great post&lt;/a&gt; walking through how it works. &lt;/p&gt;

&lt;p&gt;That brings us to today, half way through 2021. Let's talk about what's coming.&lt;/p&gt;

&lt;p&gt;More exciting than qmux is what we built on top of it, which is called &lt;em&gt;qtalk&lt;/em&gt;. This is my meticulously designed, re-written-several-times network/IPC programming stack. While not &lt;em&gt;that&lt;/em&gt; different from just JSON-RPC with pluggable codecs, its two unique features are callbacks and streams. Callbacks means its bi-directional, either side can expose or call methods. Just that alone is something rare in existing RPC stacks, but necessary for callbacks. And while streaming RPC is not new, our streams are full virtual connections, so you can stream more RPC results, arbitrary byte streams, or tunnel something else like a database connection. I'll share more about the possibilities when it's released.&lt;/p&gt;

&lt;p&gt;So in the second half of 2021, we'll see qtalk, we'll see a major update to macdriver, and then with those two parts we can release &lt;em&gt;shelldriver&lt;/em&gt;. This is a cross platform API to platform specific resources like windows, dialogs, menus, etc. It's about native GUI shell integration, it's not about having every native UI component. In fact, for app UI it really focuses on windows and webviews, a la Electron. Unlike Electron, it can be used from any language that has a qmux and qtalk implementation. The result should be a simple "Electron but as a library" that you can use from Go and other languages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oj38Q3kl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7qq2kea7hvdk83ughuk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oj38Q3kl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7qq2kea7hvdk83ughuk.png" alt="shelldriver"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once shelldriver is out I will be able to finally start talking about the first &lt;em&gt;real&lt;/em&gt; piece of the Tractor system: Tractor Toolkit. I hope to have at least a public demo by the end of the year. The Toolkit is already being shown to friends and sponsors. The work I've shared so far is just the tip of the iceberg.&lt;/p&gt;

&lt;p&gt;Which reminds me ...&lt;/p&gt;

&lt;p&gt;I really, really have to thank my &lt;a href="https://github.com/sponsors/progrium"&gt;sponsors&lt;/a&gt;. As things are ramping up, I'm starting to work with more people and this is all self funded. Not only does sponsorship support all this open source work, but sponsors get early access to Tractor Toolkit &lt;em&gt;and&lt;/em&gt; see more of what I'm up to.&lt;/p&gt;

&lt;p&gt;Also to you, thanks for reading and following along. I'll be back soon with more releases.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For more posts like this sent directly to your inbox and to stay on top of what I'm up to, get on the list at &lt;a href="http://progrium.com"&gt;progrium.com&lt;/a&gt; ✌️&lt;/em&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>devlog</category>
      <category>software</category>
    </item>
    <item>
      <title>Create template repositories from just a single JSON file! What is Dgen?</title>
      <author>ProCode</author>
      <pubDate>Mon, 05 Jul 2021 18:25:27 +0000</pubDate>
      <link>https://dev.to/procode/create-template-repositories-from-just-a-single-json-file-what-is-dgen-3dek</link>
      <guid>https://dev.to/procode/create-template-repositories-from-just-a-single-json-file-what-is-dgen-3dek</guid>
      <description>&lt;p&gt;Hey all! haven't written something in a while, so I thought I would put my thoughts together about a recent project I built called &lt;a href="https://github.com/ProCode2/dgen"&gt;Dgen&lt;/a&gt;. This post might as well become a blog on how to create Dgen in rust. Let's keep writing!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-it"&gt;
  &lt;/a&gt;
  What is it?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Dgen&lt;/code&gt; is a utility that converts repositories to a JSON file. So basically useful for your starter code repositories. Which you might be storing in Github right now as template repositories.&lt;/p&gt;

&lt;p&gt;so let's say we have a directory that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dgen-blog
├── assets
├── index.html
├── main.js
└── style.css

1 directory, 3 files
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The JSON file that &lt;code&gt;Dgen&lt;/code&gt; will generate for this directory will look like this:&lt;br&gt;
&lt;em&gt;&lt;code&gt;dgen-blog.json&lt;/code&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"dgen-blog"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"files"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"index.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;html lang=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;en&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;..."&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"main.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"console.log(..."&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"style.css"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;".body {&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;..."&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"folders"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"assets"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"files"&lt;/span&gt;&lt;span class="p"&gt;:[],&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"folders"&lt;/span&gt;&lt;span class="p"&gt;:[]&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The shape of the JSON file will make sense in a moment I promise!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-it-useful"&gt;
  &lt;/a&gt;
  Is it useful?
&lt;/h2&gt;

&lt;p&gt;Umm not sure, I am just experimenting with the idea. It works fine for most huge starter repositories. If you keep a collection of these JSON files locally, you would be able to generate you repositories offline without any hassle and also super fast!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-install-it"&gt;
  &lt;/a&gt;
  How to install it?
&lt;/h2&gt;

&lt;p&gt;For now, if you have rust installed you can clone the &lt;a href="https://github.com/ProCode2/dgen"&gt;repository&lt;/a&gt; and run the following commands to generate the executable binary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# clone the repo&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/ProCode2/dgen.git

&lt;span class="c"&gt;# get in the project diretory&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;dgen

&lt;span class="c"&gt;# build the binary&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;cargo build &lt;span class="nt"&gt;--release&lt;/span&gt;

&lt;span class="c"&gt;# check if its working&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;./target/release/dgen-rs &lt;span class="nt"&gt;-V&lt;/span&gt;

&lt;span class="c"&gt;# for !windows&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ln&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; ./target/release/dgen-rs /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-use-it"&gt;
  &lt;/a&gt;
  How to use it?
&lt;/h2&gt;

&lt;p&gt;You'd use the binary to either create a blueprint from a directory or create a directory from a blueprint.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Here's how to create a blueprint from a directory&lt;/strong&gt;: Go inside the directory you want to create a blueprint of and run this command:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# creates a JSON blueprint&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dgen-rs &lt;span class="nt"&gt;-b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'd see a &lt;code&gt;&amp;lt;directory_name&amp;gt;.json&lt;/code&gt; file will be created in your directory if the command runs successfully. Now you can store this JSON file wherever you are collecting all the JSON blueprints and forget about the directory, the JSON file can create it again anyways! Let's see how to do that now.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Here's how to create a directory from a blueprint&lt;/strong&gt;: Go to the path where you will create the directory and run this command:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# creates a directory&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;dgen-rs &lt;span class="nt"&gt;-g&lt;/span&gt; /path/to/the/json/blueprint
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-shape-of-the-json-file"&gt;
  &lt;/a&gt;
  The Shape of the JSON file
&lt;/h2&gt;

&lt;p&gt;Here's the core idea - Every single directory has a name, few files with their contents, and a few folders with the same things mentioned above.(RECURSION!)&lt;/p&gt;

&lt;p&gt;So the base json looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"files"&lt;/span&gt;&lt;span class="p"&gt;:[],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"folders"&lt;/span&gt;&lt;span class="p"&gt;:[]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it grows to a weird looking JSON file, which works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-issues-with-this-concept"&gt;
  &lt;/a&gt;
  Some issues with this concept
&lt;/h2&gt;

&lt;p&gt;Currently the structure for storing files is this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"main.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"console.log(......."&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which means, contents can store only valid &lt;code&gt;utf-8&lt;/code&gt; characters. So how do we store images, videos, audios or even binaries. I am not sure if any starter repository have any of those. But I still want to solve this, which is a problem I created on the first place lol. For the images I might store a base64 string in &lt;code&gt;content&lt;/code&gt;? I am still thinking on this idea. Also I am open to suggestions as well! Let me know if you have any idea to solve this issue! or any comments on the project as well!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-raw-dgen-endraw-in-next-article"&gt;
  &lt;/a&gt;
  How to create &lt;code&gt;Dgen&lt;/code&gt; in next article
&lt;/h2&gt;

&lt;p&gt;Well If I keep adding how to create &lt;code&gt;Dgen&lt;/code&gt; yourself in this article it will get pretty big! So I will be uploading a fresh new article on that topic! Stay tuned!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>codenewbie</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>All you need to know about Apex Legends
</title>
      <author>johnmettys</author>
      <pubDate>Mon, 05 Jul 2021 18:17:11 +0000</pubDate>
      <link>https://dev.to/johnmettys/all-you-need-to-know-about-apex-legends-3k1n</link>
      <guid>https://dev.to/johnmettys/all-you-need-to-know-about-apex-legends-3k1n</guid>
      <description>&lt;p&gt;&lt;span&gt;All you need to know about Apex Legends&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Apex Legends is available today for free, and to succeed in the Apex Games, you'll need to remain alert, utilise your wits, and stick close to your pals. Victory, on the other hand, favours the prepared, and having a few handy hints in your back pocket might be the distinction between failure and sweet, lovely win.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Check out some essential &lt;/span&gt;&lt;a href="https://apex.legionfarm.com/"&gt;&lt;span&gt;Apex Gaming coaching &lt;/span&gt;&lt;/a&gt;&lt;span&gt;tips &amp;amp; tactics to assist you get started and conquer the battlefield.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Pick a good Legendary who is a good fit for your playing style&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;All participants in the Apex Arena are on an equal footing, and the Legends are similarly matched in terms of height, speed, and armament. Because their skills distinguish them, you'll want to choose a Legend who compliments your team and suits your chosen playstyle.&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Keep your team close by&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;In Apex Legends, where you enter the battlefield with mounted between two on your side, teamwork is crucial to your success. By mixing your talents, you can keep each other safe while outplaying your enemies. Wraith, for instance, may throw her squad right on top of unprepared opponents with a well-placed Dimensional Rift, while Corrosive can shield allies by utilising Nox money to drive away foes.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stay in Touch with Your Fellow players Using Smart Communications&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Across an in-game mechanism that allows you to ping helpful things and places on your colleagues' screens, you may send them crucial information – and vice versa.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;If you've already connected to a microphone, you can pinpoint the location of gear components (and what they are), indicate dangers, and notify your colleagues which way you're headed. Take use of this to ensure that your coworkers see what you see but still have the most up-to-date information.&lt;/span&gt; &lt;/p&gt;

&lt;p&gt;&lt;span&gt;Familiarize yourself with the venue&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;All Apex Matches take place in Kings Canyon, a dangerous playground consisting of abandoned military bases and approaching wildlife. There are a variety of terrain types here, ranging from wide-open plains to a swamp filled with destructible objects to a huge desert filled with derelict strongholds. Knowing how to move, where to locate the finest treasure, and where to find the centers of activity are all crucial pieces of information.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;This is particularly true as the Ring begins to contract. The arena is surrounded by a massive Ring that shrinks at random times throughout the encounter, in true battle royale manner. You must act quickly to gather all of the materials you require before it closes in on you, inflicting damage for every second you are outside its boundary. Understanding your surroundings will aid you in making quicker judgments and manoeuvring more efficiently.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Nothing should be thrown away&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;You rarely realize what you'll find out in the arena, so don't be too picky about the caches you uncover. Body armour, weapon connections, backpack upgrades that let you carry more stuff, and other useful things are strewn throughout the battlefield for you to find. The supply chain will warn you if a gun or piece of equipment is greater than what you currently have, preventing you from taking lower-tier treasure. You won't risk grabbing anything you can't use in a panic this way.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;You and your buddies can assist one another by pointing out item placements as you find them. The tagged system maintains track of an item's scarcity level, allowing you to snag a higher-level piece of gear you would otherwise overlook. Also, plunder fallen opponents; they'll leave a cache when you take them out, and it's typically the greatest treasure around. Keep a close eye out since you never know when a single piece of armour will come to your rescue.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

</description>
      <category>apex</category>
    </item>
    <item>
      <title>Evolution of a data system</title>
      <author>Eric P Green</author>
      <pubDate>Mon, 05 Jul 2021 18:16:00 +0000</pubDate>
      <link>https://dev.to/ericpgreen/evolution-of-a-data-system-oei</link>
      <guid>https://dev.to/ericpgreen/evolution-of-a-data-system-oei</guid>
      <description>&lt;p&gt;The holy grail of data work is putting data science into production. But without an extensive data engineering background, you might not know how to build a production data system. In this post, I'll show how you can turn a machine learning model into a production data app by laying out the high-level system design of a simple Reddit analytics tool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-analyze-the-seriousness-of-reddit-posts"&gt;
  &lt;/a&gt;
  Let’s analyze the seriousness of Reddit posts
&lt;/h2&gt;

&lt;p&gt;Reddit is a serious place for serious people, but sometimes subreddits become corrupted by miscreants who spread useless banter. To avoid such unpleasantries, we want to build a web app that can advise us of the seriousness of different subreddits.&lt;/p&gt;

&lt;p&gt;For our project, we’ll use machine learning to score the seriousness of every individual Reddit post. We’ll aggregate the scores by subreddit and time, and we’ll expose the insights via an API that we can integrate with a frontend. We want our insights to update in near real-time so we’re reasonably up-to-date with the latest posts.&lt;/p&gt;

&lt;p&gt;So we’re clear on what the system should do, here’s the API interface:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/subreddit/[name]&lt;/code&gt;: Returns a) a subreddit’s posts and their seriousness scores, b) an all-time seriousness score, and c) hourly seriousness scores for the last week&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/subreddits&lt;/code&gt;: Returns all subreddits we track and the all-time seriousness score for each&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s dive in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-1-building-the-data-ingestion-engine"&gt;
  &lt;/a&gt;
  Phase 1: building the data ingestion engine
&lt;/h2&gt;

&lt;p&gt;To start, we want to extract posts from Reddit and write it into our own storage system. Our storage system will have two components: a message queue and a database.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Message queue&lt;/strong&gt;: We’ll use a message queue to both store and enrich data in real-time. We’ll use RabbitMQ to keep things simple.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Database&lt;/strong&gt;: We’ll use a database to permanently store and serve the data. Our API server will get its data from here. We’ll use Postgres, the do-it-all relational data store.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With our storage system in place (in theory), let’s write the first scripts of our data pipeline.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Reddit scraper&lt;/strong&gt;: This script polls the Reddit API every second and writes new posts to a &lt;code&gt;posts&lt;/code&gt; topic in our message queue.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;posts&lt;/code&gt; consumer&lt;/strong&gt;: This script reads data from the &lt;code&gt;posts&lt;/code&gt; topic and inserts it into our Postgres database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We need a way to deploy and run our code in production. We like to do that with a CI/CD pipeline and a Kubernetes cluster.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;CI/CD pipeline&lt;/strong&gt;: On every git commit, we’ll build our code as a Docker container, push it to a container registry, and deploy it to Kubernetes. GitHub Actions makes this easy to set up.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Kubernetes cluster&lt;/strong&gt;: Kubernetes is a platform for running containerized code. Kubernetes can also store our database and Reddit credentials, and inject them into our containers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll use a cloud provider to provision the message queue, database and Kubernetes cluster. We prefer managed services when they’re available, so we won’t deploy the message queue or database directly on Kubernetes.&lt;/p&gt;

&lt;p&gt;Here’s a diagram of what our system looks like so far:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---nYzNDIW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p06zvae1rmc6jfqesdp8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---nYzNDIW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p06zvae1rmc6jfqesdp8.png" alt="Phase 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once all this is up and running, we need to validate that the data is flowing. An easy way to do that is to connect to our Postgres database and run a few SQL queries to check that new posts are continually added. When everything looks good, we’re ready to move on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-2-training-the-machine-learning-model"&gt;
  &lt;/a&gt;
  Phase 2: training the machine learning model
&lt;/h2&gt;

&lt;p&gt;Now that we have the raw data in Postgres, we’re ready to develop our moneymaker, the &lt;em&gt;seriousness&lt;/em&gt; scoring model. For this example, we’ll keep things simple and use a Jupyter notebook that pulls historical posts from the Postgres database.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Jupyter notebook&lt;/strong&gt;: Inside the notebook, we label some training data, train and assess our model, and save the model to a file. Then our production code will be able to load the file to make inferences.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that there are other ways to train a machine learning model. Fancy “MLaaS'' and “MLOps” tools can help you continuously train, monitor and deploy models. If you want to integrate with one of these tools, you’ll likely connect your database to enable training, and you’ll ping an API to make an inference.&lt;/p&gt;

&lt;p&gt;Here’s our system augmented with our ML development environment:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8c-i0rOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f13oe9uos0zei9dk0fle.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8c-i0rOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f13oe9uos0zei9dk0fle.png" alt="Phase 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-3-applying-the-model-and-aggregating-the-scores"&gt;
  &lt;/a&gt;
  Phase 3: applying the model and aggregating the scores
&lt;/h2&gt;

&lt;p&gt;Now it’s time to build the workers that will apply the model to new posts, and write out the resulting seriousness scores. That’s two different scripts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;posts&lt;/code&gt; enrichment&lt;/strong&gt;. This script consumes the Reddit &lt;code&gt;posts&lt;/code&gt; topic, applies the predictive model, and writes the data back to another topic &lt;code&gt;posts-scores&lt;/code&gt;, which will contain post IDs and seriousness scores.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;post-scores&lt;/code&gt; consumer&lt;/strong&gt;. This script reads data from the &lt;code&gt;posts-scores&lt;/code&gt; topic and inserts them into (a separate table in) our Postgres database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next up, we want to aggregate our results by subreddit and time. We’ll use dbt, which allows us to schedule periodic SQL queries. We’ll schedule two aggregating queries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Roll up new score&lt;/strong&gt;s: We’ll run this query every five minutes. On every run, it’ll calculate the mean scores of new posts and save the results to a table &lt;code&gt;subreddit-scores-5min&lt;/code&gt; in Postgres.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Compute total score&lt;/strong&gt;: This is a heavier query, so we’ll only run it once a day. It will compute each subreddit’s total seriousness score (across all time) and save the results to a table &lt;code&gt;subreddit-scores-total&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that, we have all the data that we want for our app available in Postgres. Here’s what the system looks like now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6yu-sfTH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wis8nvudot1r8woqxn7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6yu-sfTH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wis8nvudot1r8woqxn7.png" alt="Phase 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-4-completing-a-web-app"&gt;
  &lt;/a&gt;
  Phase 4: completing a web app
&lt;/h2&gt;

&lt;p&gt;Our last step is creating the interfaces for accessing our Reddit insights. We need to set up a backend API server and write our frontend code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;API server&lt;/strong&gt;. The API server will fetch the insights from Postgres and serve the results to the frontend. It’ll implement the routes we specified in the introduction. We’ll build the API server in Python using the FastAPI framework.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Frontend client&lt;/strong&gt;. The frontend will contain tables and charts for viewing and searching the insights. We’ll implement it with React and use a fancy charting library like Recharts.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Deploy the API server and frontend code to Kubernetes, and we have ourselves a full stack analytics application! Here’s what the final design looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kZDIqg_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yn9fgil1180htbnen4vp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kZDIqg_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yn9fgil1180htbnen4vp.png" alt="Phase 4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reviewing-the-stack"&gt;
  &lt;/a&gt;
  Reviewing the stack
&lt;/h2&gt;

&lt;p&gt;Our Reddit analytics app is now ready to share with the world (at least on paper). We’ve set up a full stack that spans data ingest, model training, real-time predictions and aggregations, and a frontend to explore the results. It’s also a reasonably future proof setup. We can do more real-time enrichment thanks to the message queue, and we can do more aggregations thanks to dbt.&lt;/p&gt;

&lt;p&gt;But the system does have its limitations. For scalability, we’re limited by the throughput of Postgres and RabbitMQ. For latency, we’re limited by the batched nature of dbt. To improve, we could add BigQuery as a data warehouse, use Kafka as our message queue, and add Flink as a real-time stream processor, but these powerful systems also come at the cost of greater complexity.&lt;/p&gt;

&lt;p&gt;While there are always different tools you can use for the same job, this data system design is fairly standard. I hope it gives you perspective on what it takes to build a live analytics-centric web application.&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>datascience</category>
      <category>database</category>
      <category>dataengineering</category>
    </item>
    <item>
      <title>[VechaiUI]: A set of high-quality React components with the built-in dark theme using TailwindCSS.</title>
      <author>tranbathanhtung</author>
      <pubDate>Mon, 05 Jul 2021 17:57:04 +0000</pubDate>
      <link>https://dev.to/tranbathanhtung/vechaiui-a-set-of-high-quality-react-components-with-the-built-in-dark-theme-using-tailwindcss-722</link>
      <guid>https://dev.to/tranbathanhtung/vechaiui-a-set-of-high-quality-react-components-with-the-built-in-dark-theme-using-tailwindcss-722</guid>
      <description>&lt;p&gt;Hello guys, Today I am very excited to share my open-source project Vechai-UI: A set of high-quality React components with the built-in dark mode. &lt;/p&gt;

&lt;p&gt;Github: &lt;a href="https://github.com/vechai/vechaiui"&gt;https://github.com/vechai/vechaiui&lt;/a&gt; &lt;br&gt;
Document: &lt;a href="https://www.vechaiui.com/"&gt;https://www.vechaiui.com/&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Feature overview: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;30+ React components &amp;amp; Pre-designed headlessui + radix-ui components.&lt;/li&gt;
&lt;li&gt;Written in TypeScript. &lt;/li&gt;
&lt;li&gt;Built-in dark mode. &lt;/li&gt;
&lt;li&gt;Powerful theme customization. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please take a look and let me know what you think.  &lt;/p&gt;

</description>
      <category>react</category>
      <category>tailwindcss</category>
      <category>css</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Battery Included Philosophy, python</title>
      <author>YusufAdel</author>
      <pubDate>Mon, 05 Jul 2021 17:45:10 +0000</pubDate>
      <link>https://dev.to/yusufadel/battery-included-philosophy-python-5cee</link>
      <guid>https://dev.to/yusufadel/battery-included-philosophy-python-5cee</guid>
      <description>&lt;p&gt;Python has a “batteries included” philosophy. This is best seen through the sophisticated and robust capabilities of its larger packages. &lt;/p&gt;

&lt;p&gt;Feel free to share with us your experience in handling jobs with one or Built-in modules that will help in day-to-day work.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>python</category>
      <category>productivity</category>
    </item>
    <item>
      <title>ML Lens: AWS Well-Architected Framework Summary</title>
      <author>Salah Elhossiny</author>
      <pubDate>Mon, 05 Jul 2021 17:29:57 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/ml-lens-aws-wellarchitected-framework-summary-48e8</link>
      <guid>https://dev.to/awsmenacommunity/ml-lens-aws-wellarchitected-framework-summary-48e8</guid>
      <description>&lt;ul&gt;
&lt;li&gt;This document describes the Machine Learning Lens for the AWS Well-Architected Framework. The document includes common machine learning (ML) scenarios and identifies key elements to ensure that your workloads are architected according to best practices.&lt;/li&gt;
&lt;li&gt;While designing ML workloads, you should use applicable best practices and questions from the AWS Well-Architected Framework whitepaper.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-the-machine-learning-lens-is-based-on-five-pillars-operational-excellence-security-reliability-performance-efficiency-and-cost-optimization-aws-provides-multiple-core-components-for-ml-workloads-that-enable-you-to-design-robust-architectures-for-your-ml-applications"&gt;
  &lt;/a&gt;
  - The Machine Learning Lens is based on five pillars: operational excellence, security, reliability, performance efficiency, and cost optimization. AWS provides multiple core components for ML workloads that enable you to design robust architectures for your ML applications.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There are two areas that you should evaluate when you build a machine learning workload:

&lt;ol&gt;
&lt;li&gt;Machine Learning Stack &lt;/li&gt;
&lt;li&gt;Phases of ML Workloads &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;When you build an ML-based workload in AWS, you can choose from different levels of abstraction to ML Services ML Frameworks and Infrastructure. &lt;/li&gt;
&lt;li&gt; The AI Services level provides fully managed services that enable you to quickly add ML capabilities&lt;/li&gt;
&lt;li&gt;The ML Frameworks and Infrastructure level is intended for expert machine learning practitioners.&lt;/li&gt;
&lt;li&gt;Building and operating a typical ML workload is an iterative process, and consists of multiple phases, like in the following figure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R-KzgJ-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/124374931-72457f00-dc9f-11eb-894d-fc75d3d8b5f8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R-KzgJ-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/124374931-72457f00-dc9f-11eb-894d-fc75d3d8b5f8.png" alt="crisp-dm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-business-goal-identification-phase"&gt;
  &lt;/a&gt;
  In Business Goal Identification phase:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;You will want to validate that ML is the appropriate approach to deliver your business goal.&lt;/li&gt;
&lt;li&gt;You will need training data to train and benchmark your ML model, but you also need data from the business to evaluate the value of an ML solution.&lt;/li&gt;
&lt;li&gt;Understand business requirements&lt;/li&gt;
&lt;li&gt;Determine a project’s ML feasibility and data requirements&lt;/li&gt;
&lt;li&gt;Evaluate the cost of data acquisition, training, inference, and wrong predictions&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#ml-problem-framing-phase"&gt;
  &lt;/a&gt;
  ML Problem Framing Phase:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;You have to establish an observable and quantifiable performance metric for the project, such as accuracy. &lt;/li&gt;
&lt;li&gt;You need to formulate the ML question in terms of inputs, desired outputs, and the performance metric to be. &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#data-preparation-phase"&gt;
  &lt;/a&gt;
  Data Preparation phase:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;AWS provides several services that you can use to annotate your data, extract, transfer, and load (ETL) and prepare your data, choose an algorithm, train it, tune and optimize it for deployment, and make ETL jobs on a fully managed, scale-out Apache Spark environment to load your data to its destination. &lt;/li&gt;
&lt;li&gt;Amazon SageMaker Inference Pipeline deploys pipelines so that you can pass raw input data and through the data preparation steps. &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#data-visualization-phase"&gt;
  &lt;/a&gt;
  Data Visualization phase:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;AWS provides several services that you can use to visualize and analyze data at scale. &lt;/li&gt;
&lt;li&gt;Amazon Athena is a fully managed interactive query service that you can use to query data in Amazon. &lt;/li&gt;
&lt;li&gt;Amazon Kinesis Data Analytics provides real-time analytic capabilities by analyzing streaming data. &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#feature-engineering-phase"&gt;
  &lt;/a&gt;
  Feature Engineering phase:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Feature engineering is a process to select and transform variables when creating a predictive model. &lt;/li&gt;
&lt;li&gt;Feature extraction is the process of creating new features from existing features. &lt;/li&gt;
&lt;li&gt;You can run feature extraction and transformation jobs using ETL services, such as AWS Glue or Amazon. &lt;/li&gt;
&lt;li&gt;You need to remove redundant and irrelevant features (to reduce the noise in the data and reduce correlations). &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#model-training-phase"&gt;
  &lt;/a&gt;
  Model Training phase:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Amazon SageMaker provides several popular built-in algorithms that can be trained data. &lt;/li&gt;
&lt;li&gt;After you select the algorithm, you can start training on Amazon SageMaker with an API call.&lt;/li&gt;
&lt;li&gt;Amazon SageMaker also enables automatic model tuning through hyperparameter tuning jobs.&lt;/li&gt;
&lt;li&gt;Amazon SageMaker Debugger provides visibility into the ML training process by monitoring, recording. &lt;/li&gt;
&lt;li&gt;Amazon SageMaker Autopilot simplifies the ML training process by handling the data preprocessing. &lt;/li&gt;
&lt;li&gt;Closely monitor your training metrics, because model performance may degrade over time. &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#model-and-business-evaluation-phase"&gt;
  &lt;/a&gt;
  Model and Business Evaluation phase:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;After the model has been trained, evaluate it to determine its performance and accuracy against the business expectations for the project.&lt;/li&gt;
&lt;li&gt; Plan and execute Production Deployment (Model Deployment and Model Inference). &lt;/li&gt;
&lt;li&gt; After a model is trained, tuned, and tested, you can deploy the model into production, and make inferences (predictions) against the model. &lt;/li&gt;
&lt;li&gt;Amazon SageMaker Neo enables ML models to be trained once and then run anywhere in the cloud and compiled model. &lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#general-design-principles"&gt;
  &lt;/a&gt;
  General Design Principles
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Decouple model training and evaluation from model hosting. &lt;/li&gt;
&lt;li&gt;Select resources that best align with specific phases in the data science lifecycle by separating model training, model evaluation, and model hosting resources.&lt;/li&gt;
&lt;li&gt;Detect data drift over time, continuously measure the accuracy of inference after the model is in&lt;/li&gt;
&lt;li&gt;Automate training and evaluation pipeline&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#build-intelligent-applications-using-aws-ai-services"&gt;
  &lt;/a&gt;
  Build Intelligent Applications using AWS AI Services
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;When developers use these services, they don’t have to manage the data preparation, data analysis, etc. &lt;/li&gt;
&lt;li&gt;Amazon Comprehend is a natural language processing (NLP) service that uses ML to help you uncover and parts of speech, and because the service understands how positive or negative the text is. &lt;/li&gt;
&lt;li&gt;Amazon Lex is a service for building conversational interfaces into any application using voice and text. &lt;/li&gt;
&lt;li&gt;Amazon Polly is a text-to-speech service that uses advanced deep learning technologies to synthesize speech that sounds like a human. &lt;/li&gt;
&lt;li&gt;Amazon Rekognition makes it easy to add image and video analysis to your applications. &lt;/li&gt;
&lt;li&gt;Amazon Transcribe is an automatic speech recognition (ASR) service that makes it easy for you to add speech-to-text capability to your applications files stored in Amazon S3 and have the service return a text file of the transcribed speech. &lt;/li&gt;
&lt;li&gt;Amazon Translate is a neural machine translation service that delivers fast, high-quality, and affordable translations. &lt;/li&gt;
&lt;li&gt;AWS Acceptable Use Policy (AUP) prohibits customers from using any AWS service, including Amazon Rekognition, to violate the law, and customers who violate our AUP will not be able to use our services.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#reference-architecure"&gt;
  &lt;/a&gt;
  Reference Architecure
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CxIP0bNs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/124392779-b06e8d00-dcf7-11eb-94bd-2c0c6aa0e213.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CxIP0bNs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/124392779-b06e8d00-dcf7-11eb-94bd-2c0c6aa0e213.png" alt="1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create an Amazon S3 bucket to temporarily store images and enable encryption on the bucket. &lt;/li&gt;
&lt;li&gt;Customer images captured in the retail store are uploaded to the Amazon S3 bucket.&lt;/li&gt;
&lt;li&gt;Each image uploaded to Amazon S3 triggers an AWS Lambda function, and you can use facial analysis. &lt;/li&gt;
&lt;li&gt;The demographic data is stored in .csv format in a second Amazon S3 bucket.&lt;/li&gt;
&lt;li&gt;Amazon Athena reads and loads the demographic data from the .csv files for queries.&lt;/li&gt;
&lt;li&gt;To make sure that confidence levels are used appropriately, use Views in Amazon In this example, the object of interest is an image and Amazon Rekognition is used to analyze the image.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#use-managed-ml-services-to-build-custom-ml-models"&gt;
  &lt;/a&gt;
  Use Managed ML Services to Build Custom ML Models
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--evp-Nstr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/124393253-e14fc180-dcf9-11eb-9ec6-f5809a4673bb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--evp-Nstr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/124393253-e14fc180-dcf9-11eb-9ec6-f5809a4673bb.png" alt="1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Amazon S3 is used as a data lake that holds the raw, modeled, enhanced, and transformed data.&lt;/li&gt;
&lt;li&gt;Data transformation code is hosted on AWS Lambda to prepare the raw data for consumption. &lt;/li&gt;
&lt;li&gt;Data transformation code is hosted on AWS Lambda.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#machine-learning-on-edge-and-on-multiple-platforms"&gt;
  &lt;/a&gt;
  Machine Learning on Edge and on Multiple Platforms
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ID7cXJnr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/124393374-836fa980-dcfa-11eb-8ce1-3f162c7d015e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ID7cXJnr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/124393374-836fa980-dcfa-11eb-8ce1-3f162c7d015e.png" alt="2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Performing inference locally on connected devices running AWS IoT Greengrass reduces latency and cost.&lt;/li&gt;
&lt;li&gt;Instead of sending all device data to the cloud to perform ML inference and make a prediction, you can run inference directly on the device. &lt;/li&gt;
&lt;li&gt;Data gathered from the inference running on AWS IoT Greengrass can be sent back to Amazon Sagemaker. &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#reference-architecture"&gt;
  &lt;/a&gt;
  Reference Architecture
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;a Bird Species Identification on the Edge use case is shown. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gFD_tkJ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/124393593-71dad180-dcfb-11eb-89fa-2b96e9a420ae.png" alt="1"&gt;
&lt;/li&gt;
&lt;li&gt;In this architecture, an object detection model is trained on Amazon SageMaker and deployed to an edge device.&lt;/li&gt;
&lt;li&gt;The edge device used for this use case is AWS DeepLens, which is a deep-learning-enabled video camera.

&lt;ul&gt;
&lt;li&gt;Gather, understand, and prepare the bird image dataset&lt;/li&gt;
&lt;li&gt;Train the object detection model using the Amazon SageMaker built-in algorithm&lt;/li&gt;
&lt;li&gt;Host the model using an Amazon SageMaker endpoint&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#deploy-the-model-to-the-edge-on-aws-deeplens"&gt;
  &lt;/a&gt;
  Deploy the model to the edge on AWS DeepLens:
&lt;/h3&gt;

&lt;p&gt;a. Convert the model artifacts before you deploy to AWS DeepLens&lt;br&gt;
  b. Optimize the model from your AWS Lambda function on AWS DeepLens&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Perform model inference and bird species identification on AWS DeepLens&lt;/li&gt;
&lt;li&gt;If you want to deploy an ML model to a platform other than the specific platform that you trained it for, you must first optimize the model using Sagemaker Neo. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#model-deployment-approaches"&gt;
  &lt;/a&gt;
  Model Deployment Approaches
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Amazon SageMaker provides model hosting services for model deployment, and provides an HTTPS endpoint where the ML model is available to provide inferences.&lt;/li&gt;
&lt;li&gt;Specify the name of one or more models in production variants, and the ML compute instances&lt;/li&gt;
&lt;li&gt;Amazon SageMaker launches the ML compute instances and deploys the model, or models, as model can then use the endpoint to make inferences.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#standard-deployment"&gt;
  &lt;/a&gt;
  Standard Deployment
&lt;/h3&gt;

&lt;p&gt;The following is a sample production variant configuration for a standard deployment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;ProductionVariants&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;
 &lt;span class="s"&gt;'InstanceType'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'ml.m4.xlarge'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'InitialInstanceCount'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'ModelName'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;model_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'VariantName'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'AllTraffic'&lt;/span&gt;
&lt;span class="p"&gt;}])&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#bluegreen-deployments"&gt;
  &lt;/a&gt;
  Blue/Green Deployments
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;A live production environment (blue) that runs version n. &lt;/li&gt;
&lt;li&gt;While the blue environment (version n) is processing the live traffic, you test the next release (version n + 1)
&lt;/li&gt;
&lt;li&gt;If success, then the live traffic is switched to the green environment.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#canary-deployment"&gt;
  &lt;/a&gt;
  Canary Deployment
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;You can validate a new release with minimal risk by first deploying to a small group of your users. &lt;/li&gt;
&lt;li&gt;Other users continue to use the previous version until you’re satisfied with the new release. &lt;/li&gt;
&lt;li&gt;Then, you can gradually roll the new release out to all users.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#ab-testing"&gt;
  &lt;/a&gt;
  A/B Testing
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;A/B testing is similar to canary testing, but has larger user groups and a longer time scale, typically days or even weeks. &lt;/li&gt;
&lt;li&gt;To begin, configure the settings for both models to balance traffic between the models equally (50/50) and make sure that both models have identical instance configurations. &lt;/li&gt;
&lt;li&gt;After you have monitored the performance of both models with the initial setting of equal weights, you can either gradually change the traffic weights to put the models out of balance (60/40, 80/20, etc.). &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following is a sample production variant configuration for A/B testing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="n"&gt;ProductionVariants&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="s"&gt;'InstanceType'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'ml.m4.xlarge'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'InitialInstanceCount'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'ModelName'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'model_name_a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'VariantName'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'Model-A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'InitialVariantWeight'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="s"&gt;'InstanceType'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'ml.m4.xlarge'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'InitialInstanceCount'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'ModelName'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'model_name_b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'VariantName'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'Model-B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'InitialVariantWeight'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#wellarchitected-framework-pillars"&gt;
  &lt;/a&gt;
  Well-Architected Framework Pillars
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#operational-excellence-pillar"&gt;
  &lt;/a&gt;
  Operational Excellence Pillar
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It includes the ability to run, monitor, and gain insights into systems to deliver business value and to continually improve supporting processes and procedures.&lt;/li&gt;
&lt;li&gt;AWS Operational Excellence best practices are designed to ensure ML workloads are operating efficiently. &lt;/li&gt;
&lt;li&gt;Identify the end-to-end architecture and operational model early. &lt;/li&gt;
&lt;li&gt;Establish a model retraining strategy. &lt;/li&gt;
&lt;li&gt;There are three best practice areas for operational excellence in the cloud (Prepare, Operate, Evolve). &lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#prepare-area"&gt;
  &lt;/a&gt;
  Prepare area
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Provide high-level cross training between teams that will develop models and APIs, and teams. &lt;/li&gt;
&lt;li&gt;Establish cross functional teams to ensure models and APIs can be effectively integrated into a production solution. &lt;/li&gt;
&lt;li&gt;As you iteratively develop your ML models using different algorithms and hyperparameters for each algorithm, many model training experiments and model versions result.&lt;/li&gt;
&lt;li&gt;Tracking these models and tracing any given model's lineage is important not only for auditing and compliance, but also to perform root cause analysis of degrading model performance.&lt;/li&gt;
&lt;li&gt;In AWS, Amazon SageMaker Experiments allows you to organize and track iterations of ML models. &lt;/li&gt;
&lt;li&gt;Amazon SageMaker Experiments automatically captures input parameters, configurations, and output artifacts for each model and stores them as experiments.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#operate-area"&gt;
  &lt;/a&gt;
  Operate area
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;When hosting a model endpoint for predictions, the endpoint should have monitoring and alerts and metrics that measure the operational health of the underlying compute resources. &lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#evolve-area"&gt;
  &lt;/a&gt;
  Evolve area
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;There is a need to retrain a model using new or updated data to ensure that the model is able incorporate additional data into a ML model and to avoid model drift (predictions degradation). &lt;/li&gt;
&lt;li&gt;Define metrics that are indicative of model performance and accuracy. &lt;/li&gt;
&lt;li&gt;In AWS, AI Services such as Amazon Translate are automatically trained on new data so that you are able to take advantage of a model that is updated by AWS to improve model performance over time.&lt;/li&gt;
&lt;li&gt;Key considerations for learnings should include evaluation of the model across the following dimensions: 

&lt;ol&gt;
&lt;li&gt;Business Evaluation (accordinf to some criteria such as KPIs). &lt;/li&gt;
&lt;li&gt;Model Evaluation (Accuracy, Precision, Recall, etc.)&lt;/li&gt;
&lt;li&gt;System Evaluation (Resources capabilities: CPU, memory intensive consumption, etc). &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#security-pillar"&gt;
  &lt;/a&gt;
  Security Pillar
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It includes the ability to protect information, systems, and assets while delivering business value through risk assessments and mitigation strategies.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#design-principles-in-security"&gt;
  &lt;/a&gt;
  Design Principles in Security
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Restrict Access to ML systems (using AWS IAM, Macie, etc)&lt;/li&gt;
&lt;li&gt;Ensure Data Governance / Regularatory Compliance &lt;/li&gt;
&lt;li&gt;Enforce Data Lineage&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#reliability-pillar"&gt;
  &lt;/a&gt;
  Reliability Pillar
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It includes the ability of a system to recover from infrastructure or service disruptions, dynamically acquire computing resources to meet demand, and mitigate disruptions such as misconfigurations or transient network issues.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#design-principles-in-reliability"&gt;
  &lt;/a&gt;
  Design Principles in Reliability
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Manage changes to model input using automation &lt;/li&gt;
&lt;li&gt;Train once and deploy across environments &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#performance-efficiency-pillar"&gt;
  &lt;/a&gt;
  Performance Efficiency Pillar
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It r focuses on the efficient use of computing resources to meet requirements and how to maintain that efficiency as demand changes and technologies evolve.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#design-principles"&gt;
  &lt;/a&gt;
  Design Principles
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Optimize compute for your ML workload ( GPUs )&lt;/li&gt;
&lt;li&gt;Define latency and network bandwidth performance requirements for your models &lt;/li&gt;
&lt;li&gt;Continuously monitor and measure system performance (memory, compute, netework, etc)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;## Cost Optimization Pillar&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Itincludes the continual process of refinement and improvement of a system over its entire lifecycle. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;### Design Principles&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use managed services to reduce cost of ownership&lt;/li&gt;
&lt;li&gt;Experiment with small datasets&lt;/li&gt;
&lt;li&gt;Right size training and model hosting instances&lt;/li&gt;
&lt;li&gt;Account for inference architecture based on consumption patterns&lt;/li&gt;
&lt;li&gt;Define overall ROI and opportunity cost &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/wellarchitected/latest/machine-learning-lens/wellarchitected-machine-learning-lens.pdf#welcome"&gt; Original Whitepaper &lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>machinelearning</category>
      <category>design</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Building a HTTP Server from scratch: Understanding Request &amp; Response</title>
      <author>Sebastien Filion</author>
      <pubDate>Mon, 05 Jul 2021 17:18:09 +0000</pubDate>
      <link>https://dev.to/sebastienfilion/building-a-http-server-from-scratch-understanding-request-response-4120</link>
      <guid>https://dev.to/sebastienfilion/building-a-http-server-from-scratch-understanding-request-response-4120</guid>
      <description>&lt;p&gt;Oh, hey there!&lt;/p&gt;

&lt;p&gt;I'm glad you made it to this second post of the "Build the System: HTTP server" series.&lt;br&gt;
This post is dedicated to decoding HTTP requests and encoding the response. I will also, offer a reliable way to test&lt;br&gt;
our code for a more resilient project.&lt;br&gt;
If you haven't read the first post of the series yet, I think you might want to. &lt;a href="https://dev.to/sebastienfilion/understanding-the-http-protocol-10kc"&gt;Just click here to read it.&lt;/a&gt;&lt;br&gt;
I'll wait patiently for your return.&lt;/p&gt;

&lt;p&gt;This article is a transcript of a Youtube video I made.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uHDNYYrbHcg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Alright, now that I know we're all on the same page, let's write some code.&lt;br&gt;
For this project, I will use JavaScript and Deno, but the concepts don't change no matter what language or runtime you &lt;br&gt;
are using.&lt;br&gt;
Also one last disclaimer: this project first aim is to educate it will in no way be complete or the most performant!&lt;br&gt;
I will discuss specifically the improvements we can bring to make it more performant and I will go through various &lt;br&gt;
iteration with that in mind. At the end of the project, if there are part worth salvaging, I will replace the essential&lt;br&gt;
parts.&lt;br&gt;
All that to say, just enjoy the ride.&lt;/p&gt;

&lt;p&gt;The first thing that I need to do is to announce listening on a port.&lt;br&gt;
The incoming connection will be represented by a Readable/Writable resource. &lt;br&gt;
First, I will need to read from the resource a specific amount of bytes. For this example, I will read around a KB.&lt;br&gt;
The variable &lt;code&gt;xs&lt;/code&gt; is a &lt;code&gt;Uint8Array&lt;/code&gt;. &lt;a href="https://dev.to/sebastienfilion/dealing-with-typedarray-and-utf-8-encoded-characters-506a"&gt;I already wrote an article about this&lt;/a&gt; but long story short, a Typed Array is an array&lt;br&gt;
that can only hold a specific amount of bit per item. In this case we need 8 bits (or one byte) array because you need 8 bits&lt;br&gt;
to encode a single UTF-8 character.&lt;/p&gt;

&lt;p&gt;🐙 You will find the code for this post here: &lt;a href="https://github.com/i-y-land/HTTP/tree/episode/02"&gt;https://github.com/i-y-land/HTTP/tree/episode/02&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a convenience, I will decode the bytes to a string and log the result to the console.&lt;br&gt;
Finally, I will encode a response and write it to the resource.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// scratch.js&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TextDecoder&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TextEncoder&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;`HTTP/1.1 200 OK\r\nContent-Length: 12\r\nContent-Type: text/plain\r\n\r\nHello, World`&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, I will run the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;deno run --allow-net="0.0.0.0:8080" scratch.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On a different terminal session I can use &lt;code&gt;curl&lt;/code&gt; to send an HTTP request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl localhost:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the server's terminal, we can see the request, and on the client's terminal we can see the response's body:&lt;br&gt;
"Hello, World"&lt;/p&gt;

&lt;p&gt;Great!&lt;/p&gt;

&lt;p&gt;To get this started on the right foot, I will refactor the code into a function named &lt;code&gt;serve&lt;/code&gt; in a file called &lt;br&gt;
&lt;code&gt;server.js&lt;/code&gt;. This function will take a listener and a function that takes a &lt;code&gt;Uint8Array&lt;/code&gt; and returns a Promise of a &lt;br&gt;
&lt;code&gt;Uint8Array&lt;/code&gt;!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// library/server.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;serve&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subarray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that the &lt;code&gt;read&lt;/code&gt; function returns the number of byte that was read. So we can use the &lt;code&gt;subarray&lt;/code&gt; method to pass&lt;br&gt;
a lense on the appropriate sequence to the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// cli.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;serve&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./server.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;$decoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TextDecoder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$decoder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$decoder&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;$encoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TextEncoder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;encode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$encoder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$encoder&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;requestLine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requestLine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;separatorIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lines&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;separatorIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="nx"&gt;hs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
              &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;enumerable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*/*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
          &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;plain/text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;`HTTP/1.1 200 OK\r\nContent-Length: 12\r\nContent-Type: text/plain\r\n\r\nHello, World`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;`HTTP/1.1 204 No Content\r\nContent-Length: 0\r\n\r\n`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;`HTTP/1.1 404 Not Found\r\nContent-Length: 0\r\n\r\n`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that I have an way to parse the headers, I think it's a good opportunity to officialize all of this and write a new&lt;br&gt;
utility function and the appropriate tests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// library/utilities.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parseRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\r\n\r\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;requestLine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requestLine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ls&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;hs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;enumerable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// library/utilities_test.js&lt;/span&gt;

&lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;parseRequest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`GET / HTTP/1.1\r\nHost: localhost:8080\r\nAccept: */*\r\n\r\n`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;localhost:8080&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*/*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;parseRequest: with body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;`POST /users HTTP/1.1\r\nHost: localhost:8080\r\nAccept: */*\r\n\r\n{"fullName":"John Doe"}`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;localhost:8080&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*/*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`{"fullName":"John Doe"}`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that I have a &lt;code&gt;parseRequest&lt;/code&gt; function, logically I need a new function to stringify the response...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// library/utilities.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;statusCodes&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./status-codes.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;normalizeHeaderKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replaceAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(?&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;=^|-&lt;/span&gt;&lt;span class="se"&gt;)[&lt;/span&gt;&lt;span class="sr"&gt;a-z&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stringifyHeaders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;hs&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\r\n&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;normalizeHeaderKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stringifyResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="s2"&gt;`HTTP/1.1 &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;statusCodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;]}${&lt;/span&gt;
    &lt;span class="nx"&gt;stringifyHeaders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\r\n\r\n&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// library/utilities_test.js&lt;/span&gt;

&lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;normalizeHeaderKey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;normalizeHeaderKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;normalizeHeaderKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Location&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Location&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;normalizeHeaderKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content-type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;normalizeHeaderKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cache-Control&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cache-Control&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stringifyResponse&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content-type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content-length&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stringifyResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;`HTTP/1.1 200 OK\r\nContent-Type: application/json\r\nContent-Length: 23\r\n\r\n{"fullName":"John Doe"}`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So now, we have everything we need to refactor our handler function and make it more concise and declarative.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;serve&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./library/server.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;parseRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;stringifyResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./library/utilities.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*/*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
          &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;plain/text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="nx"&gt;stringifyResponse&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content-length&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content-type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/plain&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="p"&gt;}),&lt;/span&gt;
            &lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringifyResponse&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;204&lt;/span&gt; &lt;span class="p"&gt;})),&lt;/span&gt;
          &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;stringifyResponse&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content-length&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So at this we can deal with any simple request effectively. To wrap this up and prepare the project for future iteration,&lt;br&gt;
I will add a test for the &lt;code&gt;serve&lt;/code&gt; function. Obviously, this function is impossible to keep pure and to test without &lt;br&gt;
complex integration tests -- which I keep for later. &lt;br&gt;
An actual connection is a bit figety so I thought I could mock it using a file as the resource since files are &lt;br&gt;
readable/wriatable.&lt;br&gt;
The first thing I did is to write a function to factorize an async iterator and purposely make it break after the first&lt;br&gt;
iteration. &lt;br&gt;
After that, I create a file with read/write permissions. With that, I can write the HTTP request, then move the cursor&lt;br&gt;
back to the beginning of the file for the &lt;code&gt;serve&lt;/code&gt; function to read back. Within the handler function, I make some &lt;br&gt;
assertions on the request for sanity's sake, then flush the content and move the cursor back to the beginning before &lt;br&gt;
writing a response.&lt;br&gt;
Finally, I can move the cursor back to the beginning one last time, to read the response, make one last assertion then&lt;br&gt;
cleanup to complete the test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// library/server_test.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;assertEquals&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://deno.land/std@0.97.0/testing/asserts.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parseRequest&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./utilities.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;serve&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./server.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;factorizeConnectionMock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;rid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asyncIterator&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;serve&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;/.buffer`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`GET /users/1 HTTP/1.1\r\nAccept: */*\r\n\r\n`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SeekMode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connectionMock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;factorizeConnectionMock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;connectionMock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s2"&gt;`The request method was expected to be &lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;. Got &lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/users/1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s2"&gt;`The request path was expected to be &lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;/users/1&lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;. Got &lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*/*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ftruncate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SeekMode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fullName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="s2"&gt;`HTTP/1.1 200 OK\r\nContent-Type: image/png\r\nContent-Length: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\r\n\r\n&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SeekMode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;zs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;zs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;zs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subarray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="s2"&gt;`HTTP/1.1 200 OK\r\nContent-Type: image/png\r\nContent-Length: 23\r\n\r\n{"fullName":"John Doe"}`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;/.buffer`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;At this point we have a good base to work from. Unfortunately our server is a bit limitted, for example, if a request&lt;br&gt;
is larger than a KB, we'd be missing part of the message, that means no upload or download of medium size files.&lt;br&gt;
That's what I plan to cover on the next post. This will force us to be a little bit more familiar with &lt;br&gt;
manipulation of binary bytes.&lt;/p&gt;

&lt;p&gt;At any rate, if this article was useful to you, hit the like button, leave a comment to let me know or best of all, &lt;br&gt;
follow if you haven't already!&lt;/p&gt;

&lt;p&gt;Ok bye now...&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>deno</category>
      <category>node</category>
      <category>http</category>
    </item>
    <item>
      <title>The 8020 Principle: You don't need to know everything to get started.</title>
      <author>Swastik Yadav</author>
      <pubDate>Mon, 05 Jul 2021 17:18:05 +0000</pubDate>
      <link>https://dev.to/swastikyadav/the-8020-principle-you-don-t-need-to-know-everything-to-get-started-351k</link>
      <guid>https://dev.to/swastikyadav/the-8020-principle-you-don-t-need-to-know-everything-to-get-started-351k</guid>
      <description>&lt;p&gt;Beginners often put too much pressure on learning it all quickly. All the tips, tricks, frameworks, and libraries.&lt;/p&gt;

&lt;p&gt;I believe that we should first make our fundamentals strong. And the fundamentals for web development are HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8020-principle"&gt;
  &lt;/a&gt;
  8020 Principle
&lt;/h2&gt;

&lt;p&gt;8020 Principle also known as Pareto principle. This principle states that 80% of results come from only 20% of the input in any given field.&lt;/p&gt;

&lt;p&gt;While working on several different coding projects I myself have noticed that we use the same 20% concepts most of the time.&lt;/p&gt;

&lt;p&gt;Only sometimes, we have to go beyond that 20%. I have always learned it on the way.&lt;/p&gt;

&lt;p&gt;So, learn that 20% to get started and learn everything else on the way.&lt;/p&gt;

&lt;p&gt;Programming is not tough, it is just huge. Learn Enough to be dangerous.&lt;/p&gt;




&lt;p&gt;If you believe in this principle and want to learn enough (20%) CSS, to get the job done, and build pixel-perfect webpages from scratch.&lt;/p&gt;

&lt;p&gt;Join my &lt;a href="https://8020lessons.in/"&gt;8020 NewsLetter&lt;/a&gt;, where I share everything you need to know, and nothing you don't.&lt;/p&gt;

&lt;p&gt;Thanks a lot&lt;/p&gt;

</description>
      <category>motivation</category>
      <category>webdev</category>
      <category>css</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Open Source projects in Flutter</title>
      <author>Aditya Thakur</author>
      <pubDate>Mon, 05 Jul 2021 17:09:55 +0000</pubDate>
      <link>https://dev.to/adityathakur/open-source-projects-in-flutter-4gpe</link>
      <guid>https://dev.to/adityathakur/open-source-projects-in-flutter-4gpe</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-are-some-open-source-projects-to-contribute-to-in-flutter"&gt;
  &lt;/a&gt;
  What are some open source projects to contribute to in Flutter?
&lt;/h1&gt;

&lt;p&gt;Open Source is for everyone! But, starting out you must be at a loss of projects to contribute to. However good the GitHub search might be, it is difficult to find good projects that are beginner-friendly with community support.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fear no more.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here, I have listed some of the projects from a number of open-source programs that you can contribute to!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#upcharika"&gt;
  &lt;/a&gt;
  Upcharika
&lt;/h2&gt;

&lt;p&gt;A unique flutter application aimed at helping people getting their vitals using Photoplethysmography and Computer Vision.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/smaranjitghose"&gt;
        smaranjitghose
      &lt;/a&gt; / &lt;a href="https://github.com/smaranjitghose/Upcharika"&gt;
        Upcharika
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A unique flutter application aimed at helping people getting their vitals using Photoplethysmography and Computer Vision
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/smaranjitghose/Upcharika/main/./readme_assets/banner.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_7dcTcEC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/smaranjitghose/Upcharika/main/./readme_assets/banner.jpg" alt="Banner" width="540" height="360"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A unique flutter application aimed at helping people getting their vitals using Photoplethysmography and Computer Vision&lt;/p&gt;
&lt;h2&gt;
Current Goals:&lt;/h2&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Use the camera and flash sensors to calculate Heart Rate&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Use the camera and flash sensors to calcuate SP02&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Make a dashboard for storing periodic readings&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 User Profile&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Login Page&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Sign Up Page&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Splash Screen&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Firebase/Supabase Intergration for Authentication&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Generate Reports&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Our hard-working Project Maintainers👨‍🏫:&lt;/h3&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a rel="noopener noreferrer" href="https://avatars.githubusercontent.com/u/46641503?v=4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HX3vC7VG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/46641503%3Fv%3D4" alt=""&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a rel="noopener noreferrer" href="https://avatars.githubusercontent.com/u/40017559?v=4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_hpEkUrs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/40017559%3Fv%3D4" alt=""&gt;&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/smaranjitghose"&gt;Smaranjit Ghose&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/anushbhatia"&gt;Anush Bhatia&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h4&gt;
Our valuable Contributors👩‍💻👨‍💻 :&lt;/h4&gt;
&lt;a href="https://github.com/smaranjitghose/Upcharika/graphs/contributors"&gt;
  &lt;img src="https://camo.githubusercontent.com/4e8cbda2ab4e3924860c64fe926f42df90b6145628a0990b968246d1d5816682/68747470733a2f2f636f6e7472696275746f72732d696d672e7765622e6170702f696d6167653f7265706f3d736d6172616e6a697467686f73652f557063686172696b61"&gt;
&lt;/a&gt;
&lt;h2&gt;
Documents related to the project:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/smaranjitghose/Upcharika/main/./LICENSE"&gt;LICENSE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/smaranjitghose/Upcharika/main/./CODE_OF_CONDUCT.md"&gt;CODE OF CONDUCT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/smaranjitghose/Upcharika/main/./CONTRIBUTING.MD"&gt;CONTRIBUTION GUIDELINES&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/smaranjitghose/Upcharika/main/./CHANGELOG.md"&gt;CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
References:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt; Kanva, A.K., Sharma, C.J. and Deb, S., 2014, January. Determination of SpO 2 and heart-rate using smartphone camera. In Proceedings of The 2014 International Conference on Control, Instrumentation, Energy and Communication (CIEC) (pp. 237-241). IEEE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;
&lt;pre&gt;&lt;code&gt;   Bolkhovsky, J.B., Scully, C.G. and Chon, K.H., 2012, August. Statistical analysis of heart rate and heart rate variability monitoring through the use of smart phone cameras. In&lt;/code&gt;&lt;/pre&gt;…&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/smaranjitghose/Upcharika"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#sheheroes"&gt;
  &lt;/a&gt;
  SheHeroes
&lt;/h2&gt;

&lt;p&gt;A Women And Child Safety App.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/shagun25"&gt;
        shagun25
      &lt;/a&gt; / &lt;a href="https://github.com/shagun25/SheHeroes"&gt;
        SheHeroes
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      SheHeroes- A Women And Child Safety App
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/56549294/108184515-5054c100-7131-11eb-83f8-fba6530601d9.png"&gt;&lt;img width="50%" height="50%" alt="SheHeroes" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gut_53YL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/56549294/108184515-5054c100-7131-11eb-83f8-fba6530601d9.png"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4af88702911baf5a98f7274e0224116a0b22822d5db5ef4f07fb316fc8fd54fe/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f73686167756e32352f5368654865726f6573"&gt;&lt;img src="https://camo.githubusercontent.com/4af88702911baf5a98f7274e0224116a0b22822d5db5ef4f07fb316fc8fd54fe/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f73686167756e32352f5368654865726f6573" alt="Issues"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8d9699012e888ba435e05d0eac4d9de3e04af3b17dd539e4f72c90dd986cd923/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f73686167756e32352f5368654865726f6573"&gt;&lt;img src="https://camo.githubusercontent.com/8d9699012e888ba435e05d0eac4d9de3e04af3b17dd539e4f72c90dd986cd923/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f73686167756e32352f5368654865726f6573" alt="Pull Requests"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/a8b8e408737b3964b88e68a84506bd55930a281f41eabb98e050863742974060/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f73686167756e32352f5368654865726f6573"&gt;&lt;img src="https://camo.githubusercontent.com/a8b8e408737b3964b88e68a84506bd55930a281f41eabb98e050863742974060/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f73686167756e32352f5368654865726f6573" alt="Forks"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/e72c68216a59c9b93c9bb4a95c46a084706ba94c18eae92802f1f52a64fb60f6/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f73686167756e32352f5368654865726f6573"&gt;&lt;img src="https://camo.githubusercontent.com/e72c68216a59c9b93c9bb4a95c46a084706ba94c18eae92802f1f52a64fb60f6/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f73686167756e32352f5368654865726f6573" alt="Stars"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/a00263c880c59d82181833b5140bb391954bb144c4748c6309c6e5c49ee09443/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7265706f2d73697a652f73686167756e32352f5368654865726f65732e7376673f6c6162656c3d5265706f25323073697a65267374796c653d666c61742d737175617265"&gt;&lt;img src="https://camo.githubusercontent.com/a00263c880c59d82181833b5140bb391954bb144c4748c6309c6e5c49ee09443/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7265706f2d73697a652f73686167756e32352f5368654865726f65732e7376673f6c6162656c3d5265706f25323073697a65267374796c653d666c61742d737175617265" alt=""&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h1&gt;
🅂🄷🄴🄷🄴🅁🄾🄴🅂 - Women Safety App&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://forthebadge.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/74c68997445423bb43aecd572d760067203b0a53e29f548413a2c4b495cde7b0/68747470733a2f2f666f7274686562616467652e636f6d2f696d616765732f6261646765732f6275696c742d62792d646576656c6f706572732e737667" alt="forthebadge"&gt;&lt;/a&gt;
&lt;a href="https://forthebadge.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7998890254268d8ed476c9f66d3fa59d21dd354d2090036083c82af4cda2a0eb/68747470733a2f2f666f7274686562616467652e636f6d2f696d616765732f6261646765732f6275696c742d776974682d6c6f76652e737667" alt="forthebadge"&gt;&lt;/a&gt;
&lt;a href="https://forthebadge.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/629483928f7a50cbe8e4b2889b2e132508f7aef4ee27409250d261a14f6f47a8/68747470733a2f2f666f7274686562616467652e636f6d2f696d616765732f6261646765732f6275696c742d776974682d737761672e737667" alt="forthebadge"&gt;&lt;/a&gt;
&lt;a href="https://forthebadge.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3e5ec9824b526db11aa763144b37b51311c8dd18d1487b77898f59c6e1c39b8c/68747470733a2f2f666f7274686562616467652e636f6d2f696d616765732f6261646765732f666f722d796f752e737667" alt="forthebadge"&gt;&lt;/a&gt;
&lt;a href="https://forthebadge.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1686d6c857ddd6e94bc8454118e39d00afe8940c43ed478bcfce8b17725f76da/68747470733a2f2f666f7274686562616467652e636f6d2f696d616765732f6261646765732f6f70656e2d736f757263652e737667" alt="forthebadge"&gt;&lt;/a&gt;
&lt;a href="https://forthebadge.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c947c197127f4e91e0a7b9d0015ad0ce83a2a2b7c57a6cd57d209987b76120b4/68747470733a2f2f666f7274686562616467652e636f6d2f696d616765732f6261646765732f636865636b2d69742d6f75742e737667" alt="forthebadge"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="user-content-content"&gt;
 🗂 CONTENT:&lt;/h2&gt;
&lt;div class="highlight highlight-source-diff position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-md"&gt;&lt;span class="pl-md"&gt;-&lt;/span&gt; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - &lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;📌&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/shagun25/SheHeroes/main/#CrossWinterOfCode21"&gt;Cross WinterOfCode 21&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;📌&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/shagun25/SheHeroes/main/#Inspiration"&gt;Inspiration&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;📌&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/shagun25/SheHeroes/main/#TechStack"&gt;Tech Stack&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;📌&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/shagun25/SheHeroes/main/#Features"&gt;Features&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;📌&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/shagun25/SheHeroes/main/#Howtogetstarted?"&gt;How to get started&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;📌&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/shagun25/SheHeroes/main/#Stepstofollow"&gt;Steps to follow &lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;📌&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/shagun25/SheHeroes/main/#DevelopedBy"&gt;Developed By&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;📌&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/shagun25/SheHeroes/main/#ScreenShots"&gt;ScreenShots&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;📌&lt;/code&gt; &lt;a href="https://raw.githubusercontent.com/shagun25/SheHeroes/main/#FeaturesWeDemand"&gt;Features We Demand&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class="highlight highlight-source-diff position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-md"&gt;&lt;span class="pl-md"&gt;-&lt;/span&gt; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - &lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2 id="user-content-inspiration"&gt;
 🏷️ Inspiration&lt;/h2&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/shagun25/SheHeroes"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#relic-bazaar"&gt;
  &lt;/a&gt;
  Relic Bazaar
&lt;/h2&gt;

&lt;p&gt;A Retro Theme-based e-commerce app for antiques.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/himanshusharma89"&gt;
        himanshusharma89
      &lt;/a&gt; / &lt;a href="https://github.com/himanshusharma89/relic_bazaar"&gt;
        relic_bazaar
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A Retro Theme-based e-commerce app for antiques. #Hack20
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/himanshusharma89/relic_bazaar/blob/master/images/promo.png"&gt;&lt;img width="70%" src="https://res.cloudinary.com/practicaldev/image/fetch/s--YF4bcLzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himanshusharma89/relic_bazaar/raw/master/images/promo.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/fbbb4fdbe91a2e5ad2efc33c560551ff0723935aa72825db8f878ec358b38ed7/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f68696d616e736875736861726d6138392f72656c69635f62617a616172"&gt;&lt;img src="https://camo.githubusercontent.com/fbbb4fdbe91a2e5ad2efc33c560551ff0723935aa72825db8f878ec358b38ed7/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f68696d616e736875736861726d6138392f72656c69635f62617a616172" alt="Forks"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/5f7fe92f1204b938490497bc347674fa097e0389b88087f6887d0dda9457bcbd/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f68696d616e736875736861726d6138392f72656c69635f62617a616172"&gt;&lt;img src="https://camo.githubusercontent.com/5f7fe92f1204b938490497bc347674fa097e0389b88087f6887d0dda9457bcbd/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f68696d616e736875736861726d6138392f72656c69635f62617a616172" alt="Stars"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/1149d68e6c495aac6ab9e370b394f9def9428a01078b483033a8153c4d93bf3d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f68696d616e736875736861726d6138392f72656c69635f62617a616172"&gt;&lt;img src="https://camo.githubusercontent.com/1149d68e6c495aac6ab9e370b394f9def9428a01078b483033a8153c4d93bf3d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f68696d616e736875736861726d6138392f72656c69635f62617a616172" alt="Issues"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/af149a46f56a8552e9fab58cb866e7c583010e810f977af045c79d6e0c57ade9/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f68696d616e736875736861726d6138392f72656c69635f62617a6161723f"&gt;&lt;img src="https://camo.githubusercontent.com/af149a46f56a8552e9fab58cb866e7c583010e810f977af045c79d6e0c57ade9/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f68696d616e736875736861726d6138392f72656c69635f62617a6161723f" alt="Pull Requests"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h1&gt;
&lt;b&gt;Motivation💭💭 &lt;/b&gt;
&lt;/h1&gt;
&lt;p&gt;With the boons of internet🌐 spreading worlwide over the last two decades, e-commerce has evolved to be one of the largest industries💹!.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/a81db42f78aae8a1b6d0bdedf513d723c3a8fe4cd212b7dc7de5b219bf19235e/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f7854307865507947734b706c4f4b356448472f67697068792e676966"&gt;&lt;img width="50%" src="https://camo.githubusercontent.com/a81db42f78aae8a1b6d0bdedf513d723c3a8fe4cd212b7dc7de5b219bf19235e/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f7854307865507947734b706c4f4b356448472f67697068792e676966"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With the passage of time, platforms like Amazon, E-Bay, Flipkart, Myntra have become the modern supermarkerts for us.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/80cb065fa108875b129875a91e0182882bccc9418cc941ed5c922d85a98fe086/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f78554f774734574c68796257536b755665452f67697068792e676966"&gt;&lt;img width="40%" src="https://camo.githubusercontent.com/80cb065fa108875b129875a91e0182882bccc9418cc941ed5c922d85a98fe086/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f78554f774734574c68796257536b755665452f67697068792e676966"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From our fashionable clothes👗, shoes👟, grocery🥒, items of daily needs to mobile phones📱 we are accustomed to buying almost everything online. Even our food!🎂. Features like flexible options of payment, tons of choices to select from, assured delivery, as well as great customer support, have paved the way for the notion.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/75b9339df1d58571dbdf59a7ca73f703564c9fa849612d8d4840a5aff4d04f63/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f785439445077705a6b746d6241424f3937472f67697068792e676966"&gt;&lt;img width="50%" src="https://camo.githubusercontent.com/75b9339df1d58571dbdf59a7ca73f703564c9fa849612d8d4840a5aff4d04f63/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f785439445077705a6b746d6241424f3937472f67697068792e676966"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, we found there's something that is left behind on the e-commerce wave.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/306ad01b8f726b81abbeecbd0db8e5c91f43e278db24e1d0284b1f95330d9337/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f32414e3767566331417a37706d646e4663332f67697068792e676966"&gt;&lt;img width="40%" src="https://camo.githubusercontent.com/306ad01b8f726b81abbeecbd0db8e5c91f43e278db24e1d0284b1f95330d9337/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f32414e3767566331417a37706d646e4663332f67697068792e676966"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Vintage Products&lt;/strong&gt;...Yes, those items of immense cultural significance or historical importance. Maybe those coins from pre-independent India, that chair from the royal family, or perhaps the autograph or souvenirs…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/himanshusharma89/relic_bazaar"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#doclense"&gt;
  &lt;/a&gt;
  DocLense
&lt;/h2&gt;

&lt;p&gt;An open-source document scanner!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/smaranjitghose"&gt;
        smaranjitghose
      &lt;/a&gt; / &lt;a href="https://github.com/smaranjitghose/DocLense"&gt;
        DocLense
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      An open-source document scanner!
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/smaranjitghose/DocLense/main/./readme_assets/doclense_banner.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O8f3mBHy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/smaranjitghose/DocLense/main/./readme_assets/doclense_banner.png" alt="DocLense"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/3a6a6829aa4b577bacebe7265b61b1a44a87a2891208873b4fbe30cc21f8bc19/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f736d6172616e6a697467686f73652f446f634c656e7365"&gt;&lt;img src="https://camo.githubusercontent.com/3a6a6829aa4b577bacebe7265b61b1a44a87a2891208873b4fbe30cc21f8bc19/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f736d6172616e6a697467686f73652f446f634c656e7365" alt="Issues"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/d0985cb43acb2a3cc05010afdc72ea5d0912b32a1cbe3a6649d062dbd484589c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f736d6172616e6a697467686f73652f446f634c656e73653f"&gt;&lt;img src="https://camo.githubusercontent.com/d0985cb43acb2a3cc05010afdc72ea5d0912b32a1cbe3a6649d062dbd484589c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f736d6172616e6a697467686f73652f446f634c656e73653f" alt="Pull Requests"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/7ab2d3b3a4e27beaed6168ab84e547914b098a0225171c36ffb580573f022c3f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f736d6172616e6a697467686f73652f446f634c656e7365"&gt;&lt;img src="https://camo.githubusercontent.com/7ab2d3b3a4e27beaed6168ab84e547914b098a0225171c36ffb580573f022c3f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f736d6172616e6a697467686f73652f446f634c656e7365" alt="Forks"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/3af92af287e69c9a5262542cf7958ba0c9c799dc0f7c47377d48fb00047047fa/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f736d6172616e6a697467686f73652f446f634c656e7365"&gt;&lt;img src="https://camo.githubusercontent.com/3af92af287e69c9a5262542cf7958ba0c9c799dc0f7c47377d48fb00047047fa/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f736d6172616e6a697467686f73652f446f634c656e7365" alt="Stars"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/12956294ddf9bd81e4c11053dc8d802689901f1be06e86672fb7afe49afd3358/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f736d6172616e6a697467686f73652f446f634c656e7365"&gt;&lt;img src="https://camo.githubusercontent.com/12956294ddf9bd81e4c11053dc8d802689901f1be06e86672fb7afe49afd3358/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f736d6172616e6a697467686f73652f446f634c656e7365" alt="License"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.anushbhatia.doclense" rel="nofollow"&gt;&lt;img alt="Get it on Google Play" src="https://camo.githubusercontent.com/68b69c9e16ee529bdd2540b7f7033afc8de0535966d2c36ee3878410f799f270/68747470733a2f2f706c61792e676f6f676c652e636f6d2f696e746c2f656e5f75732f6261646765732f696d616765732f67656e657269632f656e2d706c61792d62616467652e706e67" height="70px"&gt;&lt;/a&gt;&lt;/div&gt;

&lt;h2&gt;
Features🔬 :&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scan your documents with ease!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Numerous choices of filters to choose from&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Auto-adjust size and focus on text&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Save in multiple formats&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Share as consolidated document across multiple platforms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scan a variety of Docs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Options to customize the size of the scanned pages (Crop)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apply different types of filter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download/Export in .pdf&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rename the documents&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;h2&gt;
📱App Screens📱
&lt;/h2&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/smaranjitghose/DocLense/main/assets/appMockups/FirstFourScreens.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s1Psordv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/smaranjitghose/DocLense/main/assets/appMockups/FirstFourScreens.png" width="400"&gt;&lt;/a&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/smaranjitghose/DocLense/main/assets/appMockups/RestFourScreens.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cYC4iOSo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/smaranjitghose/DocLense/main/assets/appMockups/RestFourScreens.png" width="400"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
📷App Mock-ups📷
&lt;/h2&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/smaranjitghose/DocLense/main/assets/appMockups/homeScreen-mainDrawer-settings-aboutApp-reviewDialogue.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cPWDYmun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/smaranjitghose/DocLense/main/assets/appMockups/homeScreen-mainDrawer-settings-aboutApp-reviewDialogue.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/smaranjitghose/DocLense/main/assets/appMockups/cropScreen-filterScreen-filterView-multiSelectScreen-pdfNameScreen.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JtqHAOCw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/smaranjitghose/DocLense/main/assets/appMockups/cropScreen-filterScreen-filterView-multiSelectScreen-pdfNameScreen.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
🎥App Demo🎥
&lt;/h2&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/smaranjitghose/DocLense/main/assets/appMockups/AppWorking.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w9FucZ4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/smaranjitghose/DocLense/main/assets/appMockups/AppWorking.gif" height="500px"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;h2&gt;
Contribution Guidelines🏗
&lt;/h2&gt;

&lt;p&gt;Are we missing any of your favorite features, which you think you can add to it❓ We invite you to contribute to this project and make it better
To start contributing, follow the below guidelines:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Fork &lt;a href="https://github.com/smaranjitghose/DocLense"&gt;this&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Clone your forked copy of the project.&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;git clone --depth 1 https://github.com/&amp;lt;your_user_name&amp;gt;/DocLense.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/smaranjitghose/DocLense/main/./readme_assets/CloneRepo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--89gA9GZd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/smaranjitghose/DocLense/main/./readme_assets/CloneRepo.png" width="500"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Navigate to the project directory 📁 .&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;cd DocLense
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Add a reference(remote) to the original repository.&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;git remote add upstream https://github.com/smaranjitghose/DocLense.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/smaranjitghose/DocLense"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#nutrihelp"&gt;
  &lt;/a&gt;
  Nutrihelp
&lt;/h2&gt;

&lt;p&gt;An android application to predict risks of getting Diabetes like major health issues.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Dragsters"&gt;
        Dragsters
      &lt;/a&gt; / &lt;a href="https://github.com/Dragsters/Nutrihelp"&gt;
        Nutrihelp
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      An android application to predict risks of getting Diabetes like major health issues.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
&lt;a href="https://github.com/Dragsters/Nutrihelp"&gt;&lt;img src="https://camo.githubusercontent.com/27e19ea69dc0842cb5c5e5824f2b06c01f3ccbb1da05ecc3f1a8b9d5c81b825f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4f70656e253230536f757263652d2546302539462541342538442d477265656e"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Dragsters/Nutrihelp"&gt;&lt;img src="https://camo.githubusercontent.com/2dcc51d2f76669b3ee5aae8a679dc916f2338e6acda776e9a9fb65b50d8e969c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4275696c7425323062792d646576656c6f706572732532302533432532462533452d303035396233"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Dragsters/Nutrihelp"&gt;&lt;img src="https://camo.githubusercontent.com/039092c4c75c825822627f7ad933eaa98d9562f4bf27eca13a0a622af7fb73f1/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76312e7376673f6c6162656c3d436f6e747269627574696f6e73266d6573736167653d57656c636f6d6526636f6c6f723d79656c6c6f77"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Dragsters"&gt;&lt;img src="https://camo.githubusercontent.com/820bf8da7aa45e20d497b19b6d57c046248c6d82dbd516165cadcefd06e7767b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61696e74656e616e63652d7965732d627269676874677265656e"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/Dragsters/Nutrihelp/blob/main/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/98ceb6318f0e53c9ff5ad09bbc8936571efeba69761bad7331c3b6c29ce6f1bd/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f4472616773746572732f4e7574726968656c703f636f6c6f723d627269676874677265656e"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Dragsters/Nutrihelp/stargazers"&gt;&lt;img src="https://camo.githubusercontent.com/6015aa9f41161b880512b68a4cce297d4cce2fdf21dc2f240714ff91b188a7aa/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f4472616773746572732f4e7574726968656c703f636f6c6f723d303035396233"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Dragsters/Nutrihelp/network/members"&gt;&lt;img src="https://camo.githubusercontent.com/e92e064f2bd9ad354418f1d8629e5f85e8a22b3b3c8fd3443c323362e1eb4305/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f4472616773746572732f4e7574726968656c703f636f6c6f723d79656c6c6f77"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Dragsters/Nutrihelp/graphs/contributors"&gt;&lt;img src="https://camo.githubusercontent.com/74e9a3f88178298b1693956897d41fbe176cce9f920f39bb24b15dc92710f739/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f4472616773746572732f4e7574726968656c703f636f6c6f723d627269676874677265656e"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Dragsters/Nutrihelp/issues"&gt;&lt;img src="https://camo.githubusercontent.com/784b1404874d89a22d298b9bf826cc248fc987cbc4fb0711013c92ac6f9a8434/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f4472616773746572732f4e7574726968656c703f636f6c6f723d303035396233"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Dragsters/Nutrihelp/issues?q=is%3Aissue+is%3Aclosed"&gt;&lt;img src="https://camo.githubusercontent.com/d5af610e299a34ee90758cde27172c60385daf7e96a400a2a53d4a100143cbd3/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d636c6f7365642d7261772f4472616773746572732f4e7574726968656c703f636f6c6f723d79656c6c6f77"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Dragsters/Nutrihelp/pulls"&gt;&lt;img src="https://camo.githubusercontent.com/bb699bf1a0a8cad6ded044327aace599a9ab79fa5ccb99734d1177f663691a3f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f4472616773746572732f4e7574726968656c703f636f6c6f723d627269676874677265656e"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Dragsters/Nutrihelp/issues?q=is%3Apr+is%3Aclosed"&gt;&lt;img src="https://camo.githubusercontent.com/95b42b313ef3481e9993357e82c05062d92bf299e2c2d37022d50a8ac7fedbca/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722d636c6f7365642d7261772f4472616773746572732f4e7574726968656c703f636f6c6f723d303035396233"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h1&gt;
Nutrihelp&lt;/h1&gt;
An android application where you can get your personalized nutritional diet plan and health checkup recommendations using ML predictions
&lt;h2&gt;
🌟 About&lt;/h2&gt;
&lt;p&gt;An app for all those who care about their health.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Track current diet plan&lt;/li&gt;
&lt;li&gt;Get a personalized diet plan.&lt;/li&gt;
&lt;li&gt;Predict chances of critical health issues like Heart attack, Diabetes, Cancer, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Tech Used&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Frontend&lt;/th&gt;
&lt;th&gt;Flutter&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Backend&lt;/td&gt;
&lt;td&gt;Flask (python)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Database&lt;/td&gt;
&lt;td&gt;MongoDB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
Project Structure&lt;/h2&gt;
&lt;p&gt;
     __ Nutrihelp &lt;br&gt;
   |__ client (contains flutter app)&lt;br&gt;
   |__ server (contains flask backend)
&lt;/p&gt;
&lt;h2&gt;
💥 A guide for Contribution&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://makeapullrequest.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0ff11ed110cfa69f703ef0dcca3cee6141c0a8ef465e8237221ae245de3deb3d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265" alt="PRs Welcome"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fork the repository&lt;/li&gt;
&lt;li&gt;Take a look at the Existing &lt;a href="https://github.com/Dragsters/Nutrihelp/issues"&gt;Issues&lt;/a&gt; or create your own Issues!&lt;/li&gt;
&lt;li&gt;Wait for the Issue to be assigned to you after which you can start working on it.&lt;/li&gt;
&lt;li&gt;Create a Branch with the name of Issue that you are working upon.&lt;/li&gt;
&lt;li&gt;Switch to that branch and start writing your code.&lt;/li&gt;
&lt;li&gt;Commit and push your changes&lt;/li&gt;
&lt;li&gt;Create a Pull Request which will be promptly reviewed and…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Dragsters/Nutrihelp"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#batua"&gt;
  &lt;/a&gt;
  Batua
&lt;/h2&gt;

&lt;p&gt;A personal app to track and manage your expenses.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/pratyushmp"&gt;
        pratyushmp
      &lt;/a&gt; / &lt;a href="https://github.com/pratyushmp/Batua"&gt;
        Batua
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A personal app to track and manage your expenses.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/7f484fa4f6c85bb54cee7cb7709f94da3f237f7433d2ee1843d05a694f665d02/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f70726174797573686d702f4261747561"&gt;&lt;img src="https://camo.githubusercontent.com/7f484fa4f6c85bb54cee7cb7709f94da3f237f7433d2ee1843d05a694f665d02/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f70726174797573686d702f4261747561" alt="Forks"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9227268b0ee3b05a0259818dfff03e9e9b0918be37420f7f5ed4b94f5fdc1e34/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f70726174797573686d702f4261747561"&gt;&lt;img src="https://camo.githubusercontent.com/9227268b0ee3b05a0259818dfff03e9e9b0918be37420f7f5ed4b94f5fdc1e34/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f70726174797573686d702f4261747561" alt="Stars"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/232d50c67cd009eac1b56fbd5e1817d7c4332035afeba690e1a4d07179f1db88/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f70726174797573686d702f4261747561"&gt;&lt;img src="https://camo.githubusercontent.com/232d50c67cd009eac1b56fbd5e1817d7c4332035afeba690e1a4d07179f1db88/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f70726174797573686d702f4261747561" alt="Issues"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9eca0c50d2061adbfa1d519d51962fb0c2853e1813f852964836f6bb8ab9b746/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f70726174797573686d702f42617475613f"&gt;&lt;img src="https://camo.githubusercontent.com/9eca0c50d2061adbfa1d519d51962fb0c2853e1813f852964836f6bb8ab9b746/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f70726174797573686d702f42617475613f" alt="Pull Requests"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
👝Batua👝
&lt;/h1&gt;

&lt;h3&gt;
A Personal App to track and manage your expenses!&lt;/h3&gt;
&lt;p&gt;Batua is the best money manager and daily expense tracker to automatically and securely track your monthly spends. Stay within budget, pay bills on time and SAVE more money every month. Find out how much you spend on food, shopping, groceries, etc. and how you are saving month on month.&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;
Features:🔬
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This App will help shopkeepers, vendors, and many other people to keep track of their daily expense.&lt;/li&gt;
&lt;li&gt;It will help you save your money by managing your daily expenditure.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;h2&gt;
📷App Mock-ups📷
&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/pratyushmp/Batua/main/Batua2.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vk_1OIdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pratyushmp/Batua/main/Batua2.png" width="450" height="500"&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/pratyushmp/Batua/main/Batua1.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UmSG84Mz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pratyushmp/Batua/main/Batua1.png" width="450" height="500"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;
Tech Stack🧐
&lt;/h2&gt;
&lt;h3&gt;
Google-services.json file&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://drive.google.com/file/d/1-BHo4po-p11s8qNos32L7R5Zo1NFmJVT/view?usp=sharing" rel="nofollow"&gt;https://drive.google.com/file/d/1-BHo4po-p11s8qNos32L7R5Zo1NFmJVT/view?usp=sharing&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Contributing Guidelines:📝
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Checkout the &lt;a href="https://raw.githubusercontent.com/pratyushmp/Batua/main/Contributing.md"&gt;Contributing.md&lt;/a&gt; file before getting started with your contribution.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Contributors:👨‍💻
&lt;/h2&gt;
&lt;h3&gt;
Our hard working Project Maintainer👨‍🏫
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a rel="noopener noreferrer" href="https://avatars.githubusercontent.com/u/42929557?v=4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LvK94Lz7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/42929557%3Fv%3D4"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;p&gt;&lt;a href="https://github.com/pratyushmp"&gt;Pratyush M&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
Valuable Contributors✨
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/pratyushmp/Batua/graphs/contributors"&gt;&lt;br&gt;
  &lt;img src="https://camo.githubusercontent.com/6a5966f40dd213e5f5dc82b4ebfa73c3c0832992924efd700302cb75e6d0bad2/68747470733a2f2f636f6e747269622e726f636b732f696d6167653f7265706f3d70726174797573686d702f4261747561"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
BATUA is a part of these open source programs:🌐
&lt;/h2&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/43dd115ee9618c531cf1c1241b53e793d05e807195132887d8ee551819f8cd0a/68747470733a2f2f6d69726f2e6d656469756d2e636f6d2f6d61782f313430302f312a633459675258595161794f5657785633376f757272772e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/43dd115ee9618c531cf1c1241b53e793d05e807195132887d8ee551819f8cd0a/68747470733a2f2f6d69726f2e6d656469756d2e636f6d2f6d61782f313430302f312a633459675258595161794f5657785633376f757272772e706e67" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/pratyushmp/Batua"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#foresttreestagging"&gt;
  &lt;/a&gt;
  forestTreesTagging
&lt;/h2&gt;

&lt;p&gt;This project has the vision to assist the officials for Forest trees census and tagging each tree with proper location (latitude and longitude), tree type, and other arguments. and further had the plan to apply data analysis over-collected data.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/CodeFlow201"&gt;
        CodeFlow201
      &lt;/a&gt; / &lt;a href="https://github.com/CodeFlow201/forestTreesTagging"&gt;
        forestTreesTagging
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This project has the vision to assist the officials for Forest trees census and tagging each tree with proper location (latitude and longitude), tree type, and other arguments. and further had the plan to apply data analysis over-collected data.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/7e6b3324399bcf916a927772b108f7cd76bddc73d172afaac8eb2da1ce4807e7/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f436f6465466c6f773230312f666f72657374547265657354616767696e67"&gt;&lt;img src="https://camo.githubusercontent.com/7e6b3324399bcf916a927772b108f7cd76bddc73d172afaac8eb2da1ce4807e7/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f436f6465466c6f773230312f666f72657374547265657354616767696e67" alt="Forks"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/73a299b3b2e5b3632bdf6d7f5ff7774e0545cd6f6d8756dde95ddbf98f5133bb/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f436f6465466c6f773230312f666f72657374547265657354616767696e67"&gt;&lt;img src="https://camo.githubusercontent.com/73a299b3b2e5b3632bdf6d7f5ff7774e0545cd6f6d8756dde95ddbf98f5133bb/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f436f6465466c6f773230312f666f72657374547265657354616767696e67" alt="Stars"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/ab8fbb635befead016a9fef07f2183a448e3fa7edbef7edde8fab9914af579f4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f436f6465466c6f773230312f666f72657374547265657354616767696e67"&gt;&lt;img src="https://camo.githubusercontent.com/ab8fbb635befead016a9fef07f2183a448e3fa7edbef7edde8fab9914af579f4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f436f6465466c6f773230312f666f72657374547265657354616767696e67" alt="Issues"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/d56bcbcc2e058f9ea1aff8490dfc298c3840ec7632051104dfb0674a9e6e9d11/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f436f6465466c6f773230312f666f72657374547265657354616767696e673f"&gt;&lt;img src="https://camo.githubusercontent.com/d56bcbcc2e058f9ea1aff8490dfc298c3840ec7632051104dfb0674a9e6e9d11/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f436f6465466c6f773230312f666f72657374547265657354616767696e673f" alt="Pull Requests"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
🌳Trees🌳 &lt;br&gt; 🔖Tagger🔖 &lt;br&gt; App &amp;amp; Analysis Software&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;The vision of this project is to assist forest officials for tree census by tagging each tree with proper location (latitude and longitude), tree type, and other arguments. There is a future plan to apply data analysis over the collected data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;h2&gt;
Focused Area:🧐
&lt;/h2&gt;
&lt;h3&gt;
This project is based on:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Flutter-based app:  In this app, the user can tag the tree by locating or going to the exact location and then feeding the latitude and longitude details along with the other parameters. Once the data is stored, it will generate a unique key and a QR code for the same, so that later on we can refer to that tree by that code itself.&lt;/li&gt;
&lt;li&gt;A data analysis system with a Web App interface to the collected data and apply a machine learning model for prediction of different parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Tech Stack:⚙️
&lt;/h2&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/CodeFlow201/forestTreesTagging"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#animatedtextkit"&gt;
  &lt;/a&gt;
  Animated-Text-Kit
&lt;/h2&gt;

&lt;p&gt;A flutter package to create cool and beautiful text animations. [Flutter Favorite Package]&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/aagarwal1012"&gt;
        aagarwal1012
      &lt;/a&gt; / &lt;a href="https://github.com/aagarwal1012/Animated-Text-Kit"&gt;
        Animated-Text-Kit
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🔔  A flutter package to create cool and beautiful text animations. [Flutter Favorite Package]
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/aagarwal1012/Animated-Text-Kit/blob/master/display/cover.gif?raw=true"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cCEHhpNH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/aagarwal1012/Animated-Text-Kit/raw/master/display/cover.gif%3Fraw%3Dtrue"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Animated Text Kit&lt;/h1&gt;
&lt;p&gt;A flutter package which contains a collection of some cool and awesome text animations. Recommended package for text animations in Codemagic's Ebook, &lt;a href="https://blog.codemagic.io/flutter-libraries-ebook-by-codemagic/ebook-flutter-libraries-we-love-by-codemagic.pdf" rel="nofollow"&gt;"Flutter libraries we love"&lt;/a&gt;. Try out our &lt;a href="https://animated-text-kit.web.app/" rel="nofollow"&gt;live example app&lt;/a&gt;.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;
  &lt;a href="https://flutter.dev" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/d1b74364590a06b1ec32901937ee00a4b15be3a336dbd8cf254b48c863efa411/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f506c6174666f726d2d466c75747465722d3032353639423f6c6f676f3d666c7574746572" alt="Platform"&gt;
  &lt;/a&gt;
  &lt;a href="https://pub.dartlang.org/packages/animated_text_kit" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/c65d9181d6e5f38880727e8c3dce2ad5ea2bc0cf17db95e63d5e1c826ce20c34/68747470733a2f2f696d672e736869656c64732e696f2f7075622f762f616e696d617465645f746578745f6b69742e737667" alt="Pub Package"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/aagarwal1012/Animated-Text-Kit/actions?query=workflow%3ACI"&gt;
    &lt;img src="https://camo.githubusercontent.com/bfe97a6af465aac506eb67d82759d28b03f40c488e51766f474cb2cf74964f7b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f616167617277616c313031322f416e696d617465642d546578742d4b69742f43493f6c6f676f3d676974687562" alt="Build Status"&gt;
  &lt;/a&gt;
  &lt;a href="https://pub.green/packages/animated_text_kit#channel-stable" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/319e85c6e5778a959ae7321484ce7bca7caf5011539fae9ad1d6da9c18fefb52/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f7075622e677265656e2f7061636b616765732f616e696d617465645f746578745f6b69742f62616467653f6368616e6e656c3d737461626c65267374796c653d666c6174" alt="Latest compatibility result for Stable channel"&gt;
  &lt;/a&gt;
  &lt;a href="https://pub.green/packages/animated_text_kit#channel-beta" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/b9d8a6cb18cf864ca481ae3d5b5d535a405fde65b0c280a8bc9cbbd126cb9a30/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f7075622e677265656e2f7061636b616765732f616e696d617465645f746578745f6b69742f62616467653f6368616e6e656c3d62657461267374796c653d666c6174" alt="Latest compatibility result for Beta channel"&gt;
  &lt;/a&gt;
  &lt;a href="https://pub.green/packages/animated_text_kit#channel-dev" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/e288b9bd8c71eaf1561b516d905d3c0df976cc0286fe3e2875c97b4f0c5fc084/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f7075622e677265656e2f7061636b616765732f616e696d617465645f746578745f6b69742f62616467653f6368616e6e656c3d646576267374796c653d666c6174" alt="Latest compatibility result for Dev channel"&gt;
  &lt;/a&gt;
  &lt;br&gt;
  &lt;a href="https://codecov.io/gh/aagarwal1012/Animated-Text-Kit" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/62a1c9d4f63190d5d46fc3d50c74f7809ae112515de92a134a391ef2a4233df2/68747470733a2f2f636f6465636f762e696f2f67682f616167617277616c313031322f416e696d617465642d546578742d4b69742f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov Coverage"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.codefactor.io/repository/github/aagarwal1012/animated-text-kit" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/15f539ea837371b13f385b97fa053aeb59f173f7d2d2758c13f9797e1f72aabd/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f616167617277616c313031322f616e696d617465642d746578742d6b69742f6261646765" alt="CodeFactor"&gt;
  &lt;/a&gt;
  &lt;a href="https://opensource.org/licenses/MIT" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/300096c91b237dcfc491b756ca4eceb696850020b88cdf151f5fc1df215c1ce7/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f616167617277616c313031322f616e696d617465642d746578742d6b69743f636f6c6f723d726564" alt="License: MIT"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/Solido/awesome-flutter#animation"&gt;
    &lt;img src="https://camo.githubusercontent.com/25e8b8f95e1183655494ab14f192616f85399d68e9b5606db64b917bab04924b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f417765736f6d652d466c75747465722d4643363041383f6c6f676f3d617765736f6d652d6c69737473" alt="Awesome Flutter"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.paypal.me/aagarwal1012" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/c824a6f4e6054970705e8d385c63f4b07a43b9e8b8e6bff54808af8910b32a59/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446f6e6174652d50617950616c2d3030343537433f6c6f676f3d70617970616c" alt="Donate"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://flutter.dev/docs/development/packages-and-plugins/favorites" rel="nofollow"&gt;&lt;br&gt;
  &lt;img height="150" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qg18aRj1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aagarwal1012/Animated-Text-Kit/raw/master/display/flutter-favorite-badge.png%3Fraw%3Dtrue"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
Table of contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aagarwal1012/Animated-Text-Kit/master/#flutter-package-of-the-week"&gt;Flutter Package of the Week&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aagarwal1012/Animated-Text-Kit/master/#installing"&gt;Installing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/aagarwal1012/Animated-Text-Kit/master/#usage"&gt;Usage&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aagarwal1012/Animated-Text-Kit/master/#new-with-version-3"&gt;New with Version 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/aagarwal1012/Animated-Text-Kit/master/#animations"&gt;Animations&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aagarwal1012/Animated-Text-Kit/master/#rotate"&gt;Rotate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aagarwal1012/Animated-Text-Kit/master/#fade"&gt;Fade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aagarwal1012/Animated-Text-Kit/master/#typer"&gt;Typer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aagarwal1012/Animated-Text-Kit/master/#typewriter"&gt;Typewriter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aagarwal1012/Animated-Text-Kit/master/#scale"&gt;Scale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aagarwal1012/Animated-Text-Kit/master/#colorize"&gt;Colorize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aagarwal1012/Animated-Text-Kit/master/#textliquidfill"&gt;TextLiquidFill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aagarwal1012/Animated-Text-Kit/master/#wavy"&gt;Wavy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aagarwal1012/Animated-Text-Kit/master/#flicker"&gt;Flicker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aagarwal1012/Animated-Text-Kit/master/#create-your-own-animations"&gt;Create your own Animations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aagarwal1012/Animated-Text-Kit/master/#bugs-or-requests"&gt;Bugs or Requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/aagarwal1012/Animated-Text-Kit/master/#contributors"&gt;Contributors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
Flutter Package of the Week&lt;/h1&gt;
&lt;a href="https://youtu.be/foQTKCQqVWk" rel="nofollow"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kDyvKVls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aagarwal1012/Animated-Text-Kit/raw/master/display/flutter_package_of_the_week.PNG%3Fraw%3Dtrue" alt="Flutter Package of the Week"&gt;
&lt;/a&gt;
&lt;h1&gt;
Installing&lt;/h1&gt;
&lt;h3&gt;
1. Depend on it&lt;/h3&gt;
&lt;p&gt;Add this to your package's &lt;code&gt;pubspec.yaml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight highlight-source-yaml position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-ent"&gt;dependencies&lt;/span&gt;
  &lt;span class="pl-ent"&gt;animated_text_kit&lt;/span&gt;: &lt;span class="pl-s"&gt;^4.2.1&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
2. Install it&lt;/h3&gt;
&lt;p&gt;You can install packages from the command line:&lt;/p&gt;
&lt;p&gt;with &lt;code&gt;pub&lt;/code&gt;:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;$ pub get
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with &lt;code&gt;Flutter&lt;/code&gt;:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;$ flutter pub get
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;
3. Import it&lt;/h3&gt;
&lt;p&gt;Now in your &lt;code&gt;Dart&lt;/code&gt; code, you can use:&lt;/p&gt;
&lt;div class="highlight highlight-source-dart position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;'package:animated_text_kit/animated_text_kit.dart'&lt;/span&gt;;&lt;/pre&gt;

&lt;/div&gt;
&lt;h1&gt;
Usage&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;AnimatedTextKit&lt;/code&gt; is a &lt;em&gt;Stateful Widget&lt;/em&gt; that produces text animations.
Include it in your &lt;code&gt;build&lt;/code&gt; method like:&lt;/p&gt;
&lt;div class="highlight highlight-source-dart position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c1"&gt;AnimatedTextKit&lt;/span&gt;(
  animatedTexts&lt;span class="pl-k"&gt;:&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/aagarwal1012/Animated-Text-Kit"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#friday"&gt;
  &lt;/a&gt;
  Friday
&lt;/h2&gt;

&lt;p&gt;Personal Class Manager Assistant.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/avinashkranjan"&gt;
        avinashkranjan
      &lt;/a&gt; / &lt;a href="https://github.com/avinashkranjan/Friday"&gt;
        Friday
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🎓 Friday - Your Personal Class Manager Assistant, It'll never let you miss another assignment deadline or upcoming test.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
 🎓 Friday &lt;/h1&gt;
&lt;p&gt;
  &lt;a href="https://github.com/avinashkranjan/Friday"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nXBjAy06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/55796944/95674682-5eb52e00-0bcf-11eb-969b-cb7add59921c.png" alt="Logo" height="150px" width="150px"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;
 "Friday - Your Personal Class Assistant, It'll never let you miss another assignment deadline or any upcoming test."
&lt;/h2&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9549f978d8d400d3bc5f9c35c86b8a3d01eb49ecc9b5de9325354b1c46a5f988/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6176696e6173686b72616e6a616e2f467269646179"&gt;&lt;img src="https://camo.githubusercontent.com/9549f978d8d400d3bc5f9c35c86b8a3d01eb49ecc9b5de9325354b1c46a5f988/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6176696e6173686b72616e6a616e2f467269646179" alt="Issues"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/f37571b8d9c6a2bd614e3dfc91bc741d8d246172aa9ab4a393804907a112b699/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f6176696e6173686b72616e6a616e2f467269646179"&gt;&lt;img src="https://camo.githubusercontent.com/f37571b8d9c6a2bd614e3dfc91bc741d8d246172aa9ab4a393804907a112b699/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f6176696e6173686b72616e6a616e2f467269646179" alt="Pull Requests"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/a93960dbb540576cc76c0eb660e05257c0b5ef96e20b666b6f97e6b407a4a95a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f6176696e6173686b72616e6a616e2f467269646179"&gt;&lt;img src="https://camo.githubusercontent.com/a93960dbb540576cc76c0eb660e05257c0b5ef96e20b666b6f97e6b407a4a95a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f6176696e6173686b72616e6a616e2f467269646179" alt="Forks"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/fdb4eeafe613cad853b7e1f5a1a11f9ee1751fe57a8d29e1625b2eb12b25da04/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6176696e6173686b72616e6a616e2f467269646179"&gt;&lt;img src="https://camo.githubusercontent.com/fdb4eeafe613cad853b7e1f5a1a11f9ee1751fe57a8d29e1625b2eb12b25da04/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6176696e6173686b72616e6a616e2f467269646179" alt="Stars"&gt;&lt;/a&gt;
&lt;a href="https://github.com/avinashkranjan/Friday"&gt;&lt;img src="https://camo.githubusercontent.com/3086bfc3ab9468e2d34eaf6857f64fdbf2ea397c3593a495b4e13d722465c3ff/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6176696e6173686b72616e6a616e2f467269646179" alt="License"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/d48e42d26572b007297ba90bb95de2b15b8877a6521ec273cdf78cbe033b3368/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7265706f2d73697a652f6176696e6173686b72616e6a616e2f4672696461792e7376673f6c6162656c3d5265706f25323073697a65267374796c653d666c61742d737175617265"&gt;&lt;img src="https://camo.githubusercontent.com/d48e42d26572b007297ba90bb95de2b15b8877a6521ec273cdf78cbe033b3368/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7265706f2d73697a652f6176696e6173686b72616e6a616e2f4672696461792e7376673f6c6162656c3d5265706f25323073697a65267374796c653d666c61742d737175617265" alt=""&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h1&gt;
 Introduction 🚩 &lt;/h1&gt;
  &lt;p&gt;
    Since after the pandemic almost everything has been moved on to the virtual world So has &lt;b&gt;Education&lt;/b&gt;. All our classes have been moved online and with that, all our &lt;b&gt;&lt;em&gt; assignments, test, exams, Viva&lt;/em&gt;&lt;/b&gt; are being held on an online platform as well, With so many &lt;b&gt;&lt;em&gt;assignment deadlines, upcoming exam dates, and being busy with our life&lt;/em&gt;&lt;/b&gt; we forget the deadlines and exam dates on most occasion. I don't know how many of you but it happens to me frequently. So I came up with this &lt;b&gt;app&lt;/b&gt; which once fed with all the required data it'll remind you of the &lt;b&gt;&lt;em&gt;assignment deadlines, upcoming exams, unfinished homework&lt;/em&gt;&lt;/b&gt;. So, you can plan your schedule accordingly
&lt;/p&gt;
&lt;h1&gt;
 Tech Stack 🔥 &lt;/h1&gt;
  &lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/d39ba760c6c9dce892d47abb6fc89b639e19182b23cf073a986c98ef8281a6a6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646172742d2532333031373543322e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d64617274266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/d39ba760c6c9dce892d47abb6fc89b639e19182b23cf073a986c98ef8281a6a6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646172742d2532333031373543322e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d64617274266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/574822611ebb4aa29c9f5866a15eccf1fbc96f5cfea04e3cb2817a0cca84f8c2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f466c75747465722532302d2532333032353639422e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d466c7574746572266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/574822611ebb4aa29c9f5866a15eccf1fbc96f5cfea04e3cb2817a0cca84f8c2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f466c75747465722532302d2532333032353639422e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d466c7574746572266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/42b5cd94dbe9961d5b1071ea4dae36e2b63d35a8e6e56e7bf91fedf28988c80c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6669676d612532302d2532334632344531452e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6669676d61266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/42b5cd94dbe9961d5b1071ea4dae36e2b63d35a8e6e56e7bf91fedf28988c80c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6669676d612532302d2532334632344531452e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6669676d61266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt;  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/6aea43d076c7bf00489f1b347caa33fe5c4d84a8af2983804f8702632f2669ec/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6769746875622532302d2532333132313031312e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d676974687562266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/6aea43d076c7bf00489f1b347caa33fe5c4d84a8af2983804f8702632f2669ec/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6769746875622532302d2532333132313031312e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d676974687562266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h1&gt;
 Application Preview 👀 &lt;/h1&gt;
  &lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/55796944/95674880-cb7cf800-0bd0-11eb-94fd-20b50ab35219.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AlrRQZLr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/55796944/95674880-cb7cf800-0bd0-11eb-94fd-20b50ab35219.png" height="363px" width="181px"&gt;&lt;/a&gt;  &lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/55796944/95674883-cddf5200-0bd0-11eb-9b9a-f22d94217089.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i_-mPzoe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/55796944/95674883-cddf5200-0bd0-11eb-9b9a-f22d94217089.png" height="363px" width="181px"&gt;&lt;/a&gt;  &lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/55796944/95674884-d041ac00-0bd0-11eb-9eb3-299fd123973a.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1UMi1-M0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/55796944/95674884-d041ac00-0bd0-11eb-9eb3-299fd123973a.png" height="363px" width="181px"&gt;&lt;/a&gt;  &lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/55796944/95674885-d172d900-0bd0-11eb-9259-d22fb91cfad6.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T8WC6-Yr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/55796944/95674885-d172d900-0bd0-11eb-9259-d22fb91cfad6.png" height="363px" width="181px"&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;p&gt;
  &lt;a href="https://github.com/avinashkranjan/Friday/releases/download/v1.0.0/friday.apk"&gt;
    &lt;img src="https://camo.githubusercontent.com/c947c197127f4e91e0a7b9d0015ad0ce83a2a2b7c57a6cd57d209987b76120b4/68747470733a2f2f666f7274686562616467652e636f6d2f696d616765732f6261646765732f636865636b2d69742d6f75742e737667"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;h1&gt;
 Working Preview ▶ &lt;/h1&gt;
  &lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/55796944/95675411-b904bd80-0bd4-11eb-945d-810010a86da8.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MeEGj71C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/55796944/95675411-b904bd80-0bd4-11eb-945d-810010a86da8.gif" height="408px" width="204px"&gt;&lt;/a&gt;
   &lt;/p&gt;
&lt;h2&gt;
 Video Preview ⏩ &lt;a href="https://youtu.be/IJCo80Y0wjI" rel="nofollow"&gt;  &lt;img src="https://camo.githubusercontent.com/92fc89b2faf5c141ca090f2595a7ea5621d9b94ab5034bc23ade803b8f0882d5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436c69636b204d652532302d2532334646303030302e7376673f26207374796c653d666f722d7468652d6261646765206c6f676f3d596f7554756265266c6f676f436f6c6f723d7768697465"&gt; &lt;/a&gt;
&lt;br&gt;
&lt;/h2&gt;
&lt;h2&gt;
Contributors ✨
&lt;/h2&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/avinashkranjan/Friday"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#libro"&gt;
  &lt;/a&gt;
  Libro
&lt;/h2&gt;

&lt;p&gt;An App Built using flutter using which we can share books with people around.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/infiniteoverflow"&gt;
        infiniteoverflow
      &lt;/a&gt; / &lt;a href="https://github.com/infiniteoverflow/Libro"&gt;
        Libro
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      An App Built using flutter using which we can share books with people around us !!
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/016fce821ce7291b63d39038c734df7ef4b40250d5b5baa73a578676775a4e92/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f696e66696e6974656f766572666c6f772f4c6962726f"&gt;&lt;img src="https://camo.githubusercontent.com/016fce821ce7291b63d39038c734df7ef4b40250d5b5baa73a578676775a4e92/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f696e66696e6974656f766572666c6f772f4c6962726f" alt="Forks"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/01e40ea7c99fdccc4bb3a930ad7b2fafb9eae2cc8ed512fa121e9624aa0bf1cc/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f696e66696e6974656f766572666c6f772f4c6962726f"&gt;&lt;img src="https://camo.githubusercontent.com/01e40ea7c99fdccc4bb3a930ad7b2fafb9eae2cc8ed512fa121e9624aa0bf1cc/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f696e66696e6974656f766572666c6f772f4c6962726f" alt="Stars"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/ba46b7a027c501987644dc83195e8025b462d178754554052a38021528ab7930/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f696e66696e6974656f766572666c6f772f4c6962726f"&gt;&lt;img src="https://camo.githubusercontent.com/ba46b7a027c501987644dc83195e8025b462d178754554052a38021528ab7930/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f696e66696e6974656f766572666c6f772f4c6962726f" alt="Issues"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/af246c31f16edf3487d8f5e08a6025e9e14b0a2244a0e1dc2b95fc0baa300b66/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f696e66696e6974656f766572666c6f772f4c6962726f3f"&gt;&lt;img src="https://camo.githubusercontent.com/af246c31f16edf3487d8f5e08a6025e9e14b0a2244a0e1dc2b95fc0baa300b66/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f696e66696e6974656f766572666c6f772f4c6962726f3f" alt="Pull Requests"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
📚Book-Donation-App📚
&lt;/h1&gt;

&lt;p&gt;An App Built using flutter using which we can share books with people around us !!&lt;/p&gt;


&lt;/div&gt;

&lt;h1&gt;
Features:✨
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;A book Sharing App.&lt;/li&gt;
&lt;li&gt;This app helps you find the books you want easily.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
Tech Stack:⚙️
&lt;/h1&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/d39ba760c6c9dce892d47abb6fc89b639e19182b23cf073a986c98ef8281a6a6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646172742d2532333031373543322e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d64617274266c6f676f436f6c6f723d7768697465"&gt;&lt;img alt="Dart" src="https://camo.githubusercontent.com/d39ba760c6c9dce892d47abb6fc89b639e19182b23cf073a986c98ef8281a6a6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646172742d2532333031373543322e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d64617274266c6f676f436f6c6f723d7768697465" width="300" height="100"&gt;&lt;/a&gt;  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/574822611ebb4aa29c9f5866a15eccf1fbc96f5cfea04e3cb2817a0cca84f8c2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f466c75747465722532302d2532333032353639422e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d466c7574746572266c6f676f436f6c6f723d7768697465"&gt;&lt;img alt="Flutter" src="https://camo.githubusercontent.com/574822611ebb4aa29c9f5866a15eccf1fbc96f5cfea04e3cb2817a0cca84f8c2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f466c75747465722532302d2532333032353639422e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d466c7574746572266c6f676f436f6c6f723d7768697465" width="300" height="100"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/c644fa80e8dadef7444df5c9fc8df2deedd7706f3f58c9604776319cf0357c34/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f66697265626173652532302d2532333033394245352e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6669726562617365"&gt;&lt;img alt="Firebase" src="https://camo.githubusercontent.com/c644fa80e8dadef7444df5c9fc8df2deedd7706f3f58c9604776319cf0357c34/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f66697265626173652532302d2532333033394245352e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6669726562617365" width="300" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
Contributing Guidelines:📝
&lt;/h1&gt;

&lt;p&gt;Please read &lt;a href="https://github.com/infiniteoverflow/Libro/blob/main/Contributing.md"&gt;CONTRIBUTING.md&lt;/a&gt; for information on how to contribute to the project.&lt;/p&gt;

&lt;p&gt;To follow our sprints and workflow install &lt;a href="https://www.zenhub.com/extension" rel="nofollow"&gt;zenhub extension&lt;/a&gt; to access our board.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google Services Files for running the app :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For Android :&lt;/strong&gt; &lt;a href="https://drive.google.com/file/d/1xLvwVTZQ3EWYl1uBna2IPp46hsjBQ8ul/view?usp=sharing" rel="nofollow"&gt;https://drive.google.com/file/d/1xLvwVTZQ3EWYl1uBna2IPp46hsjBQ8ul/view?usp=sharing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For IOS :&lt;/strong&gt; &lt;a href="https://drive.google.com/file/d/1Ldd2BefPp8EOU-pffbxMLc-IXwPlc8XX/view?usp=sharing" rel="nofollow"&gt;https://drive.google.com/file/d/1Ldd2BefPp8EOU-pffbxMLc-IXwPlc8XX/view?usp=sharing&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
Tentative UI Design:🎨
&lt;/h2&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/infiniteoverflow/Libro/main/mock.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QZxK-son--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/infiniteoverflow/Libro/main/mock.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This project is a part of Girlscript Summer of Code 21'&lt;/strong&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/43dd115ee9618c531cf1c1241b53e793d05e807195132887d8ee551819f8cd0a/68747470733a2f2f6d69726f2e6d656469756d2e636f6d2f6d61782f313430302f312a633459675258595161794f5657785633376f757272772e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/43dd115ee9618c531cf1c1241b53e793d05e807195132887d8ee551819f8cd0a/68747470733a2f2f6d69726f2e6d656469756d2e636f6d2f6d61782f313430302f312a633459675258595161794f5657785633376f757272772e706e67" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Valuable Contributors🤟
&lt;/h3&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
    &lt;tbody&gt;
&lt;tr&gt;
        &lt;td&gt;
            &lt;a href="https://github.com/infiniteoverflow/Libro/graphs/contributors"&gt;
  &lt;img src="https://camo.githubusercontent.com/84a24a72fd132ba300defe7f6a609a7a773b7908b290c653d07d0d211a11e1f3/68747470733a2f2f636f6e747269622e726f636b732f696d6167653f7265706f3d696e66696e6974656f766572666c6f772f4c6962726f"&gt;
&lt;/a&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/infiniteoverflow/Libro"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#thats-all-"&gt;
  &lt;/a&gt;
  Thats all :)
&lt;/h2&gt;

&lt;p&gt;Help me improve this collection by sharing your open source projects or any cool ones that you know of!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/E87DW2iT5tk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you’re a Flutter Developer, we have a community for you!&lt;/p&gt;

&lt;p&gt;I post internship opportunities that I come across, articles and tutorials. Join the &lt;strong&gt;Discord community&lt;/strong&gt; for free, using this &lt;a href="https://linktr.ee/flutterdev"&gt;link&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>opensource</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to create table in SQL?</title>
      <author>Damian Brdej</author>
      <pubDate>Mon, 05 Jul 2021 17:06:17 +0000</pubDate>
      <link>https://dev.to/quentindamianino/how-to-create-table-in-sql-4ldg</link>
      <guid>https://dev.to/quentindamianino/how-to-create-table-in-sql-4ldg</guid>
      <description>&lt;p&gt;To create table in SQL you have to use following syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE table_name (
    column_1 datatype,
    column_2 datatype,
    column_3 datatype
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's important to place comma after each column definition, and semicolon after whole statement.&lt;/p&gt;

&lt;p&gt;Here's real life example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE users (
    id INT,
    name VARCHAR(255),
    surname VARCHAR(255),
    email VARCHAR(255),
    password VARCHAR(255)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This statement creates table with 4 columns. First one is of type INT which means integer value. The other 4 columns are of type VARCHAR(255) which means TEXT with maximum length of 255. You can place any number in brackets to define length.&lt;/p&gt;

</description>
      <category>sql</category>
      <category>database</category>
    </item>
  </channel>
</rss>
