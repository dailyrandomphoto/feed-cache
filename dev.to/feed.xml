<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Algorithm Practice: Two Sum</title>
      <author>Andrew Williams</author>
      <pubDate>Wed, 03 Feb 2021 05:05:14 +0000</pubDate>
      <link>https://dev.to/andrewjwilliams/algorithm-practice-two-sum-44of</link>
      <guid>https://dev.to/andrewjwilliams/algorithm-practice-two-sum-44of</guid>
      <description>&lt;h1&gt;
  &lt;a href="#why-algorithms" class="anchor"&gt;
  &lt;/a&gt;
  Why Algorithms?
&lt;/h1&gt;

&lt;p&gt;By definition, in software development, Algorithms are computer procedures designed to accomplish a specific task. Each algorithm consists of a number of steps the computer takes in order to produce a result. The ultimate goal in using algorithms is to find a result or solution in the most efficient way possible.&lt;/p&gt;

&lt;p&gt;Creating and studying algorithms is an essential part of being a software engineer. Sure, you may not run into a situation where you have to fulfill the requirements present in many of your study questions, but the techniques you learn will prove beneficial when performing technical analysis. You may find part of an algorithm you studied makes your application run more efficiently or returns the results your end-user needs. &lt;/p&gt;

&lt;p&gt;Regardless of how you use them, algorithms are a great problem-solving tool, and for that reason, I have made it a personal goal to practice algorithm development. For however long it takes, I will be working my way through a series of coding challenges, each designed to test my knowledge (or lack of knowledge) on certain software concepts. I will be using this blog as an outlet to discuss what went well and what didn't go so well with each challenge. If you yourself are a new software developer or are exploring the possibility of becoming one, I hope these posts can be encouraging and motivating for you in your own personal journey!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-problem-two-sum" class="anchor"&gt;
  &lt;/a&gt;
  The Problem: Two Sum
&lt;/h1&gt;

&lt;p&gt;The prompt for this challenge is pretty straightforward: write a function, taking in a non-empty array of integers and a target value, that returns a new array with two values from our input array whose sum equals the target value. Below is an example of what we would expect our function to do:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Array&lt;/strong&gt; = [8, 1, 7, 5, -9, -11, 3]&lt;br&gt;
&lt;strong&gt;Target Value&lt;/strong&gt; = 10&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt; = [7, 3] or [3, 7]&lt;/p&gt;

&lt;p&gt;If no two numbers in the array sum up to the target value, we simply return an empty array. It should also be noted that the function cannot add an integer to itself (ex. 5 + 5) and that it should be assumed that there is at most one pair of numbers summing up to the target value.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#my-initial-solution" class="anchor"&gt;
  &lt;/a&gt;
  My Initial Solution
&lt;/h1&gt;

&lt;p&gt;While this problem is classified as "easy" on the platform I wrote it on, I did find it challenging at first since I had little experience with these kinds of questions. After about 30-35 minutes I finally came up with a solution that cleared all the tests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function twoSum(array, targetSum) {
    let finalArray = []
    let newArray = array

    for(i=0; i &amp;lt; array.length; i++){
        let targetValue = array[i]
        newArray.splice(i,1)

        newArray.map(value =&amp;gt; {
            if (targetValue + value === targetSum){
                finalArray.push(targetValue)
                finalArray.push(value)
            }
        })

        if (finalArray.length === 0){
            newArray.splice(i, 0, targetValue)
        } else {
            return finalArray;
        }
    }
    return finalArray
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Breaking down the code, I first defined two arrays, one set to an empty array and another set to the array that was passed into the function. I then initiate a for loop that is set to run the length of the array. Within the for loop, I define another variable equal to a value in the array where &lt;em&gt;i&lt;/em&gt; is the index number. This variable's value will change each time the loop increments. I then took my newArray and spliced out the value that the index of &lt;em&gt;i&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;After removing this value, I then map through newArray to check and see if any other value added with the targetValue equals the targetSum. If these two values return the correct sum, I then push each value into the finalArray.&lt;/p&gt;

&lt;p&gt;Once the map is complete, I run another conditional that checks the length of our finalArray. If the length is equal to zero, then the target value is inserted back into newArray at the index value of &lt;em&gt;i&lt;/em&gt;, continuing the loop's run. If the length is greater than zero, it indicates there are values present and the program returns finalArray. The last return line after this conditional exists to return the empty array if the loop has cycled all the way through and failed to have found a pair of integers.     &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#refining-my-approach" class="anchor"&gt;
  &lt;/a&gt;
  Refining My Approach
&lt;/h1&gt;

&lt;p&gt;While this algorithm does pass the challenge presented in the prompt, it is a mess on more levels than one. In fact, I was so happy I simply cleared the tests I submitted this problem without taking time to refactor my work. After a few days I finally decided to take a look, and oh boy was it rough! &lt;/p&gt;

&lt;p&gt;For starters, I defined a couple of redundant variables, the most obvious example being newArray at the very beginning. The code becomes cluttered with a large number of variables and it becomes increasingly difficult for someone reading the code to figure out what the function is actually doing. For refactoring purposes, I knew I needed to cut out the redundancy. &lt;/p&gt;

&lt;p&gt;I had the right approach incorporating a for loop, but somehow made the puzzling decision to incorporate map. Sure, map can be used to iterate over an array and examine each value, but the purpose is to return a new array. Instead of map, I should have used a second for loop, which would have accomplished same goal of iteration without the need to return a value.&lt;/p&gt;

&lt;p&gt;Finally, I made the task of returning a final array more difficult than it needed to be. Instead of a complicated exercise in creating an empty array, pushing the correct values into that array, and checking to see if there are any values in the array, I could have just returned an array with the values inside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return [value1, value2]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I would have to set my code up differently, but this is definitely the preferred way of doing things.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#coding-an-alternative-solution" class="anchor"&gt;
  &lt;/a&gt;
  Coding an Alternative Solution
&lt;/h1&gt;

&lt;p&gt;After reviewing these issues, researching big-O notation, and getting advice from some other developers, I submitted a second solution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function twoSum(array, targetSum) {
   array.sort((a,b) =&amp;gt; a - b);
   let leftIndex = 0
   let rightIndex = array.length-1

   while(leftIndex &amp;lt; rightIndex){
    const currentSum = array[leftIndex] + array[rightIndex]

    if(currentSum === targetSum){
       return [array[leftIndex], array[rightIndex]]
    } else if (currentSum &amp;lt; targetSum){
            leftIndex++
    } else if (currentSum &amp;gt; targetSum){
            rightIndex--
    }
   }
   return [];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this version, the first thing I did was sort the integers in the array from smallest to largest. I then created two variables to represent the first and last index of the array. Then I initiated a while loop, which runs continuously until either the leftIndex is greater than or equal to the rightIndex or a return statement is executed.&lt;/p&gt;

&lt;p&gt;Within the loop, I created another variable, currentSum, responsible for holding the sum of the left index value and the right index value. Armed with this variable, I created a conditional that checks to see if this value is equal to the targetSum. If it is, the function returns an array with both index values. The other statements check to see if the currentSum is either greater than or less than the targetSum, adjusting the value of either index in order to change the currentSum. If every value in the array has been evaluated and no pairs have produced the targetSum, the algorithm returns an empty array.&lt;/p&gt;

&lt;p&gt;This approach works thanks to numeric ordering and the use of left and right "pointers". Let's use the array I defined earlier and pass it into this algorithm. Below would be our initial values before entering the loop:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Target Value&lt;/strong&gt; = 10&lt;br&gt;
&lt;strong&gt;Sorted Array&lt;/strong&gt; = [-11, -9, 1, 3, 5, 7, 8]&lt;br&gt;
&lt;strong&gt;leftIndex&lt;/strong&gt; = 0&lt;br&gt;
&lt;strong&gt;rightIndex&lt;/strong&gt; = 6&lt;/p&gt;

&lt;p&gt;Once we entered the loop, we sum -11 and 8, which results in -3. Since -3 is less than 10, the first &lt;em&gt;else if&lt;/em&gt; statement is executed and leftIndex value is increased by one, which is the index for -9 in the array. Over time the function adjusts the position of each index accordingly until a pair is summed equal to the targetSum. In the case of the example above, this would occur when the leftIndex equals 3 and the rightIndex equals 5.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;It feels so good to go back, even with the easier problems, and nail down how and why an algorithm is working. Being able to learn from your mistakes and make your code run more efficiently gives you that confidence boost to tackle another coding challenge. Hopefully, when my future self looks back, I can recognize these small accomplishments as stepping stones of knowledge that helped make me a more well-rounded developer! &lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What's the longest you've ever spent debugging a single bug?</title>
      <author>Ben Halpern</author>
      <pubDate>Wed, 03 Feb 2021 02:56:23 +0000</pubDate>
      <link>https://dev.to/ben/what-s-the-longest-you-ve-ever-spent-debugging-a-single-bug-op4</link>
      <guid>https://dev.to/ben/what-s-the-longest-you-ve-ever-spent-debugging-a-single-bug-op4</guid>
      <description></description>
      <category>discuss</category>
    </item>
    <item>
      <title>How to setup scheduled cron jobs in Node.js</title>
      <author>Michael Burrows</author>
      <pubDate>Tue, 02 Feb 2021 22:36:05 +0000</pubDate>
      <link>https://dev.to/michaelburrows/how-to-setup-scheduled-cron-jobs-in-node-js-4926</link>
      <guid>https://dev.to/michaelburrows/how-to-setup-scheduled-cron-jobs-in-node-js-4926</guid>
      <description>&lt;p&gt;In this tutorial you’ll learn how to schedule cron jobs in Node.js. Typically cron jobs are used to automate system maintenance but can also be used for scheduling file downloads or sending emails at regular intervals.&lt;/p&gt;

&lt;p&gt;Let’s first setup our project by running the following commands :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir cron-jobs
cd cron jobs
npm init -y
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We’ll be using the &lt;a href="https://www.npmjs.com/package/node-cron"&gt;node-cron&lt;/a&gt; package which simplifies creating cron jobs in node.js using the full crontab syntax. Run the following command to install &lt;code&gt;node-cron&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install node-cron
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With node-cron installed create a new &lt;code&gt;index.js&lt;/code&gt; file with a sample cron job that will run every minute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cron&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node-cron&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;* * * * *&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Running each minute&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The asterisks are part of the crontab syntax used to represent different units of time. Five asterisks represents the crontab default which will run every minute.&lt;/p&gt;

&lt;p&gt;Here’s what unit of time each of the asterisks represent and the values allowed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;┌──────────────── second (optional 0 - 59) 
| ┌────────────── minute (0 - 59)
| | ┌──────────── hour (0 - 23)
| | | ┌────────── day of month (1 - 31)
| | | | ┌──────── month (1 - 12)
| | | | | ┌────── day of week (0 - 7, 0 or 7 are sunday)
| | | | | | 
| | | | | |
* * * * * *
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#schedule-cron-jobs-dailyweeklymonthly" class="anchor"&gt;
  &lt;/a&gt;
  Schedule cron jobs daily/weekly/monthly
&lt;/h2&gt;

&lt;p&gt;Run at midnight every day:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 * * *&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// task to run daily&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Run every Sunday at midnight:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 * * 0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// task to run weekly&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Run on the first day of every month at midnight:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 1 * *&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// task to run monthly&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you’re struggling to understand exactly how the crontab syntax works check out &lt;a href="https://crontab.guru/"&gt;crontab guru&lt;/a&gt;. This website provides a simple editor that displays the cron schedule based on the cron syntax you input:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kdCLXp3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9gyyjefjijcrfuakfwjl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kdCLXp3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9gyyjefjijcrfuakfwjl.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s all for this tutorial. Hopefully you now know how to a setup a cron job to save time on things you may have done manually in the past. As always thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Jess Lee (she/her)</author>
      <pubDate>Tue, 02 Feb 2021 18:49:03 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-3p6p</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-3p6p</guid>
      <description>&lt;p&gt;Every Tuesday, we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week. ❤️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#please-emoji-responsibly" class="anchor"&gt;
  &lt;/a&gt;
  Please Emoji Responsibly
&lt;/h3&gt;

&lt;p&gt;As a software developer, it’s easy to use emojis the wrong way -- but there are very real accessibility consequences. &lt;a class="comment-mentioned-user" href="https://dev.to/iamludal"&gt;@iamludal&lt;/a&gt;
 shares a better path. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/iamludal" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v4PhmWvm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--4A8y8sWH--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/567699/24688b79-3b93-4935-9cff-33321e2547e4.jpeg" alt="iamludal image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/iamludal/you-are-using-emojis-the-wrong-way-i71" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;You Are Using Emojis The Wrong Way ❌&lt;/h2&gt;
      &lt;h3&gt;Ludal 🚀 ・ Jan 27 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#mobile&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#twitter&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 
&lt;h3&gt;
  &lt;a href="#slow-amp-steady-serves-you-better" class="anchor"&gt;
  &lt;/a&gt;
  Slow &amp;amp; Steady Serves You Better
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/alexlsalt"&gt;@alexlsalt&lt;/a&gt;
 talks about the importance of taking things slow as an early-career developer. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/alexlsalt" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mY85lbma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rbWwRtco--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/284014/36cbe4fd-2ae3-4651-a2fd-ea65ef3b6cb9.jpg" alt="alexlsalt image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alexlsalt/the-importance-of-slowing-way-down-as-a-junior-software-engineer-4jei" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The Importance of Slowing (Way!) Down as a Junior Software Engineer&lt;/h2&gt;
      &lt;h3&gt;Alex Morton ・ Jan 30 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devjournal&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#womenintech&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 
&lt;h3&gt;
  &lt;a href="#no-bones-about-it" class="anchor"&gt;
  &lt;/a&gt;
  No bones about it
&lt;/h3&gt;

&lt;p&gt;… skeleton layouts have so much going for them! &lt;a class="comment-mentioned-user" href="https://dev.to/lukekyl"&gt;@lukekyl&lt;/a&gt;
 explains why. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/lukekyl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z_GETeWa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--yYmVBOr9--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/421066/269c500a-abd3-455d-8682-60af1d3ac462.png" alt="lukekyl image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lukekyl/how-to-build-a-skeleton-layout-in-react-21hb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Build a Skeleton Layout in React&lt;/h2&gt;
      &lt;h3&gt;Kyle Luke ・ Jan 27 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#plots-twists-can-lead-to-satisfying-stories" class="anchor"&gt;
  &lt;/a&gt;
  Plots twists can lead to satisfying stories
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/anfibiacreativa"&gt;@anfibiacreativa&lt;/a&gt;
 shared a look inside their career journey -- from &lt;em&gt;physical&lt;/em&gt; architectural draftswoman to to solutions architect! &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/anfibiacreativa" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DewiXoYz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uD9bDcPe--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/150849/3e174cf2-1d34-4ad2-a696-6b6d6458504e.jpg" alt="anfibiacreativa image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/this-is-learning/from-designer-to-software-engineer-to-solutions-architect-my-journey-2p5b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;From Designer to Software Engineer to Solutions Architect: my journey&lt;/h2&gt;
      &lt;h3&gt;Natalia Venditto ・ Jan 29 ・ 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#the-expert-in-anything-was-once-a-beginner" class="anchor"&gt;
  &lt;/a&gt;
  The expert in anything was once a beginner
&lt;/h3&gt;

&lt;p&gt;“To be honest,” writes &lt;a class="comment-mentioned-user" href="https://dev.to/rajatarya007zxc"&gt;@rajatarya007zxc&lt;/a&gt;
 “JavaScript still changes my perspective, but it also gives me more strength to work hard on it.”&lt;/p&gt;

&lt;p&gt;This post provides great encouragement and guidance for when you’re beating yourself up over JavaScript (spoiler: don’t do that)&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/rajatarya007zxc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UtUMiSL4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZRIWE0gP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/453599/b59ff508-f011-4a3d-a593-ea15e2a8346f.png" alt="rajatarya007zxc image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rajatarya007zxc/sometimes-javascript-is-tricky-67j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Sometimes JavaScript is Tricky.&lt;/h2&gt;
      &lt;h3&gt;Rajat_Arya ・ Jan 30 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#yearly-healthscreenings-at-a-bare-minimum" class="anchor"&gt;
  &lt;/a&gt;
  Yearly health-screenings -- at a bare minimum.
&lt;/h3&gt;

&lt;p&gt;You go in to get your blood pressure checked at least once per year. Your websites need those screenings, too and security headers are an essential step in this wellness check. Thanks for these tips on checking security headers, &lt;a class="comment-mentioned-user" href="https://dev.to/madsstoumann"&gt;@madsstoumann&lt;/a&gt;
!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/madsstoumann" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JoLwOpQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--S8Kp4bXC--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/515396/61d796b8-f5ce-468b-8cb5-808b2bbb9279.jpeg" alt="madsstoumann image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/madsstoumann/frontend-security-security-headers-517p" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Frontend Security: Security Headers&lt;/h2&gt;
      &lt;h3&gt;Mads Stoumann ・ Jan 27 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#getting-into-the-freelance-flow" class="anchor"&gt;
  &lt;/a&gt;
  Getting into the freelance flow
&lt;/h3&gt;

&lt;p&gt;As developers, it can be hard to switch to freelance in part because it requires you to “sell yourself” more frequently. Recently, &lt;a class="comment-mentioned-user" href="https://dev.to/tanoaksam"&gt;@tanoaksam&lt;/a&gt;
 made this shift successfully! Here’s how.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/tanoaksam" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QYB7sf-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1teICR4d--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/533945/6a9dfd56-ad3c-4d73-8f97-aa43618fa436.jpg" alt="tanoaksam image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/tanoaksam/my-freelancing-workflow-from-cold-leads-to-paid-invoices-38hd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My freelancing workflow, from cold leads to paid invoices&lt;/h2&gt;
      &lt;h3&gt;Sam Tanoak Sycamore ・ Jan 31 ・ 15 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#freelancing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100devs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>How I Hacked Cookie Clicker Game with Inspect Element</title>
      <author>Muhammad Furqan Ul Haq</author>
      <pubDate>Tue, 02 Feb 2021 17:58:13 +0000</pubDate>
      <link>https://dev.to/trulyfurqan/how-i-hacked-cookie-clicker-game-with-inspect-element-cd8</link>
      <guid>https://dev.to/trulyfurqan/how-i-hacked-cookie-clicker-game-with-inspect-element-cd8</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-i-hacked-cookie-clicker-game-with-inspect-element" class="anchor"&gt;
  &lt;/a&gt;
  How I Hacked Cookie Clicker Game with Inspect Element
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://orteil.dashnet.org/cookieclicker/"&gt;Cookie Clicker&lt;/a&gt; is a very popular browser-based game. It revolves around producing cookies for the world. This game gets more interesting over time which keeps the player engaged.&lt;/p&gt;

&lt;p&gt;Basically, there are a few ways to get cookies. These cookies can then be used to create new buildings or purchase upgrades. At first, I’m going to mention a few genuine ways to earn cookies.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By clicking the big “Cookie” shown on the user interface.&lt;/li&gt;
&lt;li&gt;By creating new buildings. There are different types of buildings and each type can only produce a specified number of cookies per second. Initially, all buildings are locked, but they will get unlocked over time as the game progresses.&lt;/li&gt;
&lt;li&gt;By enhancing the efficiency of your cookie store through upgrades.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, here comes the actual hacking stuff you’re waiting for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started" class="anchor"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;As I mentioned earlier, this is a browser-based game. Meaning that it is developed using HTML5, CSS3, and JavaScript. All of these are client-side languages that can be modified through programs like &lt;a href="https://developers.google.com/web/tools/chrome-devtools"&gt;Chrome DevTools&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s &lt;a href="https://orteil.dashnet.org/cookieclicker/"&gt;open this game&lt;/a&gt; in Google Chrome.&lt;/p&gt;

&lt;p&gt;Now to open Chrome DevTools, right-click anywhere on the game and select “Inspect” from the context menu. For now, we will only be focusing on its functionality that is written in JavaScript. So, open the “Console” tab.&lt;/p&gt;

&lt;p&gt;Another way is to press &lt;strong&gt;Ctrl+Shift+J&lt;/strong&gt; on Windows or &lt;strong&gt;⌘+⌥Option+J&lt;/strong&gt; on Mac.&lt;/p&gt;

&lt;p&gt;You’ve to execute the below-mentioned codes here.&lt;/p&gt;

&lt;p&gt;It’s time to hack different features of this Cookie Clicker game.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hack-cookies" class="anchor"&gt;
  &lt;/a&gt;
  Hack Cookies
&lt;/h2&gt;

&lt;p&gt;As everything in this game depends on cookies, so I hacked them!&lt;/p&gt;

&lt;p&gt;Basically, after analyzing its source code, I found that the functionality of this game is written inside a file called “main.js”.&lt;/p&gt;

&lt;p&gt;This file initializes an object &lt;code&gt;Game&lt;/code&gt; through which we can easily access different features of Cookie Clicker. For example, we can modify the number of cookies we have using the &lt;code&gt;Game.cookies&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Let’s do that now!&lt;/p&gt;

&lt;p&gt;Simply copy the below code and paste it inside the “Console” tab of Chrome DevTools. Press “Enter” to execute it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;57000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once executed, you will get 57000 cookies absolutely FREE. You can add any number here.&lt;/p&gt;

&lt;p&gt;For example, the below code will give you “Infinity Cookies”.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#keep-getting-cookies" class="anchor"&gt;
  &lt;/a&gt;
  Keep Getting Cookies
&lt;/h2&gt;

&lt;p&gt;This game also has the functionality of earning cookies per second. &lt;code&gt;Game.cookiesPs&lt;/code&gt; property will give us a specified number of cookies for one second.&lt;/p&gt;

&lt;p&gt;So, why not wrap it inside a &lt;code&gt;setInterval&lt;/code&gt; of one second to continuously get more and more cookies?&lt;/p&gt;

&lt;p&gt;Here’s the code snippet to do so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookiesPs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This code will add 50 cookies to your account every second.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unlock-all-upgrades-and-purchase-them" class="anchor"&gt;
  &lt;/a&gt;
  Unlock All Upgrades and Purchase Them
&lt;/h2&gt;

&lt;p&gt;Finally, the developers of Cookie Clicker have also provided a cheat to get all upgrades for free.&lt;/p&gt;

&lt;p&gt;Basically, the below method will give you all upgrades as well as unlocks all types of buildings. Additionally, you will get 1.000 nonillion cookies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RuinTheFun&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;Now you might be wondering can we hack other browser-based games too?&lt;/p&gt;

&lt;p&gt;And the answer is "Yes, definitely!"&lt;/p&gt;

&lt;p&gt;You can hack any game no matter whether it is browser-based, Android, or even PC.&lt;/p&gt;

&lt;p&gt;I would like to mention that I learned game hacking from &lt;a href="https://guidedhacking.com/"&gt;guidedhacking.com&lt;/a&gt;. It is the best community forum that helps us understand all the concepts of game hacking in a step-by-step manner.&lt;/p&gt;

&lt;p&gt;Spend some time there!&lt;/p&gt;

&lt;p&gt;You'll find game hacking tutorials and guides right from their main menu. If you find something difficult then you can always ask questions from fellow hackers.&lt;/p&gt;

&lt;p&gt;At last, I would say that game hacking is not very difficult. It just depends on how much time you can dedicate to learn it.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>Use Mac APIs and build Mac apps with Go</title>
      <author>Jeff Lindsay</author>
      <pubDate>Tue, 02 Feb 2021 17:31:33 +0000</pubDate>
      <link>https://dev.to/progrium/use-mac-apis-and-build-mac-apps-with-go-ap6</link>
      <guid>https://dev.to/progrium/use-mac-apis-and-build-mac-apps-with-go-ap6</guid>
      <description>&lt;p&gt;If you work with Apple devices and you're a Go programmer, or are thinking about learning Go, we just got some new powers that are pretty cool. Today I'm releasing an alpha of &lt;a href="https://github.com/progrium/macdriver"&gt;macdriver&lt;/a&gt;, an Objective-C bridge for Go with bindings to common Mac APIs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/progrium/macdriver"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YGWskN0X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/progrium/macdriver/raw/main/macdriver.gif" alt="macdriver logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Those that were paying attention to my last post about &lt;a href="https://dev.to/progrium/large-type-legacy-celebrated-in-80-line-go-program-1mob"&gt;Large Type in 80 lines of Go&lt;/a&gt; might have already found macdriver. The largetype program is one of the example projects for macdriver.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/707db8e6d47c31ed90f0a65aeea1b805c718b1c18a2cd61b94e1ebb932b091af/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f4571616f4f324d584941454a4e4b323f666f726d61743d6a7067266e616d653d6c61726765" class="article-body-image-wrapper"&gt;&lt;img src="https://camo.githubusercontent.com/707db8e6d47c31ed90f0a65aeea1b805c718b1c18a2cd61b94e1ebb932b091af/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f4571616f4f324d584941454a4e4b323f666f726d61743d6a7067266e616d653d6c61726765" alt="largetype screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another example in the macdriver repo is this little menu bar extra (aka systray or status icon) that gives you a Pomodoro timer. This little program is &lt;em&gt;also&lt;/em&gt; &lt;a href="https://github.com/progrium/macdriver/blob/main/examples/pomodoro/main.go"&gt;less than 80 lines of Go&lt;/a&gt; using macdriver.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oRrArg1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/progrium/macdriver/raw/main/examples/pomodoro/pomodoro.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oRrArg1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/progrium/macdriver/raw/main/examples/pomodoro/pomodoro.gif%3Fraw%3Dtrue" alt="pomodoro screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lastly, if you've been playing with the Go 1.16 beta, or can wait for its imminent release, there is also an example that gives you a full screen webview with a transparent background, letting you draw overlays and such on your screen using web tech. Twitch streamers might be into that one. Pretty cool, yea?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#years-in-the-making" class="anchor"&gt;
  &lt;/a&gt;
  Years in the making
&lt;/h2&gt;

&lt;p&gt;The motivation for macdriver was just making applications in Go that use Mac system APIs like Cocoa for making GUI apps. That said, most of my work now uses web tech for user interfaces, a la Electron.  &lt;/p&gt;

&lt;p&gt;Last year I started an alternative Electron stack in Go using the &lt;a href="https://github.com/webview/webview"&gt;webview&lt;/a&gt; project, which uses your platform's native browser engine and makes a window with a webview. While absolutely simple and cross platform, the project has not been prioritizing any platform specific functionality. &lt;/p&gt;

&lt;p&gt;On top of this, if you want to also make a little menu applet like the Pomodoro timer in the same program (not... uncommon), you can find another standalone cross platform Go library for systray stuff, but these one-off libraries often suffer from being incomplete APIs. More importantly they are not composable! You can't use the systray library with the webview library because they both presume to own the main Cocoa thread. &lt;/p&gt;

&lt;p&gt;So as usual, I was frustrated there wasn't a broader thought out, more general solution. What do I do if I wanted to use some other Mac API? Wait for another incomplete, non-composable project? No, we build our own future here. &lt;/p&gt;

&lt;p&gt;I've actually been working on this (and so many other things) for a few years. I even found an &lt;a href="https://github.com/mkrautz/objc"&gt;Objective-C bridge for Go&lt;/a&gt; by a Danish fellow named Mikkel from &lt;em&gt;2013&lt;/em&gt;, except... it didn't work.&lt;/p&gt;

&lt;p&gt;This whole thing &lt;em&gt;should&lt;/em&gt; be straightforward. The &lt;a href="https://developer.apple.com/documentation/objectivec/objective-c_runtime"&gt;Objective-C runtime&lt;/a&gt; is actually a C library called libobjc. So in theory you should be able to use cgo to call libobjc and work with Objective-C objects from Go like any other C library. &lt;/p&gt;

&lt;p&gt;Unfortunately, the method calling functions in libobjc, to be generic to any method call, are variadic (takes arbitrary number of arguments). Cgo doesn't support variadic function calls! So Mikkel did an &lt;a href="https://github.com/mkrautz/variadic"&gt;assembly hack&lt;/a&gt; to make nearly any variadic C function callable. Amazing! But since 2013, changes to the Go runtime broke this and he had long since moved on to other projects. &lt;/p&gt;

&lt;p&gt;With some determination I got the variadic hack working again. I even forgot I posted about this &lt;a href="https://dev.to/progrium/start-of-an-objective-c-bridge-in-go-ep9"&gt;on dev.to in 2018&lt;/a&gt;. There were still more things to figure out, but I shelved it until early last year when I needed to solve this webview and systray composability problem. I brought in the abandoned objc bridge package, the variadic package I fixed, and started making native Go wrappers for some of the more common Mac APIs. The result was macdriver!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits" class="anchor"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h2&gt;

&lt;p&gt;Now you can make fast, machine native binaries in Go that do Mac things. And I don't just mean make MacOS apps. There are a lot of APIs that just open up new possibilities. For example, I'm excited to use the Core ML APIs for working with the Neural Engine on the new M1 devices. &lt;/p&gt;

&lt;p&gt;Another benefit is just being able to quickly make Mac apps using the Go build toolchain. No more Xcode! Just &lt;code&gt;go build&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-next" class="anchor"&gt;
  &lt;/a&gt;
  What Next
&lt;/h2&gt;

&lt;p&gt;I'm excited to see what people do with macdriver. There's lots more information on using it in &lt;a href="https://github.com/progrium/macdriver"&gt;the README&lt;/a&gt;, but I am still working on docs. At this point it should mostly be self explanatory, but feel free to ask questions in &lt;a href="https://github.com/progrium/macdriver/discussions"&gt;the forum&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If you're interested in exploring new possibilities with me, I've been meaning to try using macdriver for an Apple Watch app. There was an iOS proof of concept in the original bridge package by Mikkel, but I haven't tried it. Assuming it works (which may involve Xcode or other developer tools), it seems plausible it would also work for the Apple Watch or even... the Apple TV. &lt;/p&gt;

&lt;p&gt;Thanks for reading, have fun, and &lt;a href="https://github.com/sponsors/progrium"&gt;consider sponsoring my work&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>go</category>
      <category>showdev</category>
      <category>productivity</category>
      <category>mac</category>
    </item>
    <item>
      <title>How to Create a React App with a Node Backend: The Complete Guide</title>
      <author>Reed Barger</author>
      <pubDate>Tue, 02 Feb 2021 17:14:33 +0000</pubDate>
      <link>https://dev.to/reedbarger/how-to-create-a-react-app-with-a-node-backend-the-complete-guide-1ple</link>
      <guid>https://dev.to/reedbarger/how-to-create-a-react-app-with-a-node-backend-the-complete-guide-1ple</guid>
      <description>&lt;p&gt;A React frontend connected to a Node backend is a rock-solid combination for any application you want to build. &lt;/p&gt;

&lt;p&gt;This guide is designed to help you create full-stack projects with React as easy as possible.&lt;/p&gt;

&lt;p&gt;Let's see how to set up an entire project using React and Node from scratch and deploy it to the web.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Want to build and deploy React and Node apps of your own? &lt;a href="https://bit.ly/12-react-projects"&gt;Check out my course series&lt;/a&gt; that shows you how to build your own full-stack React projects, like this one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#tools-you-will-need" class="anchor"&gt;
  &lt;/a&gt;
  Tools You Will Need
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Make sure Node and NPM installed on your computer. You can download both at &lt;a href="https://nodejs.org"&gt;nodejs.org&lt;/a&gt; (NPM is included in your Node installation)&lt;/li&gt;
&lt;li&gt;Use a code editor of your choice. I am using and would personally recommend using VSCode. You can download VSCode at &lt;a href="https://code.visualstudio.com"&gt;code.visualstudio.com&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Make sure you have Git installed on your computer. This is necessary for deploying our application with Heroku. You can get it at &lt;a href="https://git-scm.com"&gt;git-scm.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;An account at &lt;a href="https://heroku.com"&gt;heroku.com&lt;/a&gt;. We will use Heroku to publish our app to the web entirely free.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#step-1-create-your-node-express-backend" class="anchor"&gt;
  &lt;/a&gt;
  Step 1: Create your Node (Express) backend
&lt;/h2&gt;

&lt;p&gt;First create a folder for your project, called &lt;code&gt;react-node-app&lt;/code&gt; (for example). &lt;/p&gt;

&lt;p&gt;Then, drag that folder into your code editor.&lt;/p&gt;

&lt;p&gt;To create our Node project, run the following command in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will create a package.json file which will allow us to keep track of all our app scripts and manage any dependencies our Node app needs.&lt;/p&gt;

&lt;p&gt;Our server code will live in a folder of the same name: &lt;code&gt;server&lt;/code&gt;. Let's create that folder.&lt;/p&gt;

&lt;p&gt;In it, we'll place a single file, out of which we'll run our server: &lt;code&gt;index.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We'll use Express to create simple web server for us which runs on port 3001 if no port is provided as an environment variable (Heroku will set this value when we deploy our app).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// server/index.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server listening on &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then in our terminal, we will install Express as a dependency to use it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i express
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And then create a script in package.json that will start our web server when we run it with &lt;code&gt;npm start&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;server/package.json&lt;/span&gt;&lt;span class="w"&gt;

  &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node server/index.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, we can run our app using this script by running npm start in our terminal and we should see that it is running on port 3001:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; node server/index.js

Server listening on 3001
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ted6sJoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zodbmi8hzrgw7xyowe99.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ted6sJoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zodbmi8hzrgw7xyowe99.gif" alt="Clip 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-create-an-api-endpoint" class="anchor"&gt;
  &lt;/a&gt;
  Step 2: Create an API Endpoint
&lt;/h2&gt;

&lt;p&gt;We want to use our Node and Express server as an API, so that it can give our React app data, change that data or do some other operation only a server can do.&lt;/p&gt;

&lt;p&gt;In our case, we will simple send our React app a message that says "Hello from server!" in a JSON object.&lt;/p&gt;

&lt;p&gt;The code below creates an endpoint for the route /api.&lt;/p&gt;

&lt;p&gt;If our React app makes a GET request to that route, we respond (using &lt;code&gt;res&lt;/code&gt;, which stands for response) with our JSON data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// server/index.js&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello from server!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server listening on &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: Make sure to place this above the &lt;code&gt;app.listen&lt;/code&gt; function.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since we've made changes to our Node code, we need to restart our server.&lt;/p&gt;

&lt;p&gt;To do that, end your start script in the terminal by pressing Command/Ctrl + C. Then restart it by running &lt;code&gt;npm start&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;And to test this, we can simply visit &lt;code&gt;http://localhost:3001/api&lt;/code&gt; in our browser and see our message:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qjp5HItc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dxj3navm5ca2txazctir.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qjp5HItc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dxj3navm5ca2txazctir.gif" alt="Clip 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-create-your-react-frontend" class="anchor"&gt;
  &lt;/a&gt;
  Step 3: Create your React frontend
&lt;/h2&gt;

&lt;p&gt;After creating our backend, let's move to the frontend. &lt;/p&gt;

&lt;p&gt;Open another terminal tab and use create-react-app to create a new React project with the name &lt;code&gt;client&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app client
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After that, we will have a React app with all of its dependencies installed.&lt;/p&gt;

&lt;p&gt;The only change we have to make is to add a property called &lt;code&gt;proxy&lt;/code&gt; to our package.json file. &lt;/p&gt;

&lt;p&gt;This will allow us to make requests to our Node server without having to provide the origin it is running on (&lt;a href="http://localhost:3001"&gt;http://localhost:3001&lt;/a&gt;) every time we make a network request to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;client/package.json&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"proxy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://localhost:3001"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we can start up our React app by running it's start script, which is the same as our Node server. First make sure to &lt;code&gt;cd&lt;/code&gt; into the newly-created client folder.&lt;/p&gt;

&lt;p&gt;After that, will start up on &lt;code&gt;localhost:3000&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;client
npm start

Compiled successfully!

You can now view client &lt;span class="k"&gt;in &lt;/span&gt;the browser.

Local:            http://localhost:3000
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Korx5iE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/klciz2is204lxxikjlid.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Korx5iE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/klciz2is204lxxikjlid.gif" alt="Clip 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-make-http-requests-from-react-to-node" class="anchor"&gt;
  &lt;/a&gt;
  Step 4: Make HTTP Requests from React to Node
&lt;/h2&gt;

&lt;p&gt;Now that we have a working React app, we want to use it to interact with our API.&lt;/p&gt;

&lt;p&gt;Let's see how to fetch data from the /api endpoint that we created earlier.&lt;/p&gt;

&lt;p&gt;To do so, we can head to the &lt;code&gt;App.js&lt;/code&gt; component in our &lt;code&gt;src&lt;/code&gt; folder and make an HTTP request using useEffect.&lt;/p&gt;

&lt;p&gt;We will make a simple GET request using the Fetch API to our and then have our data returned as JSON.&lt;/p&gt;

&lt;p&gt;Once we have the data returned to us, we will get the message property (to grab our greeting that we sent from the server) and then put it in a state variable called &lt;code&gt;data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This will allow us to display that message in our page if we have it. We are using a conditional in our JSX to say that if our data is not there yet, show the text "Loading...".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// client/src/App.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./logo.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-header"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-logo"&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Loading...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8-0GWOba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n1h1b5w7yjdc04bg4siv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8-0GWOba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n1h1b5w7yjdc04bg4siv.gif" alt="Clip 4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-deploy-your-app-to-the-web-with-heroku" class="anchor"&gt;
  &lt;/a&gt;
  Step 5: Deploy your app to the web with Heroku
&lt;/h2&gt;

&lt;p&gt;Finally, let's deploy our application to the web. &lt;/p&gt;

&lt;p&gt;First, within our client folder, make sure to remove the Git repo that is automatically initialized by create-react-app. &lt;/p&gt;

&lt;p&gt;This is essential to deploy our app, because we are going to set up a Git repo in the root folder of our project (&lt;code&gt;react-node-app&lt;/code&gt;), not in &lt;code&gt;client&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;client
&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; .git
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When we deploy, both our Node backend and React frontend are going to be served on the same domain (i.e. mycoolapp.herokuapp.com).&lt;/p&gt;

&lt;p&gt;We see how our requests are being handled by our Node API, so we need to write some code that will display our React app when it is requested by our user (for example, when we go to the home page of our app).&lt;/p&gt;

&lt;p&gt;We can do this back in &lt;code&gt;server/index.js&lt;/code&gt; by adding the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;// Have Node serve the files for our built React app&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../client/build&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;

&lt;span class="c1"&gt;// Handle GET requests to /api route&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello from server!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// All other GET requests not handled before will return our React app&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../client/build&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This code will first allow Node to access our built React project using the &lt;code&gt;express.static&lt;/code&gt; function for static files.&lt;/p&gt;

&lt;p&gt;And if a GET request comes in that is not handled by our /api route, our server will send back to our React app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This code allows our React and Node app to be deployed together on the same domain.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Then, we can tell our Node App how to do that by adding a &lt;code&gt;build&lt;/code&gt; script to our server package.json file that builds our React app for production:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;server/package.json&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node server/index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cd client &amp;amp;&amp;amp; npm install &amp;amp;&amp;amp; npm run build"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I would also recommend providing a field called "engines", where you want to specific the Node version you are using to build your project. This will be used for deployment.&lt;/p&gt;

&lt;p&gt;You can get your Node version by running &lt;code&gt;node -v&lt;/code&gt; and you can put the result in "engines" (i.e. 14.15.4):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;server/package.json&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"engines"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"your-node-version"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After this, we're ready to deploy using Heroku, so make sure you have an account at &lt;a href="https://heroku.com"&gt;Heroku.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you are signed in and are looking at your dashboard, you'll select New &amp;gt; Create New App and provide a unique app name.&lt;/p&gt;

&lt;p&gt;After that, you'll want to install the Heroku CLI on your computer so you can deploy your app whenever you make any changes using Git. We can install the CLI by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;npm i &lt;span class="nt"&gt;-g&lt;/span&gt; heroku
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once that's installed, you will log in to Heroku through the CLI using the &lt;code&gt;heroku login&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;heroku login

Press any key to login to Heroku
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once you have logged in, just need to follow the deployment instructions for our created app in the "Deploy" tab.&lt;/p&gt;

&lt;p&gt;The following four commands will initialize a new Git repo for our project, add our files to it, commit them, and add a Git remote for Heroku.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git init
heroku git:remote &lt;span class="nt"&gt;-a&lt;/span&gt; insert-your-app-name-here
git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-am&lt;/span&gt; &lt;span class="s2"&gt;"Deploy app to Heroku"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then the very last step is to publish our app by pushing the Heroku Git remote we just added using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push heroku master
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Congratulations! Our full-stack React and Node app is live!&lt;/p&gt;

&lt;p&gt;When you want to make changes to your app going forward (and deploy them), you just have to use git to add your files, commit them and then push to our Heroku remote:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"my commit message"&lt;/span&gt;
git push heroku master
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#want-to-build-realworld-apps-like-youtube-instagram-and-twitter-with-react-heres-how" class="anchor"&gt;
  &lt;/a&gt;
  Want to build real-world apps like YouTube, Instagram, and Twitter with React? Here's how.
&lt;/h2&gt;

&lt;p&gt;At the end of every month, I will be releasing an exclusive course, showing you exactly how to build a complete app clone with React from start to finish.&lt;/p&gt;

&lt;p&gt;Want to be notified when the next course drops? &lt;a href="https://bit.ly/12-react-projects"&gt;&lt;strong&gt;Join the waitlist here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>node</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Creating a Xylophone using CSS and Pug</title>
      <author>Gary Byrne</author>
      <pubDate>Tue, 02 Feb 2021 16:38:25 +0000</pubDate>
      <link>https://dev.to/garybyrne/creating-a-xylophone-using-css-and-pug-4dl9</link>
      <guid>https://dev.to/garybyrne/creating-a-xylophone-using-css-and-pug-4dl9</guid>
      <description>&lt;p&gt;Let's create a simple xylophone with some CSS and Pug. The xylophone sounds I will be using in this blog can be found &lt;a href="https://freesound.org/people/DANMITCH3LL/sounds/"&gt;here&lt;/a&gt;. The resulting codepen can be found &lt;a href="https://codepen.io/garyb1/pen/f59c52a7c9d00dd1d230491908d1f0e5"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-it-look-like" class="anchor"&gt;
  &lt;/a&gt;
  What will it look like?
&lt;/h2&gt;

&lt;p&gt;We will use an unordered list of buttons to represent the xylophone. The finished product will look like the image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XixhV6we--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612281745582/pqxy41fe_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XixhV6we--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612281745582/pqxy41fe_.png" alt="Screenshot 2021-02-02 at 15.55.36.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-xylophone" class="anchor"&gt;
  &lt;/a&gt;
  Creating the Xylophone
&lt;/h2&gt;

&lt;p&gt;To get up and running quickly with &lt;a href="https://pugjs.org/api/getting-started.html"&gt;Pug&lt;/a&gt; you can open up a &lt;a href="https://codepen.io"&gt;codepen&lt;/a&gt;. In your HTML settings, click Pug as your HTML preprocessor.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-our-pug" class="anchor"&gt;
  &lt;/a&gt;
  Writing our Pug
&lt;/h3&gt;

&lt;p&gt;Let's create an unordered list of buttons using an array of xylophone notes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- const notes = ['c', 'd', 'e', 'f', 'g', 'a', 'b', 'c2'];

main
  ul.xylophone(role="list")
    each note, index in notes
      li
        button #{note}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This produces the following HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;main&amp;gt;
  &amp;lt;ul class="xylophone" role="list"&amp;gt;
    &amp;lt;li&amp;gt;
      &amp;lt;button&amp;gt;c&amp;lt;/button&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
      &amp;lt;button&amp;gt;d&amp;lt;/button&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
      &amp;lt;button&amp;gt;e&amp;lt;/button&amp;gt;
    &amp;lt;/li&amp;gt;
    // ..... the rest
  &amp;lt;/ul&amp;gt;
&amp;lt;/main&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I added &lt;code&gt;role="list"&lt;/code&gt; to the &lt;code&gt;ul&lt;/code&gt; to overcome a semantics &lt;a href="https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html"&gt;issue&lt;/a&gt; in voiceover and safari. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-style-our-xylophone-with-css" class="anchor"&gt;
  &lt;/a&gt;
  Let's style our xylophone with CSS.
&lt;/h3&gt;

&lt;p&gt;First, let's reset &lt;code&gt;box-sizing&lt;/code&gt; and position the content to the center of the page.&lt;/p&gt;

&lt;p&gt;Alternatively, you can just import a CSS reset. I recommend the &lt;a href="https://piccalil.li/blog/a-modern-css-reset"&gt;modern CSS reset&lt;/a&gt; by &lt;a href="https://piccalil.li"&gt;Andy Bell&lt;/a&gt; but it's not necessary for this project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*,
*:before,
*:after {
  box-sizing: border-box;
}

body {
  min-height: 100vh;
  margin: 0;
  display: grid;
  place-items: center;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can style our &lt;code&gt;ul&lt;/code&gt; to be a &lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/"&gt;flex&lt;/a&gt; container. Using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors"&gt;attribute selector&lt;/a&gt; here just to open our CSS to other types of lists.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[role="list"] {
  list-style: none;
  display: flex;
  justify-content: space-between;
  padding: 0;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This gives us:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BFHnKx0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612276157190/XUVu98SXr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BFHnKx0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612276157190/XUVu98SXr.png" alt="Screenshot 2021-02-02 at 14.29.02.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can add some responsive sizing to our xylophone.&lt;br&gt;
We will apply the &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units"&gt;vmin&lt;/a&gt; relative length unit using CSS &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties"&gt;custom properties&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root {
  --desired-size: 60;
  --coefficient: 1vmin;
  --size: calc(var(--desired-size) * var(--coefficient));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's update our list with the new sizing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[role="list"] {
  list-style: none;
  display: flex;
  justify-content: space-between;
  padding: 0;
  height: calc(1.5 * var(--size));
  width: calc(2.5 * var(--size));
}

li {
  width: 10%;
}

button {
  width: 100%;
  height: 100%;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's apply the backboards of the xylophone. We will be &lt;code&gt;absolutely&lt;/code&gt; positioning these against our xylophone. To do this, we must first set &lt;code&gt;position: relative;&lt;/code&gt; in our &lt;code&gt;[role="list"]&lt;/code&gt; CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.xylophone:before,
.xylophone:after {
  content: "";
  position: absolute;
  z-index: -1; // hide these to the back, allow our buttons to appear in front
  background: black;
  height: 15%; // 15% of the overall xylophone height
  width: 100%;
}

.xylophone:before {
  top: 10%;
  transform: rotate(3deg);
}

.xylophone:after {
  bottom: 10%;
  transform: rotate(-3deg);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This gives us the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W7CZY_iw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612277217481/iqd-cWp34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W7CZY_iw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612277217481/iqd-cWp34.png" alt="Screenshot 2021-02-02 at 14.46.36.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hooking-up-our-audio" class="anchor"&gt;
  &lt;/a&gt;
  Hooking up our audio
&lt;/h3&gt;

&lt;p&gt;Before we continue to style our xylophone, let's add some audio to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;main
  ul.xylophone(role="list")
    each note, index in notes
      li
        button(onclick=`playNote('${note}')`)
          audio(
            data-key=`${note}`,
            src=`https://s3-us-west-2.amazonaws.com/s.cdpn.io/1312918/${note}.wav`
          )

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We have added a hidden audio element to be a child of the button. We can hook into this to play each note sound. I have added a &lt;code&gt;src&lt;/code&gt; attribute to point to the different &lt;code&gt;wav&lt;/code&gt; files. The &lt;code&gt;data-key&lt;/code&gt; attribute will be used within our querySelector to help us find an audio element for each individual note. In this example, I have stored them on my codepen s3 bucket. Next, I will need to add some JavaScript to handle the &lt;code&gt;on click&lt;/code&gt; logic.&lt;/p&gt;

&lt;p&gt;At the bottom of your &lt;code&gt;pug&lt;/code&gt; file, add the following script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;script.
  function playNote(note) {
    const audioElement = document.querySelector(`audio[data-key="${note}"]`);
    audioElement.currentTime = 0;
    audioElement.play();
  }

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#cleaning-up-our-xylophone" class="anchor"&gt;
  &lt;/a&gt;
  Cleaning up our xylophone
&lt;/h3&gt;

&lt;p&gt;Let's add some color to our buttons:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;li:nth-child(1) button {
  background-color: pink;
}
li:nth-child(2) button  {
  background-color: orange;
}
li:nth-child(3) button {
  background-color: yellow;
}
li:nth-child(4) button {
  background-color: lightgreen;
}
li:nth-child(5) button {
  background-color: green;
}
li:nth-child(6) button{
  background-color: skyblue;
}
li:nth-child(7) button{
  background-color: blue;
}
li:nth-child(8) button{
  background-color: rebeccapurple;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FLRLiKUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612278046628/QUX2QpIlx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FLRLiKUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612278046628/QUX2QpIlx.png" alt="Screenshot 2021-02-02 at 15.00.31.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, let's add the knobs for each button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;button {
  width: 100%;
  height: 100%;
  position: relative;
  border-radius: 5px;
}

button::before,
button::after {
  content: '';
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
  height: 5%;
  width: 35%;
  border-radius: 50%;
  background-color: white;
  box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
}

button::before {
  top: 5%;
}

button::after {
  bottom: 5%;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we have a working xylophone. Here is a working version:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/garyb1/embed/eYBNyQp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cleaning-up-our-xylophone" class="anchor"&gt;
  &lt;/a&gt;
  Cleaning up our Xylophone
&lt;/h2&gt;

&lt;p&gt;There is a number of things we can do to tidy up our component.&lt;/p&gt;

&lt;p&gt;When we click a button, we can apply a class to show the sound is playing.&lt;br&gt;
For the same button, we can also add an event listener to remove the class&lt;br&gt;
when the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/transitionend_event"&gt;transitionend&lt;/a&gt; event is fired. &lt;br&gt;
For this, we will remove the class when the &lt;code&gt;box-shadow&lt;/code&gt; transition has ended.&lt;/p&gt;

&lt;p&gt;Let's add a transition to our button and a nice &lt;code&gt;box-shadow&lt;/code&gt; when the button is playing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;button {
  //..other styles
  transition: all 1s ease; //we can listen for the box shadow end
}

button.playing {
  border-color: #ffc600;
  box-shadow: 0px -10px 1rem #FFC600;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Add the &lt;code&gt;data-key&lt;/code&gt; attribute with the value of the note to our button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   button(onclick=`playNote('${note}')`, data-key=`${note}`)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then apply the &lt;code&gt;.playing&lt;/code&gt; class when we click the button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;script.
  function playNote(note) {
    const audioElement = document.querySelector(`audio[data-key="${note}"]`);
    const buttonElement = document.querySelector(`button[data-key="${note}"]`);
    buttonElement.classList.add('playing');   
    audioElement.currentTime = 0;
    audioElement.play();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Add our &lt;code&gt;transitionend&lt;/code&gt; event listener:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;script.
  function removeStyles(e) {
    if (e.propertyName !== 'box-shadow') return;
    e.target.classList.remove('playing');
  }

  function playNote(note) {
    const audioElement = document.querySelector(`audio[data-key="${note}"]`);
    const buttonElement = document.querySelector(`button[data-key="${note}"]`);
    buttonElement.classList.add('playing');
    buttonElement.addEventListener('transitionend', removeStyles);
    audioElement.currentTime = 0;
    audioElement.play();
  }

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we have a nice transition on our xylophone:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/garyb1/embed/VwmLxgr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We can do a lot more with Pug. I created another example to show how we can pass values from pug into our CSS to use as custom properties.&lt;/p&gt;

&lt;p&gt;I randomly generate the hue for our background color each time, and I can pass the index which I use to make each button smaller in height and create a nice horizontal rhythm. In the pen below, you can also see how I used the &lt;code&gt;kbd&lt;/code&gt; element instead of the &lt;code&gt;button&lt;/code&gt; element to listen for keyboard events.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/garyb1/embed/XWmLXgd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references" class="anchor"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.twitch.tv/jh3yy/about"&gt;Jhey Tompkins Twitch&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://codepen.io/jh3y"&gt;Jhey Tompkins Codepen&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://codepen.io/garyb1"&gt;My Codepen&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>5 Ideas for Web Developer Portfolio Projects that Standout</title>
      <author>Renaissance Engineer</author>
      <pubDate>Tue, 02 Feb 2021 15:09:24 +0000</pubDate>
      <link>https://dev.to/renaissanceengineer/5-ideas-for-web-developer-portfolio-projects-that-standout-2ka4</link>
      <guid>https://dev.to/renaissanceengineer/5-ideas-for-web-developer-portfolio-projects-that-standout-2ka4</guid>
      <description>&lt;p&gt;Calculators, Todo lists, weather apps&lt;/p&gt;

&lt;p&gt;They've all been done to death as portfolio projects&lt;/p&gt;

&lt;p&gt;Not only are they boring to make, they aren't going to help you stand out when it comes to getting a job. Even if you don't directly make any of these projects, I hope they'll give you some inspiration to create something interesting.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/gMoJdjpdHWo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#be-sure-to-subscribe-if-you-want-to-see-more-project-ideas-and-tutorials" class="anchor"&gt;
  &lt;/a&gt;
  Be sure to subscribe if you want to see more project ideas and tutorials
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#real-time-stock-market-chart-or-game" class="anchor"&gt;
  &lt;/a&gt;
  Real Time Stock Market Chart or Game
&lt;/h2&gt;

&lt;p&gt;Using the &lt;a href="https://pusher.com/"&gt;Pusher API&lt;/a&gt; makes it easy to PUSH real time data to all users of your application. Some examples of how you could use this for projects would be something like a real time dashboard with stock market data or an online video game that requires shared data, like a chess board.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G37Nds4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ubpvrqrumb5fhb8fro14.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G37Nds4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ubpvrqrumb5fhb8fro14.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#congress-net-worth-tracker" class="anchor"&gt;
  &lt;/a&gt;
  Congress Net Worth Tracker
&lt;/h2&gt;

&lt;p&gt;Use the &lt;a href="https://www.opensecrets.org"&gt;Open Secrets&lt;/a&gt; database or API to get all kinds of data on the members of the US congress.&lt;/p&gt;

&lt;p&gt;One example of what you could do is create a data visualization app that shows the assets and net worth of each member of congress and allow comparisons by party or number of years in congress&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HQFnAksq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xzsf3odw08p183fnncxs.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HQFnAksq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xzsf3odw08p183fnncxs.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automated-invitesletters-for-events" class="anchor"&gt;
  &lt;/a&gt;
  Automated Invites/Letters for Events
&lt;/h2&gt;

&lt;p&gt;Tired of forgetting to send birthday cards for family and friends? Hosting an event and want to send customized invitations without all the work? Using the &lt;a href="https://www.lob.com"&gt;Lob API&lt;/a&gt; you can use code to automate this process with a few lines of code!&lt;/p&gt;

&lt;p&gt;You could create a spreadsheet containing names, addresses, and other data. Then use an image library to make custom images for postcards with the person's name on it. You could also pre-schedule the date you want each letter or postcard sent using a small database&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VYDIc9AY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/81pfyd4w0nqrqw1wqi5s.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VYDIc9AY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/81pfyd4w0nqrqw1wqi5s.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reddit-user-analyzer" class="anchor"&gt;
  &lt;/a&gt;
  Reddit User Analyzer
&lt;/h2&gt;

&lt;p&gt;Want an easy way to access almost every piece of data on Reddit? The &lt;a href="https://github.com/pushshift/api"&gt;Pushshift API&lt;/a&gt; makes this very easy and is free to use. &lt;/p&gt;

&lt;p&gt;My idea for this is to create a frontend app that queries the API and displays data for the username input. You could use charts and graphs to display the data like most upvoted comments, most frequently posted subreddits, most common words used, and much more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qO1SPzCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f5fxr3sutuxpig06j76t.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qO1SPzCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f5fxr3sutuxpig06j76t.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#online-reputation-management-tool" class="anchor"&gt;
  &lt;/a&gt;
  Online Reputation Management Tool
&lt;/h2&gt;

&lt;p&gt;Every company is worried about what people are saying about them online, the problem is that it's impossible to manually monitor this. But by using &lt;a href="https://webhose.io"&gt;WebHose&lt;/a&gt; you can automate this process by checking for mentions of keywords using different filters such as date, site URL, and more&lt;/p&gt;

&lt;p&gt;For this project you can create a simple User Interface to allow non-technical users to input keywords that will then be periodically checked and alerts sent to the users.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OAm43rsD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1z5inn15o19azfdh78c9.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OAm43rsD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1z5inn15o19azfdh78c9.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I'll be putting out more project ideas and tutorials soon so be sure to follow or subscribe to my YT channel if you are interested. If you make anything inspired by this post feel free to leave a comment to the github repo so others can check it out!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>career</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What is JAMStack? Must know for every developer in 2021!</title>
      <author>Tuomo Kankaanpää</author>
      <pubDate>Tue, 02 Feb 2021 15:03:42 +0000</pubDate>
      <link>https://dev.to/tumee/what-is-jamstack-must-know-for-every-developer-in-2021-26gl</link>
      <guid>https://dev.to/tumee/what-is-jamstack-must-know-for-every-developer-in-2021-26gl</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/S6Mtfsl17PQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I first heard the term &lt;em&gt;Jamstack&lt;/em&gt; at the end of last year. Since then I have studied it and gained a basic understanding of how to actually build websites using Jamstack. (I actually updated and wrote &lt;a href="https://www.tuomokankaanpaa.com"&gt;my website&lt;/a&gt; using Jamstack).&lt;/p&gt;

&lt;p&gt;In this blog post I have collected answers to the following questions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is Jamstack?&lt;/li&gt;
&lt;li&gt;What are the benefits of using Jamstack? (aka why to use it)&lt;/li&gt;
&lt;li&gt;How to get started with Jamstack?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;If you prefer a video over text, I created a video of this blog posts which you can watch &lt;a href="https://www.youtube.com/watch?v=S6Mtfsl17PQ"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-jamstack" class="anchor"&gt;
  &lt;/a&gt;
  What is Jamstack?
&lt;/h2&gt;

&lt;p&gt;The name Jamstack comes from Javascript, APIs and Markup. It is an architecture designed to make the web faster, more secure and easier to scale.&lt;/p&gt;

&lt;p&gt;This is done by using pre-rendering and decoupling. Frontend of a Jamstack site is pre-built and pre-rendered at build time to a highly optimized static pages. There are a bunch of &lt;a href="https://jamstack.org/generators/"&gt;popular tools&lt;/a&gt; for generating sites, like &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;, &lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt; and &lt;a href="https://www.11ty.dev/"&gt;Eleventy&lt;/a&gt;, to mention few.&lt;/p&gt;

&lt;p&gt;These pages can then be delivered with a CDN and there is no need for traditional dynamic web server. This makes the sites fast, cost efficient and highly scalable.&lt;/p&gt;

&lt;p&gt;Here is a great diagram from &lt;a href="https://www.jamstack.org"&gt;jamstack.org&lt;/a&gt; comparing Jamstack sites to traditional websites:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GwzzqdQm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bauxjxvp1j3s1og6r62c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GwzzqdQm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bauxjxvp1j3s1og6r62c.png" alt="Jamstack vs traditional"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-benefits-of-using-jamstack" class="anchor"&gt;
  &lt;/a&gt;
  What are the benefits of using Jamstack?
&lt;/h2&gt;

&lt;p&gt;Here is few of the benefeits that come with Jamstack sites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance" class="anchor"&gt;
  &lt;/a&gt;
  Performance
&lt;/h3&gt;

&lt;p&gt;In this day and age user's attention span is super short. If a web page has even a little bit of lag, you have a big chance of losing the user. With Jamstack sites this is not a problem. Since Jamstack sites are static sites hosten on CDN, they are super fast.&lt;/p&gt;

&lt;p&gt;Jamstack sites don't require the server to generate the site once a request hits the server. Because the site is pre-generated in build time, the server only has to serve the static file. So we get super good performance without massive, expensive and complex server infrastructure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#security" class="anchor"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;p&gt;The attack surface is quite small with Jamstack sites. Since we are just serving pages and assets as pre-generated files, this allows a read-only hosting which reduces the attack surface even further.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scale" class="anchor"&gt;
  &lt;/a&gt;
  Scale
&lt;/h3&gt;

&lt;p&gt;If we are getting a huge traffic spike, we can increase our CDN volume to handle the new traffic. Even a huge traffic spikes don't slow down Jamstack sites.&lt;/p&gt;

&lt;p&gt;You also don't have to add any caching logic for popular views and assets by yourself. Jamstack provides this by default if you are hosting the site on a CDN.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#maintainability" class="anchor"&gt;
  &lt;/a&gt;
  Maintainability
&lt;/h3&gt;

&lt;p&gt;Since Jamstack sites are hosted on a CDN, you pretty much don't have any server maintenance tasks. All the work is done in build time and after that you serve the site (the static files) from a CDN, you really don't need any servers that might require updating or other maintenance. The site is stable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#portability" class="anchor"&gt;
  &lt;/a&gt;
  Portability
&lt;/h3&gt;

&lt;p&gt;Jamstack sites are pre-generated making them easy to host. You can use any kind of static hosting solution to host your site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#developer-experience" class="anchor"&gt;
  &lt;/a&gt;
  Developer experience
&lt;/h3&gt;

&lt;p&gt;Developer experience with Jamstack is top noch. With Jamstack it is very fast and pleasant to work with and you can use wide variety of popular and modern tools and frameworks. This also guarantees that it shouldn't be too hard to find people that want to work with Jamstack.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-started-with-jamstack" class="anchor"&gt;
  &lt;/a&gt;
  How to get started with Jamstack?
&lt;/h2&gt;

&lt;p&gt;I recommend using a site generator to get started with your first Jamstack site. I personally have used &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; and &lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt;. Next.js offers a bit more functionality compared to Gatsby. With my limited experience with Next.js and Gatsby, I prefer Next.js. That is what I also use with my own &lt;a href="https://www.tuomokankaanpaa.com"&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So if you are familiar with Javascript and React, I recommend going with Next.js. They have a &lt;a href="https://nextjs.org/learn/basics/create-nextjs-app"&gt;great tutorial&lt;/a&gt; up on their site where you actually build a blog.&lt;/p&gt;

&lt;p&gt;Next.js also integrates nicely with &lt;a href="https://www.vercel.com"&gt;Vercel&lt;/a&gt; so deploying your application is super effortless.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Jamstack is a great and modern way for building websites. I will be using it for sure in my future projects.&lt;/p&gt;

&lt;p&gt;If you want to get started with Jamstack, there is no better way to learn a new technology than to use it. So go ahead and create something with it. I recommend the &lt;a href="https://nextjs.org/learn/basics/create-nextjs-app"&gt;Next.js blog tutorial&lt;/a&gt; for starters.&lt;/p&gt;

</description>
      <category>jamstack</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>I Made $4800 in January 2021</title>
      <author>AdemHodzic</author>
      <pubDate>Tue, 02 Feb 2021 13:39:40 +0000</pubDate>
      <link>https://dev.to/ademhodzic/i-made-4800-in-january-2021-2180</link>
      <guid>https://dev.to/ademhodzic/i-made-4800-in-january-2021-2180</guid>
      <description>&lt;p&gt;It's time for the first update in 2021.&lt;/p&gt;

&lt;p&gt;If you're not familiar with these posts, I'm documenting m journey from $5/hour Fiverr code monkey to $100/hour consultant.&lt;/p&gt;

&lt;p&gt;You can check out my previous updates on my profile or &lt;a href="https://kodeblok.com/categories/monthly-update/"&gt;visit the archive on my blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Although January was a wild month in the world, I had quite a chill one.&lt;/p&gt;

&lt;p&gt;I've restructured the deal with Client #1. &lt;/p&gt;

&lt;p&gt;Some pretty interesting projects came my way.&lt;/p&gt;

&lt;p&gt;And I started making my own product.&lt;/p&gt;

&lt;p&gt;Let's get started with the update.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR I made $4800 for 12 days of work on one project. I have two other projects in the pipeline.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#projects" class="anchor"&gt;
  &lt;/a&gt;
  Projects
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#client-1" class="anchor"&gt;
  &lt;/a&gt;
  Client #1
&lt;/h3&gt;

&lt;p&gt;I've already mentioned that Client #1 got funding. Now that they have money, we decided to restructure our deal a bit. &lt;/p&gt;

&lt;p&gt;The First thing is that we switched from charging by the hour to charging by the day. Client #1 currently occupies three days in the week.&lt;/p&gt;

&lt;p&gt;Next up we switched from $35/hour to $400/day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#leads" class="anchor"&gt;
  &lt;/a&gt;
  Leads
&lt;/h2&gt;

&lt;p&gt;Two people reached out this month.&lt;/p&gt;

&lt;p&gt;Coincidentally, they both work in finance and want to create their own SaaS product to escape the grind.&lt;/p&gt;

&lt;p&gt;I've had a total of three meetings, two of which were introductions, and one deep-dive.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lead-1" class="anchor"&gt;
  &lt;/a&gt;
  Lead #1
&lt;/h3&gt;

&lt;p&gt;Lead #1 wants to make a sales team performance tracker that integrates seamlessly with Stripe. The budget is around $5-$10k.&lt;/p&gt;

&lt;p&gt;I had an introduction meeting with him where I asked if we can get in touch in a week after he creates some mockups so I get a better picture of his vision.&lt;/p&gt;

&lt;p&gt;I've sent one follow-up email to which I haven't got a reply. I'll send another one in the following days.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lead-2" class="anchor"&gt;
  &lt;/a&gt;
  Lead #2
&lt;/h3&gt;

&lt;p&gt;Lead #2 wants to make a platform for discovering new food products. The budget is up to $5k.&lt;/p&gt;

&lt;p&gt;I had two meetings with him.&lt;/p&gt;

&lt;p&gt;It's the same situation as with Lead #1 where I asked for a mockup before I give out a quote.&lt;/p&gt;

&lt;p&gt;I received a mockup this week, had a deep-dive conversation to find more about the project, and I've written him a proposal in Bonsai.&lt;/p&gt;

&lt;p&gt;Bonsai notifies me when someone sees proposals and I got an email that he saw it. I'll follow up with him in a couple of days.&lt;/p&gt;

&lt;p&gt;I have no preference on which project I'd rather work on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-product" class="anchor"&gt;
  &lt;/a&gt;
  My Product
&lt;/h2&gt;

&lt;p&gt;After talking with these two leads, I've realized that I can win the project even if they don't accept the first proposal.&lt;/p&gt;

&lt;p&gt;If they reject the first one, I'll propose another one which will be 10-15 hours shorter but I'll ask them to buy a license for a SaaS starter.&lt;/p&gt;

&lt;p&gt;But there's a problem with that plan. There is no a good SaaS starter kit for Django and Vue.&lt;/p&gt;

&lt;p&gt;My current favorite stack for bootstrapped products like these is Django + Vue.&lt;/p&gt;

&lt;p&gt;I've tried to find a SaaS starter kit for this stack but couldn't find a good one so I've started writing my own.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I introduce you to &lt;a href="https://getdjangosaas.com/"&gt;Get Django SaaS&lt;/a&gt;. An opinionated SaaS Starter kit for Django and Vue.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So far I've:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Put up an email capture website&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kodeblok.com/posts/display-ads-saas/"&gt;Ran ads for the product&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Setup backend and frontend base projects&lt;/li&gt;
&lt;li&gt;Bootstrapped base layout for frontend&lt;/li&gt;
&lt;li&gt;Written email/password authentication system on the backend&lt;/li&gt;
&lt;li&gt;Created login and register page &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some things I still need to do before I can call this an MVP:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wire frontend auth with backend&lt;/li&gt;
&lt;li&gt;Write a system for CRUD scaffolding&lt;/li&gt;
&lt;li&gt;Add email integration with MailChimp and EmailOctopus&lt;/li&gt;
&lt;li&gt;Integrate billing with Stripe and Paddle&lt;/li&gt;
&lt;li&gt;Design and code common components a customer can choose from to customize the base look&lt;/li&gt;
&lt;li&gt;Add teams and email invite system&lt;/li&gt;
&lt;li&gt;Documentation, documentation, and more documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After I implement all this I'll see whether it will fly and if there are freelancers that are struggling with the same problem.&lt;/p&gt;

&lt;p&gt;You must be asking yourself: "&lt;em&gt;Hey Adem, it's awesome that you're building your own product but how did you validate this idea?&lt;/em&gt;".&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There's a ton of SaaS starter kits out there so there's a market for it.&lt;/li&gt;
&lt;li&gt;I'm scratching my own niche. One famous SaaS starter kit is Laravel Spark and its creator, Taylor Otwell, said that he'd be fine if no one was buying it since it's helpful for him. I'm going with the same approach. Even if I don't get any customers, I'll still have an awesome starter kit for future projects.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#expenses" class="anchor"&gt;
  &lt;/a&gt;
  Expenses
&lt;/h2&gt;

&lt;p&gt;Moving on I'll include my expenses for the month.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Expenses&lt;/th&gt;
&lt;th&gt;Amount&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Transaction Fees&lt;/td&gt;
&lt;td&gt;$259.50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Taxes&lt;/td&gt;
&lt;td&gt;$495&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Retirement Fund&lt;/td&gt;
&lt;td&gt;$154.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ethereum&lt;/td&gt;
&lt;td&gt;$320&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HelloBonsai&lt;/td&gt;
&lt;td&gt;$19&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Namecheap&lt;/td&gt;
&lt;td&gt;$8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Github Sponsorship&lt;/td&gt;
&lt;td&gt;$5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Patreon&lt;/td&gt;
&lt;td&gt;$13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;$1274&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#detailed-breakdown" class="anchor"&gt;
  &lt;/a&gt;
  Detailed breakdown
&lt;/h3&gt;

&lt;p&gt;Client #1 uses &lt;a href="https://www.letsdeel.com/"&gt;Deel&lt;/a&gt; to process payroll. I get paid via SWIFT so the transaction fees are SWIFT fees + my local bank fees.&lt;/p&gt;

&lt;p&gt;Lucky for me, in Bosnia taxes are pretty low and they come at a bit over 10%. &lt;/p&gt;

&lt;p&gt;Each month I have to contribute to the retirement fund a small amount of $154 to be eligible for a pension when I get old.&lt;/p&gt;

&lt;p&gt;I buy ETH each month to get the advantage of dollar-cost averaging and compounding effect. This is not an opinion on what should you invest in. I'm breaking down my business expenses because my crypto investments my other pension.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.hellobonsai.com/freelance-invoice?fp_ref=adem41"&gt;Hello Bonsai&lt;/a&gt; (affiliate link) subscription costs $19. Worth every penny.&lt;/p&gt;

&lt;p&gt;I bought &lt;a href="https://getdjangosaas.com"&gt;getdjangosaas.com&lt;/a&gt; from Namecheap for $8.&lt;/p&gt;

&lt;p&gt;I spend $18 supporting some creators and open-source contributors for the hard work they're doing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;January 2021 was one of the better months I had.&lt;/p&gt;

&lt;p&gt;I've made $4800 gross. If we factor in $1274 of expenses, my profit is &lt;strong&gt;$3526&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you want to read these updates as soon as I write them, you can &lt;a href="https://adems-freelance-journey.carrd.co/"&gt;sign up for my newsletter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Want to read previous updates? Visit &lt;a href="https://kodeblok.com/categories/monthly-update/"&gt;Archive&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading,&lt;br&gt;
&lt;a href="https://ademhodzic.com"&gt;Adem Hodzic&lt;/a&gt;&lt;/p&gt;

</description>
      <category>freelancing</category>
      <category>contracting</category>
      <category>webdev</category>
    </item>
    <item>
      <title>10 Biggest Remote Tech Jobs Aggregators Comparison</title>
      <author>Natalie Nelson</author>
      <pubDate>Tue, 02 Feb 2021 13:35:50 +0000</pubDate>
      <link>https://dev.to/nataliefdv/10-biggest-remote-tech-jobs-aggregators-comparison-389l</link>
      <guid>https://dev.to/nataliefdv/10-biggest-remote-tech-jobs-aggregators-comparison-389l</guid>
      <description>&lt;p&gt;There is a myriad of articles about where to find remote jobs, particularly in tech. Some of them are outdated and most of them don't provide detailed reviews. So that's why I decided to do my own research. I did a basic search by "React" skill (where possible) and expected to see mostly "Frontend Developer" vacancies. &lt;/p&gt;

&lt;p&gt;In order to make it easier and more clear I developed my own points based system. It is based on the parameters that I find most useful for my job search. Here they are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Number of remote vacancies: 0 (min) - 10 (max);&lt;/li&gt;
&lt;li&gt;Recency of vacancies: 0 (min) - 10 (max);&lt;/li&gt;
&lt;li&gt;Relevance: 0 (min) - 10 (max);&lt;/li&gt;
&lt;li&gt;Search by Skills: 0 - no; 3 - yes;&lt;/li&gt;
&lt;li&gt;Search by Titles / Categories: 0 - no 3 - yes;&lt;/li&gt;
&lt;li&gt;Location filters : 0 none; 2 - US-only filter; 4 - filter by other locations;&lt;/li&gt;
&lt;li&gt;Other filters: 0 (min) - 3 (max)&lt;/li&gt;
&lt;li&gt;E-mail subscription: 0 - none, 2 - yes, 4 - personalized:&lt;/li&gt;
&lt;li&gt;Extra features: 0 (min) - 5 (max).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And here is the final rating:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5rJ_M7yF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/bPCXkTZ/image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5rJ_M7yF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/bPCXkTZ/image.png" alt="My personal rating"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#bergamot" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="http://bergamot.io/"&gt;Bergamot&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--onbC4hFr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/dGm5fRk/screely-1612263446462.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--onbC4hFr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/dGm5fRk/screely-1612263446462.png" alt="Bergamot screen"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Number of remote vacancies&lt;/strong&gt;: 10 points&lt;br&gt;
&lt;em&gt;3,300+ remote positions found.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Recency of vacancies&lt;/strong&gt;: 10 points &lt;br&gt;
&lt;em&gt;First hundred vacancies are published within a recent month.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Relevance (top 10 search results)&lt;/strong&gt;: 10 points&lt;br&gt;
&lt;em&gt;All positions are relevant.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Search by Skills:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Search by Titles / Categories:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Location filters:&lt;/strong&gt; 4 points&lt;br&gt;
&lt;em&gt;It's possible to choose your Citizenship and the system will automatically filter out all non-relevant vacancies.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Other filters:&lt;/strong&gt; 0 points&lt;br&gt;
&lt;strong&gt;E-mail subscription:&lt;/strong&gt; 4 points&lt;br&gt;
&lt;em&gt;Personalized subscription (filtered by skills, titles) is available.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Extra features:&lt;/strong&gt; 3 points &lt;br&gt;
&lt;em&gt;There is an AI-search option available: you can search by inserting your Linkedin profile.&lt;/em&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-48" class="anchor"&gt;
  &lt;/a&gt;
  TOTAL: 48
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search by multi technologies, titles, citizenship. Smart location filter: Bergamot identifies geo-restrictions for applicants — and is the only aggregator that does it.&lt;/li&gt;
&lt;li&gt;Seems to be the largest remote tech jobs aggregator for now (24k+ jobs).&lt;/li&gt;
&lt;li&gt;Matches vacancies based on your Linkedin profile — you just paste the link.&lt;/li&gt;
&lt;li&gt;Flexible subscription: personal job posts selection in your inbox (you can also subscribe and receive job posts based on your Linkedin profile).&lt;/li&gt;
&lt;li&gt;Only real remote positions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Outdated vacancies after the first 10 pages.&lt;/li&gt;
&lt;li&gt;Just appeared on the market.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#workline" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://workaline.com/"&gt;Workline&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p1-WN-nR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/bW189Lf/screely-1612263201190.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p1-WN-nR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/bW189Lf/screely-1612263201190.png" alt="Workline screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number of remote vacancies:&lt;/strong&gt; 9 points&lt;br&gt;
&lt;em&gt;1,000+ remote positions found&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Recency of vacancies:&lt;/strong&gt;  10 points&lt;br&gt;
&lt;em&gt;Over hundred vacancies published during last month.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Relevance (top 10 search results):&lt;/strong&gt; 7 points &lt;br&gt;
&lt;em&gt;Lots of non-relevant vacancies like Ruby Developer and/or Mobile Developer.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Search by Skills:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Search by Titles / Categories:&lt;/strong&gt; 3 points &lt;br&gt;
&lt;strong&gt;Location filters:&lt;/strong&gt; 0 points &lt;br&gt;
&lt;strong&gt;Other filters:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;strong&gt;E-mail subscription:&lt;/strong&gt; 4 points&lt;br&gt;
&lt;strong&gt;Extra features:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;em&gt;It's possible to exclude keywords. This is the only website with such an option.&lt;/em&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-41-points" class="anchor"&gt;
  &lt;/a&gt;
  TOTAL: 41 points
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Great selection of jobs sorted by date. So it's very easy to find some fresh publications.&lt;/li&gt;
&lt;li&gt;Not a bad search algorithm: you can include and exclude some keywords.&lt;/li&gt;
&lt;li&gt;Flexible subscription: you can select keywords (include or exclude some) and also sending frequency.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sign up via Facebook is broken. What is it for?&lt;/li&gt;
&lt;li&gt;All the job posts I've opened were from Stack Overflow.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#remotelypeople" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://remotelypeople.com/"&gt;RemotelyPeople&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_C17uLwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/2tvCh95/screely-1612262940822.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_C17uLwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/2tvCh95/screely-1612262940822.png" alt="RemotelyPeople screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number of remote vacancies:&lt;/strong&gt; 9 points&lt;br&gt;
&lt;em&gt;1,700+ remote positions found&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Recency of vacancies:&lt;/strong&gt; 10 points&lt;br&gt;
&lt;em&gt;All positions are recently added and updated.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Relevance (top 10 search results):&lt;/strong&gt; 10 points&lt;br&gt;
&lt;em&gt;All positions are relevant.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Search by Skills:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Search by Titles / Categories:&lt;/strong&gt; 3 points &lt;br&gt;
&lt;strong&gt;Location filters:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;em&gt;Worldwide filter.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Other filters:&lt;/strong&gt;  1 point&lt;br&gt;
&lt;em&gt;Filter "salary mentioned".&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;E-mail subscription:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;em&gt;No additional filters.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Extra features:&lt;/strong&gt; 0 points&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-40-points" class="anchor"&gt;
  &lt;/a&gt;
  TOTAL: 40 points
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lots of relevant fresh positions.&lt;/li&gt;
&lt;li&gt;Good search options.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's not possible to customize email subscriptions.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#weworkremotely" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://weworkremotely.com/"&gt;WeWorkRemotely&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--soSDGTif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/0GQj2Mk/screely-1612262737692.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--soSDGTif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/0GQj2Mk/screely-1612262737692.png" alt="WWR screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number of remote vacancies:&lt;/strong&gt;  2 points&lt;br&gt;
&lt;em&gt;52 remote positions found&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Recency of vacancies:&lt;/strong&gt;  10 points&lt;br&gt;
&lt;em&gt;All positions are recently added and updated.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Relevance (top 10 search results):&lt;/strong&gt;  7 points &lt;br&gt;
&lt;em&gt;Most of the positions are highly relevant, but some include "React Native" (i.e. Mobile Development).&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Search by Skills:&lt;/strong&gt;  3 points&lt;br&gt;
&lt;strong&gt;Search by Titles / Categories:&lt;/strong&gt;  3 points &lt;br&gt;
&lt;strong&gt;Location filters:&lt;/strong&gt;  4 points&lt;br&gt;
&lt;em&gt;It's possible to filter US/EU and other countries only.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Other filters:&lt;/strong&gt;  3 points&lt;br&gt;
&lt;em&gt;There are job-type, company and other filters.&lt;/em&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;E-mail subscription:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;em&gt;Not possible to personalize based on skills (only by category).&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Extra features:&lt;/strong&gt; 0 points&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-34-points" class="anchor"&gt;
  &lt;/a&gt;
  TOTAL: 34 points
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flexible job search: titles, keywords, job categories, locations, companies, job types.&lt;/li&gt;
&lt;li&gt;Jobs for designers, copyrighters, management, finance, sales, etc.&lt;/li&gt;
&lt;li&gt;More suitable jobs: you can check related jobs when you read more about some relevant position. Additional information about every company: how many job posts published, where the main office is located, link to company's career page etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A rather small selection of vacancies. Or they are just hard to find — 428 job posts for developers active now.&lt;/li&gt;
&lt;li&gt;A huge (!) number of featured job posts, it really annoyed for me.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#remoteok" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="http://remoteok.io/"&gt;RemoteOK&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZclKk1Xw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Q9wFFH2/screely-1612262043620.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZclKk1Xw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Q9wFFH2/screely-1612262043620.png" alt="RemoteOK"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number of remote vacancies:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;em&gt;30+ active remote positions found.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Recency of vacancies:&lt;/strong&gt; 10 points &lt;br&gt;
&lt;em&gt;All positions are recently updated.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Relevance (top 10 search results):&lt;/strong&gt; 9 points &lt;br&gt;
&lt;em&gt;Most of the positions are highly relevant, but some include *"React Native" (i.e. Mobile Development).&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Search by Skills:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Search by Titles / Categories:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Location filters:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;em&gt;Only "show worldwide" filter available.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Other filters:&lt;/strong&gt; 0 points&lt;br&gt;
&lt;strong&gt;E-mail subscription:&lt;/strong&gt; 4 points&lt;br&gt;
&lt;strong&gt;Extra features:&lt;/strong&gt; 0 points&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-33-points" class="anchor"&gt;
  &lt;/a&gt;
  TOTAL: 33 points
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wide collection of job posts, not only for developers but also for marketers, designers, customer development specialists.&lt;/li&gt;
&lt;li&gt;Subscription: you can subscribe and receive relevant to your search job posts daily or weekly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Awful search feature: it is not possible to use more than one search query filter. For example  "React". You can't add any more technologies or titles. &lt;/li&gt;
&lt;li&gt;Old job posts in the results: when I've entered "React" and I was mostly offered vacancies that are 3-6 months old already.&lt;/li&gt;
&lt;li&gt;Job posts are featured by companies, so usually, you initially see promoted vacancies.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#remoteio" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="//remote.io"&gt;Remote.io&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AcxK3VFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/LYP7wxC/screely-1612261843061.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AcxK3VFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/LYP7wxC/screely-1612261843061.png" alt="Remoteio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number of remote vacancies:&lt;/strong&gt; 6 points&lt;br&gt;
&lt;em&gt;300+ remote positions found&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Recency of vacancies:&lt;/strong&gt; 10 points&lt;br&gt;
&lt;em&gt;All positions have been updated recently.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Relevance (top 10 search results):&lt;/strong&gt; 6 points&lt;br&gt;
&lt;em&gt;Lots of non-relevant vacancies like Technical Writer and QA Engineer.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Search by Skills:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Search by Titles / Categories:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Location filters:&lt;/strong&gt; 0 points &lt;br&gt;
&lt;strong&gt;Other filters:&lt;/strong&gt; 0 points&lt;br&gt;
&lt;strong&gt;E-mail subscription:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;em&gt;Only by category.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Extra features:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;em&gt;Cool section with tools for remote workers and digital nomads.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-33-points" class="anchor"&gt;
  &lt;/a&gt;
  TOTAL: 33 points
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Time zone indicated, but the required citizenship for the application is not.&lt;/li&gt;
&lt;li&gt;Salary is displayed for some positions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keyword search works not so well.&lt;/li&gt;
&lt;li&gt;Limited filters.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#findwork" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://findwork.dev/"&gt;Findwork&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RX3C_AZy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/n0JS6bn/screely-1612261262743.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RX3C_AZy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/n0JS6bn/screely-1612261262743.png" alt="Findwork"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number of remote vacancies:&lt;/strong&gt; 6 points&lt;br&gt;
&lt;em&gt;700&lt;/em&gt;+ remote positions found.*&lt;br&gt;
&lt;strong&gt;Recency of vacancies:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;em&gt;First position in search result was published 3 months ago and no longer accepting applications.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Relevance:&lt;/strong&gt; 4 points&lt;br&gt;
&lt;em&gt;Most positions from search result are "React Native" (i.e. Mobile Development), not "React" (i.e. Frontend Development).&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Search by Skills:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Search by Titles / Categories:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Location filters:&lt;/strong&gt; 0 points&lt;br&gt;
&lt;strong&gt;Other filters:&lt;/strong&gt; 3 points &lt;br&gt;
&lt;em&gt;There are lots of different filters, i.e. Employment Type, Source, Funding etc.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;E-mail subscription:&lt;/strong&gt; 4 points&lt;br&gt;
&lt;em&gt;Personalization (filtered by skills, titles) is available also.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Extra features:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;em&gt;Glassdoor ratings and Crunchbase info is available for some job posts.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-30-points" class="anchor"&gt;
  &lt;/a&gt;
  TOTAL: 30 points
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cool additional filters: by Glassdoor rating, funding raised, and the number of employees. This is a feature that I really liked.&lt;/li&gt;
&lt;li&gt;Login with Google, Github, Linkedin and set up an email subscription (use keywords, type of employment, and frequency).&lt;/li&gt;
&lt;li&gt;A selection of similar vacancies is displayed inside each job post.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Outdated vacancies published weeks ago.&lt;/li&gt;
&lt;li&gt;Poor keyword search.&lt;/li&gt;
&lt;li&gt;Not only remote vacancies.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#remotive" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://remotive.io/"&gt;Remotive&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fETTOJqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Qmrp2pk/screely-1612260553251.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fETTOJqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Qmrp2pk/screely-1612260553251.png" alt="Remotive"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number of remote vacancies:&lt;/strong&gt; 4 points&lt;br&gt;
&lt;em&gt;130+ active remote positions found&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Recency of vacancies:&lt;/strong&gt; 8 points&lt;br&gt;
&lt;em&gt;Some available vacancies are outdated.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Relevance (top 10 search results):&lt;/strong&gt; 6 points &lt;br&gt;
&lt;em&gt;A lot of non-relevant positions (e.g. .NET Developer).&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Search by Skills:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Search by Titles / Categories:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Location filters:&lt;/strong&gt; 2 points &lt;br&gt;
&lt;em&gt;US-only filter is available.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Other filters:&lt;/strong&gt; 0 points&lt;br&gt;
&lt;strong&gt;E-mail subscription:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;em&gt;It's possible to select only category (no other filters) to subscribe.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Extra features:&lt;/strong&gt; 0 points&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-28-points" class="anchor"&gt;
  &lt;/a&gt;
  TOTAL: 28 points
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Very clean and neat interface.&lt;/li&gt;
&lt;li&gt;Fast search.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not so many React vacancies available.&lt;/li&gt;
&lt;li&gt;Limited filters.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#careervault" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.careervault.io/"&gt;CareerVault&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bil75pvQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/b2jZTPY/screely-1612259955018.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bil75pvQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/b2jZTPY/screely-1612259955018.png" alt="CareerVault"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number of remote vacancies:&lt;/strong&gt; 5 points&lt;br&gt;
&lt;em&gt;105 remote positions found.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Recency of vacancies:&lt;/strong&gt; 7 points&lt;br&gt;
&lt;em&gt;Starting from page #3 there are 2-4 months+ old vacancies.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Relevance (top 10 search results):&lt;/strong&gt; 9 points&lt;br&gt;
&lt;em&gt;Most of the positions are highly relevant, but some include "React Native" (i.e. Mobile Development).&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Search by Skills:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Search by Titles / Categories:&lt;/strong&gt; 0 points &lt;br&gt;
&lt;strong&gt;Location filters:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;em&gt;US-only filter is available.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Other filters:&lt;/strong&gt; 0 points&lt;br&gt;
&lt;strong&gt;E-mail subscription:&lt;/strong&gt; 0 points&lt;br&gt;
&lt;strong&gt;Extra features:&lt;/strong&gt; 0 points&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-26-points" class="anchor"&gt;
  &lt;/a&gt;
  TOTAL: 26 points
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fresh selection: job posts published just a few hours ago.&lt;/li&gt;
&lt;li&gt;Aggregates vacancies from not only from job boards but also from companies' career pages.&lt;/li&gt;
&lt;li&gt;Signup (using Google / email) — an opportunity to save some job posts.&lt;/li&gt;
&lt;li&gt;Big selection of job posts: 17k+ at the moment.&lt;/li&gt;
&lt;li&gt;Only remote job posts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No full-text search;&lt;/li&gt;
&lt;li&gt;It's not possible to subscribe to get new vacancies.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#nodesk" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://nodesk.co/remote-jobs//"&gt;NoDesk&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eXiB469I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/WPJbXvD/screely-1612259171295.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eXiB469I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/WPJbXvD/screely-1612259171295.png" alt="NoDesk"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number of remote vacancies:&lt;/strong&gt; 1 points&lt;br&gt;
&lt;em&gt;Only 16 positions.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Recency of vacancies:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;em&gt;Not so many recently added vacancies.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Relevance:&lt;/strong&gt; 9 points&lt;br&gt;
&lt;em&gt;Almost all the positions are relevant.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Search by Skills:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Search by Titles / Categories:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Location filters:&lt;/strong&gt; 4 points&lt;br&gt;
&lt;strong&gt;Other filters:&lt;/strong&gt; 0 points&lt;br&gt;
&lt;strong&gt;E-mail subscription:&lt;/strong&gt; 2 points&lt;br&gt;
&lt;em&gt;All posts only.&lt;/em&gt; &lt;br&gt;
&lt;strong&gt;Extra features:&lt;/strong&gt; 0 points&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-24-points" class="anchor"&gt;
  &lt;/a&gt;
  TOTAL: 24 points
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User-friendly interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Very small number of jobs.&lt;/li&gt;
&lt;li&gt;Not so many recently added vacancies.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#meerkad" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://meerkad.com/"&gt;Meerkad&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ByxhevY6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/ggTB4Wz/screely-1612259717241.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ByxhevY6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/ggTB4Wz/screely-1612259717241.png" alt="Meerkad"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number of remote vacancies:&lt;/strong&gt; 7 points&lt;br&gt;
&lt;em&gt;500+ remote positions found&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Recency of vacancies:&lt;/strong&gt; 5 points&lt;br&gt;
&lt;em&gt;Lots of outdated positions starting from page #2.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Relevance (top 10 search results):&lt;/strong&gt; 5 points&lt;br&gt;
&lt;em&gt;Most vacancies are React Native ones (i.e. mobile).&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Search by Skills:&lt;/strong&gt; 3 points (but you need to sign-up first)&lt;br&gt;
&lt;strong&gt;Search by Titles / Categories:&lt;/strong&gt; 3 points&lt;br&gt;
&lt;strong&gt;Location filters:&lt;/strong&gt; 0 points&lt;br&gt;
&lt;strong&gt;Other filters:&lt;/strong&gt; 0 points&lt;br&gt;
&lt;strong&gt;E-mail subscription:&lt;/strong&gt; 0 points&lt;br&gt;
&lt;strong&gt;Extra features:&lt;/strong&gt; 0 points&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-23-points" class="anchor"&gt;
  &lt;/a&gt;
  TOTAL: 23 points
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;None as far that I can see.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OMG it requires you to sign up first in order to be able to search and apply for vacancies. No other website does the same.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Please, share your opinion about job aggregators and the way you find some new opportunities.&lt;/p&gt;

</description>
      <category>career</category>
      <category>react</category>
      <category>womenintech</category>
      <category>discuss</category>
    </item>
  </channel>
</rss>
