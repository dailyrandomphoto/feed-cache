<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Learn by Doing: Practice PHP OOP (level 3)</title>
      <author>Eric Chapman</author>
      <pubDate>Sat, 10 Apr 2021 17:33:43 +0000</pubDate>
      <link>https://dev.to/ericchapman/learn-by-doing-practice-php-oop-level-3-539d</link>
      <guid>https://dev.to/ericchapman/learn-by-doing-practice-php-oop-level-3-539d</guid>
      <description>&lt;p&gt;If you like this post and want more connect with me on Twitter: &lt;a href="https://twitter.com/justericchapman?ref_src=twsrc%5Etfw"&gt;Follow @justericchapman&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You want to learn PHP OOP for a long time but you keep postponing? Now is the time! For the next 30 days I will post php OOP exercises + solution.&lt;/p&gt;

&lt;p&gt;Your challenge is to try to solve the small exercise without looking at the solution. You can use the web to search for concept but please dont look at the solution before at least try to solve the exercise.&lt;/p&gt;

&lt;p&gt;We will start very easy but don't be bored because exercises will quickly became more and more challenging....&lt;/p&gt;

&lt;p&gt;Challenge accepted?&lt;/p&gt;

&lt;h1&gt;Exercise #5&lt;/h1&gt;

&lt;p&gt;In exercise #4 we created a class with a constructor using property promotion:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Today your challenge is to create a getter and setter to modify the name property. &lt;/p&gt;

&lt;p&gt;Hint: Getter and Setter are 2 methods:&lt;/p&gt;

&lt;p&gt;The getter method is a method that get (return) the object instance property value. &lt;/p&gt;

&lt;p&gt;The setter method is setting the current instance property value to a new supply value.&lt;/p&gt;

&lt;p&gt;Let's do it!&lt;/p&gt;

&lt;h1&gt;Exercise #6&lt;/h1&gt;

&lt;p&gt;A quick one: When setting the property name. Make sure that the name first letter is Uppercase.&lt;/p&gt;

&lt;h1&gt;Solution:&lt;/h1&gt;

&lt;h1&gt;STOP... Do the exercises first! It's the only way you will really learn.&lt;/h1&gt;

&lt;p&gt;If you have done your exercise here my solution. Noted most of the times, more than one solution will be possible. If you have something different that me, leave your solution in the comment to share and discuss.&lt;/p&gt;

&lt;h3&gt;Exercise 5 solution:&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Exercise 6 solution:&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;ucfirst&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;That's it for today. Tomorrow the journey continue, see you later! &lt;/p&gt;

&lt;p&gt;If you want to be contribute you can re-tweet this post on tweeter &lt;br&gt;
&lt;a href="https://twitter.com/justericchapman?ref_src=twsrc%5Etfw"&gt;Follow @justericchapman&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>laravel</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Generating GIFs with *dynamic* text to create a GIF countdown timer 🕑 that is accurate to the minute [how to]!</title>
      <author>InHuOfficial</author>
      <pubDate>Sat, 10 Apr 2021 17:24:09 +0000</pubDate>
      <link>https://dev.to/inhuofficial/this-gif-is-accurate-to-within-a-minute-how-to-create-a-dynamic-gif-countdown-3fhd</link>
      <guid>https://dev.to/inhuofficial/this-gif-is-accurate-to-within-a-minute-how-to-create-a-dynamic-gif-countdown-3fhd</guid>
      <description>

&lt;p&gt;&lt;strong&gt;The GIF below is counting down to the 1st September 2021 at 09:00. (GMT)&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k2WOmAyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://inhu.co/demos/inhu-launch/img/countdown-holder/countdown401977483.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k2WOmAyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://inhu.co/demos/inhu-launch/img/countdown-holder/countdown401977483.gif" alt='image with text "InHu launches in 000 Days 00 hours 00 minutes and 00 seconds"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think it is pretty cool that for the next 144 days (at time of writing) that Gif will always be within one or two minutes of an actual countdown timer!&lt;/p&gt;

&lt;p&gt;In fact you can &lt;a href="https://www.timeanddate.com/countdown/generic?iso=20210901T09&amp;amp;p0=1331&amp;amp;font=cursive"&gt;check timeanddate.com for the accuracy of my timer here&lt;/a&gt;, it &lt;em&gt;should&lt;/em&gt; be within a minute when you first load this page!&lt;/p&gt;

&lt;p&gt;Obviously it isn't one massive file (it would need &lt;strong&gt;12.4 MILLION&lt;/strong&gt; frames! so it would be &lt;em&gt;quite&lt;/em&gt; large) so how did I do it? &lt;/p&gt;

&lt;p&gt;In this article I cover how I:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#sequence"&gt;created the image sequence&lt;/a&gt;, &lt;/li&gt;
&lt;li&gt;
&lt;a href="#convert"&gt;converted it to a GIF&lt;/a&gt;, &lt;/li&gt;
&lt;li&gt;
&lt;a href="#update"&gt;update the article&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="#useful"&gt;where it is useful in the real world&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;a href="#why"&gt;and Why I created a countdown&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;final thought before we get cracking:&lt;/strong&gt; If you are returning to this article you may end up with a broken image link occassionally. Refreshing the page will sort that out, I don't think I can do anything about it as it is dev.to caching that appears to be the issue.&lt;/p&gt;

&lt;p&gt;Right, with all that out of the way, let's begin!&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generating-an-image-sequence-with-text"&gt;
  &lt;/a&gt;
  Generating an image sequence with text.
&lt;/h2&gt;

&lt;p&gt;The first part of the puzzle was creating an image sequence that I could later turn into a GIF.&lt;/p&gt;

&lt;p&gt;But before we create a sequence of images we have to work out how to make one image!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-an-image-with-text-over-it"&gt;
  &lt;/a&gt;
  Creating an image with text over it!
&lt;/h3&gt;

&lt;p&gt;Now with GD image library installed this isn't actually as difficult as it first seems. &lt;/p&gt;

&lt;p&gt;Most PHP hosting and environments have GD image library installed so you should be able to do this even on shared hosting!&lt;/p&gt;

&lt;p&gt;First we grab the source image (the background we are going to write our text on).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nb"&gt;imagecreatefromjpeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'img/inhu-countdown.jpg'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I created a super simple image with a large "white space" to the left.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Ar8AMR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://inhu.co/demos/inhu-launch/img/inhu-countdown-lrg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Ar8AMR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://inhu.co/demos/inhu-launch/img/inhu-countdown-lrg.jpg" alt="background image we are working with, blank to left, rocket blasting off to the right in InHu purples, pinks and greys"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is our "canvas" to work on. It also creates the image object that we can work with.&lt;/p&gt;

&lt;p&gt;The next thing we need to do is add the text.&lt;/p&gt;

&lt;p&gt;For this we use &lt;a href="https://www.php.net/manual/en/function.imagettftext.php"&gt;&lt;code&gt;imagettftext&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We need to pass it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The image object&lt;/li&gt;
&lt;li&gt;The font size (unitless)&lt;/li&gt;
&lt;li&gt;The angle we want the text at (in degrees)&lt;/li&gt;
&lt;li&gt;the x position (in pixels from the left);&lt;/li&gt;
&lt;li&gt;the y position (in pixels from the top);&lt;/li&gt;
&lt;li&gt;the colour of the text (in RGB - more on that in a sec)&lt;/li&gt;
&lt;li&gt;the font family (the path to the chosen font)&lt;/li&gt;
&lt;li&gt;the text (what we want it to say!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now the only thing that is a little bit confusing is how you pass RGB colours to the function.&lt;/p&gt;

&lt;p&gt;To do that we have to use another function: &lt;a href="https://www.php.net/manual/en/function.imagecolorallocate.php"&gt;&lt;code&gt;imagecolorallocate&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This function needs us to pass it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The image object&lt;/li&gt;
&lt;li&gt;the Red channel value (0-255)&lt;/li&gt;
&lt;li&gt;the Green channel value (0-255) &lt;/li&gt;
&lt;li&gt;the Blue channel value (0-255)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok that is fine, but I prefer Hex values when working with colours.&lt;/p&gt;

&lt;p&gt;No problem, I have a snippet sat in my library for converting Hex to an RGB array!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hexToRGB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$colour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;$r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;hexdec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;hexdec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$g&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;hexdec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'r'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'g'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Right so the process is straight forward.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Convert our Hex colour to RGB&lt;/li&gt;
&lt;li&gt;Pass our RGB colours to &lt;code&gt;imagecolorallocate&lt;/code&gt; to set that colour into the image pallette&lt;/li&gt;
&lt;li&gt;Create our text using &lt;code&gt;imagettftext&lt;/code&gt; and pass the relevant values.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All in all a simple example might look like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// our hex to RGB function&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hexToRGB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$colour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;$r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;hexdec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;hexdec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$g&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;hexdec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'r'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'g'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//create the image object&lt;/span&gt;
&lt;span class="nv"&gt;$image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;imagecreatefromjpeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'img/inhu-countdown.jpg'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// convert our Hex to RGB&lt;/span&gt;
&lt;span class="nv"&gt;$textColour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;hexToRGB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'#333333'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$textColourImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;imagecolorallocate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                      &lt;span class="nv"&gt;$textColour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
                                      &lt;span class="nv"&gt;$textColour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'g'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
                                      &lt;span class="nv"&gt;$textColour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="c1"&gt;// finally create our image&lt;/span&gt;
&lt;span class="nb"&gt;imagettftext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                   &lt;span class="c1"&gt;// font size&lt;/span&gt;
             &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                    &lt;span class="c1"&gt;// angle&lt;/span&gt;
             &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                  &lt;span class="c1"&gt;// x coord (150px from left)&lt;/span&gt;
             &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                  &lt;span class="c1"&gt;// y coord (220px from top) &lt;/span&gt;
             &lt;span class="nv"&gt;$textColourImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="c1"&gt;// colour we allocated earlier &lt;/span&gt;
             &lt;span class="s1"&gt;'fonts/arial.ttf'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="c1"&gt;// font path&lt;/span&gt;
             &lt;span class="s2"&gt;"Hello Text!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;       &lt;span class="c1"&gt;// the text we want&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then all we have to do is save the image as our chosen file type.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nb"&gt;imagepng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"image-with-text"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#adjusting-the-code-so-we-can-create-multiple-images-and-add-text-in-different-locations"&gt;
  &lt;/a&gt;
  Adjusting the code so we can create multiple images and add text in different locations.
&lt;/h3&gt;

&lt;p&gt;Right so we have worked out how to create an image with some text on, but that is just one piece of text. We are also hard-wiring all of our values which is obviously useless if we want to dynamically generate a countdown.&lt;/p&gt;

&lt;p&gt;Time to turn this into a class we can use.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;GifMake&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;gifMake&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;$texts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hexToRGB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$colour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$colour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;$r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;hexdec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;hexdec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$g&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;hexdec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'r'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'g'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;createImg&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;imagecreatefromjpeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'img/inhu-countdown.jpg'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="nv"&gt;$fontSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="nv"&gt;$angle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="nv"&gt;$y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="nv"&gt;$textColourHex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="nv"&gt;$fontFamily&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="nv"&gt;$text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

            &lt;span class="nv"&gt;$textColourRGB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;hexToRGB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$textColourHex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$textColourImg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;imagecolorallocate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                                    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                    &lt;span class="nv"&gt;$textColourRGB&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
                                    &lt;span class="nv"&gt;$textColourRGB&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'g'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
                                    &lt;span class="nv"&gt;$textColourRGB&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;


            &lt;span class="c1"&gt;//add the text&lt;/span&gt;
            &lt;span class="nb"&gt;imagettftext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                         &lt;span class="nv"&gt;$fontSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                         &lt;span class="nv"&gt;$angle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                         &lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                         &lt;span class="nv"&gt;$y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                         &lt;span class="nv"&gt;$textColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                         &lt;span class="nv"&gt;$fontFamily&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                         &lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;saveAsPng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$fileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'text-image'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$fileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$fileName&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;".png"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$fileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$location&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nv"&gt;$location&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$fileName&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$fileName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;imagepng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$fileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;saveAsJpg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$fileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'text-image'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$fileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$fileName&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;".jpg"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$fileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$location&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nv"&gt;$location&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$fileName&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$fileName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;imagejpeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$fileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;showImage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Content-Type: image/png'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;imagepng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Most of the code is the same as before, but this time we have made adjustments so we can pass values in via an array of "texts" we want adding.&lt;/p&gt;

&lt;p&gt;Another thing added are three methods for returning an image (&lt;code&gt;savePng()&lt;/code&gt;, &lt;code&gt;saveJpg()&lt;/code&gt; and &lt;code&gt;show()&lt;/code&gt;) which save the image as a PNG, or save it as a JPG or just output the image to view in the browser (which is useful for testing).&lt;/p&gt;

&lt;p&gt;Another thing to notice is that we now have an array declared at the start of the class called &lt;code&gt;$texts&lt;/code&gt;. This is where we are going to store each item of text that we want drawn onto the image.&lt;/p&gt;

&lt;p&gt;This way we can set and then loop through an array of instructions using &lt;code&gt;foreach ($this-&amp;gt;texts AS $item) {&lt;/code&gt; to set text in multiple places and multiple colours, sizes etc.&lt;/p&gt;

&lt;p&gt;One thing to note is if we wanted to make this truly reusable the image path would need to be set externally, but this is a quick project so hard wiring it is fine for now!&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#using-our-new-class"&gt;
  &lt;/a&gt;
  Using our new class!
&lt;/h4&gt;

&lt;p&gt;First we include it in our script and set the namespace&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;GifMake&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="s1"&gt;'gifmake.php'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we can create an image with multiple blocks of text easily:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;gifMake&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$img&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"#333333"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"font/inhu.ttf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"InHu Launches in..."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$img&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;160&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"#333333"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"font/inhu.ttf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"144"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$img&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;426&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"#763289"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"font/inhu.ttf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Days"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$img&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;160&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;380&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"#333333"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"font/inhu.ttf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"12"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$img&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;394&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;380&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"#763289"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"font/inhu.ttf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Hours"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$img&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;160&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;460&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"#333333"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"font/inhu.ttf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"09"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$img&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;338&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;460&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"#763289"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"font/inhu.ttf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Minutes"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$img&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;160&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;540&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"#333333"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"font/inhu.ttf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"17"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$img&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;540&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"#763289"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"font/inhu.ttf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Seconds"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$img&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;createImg&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$fileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"img/test"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$img&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;saveAsPng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$fileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The output looks something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qSq0_RdA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://inhu.co/demos/inhu-launch/img/article/one-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qSq0_RdA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://inhu.co/demos/inhu-launch/img/article/one-image.png" alt='our test image with the text "InHu Launches In 144 Days 12 Hours 09 Minutes 17 Seconds"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now it took a little bit of work placing the text but other than that it was pretty plain sailing!&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#the-final-step-for-an-image-sequence"&gt;
  &lt;/a&gt;
  The final step for an image sequence
&lt;/h4&gt;

&lt;p&gt;Now that we have a design that works all we have to do now is create a sequence of images where each image has 1 second removed.&lt;/p&gt;

&lt;p&gt;I went for a minute (60 images) as a nice balance between file size and people seeing it loop.&lt;/p&gt;

&lt;p&gt;So we just have to grab the difference between our target date and now, convert it to days, hours, minutes and seconds and then feed those values into our template we designed earlier.&lt;/p&gt;

&lt;p&gt;The following code is a little messy but it was what I ended up with:-&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;
&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;GifMake&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;GifCreator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Datetime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="s1"&gt;'giflib.php'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="s1"&gt;'gifcreator.php'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// get our current time and our target time then find the difference.&lt;/span&gt;
&lt;span class="nv"&gt;$now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$ends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Sep 1, 2021, 09:00:01'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="nv"&gt;$left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$now&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ends&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// grab the days, hours, minutes and seconds DIFFERENCE between our two dates&lt;/span&gt;
&lt;span class="nv"&gt;$days&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'%a'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$hours&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'%h'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$minutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'%i'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'%s'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// loop 60 times subtracting a second each time and drawing our text&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$seconds&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$minutes&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$minutes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$minutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$hours&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$hours&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$hours&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$days&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// we have a check to ensure our countdown date hasn't passed. Useful to add an "else" clause later with a different image for "countdown over"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$now&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;$ends&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="nv"&gt;$img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;gifMake&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$img&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"#333333"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"font/inhu.ttf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"InHu Launches in..."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="c1"&gt;// we use str_pad to make sure our days, minutes etc. have at least 2 figures&lt;/span&gt;
        &lt;span class="nv"&gt;$img&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"#333333"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"font/inhu.ttf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str_pad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$days&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;STR_PAD_LEFT&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$img&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;213&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"#763289"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"font/inhu.ttf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Days"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$img&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;190&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"#333333"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"font/inhu.ttf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str_pad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$hours&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;STR_PAD_LEFT&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$img&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;197&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;190&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"#763289"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"font/inhu.ttf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Hours"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$img&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;230&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"#333333"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"font/inhu.ttf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str_pad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$minutes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;STR_PAD_LEFT&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$img&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;169&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;230&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"#763289"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"font/inhu.ttf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Minutes"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$img&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;270&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"#333333"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"font/inhu.ttf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str_pad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$seconds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;STR_PAD_LEFT&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nv"&gt;$img&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;270&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"#763289"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"font/inhu.ttf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Seconds"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// call our build function to add the text and then save it&lt;/span&gt;
        &lt;span class="nv"&gt;$img&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;createImg&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$fileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"img/sequence/img"&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$img&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;savePng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$fileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;$seconds&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Voila! 60 images each with 1 second less than the previous on them&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ACdRJ9Cn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/itj0hgy800ijxd66ctnf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ACdRJ9Cn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/itj0hgy800ijxd66ctnf.jpg" alt="Sequence of 60 images counting down"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-a-gif"&gt;
  &lt;/a&gt;
  Creating a GIF
&lt;/h2&gt;

&lt;p&gt;Now I may have made my own little class for adding text, but I wasn't going to write a class for creating GIFs - there are too many things I would need to polish up on!&lt;/p&gt;

&lt;p&gt;I found this &lt;a href="https://github.com/Sybio/GifCreator"&gt;great GIF creation library by Sybio&lt;/a&gt; that seemed super simple.&lt;/p&gt;

&lt;p&gt;Here is the entirety of the code required to create our GIF:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$frames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nv"&gt;$frames&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"img/sequence/img"&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;".png"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$durations&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Initialize and create the GIF !&lt;/span&gt;
&lt;span class="nv"&gt;$gc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;GifCreator\GifCreator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$gc&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$frames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$durations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$gifBinary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$gc&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getGif&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"img/countdown.gif"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$gifBinary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The key part of it is the &lt;code&gt;$gc-&amp;gt;create&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;It expects&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An array of images (I used relative paths but it handles files as well)&lt;/li&gt;
&lt;li&gt;an array of durations, 1 per frame&lt;/li&gt;
&lt;li&gt;the number of times to repeat.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One quirk I found was that a duration of 100 is a second, I was expecting 1000 to be a second.&lt;/p&gt;

&lt;p&gt;Putting that all together we end up with our GIF&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k2WOmAyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://inhu.co/demos/inhu-launch/img/countdown-holder/countdown401977483.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k2WOmAyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://inhu.co/demos/inhu-launch/img/countdown-holder/countdown401977483.gif" alt='image with text "InHu launches in 000 Days 00 hours 00 minutes and 00 seconds"'&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#updating-the-devto-article"&gt;
  &lt;/a&gt;
  Updating the dev.to article
&lt;/h2&gt;

&lt;p&gt;Now this one is also pretty straight forward.&lt;/p&gt;

&lt;p&gt;To update a dev.to article you need the article ID.&lt;/p&gt;

&lt;p&gt;The proper way to get this is to query the API for your articles or store the article ID when we create an article.&lt;/p&gt;

&lt;p&gt;But yet again this is a one off project so all I need is to get the ID and hard wire it in.&lt;/p&gt;

&lt;p&gt;Luckily you can just:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create an article with basic information such as a title (which we can change)&lt;/li&gt;
&lt;li&gt;save it to draft&lt;/li&gt;
&lt;li&gt;go to the Dashboard and find the article you just created&lt;/li&gt;
&lt;li&gt;click the 3 dots for more options and right click on "Archive post" -&amp;gt; inspect.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will find the ID of your article in the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; that surrounds the Archive post button &lt;code&gt;id="edit_article_[the ID of your article]"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OKbBjIwQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tkn4iynpiypaz4g5omf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKbBjIwQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tkn4iynpiypaz4g5omf.jpg" alt="console showing the location of the ID on the form to grab the article ID"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we have that ID all we have to do is send a &lt;code&gt;PUT&lt;/code&gt; request to &lt;br&gt;
&lt;code&gt;https://dev.to/api/articles/{our-article-id-we-found-earlier}&lt;/code&gt; with the following parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;title&lt;/strong&gt; - article title&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;published&lt;/strong&gt; - whether the article is published (true / false)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;body_markdown&lt;/strong&gt; - our article content!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;tags&lt;/strong&gt; - an array of tags relevant to the article
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$vars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'article'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'article'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Your Article Title"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'article'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'published'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//set to true to publish&lt;/span&gt;
&lt;span class="nv"&gt;$vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'article'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'body_markdown'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'##Your article markdown'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'article'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'tags'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'up to'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'four'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'related'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'tags'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$vars_send&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;json_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$vars&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// convert to JSON&lt;/span&gt;

&lt;span class="nv"&gt;$ch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;curl_init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nb"&gt;curl_setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CURLOPT_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"https://dev.to/api/articles/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;your-article-id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;curl_setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CURLOPT_CUSTOMREQUEST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"PUT"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;curl_setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CURLOPT_POSTFIELDS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;$vars_send&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;//Post Fields&lt;/span&gt;

&lt;span class="nv"&gt;$headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'api-key: {Your API key - found under settings -&amp;gt; account}'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'Content-Type: application/json;'&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nb"&gt;curl_setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CURLOPT_HTTPHEADER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$headers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// add the headers to the request&lt;/span&gt;

&lt;span class="nb"&gt;curl_exec&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ch&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// go go go!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;For most purposes that should be sufficient. &lt;/p&gt;

&lt;p&gt;However I want the article cover image to be my countdown GIF. &lt;/p&gt;

&lt;p&gt;Unfortunately that means we can't send our data as a JSON encoded array of variables, instead we have to send just Markdown and include something called "front matter".&lt;/p&gt;

&lt;p&gt;Front matter is basically just meta data about the article.&lt;/p&gt;

&lt;p&gt;It's format is quite simple:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--------
title: our article title
published: true of false
tags: up to 4 tags that are relevant
description: for twitter cards and open graph (social sharing)
cover_image: URL of the cover image (this is what we need!)
--------
**All of our article content**
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Once we have that built that we can send just the body markdown (now with our front matter added to the start):&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="nv"&gt;$vars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'article'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'article'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'body_markdown'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$bodyMarkdownIncludingFrontMatter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nv"&gt;$vars_send&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;json_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$vars&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;....&lt;/span&gt;&lt;span class="n"&gt;same&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;All being well that will complete without errors. &lt;/p&gt;

&lt;p&gt;If you do get an error most of the time the API gives a meaningful error message so you know what to fix / what to search for when trying to solve the problem! I had a couple where my markdown was mangled but other than that it was plain sailing....except for a problem that you likely won't encounter under normal use....&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#an-unexpected-gotchya"&gt;
  &lt;/a&gt;
  An unexpected "gotchya"
&lt;/h3&gt;

&lt;p&gt;I got all of the above working and then ran my update script a few times.&lt;/p&gt;

&lt;p&gt;It generated a fresh image, it updated the article correctly....but something wasn't quite right?!&lt;/p&gt;

&lt;p&gt;My GIF was not using the latest time for the countdown. &lt;/p&gt;

&lt;p&gt;i checked my server - yup the image is generating correctly, so what was the problem?&lt;/p&gt;

&lt;p&gt;It turns out that I was being a bit naive! I thought that if I pointed the URL for the image at my server I could control the image.&lt;/p&gt;

&lt;p&gt;But dev.to is far cleverer than me and actually grabs the image from my server and caches it. You can't even get around it with classic cache busting techniques like appending &lt;code&gt;?t=12345&lt;/code&gt; to the end of the image URL.&lt;/p&gt;

&lt;p&gt;After a head scratch and a grumble I found a super simple solution.&lt;/p&gt;

&lt;p&gt;When I generate the image I just give it a random number as part of the file name.&lt;/p&gt;

&lt;p&gt;The only issue with this is that I don't want my server having a new image generated every minute and stored for the next 144 days.&lt;/p&gt;

&lt;p&gt;So I also have to remove the old image when I generate a new one.&lt;/p&gt;

&lt;p&gt;My final issue is that this actually runs on two separate scripts - one to generate the image and one to update the document (and I want to keep them separate so I can run the create script for the next minute while posting the last post as the creation can take 10-15 seconds).&lt;/p&gt;

&lt;p&gt;So in the end I hacked in a quick solution. In the GIF creation script I added the following code:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;//delete the existing file&lt;/span&gt;
&lt;span class="nv"&gt;$files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'img/countdown-holder/*'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$files&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; 
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;is_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// generate a random number to "bust the cache"&lt;/span&gt;
&lt;span class="nv"&gt;$cacheBuster&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;999999999&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//add our file back into the directory with a new file name&lt;/span&gt;
&lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"img/countdown-holder/countdown"&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$cacheBuster&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;".gif"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$gifBinary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And in the article update script I did the following:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"img/countdown-holder/"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;scandir&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$directory&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$ourImageURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$directory&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So that we could grab the file with a random name without having to pass information directly between the two scripts.&lt;/p&gt;

&lt;p&gt;Would I put this into a mission critical process? &lt;strong&gt;No!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Will it do for what I need and probably work without any issues? &lt;strong&gt;Yes!&lt;/strong&gt; and that is good enough for me!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-final-bits"&gt;
  &lt;/a&gt;
  The final bits
&lt;/h3&gt;

&lt;p&gt;Upload the two files to the server.&lt;/p&gt;

&lt;p&gt;Go set up a cron job for each of them to run every minute.&lt;/p&gt;

&lt;p&gt;Sit and check it all works....and it does if you are reading this article and the timer is in sync to the 1st September 2021 at 09:00 (GMT)!&lt;/p&gt;

&lt;p&gt;That is it, hopefully now you know how you can create an image sequence with dynamically added text, stitch those images together to form a GIF and (kind of) know how to update an article using the dev.to API.&lt;/p&gt;

&lt;p&gt;I plan on doing a detailed article soon on the dev.to API so if this last section wasn't detailed enough for you then give me a follow and hopefully my API article will help.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#so-how-in-sync-are-we"&gt;
  &lt;/a&gt;
  So how "in sync" are we
&lt;/h2&gt;

&lt;p&gt;Well if you have actually read the article this far you will probably have noticed the GIFs are either several minutes out or may even have stopped entirely!&lt;/p&gt;

&lt;p&gt;However if you refresh the page the GIF should be accurate within a minute, two at the most.&lt;/p&gt;

&lt;p&gt;If it wasn't for the caching issue I could have made it perfect to the second with a bit of extra work but you know what, it is close enough for me!&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#does-it-have-any-practical-applications"&gt;
  &lt;/a&gt;
  Does it have any practical applications?
&lt;/h2&gt;

&lt;p&gt;You might think with JavaScript being a much better (and far more lightweight!) solution for something like this it is just a waste of time and a "fun project".&lt;/p&gt;

&lt;p&gt;But there is one situation where this is useful...Email marketing.&lt;/p&gt;

&lt;p&gt;Being able to count down to an offer or special event accurately is quite engaging, and engagement is key! As we can't run JavaScript in emails our only option is a GIF.&lt;/p&gt;

&lt;p&gt;There may be other uses but that is why I wanted to learn how to do this as I plan on using it in the future to countdown to any events I am hosting / involved in!&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#so-what-am-i-counting-down-to"&gt;
  &lt;/a&gt;
  So what am I counting down to?
&lt;/h2&gt;

&lt;p&gt;The launch of my company InHu.&lt;/p&gt;

&lt;p&gt;That is all I am going to say for now, you will have to follow me if you want to find out more as I will slowly be releasing details of what I have been planning and orchestrating for the last year 😉!&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__551686"&gt;
  
    .ltag__user__id__551686 .follow-action-button {
      background-color: #c62aa4 !important;
      color: #131111 !important;
      border-color: #c62aa4 !important;
    }
  
    &lt;a href="/inhuofficial" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/inhuofficial"&gt;InHuOfficial&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/inhuofficial"&gt;Specialising in accessibility and website load speed / performance. If you have a question about [accessibility] or [page-speed-insights] ask away and I will help any way I can!&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>programming</category>
      <category>showdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Pluralsight is FREE in April!!</title>
      <author>Jeremy Morgan</author>
      <pubDate>Sat, 10 Apr 2021 17:13:52 +0000</pubDate>
      <link>https://dev.to/pluralsight/pluralsight-is-free-in-april-57el</link>
      <guid>https://dev.to/pluralsight/pluralsight-is-free-in-april-57el</guid>
      <description>&lt;p&gt;Great news!! Pluralsight is FREE for the entire month of April! If you've been wanting to skill up, and have never tried the platform, here's your chance!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#try-out-pluralsight-now"&gt;
  &lt;/a&gt;
  &lt;a href="https://bit.ly/PSFreeApril2021"&gt;Try out Pluralsight Now!&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;If you sign up now, here are a few things you can do to take advantage of Free April. Here are some things you can do &lt;strong&gt;right now&lt;/strong&gt; if you sign up and get started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-learn-angular"&gt;
  &lt;/a&gt;
  1. Learn Angular
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://bit.ly/2k1RW5S"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--upLmcLFA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vwkg35uael0iausnqnh.jpg" alt="Free Pluralsight"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the &lt;a href="http://bit.ly/2k1RW5S"&gt;Angular Getting Started course&lt;/a&gt;, you can finally jump in and learn some Angular! Deborah Kurata teaches things like nobody else I know. Her expert instruction will get you on the right track.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-artificial-intelligence"&gt;
  &lt;/a&gt;
  2. Artificial Intelligence
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3g0bh28"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DRSPytbz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pr8vm1o45bqwvoypfgv7.jpg" alt="Free Pluralsight"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Curious about AI? Do you want to get into it but don't know where to start?  &lt;a href="https://bit.ly/3g0bh28"&gt;Artificial Intelligence: The Big Picture of AI&lt;/a&gt; will get you where you need to go fast!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-learn-c"&gt;
  &lt;/a&gt;
  3. Learn C
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://bit.ly/PluralsightCSPath"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5rRWd0s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ts4u871p03ket970s9qr.jpg" alt="Free Pluralsight"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;C# is one of my favorite languages of all time. I absolutely love coding in it, and if it's something you've been curious about &lt;a href="http://bit.ly/PluralsightCSPath"&gt;The C# Path at Pluralsight&lt;/a&gt; will get you where you need to be, FAST.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-get-started-with-python"&gt;
  &lt;/a&gt;
  4. Get Started with Python
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3d3PAMG"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftcsFlLM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ynrwiek0jdwnsgbmxg7r.jpg" alt="Free Pluralsight"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OK if you know me, you already know about my love of Python. The ultimate “glue” language that empowers you to do SO many things. You can take this &lt;a href="https://bit.ly/3d3PAMG"&gt;Getting Started with Python&lt;/a&gt; course and hit the ground running! You'll be amazed at what you can accomplish with this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-learn-some-react"&gt;
  &lt;/a&gt;
  5. Learn Some React
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://bit.ly/2m3rzx9"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bF3xUZ6W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/akwh5hz6xjdzyshstibn.jpg" alt="Free Pluralsight"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React is undoubtedly one of the hottest front end frameworks out there, and it's taking over the world. &lt;a href="http://bit.ly/2m3rzx9"&gt;React Getting Started&lt;/a&gt; is the course that will launch you into this world head first and you'll understand the basics of React FAST.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-so-great-about-pluralsight"&gt;
  &lt;/a&gt;
  What's So Great About Pluralsight?
&lt;/h2&gt;

&lt;p&gt;You might ask, what's the difference between Pluralsight and just going on to YouTube and learning stuff?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Courses are Organized&lt;/strong&gt; - Finding tutorials and videos online, and trying to piece things together is difficult. It's tough to know what you need to know, find it all, and get full coverage of a topic. Pluralsight does that for you and puts together a solid package of the right knowledge.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Taught by Experts&lt;/strong&gt; - Not anyone can just record a few videos and put a course up on Pluralsight. Expert authors are recruited from the field and vetted. They are experienced, knowledgeable folks who have done real work in the field.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Courses Meet Strict Standards&lt;/strong&gt; - Every course goes through a quality control process to make sure they are clear and accurate. The content is thoroughly checked to make sure you're getting accurate, useful information about a topic.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://bit.ly/PSFreeApril2021"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f9if4TiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ye7mk61bs0wg3fke47kg.jpg" alt="Free Pluralsight"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Take a Course&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Check Your Knowledge with SkillIQ&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Get HANDS ON with Cloud Labs and Sandboxes&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So what are you waiting for? Give it a shot! It's Free during the month of April.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#try-out-pluralsight-now"&gt;
  &lt;/a&gt;
  &lt;a href="https://bit.ly/PSFreeApril2021"&gt;Try out Pluralsight Now!&lt;/a&gt;
&lt;/h1&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Why I'm writing a blog every week this year and why you should write more too!</title>
      <author>Jordan Finneran</author>
      <pubDate>Sat, 10 Apr 2021 16:42:25 +0000</pubDate>
      <link>https://dev.to/jordanfinners/why-i-m-writing-a-blog-every-week-this-year-and-why-you-should-write-more-too-525a</link>
      <guid>https://dev.to/jordanfinners/why-i-m-writing-a-blog-every-week-this-year-and-why-you-should-write-more-too-525a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="#intro"&gt;Intro&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#documentation"&gt;Documentation&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#summary"&gt;Summary&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This year I will be writing 52 blogs, one for each week of the year. Now I'm a realist, in that holidays and life will get in the way of writing, so my aim is for the number of blogs to be 52 or more, not necessarily one for each calender week.&lt;/p&gt;

&lt;p&gt;So that is quite a lot of blogs, you might be asking why.&lt;/p&gt;

&lt;p&gt;I've never been a particularly good writer, I guess thats why I've always tended to more numeric courses/roles. But I realise that it is a critical part of any project and life as a whole.&lt;/p&gt;

&lt;p&gt;Writing is still the best ways of transferring knowledge between people and generations.&lt;br&gt;
I also think that in tech it is often undervalued, which leads me on to why I'm writing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Documentation is as important as the code of a project. I fundamentally believe that.&lt;/p&gt;

&lt;p&gt;If you think back to projects you've enjoyed working on, APIs you've integrated with ease or dependencies you've enjoyed using. I bet they all have good documentation in common.&lt;/p&gt;

&lt;p&gt;Likewise if you've had issues using a tool or dependency or API etc, it probably wasn't that well documented, or, like I have on so many occasions, not read the README! 🙈&lt;/p&gt;

&lt;p&gt;Documentation can come in many forms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  READMEs&lt;/li&gt;
&lt;li&gt;  Architectural Diagrams&lt;/li&gt;
&lt;li&gt;  Background information about what it solves, why it exists&lt;/li&gt;
&lt;li&gt;  API Documentation&lt;/li&gt;
&lt;li&gt;  Usage Information&lt;/li&gt;
&lt;li&gt;  Commit Messages&lt;/li&gt;
&lt;li&gt;  Github Issues&lt;/li&gt;
&lt;li&gt;  Pull Requests and Review Comments&lt;/li&gt;
&lt;li&gt;  Schema Registries&lt;/li&gt;
&lt;li&gt;  Types&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these and many more forms of documentation, thread together to provide you with the story, the full picture of a project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Documentation gives you the who, what, why and how of a project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now I'm not saying that every project should have every tiny detail documented, it's very much specific to your circumstances.&lt;/p&gt;

&lt;p&gt;For example on my personal projects, there is very little documentation, its just me working on it so I can keep most of it in my head or at least thrown into a simple README.&lt;/p&gt;

&lt;p&gt;Whereas at work I like to ensure I've got really thorough READMEs, containing links to any background information about why a project exists, a README with getting started commands, API documentation with example curl requests and responses.&lt;br&gt;
This is because I work as part of a larger and ever growing team and so not everyone will have the same context as I will when I was writing the code, and anyone should be able to pick up the project and understand it practically as well as the person who wrote the code.&lt;/p&gt;

&lt;p&gt;I also like to think about &lt;em&gt;future me&lt;/em&gt; or successors who will take over the project after me. To ensure that they aren't looking at it thinking what they heck is this, and also partly what was this guy doing! 😂&lt;/p&gt;

&lt;p&gt;Understanding what good documentation looks like is really hard, and writing it equally tough.&lt;/p&gt;

&lt;p&gt;This is why I'm aiming to write so much this year, to get better with practice! Both reading and writing documentation consistently will help me to produce better documentation, waffle less and make life a bit easier for &lt;em&gt;future me&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;I also think writing about a topic can help solidify your understanding of a topic.&lt;br&gt;
Something I've picked up is if documentation is lacking in an area and someone new asks you to explain it, encourage them to document it and then review it afterwards. This not only helps delegate documentation writing, which is often a large task for  the more experienced team members. But also helps solidify the new team members understanding, see the situation from fresh eyes and give the new members ownership of a part of the teams work which helps embed them.&lt;/p&gt;

&lt;p&gt;I want to just give a shout out to &lt;a href="https://github.com/remarkjs/remark-lint#install"&gt;Remark&lt;/a&gt; which is a linter for your READMEs which makes so much sense to me. Our code should be of a consistent standard, so why not the READMEs too!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Documentation is hard. But it is also vital.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I aim to write consistently to help me create better documentation and speed up the process of writing the documentation too! I can already see this happening with how long it takes me to write a blog.&lt;/p&gt;

&lt;p&gt;I'd love to hear your thoughts on what good documentation looks like, and example of good docs! Let me know on &lt;a href="https://twitter.com/JordanFinners" rel="me noopener noreferrer"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>documentation</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Flask Pandas Dataframe - How to code it</title>
      <author>Sm0ke</author>
      <pubDate>Sat, 10 Apr 2021 16:32:08 +0000</pubDate>
      <link>https://dev.to/sm0ke/flask-pandas-dataframe-how-to-code-it-4emd</link>
      <guid>https://dev.to/sm0ke/flask-pandas-dataframe-how-to-code-it-4emd</guid>
      <description>&lt;p&gt;Hello Coders, &lt;/p&gt;

&lt;p&gt;This article presents a simple Flask project that loads pandas dataframe into the database and shows the information on a page. &lt;strong&gt;Flask Pandas Dataframe&lt;/strong&gt; is a &lt;code&gt;one-file&lt;/code&gt; project that might help beginners to understand some basic Flask concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a simple Flask &lt;code&gt;app&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Download a &lt;code&gt;pandas dataframe&lt;/code&gt; from a remote URL&lt;/li&gt;
&lt;li&gt;Create an SQLite DB and a table to save the information&lt;/li&gt;
&lt;li&gt;Load pandas in DB using a new &lt;code&gt;custom command&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Visualize&lt;/code&gt; the data in the browser&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; TL;DR; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/flask-pandas-dataframe"&gt;Flask Pandas Dataframe&lt;/a&gt; - source code&lt;/li&gt;
&lt;li&gt;More &lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;free samples&lt;/a&gt; provided by AppSeed&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#build-amp-set-up"&gt;
  &lt;/a&gt;
  Build &amp;amp; Set up
&lt;/h3&gt;

&lt;p&gt;To build the project and see some action, please follow this simple setup presented below. Please note that Python3 is required to have a successful build. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clone the sources&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/flask-pandas-dataframe.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;flask-pandas-dataframe
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Install dependencies&lt;/strong&gt;: Flask, Pandas, SqlAlchemy and requests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Virtualenv modules installation (Unix based systems)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Virtualenv modules installation (Windows based systems)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# virtualenv env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# .\env\Scripts\activate&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Install dependencies&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip3 &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Create the SQLite database&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Create database via Flask CLI&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;flask shell
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; from app import db  &lt;span class="c"&gt;# import SqlAlchemy interface &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; db.create_all&lt;span class="o"&gt;()&lt;/span&gt;     &lt;span class="c"&gt;# create SQLite database and Data table &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; quit&lt;span class="o"&gt;()&lt;/span&gt;              &lt;span class="c"&gt;# leave the Flask CLI  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Load the information&lt;/strong&gt; via a &lt;code&gt;custom command&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Load the data into the database&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;flask load-data titanic-min.csv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Start the app&lt;/strong&gt; and visualize the data&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Set the FLASK_APP environment variable&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;Unix/Mac&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;run.py
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;Windows&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;run.py
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;Powershell&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$env&lt;/span&gt;:FLASK_APP &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;".&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s2"&gt;un.py"&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Set up the DEBUG environment&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# (Unix/Mac) export FLASK_ENV=development&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# (Windows) set FLASK_ENV=development&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# (Powershell) $env:FLASK_ENV = "development"&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;flask run 
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# access the app in the browser: http://localhost:5005 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#dependencies"&gt;
  &lt;/a&gt;
  Dependencies
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flask.palletsprojects.com/en/1.1.x/"&gt;Flask&lt;/a&gt; - the framework used
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pandas.pydata.org/"&gt;Pandas&lt;/a&gt; - an amazing &lt;code&gt;data analysis&lt;/code&gt; library&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt; - Python SQL Toolkit and ORM&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://flask-sqlalchemy.palletsprojects.com/en/2.x/"&gt;Flask-SqlAlchemy&lt;/a&gt; - Flask extension for SQLAlchemy&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pypi.org/project/requests/"&gt;Requests&lt;/a&gt; - simple HTTP library.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Virtualenv modules installation (Unix based systems)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Virtualenv modules installation (Windows based systems)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# virtualenv env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# .\env\Scripts\activate&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Install modules - SQLite Database&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip3 &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#download-the-data"&gt;
  &lt;/a&gt;
  Download the data
&lt;/h3&gt;

&lt;p&gt;The dataset is downloaded from a remote &lt;a href="https://static.appseed.us/data/titanic.txt"&gt;location&lt;/a&gt; and saved &lt;strong&gt;titanic.csv&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Define the remote CSV file
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://static.appseed.us/data/titanic.txt'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Download the file (via request library)
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Save the content to a new LOCAL file
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'titanic.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#process-data"&gt;
  &lt;/a&gt;
  Process data
&lt;/h3&gt;

&lt;p&gt;The RAW dataset has ~900 rows and we can inspect it with ease using &lt;code&gt;pandas&lt;/code&gt; library&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;'titanic.csv'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;
     &lt;span class="n"&gt;PassengerId&lt;/span&gt;  &lt;span class="n"&gt;Survived&lt;/span&gt;  &lt;span class="n"&gt;Pclass&lt;/span&gt;                                               &lt;span class="n"&gt;Name&lt;/span&gt;     &lt;span class="n"&gt;Sex&lt;/span&gt;   &lt;span class="n"&gt;Age&lt;/span&gt;  &lt;span class="n"&gt;SibSp&lt;/span&gt;  &lt;span class="n"&gt;Parch&lt;/span&gt;            &lt;span class="n"&gt;Ticket&lt;/span&gt;     &lt;span class="n"&gt;Fare&lt;/span&gt; &lt;span class="n"&gt;Cabin&lt;/span&gt; &lt;span class="n"&gt;Embarked&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;              &lt;span class="mi"&gt;1&lt;/span&gt;         &lt;span class="mi"&gt;0&lt;/span&gt;       &lt;span class="mi"&gt;3&lt;/span&gt;                            &lt;span class="n"&gt;Braund&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Owen&lt;/span&gt; &lt;span class="n"&gt;Harris&lt;/span&gt;    &lt;span class="n"&gt;male&lt;/span&gt;  &lt;span class="mf"&gt;22.0&lt;/span&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;         &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="mi"&gt;21171&lt;/span&gt;   &lt;span class="mf"&gt;7.2500&lt;/span&gt;   &lt;span class="n"&gt;NaN&lt;/span&gt;        &lt;span class="n"&gt;S&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;              &lt;span class="mi"&gt;2&lt;/span&gt;         &lt;span class="mi"&gt;1&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="n"&gt;Cumings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Bradley&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Florence&lt;/span&gt; &lt;span class="n"&gt;Briggs&lt;/span&gt; &lt;span class="n"&gt;Th&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="n"&gt;female&lt;/span&gt;  &lt;span class="mf"&gt;38.0&lt;/span&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;          &lt;span class="n"&gt;PC&lt;/span&gt; &lt;span class="mi"&gt;17599&lt;/span&gt;  &lt;span class="mf"&gt;71.2833&lt;/span&gt;   &lt;span class="n"&gt;C85&lt;/span&gt;        &lt;span class="n"&gt;C&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;              &lt;span class="mi"&gt;3&lt;/span&gt;         &lt;span class="mi"&gt;1&lt;/span&gt;       &lt;span class="mi"&gt;3&lt;/span&gt;                             &lt;span class="n"&gt;Heikkinen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Miss&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Laina&lt;/span&gt;  &lt;span class="n"&gt;female&lt;/span&gt;  &lt;span class="mf"&gt;26.0&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="n"&gt;STON&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;O2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;3101282&lt;/span&gt;   &lt;span class="mf"&gt;7.9250&lt;/span&gt;   &lt;span class="n"&gt;NaN&lt;/span&gt;        &lt;span class="n"&gt;S&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;              &lt;span class="mi"&gt;4&lt;/span&gt;         &lt;span class="mi"&gt;1&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt;       &lt;span class="n"&gt;Futrelle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Jacques&lt;/span&gt; &lt;span class="n"&gt;Heath&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Lily&lt;/span&gt; &lt;span class="n"&gt;May&lt;/span&gt; &lt;span class="n"&gt;Peel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;female&lt;/span&gt;  &lt;span class="mf"&gt;35.0&lt;/span&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;            &lt;span class="mi"&gt;113803&lt;/span&gt;  &lt;span class="mf"&gt;53.1000&lt;/span&gt;  &lt;span class="n"&gt;C123&lt;/span&gt;        &lt;span class="n"&gt;S&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;              &lt;span class="mi"&gt;5&lt;/span&gt;         &lt;span class="mi"&gt;0&lt;/span&gt;       &lt;span class="mi"&gt;3&lt;/span&gt;                           &lt;span class="n"&gt;Allen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;William&lt;/span&gt; &lt;span class="n"&gt;Henry&lt;/span&gt;    &lt;span class="n"&gt;male&lt;/span&gt;  &lt;span class="mf"&gt;35.0&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;            &lt;span class="mi"&gt;373450&lt;/span&gt;   &lt;span class="mf"&gt;8.0500&lt;/span&gt;   &lt;span class="n"&gt;NaN&lt;/span&gt;        &lt;span class="n"&gt;S&lt;/span&gt;
&lt;span class="p"&gt;..&lt;/span&gt;           &lt;span class="p"&gt;...&lt;/span&gt;       &lt;span class="p"&gt;...&lt;/span&gt;     &lt;span class="p"&gt;...&lt;/span&gt;                                                &lt;span class="p"&gt;...&lt;/span&gt;     &lt;span class="p"&gt;...&lt;/span&gt;   &lt;span class="p"&gt;...&lt;/span&gt;    &lt;span class="p"&gt;...&lt;/span&gt;    &lt;span class="p"&gt;...&lt;/span&gt;               &lt;span class="p"&gt;...&lt;/span&gt;      &lt;span class="p"&gt;...&lt;/span&gt;   &lt;span class="p"&gt;...&lt;/span&gt;      &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;886&lt;/span&gt;          &lt;span class="mi"&gt;887&lt;/span&gt;         &lt;span class="mi"&gt;0&lt;/span&gt;       &lt;span class="mi"&gt;2&lt;/span&gt;                              &lt;span class="n"&gt;Montvila&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Rev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Juozas&lt;/span&gt;    &lt;span class="n"&gt;male&lt;/span&gt;  &lt;span class="mf"&gt;27.0&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;            &lt;span class="mi"&gt;211536&lt;/span&gt;  &lt;span class="mf"&gt;13.0000&lt;/span&gt;   &lt;span class="n"&gt;NaN&lt;/span&gt;        &lt;span class="n"&gt;S&lt;/span&gt;
&lt;span class="mi"&gt;887&lt;/span&gt;          &lt;span class="mi"&gt;888&lt;/span&gt;         &lt;span class="mi"&gt;1&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt;                       &lt;span class="n"&gt;Graham&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Miss&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Margaret&lt;/span&gt; &lt;span class="n"&gt;Edith&lt;/span&gt;  &lt;span class="n"&gt;female&lt;/span&gt;  &lt;span class="mf"&gt;19.0&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;            &lt;span class="mi"&gt;112053&lt;/span&gt;  &lt;span class="mf"&gt;30.0000&lt;/span&gt;   &lt;span class="n"&gt;B42&lt;/span&gt;        &lt;span class="n"&gt;S&lt;/span&gt;
&lt;span class="mi"&gt;888&lt;/span&gt;          &lt;span class="mi"&gt;889&lt;/span&gt;         &lt;span class="mi"&gt;0&lt;/span&gt;       &lt;span class="mi"&gt;3&lt;/span&gt;           &lt;span class="n"&gt;Johnston&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Miss&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Catherine&lt;/span&gt; &lt;span class="n"&gt;Helen&lt;/span&gt; &lt;span class="s"&gt;"Carrie"&lt;/span&gt;  &lt;span class="n"&gt;female&lt;/span&gt;   &lt;span class="n"&gt;NaN&lt;/span&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;      &lt;span class="mi"&gt;2&lt;/span&gt;        &lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;6607&lt;/span&gt;  &lt;span class="mf"&gt;23.4500&lt;/span&gt;   &lt;span class="n"&gt;NaN&lt;/span&gt;        &lt;span class="n"&gt;S&lt;/span&gt;
&lt;span class="mi"&gt;889&lt;/span&gt;          &lt;span class="mi"&gt;890&lt;/span&gt;         &lt;span class="mi"&gt;1&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt;                              &lt;span class="n"&gt;Behr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Karl&lt;/span&gt; &lt;span class="n"&gt;Howell&lt;/span&gt;    &lt;span class="n"&gt;male&lt;/span&gt;  &lt;span class="mf"&gt;26.0&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;            &lt;span class="mi"&gt;111369&lt;/span&gt;  &lt;span class="mf"&gt;30.0000&lt;/span&gt;  &lt;span class="n"&gt;C148&lt;/span&gt;        &lt;span class="n"&gt;C&lt;/span&gt;
&lt;span class="mi"&gt;890&lt;/span&gt;          &lt;span class="mi"&gt;891&lt;/span&gt;         &lt;span class="mi"&gt;0&lt;/span&gt;       &lt;span class="mi"&gt;3&lt;/span&gt;                                &lt;span class="n"&gt;Dooley&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Patrick&lt;/span&gt;    &lt;span class="n"&gt;male&lt;/span&gt;  &lt;span class="mf"&gt;32.0&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;            &lt;span class="mi"&gt;370376&lt;/span&gt;   &lt;span class="mf"&gt;7.7500&lt;/span&gt;   &lt;span class="n"&gt;NaN&lt;/span&gt;        &lt;span class="n"&gt;Q&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Let's inspect columns data types in the DataFrame: &lt;code&gt;df.dtypes&lt;/code&gt;. This information is used to design the &lt;code&gt;table&lt;/code&gt; where is information is loaded.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtypes&lt;/span&gt; 
&lt;span class="n"&gt;PassengerId&lt;/span&gt;      &lt;span class="n"&gt;int64&lt;/span&gt;
&lt;span class="n"&gt;Survived&lt;/span&gt;         &lt;span class="n"&gt;int64&lt;/span&gt;
&lt;span class="n"&gt;Pclass&lt;/span&gt;           &lt;span class="n"&gt;int64&lt;/span&gt;
&lt;span class="n"&gt;Name&lt;/span&gt;            &lt;span class="nb"&gt;object&lt;/span&gt;
&lt;span class="n"&gt;Sex&lt;/span&gt;             &lt;span class="nb"&gt;object&lt;/span&gt;
&lt;span class="n"&gt;Age&lt;/span&gt;            &lt;span class="n"&gt;float64&lt;/span&gt;
&lt;span class="n"&gt;SibSp&lt;/span&gt;            &lt;span class="n"&gt;int64&lt;/span&gt;
&lt;span class="n"&gt;Parch&lt;/span&gt;            &lt;span class="n"&gt;int64&lt;/span&gt;
&lt;span class="n"&gt;Ticket&lt;/span&gt;          &lt;span class="nb"&gt;object&lt;/span&gt;
&lt;span class="n"&gt;Fare&lt;/span&gt;           &lt;span class="n"&gt;float64&lt;/span&gt;
&lt;span class="n"&gt;Cabin&lt;/span&gt;           &lt;span class="nb"&gt;object&lt;/span&gt;
&lt;span class="n"&gt;Embarked&lt;/span&gt;        &lt;span class="nb"&gt;object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#prepare-the-sqlite-raw-storage-endraw-"&gt;
  &lt;/a&gt;
  Prepare the SQLite &lt;code&gt;storage&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;To manage the information with ease, SqlAchemy ORM will be used. The &lt;code&gt;Data&lt;/code&gt; table will store the loaded information - here is the definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Store the Titanic sad stats
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;passengerId&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;   &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;survived&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;   &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sex&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;     &lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;age&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;       &lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;fare&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;       &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;       &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# The string representation
&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;passengerId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;' - '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Create the SQLite database and the new table via &lt;code&gt;Flask CLI&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;flask shell
App: app &lt;span class="o"&gt;[&lt;/span&gt;development]
Instance: D:&lt;span class="se"&gt;\w&lt;/span&gt;ork&lt;span class="se"&gt;\r&lt;/span&gt;epo-learn&lt;span class="se"&gt;\p&lt;/span&gt;ython&lt;span class="se"&gt;\h&lt;/span&gt;ow-to&lt;span class="se"&gt;\i&lt;/span&gt;nstance
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; from app import db
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; db.create_all&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, we can inspect the database using &lt;a href="https://sqlitebrowser.org/"&gt;SQLiteBrowser&lt;/a&gt;, an open-source and free editor for SQLite (the table is empty).&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#load-data"&gt;
  &lt;/a&gt;
  Load Data
&lt;/h3&gt;

&lt;p&gt;The information will be loaded into the database via a &lt;code&gt;custom command&lt;/code&gt; = &lt;strong&gt;load-data&lt;/strong&gt;. The command expects a &lt;code&gt;file name&lt;/code&gt; as input argument (CSV format).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# New import
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;click&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# Custom command
&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"load-data"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"fname"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;''' Load data from a CSV file '''&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'*** Load from file: '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# The functional part goes here
&lt;/span&gt;    &lt;span class="p"&gt;...&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To check the command is properly coded we can type &lt;code&gt;flask --help&lt;/code&gt; in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;flask &lt;span class="nt"&gt;--help&lt;/span&gt;

Options:
  &lt;span class="nt"&gt;--version&lt;/span&gt;  Show the flask version
  &lt;span class="nt"&gt;--help&lt;/span&gt;     Show this message and exit.

Commands:
  load-data  Load data from a CSV file          &amp;lt;&lt;span class="nt"&gt;--&lt;/span&gt; NEW Command
  routes     Show the routes &lt;span class="k"&gt;for &lt;/span&gt;the app.
  run        Run a development server.
  shell      Run a shell &lt;span class="k"&gt;in &lt;/span&gt;the app context.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;








&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Load the information&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;flask load-data titanic-min.csv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Once the information is loaded we can start the app and check the results in the browser: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Default route&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ex2i0KIo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqre9xfk25nl7j6k6rev.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ex2i0KIo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqre9xfk25nl7j6k6rev.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Data Route&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UDpqGjBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/soqv5572z9ax7bbya2ic.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UDpqGjBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/soqv5572z9ax7bbya2ic.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;**Thanks for reading! For more resources, please access:  &lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flask.palletsprojects.com/en/1.1.x/"&gt;Flask&lt;/a&gt; - the framework used
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pandas.pydata.org/"&gt;Pandas&lt;/a&gt; - an amazing &lt;code&gt;data analysis&lt;/code&gt; library&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/"&gt;AppSeed&lt;/a&gt; - for support annd more samples&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>flask</category>
      <category>pandas</category>
    </item>
    <item>
      <title>I started to use DEV Community. Hello to Every one)</title>
      <author>Bekzod</author>
      <pubDate>Sat, 10 Apr 2021 15:53:41 +0000</pubDate>
      <link>https://dev.to/bekzoddeveloper/i-started-to-use-dev-community-hello-to-every-one-1d48</link>
      <guid>https://dev.to/bekzoddeveloper/i-started-to-use-dev-community-hello-to-every-one-1d48</guid>
      <description>&lt;p&gt;DEV COMMUNITY is Awesome!!!&lt;/p&gt;

</description>
      <category>programming</category>
    </item>
    <item>
      <title>JavaScript Baseball</title>
      <author>Tim Myers</author>
      <pubDate>Sat, 10 Apr 2021 15:40:05 +0000</pubDate>
      <link>https://dev.to/denvercoder/javascript-baseball-3pl4</link>
      <guid>https://dev.to/denvercoder/javascript-baseball-3pl4</guid>
      <description>&lt;h1&gt;
  &lt;a href="#do-it-because-its-fun"&gt;
  &lt;/a&gt;
  Do It Because It's Fun
&lt;/h1&gt;

&lt;p&gt;Some advice I give to people a lot is once you have a good grasp on your preferred language you should build something you're passionate about or something you enjoy.&lt;/p&gt;

&lt;p&gt;With new programmers a lot of the struggle is habit building. Getting into the groove of studying and learning takes time. And it's a lot easier if you're having fun while you're doing it.&lt;/p&gt;

&lt;p&gt;Now the key like I said before is to try and create a project that you find interesting. You may be thinking, "But I only like nuclear physics... how am I going to write a program about that?"&lt;/p&gt;

&lt;p&gt;The key here is not to build some elaborate project... at least not at first. You could create a project that asks you Nuclear Physics questions and you can keep track of correct answers and provide a scoreboard.&lt;/p&gt;

&lt;p&gt;Then you can build on that idea. You can add multiplayer support. A timer to answer the questions. Some fun animations, etc. Just add onto it piece by piece until you have something.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#play-ball"&gt;
  &lt;/a&gt;
  Play Ball
&lt;/h1&gt;

&lt;p&gt;I'm not particularly fond of Baseball. I played Little League as a kid, I umpired games for the &lt;strong&gt;really&lt;/strong&gt; small kids, and I played in High School. But I sort of lost interest in it after that.&lt;/p&gt;

&lt;p&gt;I decided to do this project because I had given this project to people that I had mentored in the past and I wanted to see how difficult it really was, (maybe I was asking too much of them). Now, I didn't build a Baseball game with full 3D graphics and controller support. It's basically just a bunch of HTML output in the browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oRq834rI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro0xnc7dp9ycq3rxzn7q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oRq834rI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro0xnc7dp9ycq3rxzn7q.png" alt="A baseball scoreboard with Away Team and Home team, outs, strikes, balls, who is at bat, and runners on base"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've abstracted away a lot of the complexity. You don't swing at a pitch or anything. You just pitch the ball. Then a random number generator will either make that pitch a "strike", or a "ball". Once you get to 4 balls the batter is "walked". If you get 3 "strikes" the batter is out. Basically I just use the fundamental rules of baseball to keep track of everything.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nbz3I8M8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilxlidn6mqnind98t4qd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nbz3I8M8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilxlidn6mqnind98t4qd.png" alt="A code file showing a switch statement"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I picked baseball because it's a relatively slow paced game but you can really do this with anything:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Horse Racing&lt;/li&gt;
&lt;li&gt;Tennis&lt;/li&gt;
&lt;li&gt;A simple solar system simulator&lt;/li&gt;
&lt;li&gt;Cricket&lt;/li&gt;
&lt;li&gt;A (Pet) Program where there is a creature of some sort that you have to take care of.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are tons of options. Pick something you enjoy and simulate it. Start small, and build the project up. Do you think that Twitter or Dev.to started out the way they are now? Nope. Twitter probably had the ability to login and send a message and that was it. You probably couldn't like, follow, retweet, block, mute, etc. They built an app with minimal functionality and build up from there.&lt;/p&gt;

&lt;p&gt;Here is the link to my &lt;a href="https://github.com/denvercoder/easy-baseball"&gt;easy-baseball&lt;/a&gt; repo if you'd like to take a look at the whole project. You can run it yourself and try and figure out how it works. It's actually not a lot of code so don't be intimidated. Just go have a look. &lt;/p&gt;

&lt;p&gt;If you want you have my full permission and encouragement to build on this project. There isn't a lot of functionality and there are a few bugs. See if you can find them and fix them.&lt;/p&gt;

&lt;p&gt;Thanks for reading and that's all y'all.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Things only bad developers do</title>
      <author>The Ninja Programmer</author>
      <pubDate>Sat, 10 Apr 2021 15:26:44 +0000</pubDate>
      <link>https://dev.to/theninjaprogrammer/things-only-bad-developers-do-efe</link>
      <guid>https://dev.to/theninjaprogrammer/things-only-bad-developers-do-efe</guid>
      <description>&lt;p&gt;As a developer, our job is not only limited to wring the code. There are a few more things that we must do apart from writing code.&lt;/p&gt;

&lt;p&gt;Today, we will tell you a few points that you &lt;strong&gt;should not&lt;/strong&gt; do as a developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-writing-over-optimized-code"&gt;
  &lt;/a&gt;
  1. Writing Over Optimized Code
&lt;/h2&gt;

&lt;p&gt;It's always good to write optimized code, but it's also important to make sure that we don't over-optimize it. Let's say, you are working in a team and you are assigned to write a function that does something. Suppose, you come up with a solution that does that job in 2 or 3 lines, but it's over-optimized and not very easily readable.&lt;/p&gt;

&lt;p&gt;If other team members are trying to understand this function, they will hardly understand what your code is doing and how is it working, because it's hardly readable due to being over-optimized. &lt;/p&gt;

&lt;p&gt;Always write optimized code, &lt;strong&gt;but not at the cost of readability and ease of understanding.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-pushing-untested-code-into-production"&gt;
  &lt;/a&gt;
  2. Pushing untested code into production
&lt;/h2&gt;

&lt;p&gt;No matter how much sure you are about your code and its working, pushing it directly to production without testing it, is a BAD decision.&lt;/p&gt;

&lt;p&gt;You might feel like doing this when you have made a really small change and not feel like testing it.&lt;/p&gt;

&lt;p&gt;But, there could be chances that that change might not be implemented as you wanted.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-pushing-commented-code-in-production"&gt;
  &lt;/a&gt;
  3. Pushing commented code in production
&lt;/h2&gt;

&lt;p&gt;This is very dangerous. You might think what harm it might do? But, when code comes under maintenance or updations and some other dev starts working with the code, there are always chances that he might uncomment it and screw up the entire application. Also, it might create unnecessary confusion.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-not-considering-the-bad-scenarios"&gt;
  &lt;/a&gt;
  4. Not considering the bad scenarios
&lt;/h2&gt;

&lt;p&gt;Your code will not always run in an ideal scenario or your users will not always use the app as you want them to use. So, ignoring all the basic bad scenarios is the worst thing to do. If you do that, your code will horribly fail.&lt;/p&gt;

&lt;p&gt;As a developer, always consider, manage all the bad scenarios. Make sure your code is ready to face the worst of conditions.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;br&gt;
Let us know your thoughts in the comments below&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>productivity</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>API, FUNCTIONS, BUTTON NOT FIRING IN REACT</title>
      <author>ADEKOLA Abdwahab</author>
      <pubDate>Sat, 10 Apr 2021 14:53:36 +0000</pubDate>
      <link>https://dev.to/codarbind/api-functions-button-not-firing-in-react-2hcc</link>
      <guid>https://dev.to/codarbind/api-functions-button-not-firing-in-react-2hcc</guid>
      <description>&lt;p&gt;I am currently building a MERN application.&lt;/p&gt;

&lt;p&gt;It is working fine on localhost - desktop, then I thought of exploring it on mobile, so I created a local network. See below for how to create and connect to local network.&lt;/p&gt;

&lt;p&gt;Alas, some of my buttons were not responding.&lt;/p&gt;

&lt;p&gt;What could have happened?&lt;/p&gt;

&lt;p&gt;Upon troubleshooting, I realized that only 'SUBMIT' buttons were not working.&lt;/p&gt;

&lt;p&gt;... after hours of googling ...&lt;/p&gt;

&lt;p&gt;I threw &lt;em&gt;alert('i clicked')&lt;/em&gt; inside the onclick function, I got the alert whenever I clicked.&lt;/p&gt;

&lt;p&gt;It was then I realized that I was calling a wrong API url. &lt;/p&gt;

&lt;p&gt;How?&lt;/p&gt;

&lt;p&gt;The API URL i was calling is &lt;a href="http://localhost:4000"&gt;http://localhost:4000&lt;/a&gt;. Port 4000 was where my backend is connected to. This would work fine on my local machine. However, it wont work over the network, because localhost === 127.0.0.1, which is different from Local Area Network Address - 192.168.43.263 .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SOLUTION:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I change &lt;a href="http://localhost:4000"&gt;http://localhost:4000&lt;/a&gt; to &lt;a href="http://192.168.43.263:4000"&gt;http://192.168.43.263:4000&lt;/a&gt; for all instances.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HOW TO CREATE A LOCAL NETWORK?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Simple and straight forward:&lt;/p&gt;

&lt;p&gt;A. Get your local ip:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;open command prompt or any command line interface:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ATlKaTrN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mupzw01wx2atcpvazq6u.png" alt="image"&gt;
&lt;/li&gt;
&lt;li&gt;Type in ipconfig:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1v7iSztD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tentpqkksi71jbdfn04i.png" alt="image"&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click enter:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cX74w4w5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqoupy3sctbr5x90vw5d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cX74w4w5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqoupy3sctbr5x90vw5d.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The marked is your IP.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;B. Connect your laptop (where your localhost is domiciled) to the same network with the other device (may be your phone) you want to use. This could be achieved by connecting them to the same wifi hubspot. &lt;/p&gt;

&lt;p&gt;My mobile device is connected to ColdVi wifi, same with my laptop, hence they are on the same network.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--35yxS5g1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lk42n9evmxxool1nh3a6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--35yxS5g1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lk42n9evmxxool1nh3a6.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C6sSL9qq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xi02ezc78wfpgb01ehuc.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C6sSL9qq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xi02ezc78wfpgb01ehuc.jpeg" alt="WhatsApp Image 2021-04-10 at 3.26.42 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;C. On the other device, enter this combination in your browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://yourIP:port"&gt;http://yourIP:port&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Hjph4Ir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwvpbcvj201i75zct1l7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Hjph4Ir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwvpbcvj201i75zct1l7.jpeg" alt="WhatsApp Image 2021-04-10 at 3.46.29 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;do not miss out the colon in between&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Your site should load.&lt;/p&gt;

</description>
      <category>react</category>
      <category>api</category>
      <category>function</category>
      <category>button</category>
    </item>
    <item>
      <title>Upload images with React, ExpressJS and mySQL</title>
      <author>Maureen </author>
      <pubDate>Sat, 10 Apr 2021 14:53:25 +0000</pubDate>
      <link>https://dev.to/maureenoldyck/upload-images-with-react-expressjs-and-mysql-47jn</link>
      <guid>https://dev.to/maureenoldyck/upload-images-with-react-expressjs-and-mysql-47jn</guid>
      <description>&lt;p&gt;For a project I was working on, we wanted to upload images so users could change their profile picture. As a beginner in React and Node, it took me a little while to finally figure out how to upload an image. That’s why I thought it would be a great subject to write an article about.&lt;/p&gt;

&lt;p&gt;This tutorial will explain you how I upload images in the backend, store the path to that image in our database and finally show the image on the frontend.&lt;/p&gt;

&lt;p&gt;For this tutorial I used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ReactJS -  ^17.0.1 - Frontend library&lt;/li&gt;
&lt;li&gt;NodeJs - ^14.15.4 - Runtime environment for the server&lt;/li&gt;
&lt;li&gt;Multer - ^1.4.2 - Middleware for handling multipart/form-data&lt;/li&gt;
&lt;li&gt;CORS - ^2.8.5 - Package for Cross-origin resource sharing &lt;/li&gt;
&lt;li&gt;ExpressJS - ^4.17.1 - Framework to build our application&lt;/li&gt;
&lt;li&gt;mySQL - ^2.18.1 - Database&lt;/li&gt;
&lt;li&gt;npm - ^6.14.10 - Package manager &lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#1-setup"&gt;
  &lt;/a&gt;
  1. Setup
&lt;/h2&gt;

&lt;p&gt;First things first, create a map where you set-up a React app and ExpressJS. (Please note, NodeJS is already installed on my computer, if you don’t have Node and/or npm yet please follow these instructions: (&lt;a href="https://nodejs.org/en/"&gt;https://nodejs.org/en/&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h3&gt;

&lt;p&gt;To create the frontend or "client" map, type in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#express-amp-multer-amp-cors"&gt;
  &lt;/a&gt;
  Express &amp;amp; Multer &amp;amp; CORS
&lt;/h3&gt;

&lt;p&gt;Create a server map in your root. Then in the terminal do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd server
npm init // To create packageJSON
npm install --save express multer cors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, create an index.js in the server map and require Express, cors and Multer like this ⬇️&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;multer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Multer, also set up a storage variable, that leads to the map you want your images to be stored (destination) and a filename, I used the original name of the picture here for filename.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1IVUlLIE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xohhzcmvgaciujhx5fu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1IVUlLIE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xohhzcmvgaciujhx5fu.png" alt="Multer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For CORS, you also need to specify some CORS options, mine are like this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yYjB5IDZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chi0eyc0xtp1brvitkez.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yYjB5IDZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chi0eyc0xtp1brvitkez.png" alt="CORS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We use CORS so that we can allow web browsers to access our APIs we are going to create.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mysql"&gt;
  &lt;/a&gt;
  mysql
&lt;/h3&gt;

&lt;p&gt;In your server map install mysql, a node module that will allow you to connect to the database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When that is installed, make a simple database connection like so ⬇️&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U6tUJCdN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrgn6p5wdguiijqgbjal.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U6tUJCdN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrgn6p5wdguiijqgbjal.png" alt="Database Connection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For easier understanding, this is how my final map structure looks like: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fDglnA7N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9amkvubafpkee3mc2oyf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fDglnA7N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9amkvubafpkee3mc2oyf.png" alt="File Structure"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-code"&gt;
  &lt;/a&gt;
  2. Code
&lt;/h2&gt;

&lt;p&gt;Normally you would write this into a component, however for this tutorials sake I will write it straight into the App.js file.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#21-create-input"&gt;
  &lt;/a&gt;
  2.1 Create input
&lt;/h3&gt;

&lt;p&gt;Create an input that only allows images, one at a time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"image"&lt;/span&gt; &lt;span class="na"&gt;accept=&lt;/span&gt;&lt;span class="s"&gt;"image/*"&lt;/span&gt; &lt;span class="na"&gt;multiple=&lt;/span&gt;&lt;span class="s"&gt;{false}&lt;/span&gt; &lt;span class="na"&gt;onChange=&lt;/span&gt;&lt;span class="s"&gt;{imageHandler}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#22-access-file-with-handler"&gt;
  &lt;/a&gt;
  2.2 Access file with handler
&lt;/h3&gt;

&lt;p&gt;To access the file we attach a handle to it with the &lt;code&gt;onChange&lt;/code&gt; method. With this handle we can use the event object which gives access to file uploaded. &lt;br&gt;
Then, we put that file inside a &lt;code&gt;new FormData&lt;/code&gt; interface as it provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent to the server. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#23-send-to-backend-with-fetch-post"&gt;
  &lt;/a&gt;
  2.3 Send to backend with fetch post
&lt;/h3&gt;

&lt;p&gt;We are writing this fetch API to get data from an external API (that we will create later in the server side). We set the method to POST because we want to send data, the data we want to send is inside the body. Here it is the formData variable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xeQywsp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uipyckv884ueh3yexhw7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xeQywsp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uipyckv884ueh3yexhw7.png" alt="POST fetch"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-database-query"&gt;
  &lt;/a&gt;
  3. Database query
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#31-api"&gt;
  &lt;/a&gt;
  3.1 API
&lt;/h3&gt;

&lt;p&gt;In the previous step we wrote a fetch POST from an API that we are now going to create. We need to make sure the fetch info needs to be the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;single&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Single stands for what type of multipart formdata we are expecting (in this case one image), and 'image' should be the value of the name attribute of your input.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#32-check-for-valid-file-extension"&gt;
  &lt;/a&gt;
  3.2 Check for valid file extension
&lt;/h3&gt;

&lt;p&gt;After that, we first want to check if the image uploaded is from a valid extension. This goes easily with an if statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;originalname&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.(&lt;/span&gt;&lt;span class="sr"&gt;jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Only image files (jpg, jpeg, png) are allowed!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#33-post-sql"&gt;
  &lt;/a&gt;
  3.3 POST SQL
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we get the image pathname, that we will store in our database. In the instance that we already have a database with data and we just want to change the image, we use the UPDATE statement in the connection query.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sqlInsert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;UPDATE&lt;/span&gt; &lt;span class="nx"&gt;images&lt;/span&gt; &lt;span class="nx"&gt;SET&lt;/span&gt; &lt;span class="s2"&gt;`image`&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;WHERE&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?;&lt;/span&gt;
&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sqlInsert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This query will either give an error or result. We use res.send to send the data given by the database, to the client side with the API.&lt;/p&gt;

&lt;p&gt;Here is what this whole query looks like in my code ⬇️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tHvKGv-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fp170pkl7out72413pyw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tHvKGv-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fp170pkl7out72413pyw.png" alt="POST Query"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#34-display-message"&gt;
  &lt;/a&gt;
  3.4 Display message
&lt;/h3&gt;

&lt;p&gt;As you saw in the query part, we send 'msg' to the client side but we also need to create a variable for that inside our code. For that we create a state variable that I called uploadStatus here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;uploadStatus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUploadStatus&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&amp;amp;&amp;amp;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt; {uploadStatus} &lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-accessing-the-image"&gt;
  &lt;/a&gt;
  4. Accessing the image
&lt;/h2&gt;

&lt;p&gt;Now our image path is uploaded into our database, so now we can link that path to the image and finally display our image. &lt;/p&gt;

&lt;p&gt;First, because we are storing our images inside our server map, we need to be able to access this map from our frontend as well, we can do that by this line of code :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#41-get-sql-request"&gt;
  &lt;/a&gt;
  4.1 GET SQL request
&lt;/h3&gt;

&lt;p&gt;Next, we need to create a GET API and SQL query to get the data we need.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R8ZZ2ZYg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48bb946eis0nzeh4dct1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R8ZZ2ZYg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48bb946eis0nzeh4dct1.png" alt="GET SQL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#42-display-image"&gt;
  &lt;/a&gt;
  4.2 Display image
&lt;/h3&gt;

&lt;p&gt;Like as we did a POST fetch, to get the data we need to do a GET fetch. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jmLaXANS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wdmalemiccp4yag7spt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jmLaXANS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wdmalemiccp4yag7spt.png" alt="GET Fetch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, to set state of the image we use the url to the backend server location.&lt;/p&gt;

&lt;p&gt;Now the only thing we have to do is add the image path into the src of the image element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{image &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;{image}&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"img"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, &lt;code&gt;npm start&lt;/code&gt; both your client and server folder. Here is the result: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q0ppnJ2p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/593bkbcn9sxcxnjdtarh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q0ppnJ2p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/593bkbcn9sxcxnjdtarh.png" alt="Final result"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;We made it to the end of the tutorial! &lt;/p&gt;

&lt;p&gt;Hopefully this tutorial was helpful for you. If there is anything you would do different or make my code better, please do let me know as I am still a beginner and eager to learn. &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#icon-i-used-as-image-is-from-flaticoncom"&gt;
  &lt;/a&gt;
  Icon I used as image is from &lt;a href="https://www.flaticon.com/"&gt;flaticon.com&lt;/a&gt;
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#header-image-is-by-marcel-friedrich-on-unsplash"&gt;
  &lt;/a&gt;
  Header image is by &lt;a href="https://unsplash.com/@screenwork_ch?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Marcel Friedrich&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/computer-image-upload?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;
&lt;/h6&gt;

</description>
      <category>react</category>
      <category>mysql</category>
      <category>beginners</category>
      <category>node</category>
    </item>
    <item>
      <title>Choosing a Framework in Node.js</title>
      <author>Basile</author>
      <pubDate>Sat, 10 Apr 2021 14:44:26 +0000</pubDate>
      <link>https://dev.to/basileleroy/choosing-a-framework-in-node-js-3n0c</link>
      <guid>https://dev.to/basileleroy/choosing-a-framework-in-node-js-3n0c</guid>
      <description>&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Today, I will be writing about my findings on using frameworks in &lt;br&gt;
a Node.js project as a beginner.    &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I can only assume that every person that started coding, has been confronted with this situation...&lt;br&gt;
Where you want to achieve a certain feature or use a certain structure to ease the process when working on a project.    &lt;/p&gt;

&lt;p&gt;This post will be about my finding in this kind of situation.   &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#1-what-do-you-want-to-do"&gt;
  &lt;/a&gt;
  1. What do you want to do?
&lt;/h4&gt;

&lt;p&gt;First question to ask yourself would be what kind of features you want to have. In order to install the right framework, you will need to look for the feature you need, and the features the package will provide.&lt;br&gt;&lt;br&gt;
Some packages are specific to certain other frameworks or maybe even to certain database managers, etc ...&lt;/p&gt;

&lt;p&gt;Let's give an example:   &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://vuetifyjs.com/en/"&gt;Vuetify&lt;/a&gt;&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gC8Ue3gz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/joczpm8jij44bg27smgp.png" alt="image"&gt;
&lt;code&gt;Vuetify&lt;/code&gt; is a framework that helps making better ui components when using &lt;code&gt;Vue&lt;/code&gt; as framework. Which means that it would not be of much use when you would be working with another type of frameworks like &lt;code&gt;Reactjs&lt;/code&gt; or &lt;code&gt;Svelte&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;
  &lt;a href="#12-examples-of-popular-frameworks-to-use"&gt;
  &lt;/a&gt;
  1.2 examples of popular frameworks to use:
&lt;/h5&gt;

&lt;p&gt;When working on a Javascript project it is a popular thing to do to install both a front-end framework (which will be about the components of your website and the interface), and a back-end framework to support the server functionality of that project.     &lt;/p&gt;

&lt;p&gt;A example would be: &lt;em&gt;React.js and Express.js&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://reactjs.org/"&gt;React.js&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LidPsjLE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7phdr7sg3grvd49mugqj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LidPsjLE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7phdr7sg3grvd49mugqj.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
A React-app will provide you with a ready to use package. Which will save you a lot of time.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JzK6TS8f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e33tr0kyk3aa68endk9l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JzK6TS8f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e33tr0kyk3aa68endk9l.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://expressjs.com/"&gt;Express.js&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iD_VEG7Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qltyl7fvxhbhe59krrwb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iD_VEG7Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qltyl7fvxhbhe59krrwb.png" alt="image"&gt;&lt;/a&gt; &lt;br&gt;
On the other side, Express will be taking care of the server. like connecting an Api, Using a register/login system (can also be a framework on its own), etc...     &lt;/p&gt;

&lt;p&gt;In both parts of the project you can install specific dependencies to use. Those will be stored inside &lt;code&gt;package.json&lt;/code&gt; files. But we will come back to that later on!    &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Just remember that we can use a lot of different frameworks inside a project, and even have it separated between different parts of a project, like the "front-end" part and the "back-end" part!    &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But let's continue...&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#2-deprecated-or-not"&gt;
  &lt;/a&gt;
  2. Deprecated or not?
&lt;/h4&gt;

&lt;p&gt;Let's assume that we found a framework that fits our needs for our project... It is important to look for it's activity (for example: latest update date) and usability!&lt;br&gt;&lt;br&gt;
Factors to keep in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Has it been recently updated or maintained?&lt;/li&gt;
&lt;li&gt;What are the webbrowsers that would support it?&lt;/li&gt;
&lt;li&gt;Frequently downloaded/installed?&lt;/li&gt;
&lt;li&gt;Decent and/or enough documentation?
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;As a beginner one of the biggest problems when working with a unknown framework will be figuring out how to use it.&lt;/code&gt;&lt;br&gt;&lt;br&gt;
So you might want to only use frameworks that are well documented.     &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#3-they-evolve"&gt;
  &lt;/a&gt;
  3. They evolve!
&lt;/h4&gt;

&lt;p&gt;Most frameworks are originally open source, which meant that it is a certainty that they will evolve regularly, unless it has been abandoned of course (but that's why we keep part 2 of this article in mind!)&lt;br&gt;&lt;br&gt;
That also means that it is my recommendation to frequently go look at the original repository for new updates/messages.    &lt;/p&gt;

&lt;p&gt;One of my favorite tips to give is to go check the "issues" page of that repository on &lt;code&gt;GitHub&lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yJbpAEew--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8ynpqb2192akeepl0t7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yJbpAEew--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8ynpqb2192akeepl0t7.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
It can be a goldmine of information and sometimes you may even find answers to unanswered questions about a certain error!     &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#4-the-implementation"&gt;
  &lt;/a&gt;
  4. The implementation
&lt;/h4&gt;

&lt;p&gt;So... We found our framework, it has what we need, is recently updated, well documented and has been used by others a lot. PERFECT!&lt;br&gt;&lt;br&gt;
Now we need to install it.     &lt;/p&gt;

&lt;p&gt;To Install a framework, we will need to initialize our node project first.&lt;br&gt;&lt;br&gt;
You can use your terminal to move into your project folder where you can use this line of code into your terminal to initialize node:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will ask a few configuration questions to set up your project inside a &lt;code&gt;package.json&lt;/code&gt; file.&lt;br&gt;&lt;br&gt;
After installing your first dependency (including frameworks), you will be able to find those under &lt;code&gt;"dependencies":&lt;/code&gt;, just like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"bcryptjs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.4.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"cookie-parser"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.4.5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"cors"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.8.5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"debug"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"~2.6.9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"express"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"~4.16.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"express-session"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.17.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"http-errors"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"~1.6.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"morgan"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"~1.9.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"multer"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.4.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"mysql"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.18.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"nodemon"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.0.7"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"passport"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^0.4.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"passport-local"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.0.0"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To add new frameworks it is acutally fairly easy, you just use your package manager, for example, &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt; and use the install syntax according to the package manager you use&lt;br&gt;&lt;br&gt;
npm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;path&amp;gt;to&amp;gt;project&amp;gt; npm install package-name
or...
&amp;gt;path&amp;gt;to&amp;gt;project&amp;gt; npm -i package-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yarn:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;path&amp;gt;to&amp;gt;project&amp;gt; yarn add package-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will find out that most of the dependencies have this line of code already prepared for you to use on their website or on &lt;a href="https://www.npmjs.com/"&gt;npmjs.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>frameworks</category>
      <category>node</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>50 Python Projects with Source Code</title>
      <author>Kiran Sethumadhavan</author>
      <pubDate>Sat, 10 Apr 2021 14:31:59 +0000</pubDate>
      <link>https://dev.to/kiransethu46/50-python-projects-with-source-code-2n7g</link>
      <guid>https://dev.to/kiransethu46/50-python-projects-with-source-code-2n7g</guid>
      <description>&lt;p&gt;*&lt;em&gt;Do you want to Kickstart a career in CyberSecurity and want to know how hackers hack in real life  *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Join Now&lt;/p&gt;

&lt;p&gt;t.me/infosecbugbounty&lt;/p&gt;

&lt;p&gt;&lt;a href="https://t.me/joinchat/aYDOfr2Hhr4xNmRl"&gt;https://t.me/joinchat/aYDOfr2Hhr4xNmRl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Projects For Beginners:&lt;br&gt;
If you’re a newbie to Python where you’ve just learned lists, tuples, dictionaries, and some basic Python modules like the random module, here are some Python projects with source code for beginners for you:&lt;/p&gt;

&lt;p&gt;1 Create Acronyms using Python (&lt;a href="https://thecleverprogrammer.com/2021/01/13/acronyms-using-python/"&gt;https://thecleverprogrammer.com/2021/01/13/acronyms-using-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;2 Alarm Clock with Python (&lt;a href="https://thecleverprogrammer.com/2021/01/13/alarm-clock-with-python/"&gt;https://thecleverprogrammer.com/2021/01/13/alarm-clock-with-python/&lt;/a&gt;)&lt;br&gt;
3 Email Slicer with Python(&lt;a href="https://thecleverprogrammer.com/2021/01/12/email-slicer-with-python/"&gt;https://thecleverprogrammer.com/2021/01/12/email-slicer-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;4 Story Generator with Python (&lt;a href="https://thecleverprogrammer.com/2021/01/11/story-generator-with-python/"&gt;https://thecleverprogrammer.com/2021/01/11/story-generator-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;5 Generate Password with Python(&lt;a href="https://thecleverprogrammer.com/2021/01/11/python-program-to-generate-password/"&gt;https://thecleverprogrammer.com/2021/01/11/python-program-to-generate-password/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;6 Play Rock, Paper, and Scissors with Python(&lt;a href="https://thecleverprogrammer.com/2021/01/10/rock-paper-and-scissors-game-with-python/"&gt;https://thecleverprogrammer.com/2021/01/10/rock-paper-and-scissors-game-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;7 Dice Roll Simulator (&lt;a href="https://thecleverprogrammer.com/2021/01/10/dice-roll-simulator-with-python/"&gt;https://thecleverprogrammer.com/2021/01/10/dice-roll-simulator-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;8 QR Code Generator(&lt;a href="https://thecleverprogrammer.com/2021/01/09/qr-codes-with-python/"&gt;https://thecleverprogrammer.com/2021/01/09/qr-codes-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;9 Animal Quiz Game(&lt;a href="https://thecleverprogrammer.com/2021/01/03/create-a-quiz-game-with-python/"&gt;https://thecleverprogrammer.com/2021/01/03/create-a-quiz-game-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;10 Print Coloured Text(&lt;a href="https://thecleverprogrammer.com/2020/12/23/print-colored-text-with-python/"&gt;https://thecleverprogrammer.com/2020/12/23/print-colored-text-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;11 BMI Calculator(&lt;a href="https://thecleverprogrammer.com/2020/12/21/bmi-calculator-with-python/"&gt;https://thecleverprogrammer.com/2020/12/21/bmi-calculator-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;12 Fahrenheit to Celcius Converter(&lt;a href="https://thecleverprogrammer.com/2020/11/30/convert-fahrenheit-to-celsius-with-python/"&gt;https://thecleverprogrammer.com/2020/11/30/convert-fahrenheit-to-celsius-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;13 Taking Multiple User Inputs(&lt;a href="https://thecleverprogrammer.com/2021/01/08/multiple-inputs-with-python-using-while-loop/"&gt;https://thecleverprogrammer.com/2021/01/08/multiple-inputs-with-python-using-while-loop/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;14 Convert Roman Numbers to Decimals(&lt;a href="https://thecleverprogrammer.com/2021/01/07/convert-roman-numbers-to-decimals-with-python/"&gt;https://thecleverprogrammer.com/2021/01/07/convert-roman-numbers-to-decimals-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Advance Python Projects:&lt;/p&gt;

&lt;p&gt;15 Digital Clock GUI &lt;br&gt;
(&lt;a href="https://thecleverprogrammer.com/2021/01/09/digital-clock-with-python/"&gt;https://thecleverprogrammer.com/2021/01/09/digital-clock-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;16 Get Desktop Notifications with Python(&lt;a href="https://medium.com/coders-camp/60-python-projects-with-source-code-919cd8a6e512"&gt;https://medium.com/coders-camp/60-python-projects-with-source-code-919cd8a6e512&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;17 Use Your Phone Camera for Computer Vision(&lt;a href="https://thecleverprogrammer.com/2021/01/05/use-phone-camera-with-python/"&gt;https://thecleverprogrammer.com/2021/01/05/use-phone-camera-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;18 Music Player GUI (&lt;a href="https://thecleverprogrammer.com/2020/12/27/music-player-gui-with-python/"&gt;https://thecleverprogrammer.com/2020/12/27/music-player-gui-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;19 Game of Life with Python(&lt;a href="https://thecleverprogrammer.com/2020/12/25/game-of-life-with-python/"&gt;https://thecleverprogrammer.com/2020/12/25/game-of-life-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;20 Extract Text from videos(&lt;a href="https://thecleverprogrammer.com/2020/12/25/extract-text-from-videos-using-python/"&gt;https://thecleverprogrammer.com/2020/12/25/extract-text-from-videos-using-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;21 Fidget Spinner Game(&lt;a href="https://thecleverprogrammer.com/2020/12/23/create-a-game-with-python/"&gt;https://thecleverprogrammer.com/2020/12/23/create-a-game-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;22 Spelling Correction with Python(&lt;a href="https://thecleverprogrammer.com/2020/12/18/spelling-correction-with-python/"&gt;https://thecleverprogrammer.com/2020/12/18/spelling-correction-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;23 Create Amazing Graphics with Python(&lt;a href="https://thecleverprogrammer.com/2020/12/10/turtle-graphics-with-python/"&gt;https://thecleverprogrammer.com/2020/12/10/turtle-graphics-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;24 Monty Hall Simulator(&lt;a href="https://thecleverprogrammer.com/2020/12/09/monty-hall-problem-with-python/"&gt;https://thecleverprogrammer.com/2020/12/09/monty-hall-problem-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;25 Video to Audio Converter(&lt;a href="https://thecleverprogrammer.com/2020/12/08/video-to-audio-converter-with-python/"&gt;https://thecleverprogrammer.com/2020/12/08/video-to-audio-converter-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;26 Tic Tac Toe GUI(&lt;a href="https://thecleverprogrammer.com/2020/12/06/tic-tac-toe-gui-with-python/"&gt;https://thecleverprogrammer.com/2020/12/06/tic-tac-toe-gui-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;27 Calculator GUI (&lt;a href="https://thecleverprogrammer.com/2020/12/05/calculator-gui-with-python/"&gt;https://thecleverprogrammer.com/2020/12/05/calculator-gui-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;28 Number Guessing Game(&lt;a href="https://thecleverprogrammer.com/2020/12/04/number-guessing-game-with-python-and-c/"&gt;https://thecleverprogrammer.com/2020/12/04/number-guessing-game-with-python-and-c/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;29 Image Converter GUI(&lt;a href="https://thecleverprogrammer.com/2020/12/02/image-converter-gui-with-python/"&gt;https://thecleverprogrammer.com/2020/12/02/image-converter-gui-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;30 Weight Converter GUI(&lt;a href="https://thecleverprogrammer.com/2020/11/28/weight-converter-gui-with-python/"&gt;https://thecleverprogrammer.com/2020/11/28/weight-converter-gui-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;31 Visualize a Chess Board with Python(&lt;a href="https://thecleverprogrammer.com/2020/11/27/chessboard-with-python/"&gt;https://thecleverprogrammer.com/2020/11/27/chessboard-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;32 Age and Gender Detection (&lt;a href="https://thecleverprogrammer.com/2020/10/29/age-and-gender-detection-with-python/"&gt;https://thecleverprogrammer.com/2020/10/29/age-and-gender-detection-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;33 Bar Code and QR Code Reader(&lt;a href="https://thecleverprogrammer.com/2020/10/23/barcode-and-qr-code-reader-with-python/"&gt;https://thecleverprogrammer.com/2020/10/23/barcode-and-qr-code-reader-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;34 Create Audiobook with Python(&lt;a href="https://thecleverprogrammer.com/2020/10/22/create-an-audiobook-with-python/"&gt;https://thecleverprogrammer.com/2020/10/22/create-an-audiobook-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;35 FaceDetection&lt;br&gt;
(&lt;a href="https://thecleverprogrammer.com/2020/10/22/create-an-audiobook-with-python/"&gt;https://thecleverprogrammer.com/2020/10/22/create-an-audiobook-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;36 Extract Text from PDF(&lt;a href="https://thecleverprogrammer.com/2020/10/06/extract-text-from-pdf-using-python/"&gt;https://thecleverprogrammer.com/2020/10/06/extract-text-from-pdf-using-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;37 Card Game using DS and Algo(&lt;a href="https://thecleverprogrammer.com/2020/10/04/card-game-with-python/"&gt;https://thecleverprogrammer.com/2020/10/04/card-game-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;38 Web Scrapper with Python&lt;br&gt;
(&lt;a href="https://thecleverprogrammer.com/2020/10/01/web-scraper-with-python/"&gt;https://thecleverprogrammer.com/2020/10/01/web-scraper-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;39 Create a Pencil Sketch using Python(&lt;a href="https://thecleverprogrammer.com/2020/09/30/pencil-sketch-with-python/"&gt;https://thecleverprogrammer.com/2020/09/30/pencil-sketch-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;40 Text Editor GUI(&lt;a href="https://thecleverprogrammer.com/2020/09/25/text-editor-gui-with-python/"&gt;https://thecleverprogrammer.com/2020/09/25/text-editor-gui-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;41 Instagram Filters with Python&lt;br&gt;
(&lt;a href="https://thecleverprogrammer.com/2020/09/24/instagram-filters-with-python/"&gt;https://thecleverprogrammer.com/2020/09/24/instagram-filters-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;42 Count Number of Rainy days in a year(&lt;a href="https://thecleverprogrammer.com/2020/09/18/count-rainy-days-with-python/"&gt;https://thecleverprogrammer.com/2020/09/18/count-rainy-days-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;43 Send Emails with  Python&lt;br&gt;
(&lt;a href="https://thecleverprogrammer.com/2020/09/15/send-emails-with-python/"&gt;https://thecleverprogrammer.com/2020/09/15/send-emails-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;44 Image Segmentation&lt;br&gt;
(&lt;a href="https://thecleverprogrammer.com/2020/09/01/image-segmentation-with-python/"&gt;https://thecleverprogrammer.com/2020/09/01/image-segmentation-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;45 OTP Verification GUI&lt;br&gt;
(&lt;a href="https://thecleverprogrammer.com/2020/08/24/otp-verification-gui-with-python/"&gt;https://thecleverprogrammer.com/2020/08/24/otp-verification-gui-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;46 Deploy a Chatbot&lt;br&gt;
(&lt;a href="https://thecleverprogrammer.com/2020/08/21/deploy-a-chatbot-with-python/"&gt;https://thecleverprogrammer.com/2020/08/21/deploy-a-chatbot-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;47 Create a Telegram Bot&lt;br&gt;
(&lt;a href="https://thecleverprogrammer.com/2020/08/18/telegram-bot-with-python/"&gt;https://thecleverprogrammer.com/2020/08/18/telegram-bot-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;48 Scraping Twitter without API&lt;br&gt;
(&lt;a href="https://thecleverprogrammer.com/2020/08/17/scraping-twitter-with-python/"&gt;https://thecleverprogrammer.com/2020/08/17/scraping-twitter-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;49 Text to Speech Converter&lt;br&gt;
(&lt;a href="https://thecleverprogrammer.com/2020/08/16/text-to-speech-with-python/"&gt;https://thecleverprogrammer.com/2020/08/16/text-to-speech-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;50 Keyword Research with Python&lt;br&gt;
(&lt;a href="https://thecleverprogrammer.com/2020/08/14/keyword-research-with-python/"&gt;https://thecleverprogrammer.com/2020/08/14/keyword-research-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bonus&lt;/strong&gt; &lt;br&gt;
1 .Scrape Wikipedia&lt;br&gt;
(&lt;a href="https://thecleverprogrammer.com/2020/07/30/scraping-instagram-with-python/"&gt;https://thecleverprogrammer.com/2020/07/30/scraping-instagram-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;2.Web Scraping to create a CSV&lt;br&gt;
(&lt;a href="https://thecleverprogrammer.com/2020/08/08/web-scraping-to-create-csv/"&gt;https://thecleverprogrammer.com/2020/08/08/web-scraping-to-create-csv/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;3.Scrape Instagram&lt;br&gt;
(&lt;a href="https://thecleverprogrammer.com/2020/07/30/scraping-instagram-with-python/"&gt;https://thecleverprogrammer.com/2020/07/30/scraping-instagram-with-python/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;4.Image Filtering&lt;br&gt;
(&lt;a href="https://thecleverprogrammer.com/2020/07/25/image-filtering-with-machine-learning/"&gt;https://thecleverprogrammer.com/2020/07/25/image-filtering-with-machine-learning/&lt;/a&gt;)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;3D Graphs (&lt;a href="https://thecleverprogrammer.com/2020/05/02/3d-graphs-with-matplotlib/"&gt;https://thecleverprogrammer.com/2020/05/02/3d-graphs-with-matplotlib/&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;*&lt;em&gt;Do you want to Kickstart a career in CyberSecurity and want to know how hackers hack in real life . *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Join Now&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;t.me/infosecbugbounty&lt;/p&gt;

&lt;p&gt;&lt;a href="https://t.me/joinchat/aYDOfr2Hhr4xNmRl"&gt;https://t.me/joinchat/aYDOfr2Hhr4xNmRl&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>productivity</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
