<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Supabase Schema Visualizer - No installation/login</title>
      <author>zernonia</author>
      <pubDate>Mon, 10 May 2021 03:45:51 +0000</pubDate>
      <link>https://dev.to/zernonia/supabase-schema-visualizer-no-installation-login-49kg</link>
      <guid>https://dev.to/zernonia/supabase-schema-visualizer-no-installation-login-49kg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#the-idea-and-inspiration"&gt;
  &lt;/a&gt;
  The Idea and Inspiration 💡
&lt;/h1&gt;

&lt;p&gt;Recently, I got addicted to &lt;a href="https://supabase.io/"&gt;Supabase ⚡&lt;/a&gt; as an &lt;strong&gt;Open-Source Firebase Alternative&lt;/strong&gt;, and I'm having so much fun with it. It has such wonderful UI, and well-written documentation, that allows me to spin up a project easily.&lt;/p&gt;

&lt;p&gt;Because of that, I've started to learn &lt;strong&gt;PostgreSQL&lt;/strong&gt;, which Supabase built on top of. I quickly realized that how great would it be if I can easily visualize all my tables, and the relationship with one another (since PostgreSQL is a relational DB), and there's when I found out about &lt;strong&gt;Database Schema&lt;/strong&gt;🔥.&lt;/p&gt;

&lt;p&gt;😥 Unfortunately I found many Database Schema Visualizer online which either requires me to install database software, or login with email, which I do not want to . Thus, this gave me the idea to code it myself, since I'm a Web Developer💻.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#showcase"&gt;
  &lt;/a&gt;
  Showcase 🌟
&lt;/h1&gt;

&lt;p&gt;If you are Supabase user, or interested in using the visualizer, here's the link to it: &lt;a href="https://supabase-schema.vercel.app/"&gt;Supabase Schema Visualizer&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/zernonia"&gt;
        zernonia
      &lt;/a&gt; / &lt;a href="https://github.com/zernonia/supabase-schema"&gt;
        supabase-schema
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;br&gt;
&lt;p&gt;
  &lt;a href="https://github.com/zernonia/supabase-schema"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YVjvrFcT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/zernonia/supabase-schema/master/src/assets/logo.svg" alt="Logo" width="80" height="80"&gt;
  &lt;/a&gt;
  &lt;/p&gt;
&lt;h3&gt;
Supabase Schema&lt;/h3&gt;
  &lt;p&gt;
    Secured &amp;amp; Simple &lt;strong&gt;&lt;a href="https://supabase.io/" rel="nofollow"&gt;Supabase&lt;/a&gt; Schema Visualizer.&lt;/strong&gt;
    &lt;br&gt;
    No installations • No Database password required
    &lt;br&gt;
    &lt;br&gt;
    &lt;a href="https://supabase-schema.vercel.app/" rel="nofollow"&gt;View Demo&lt;/a&gt;
    ·
    &lt;a href="https://github.com/zernonia/supabase-schema/issues"&gt;Report Bug&lt;/a&gt;
    ·
    &lt;a href="https://github.com/zernonia/supabase-schema/issues"&gt;Request Feature&lt;/a&gt;
  &lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/zernonia/supabase-schema/master/images/main.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hRUW2JSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/zernonia/supabase-schema/master/images/main.png" alt="Supabase Schema"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
🚀 Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
🔨 No installations&lt;/li&gt;
&lt;li&gt;
🔒 Persistent State in LocalStorage&lt;/li&gt;
&lt;li&gt;
🚪 Login-less&lt;/li&gt;
&lt;li&gt;
👀 No Sensitive info required&lt;/li&gt;
&lt;li&gt;
🤚 Moveable Schema for own design&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
📇 About The Project&lt;/h2&gt;
&lt;p&gt;I look around the internet and found many Database Schema Visualizers that require me to either download the software, or login to view my Database Schema. I feel like there's too many unneccessary steps, just to view the schema.&lt;/p&gt;
&lt;p&gt;Thus, I've decided to take this opportunity to build this &lt;strong&gt;Open Source, Free, Login-less and Secured&lt;/strong&gt; Supabase Schema Visualizer 🔥&lt;/p&gt;
&lt;h3&gt;
🔨 Built With&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://v3.vuejs.org/" rel="nofollow"&gt;Vue 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vitejs.dev/" rel="nofollow"&gt;Vite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://windicss.org/" rel="nofollow"&gt;WindiCSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
🐾 Instructions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;a href="https://app.supabase.io/" rel="nofollow"&gt;Supabase App&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Select your Project&lt;/li&gt;
&lt;li&gt;Go to &lt;code&gt;Settings&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;In Settings tab, Go to &lt;code&gt;API&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Under &lt;code&gt;Config&lt;/code&gt;, copy &lt;code&gt;URL&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Under &lt;code&gt;API Keys&lt;/code&gt;, copy &lt;code&gt;anon&lt;/code&gt; &lt;code&gt;public&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Paste both value into…&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/zernonia/supabase-schema"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;If you find this useful, remember to 🌟 it on Github&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lend-me-a-hand"&gt;
  &lt;/a&gt;
  Lend me a Hand ✋
&lt;/h1&gt;

&lt;p&gt;When you navigate through the App, you might notice some bugs or possible improvement, feel free to contribute to this project.💘 &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ultimate-hope"&gt;
  &lt;/a&gt;
  Ultimate Hope 🔮
&lt;/h1&gt;

&lt;p&gt;My Vision for this project is hopefully that it might be absorbed  into official &lt;a href="https://app.supabase.io/"&gt;Supabase App&lt;/a&gt;, where developer can quickly manage their project's schema visually without leaving the app. So if you find it helpful and wish to have this features, a star on Github would be very much appreciated.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you 🙏
&lt;/h1&gt;

</description>
      <category>showdev</category>
      <category>vue</category>
      <category>vite</category>
      <category>supabase</category>
    </item>
    <item>
      <title>Ultimate Web Development Resources</title>
      <author>DHANUSH N</author>
      <pubDate>Mon, 10 May 2021 03:29:44 +0000</pubDate>
      <link>https://dev.to/dhanushxeno/ultimate-web-development-resources-4n0a</link>
      <guid>https://dev.to/dhanushxeno/ultimate-web-development-resources-4n0a</guid>
      <description>&lt;p&gt;Hi&lt;/p&gt;

&lt;p&gt;The below is my github repository which gives a combination of all the available web development resources from beginner to expert level.&lt;/p&gt;

&lt;p&gt;I will be updating the repository frequently &lt;/p&gt;

&lt;p&gt;Use it 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/DHANUSHXENO/Ultimate-Web-Development-Resources"&gt;Ultimate Web Development Resources&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more technology related information connect with me&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/Dhanush_Xen?s=09"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>showdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>So You've Been Criticized Online</title>
      <author>Sacha Greif</author>
      <pubDate>Mon, 10 May 2021 01:28:21 +0000</pubDate>
      <link>https://dev.to/sachagreif/so-you-ve-been-criticized-online-5hna</link>
      <guid>https://dev.to/sachagreif/so-you-ve-been-criticized-online-5hna</guid>
      <description>&lt;p&gt;There's a certain threshold you cross when you achieve a measure a success where you cease being the lovable underdog everybody's rooting for, and suddenly become &lt;a href="https://dev.to/cher/sexism-racism-toxic-positivity-and-tailwindcss-cil"&gt;The Man&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;At first you don't notice it. Your supporters are still cheering you on, and the haters are few and far between. But then the mean tweets start piling on, soon joined by acerbic blog posts and even a couple snarky vlogs. &lt;/p&gt;

&lt;p&gt;And before you know it, all the cool kids no longer get social credit from supporting your little enterprise, but instead earn it by pointing out all its flaws. &lt;/p&gt;

&lt;p&gt;What to do?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#focus-on-the-love"&gt;
  &lt;/a&gt;
  Focus on the Love
&lt;/h2&gt;

&lt;p&gt;First, it's worth remembering that unless you're doing something truly awful, your fans will usually still vastly outnumber your haters. &lt;/p&gt;

&lt;p&gt;But fans are usually quieter, and even when they do manifest their love we tend to focus on the hate instead. It's just how our brains work, we're biased towards action and being antagonized by an angry tweet fires our brain's "something-needs-to-be-bashed-with-a-big-rock" caveman reflex. &lt;/p&gt;

&lt;p&gt;So just take a second to remember that, and tell your caveman brain to chill. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-shoot-the-messenger"&gt;
  &lt;/a&gt;
  Don't Shoot the Messenger
&lt;/h2&gt;

&lt;p&gt;As I said, it's tempting to see a criticism – especially when perceived as unfair – and want to go all out on its author. &lt;/p&gt;

&lt;p&gt;Twitter makes this especially tempting, as its culture glorifies "dunking" on people. But here's a protip: while dunking on Mitch McConnell's weird turtle neck will get you tons of likes, dunking on that junior web developer with 67 followers will not. &lt;/p&gt;

&lt;p&gt;Also remember that while you're sitting here stewing in your own juices, that tweet's author has probably long moved on to the next thing. As much as you want @FlexboxFan2003 to be your lifelong nemesis, and use your eloquence and sheer logical talent to finally best them in a hard-fought battle of quote-tweets, it's probably not going to happen. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-in-touch-privately"&gt;
  &lt;/a&gt;
  Get In Touch Privately
&lt;/h2&gt;

&lt;p&gt;If you really feel the need to respond though, do so privately. This is especially important if the original criticism didn't directly mention you. Just because someone expressed an opinion about something you're involved in doesn't necessarily mean they want to engage in public debate. &lt;/p&gt;

&lt;p&gt;What's more, by publicly quote-tweeting the person, you're now exposing them to the wrath of your own following. Which, as you might expect, is probably favorable disposed towards you, and unfavorably disposed towards any critics. &lt;/p&gt;

&lt;p&gt;So send out a DM or email instead. Here's an example:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hi! I hope it's ok to contact you. I came across your tweet about XYZ, and to be honest I was a bit disappointed because I feel that tweet wasn't quite fair to the project. In fact, I wrote a blog post to address this exact issue: &lt;em&gt;link&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thanks for taking the time to read this, and let me know if I can answer any questions!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From my own experience, people won't always respond to this kind of outreach, probably because they've long since moved on. But at least you know that if they're interested in learning more, you've provided resources for them to do so without making anybody feel bad. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#address-the-criticism"&gt;
  &lt;/a&gt;
  Address the Criticism
&lt;/h2&gt;

&lt;p&gt;One thing that really helps is actually taking the time to write a proper blog post to explain your stance. As I said, Twitter promotes very toxic online behaviors and a blog post is a much healthier way to discuss any remotely complex or sensitive topic. &lt;/p&gt;

&lt;p&gt;So &lt;a href="https://dev.to/sachagreif/state-of-js-2020-common-criticisms-23id"&gt;write a detailed explanation&lt;/a&gt; that presents both sides of the issue and gives readers the context to understand your own choices, and then just refer people to it from now on. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fix-the-issue"&gt;
  &lt;/a&gt;
  Fix the Issue
&lt;/h2&gt;

&lt;p&gt;Finally, if the criticism has a grain of truth, then the insecurity and vulnerability you feel about it will often be the very things that push you to be overly defensive. The best way to correct that is to just fix the issue. &lt;/p&gt;

&lt;p&gt;Of course if fixing the issue was easy you'd have already done it. But even if fixing the issue is not possible, it might be worth letting people know that you're aware of it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#let-people-know-youre-only-human"&gt;
  &lt;/a&gt;
  Let People Know You're Only Human
&lt;/h2&gt;

&lt;p&gt;The tech companies we deal with on a daily basis online have unlimited resources at their disposal, and so any failings on their part must certainly come from a lack of goodwill to change thing. &lt;/p&gt;

&lt;p&gt;But for individuals it can often be the opposite: we want to improve things, but we just don't have the time, knowledge or resources. &lt;/p&gt;

&lt;p&gt;We often forget this in our online interactions, and that can lead to a lack of empathy. So let people know that you appreciate their feedback, even if you might not always be great at dealing with criticism. &lt;/p&gt;

&lt;p&gt;You're only human after all… but remember, so are they!&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>criticism</category>
      <category>twitter</category>
    </item>
    <item>
      <title>VS Code shortcuts that you must know! (Mac and Windows)</title>
      <author>Raynaldo Sutisna</author>
      <pubDate>Mon, 10 May 2021 01:27:56 +0000</pubDate>
      <link>https://dev.to/raaynaldo/vs-code-shortcuts-that-you-must-know-mac-and-windows-cp5</link>
      <guid>https://dev.to/raaynaldo/vs-code-shortcuts-that-you-must-know-mac-and-windows-cp5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Have you ever realized that using a mouse reduces the speed of your development? Using a mouse slows down your speed because you should move your hand to the mouse and move back again to the keyboard. However, we can make both of our hands staying on the keyboard all the time if we know all the shortcuts. I'm still learning to stop using a mouse, and I want to share my most useful shortcuts in VS Code. These are important shortcuts that VSCode user must know to speed up your coding process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#move-the-cursor"&gt;
  &lt;/a&gt;
  Move the cursor
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#move-the-cursor-to-the-first-or-last-character-of-the-line"&gt;
  &lt;/a&gt;
  Move the cursor to the first or last character of the line.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + Left Arrow / Right Arrow
Win: Home / End
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zt5R_I7N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6y1w2dibahtx1d4hhzz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zt5R_I7N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6y1w2dibahtx1d4hhzz.gif" alt="Moving Cursor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#move-the-cursor-to-the-prev-or-next-word"&gt;
  &lt;/a&gt;
  Move the cursor to the prev or next word.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Option ⌥ + Left Arrow / Right Arrow
Win: Ctrl + Left Arrow / Right Arrow
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-Dzo1DW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wdr3enyhy95gnghn6c9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-Dzo1DW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wdr3enyhy95gnghn6c9.gif" alt="Moving Cursor by word"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#highlight-code"&gt;
  &lt;/a&gt;
  Highlight code
&lt;/h2&gt;

&lt;p&gt;The main shortcut of highlighting is holding the &lt;code&gt;shift&lt;/code&gt; key + arrow or you can combine it with the shortcuts for moving the cursor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DBZ39UHW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0h78asvc3w0zerei75u.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DBZ39UHW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0h78asvc3w0zerei75u.gif" alt="Highlighting each letter"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#highlight-the-whole-line"&gt;
  &lt;/a&gt;
  Highlight the whole line.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Shift ⇧ + Cmd ⌘ + Left Arrow / Right Arrow
Win: Shift + Home / End
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HTRqLtNQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/coe8ghzmghrpzmiluhry.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HTRqLtNQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/coe8ghzmghrpzmiluhry.gif" alt="Highlighting each word"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#highlight-each-word"&gt;
  &lt;/a&gt;
  Highlight each word.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Shift ⇧ + Option ⌥ + Left Arrow / Right Arrow
Win: Shift + Ctrl + Left Arrow / Right Arrow
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qDVYZFNi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6i7lherx8eiu70ylqgn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qDVYZFNi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6i7lherx8eiu70ylqgn.gif" alt="Highlighting the whole line"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#highlight-the-same-word"&gt;
  &lt;/a&gt;
  Highlight the same word.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + d
Win: Ctrl + d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gr9D21Bf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dj4l494vl8s71qgvqd8w.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gr9D21Bf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dj4l494vl8s71qgvqd8w.gif" alt="Highlighting the same word"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#delete-one-line-code"&gt;
  &lt;/a&gt;
  Delete one line code
&lt;/h2&gt;

&lt;p&gt;There are two ways to delete one line code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + Shift ⇧ + x
Win: Ctrl + x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am personally more convenient to use this, which is the &lt;code&gt;cut&lt;/code&gt; shortcut.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + x
Win: Ctrl + x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fpm2GNbw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lelfvm1etpb5fmzn1o85.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fpm2GNbw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lelfvm1etpb5fmzn1o85.gif" alt="Delete one line"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#close-the-current-file"&gt;
  &lt;/a&gt;
  Close the current file
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + w
Win: Ctrl + w
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--80sBh7q---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3y1ggle2dge38tqimm0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--80sBh7q---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3y1ggle2dge38tqimm0.gif" alt="Close each file open"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#close-all-open-file"&gt;
  &lt;/a&gt;
  Close all open file
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + k w
Win: Ctrl + k w
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jepxgPSR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/go6r4k0ed4y2xdvan2vs.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jepxgPSR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/go6r4k0ed4y2xdvan2vs.gif" alt="Close all open file"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-a-file"&gt;
  &lt;/a&gt;
  Open a file
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + p
Win: Ctrl + p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will open a search bar, and we can type the file name there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gjBdxf9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyvb6xy2rqstm4kvzug5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gjBdxf9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyvb6xy2rqstm4kvzug5.gif" alt="Open file"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#change-to-another-file-tab"&gt;
  &lt;/a&gt;
  Change to another file tab
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Ctrl ^ + tab
Win: Ctrl + tab
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5R1xX_KP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56u0cfjn3fcief8kxypp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5R1xX_KP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56u0cfjn3fcief8kxypp.gif" alt="Change Tab"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#split-screen"&gt;
  &lt;/a&gt;
  Split screen
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + \
Win: Ctrl + \
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rQ82D1zx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5k8l8limztil51gm7jpv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rQ82D1zx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5k8l8limztil51gm7jpv.gif" alt="Split Screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#move-focus-to-another-splitscreen"&gt;
  &lt;/a&gt;
  Move focus to another split-screen
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + 1 / 2 / 3
Win: Ctrl + 1 / 2 / 3 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1, 2, or 3 depends on the screen position, and if the split screen doesn't exist, it will open a new empty split screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AmlWb1Ze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwa5ykc7dfka09rrtm1g.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AmlWb1Ze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwa5ykc7dfka09rrtm1g.gif" alt="change split focus"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-and-close-sidebar"&gt;
  &lt;/a&gt;
  Open and close Sidebar
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + b
Win: Ctrl + b
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LLcOnNHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju0vb4sfdutz8ckajn1c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LLcOnNHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju0vb4sfdutz8ckajn1c.gif" alt="Open Close Side Bar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-terminal"&gt;
  &lt;/a&gt;
  Open terminal
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Ctrl ^ + ~
Win: Ctrl + ~
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wD4CKuj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgxb89w1kk5gxa725kly.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wD4CKuj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgxb89w1kk5gxa725kly.gif" alt="Open Terminal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-vscode-pallete"&gt;
  &lt;/a&gt;
  Open VSCode Pallete
&lt;/h2&gt;

&lt;p&gt;VSCode palette will give you access to all VSCode functionalities and also all shortcuts. VSCode palette is powerful!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + Shift ⇧ + p
Win: Ctrl + Shift + p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0RjARPiJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b430y97enfkgpkxdol63.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0RjARPiJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b430y97enfkgpkxdol63.gif" alt="Command pallete"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h2&gt;

&lt;p&gt;We haven't discussed how we can add a new file or folder, delete a file, move a file, rename a file name, and duplicate a file. Unfortunately, VSCode doesn't have the built-in feature for that without going to the sidebar. However, I watch James Q Quick's &lt;a href="https://www.youtube.com/watch?v=s3H6PmB4SZ4"&gt;video&lt;/a&gt;, and his video shares about the two useful extensions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#file-utils"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=sleistner.vscode-fileutils"&gt;File Utils&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mac: Cmd ⌘ + Shift ⇧ + p -&amp;gt; Type "File Utils"
Win: Ctrl + Shift + p -&amp;gt; Type "File Utils"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This extension gives you access to this feature below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---9HzU83w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvuwd2z62nleaph8xmn3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---9HzU83w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvuwd2z62nleaph8xmn3.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By using File Utils, you don't need to open the sidebar all the time just type &lt;code&gt;File Utils&lt;/code&gt; in the VSCode Palette.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advancednewfile"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=patbenatar.advanced-new-file"&gt;advanced-new-file&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;advanced-new-file extension is handy when you want to create a file or folder. File Utils provides a feature to add a file and folder, but I feel more convenient with this extension. I also create key binding for this extension &lt;code&gt;Cmd + n&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_iKmDwrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wcl4ev67no4q8ynuiiv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_iKmDwrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wcl4ev67no4q8ynuiiv.gif" alt="advance file"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How to add a shortcut for the extension?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open VSCode palette&lt;/li&gt;
&lt;li&gt;search &lt;code&gt;advanced-new-file&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Click the gear icon&lt;/li&gt;
&lt;li&gt;Click edit&lt;/li&gt;
&lt;li&gt;type the shortcut&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---cMrHZvk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7zaqdhks2z2z6aqdhsj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---cMrHZvk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7zaqdhks2z2z6aqdhsj.gif" alt="add key binding"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Remembering all the shortcuts in a time is challenging, but if we push ourselves to use shortcuts on daily basis. We will remember all the shortcuts soon. I hope it would be helpful.&lt;/p&gt;

&lt;p&gt;Please leave a comment on which the most useful shortcut for you? or do you have another useful VS Code Shortcut?&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>codenewbie</category>
      <category>tutorial</category>
      <category>shortcut</category>
    </item>
    <item>
      <title>Python CI/CD with GitHub Actions</title>
      <author>Johanan Idicula</author>
      <pubDate>Mon, 10 May 2021 01:12:31 +0000</pubDate>
      <link>https://dev.to/jidicula/python-ci-cd-with-github-actions-2e26</link>
      <guid>https://dev.to/jidicula/python-ci-cd-with-github-actions-2e26</guid>
      <description>&lt;p&gt;You can also read this on my blog &lt;a href="https://forcepush.tech/python-ci-cd-with-git-hub-actions"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a &lt;a href="https://forcepush.tech/writing-a-simple-cli-program-python-vs-go"&gt;previous post&lt;/a&gt;, I alluded to having pure CI/CD checks and autoreleases for my random-standup program. I wanted to ensure that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Each change I make to my program won't break existing functionality (Continuous Integration), and&lt;/li&gt;
&lt;li&gt;Publishing a new release to PyPI is automatic (Continuous Delivery/Deployment).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;GitHub provides a workflow automation feature called &lt;a href="https://docs.github.com/en/actions"&gt;GitHub Actions&lt;/a&gt;. Essentially, you write your workflow configurations in a YAML file in &lt;code&gt;your-repo/.github/workflows/&lt;/code&gt;, and they'll be executed on certain repository events.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#continuous-integration"&gt;
  &lt;/a&gt;
  Continuous Integration
&lt;/h1&gt;

&lt;p&gt;This automation is relatively straightforward. I want to run the following workflows on each commit into the repository trunk and on each pull request into trunk:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Test syntax by running a linting check for formatting (n.b. syntax correctness is a subset of formatting correctness).&lt;/li&gt;
&lt;li&gt;Test functionality &lt;strong&gt;across a variety of operating systems and Python versions&lt;/strong&gt; by running automated tests on the entire program. For this program, I only included a single basic black-box test that's more demonstrative than useful (it checks for a regex match with program output). A suite of unit tests would be more appropriate for a more complex program.&lt;/li&gt;
&lt;li&gt;Test build stability by attempting to build the program (but discarding the build artifact) across the same combinations of operating systems and Python versions from Step 2.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's the &lt;a href="https://github.com/jidicula/random-standup-py/blob/main/.github/workflows/release.yml"&gt;full workflow&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#each-commit-to-trunk"&gt;
  &lt;/a&gt;
  Each commit to trunk
&lt;/h2&gt;

&lt;p&gt;The trigger for this is declared at the top of the workflow file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#test-syntax-by-checking-formatting"&gt;
  &lt;/a&gt;
  Test syntax by checking formatting
&lt;/h2&gt;

&lt;p&gt;First, we have to checkout the repository in GitHub Actions using &lt;a href="https://github.com/actions/checkout"&gt;GitHub's own &lt;code&gt;checkout&lt;/code&gt; action&lt;/a&gt;. Then, we have to set up the Python version using &lt;a href="https://github.com/actions/setup-python"&gt;GitHub's &lt;code&gt;setup-python&lt;/code&gt; action&lt;/a&gt;. Finally, we can use &lt;a href="https://github.com/psf/black/blob/main/action.yml"&gt;Black's provided GitHub Action&lt;/a&gt; for checking formatting - it runs &lt;code&gt;black --check --diff&lt;/code&gt; on the workflow runner's clone of the repo and outputs an error code if any Python file in the repo fails Black's formatting rules. Note that Black fails if the &lt;a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree"&gt;AST&lt;/a&gt; cannot be parsed (i.e. if there are any syntax errors), so it can also be used for checking syntax correctness, which itself is a good proxy for checking for merge conflict strings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;black-formatting-check&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check formatting&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;ubuntu-latest'&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-python@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;psf/black@stable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-a-job-across-different-build-environments"&gt;
  &lt;/a&gt;
  Running a job across different build environments
&lt;/h2&gt;

&lt;p&gt;GitHub Actions provides matrix build functionality where you provide the option set for each variable and it runs the dependent steps with the &lt;a href="https://en.wikipedia.org/wiki/Cartesian_product#n-ary_Cartesian_product"&gt;n-ary Cartesian product&lt;/a&gt; of these &lt;em&gt;n&lt;/em&gt; variable option sets:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.os }}&lt;/span&gt;
    &lt;span class="na"&gt;needs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;black-formatting-check&lt;/span&gt;
    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;os&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;ubuntu-latest'&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;macos-latest'&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;windows-latest'&lt;/span&gt;
        &lt;span class="na"&gt;python-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.7'&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.8'&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.9'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is defined in the &lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix"&gt;&lt;code&gt;jobs.&amp;lt;job_id&amp;gt;.strategy.matrix&lt;/code&gt; directive&lt;/a&gt;. I've added 2 variables: one for OS (with Ubuntu, macOS, and Windows as options) and one for Python version (with 3.7, 3.8, and 3.9 as options). This means that everything in the &lt;code&gt;build&lt;/code&gt; job will run on every combination of OS and Python version options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu, Python 3.7&lt;/li&gt;
&lt;li&gt;Ubuntu, Python 3.8&lt;/li&gt;
&lt;li&gt;Ubuntu, Python 3.9&lt;/li&gt;
&lt;li&gt;macOS, Python 3.7&lt;/li&gt;
&lt;li&gt;macOS, Python 3.8&lt;/li&gt;
&lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that the &lt;code&gt;runs-on&lt;/code&gt; directive is defined as &lt;code&gt;${{ matrix.os }}&lt;/code&gt; which points to the value of the &lt;code&gt;os&lt;/code&gt; variable in the current runner. Internally, the steps are somewhat like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;GitHub Actions parses the directives for the job and sees there's a matrix strategy.&lt;/li&gt;
&lt;li&gt;It spins up a separate runner for each matrix combination and defines the variables &lt;code&gt;matrix.os&lt;/code&gt; and &lt;code&gt;matrix.python-version&lt;/code&gt; as the values for that combination. For example, in the Ubuntu/Python 3.7 runner, &lt;code&gt;matrix.os = 'ubuntu-latest'&lt;/code&gt; and &lt;code&gt;matrix.python-version = '3.7'&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It runs the job steps in each runner it spun up in Step 2.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can see an example of how this matrix run looks like in the GitHub Actions console &lt;a href="https://github.com/jidicula/random-standup-py/actions/runs/806535255"&gt;here&lt;/a&gt; (see all the OS/Python combinations in the left sidebar). These matrix options are run in parallel by default, so the runtime of the job determined by the slowest matrix option. Note that if your repository is private, you will be charged Actions minutes for each separate build combination, with some &lt;a href="https://docs.github.com/en/github/setting-up-and-managing-billing-and-payments-on-github/about-billing-for-github-actions#about-billing-for-github-actions"&gt;hefty multiplers for macOS and Windows&lt;/a&gt; (1 macOS minute is 10 minutes of Actions credit, 1 Windows minute is 2 minutes of Actions credit as of May 2021).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-functionality"&gt;
  &lt;/a&gt;
  Test Functionality
&lt;/h2&gt;

&lt;p&gt;Again, we need to checkout the repo for this job and set up the Python version. The key difference with the Python version setup here compared to the Black formatting job is that the Python version is specified and points to the matrix option for &lt;code&gt;python-version&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout code&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup Python&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-python@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;python-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{matrix.python-version}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we need to set up the dependencies for the program to ensure it can run. I used Poetry for dependency and virtual environment management, and it's not included with any of the runner &lt;a href="https://github.com/actions/virtual-environments"&gt;environments&lt;/a&gt;, so we have to install it in a workflow step. Installing it takes some time, though, so to speed up my workflow runtime, I "permanently" cache Poetry using &lt;a href="https://github.com/actions/cache"&gt;GitHub's provided &lt;code&gt;cache&lt;/code&gt; action&lt;/a&gt;. I only run the installation step if the cache is missed, which won't happen since the key is constant for each OS/Python version combination.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="c1"&gt;# Perma-cache Poetry since we only need it for checking pyproject version&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cache Poetry&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cache-poetry&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2.1.5&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;~/.poetry&lt;/span&gt;
          &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.os }}-poetry&lt;/span&gt;
      &lt;span class="c1"&gt;# Only runs when key from caching step changes&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install latest version of Poetry&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;steps.cache-poetry.outputs.cache-hit != 'true'&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -&lt;/span&gt;
      &lt;span class="c1"&gt;# Poetry still needs to be re-prepended to the PATH on each run, since&lt;/span&gt;
      &lt;span class="c1"&gt;# PATH does not persist between runs.&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Add Poetry to $PATH&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;echo "$HOME/.poetry/bin" &amp;gt;&amp;gt; $GITHUB_PATH&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get Poetry version&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;poetry --version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, I do another caching step for dependencies and install them if &lt;code&gt;poetry.lock&lt;/code&gt; has changed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check pyproject.toml validity&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;poetry check --no-interaction&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cache dependencies&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cache-deps&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2.1.5&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{github.workspace}}/.venv&lt;/span&gt;
          &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.os }}-${{ hashFiles('**/poetry.lock') }}&lt;/span&gt;
          &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.os }}-&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install deps&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;steps.cache-deps.cache-hit != 'true'&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;poetry config virtualenvs.in-project true&lt;/span&gt;
          &lt;span class="s"&gt;poetry install --no-interaction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, once dependency and virtual environment setup is done, I run pytest:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run tests&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;poetry run pytest -v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#test-build-stability"&gt;
  &lt;/a&gt;
  Test build stability
&lt;/h2&gt;

&lt;p&gt;For testing build stability, we simply run Poetry's &lt;code&gt;build&lt;/code&gt; subcommand, which creates the build artifacts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build artifacts&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;poetry build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#automerge"&gt;
  &lt;/a&gt;
  Auto-merge
&lt;/h2&gt;

&lt;p&gt;GitHub also allows pull requests to be merged automatically if branch protection rules are configured and if the pull request passes all required reviews and status checks. In the repo Settings &amp;gt; Branches &amp;gt; Branch Protection rules, I have a rule defined for &lt;code&gt;main&lt;/code&gt; requiring all jobs in the &lt;code&gt;build.yml&lt;/code&gt; workflow to pass before a branch can be merged into &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#release-automation"&gt;
  &lt;/a&gt;
  Release automation
&lt;/h1&gt;

&lt;p&gt;There are 2 parts to GitHub release automation:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create the GitHub release using Git tags and add the build artifacts to it (&lt;a href="https://github.com/jidicula/random-standup-py/blob/main/.github/workflows/release.yml"&gt;workflow&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Publish the package to PyPI (&lt;a href="https://github.com/jidicula/random-standup-py/blob/main/.github/workflows/publish.yml"&gt;workflow&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#create-github-release"&gt;
  &lt;/a&gt;
  Create GitHub Release
&lt;/h2&gt;

&lt;p&gt;We set up the workflow to trigger on push to a tag beginning with &lt;code&gt;v&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Sequence of patterns matched against refs/tags&lt;/span&gt;
    &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;v*'&lt;/span&gt; &lt;span class="c1"&gt;# Push events to matching v*, i.e. v1.0, v20.15.10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we define our &lt;code&gt;autorelease&lt;/code&gt; job, running on Ubuntu (cheapest and fastest GitHub Actions runner environment):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create Release&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;autorelease&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create Release&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;ubuntu-latest'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our first 2 steps are almost the same as our Build workflow for pushes and PRs to &lt;code&gt;main&lt;/code&gt;: we checkout the repo and set up Poetry. Our checkout step is slightly different, though: we provide &lt;code&gt;0&lt;/code&gt; to the &lt;code&gt;fetch-depth&lt;/code&gt; input so we make a deep clone with all commits, not a shallow clone with just the most recent commit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout code&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;fetch-depth&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Poetry setup steps are identical, so I won't include them here.&lt;/p&gt;

&lt;p&gt;Then, we use Poetry to get the project version from &lt;code&gt;pyproject.toml&lt;/code&gt;, store it in an environment variable, then check if the tag version matches the project version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Add version to environment vars&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;PROJECT_VERSION=$(poetry version --short)&lt;/span&gt;
          &lt;span class="s"&gt;echo "PROJECT_VERSION=$PROJECT_VERSION" &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check if tag version matches project version&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;TAG=$(git describe HEAD --tags --abbrev=0)&lt;/span&gt;
          &lt;span class="s"&gt;echo $TAG&lt;/span&gt;
          &lt;span class="s"&gt;echo $PROJECT_VERSION&lt;/span&gt;
          &lt;span class="s"&gt;if [[ "$TAG" != "v$PROJECT_VERSION" ]]; then exit 1; fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a bit of a guardrail because of how I trigger the autorelease. I update the &lt;code&gt;pyproject.toml&lt;/code&gt; version on my local clone using &lt;code&gt;poetry version &amp;lt;version&amp;gt;&lt;/code&gt;, commit it to &lt;code&gt;main&lt;/code&gt;, then tag it with the same &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; and push the commit and the tag, which then starts this workflow. We need to ensure that the version tag and the &lt;code&gt;pyproject.toml&lt;/code&gt; versions match (in case we forget to bump versions properly).&lt;/p&gt;

&lt;p&gt;Then, we do the same dependency and virtualenv setup as in my Build workflow using Poetry, then run pytest and &lt;code&gt;poetry build&lt;/code&gt;. The build artifacts will be used when we create the release in the final step of this workflow.&lt;/p&gt;

&lt;p&gt;The next step is to create some release notes. I keep a release template in the &lt;code&gt;.github&lt;/code&gt; folder and append some gitlog output to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt; &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Release Notes&lt;/span&gt;
        &lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;git log $(git describe HEAD~ --tags --abbrev=0)..HEAD --pretty='format:* %h %s%n  * %an &amp;lt;%ae&amp;gt;' --no-merges &amp;gt;&amp;gt; ".github/RELEASE-TEMPLATE.md"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That gnarly gitlog command is checking all commits since the last tag to HEAD. For each commit, it appends the commit hash, the commit message subject, the author name, and the author email to the release template.&lt;/p&gt;

&lt;p&gt;Finally, we use a &lt;a href="https://dev.toour"&gt;3rd-party release creation Action&lt;/a&gt; for creating a release draft with the release notes and artifacts we just created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create Release Draft&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;softprops/action-gh-release@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;body_path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;.github/RELEASE-TEMPLATE.md"&lt;/span&gt;
          &lt;span class="na"&gt;draft&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;dist/random_standup-${{env.PROJECT_VERSION}}-py3-none-any.whl&lt;/span&gt;
            &lt;span class="s"&gt;dist/random-standup-${{env.PROJECT_VERSION}}.tar.gz&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
          &lt;span class="na"&gt;GITHUB_REPOSITORY&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;jidicula/random-standup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This creates a draft visible at &lt;a href="https://github.com/jidicula/random-standup-py/releases"&gt;https://github.com/jidicula/random-standup-py/releases&lt;/a&gt;. I modify the release announcements as needed, and publish the release.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#publishing-to-pypi"&gt;
  &lt;/a&gt;
  Publishing to PyPI
&lt;/h2&gt;

&lt;p&gt;The final step of the release process is to publish the package release to the Python Package Index along with the release assets. Here's the full &lt;a href="https://github.com/jidicula/random-standup-py/blob/main/.github/workflows/publish.yml"&gt;workflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This time, we trigger the workflow to run on a release being published (the last step of the previous workflow is manually publishing a release draft):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;release&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;published&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We do the same checkout and Poetry setup as before. Then, we simply run &lt;code&gt;poetry publish --build&lt;/code&gt; using a PyPI token as a GitHub Secrets environment variable for authentication:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Publish to PyPI&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;PYPI_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.PYPI_TOKEN }}&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;poetry config pypi-token.pypi $PYPI_TOKEN&lt;/span&gt;
          &lt;span class="s"&gt;poetry publish --build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it all together
&lt;/h1&gt;

&lt;p&gt;So overall, working on this project would involve:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make a PR for my changes.&lt;/li&gt;
&lt;li&gt;Confirm auto-merge.&lt;/li&gt;
&lt;li&gt;Repeeat Steps 1 and 2 until I'm ready to release.&lt;/li&gt;
&lt;li&gt;Bump the &lt;code&gt;pyproject.toml&lt;/code&gt; version on my local clone using &lt;code&gt;poetry version &amp;lt;new_version&amp;gt;&lt;/code&gt;. Commit the changes.&lt;/li&gt;
&lt;li&gt;Create a tag on &lt;code&gt;main&lt;/code&gt; pointing to the version bump commit.&lt;/li&gt;
&lt;li&gt;Push both the tag and the version bump commit to GitHub.&lt;/li&gt;
&lt;li&gt;Wait for the &lt;a href="https://github.com/jidicula/random-standup-py/actions/workflows/release.yml"&gt;Create Release&lt;/a&gt; run to finish.&lt;/li&gt;
&lt;li&gt;Go to &lt;a href="https://github.com/jidicula/random-standup-py/releases"&gt;https://github.com/jidicula/random-standup-py/releases&lt;/a&gt; and modify the Announcements for the just-created release draft.&lt;/li&gt;
&lt;li&gt;Publish the release.&lt;/li&gt;
&lt;li&gt;Wait for the &lt;a href="https://github.com/jidicula/random-standup-py/actions/workflows/publish.yml"&gt;PyPI Publish&lt;/a&gt; run to finish.&lt;/li&gt;
&lt;li&gt;Check &lt;a href="https://pypi.org/project/random-standup/"&gt;PyPI&lt;/a&gt; for the updated package version.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you have any questions or comments, email me at &lt;a href="mailto:johanan+blog@forcepush.tech"&gt;johanan+blog@forcepush.tech&lt;/a&gt; or post a comment below.&lt;/p&gt;

</description>
      <category>python</category>
      <category>github</category>
      <category>poetry</category>
      <category>devops</category>
    </item>
    <item>
      <title>Understanding Outlines in CSS, overwriting browser defaults.</title>
      <author>chaderenyore</author>
      <pubDate>Mon, 10 May 2021 00:57:11 +0000</pubDate>
      <link>https://dev.to/chaderenyore/understanding-outlines-in-css-overwriting-browser-defaults-3a4n</link>
      <guid>https://dev.to/chaderenyore/understanding-outlines-in-css-overwriting-browser-defaults-3a4n</guid>
      <description>&lt;p&gt;You might have noticed that in newer versions of web browsers there is this dark outline in forms, buttons after they are clicked and many more, Now what are those things, why are they there and how can you remove them? (cause to be sincere these aren't beautiful)&lt;/p&gt;

&lt;p&gt;It usually shows when it's focused, or active. (Pseudo selector for focus, &lt;em&gt;:focus&lt;/em&gt;) And Focus has this outline property it's the browser defaults.&lt;br&gt;
The outline is comparable to a border but it's not part of the box model, It is like a lighter version of the border.&lt;/p&gt;

&lt;p&gt;You can style it with the outline property. &lt;br&gt;
To remove it, outline: none;&lt;br&gt;
It's usually displayed when the element is focused so use the focus Pseudo class&lt;br&gt;
&lt;em&gt;button:focus {&lt;br&gt;
      outline: none;&lt;br&gt;
}&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can set the outline to a different look maybe its width, its color too, you can also add a border-radius to it too and also make it like a normal border&lt;/p&gt;

&lt;p&gt;see MDN For a complete reference of what you can set with the outline &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/outline"&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/outline&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With that, you have full access to your input or button outline and remove ugly outlines by the browser defaults. Now go give that outline a great look😀😀 &lt;/p&gt;

</description>
      <category>css</category>
      <category>browser</category>
    </item>
    <item>
      <title>Registration Page using UserCreationForm (Django) – Part 3</title>
      <author>balt1794</author>
      <pubDate>Mon, 10 May 2021 00:16:02 +0000</pubDate>
      <link>https://dev.to/balt1794/registration-page-using-usercreationform-django-part-3-3iae</link>
      <guid>https://dev.to/balt1794/registration-page-using-usercreationform-django-part-3-3iae</guid>
      <description>&lt;p&gt;In this post, we will style the register page by using CSS and add a couple of extra features to the register form.&lt;/p&gt;

&lt;p&gt;Firstly, we need to edit the code for the register form.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Register.html&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="c"&gt;&amp;lt;!-- path: users/templates/users/register.html --&amp;gt;&lt;/span&gt;

{% load static %}

&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;  &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{% static 'css/register.css' %}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"register-page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"register-form"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        {% csrf_token %}
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"register-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;REGISTER&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;{{form.username.label}}&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
        {{form.username}}
        &lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;{{form.email.label}}&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
        {{form.email}}
        &lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;{{form.password1.label}}&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
        {{form.password1}}
        &lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;{{form.password2.label}}&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
        {{form.password2}}
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Create &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Already registered? &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;#&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Log In&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
        {{ form.errors }}
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;


&lt;span class="c"&gt;&amp;lt;!-- baltlogs.com --&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;— Added the static tag at the top of the template in order to import files from the static folder.&lt;/p&gt;

&lt;p&gt;— Imported &lt;em&gt;register.css&lt;/em&gt; (css file to be created later in this tutorial).&lt;/p&gt;

&lt;p&gt;— Added div and heading tags to organize the information in the form.&lt;/p&gt;

&lt;p&gt;— Added a paragraph tag which contains a message and a link to the login page (to be used in part 4 of the series)&lt;/p&gt;

&lt;p&gt;— Added &lt;em&gt;form.errors&lt;/em&gt; tag which shows users if there is a problem with the fields in the form.&lt;/p&gt;

&lt;p&gt;— Changed the submit input for a button input.&lt;/p&gt;

&lt;p&gt;The first half of the following post will show you how to set up static files such CSS files and JavaScript files, and how to imported them into the HTML templates for extra styling and functionality.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://baltlogs.com/login-registration-page-in-django-using-html-css-javascript-part-ii/"&gt;Login + Registration Page in Django using HTML, CSS, JavaScript (Part II)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you have checked out the post above, you should have the following folders created.&lt;/p&gt;

&lt;p&gt;— Static folder&lt;/p&gt;

&lt;p&gt;— CSS folder inside of the static folder.&lt;/p&gt;

&lt;p&gt;Inside the CSS folder, create a new CSS file named &lt;em&gt;register.css&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Register.css&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="c"&gt;/* path-&amp;gt; static/css/register.css */&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="err"&gt;load&lt;/span&gt; &lt;span class="err"&gt;static&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="nt"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"stylesheet"&lt;/span&gt;  &lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"{% static 'css/register.css' %}"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="nt"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"register-page"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="nt"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"form"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"register-form"&lt;/span&gt; &lt;span class="nt"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"POST"&lt;/span&gt; &lt;span class="nt"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="err"&gt;csrf_token&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="nt"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"register-title"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;REGISTER&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;{form.username.label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;{form.username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;{form.email.label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;{form.email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;{form.password1.label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;{form.password1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;{form.password2.label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;{form.password2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"submit"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;Create&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="nt"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"message"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;Already&lt;/span&gt; &lt;span class="nt"&gt;registered&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;Log&lt;/span&gt; &lt;span class="nt"&gt;In&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="err"&gt;form.errors&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;


&lt;span class="c"&gt;/* baltlogs.com */&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above styles the elements in the register.html template. Feel free to go over the styling and change the code to suit your needs.&lt;/p&gt;

&lt;p&gt;Save changes and run the server to see the changes take place.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wuh1rB7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0nd1wg4709eealw3q5hz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wuh1rB7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0nd1wg4709eealw3q5hz.png" alt="Screen Shot 2021-05-09 at 5.45.45 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The new design of the register page looks very neat. If this style looks familiar, it is because the style was used in a previous &lt;a href="https://baltlogs.com/login-registration-page-in-django-using-html-css-javascript-part-iii/"&gt;tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Test the form by creating users. Purposefully type the wrong password and see if the form displays the respective error messages after trying to submit. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mMXfjR2V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wg9efx8im6ysimj9xgep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mMXfjR2V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wg9efx8im6ysimj9xgep.png" alt="Screen Shot 2021-05-09 at 5.50.24 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The form errors appear at the bottom of the form, but you can move them around in the code to appear somewhere else in the page.&lt;/p&gt;

&lt;p&gt;There is one last change to make before moving onto the login page. There is a small bug in the form. If you were to leave empty the email field, the form can still be submitted. We do not want this behavior, at least for this tutorial, we want all fields to be filled in for the form to be valid. To do this, we have to add one line of code to the forms.py file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Forms.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#path: users/forms.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UserCreationForm&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomUserForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UserCreationForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EmailField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;
        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'password1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'password2'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;#baltlogs.com
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;— Made email field required.&lt;/p&gt;

&lt;p&gt;We only have to do this for the email field since this is the only custom field added. The other fields are already required by default.&lt;/p&gt;

&lt;p&gt;Save changes and run server.&lt;/p&gt;

&lt;p&gt;Now the register page is ready to go. You can test the form by creating some more users.&lt;/p&gt;

&lt;p&gt;Next up, we will tackle the login page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 4 –&amp;gt; Soon&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Learn more about Django:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/balt1794"&gt;Twitter&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://baltlogs.com/registration-page-using-usercreationform-django-part-1/"&gt;Registration Page using UserCreationForm (Django) – Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://baltlogs.com/registration-page-user-form-django-2/"&gt;Registration Page using UserCreationForm (Django) – Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://amzn.to/34UAIe2"&gt;Django 3..2..1..Takeoff Book&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://baltlogs.com"&gt;Personal Website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>django</category>
      <category>html</category>
      <category>css</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Things That Helped Me Learn to Code</title>
      <author>Nabil Tharwat</author>
      <pubDate>Sun, 09 May 2021 22:45:06 +0000</pubDate>
      <link>https://dev.to/kl13nt/things-that-helped-me-learn-to-code-40je</link>
      <guid>https://dev.to/kl13nt/things-that-helped-me-learn-to-code-40je</guid>
      <description>&lt;p&gt;Learning to code is not a straight path, these tips helped me get better at it. Hopefully by the end of this article you'd have enough of a foundation to require minimal &lt;em&gt;bounce&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@cadop?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Mathew Schwartz&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/speed?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stick-to-a-single-road"&gt;
  &lt;/a&gt;
  Stick to a single road
&lt;/h2&gt;

&lt;p&gt;You may be tempted to learn every single tool out there, and while it may be possible, is it really worth it? You usually need a single tool and nothing more to get a job done. Learn what you need. Look at the market and stay up to date with its trends. Stick to a roadmap until you need another one. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#watch-less-build-more"&gt;
  &lt;/a&gt;
  Watch less, build more
&lt;/h2&gt;

&lt;p&gt;Tutorials are fun and dandy until you stop watching them. They give you a feeling of confidence because you're following and succeeding in that. But is following all you need? Will you use tutorials when you're assigned tasks in a real world scenario?&lt;/p&gt;

&lt;p&gt;A serious lot of developers have contacted me about this issue. They follow a lot of tutorials, but fail to even get started on their own. Don't get me wrong, tutorials are good, but too much of anything is bad.&lt;/p&gt;

&lt;p&gt;Focus on building projects on your own. If you're going through a tutorial, build the same project on your own after finishing the tutorial. This time though, don't even look at the tutorial.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SSjQV9Mp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wy8k0nnlm71kdmtaswe2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SSjQV9Mp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wy8k0nnlm71kdmtaswe2.gif" alt="1"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-need-less-than-you-think-aka-avoid-overengineering"&gt;
  &lt;/a&gt;
  You need less than you think. (AKA Avoid over-engineering)
&lt;/h2&gt;

&lt;p&gt;Most of the time, you'll most likely think you need a hundred tools to get a job done. This is often a mislead view and is amplified by your lack of knowledge and confidence. &lt;/p&gt;

&lt;p&gt;For example, you may be tempted to use the most complicated tools you know, when instead you could build the same thing with much simpler tools. Over-engineering is bad, avoid it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-problem-solving-amp-debugging-skills"&gt;
  &lt;/a&gt;
  Build problem solving &amp;amp; debugging skills
&lt;/h2&gt;

&lt;p&gt;Solving problems is the core of computer science and so it's an essential tool to have up your sleeve. It helps you break down complex problems into tiny easy tasks and solve them efficiently bit by bit. Debugging skills help developers pinpoint various types of errors and bugs around an application. They'd make your life much easier. Trust me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-be-afraid-to-make-mistakes-and-ask-questions"&gt;
  &lt;/a&gt;
  Don't be afraid to make mistakes, and ask questions
&lt;/h2&gt;

&lt;p&gt;Mistakes help us learn, and if you're starting out you'll need to make lots of them. Making mistakes means you're pushing your knowledge boundaries. Pushing your boundaries is a sign of growth. Questions are essential to your growth. Don't be afraid to ask "dumb" questions. They're probably beneficial to you, even if they're "dumb" to more experienced others. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#take-notes-blog-and-teach-others"&gt;
  &lt;/a&gt;
  Take notes, blog, and teach others
&lt;/h2&gt;

&lt;p&gt;Writing is essential. Whether you're writing notes for yourself, blogging online for others, or teaching  those who seek your help, writing is essential and beneficial. When you're publishing these notes and blog posts you not only help others, but help yourself by deepening your knowledge and receiving feedback.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoid-fomo"&gt;
  &lt;/a&gt;
  Avoid FOMO
&lt;/h2&gt;

&lt;p&gt;Fear of missing out (FOMO) is a social anxiety stemming from the belief that others might be having fun while the person experiencing the anxiety is not present. It is characterized by a desire to stay continually connected with what others are doing. &lt;/p&gt;

&lt;p&gt;Learn to deal with it, live with it, and control it. Avoid chasing every shiny new tech. Doing so will save you a ton of time and headache. Chances are very few companies are going to adopt this new tech. And if many do, their systems that already use other tools will be too much of a cost to replace just to use this new tech. Have the confidence to choose what to learn. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aWC9qdWF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3kre7buc5knaaigz87n6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aWC9qdWF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3kre7buc5knaaigz87n6.gif" alt="2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-leave-the-basics-behind"&gt;
  &lt;/a&gt;
  Don't leave the basics behind
&lt;/h2&gt;

&lt;p&gt;If you've been going through courses/tutorials back-to-back, chances are you've missed a bunch of basics on the way. Go back and learn them thoroughly. You'll thank me later. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-kind-to-yourself"&gt;
  &lt;/a&gt;
  Be kind to yourself
&lt;/h2&gt;

&lt;p&gt;We're not born with knowledge. You were not born knowing how to code, and neither were your peers. Building foundations takes time and effort. Don't give up, don't push yourself too much, and enjoy the journey. Burnout is real.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-let-coding-take-over-other-aspects-of-your-life"&gt;
  &lt;/a&gt;
  Don't let coding take over other aspects of your life
&lt;/h2&gt;

&lt;p&gt;Coding can be fun and tempting, but sitting all day doing nothing but that is a complete waste of time and energy. Go out, keep in touch with friends, play music, learn to do other things aside from coding. You may as well create content around coding, just don't sink in too deep into coding. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stop-waiting-for-perfect-opportunities"&gt;
  &lt;/a&gt;
  Stop waiting for perfect opportunities
&lt;/h2&gt;

&lt;p&gt;If you've built projects, gone through courses, and prepared yourself for the job, you're probably "ready". Stop waiting for the "perfect opportunity". If you are, you're already missing out. Start going out of your comfort zone. Start applying to companies. Do your best, and show it off. It's a good learning experience as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-interacting-with-the-community"&gt;
  &lt;/a&gt;
  Start interacting with the community
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o2gbl9HN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2aeoi45zxnurlj5cpx4p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o2gbl9HN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2aeoi45zxnurlj5cpx4p.gif" alt="3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Coding is not a singular act nor a one-man effort. It's a community, and you're part of it, like it or not. You may refrain from contributing to it, but why do that when you can instead contribute back to the community that helped you get started? Start interact with the community already! Here are ways you can do that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow developers blogging about all sorts of things on &lt;a href="https://dev.to"&gt;DEVCommunity&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Stay up to date with everything by visiting &lt;a href="https://news.ycombinator.com/news"&gt;HackerNews&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Follow industry/community leaders on &lt;a href="http://twitter.com/"&gt;Twitter&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Join developer communities online! &lt;a href="https://valarium.netlify.app/"&gt;Valarium&lt;/a&gt; is a discord community I started a couple years back. It's mostly in Arabic but everyone's welcome!&lt;/li&gt;
&lt;li&gt;Join Reddit developer communities! They're rich of content and joy!&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;These tips helped me personally, and I had to bounce around perhaps too much because I didn't know them at the time. Now you don't have to! If these tips helped you make sure to love and share the article, and follow me for more! &lt;/p&gt;

&lt;p&gt;Thanks for reading! You can follow me on &lt;a href="https://twitter.com/kl13nt"&gt;Twitter&lt;/a&gt;, or read more of my content here or on my &lt;a href="https://iamnabil.netlify.app/blog"&gt;blog&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>discuss</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Keep Save your money 💵, and Let's get a 👑 Premium Courses for free as a 👩‍🎓👨‍🎓 university student</title>
      <author>Dzun N</author>
      <pubDate>Sun, 09 May 2021 22:33:08 +0000</pubDate>
      <link>https://dev.to/dzun_n/keep-save-your-money-and-let-s-get-a-premium-courses-for-free-as-a-university-student-m5p</link>
      <guid>https://dev.to/dzun_n/keep-save-your-money-and-let-s-get-a-premium-courses-for-free-as-a-university-student-m5p</guid>
      <description>&lt;p&gt;As student, we would pay out for getting premium courses to get study out of school. But how about you have access to many courses/resources for free that others have to pay for. It's a great opportunity to gain some edge, learn tools that are highly in demand while not spending any money.&lt;/p&gt;

&lt;p&gt;The greatest package, you can access as a student is &lt;a href="https://education.github.com/pack"&gt;GitHub Student Developer Pack&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-student-developer-pack"&gt;
  &lt;/a&gt;
  GitHub Student Developer Pack
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EpxUnQjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twwariw2df4a4phj7aiv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EpxUnQjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twwariw2df4a4phj7aiv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-register-it-"&gt;
  &lt;/a&gt;
  How do I register it ?
&lt;/h2&gt;

&lt;p&gt;You don't have to bother about it. If you have an academic email address Github recognize, access is granted immediately. Besides great deals on learning platform, you also get a bunch of other great deals. So check that out!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontend-masters"&gt;
  &lt;/a&gt;
  &lt;a href="https://frontendmasters.com/welcome/github-student-developers/"&gt;Frontend Masters&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P0XPL27W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ipf3kzfuosohljt1oyn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P0XPL27W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ipf3kzfuosohljt1oyn.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The best deal in the GitHub student package is definitely  &lt;strong&gt;6 months&lt;/strong&gt;  of free access to  &lt;strong&gt;Frontend Masters&lt;/strong&gt;. It is worth between  &lt;strong&gt;200-250 USD&lt;/strong&gt;  and the content there is just awesome. If you wanna step up your web development skills, this is the platform you should use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-camp"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.datacamp.com/"&gt;Data Camp&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RIIY1QZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2eyclhb3whhsnbd9z5n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RIIY1QZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2eyclhb3whhsnbd9z5n.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If you are more interested in the world of data, you can get  &lt;strong&gt;3 months&lt;/strong&gt;  access to Data Camp. There you can learn Python, SQL, or R and really get a good grasp of advanced concepts. This content is worth  &lt;strong&gt;75 USD&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#educativeio"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.educative.io/github-students"&gt;Educative.io&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SGKwwh8O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/llooekji04wyhkjc6cto.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SGKwwh8O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/llooekji04wyhkjc6cto.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Another great platform with several famous courses that might help you land a dream job. Their System Design course is highly popular and you can get  &lt;strong&gt;3 months&lt;/strong&gt;  for free worth over  &lt;strong&gt;100 USD&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nexttech"&gt;
  &lt;/a&gt;
  &lt;a href="https://next.tech/github-students"&gt;next.tech&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h0hoSjFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3adl76p35xgydek0su70.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h0hoSjFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3adl76p35xgydek0su70.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Next Tech provides cloud computing environments that are accessible from the browser ― no downloads required. Students around the world use Next Tech so they don't have to install software themselves when they work on a programming project. This lets them focus on the coding and not on the annoying software set up!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#one-month"&gt;
  &lt;/a&gt;
  &lt;a href="https://onemonth.com/github/students"&gt;One Month&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LrKb37rA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7nhuxt4dh8lcbtw25yf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LrKb37rA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7nhuxt4dh8lcbtw25yf.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;One Month's online coding courses teach you exactly what you need to learn to code quickly. Learn Python, HTML, JavaScript and more in just 30 days.&lt;/p&gt;

&lt;p&gt;Over 120,000 students have used One Month's computer programming courses to launch their side hustles, level up their careers, and build things they couldn’t even imagine before. Our online coding bootcamps include certification, human support, and the change to create real-world projects that you can use for applying to jobs or attracting new clients.&lt;/p&gt;

&lt;p&gt;We invite all  &lt;a href="https://education.github.com/pack"&gt;Github Student Developer Pack&lt;/a&gt;  members to enjoy One Month’s online coding courses free for 30-days.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interview-cake"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.interviewcake.com/github-students"&gt;Interview Cake&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qwJKpIN_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ty6lh2pp53oqpkymnx3l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qwJKpIN_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ty6lh2pp53oqpkymnx3l.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Students get access to  &lt;a href="https://www.interviewcake.com/table-of-contents"&gt;our full coding interview prep course&lt;/a&gt;  for 3 weeks FREE. Get ready to ace your coding interview with practice questions, tutorials, and data structures and algorithms review.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#go-rails"&gt;
  &lt;/a&gt;
  &lt;a href="https://gorails.com/github-students"&gt;Go Rails&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j8pBuwC1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbqp146ugndm52rr92q0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j8pBuwC1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbqp146ugndm52rr92q0.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Tutorials for web developers learning Ruby, Rails, Javascript, Turbolinks, Stimulus.js, Vue.js, and more. GoRails for GitHub Students 12 months of free access to GoRails for students&lt;br&gt;&lt;br&gt;
enrolled in the  &lt;a href="https://education.github.com/?utm_source=github+gorails"&gt;GitHub Student Developer Pack&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>github</category>
      <category>student</category>
    </item>
    <item>
      <title>Database Basics</title>
      <author>Saoud</author>
      <pubDate>Sun, 09 May 2021 22:14:43 +0000</pubDate>
      <link>https://dev.to/saoud/database-basics-2l95</link>
      <guid>https://dev.to/saoud/database-basics-2l95</guid>
      <description>&lt;h2&gt;
  &lt;a href="#database-schema-and-relationship-types"&gt;
  &lt;/a&gt;
  Database Schema and Relationship Types
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Terminology&lt;/strong&gt;&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Database schema&lt;/strong&gt;: The structure that represents the way the database is built. It defines how data is stored in the database tables and how the relations among tables are associated.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;One-to-one Relationship&lt;/strong&gt;: Two tables have a one-to-one relationship when a row on one table is related to &lt;em&gt;only one&lt;/em&gt; row on the other table.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;One-to-many relationship:&lt;/strong&gt; Two tables share a one-to-many relationship when a single row on one table can be related to many rows on another table.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Many-to-many relationship:&lt;/strong&gt; Two tables share a many-to-many relationship when each row on each table can have many rows on the other table. This relationship requires use of a join table.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Join table&lt;/strong&gt;: Used to manage all possible relationships in a many-to-many relationship, a join table contains individual entries.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#configuration-for-entity-framework-core"&gt;
  &lt;/a&gt;
  Configuration for Entity Framework Core
&lt;/h2&gt;

&lt;p&gt;ToDoList.csproj&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt; &lt;span class="n"&gt;Sdk&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.NET.Sdk.Web"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PropertyGroup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TargetFramework&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;net5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;TargetFramework&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;PropertyGroup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ItemGroup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PackageReference&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.EntityFrameworkCore"&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"5.0.0"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PackageReference&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Pomelo.EntityFrameworkCore.MySql"&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"5.0.0-alpha.2"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ItemGroup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#appsettingsjson"&gt;
  &lt;/a&gt;
  appsettings.json
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"ConnectionStrings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"DefaultConnection"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Server=localhost;Port=3306;database=to_do_list;uid=root;pwd=[YOUR-PASSWORD-HERE];"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure your &lt;code&gt;appsettings.json&lt;/code&gt; file is in your &lt;code&gt;.gitignore&lt;/code&gt;!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#startupcs"&gt;
  &lt;/a&gt;
  Startup.cs
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Builder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Hosting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Http&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.EntityFrameworkCore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.Extensions.Configuration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.Extensions.DependencyInjection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;ToDoList.Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;ToDoList&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Startup&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Startup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IWebHostEnvironment&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ConfigurationBuilder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetBasePath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentRootPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddJsonFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"appsettings.json"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;Configuration&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IConfigurationRoot&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ConfigureServices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddMvc&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddEntityFrameworkMySql&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddDbContext&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ToDoListContext&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseMySql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"ConnectionStrings:DefaultConnection"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ServerVersion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AutoDetect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"ConnectionStrings:DefaultConnection"&lt;/span&gt;&lt;span class="p"&gt;])));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IApplicationBuilder&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseDeveloperExceptionPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseRouting&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseEndpoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapControllerRoute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"{controller=Home}/{action=Index}/{id?}"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;

      &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseStaticFiles&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#programcs"&gt;
  &lt;/a&gt;
  Program.cs
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Hosting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;ToDoList&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;WebHostBuilder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseKestrel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseContentRoot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetCurrentDirectory&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseIISIntegration&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UseStartup&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Startup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#modelstodolistcontextcs"&gt;
  &lt;/a&gt;
  Models/ToDoListContext.cs
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.EntityFrameworkCore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;ToDoList.Models&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ToDoListContext&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DbContext&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DbSet&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Items&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ToDoListContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DbContextOptions&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ef-core-with-an-existing-database"&gt;
  &lt;/a&gt;
  EF Core with an Existing Database
&lt;/h2&gt;

&lt;p&gt;Models/Item.cs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;ToDoList.Models&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Item&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ItemId&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Description&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#controllersitemscontrollercs"&gt;
  &lt;/a&gt;
  Controllers/ItemsController.cs
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Mvc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;ToDoList.Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Linq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;ToDoList.Controllers&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ItemsController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;ToDoListContext&lt;/span&gt; &lt;span class="n"&gt;_db&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ItemsController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ToDoListContext&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;_db&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;View&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#controllershomecontrollercs"&gt;
  &lt;/a&gt;
  Controllers/HomeController.cs
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Mvc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;ToDoList.Controllers&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomeController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;HttpGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;View&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#viewsitemsindexcshtml"&gt;
  &lt;/a&gt;
  Views/Items/Index.cshtml
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Layout&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"_Layout"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;@using&lt;/span&gt; &lt;span class="n"&gt;ToDoList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nf"&gt;@if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;@Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;added&lt;/span&gt; &lt;span class="n"&gt;yet&lt;/span&gt;&lt;span class="p"&gt;!&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;@foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;@item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-and-read-with-ef-core"&gt;
  &lt;/a&gt;
  Create and Read with EF Core
&lt;/h2&gt;

&lt;p&gt;Controllers/ItemsController.cs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Mvc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;ToDoList.Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Linq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;ToDoList.Controllers&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ItemsController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;ToDoListContext&lt;/span&gt; &lt;span class="n"&gt;_db&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ItemsController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ToDoListContext&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;_db&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;View&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;View&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;HttpPost&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;_db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;_db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SaveChanges&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;RedirectToAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Index"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>database</category>
      <category>csharp</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Aqui está um tutorial de useState (ou quase)</title>
      <author>Paulo Alenquer</author>
      <pubDate>Sun, 09 May 2021 22:12:24 +0000</pubDate>
      <link>https://dev.to/palenquer/aqui-esta-um-tutorial-de-usestate-ou-quase-1m3j</link>
      <guid>https://dev.to/palenquer/aqui-esta-um-tutorial-de-usestate-ou-quase-1m3j</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8c91ke8T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m64nayc4xxagczx92wt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8c91ke8T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m64nayc4xxagczx92wt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sempre que alguém se depara com o React pela primeira vez, se assusta com os seus hooks e funcionalidades, não é mesmo? Eu mesmo sinto medo de alguns hooks e já fui dormir chorando várias vezes por conta de alguns deles.&lt;/p&gt;

&lt;p&gt;Mas fica tranquilo que pelo menos o useState eu posso tentar te ensinar de uma forma simples como se você estivesse no ensino fundamental pela primeira vez.&lt;/p&gt;

&lt;p&gt;Em React nós temos vários hooks e um deles é o useState, esse pra mim é o mais simples de entender e aplicar, então vamos ver como que ele funciona.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#criando-e-iniciando-o-usestate"&gt;
  &lt;/a&gt;
  Criando e iniciando o useState
&lt;/h2&gt;

&lt;p&gt;O que é o useState? useState é um hook do React a qual nos retorna um array com dois elementos, sendo o primeiro o nosso estado e o segundo uma função para alterar o nosso estado. Além disso, podemos passar como argumento, um estado inicial para o nosso estado. Não entendeu ainda? relaxa que eu vou te explicar. &lt;em&gt;Veja no exemplo abaixo:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aqui nós temos o &lt;code&gt;state&lt;/code&gt; que é o estado, o &lt;code&gt;setState&lt;/code&gt; que é a função para alterar o valor do nosso estado e o &lt;code&gt;useState(0)&lt;/code&gt; que é o valor inicial do nosso estado, nesse caso é o &lt;code&gt;0&lt;/code&gt; (poderia ser qualquer outro valor, como uma &lt;em&gt;string&lt;/em&gt;, &lt;em&gt;boolean&lt;/em&gt; ou um &lt;em&gt;array &lt;del&gt;de linguiças artesanais&lt;/del&gt;&lt;/em&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#utilizando-o-usestate-na-pr%C3%A1tica"&gt;
  &lt;/a&gt;
  Utilizando o useState na prática
&lt;/h2&gt;

&lt;p&gt;Para entender melhor como funciona o useState, precisamos também entende-lo na prática. E pra isso vou mostrar um exemplo de useState para fazer um contador simpleszão.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ignore os classNames&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RzeTcGDY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n2su1yhixdusg607lzq4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RzeTcGDY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n2su1yhixdusg607lzq4.png" alt="Screenshot_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aqui temos um exemplo de um estado que está recebendo um valor inicial de &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;e uma função logo abaixo que irá acrescentar &lt;code&gt;1&lt;/code&gt; para nosso estado toda vez que o botão for clicado&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addCounter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(para exibir o estado na tela é só adicionar um &lt;code&gt;{}&lt;/code&gt; no seu HTML com o estado dentro, no exemplo é o h1).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ao clicar no botão duas vezes automaticamente nosso estado foi exibido na página com o número &lt;code&gt;2&lt;/code&gt;, graças a nossa funçãozinha chamada &lt;code&gt;addCounter&lt;/code&gt; que acrescentou 2 vezes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r8MUoLXl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvftcoob73l4u6d30y63.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r8MUoLXl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvftcoob73l4u6d30y63.png" alt="Screenshot_2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CONSEGUIMOS, UHUL! criamos um contadorzinho super simples e funcional com o &lt;strong&gt;useState&lt;/strong&gt;! Agora é só praticar com outros exemplos que eu tenho certeza que você vai se sair super bem! ❤️&lt;/p&gt;

</description>
      <category>react</category>
      <category>hooks</category>
      <category>usestate</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Changing text colour based on 

background colour luminosity </title>
      <author>Jamie Mc Manus</author>
      <pubDate>Sun, 09 May 2021 21:07:22 +0000</pubDate>
      <link>https://dev.to/jamiemcmanus/changing-text-colour-based-on-background-colour-luminosity-4cf2</link>
      <guid>https://dev.to/jamiemcmanus/changing-text-colour-based-on-background-colour-luminosity-4cf2</guid>
      <description>&lt;h5&gt;
  &lt;a href="#scenario"&gt;
  &lt;/a&gt;
  Scenario
&lt;/h5&gt;

&lt;p&gt;You decide to let the users of your application set the preferred colour of an item - this could anything from a simple card to an list item on a Kanban board.  This is a straightforward feature and common enough but it can wreak havoc on any foreground text that we place over it, like what happens if our text is white and they choose a light colour ? &lt;/p&gt;

&lt;p&gt;Your text will have the visibility of a ghost 👻.&lt;/p&gt;

&lt;p&gt;This isn't good. Our foreground text is gone and its because we gave the user an input in the application style, but fear not, the battle hasn't been lost yet.   &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#le-solution"&gt;
  &lt;/a&gt;
  Le Solution
&lt;/h5&gt;

&lt;p&gt;What if we could check how dark / bright the colour the user selected is ? &lt;br&gt;
We could change the colour of the foreground text dynamically to be visible. To do this we need to find the Luminosity of the background colour, which is a measure of how bright or dark a hue is. &lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h5&gt;

&lt;p&gt;Create a Service folder in your project and create a new class &lt;code&gt;Luminosity.cs&lt;/code&gt; . Within this class we'll keep our helper methods for the task.&lt;br&gt;
We need to first get the luminance of the background colour , then using this value return a colour between white and black. The Luminance will be a double  between 0 (black) and 1(white), and we'll then translate this into an RGB value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Drawing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Linq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Web&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;sampleproject.Services&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Luminosity&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;GetLuminosity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;colour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//Convert html colour to Color Object&lt;/span&gt;
            &lt;span class="n"&gt;Color&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ColorTranslator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colour&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;//Get the Luminancce value from the converted color.    &lt;/span&gt;
            &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;luminance&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.299&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;0.587&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;0.114&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;luminance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;GetColour&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;colour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;luminance&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;GetLuminosity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colour&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;// Translate the luminance to RGB values &lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Convert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToInt32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;luminance&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;  &lt;span class="s"&gt;$"rgb(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;,&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;,&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;)"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#razor-view"&gt;
  &lt;/a&gt;
  Razor View
&lt;/h5&gt;

&lt;p&gt;Now within the Razor View we can use the helper method to change the value of the foreground text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;@using&lt;/span&gt; &lt;span class="n"&gt;sampleproject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ViewBag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Index"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Layout&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"~/Views/Shared/_Layout.cshtml"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="err"&gt;="&lt;/span&gt;&lt;span class="nc"&gt;card&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="s"&gt;"&amp;gt;
&lt;/span&gt;    &lt;span class="nf"&gt;@foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"background-color:"&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Primarycolor&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;";color:"&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="n"&gt;Luminosity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetColour&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Primarycolor&lt;/span&gt;&lt;span class="p"&gt;)+&lt;/span&gt;&lt;span class="s"&gt;";"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="err"&gt;="&lt;/span&gt;&lt;span class="nc"&gt;card&lt;/span&gt;&lt;span class="s"&gt;" style="&lt;/span&gt;&lt;span class="n"&gt;@style&lt;/span&gt;&lt;span class="s"&gt;"&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;.....&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#the-result"&gt;
  &lt;/a&gt;
  The Result
&lt;/h5&gt;

&lt;p&gt;With the above code we should get a result roughly like the below.&lt;br&gt;&lt;br&gt;
The colour of the foreground text should always be on the opposite end of the scale to the background text. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NvYcekSf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewmc8lu6ydx7pzv1m2e9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NvYcekSf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewmc8lu6ydx7pzv1m2e9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h6&gt;

&lt;p&gt;&lt;small&gt;Cover Photo by &lt;a href="https://unsplash.com/@ruvimnogaphoto?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ruvim Noga&lt;/a&gt; on &lt;a href="https://unsplash.com/license?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;br&gt;
  &lt;/small&gt;&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>css</category>
      <category>dotnet</category>
    </item>
  </channel>
</rss>
