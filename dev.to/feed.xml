<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>20 JavaScript Libraries to use in your Projects</title>
      <author>Chaitanya Prabuddha</author>
      <pubDate>Mon, 31 May 2021 14:21:21 +0000</pubDate>
      <link>https://dev.to/line/20-javascript-libraries-to-use-in-your-projects-44h9</link>
      <guid>https://dev.to/line/20-javascript-libraries-to-use-in-your-projects-44h9</guid>
      <description>&lt;p&gt;JavaScript is a programming language that is vastly used in the world both on the client-side as well as server-side that allows you to make web pages convertible and create dynamic web content.&lt;/p&gt;

&lt;p&gt;It has a lot of pre-build libraries that makes your work a lot more simpler than you think, &lt;/p&gt;

&lt;p&gt;But &lt;strong&gt;what is JavaScript Libraries?&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;A JavaScript library is a library of pre-written JavaScript that allows for easier development of JavaScript-based applications, especially for AJAX and other web-centric technologies.&lt;/p&gt;

&lt;p&gt;Let's see some of the most important JavaScript Libraries you should use in your project- &lt;/p&gt;

&lt;p&gt;1.&lt;strong&gt;Redux&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As the size of applications become huge in the production process, the data flouncy becomes a problem. Redux assists you to overcome that issue by helping to maintain a predictable state for the application.&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;Omniscient&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Omniscient let programmers to do fast top-down rendering embracing, immutable data, and functional programming.&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;Chart.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Chart.js is an open-source library that gives divergent solutions to all of that chart which demands your corresponding application.&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;D3 js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;D3.js is an exhaustive library that can be used for the Visualization of data and concisely conveying of data.&lt;/p&gt;

&lt;p&gt;5.&lt;strong&gt;SurveyJS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SurveyJS is a JavaScript library that help developers build customizable surveys and quizzes that can be integrated with any JS application.&lt;/p&gt;

&lt;p&gt;6.&lt;strong&gt;Final Form&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Final Form is the library that creates building beautiful and approachable forms easily.&lt;/p&gt;

&lt;p&gt;7.&lt;strong&gt;Choreographer-JS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Choreographer-Js is a simple library that allows you to handle CSS animations as well as non-CSS animations&lt;/p&gt;

&lt;p&gt;8.&lt;strong&gt;Typeahead.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Typehead.js provides auto-complete for search boxes and other text boxes on various websites.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#subscribe-to-newsletter-get-amazing-content-which-is-not-available-here-httpslinenewslettersubstackcom"&gt;
  &lt;/a&gt;
  Subscribe to Newsletter (Get Amazing Content, which is not available here), &lt;a href="https://linenewsletter.substack.com/"&gt;https://linenewsletter.substack.com/&lt;/a&gt;
&lt;/h6&gt;

&lt;p&gt;9.&lt;strong&gt;Multiple.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This JS library can be used to Galvanize the visual appeal of your website. It can be used to create impressive backgrounds for web page content.&lt;/p&gt;

&lt;p&gt;10.&lt;strong&gt;ApexCharts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ApexCharts gives interactive charts feature that can be used with websites running with JavaScript frameworks.&lt;/p&gt;

&lt;p&gt;11.&lt;strong&gt;Premonish&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Premonish is a simple JavaScript library that can forecast what element the user will collaborate with.&lt;/p&gt;

&lt;p&gt;12.&lt;strong&gt;Stretchy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Stretchy is a simple library that can be used to auto-size input elements on web pages.&lt;/p&gt;

&lt;p&gt;13.&lt;strong&gt;Hammer.JS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hammer JS is a library that can be used to detect and work with touch gestures in general, including multi-touch gestures.&lt;/p&gt;

&lt;p&gt;14.&lt;strong&gt;JS Encrypt&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JS Encrypt provides easy to implement RSA JavaScript encryption for applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/chipoo"&gt;DONATE&lt;/a&gt; or &lt;a href="https://patreon.com/chipoo"&gt;Membership&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;15.&lt;strong&gt;Discord.JS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Discord.JS can also be used to create bots that can automate and enhance functionalities in discord servers.&lt;/p&gt;

&lt;p&gt;16.&lt;strong&gt;Google Maps Utility Library&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Google Maps is vastly used by people for navigation, as well as by developers for utilizing map-based functionalities to websites and apps.&lt;/p&gt;

&lt;p&gt;17.&lt;strong&gt;Typed.JS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Typed.JS provides typing animations that can be added to any JS application.&lt;/p&gt;

&lt;p&gt;18.&lt;strong&gt;Math.JS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With this library, complex mathematical problems can be run at the browser without straining backend servers.&lt;/p&gt;

&lt;p&gt;19.&lt;strong&gt;Howler.JS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Howler JS is a library that can be used to detect and work with touch gestures in general, including multi-touch gestures.&lt;/p&gt;

&lt;p&gt;20.&lt;strong&gt;ScrollMagic&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Simple scrolling web pages can be made a UX element to surprise and engage website users.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;END&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/chipoo"&gt;DONATE&lt;/a&gt; or &lt;a href="https://patreon.com/chipoo"&gt;Membership&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#subscribe-to-newsletter-get-amazing-content-which-is-not-available-here-httpslinenewslettersubstackcom"&gt;
  &lt;/a&gt;
  Subscribe to Newsletter (Get Amazing Content, which is not available here), &lt;a href="https://linenewsletter.substack.com/"&gt;https://linenewsletter.substack.com/&lt;/a&gt;
&lt;/h6&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/chetanistaken"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>java</category>
      <category>node</category>
      <category>react</category>
    </item>
    <item>
      <title>Could Aleph.js be the next big React Framework?</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 31 May 2021 14:03:13 +0000</pubDate>
      <link>https://dev.to/codesphere/could-aleph-js-be-the-next-big-react-framework-2cgb</link>
      <guid>https://dev.to/codesphere/could-aleph-js-be-the-next-big-react-framework-2cgb</guid>
      <description>&lt;p&gt;A couple of months ago we covered Deno, a new Javascript runtime that is attempting to dethrone &lt;code&gt;Node.js&lt;/code&gt; as the de facto runtime for executing Javascript. Ironically, Deno is being developed by Ryan Dahl, the same developer who made &lt;code&gt;Node.js&lt;/code&gt; back in 2009. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here’s that article if you're looking to learn more about our take on Deno:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://codesphere.com/articles/say-yes-to-deno-23fa587e3877"&gt;https://codesphere.com/articles/say-yes-to-deno-23fa587e3877&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While Deno has a lot to offer, such as built-in Typescript support and a simpler dependency system, the biggest hurdle to its adoption is the plethora of dev tools and frameworks that are dependent on &lt;code&gt;Node.js&lt;/code&gt;. As Deno gains traction, however, developers have begun creating new frameworks that rely on Deno instead of &lt;code&gt;Node.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is where &lt;code&gt;Aleph.js&lt;/code&gt; comes in. The two most popular React frameworks for creating production-ready apps are undeniably &lt;code&gt;Next.js&lt;/code&gt; and Gatsby; Both of which are dependent on &lt;code&gt;Node.js&lt;/code&gt; &lt;code&gt;Aleph.js&lt;/code&gt; attempts to create an equivalent React framework that is fast for users and convenient for developers. In their own words:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Aleph.js&lt;/code&gt; gives you the best developer experience for building modern web applications:&lt;br&gt;
TypeScript in Deno, ES module imports, file-system routing, SSR &amp;amp; SSG, HMR with Fast Refresh, and more. No config needed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you’d like to hear about &lt;code&gt;Aleph.js&lt;/code&gt; straight from the horse's mouth, you can check out their documentation here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://alephjs.org/"&gt;https://alephjs.org/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-alephjs-make-react-denofriendly"&gt;
  &lt;/a&gt;
  How Aleph.js make React Deno-friendly
&lt;/h3&gt;

&lt;p&gt;While it is technically possible to create a React application using Deno instead of &lt;code&gt;Node.js&lt;/code&gt;, create-react-app by default is going to use NPM. &lt;code&gt;Aleph.js&lt;/code&gt; offers that same sort of quick-start as CRA but allows you to have your React application already set up with Deno.&lt;/p&gt;

&lt;p&gt;In fact, all it takes is a few command lines to have your &lt;code&gt;Aleph.js&lt;/code&gt; app up and running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;deno install --unstable -A -f -n aleph https://deno.land/x/aleph@v0.2.28/cli.ts
aleph init my-app
cd my-app &amp;amp;&amp;amp; aleph dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this respect, &lt;code&gt;Aleph.js&lt;/code&gt; is paving the way for Deno to become beginner-friendly and not just a niche runtime for early adopters.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#alephjs-is-essentially-just-nextjs-built-on-deno"&gt;
  &lt;/a&gt;
  Aleph.js is essentially just Next.js built on Deno
&lt;/h3&gt;

&lt;p&gt;In order to make React more SEO-friendly, &lt;code&gt;Next.js&lt;/code&gt; was released in 2016 as a React framework that enables server-side rendering(SSR) and static-site generation(SSG). Both of these tools allow pages to be rendered relatively quickly for search engine crawlers meaning your page will rank higher.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Aleph.js&lt;/code&gt; seems to be open that they are essentially Next.JS for Deno. They say themselves:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Aleph.js&lt;/code&gt; (or Aleph or א, /ˈɑːlɛf/) is a React Framework for Deno, inspired by &lt;code&gt;Next.js&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just like Next.js, Aleph provides SSR and SSG out of the box in order to allow developers to create SEO-friendly apps. In addition, Aleph provides some other built-in features that don’t come out of the box in Next.js, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hot Reloading (Using React Fast Refresh)&lt;/li&gt;
&lt;li&gt;ESM Import Syntax (No need for webpack)&lt;/li&gt;
&lt;li&gt;Typescript-Ready&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Obviously, the main differentiating factor between &lt;code&gt;Next.js&lt;/code&gt; and &lt;code&gt;Aleph.js&lt;/code&gt; is Deno. Since Aleph is built on Deno, you have access to all the benefits of the runtime, however, you may not be able to easily use every NPM package that you want. While many packages are compatible(See here how to use them in Aleph), &lt;strong&gt;many packages rely on Node-specific functions, meaning they will not work in &lt;code&gt;Aleph.js&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-whats-our-verdict"&gt;
  &lt;/a&gt;
  So, What’s Our Verdict?
&lt;/h3&gt;

&lt;p&gt;So, what’s our verdict? Well, &lt;code&gt;Aleph.js&lt;/code&gt; seems like a great framework, but you shouldn’t quite bet the farm on it yet. As with any early adoption, there’s going to be a lack of documentation and compatible libraries that is going to make it hard for you to do everything you need to do. Most of these issues we think you’ll encounter however are not because &lt;code&gt;Aleph.js&lt;/code&gt; is new, but because Deno is. &lt;strong&gt;If Deno succeeds in becoming an industry standard, however, then &lt;code&gt;Aleph.js&lt;/code&gt; could be the next big React framework.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In other words, we’re all for giving &lt;code&gt;Aleph.js&lt;/code&gt; a try for your next pet project. If you’re deciding on your company's tech stack, however, Deno probably isn’t where it needs to be yet in order to suit all your needs.&lt;/p&gt;

</description>
      <category>react</category>
      <category>alephjs</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>Why do I think Haskell is a good choice in regards to Software Security?</title>
      <author>Catherine Galkina</author>
      <pubDate>Mon, 31 May 2021 13:46:38 +0000</pubDate>
      <link>https://dev.to/typeable/why-do-i-think-haskell-is-a-good-choice-in-regards-to-software-security-3do</link>
      <guid>https://dev.to/typeable/why-do-i-think-haskell-is-a-good-choice-in-regards-to-software-security-3do</guid>
      <description>&lt;p&gt;Author: Ville Tirronen&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xdctE2sb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.typeable.io/images/security_en.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xdctE2sb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.typeable.io/images/security_en.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Typeable Team appreciates security! We love Haskell, but is Haskell a good choice when secure software is the goal? We would love to say yes, but like most empirical questions about software development, there is simply no hard evidence that Haskell, or any general programming language, is more secure than any other. That is not to say that the &lt;a href="https://dev.to/typeable/how-we-choose-programming-languages-at-typeable-3mnc"&gt;Typeable's language choice&lt;/a&gt; doesn't matter in regards to security, but how it does may need to be elaborated.&lt;/p&gt;

&lt;p&gt;After teaching introductory Software Security for half a decade I can attest that Software Security has no universal theory on which to rely.  Security is most often taught by enumerating different security issues, mitigations and security models and hoping that students can build from them to gain general understanding. Even of those theoretical works that exist, relatively few of try to build a link between programming language and security aspects.&lt;/p&gt;

&lt;p&gt;In this post, I'll sketch my favourite perspective for linking the choice of programming language to security. This is viewing the different vulnerabilities on the scale between the "domain" and "incidental" vulnerabilities:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   Purely technical               Purely domain specific
    vulnerability                    vulnerability
        ↓                                  ↓
        ┠───────────╂───────────╂──────────┨
             ↑            ↑          ↑
        Tools should  Tools can  You have to
            fix         help       think
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The axis above represents the provenance of different software vulnerabilities.  On the far right, we have purely domain specific errors, that is, those that are completely independent of the tools used. One example of such domain error is the "security questions" many early 2000s web services had for password recovery. Often the questions were like "what is your mothers maiden name?". Then, around 2009-10 a thing called social media appeared and suddenly everyone's "mothers maiden name" becomes public information. It doesn't matter what technology you use to implement such "security questions" scheme. It is broken regardless.&lt;/p&gt;

&lt;p&gt;On the far left of our scale, we have errors that have a purely technical cause.  They are completely independent of the problem domain. One good example of such a problem is the notorious buffer overflows.  It does not matter at all what you're storing in the buffer -- if the buffer overflows it allows an attacker to mess with the supporting structures of your program at will. Here, you can avoid buffer overflows, at least in theory, by using a toolchain that has no unchecked buffer writes.&lt;/p&gt;

&lt;p&gt;Between the far ends of the scale, we have a part where the vulnerability is not entirely technical, but it is neither completely a domain matter either. One stereotypical example of such vulnerability is typically found in services that allow file uploads.&lt;/p&gt;

&lt;p&gt;In such services, it is often tempting to write the user-supplied file directly on the server filesystem. However, with which filename? Using the user-supplied filename directly is a recipe for disaster since it could be something like &lt;code&gt;../../../etc/nginx/nginx.conf&lt;/code&gt;, &lt;code&gt;../../../etc/passwd/&lt;/code&gt; or any number of files the server can touch, but really shouldn't.&lt;/p&gt;

&lt;p&gt;This hazard is a mixture of the technical and the domain and while it is unlikely that any toolchain would prevent this "out of the box", it is easy to see how some tools might help to control such problematic behaviour better than others.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-the-scale"&gt;
  &lt;/a&gt;
  Applying the scale
&lt;/h2&gt;

&lt;p&gt;The usefulness of this scale is in appraising your toolings, such as programming language and frameworks. How many of the purely technical issues does your tooling handle all by itself? How far along the scale does it offer you extra leverage against errors that lead to vulnerabilities?&lt;/p&gt;

&lt;p&gt;Modern tooling should ideally prevent the purest technical vulnerabilities almost entirely. For example, most modern languages, like Haskell, C# and Java are all mostly memory safe and all of them will largely prevent buffer overflows, double frees and other technical problems. But, good tooling can be leveraged further. For example one can easily imagine a system that has technical means of separating absolute and relative file paths, making it easier to control for path traversal attacks, such as user uploading a file over some critical system configuration file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#haskell-on-the-low-end-of-the-scale"&gt;
  &lt;/a&gt;
  Haskell, on the low end of the scale
&lt;/h2&gt;

&lt;p&gt;Haskell, like most modern languages, performs well with low-level, technical vulnerabilities. For one, Haskell is memory safe which takes one huge expanse of potential vulnerabilities out of reach of potential attackers -- arrays and buffer overflows are even more so. Secondly, Haskell is statically dispatched, which also guards against entire families of errors, such as PHP's famous "type juggling":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// From imaginary CSRF token protection:&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$tokenHash&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$hashFromInternet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'tokenHash'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"200 OK - Request accepted"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;PHP_EOL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"403 DENIED - Bad CSRF token"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;PHP_EOL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See the issue above? Most dynamic languages, like PHP, decide the "type" of JSON record during run time and often based on the structure of input data.  Also, in object-oriented programming, the "type" is used to select behaviour through dynamic dispatch, effectively allowing the attacker to choose which code is executed. Compoundingly, PHP's equality via &lt;code&gt;==&lt;/code&gt; is dependent on the input types and the attacker can bypass the security entirely in the above example.&lt;/p&gt;

&lt;p&gt;A similar issue has occurred with Java (and other languages, see &lt;a href="https://frohoff.github.io/appseccali-marshalling-pickles/"&gt;https://frohoff.github.io/appseccali-marshalling-pickles/&lt;/a&gt;). Java provided a suberbly user-friendly way of serializing any object to disk and recovering it back in its original form. The only unfortunate problem was that there was no way to say which object you are expecting! This allows attackers to send you objects that, upon deserialization in your program, become nasties that wreak havoc and steal data.&lt;/p&gt;

&lt;p&gt;This is not to say that you &lt;em&gt;can't&lt;/em&gt; have secure code in PHP or that you &lt;em&gt;can't&lt;/em&gt; have errors like this in Haskell, but that Haskell is not naturally inclined towards these vulnerabilities. To put the above example into Haskell code, it would read something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;csrfToken&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;doSomething&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Session&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Handler&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;doSomething&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;csrfToken&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;csrfToken&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;throwM&lt;/span&gt; &lt;span class="kt"&gt;BadCsrfTokenError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, type juggling is taken care of by routine practice of giving interface types a concrete, known even before the program is executed, &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#haskell-middle-of-the-scale"&gt;
  &lt;/a&gt;
  Haskell, middle of the scale
&lt;/h2&gt;

&lt;p&gt;When considering the middle of the "technical" vs. "domain" scale, Haskell has features that make it, in my mind, quite an advantageous choice.&lt;/p&gt;

&lt;p&gt;Foremost, Haskell can model data more accurately than languages like C, Javascript or even Java. This is mostly due to its convenient syntax and sum types.  Accurate modelling of data is relevant to security since most domain code is a model of some real-world phenomenon, and the less accurate it is, the more play it gives to attackers.&lt;/p&gt;

&lt;p&gt;Having accurate modelling tools helps programmers to navigate around domain blunders. For example, consider the simple ability to easily express with one line that, say, a social security number is either unknown, redacted or 'this value here':&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;SSN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Unknown&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Redacted&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;SSN&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, contrast this to modelling the same idea using the string values &lt;code&gt;""&lt;/code&gt;, &lt;code&gt;"&amp;lt;REDACTED&amp;gt;"&lt;/code&gt; and &lt;code&gt;"191091C211A"&lt;/code&gt;. What happens if the user types "&amp;lt;REDACTED&amp;gt;" in SSN input box? Could it cause an issue later on? With Haskell, you don't need to worry about such.&lt;/p&gt;

&lt;p&gt;Similar techniques can help programmers improve security everywhere. To continue the previous example of safely storing user files on a server, if your user upload storing function starts with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;storeFileUpload&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Path&lt;/span&gt; &lt;span class="kt"&gt;Abs&lt;/span&gt; &lt;span class="kt"&gt;File&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;ByteString&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;storeFileUpload&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you are much less likely to create a situation where users can overwrite your system files: this code will not compile unless it is practically impossible that the filepath does not contain a path traversal attack. Similarly, if, after a user has failed to log in, the user data simply is not available to the program, or if you simply &lt;em&gt;can not&lt;/em&gt; embed unchecked user input to HTML pages, you're less likely to screw up.&lt;/p&gt;

&lt;p&gt;I'm not claiming that other languages can't be used to write secure code nor even that Haskell automatically makes your code more secure. Only that Haskell has very convenient tools that you can use to build up your security.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#haskell-and-domain-errors"&gt;
  &lt;/a&gt;
  Haskell and domain errors
&lt;/h1&gt;

&lt;p&gt;Earlier, I defined pure domain errors as those errors that are indifferent regarding the tools used. This is not entirely true. People don't choose their tools randomly and communities of similar-minded people often form around different tools. And these communities may have a different outlook on security.&lt;/p&gt;

&lt;p&gt;The thing that speaks in Haskell's preference here is the fact that you can't get good at Haskell by accident. Haskell is presently enough rare technology that not all Universities even teach it and almost no curriculum is completely taught with it. That is, if someone is good at Haskell, it is not an unreasonable guess that they would also have skill at working with formal systems or interest in computer science topics.  Though this does not ensure that Haskell programmers know anything about security it does hint that they might be fast on the uptake when it becomes necessary.&lt;/p&gt;

&lt;p&gt;But, all this is guesswork. Haskell community has been small enough not to be targetted by attackers and Haskell people, in general, haven't yet been burned by security issues in the same way as Javascript or Python developers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h1&gt;

&lt;p&gt;Haskell isn't certainly without flaws and I'm not claiming that other languages cannot share similar advantages. And in some cases, such as timing and other side-channel attacks, other tools may even offer a better security profile.  Also, some language communities are more focused on security than Haskell. But personally, I find that among the current viable selection of general-purpose programming languages, Haskell offers a very good package for writing secure software.&lt;/p&gt;

</description>
      <category>haskell</category>
      <category>security</category>
      <category>programming</category>
      <category>functional</category>
    </item>
    <item>
      <title>DNS prefetch:  A Web Performance Trick</title>
      <author>Alpha Olomi</author>
      <pubDate>Mon, 31 May 2021 13:44:54 +0000</pubDate>
      <link>https://dev.to/alphaolomi/dns-prefetch-a-web-performance-trick-k5i</link>
      <guid>https://dev.to/alphaolomi/dns-prefetch-a-web-performance-trick-k5i</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Web performance is the objective measurements and the perceived user experience of load time and runtime. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;DNS-prefetch&lt;/code&gt; is an attempt to resolve domain names before resources get requested. This could be a file loaded later or link target a user tries to follow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-dnsprefetch"&gt;
  &lt;/a&gt;
  Why use dns-prefetch?
&lt;/h2&gt;

&lt;p&gt;When a browser requests a resource from a (third party) server, that cross-origin’s domain name must be resolved to an IP address before the browser can issue the request. This process is known as DNS resolution. While DNS caching can help to reduce this latency, DNS resolution can add significant latency to requests. For websites that open connections to many third parties, this latency can significantly reduce loading performance.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dns-prefetch&lt;/code&gt; helps developers mask DNS resolution latency. The HTML  element offers this functionality by way of a rel attribute value of dns-prefetch. The cross-origin domain is then specified in the href attribute:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"dns-prefetch"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"//example.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"dns-prefetch"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.gstatic.com/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- and all other head elements --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- your page content --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should place &lt;code&gt;dns-prefetch&lt;/code&gt; hints in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; any time your site references resources on cross-origin domains, but there are some things to keep in mind.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-best-practices"&gt;
  &lt;/a&gt;
  How to use: Best practices
&lt;/h2&gt;

&lt;p&gt;There are 3 main things to keep in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;dns-prefetch&lt;/code&gt; is only effective for DNS lookups on cross-origin domains, so avoid using it to point to your site or domain. This is because the IP behind your site's domain will have already been resolved by the time the browser sees the hint.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It's also possible to specify &lt;code&gt;dns-prefetch&lt;/code&gt; (and other resources hints) as an HTTP header by using the HTTP Link field&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Link: &amp;lt;https://fonts.gstatic.com/&amp;gt;; rel=dns-prefetch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Consider pairing &lt;code&gt;dns-prefetch&lt;/code&gt; with the &lt;code&gt;preconnect&lt;/code&gt; hint. While &lt;code&gt;dns-prefetch&lt;/code&gt; only performs a DNS lookup, &lt;code&gt;preconnect&lt;/code&gt; establishes a connection to a server. This process includes DNS resolution, as well as establishing the TCP connection, and performing the TLS handshake if a site is served over HTTPS. Combining the two provides an opportunity to further reduce the perceived latency of cross-origin requests. You can safely use them together like so:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preconnect"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.gstatic.com/"&lt;/span&gt; &lt;span class="na"&gt;crossorigin&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"dns-prefetch"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.gstatic.com/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If a page needs to make connections to many third-party domains, preconnecting them all is counter productive. The &lt;code&gt;preconnect&lt;/code&gt; hint is best used for only the most critical connections. For the others, just use&lt;code&gt;&amp;lt;link rel="dns-prefetch"&amp;gt;&lt;/code&gt; to save time on the first step, the DNS lookup.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#see-also"&gt;
  &lt;/a&gt;
  See also
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel"&gt;HTML attribute: rel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/prefetching-preloading-prebrowsing/"&gt;Prefetching, Preloading and Pre-browsing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Link"&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Try to avoid comments (most of the time)</title>
      <author>Davor Tvorić</author>
      <pubDate>Mon, 31 May 2021 13:36:50 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/try-to-avoid-comments-most-of-the-time-2f6a</link>
      <guid>https://dev.to/bornfightcompany/try-to-avoid-comments-most-of-the-time-2f6a</guid>
      <description>&lt;p&gt;Writing down a comment when you're coding might seem like you're going to help yourself or someone that might stumble upon your code, but, in reality, it might cause confusion and make your code less readable. If you're just starting out with coding, you sometimes feel that you need to comment every line to get your point across. That's probably not the case most of the time and you're probably just adding unnecessary noise to your code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-explanation"&gt;
  &lt;/a&gt;
  Code explanation
&lt;/h2&gt;

&lt;p&gt;If possible, try to use the time you would spend on writing a comment on coming up with better naming or clearer code structures. Take a look at this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// check if employee can receive overtime pay
if (employee.isFullTime &amp;amp;&amp;amp; employee.workHours &amp;gt; 160)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of relying on the comment to explain the condition, it would be much wiser to create a function with a clear name that does this check&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const isEmployeeEligibleForOvertimePay = (employee) =&amp;gt; {
    return employee.isFullTime &amp;amp;&amp;amp; employee.workHours &amp;gt; 160;
}

if (isEmployeeEligibleForOvertimePay(employee))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's now possible to reuse this small piece of code, as well as not have any doubts what this condition does. This might be a much larger condition, but a name might be sufficient enough to be aware what it's doing.&lt;/p&gt;

&lt;p&gt;Of course, there is a case where it's very difficult to come up with a meaningful name or it's just not possible. In that case a comment would be helpful, but you should have that as a last resort.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outdated-comments"&gt;
  &lt;/a&gt;
  Outdated comments
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function insertData(data) {
    store.user.insert(data); // updates the current user data
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you've been working on some older projects, something like this might've popped up. You can see that some data is being inserted, but the comment says otherwise. The comment might be right, although someone could have forgotten to delete it. This causes you to doubt the code and you're forced to check what's really going on in the insert method.&lt;/p&gt;

&lt;p&gt;To prevent this, it's probably better to rename the functions to better represent their functionality and delete the unnecessary comment.&lt;br&gt;
This is something that might happen with any comment. If someone forgets to update the comment after a couple of changes, another person can't be sure what's right or not. It's not a critical mistake and nothing will break because of this, but you might spend a couple of minutes/hours until you find out the truth.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redundant-comments"&gt;
  &lt;/a&gt;
  Redundant comments
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// checks whether the student lives in a dorm
if (student.livesInDorm)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think we can all agree that these kinds of comments are totally unnecessary. You might feel better that you've written a couple lines of comments, but this doesn't help anyone when it's obvious what's happening&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#separators"&gt;
  &lt;/a&gt;
  Separators
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ---------------
// VARIABLES
// ---------------
$blue: #1257ab;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This could be debated, but I think that the file structure should mandate where something belongs. By having these kinds of comments, you're just breaking up the flow of the code and not adding much value. If this is something that occurs a lot, having a defined standard with vertical formatting might have a much more appealing look.&lt;/p&gt;

&lt;p&gt;Some people are more of a visual type, so separators can come in handy to visualize the various parts of a file, but I would still stay away from them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#commented-code"&gt;
  &lt;/a&gt;
  Commented code
&lt;/h2&gt;

&lt;p&gt;Nowadays, there's probably very little reason to keep commented out code in your codebase, especially if you're using a version control system. Anyone that will come upon the commented code won't be bothered to delete it because they haven't written in in the first place.&lt;br&gt;
That will just perpetuate the old code into newer versions until it won't even work if you comment it out.&lt;/p&gt;

&lt;p&gt;Do yourself a favour and delete the commented code. If you'll really need it, you can get it from your VCS' history.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Having comments in your codebase is something that requires constant attention. When you update a function, you must make sure you've updated its comment as well. That's why most of the comments you write go stale and just confuse you next time you bump into them.&lt;br&gt;
By spending more time on naming your variables and functions, extracting a piece of code and adding vertical or horizontal formatting, you might even avoid the need for comments.&lt;/p&gt;

&lt;p&gt;Even though I've shown the types of comments you should avoid, there are cases where it's a good idea to leave a comment (but not that many!). &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;leaving a warning on a complicated feature that can't be managed with proper names is always a good idea&lt;/li&gt;
&lt;li&gt;documentation/legal comments in public code&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>engineeringmonday</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How KFC employs thousands of candidates with good conversion</title>
      <author>Avicus Delacroix</author>
      <pubDate>Mon, 31 May 2021 13:27:43 +0000</pubDate>
      <link>https://dev.to/followmyutopia/how-kfc-employs-thousands-of-candidates-with-good-conversion-3on</link>
      <guid>https://dev.to/followmyutopia/how-kfc-employs-thousands-of-candidates-with-good-conversion-3on</guid>
      <description>&lt;p&gt;Hi, this is Avi from Voximplant. Last time I showed you an example of &lt;a href="https://dev.to/followmyutopia/diy-clubhouse-for-ios-android-and-even-unity-1na1"&gt;How to create a DIY cross-platform Clubhouse&lt;/a&gt;, and today I have something more interesting to show to you — a real case of the employment system in KFC restaurants.&lt;/p&gt;

&lt;p&gt;In Russia alone, KFC opens more than 100 restaurants every year (imagine worldwide numbers), and all these restaurants need staff. Working in fast-food restaurants is popular among young people; many seek this kind of work temporarily. And all of them send their CVs to KFC.&lt;/p&gt;

&lt;p&gt;Because of this KFC gets more than 15,000 applications every month and needs to process them. &lt;em&gt;But imagine how many HR employees they would need to call all the applicants?&lt;/em&gt; Factor in that most applicants are underage or that they don’t need the job anymore and  it looks like a waste of time and money spent on HR.&lt;/p&gt;

&lt;p&gt;This is why KFC asked &lt;a href="https://voximplant.com/?utm_source=devto&amp;amp;utm_medium=techarticle&amp;amp;utm_campaign=vox_kfc"&gt;&lt;strong&gt;Voximplant&lt;/strong&gt;&lt;/a&gt; for help. And the solution was obvious: we created a robot that called all the applicants and asked them a simple question, "Do you want to work for KFC?". If they say yes, the robot asks for some additional information, about their age/documents/desired work hours and more, and passes the information to an HR manager who is ready to employ them.&lt;/p&gt;

&lt;p&gt;The results were astounding. The robot processes the applications 10 times faster than a human, filters 37% of candidates as irrelevant, and HR managers increase their conversion by 11%.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Today I want to talk to you about how to create such a robot for your own purposes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Actually, it's not as hard as it may seem. Let's create a simple robot like the one KFC uses, right now.&lt;/p&gt;

&lt;p&gt;The task will be simple: call all the candidates from a call list, greet them, ask them if they want to work for us, recognize their answer, and connect to a call-center specialist depending on their answer.&lt;/p&gt;

&lt;p&gt;Let's &lt;a href="https://manage.voximplant.com/auth?utm_source=devto&amp;amp;utm_medium=techarticle&amp;amp;utm_campaign=vox_kfc"&gt;log into the Voximplant platform&lt;/a&gt;, &lt;a href="https://voximplant.com/docs/introduction/introduction_to_voximplant/basic_concepts/applications?utm_source=devto&amp;amp;utm_medium=techarticle&amp;amp;utm_campaign=vox_kfc"&gt;create an application&lt;/a&gt;, and &lt;a href="https://voximplant.com/docs/introduction/introduction_to_voximplant/basic_concepts/programmable_voice_and_video/scenarios?utm_source=devto&amp;amp;utm_medium=techarticle&amp;amp;utm_campaign=vox_kfc"&gt;start with a scenario&lt;/a&gt;. First, we need to &lt;a href="https://voximplant.com/docs/references/voxengine/asrhttps://voximplant.com/docs/introduction/introduction_to_voximplant/basic_concepts/programmable_voice_and_video/scenarios?utm_source=devto&amp;amp;utm_medium=techarticle&amp;amp;utm_campaign=vox_kfc"&gt;import speech recognition&lt;/a&gt; and &lt;a href="https://voximplant.com/docs/references/voxengine/player?utm_source=devto&amp;amp;utm_medium=techarticle&amp;amp;utm_campaign=vox_kfc"&gt;speech synthesis modules&lt;/a&gt;, declare necessary constants and start writing our logic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Modules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ASR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Modules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callerid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;7xxxxxxxxxx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;7xxxxxxxxxx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;callCandidate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callOperator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;asr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can pass all the necessary input to the scenario in the &lt;a href="https://voximplant.com/docs/references/voxengine/voxengine/customdata?utm_source=devto&amp;amp;utm_medium=techarticle&amp;amp;utm_campaign=vox_kfc"&gt;VoxEngine.customData&lt;/a&gt; field. For our example, let's use the following JSON format: { "phone" : "7xxxxxxxxxx", "name": "John" }.&lt;/p&gt;

&lt;p&gt;At scenario start, we parse the JSON from &lt;a href=""&gt;customData&lt;/a&gt; and &lt;a href="https://voximplant.com/docs/references/voxengine/voxengine/callpstnutm_source=devto&amp;amp;utm_medium=techarticle&amp;amp;utm_campaign=vox_kfc"&gt;initiate a call&lt;/a&gt; from &lt;code&gt;callerid&lt;/code&gt; to &lt;code&gt;data.phone&lt;/code&gt; and connect the event handlers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;AppEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Started&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Start a call from callerid to data.phone&lt;/span&gt;
 &lt;span class="nx"&gt;callCandidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;callPSTN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callerid&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="c1"&gt;// Add event listeners&lt;/span&gt;
 &lt;span class="nx"&gt;callCandidate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;CallEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Connected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callCandidate_connected_handler&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nx"&gt;callCandidate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;CallEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Disconnected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callCandidate_disconnected_handler&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nx"&gt;callCandidate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;CallEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Failed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callCandidate_failed_handler&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When our candidate answers the call, we create a Player to synthesize speech, set some text (use your imagination), and play it to our candidate. We can integrate 3rd-party voices, so let's use one from Yandex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;callCandidate_connected_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// Create a text-to-speech player&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`Здравствуйте &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. Хотите работать?`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VoiceList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Yandex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Neural&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ru_RU_alena&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTTSPlayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;language&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="c1"&gt;// Start playback and connect an event listener after&lt;/span&gt;
 &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMediaTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;callCandidate&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;PlayerEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PlaybackFinished&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;playbackFinishedHandler&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the playback finishes, we need to process the candidate's answer. For our example, let's integrate a voice recognition profile from Tinkoff:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;playbackFinishedHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// Create an ASR for speech recognition&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;asrProfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ASRProfileList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Tinkoff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ru_RU&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nx"&gt;asr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createASR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;asrProfile&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="c1"&gt;// Wait for the human’s response and add an event listener&lt;/span&gt;
 &lt;span class="c1"&gt;// which will trigger after speech recognition&lt;/span&gt;
 &lt;span class="nx"&gt;callCandidate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMediaTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;asr&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nx"&gt;asr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;ASREvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;asrResultHandler&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the candidate's answer is recorded and transcribed to text. We can process the result as we need. As a simple way, if the candidate's answer has the keyword "no" in it, let's just record it to our data object and hang up (you may want another logic).&lt;/p&gt;

&lt;p&gt;If the candidate's answer has the word "yes", let's also record this to our data object's field and connect it to an operator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;asrResultHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// Disable event listener&lt;/span&gt;
 &lt;span class="nx"&gt;asr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;ASREvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="c1"&gt;// The answer is written into text field&lt;/span&gt;
 &lt;span class="c1"&gt;// we can proceed the result as we want&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="c1"&gt;// Update the data object&lt;/span&gt;
   &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wantsToWork&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="c1"&gt;// Hang up ( Triggers the callCandidate_disconnected_handler )&lt;/span&gt;
   &lt;span class="nx"&gt;callCandidate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hangup&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wantsToWork&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="c1"&gt;// Call the operator function&lt;/span&gt;
   &lt;span class="nx"&gt;startOperatorCall&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;callCandidate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hangup&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;startOperatorCall&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callOperator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;callPSTN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callerid&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="c1"&gt;// Unite two calls into one&lt;/span&gt;
 &lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMediaBetween&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;callCandidate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callOperator&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="c1"&gt;// Connect event handler&lt;/span&gt;
 &lt;span class="nx"&gt;callOperator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;CallEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Connected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Подключились к оператору&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
 &lt;span class="nx"&gt;callOperator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;CallEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Disconnected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;callCandidate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hangup&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
 &lt;span class="nx"&gt;callOperator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;CallEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Failed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;callCandidate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hangup&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All that we need to process now is the session's termination. For example, if the call attempt was successful, we send the result object (with candidates' answers) via an HTTP request, and terminate our session. If the call attempt was not successful, just terminate the session.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// The call was successful&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;callCandidate_disconnected_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://servicename&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="c1"&gt;// Send the data object via a POST http request to specific url&lt;/span&gt;
 &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;httpRequestAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;postData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="c1"&gt;// Terminate session&lt;/span&gt;
 &lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// The call was not successful&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;callCandidate_failed_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voila. Now we have a primitive robot who accepts a call list, calls every candidate, and asks them if they want to work for us. Then it writes their answer in text form to the database and connects to an HR manager if the candidate wants to work.&lt;/p&gt;

&lt;p&gt;This was a simple example. Next you can extend your robot's logic, create complex dialogs and algorithms, connect your candidates to different departments depending on their answer, or collect any additional information you want. It has no limits, only your imagination!&lt;/p&gt;

&lt;p&gt;I hope this explanation was useful, and I hope you all find a great team and develop a productive business!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>robots</category>
      <category>recruiting</category>
    </item>
    <item>
      <title>Redis Streams in Action - Part 2 (Rust app to consume from the Twitter Streaming API)</title>
      <author>Abhishek Gupta</author>
      <pubDate>Mon, 31 May 2021 13:18:28 +0000</pubDate>
      <link>https://dev.to/azure/redis-streams-in-action-part-2-rust-app-to-consume-from-the-twitter-streaming-api-1ji4</link>
      <guid>https://dev.to/azure/redis-streams-in-action-part-2-rust-app-to-consume-from-the-twitter-streaming-api-1ji4</guid>
      <description>&lt;p&gt;Welcome to this series of blog posts which covers &lt;a href="https://redis.io/topics/streams-intro"&gt;Redis Streams&lt;/a&gt; with the help of a practical example. We will use a sample application to make Twitter data available for search and query in real-time. &lt;a href="https://redisearch.io/"&gt;RediSearch&lt;/a&gt; and &lt;a href="https://redis.io/topics/streams-intro"&gt;Redis Streams&lt;/a&gt; serve as the backbone of this solution that consists of several co-operating components, each of which will we covered in a dedicated blog post. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The code is available in this GitHub repo - &lt;a href="https://github.com/abhirockzz/redis-streams-in-action"&gt;https://github.com/abhirockzz/redis-streams-in-action&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this part, we look at the service which interacts with the Twitter Streaming API to consume tweets and move them on to the next part in the processing pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HKpA8IS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p77ceg4yz8z0ybag3jj3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HKpA8IS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p77ceg4yz8z0ybag3jj3.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our end goal is to be able to process tweets and make them available for search and queries via &lt;code&gt;RediSearch&lt;/code&gt;. One could write a "do it all" service to consume tweets and directly store them in &lt;code&gt;RediSearch&lt;/code&gt;. But, in order to scale to handle the volume of tweets, we need a service to act as a buffer and decouple our producer (the application we will focus in this blog) and consumer (covered in next blog). &lt;/p&gt;

&lt;p&gt;This is exactly what our first component facilitates - it consumes streaming Twitter data and forwards it to Redis Streams. We will deploy it to &lt;a href="https://docs.microsoft.com/azure/container-instances/container-instances-overview?WT.mc_id=data-17927-abhishgu"&gt;Azure Container Instances&lt;/a&gt;, validate it's functionality and also walk-through how it works along with the code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As you will see in the later parts of this series, this also provides a foundation for scale-out architecture.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All in all, this blog post is short and simple! It lays down the ground work for other parts of the solution which will be covered in subsequent posts. Please don't worry about the fact that the service is written in Rust (in case you don't know it already). The logic can be easily ported over to your favorite programming language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h2&gt;

&lt;p&gt;Start by getting a &lt;a href="https://azure.microsoft.com/free/?WT.mc_id=data-17927-abhishgu"&gt;free Azure account&lt;/a&gt; if you don't have one already and &lt;a href="https://docs.microsoft.com/cli/azure/install-azure-cli?WT.mc_id=data-17927-abhishgu"&gt;install the Azure CLI&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;We will be deploying the tweets consumer application to &lt;a href="https://docs.microsoft.com/azure/container-instances/container-instances-overview?WT.mc_id=data-17927-abhishgu"&gt;Azure Container Instances&lt;/a&gt; using regular Docker CLI commands. This capability is enabled by &lt;a href="https://docs.docker.com/engine/context/aci-integration/"&gt;integration between Docker and Azure&lt;/a&gt;. Just ensure that you have Docker Desktop version 2.3.0.5 or later, for &lt;a href="https://desktop.docker.com/win/edge/Docker%20Desktop%20Installer.exe"&gt;Windows&lt;/a&gt;, &lt;a href="https://desktop.docker.com/mac/edge/Docker.dmg"&gt;macOS&lt;/a&gt;, or install the &lt;a href="https://docs.docker.com/engine/context/aci-integration/#install-the-docker-aci-integration-cli-on-linux"&gt;Docker ACI Integration CLI for Linux&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To use the Twitter Streaming API, you will also need a Twitter developer account. If you don't have one already, please &lt;a href="https://developer.twitter.com/en/apply-for-access"&gt;follow these instructions&lt;/a&gt; on how to set it up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-the-app-to-azure-container-instances"&gt;
  &lt;/a&gt;
  Deploy the app to Azure Container Instances
&lt;/h2&gt;

&lt;p&gt;To start off, setup the Enterprise tier of Azure Cache for Redis, &lt;a href="https://docs.microsoft.com/azure/azure-cache-for-redis/quickstart-create-redis-enterprise?WT.mc_id=data-17927-abhishgu"&gt;using this quickstart&lt;/a&gt;.Once you finish this step, ensure that you save the following information: the Redis host name and Access key&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6VLQQS-Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gq0ogkhc9hr9co8e04zh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6VLQQS-Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gq0ogkhc9hr9co8e04zh.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The tweets consumer application is available as a &lt;a href="https://hub.docker.com/r/abhirockzz/tweets-redis-streams-producer-rust"&gt;Docker container&lt;/a&gt; - the easiest way is to simply re-use it. If you wish to build you own image, please use the &lt;a href="https://github.com/abhirockzz/redis-streams-in-action/blob/master/tweets-consumer/Dockerfile"&gt;&lt;code&gt;Dockerfile&lt;/code&gt; available in the GitHub repo&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;You will now see how convenient it is to deploy it to Azure Container Instances, that allows you to run Docker containers on-demand in a managed, serverless Azure environment. &lt;/p&gt;

&lt;p&gt;First, &lt;a href="https://docs.microsoft.com/azure/container-instances/quickstart-docker-cli?WT.mc_id=data-17927-abhishgu#create-azure-context"&gt;create an Azure context&lt;/a&gt; to associate Docker with an Azure subscription and resource group so you can create and manage container instances.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker login azure
docker context create aci aci-context
docker context use aci-context
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set the environment variables - make sure to update Redis host and credentials as per your account:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;REDIS_HOSTNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;redis host port e.g. my-redis-host:10000&amp;gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;IS_TLS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true
export &lt;/span&gt;&lt;span class="nv"&gt;REDIS_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;redis access key &lt;span class="o"&gt;(&lt;/span&gt;password&lt;span class="o"&gt;)&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;# don't forget your twitter api credentials&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;TWITTER_API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;api key&amp;gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;TWITTER_API_KEY_SECRET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;api key secret&amp;gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;TWITTER_ACCESS_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;access token&amp;gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;TWITTER_ACCESS_TOKEN_SECRET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;access token secret&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just execute the good old &lt;code&gt;docker run&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; redis-streams-producer &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;REDIS_HOSTNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$REDIS_HOSTNAME&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;IS_TLS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$IS_TLS&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;REDIS_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$REDIS_PASSWORD&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;TWITTER_API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$TWITTER_API_KEY&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;TWITTER_API_KEY_SECRET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$TWITTER_API_KEY_SECRET&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;TWITTER_ACCESS_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$TWITTER_ACCESS_TOKEN&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;TWITTER_ACCESS_TOKEN_SECRET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$TWITTER_ACCESS_TOKEN_SECRET&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
abhirockzz/tweets-redis-streams-producer-rust
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A container should now be created in Azure and you should see an output similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;+] Running 2/2
 ⠿ Group redis-streams-producer  Created                                                                             4.2s
 ⠿ redis-streams-producer        Created                                                                            15.8s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Validate this using the Azure portal:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--THfqRVhh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8a4is8xpv4i6u7w04n2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--THfqRVhh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8a4is8xpv4i6u7w04n2.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To check the container logs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker logs redis-streams-producer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#so-does-it-work"&gt;
  &lt;/a&gt;
  So, does it work?
&lt;/h2&gt;

&lt;p&gt;Well, it should! To confirm, connect to the Redis instance using &lt;code&gt;redis-cli&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;redis-cli &lt;span class="nt"&gt;-h&lt;/span&gt; &amp;lt;redis cache host&amp;gt; &lt;span class="nt"&gt;-p&lt;/span&gt; &amp;lt;redis port&amp;gt; &lt;span class="nt"&gt;-a&lt;/span&gt; &amp;lt;access key&amp;gt; &lt;span class="nt"&gt;--tls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... and run the &lt;a href="https://redis.io/commands/xrange"&gt;XRANGE&lt;/a&gt; command to introspect Redis Streams:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;XRANGE tweets_stream - + COUNT 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will return the first five tweets. You can change the &lt;code&gt;COUNT&lt;/code&gt; as per your requirements.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;-&lt;/code&gt; and &lt;code&gt;+&lt;/code&gt; special IDs mean respectively the minimum ID possible and the maximum ID possible inside the stream&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's all you need to confirm that our application is able to consume tweets and add them to Redis Streams. As mentioned before, the rest of the components in our solution will build on top of this foundation.&lt;/p&gt;

&lt;p&gt;You can either pause the app for now or delete it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#to pause&lt;/span&gt;
docker stop redis-streams-producer

&lt;span class="c"&gt;#to delete&lt;/span&gt;
docker &lt;span class="nb"&gt;rm &lt;/span&gt;redis-streams-producer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that you've seen the application in action, let's quickly walk through "how" things work. If you're interested in exploring some Rust code, you will find it useful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-walk-through"&gt;
  &lt;/a&gt;
  Code walk through
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;You can &lt;a href="https://github.com/abhirockzz/redis-streams-in-action/tree/master/tweets-consumer/src"&gt;refer to the code here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The app uses the following libraries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Rust library for accessing the &lt;a href="https://github.com/tesaguri/twitter-stream-rs"&gt;Twitter Streaming API&lt;/a&gt; (uses &lt;a href="https://github.com/tokio-rs/tokio"&gt;tokio&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mitsuhiko/redis-rs"&gt;redis-rs&lt;/a&gt;, a Rust library for Redis with both high and low-level APIs&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/serde-rs/serde"&gt;serde&lt;/a&gt; and &lt;a href="https://github.com/serde-rs/json"&gt;serde json&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It starts by connecting to Redis and Twitter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;connect_redis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Connecting to Redis"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;redis_host_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="nn"&gt;env&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"REDIS_HOSTNAME"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"missing environment variable REDIS_HOSTNAME"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;redis_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;env&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"REDIS_PASSWORD"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap_or_default&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c"&gt;//if Redis server needs secure connection&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;uri_scheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="nn"&gt;env&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"IS_TLS"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"rediss"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nf"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"redis"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;redis_conn_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;format!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}://:{}@{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uri_scheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redis_password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redis_host_name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"redis_conn_url {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redis_conn_url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redis_conn_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"check Redis connection URL"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="nf"&gt;.get_connection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"failed to connect to Redis"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rather than follow a specific set of keywords or a user, we simply connect to the &lt;a href="https://developer.twitter.com/en/docs/twitter-api/tweets/sampled-stream/api-reference/get-tweets-sample-stream"&gt;Twitter sample stream&lt;/a&gt;, which provides access to about 1% of all Tweets in real-time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;twitter_token&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nn"&gt;TwitterStream&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.try_flatten_stream&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.try_for_each&lt;/span&gt;&lt;span class="p"&gt;(|&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;model&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;StreamMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                &lt;span class="nn"&gt;serde_json&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"failed to convert tweet JSON to struct"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
            &lt;span class="nn"&gt;future&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;.await&lt;/span&gt;
        &lt;span class="nf"&gt;.expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"error connecting to Twitter stream!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bulk of the logic is encapsulated in the &lt;code&gt;process&lt;/code&gt; function. Let's go through that bit by bit.&lt;br&gt;
&lt;code&gt;twitter-stream&lt;/code&gt; crate returns each tweet in raw JSON form. It is converted into a &lt;code&gt;model::StreamMessage&lt;/code&gt; which is a struct that's modeled as per the data we intend to extract from the raw tweet.&lt;/p&gt;

&lt;p&gt;We use &lt;code&gt;serde_json&lt;/code&gt; to get this done:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nn"&gt;serde_json&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"json to struct conversion failed"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is then passed to the &lt;code&gt;process&lt;/code&gt; function along with a &lt;a href="https://docs.rs/redis/0.20.0/redis/struct.Connection.html"&gt;redis::Connection&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;connect_redis&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Mutex&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;model&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;StreamMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Mutex&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nn"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;//omitted&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But why wrap it within an &lt;a href="https://doc.rust-lang.org/std/sync/struct.Arc.html"&gt;Arc&lt;/a&gt; of &lt;a href="https://doc.rust-lang.org/std/sync/struct.Mutex.html"&gt;Mutex&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;That's because we need to pass the &lt;code&gt;redis::Connection&lt;/code&gt; to a &lt;code&gt;FnMut&lt;/code&gt; closure. It &lt;a href="https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html"&gt;moves&lt;/a&gt; the connection, thus we need to use a shared reference, which &lt;code&gt;Arc&lt;/code&gt; provides. But &lt;code&gt;Arc&lt;/code&gt; is not enough since we are not allowed to mutate the data. Thus, we use to use a &lt;code&gt;Mutex&lt;/code&gt; to lock the connection object - the Rust compiler can be confident that only one thread can access it at a time (preserve immutability)&lt;/p&gt;

&lt;p&gt;The processing part is relatively simple. It's all about using the &lt;a href="https://docs.rs/redis/0.20.0/redis/trait.Commands.html#method.xadd_map"&gt;xadd_map&lt;/a&gt; function to add the tweet to a Redis Stream. It accepts a &lt;a href="https://doc.rust-lang.org/std/collections/struct.BTreeMap.html"&gt;BTreeMap&lt;/a&gt;, which we create from info in &lt;code&gt;model::StreamMessage&lt;/code&gt; - the tweet text, twitter user (screen) name, ID, location and hashtags (if any). Ultimately, the goal is to be able to index these in &lt;code&gt;RediSearch&lt;/code&gt; and query them flexibly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;stream_entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BTreeMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;BTreeMap&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;stream_entry&lt;/span&gt;&lt;span class="nf"&gt;.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="py"&gt;.id&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
                &lt;span class="n"&gt;stream_entry&lt;/span&gt;&lt;span class="nf"&gt;.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"user"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="py"&gt;.user.screen_name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;stream_entry&lt;/span&gt;&lt;span class="nf"&gt;.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="py"&gt;.text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;stream_entry&lt;/span&gt;&lt;span class="nf"&gt;.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"location"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="py"&gt;.user.location&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all for this part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moving-on-to-the-next-one"&gt;
  &lt;/a&gt;
  Moving on to the next one...
&lt;/h2&gt;

&lt;p&gt;We're just getting started! This was the first component in our service that lays the foundation for processing the tweets and making them queryable via &lt;code&gt;RediSearch&lt;/code&gt;. In the upcoming blog, we will dive into how to consume and process tweets from Redis Streams using a Java based application. Stay tuned!&lt;/p&gt;

</description>
      <category>redis</category>
      <category>rust</category>
      <category>database</category>
      <category>programming</category>
    </item>
    <item>
      <title>Day 12/30 : Responsive Pricing Card tables using HTML and CSS</title>
      <author>Somanath Goudar</author>
      <pubDate>Mon, 31 May 2021 12:53:00 +0000</pubDate>
      <link>https://dev.to/somanathgoudar/day-12-30-responsive-pricing-card-tables-using-html-and-css-308e</link>
      <guid>https://dev.to/somanathgoudar/day-12-30-responsive-pricing-card-tables-using-html-and-css-308e</guid>
      <description>&lt;p&gt;Welcome to Day 12 of this &lt;a href="https://dev.to/somanathgoudar/30dayschallenge-30-days-extreme-html-css-challenge-50k1"&gt;Challenge&lt;/a&gt;. This is what I created today. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;➜ Here is the Demo :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qbNj5iWa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://1.bp.blogspot.com/-CdRBDVK0QGI/YKijanRy2CI/AAAAAAAAAEk/rZkyLmWSRd4qJ6tv6qMkGn_td86ZGRelgCLcBGAsYHQ/s600/12.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qbNj5iWa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://1.bp.blogspot.com/-CdRBDVK0QGI/YKijanRy2CI/AAAAAAAAAEk/rZkyLmWSRd4qJ6tv6qMkGn_td86ZGRelgCLcBGAsYHQ/s600/12.gif" alt="Responsive Pricing Card tables"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;➜ Video Tutorial :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3no4wrHP2Ek"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;strong&gt;➜ Source Code :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.mrwebwolf.com/2021/05/responsive-pricing-card-tables-using.html"&gt;https://www.mrwebwolf.com/2021/05/responsive-pricing-card-tables-using.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;➜ Instagram Post and Reel for Day 12 :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.instagram.com/future_coderss/"&gt;See Post and Reel&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Hey, If You don't know what is happening here. Don't Worry, I am doing a crazy challenge 😅. Read More about it from the post below.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/somanathgoudar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnNEMcDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--15QGQnyq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600953/fdee0195-6d25-410d-9d97-c10ffaa4eb7d.jpeg" alt="somanathgoudar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/somanathgoudar/30dayschallenge-30-days-extreme-html-css-challenge-50k1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🤯 30DaysChallenge - 30 Days Extreme HTML &amp;amp; CSS CHALLENGE 🤯&lt;/h2&gt;
      &lt;h3&gt;Somanath Goudar ・ May 19 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#frontend&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#30daysofcode&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Support Me :&lt;/strong&gt;&lt;br&gt;
👉 Buy me a Coffee: &lt;a href="https://www.buymeacoffee.com/somanathgoudar"&gt;https://www.buymeacoffee.com/somanathgoudar&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.instagram.com/somanath_goudar/"&gt;Follow Me on Instagram&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.instagram.com/future_coderss/"&gt;Follow Future Coders on Instagram&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.youtube.com/channel/UC_nTrhTr5fnBGjOxnkPUmmA"&gt;Subscribe to My Main Channel&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.youtube.com/channel/UCzGSyMOf2jPt1MkNBB3SJ3g"&gt;Subscribe to Channel Created for this Challenge&lt;/a&gt;&lt;/p&gt;




</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Top Tips for Using Colour in Web Design</title>
      <author>Alex</author>
      <pubDate>Mon, 31 May 2021 12:49:26 +0000</pubDate>
      <link>https://dev.to/alexanderkdev/top-tips-for-using-colour-in-web-design-45ed</link>
      <guid>https://dev.to/alexanderkdev/top-tips-for-using-colour-in-web-design-45ed</guid>
      <description>&lt;p&gt;Web design is quite a creative pursuit, particularly when it comes time to pick a colour palette. Playing around with colour is something that a lot of people enjoy, and developing a cohesive colour scheme goes a long way in conveying a sense of professionalism to potential clients.&lt;/p&gt;

&lt;p&gt;However, deciding upon a scheme is not as simple as picking a few colours that you are fond of and hoping that the background matches the heading. In reality, it takes a lot of skill and knowledge to create beautiful, engaging web pages, which is why many businesses opt to use a web design company in Melbourne when it comes time to build or upgrade a site.&lt;/p&gt;

&lt;p&gt;The science of colour&lt;/p&gt;

&lt;p&gt;The science behind colour is actually quite complex, which makes sense given the level of influence it has over us. Colour has long been used as a tool by marketing professionals to convey certain emotions and sway the opinions of consumers one way or the other.&lt;/p&gt;

&lt;p&gt;When describing colour, we typically use three different terms known as hue, value, and chroma. Hue is simply the name that we give a specific colour. Red for example, is a different hue to green. Value is used to describe the lightness or darkness, for example light blue or dark purple. Finally, chroma is a term used to describe the purity, or vividness of a colour. Saturation and brightness are often terms used interchangeably when describing chroma.&lt;/p&gt;

&lt;p&gt;You’ve probably seen a colour wheel before and maybe even used one in a high school art class. The colour wheel is an easy way of organising hues in a harmonious, practical way. Colour wheels typically feature 12 colours, although this number can go up to as many as 96!&lt;/p&gt;

&lt;p&gt;At its core, the colour wheel consists of the three primary colours — red, blue, and yellow. When these colours are mixed they produce what is known as secondary colours — green, orange, and purple. Finally, the combination of these six colours produces the tertiary colours — red-orange, yellow-orange, yellow-green, blue-green, blue-violet, and red-violet.&lt;/p&gt;

&lt;p&gt;These twelve colours can be further subdivided into what is known as ‘cool colours’ and ‘warm colours’. As the term suggests, cool colours are the shades of blue, green, and purple, while warm colours include any tint that is predominantly red, orange, or yellow.&lt;/p&gt;

&lt;p&gt;Finally there are the colour schemes. These schemes provide designers and marketers with a practical means of conveying meaning and emotion. A complementary colour scheme is one that features colours from opposite sides of the colour wheel. A monochromatic colour scheme is one built from a single hue, featuring a variety of saturations of that colour. An analogous colour scheme uses colours that sit side by side. And a triadic colour scheme requires three colours that sit equally spaced around the colour wheel.&lt;/p&gt;

&lt;p&gt;The last thing you need to know about colour? That it’s a little bit different depending on whether you are designing for print or screen. Web designers will use a colour system known as RGB while print designers work with the CMYK model.&lt;/p&gt;

&lt;p&gt;Colour on Screen&lt;/p&gt;

&lt;p&gt;Colour is a simple way that web designers can convey meaning without using words. The fact that colours are able to convey meaning can be put down to a combination of psychology and conditioning. One of the reasons that red, for example, is commonly associated with warmth is the fact that fire is red.&lt;/p&gt;

&lt;p&gt;It is the role of a web designer to understand these connotations between colour, mood, and meaning, and make smart decisions that convey their client’s business.&lt;/p&gt;

&lt;p&gt;Colour is also important from an accessibility perspective. The Web Content Accessibility Guidelines dictates that “colours must have sufficient contrast between text colour and its background…this includes text on images, icons, and buttons”. This section of the Guidelines are specifically designed to assist those with low contrast sensitivity and individuals who suffer from colour blindness.&lt;/p&gt;

&lt;p&gt;There are many tools available on the web which can assist web developers select appropriate colours that will ensure content is accessible to all.&lt;/p&gt;

&lt;p&gt;Web developers also have to keep in mind the fact that their chosen colour palette will form a significant part of their client’s branding. As such, the client should ensure they are an active part of any discussions surrounding potential colour schemes.&lt;/p&gt;

&lt;p&gt;Colour your site with a Web Design Professional&lt;/p&gt;

&lt;p&gt;Given the significant impact that colour can have on the mood and preferences of potential customers, it pays to invest in the services of a professional web design company in Melbourne when it comes time to build or update your website.&lt;/p&gt;

&lt;p&gt;By employing a professional, you can be sure that your website palette reflects your brand, products, and services, conveying a sense of cohesion and professionalism.&lt;/p&gt;

</description>
      <category>design</category>
      <category>webdesign</category>
      <category>webdev</category>
      <category>development</category>
    </item>
    <item>
      <title>3 ways to clone in JS</title>
      <author>Rupak Dey</author>
      <pubDate>Mon, 31 May 2021 12:42:22 +0000</pubDate>
      <link>https://dev.to/deyrupak/3-ways-to-clone-in-js-36cp</link>
      <guid>https://dev.to/deyrupak/3-ways-to-clone-in-js-36cp</guid>
      <description>&lt;p&gt;Objects in JavaScript are reference values, you can't simply just copy using the '='&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Save It For Later!&lt;/em&gt; Let's begin...&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const food = {a : 'apple', b : 'burger'}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#1-spread"&gt;
  &lt;/a&gt;
  &lt;br&gt;1. Spread
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{...food}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-objectassign"&gt;
  &lt;/a&gt;
  &lt;br&gt;2. Object.assign
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Object.assign({}, food)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#3-json"&gt;
  &lt;/a&gt;
  &lt;br&gt;3. JSON
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;JSON.parse(JSON.stringify(food))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  &lt;br&gt;Result
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{a : 'apple', b : 'burger'}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;em&gt;Do you know the difference between these 3 ways?&lt;/em&gt; Comment down below!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to make an awesome card hover effect</title>
      <author>Techy Programmers</author>
      <pubDate>Mon, 31 May 2021 12:41:20 +0000</pubDate>
      <link>https://dev.to/kunaal438/how-to-make-an-awesome-card-hover-effect-45j5</link>
      <guid>https://dev.to/kunaal438/how-to-make-an-awesome-card-hover-effect-45j5</guid>
      <description>&lt;p&gt;Hello, glad you are here. I am kunaal and today we will see how to make an awesome 3d card hover effect. You can see demo below.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kunaal_kumar/embed/JjWOgby?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#video-tutorial-"&gt;
  &lt;/a&gt;
  Video Tutorial -
&lt;/h1&gt;

&lt;p&gt;If you find this article hard or for better explanation. You can watch video tutorial.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/b2jsWL1cDKE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you like the video tutorial. Please consider subscribing my youtube channel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let's code
&lt;/h1&gt;

&lt;p&gt;Inside HTML file under &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag write&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-img"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;card 01&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"para"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Non aperiam fugiat eos odit numquam vitae facere dolore id libero sit!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that we only have to add CSS&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'roboto'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;49&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;162&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;perspective&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1000px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;450px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;preserve-3d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card-img&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(img.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateZ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card-body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-40px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;180deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;85%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;87%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;180deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card-body&lt;/span&gt; &lt;span class="nc"&gt;.bg&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card-body&lt;/span&gt; &lt;span class="nc"&gt;.bg&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-30%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-10deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card-body&lt;/span&gt; &lt;span class="nc"&gt;.bg&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-30%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-10deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card-body&lt;/span&gt; &lt;span class="nc"&gt;.bg&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-30%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-10deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="nc"&gt;.card-body&lt;/span&gt; &lt;span class="nc"&gt;.bg&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="nc"&gt;.card-body&lt;/span&gt; &lt;span class="nc"&gt;.bg&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transition-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="nc"&gt;.card-body&lt;/span&gt; &lt;span class="nc"&gt;.bg&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transition-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.content&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.title&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#292929&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you understood everything. If you have any doubt or you find any mistake that I made or you have any suggestion feel free to ask me in comment.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are interested in programming and want to know how I a 15yr old teen do coding make these design. You can follow me on my Instagram. I am also planning to post my game development stuff on Instagram.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/kunaal438/card-hover"&gt;Source Code&lt;/a&gt;&lt;a href="https://www.youtube.com/c/TechyProgrammers/"&gt;My youtube Channel&lt;/a&gt;, &lt;a href="https://www.instagram.com/techy_programmers/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Learning Web Dev on the Web</title>
      <author>Nukala Suraj</author>
      <pubDate>Mon, 31 May 2021 12:32:56 +0000</pubDate>
      <link>https://dev.to/lucidmach/learning-web-dev-on-the-web-ifp</link>
      <guid>https://dev.to/lucidmach/learning-web-dev-on-the-web-ifp</guid>
      <description>&lt;p&gt;They say the best place to learn &lt;em&gt;football&lt;/em&gt; is on a &lt;em&gt;football field&lt;/em&gt;,&lt;br&gt;
likewise the best place to learn &lt;strong&gt;web dev&lt;/strong&gt; is the &lt;strong&gt;web&lt;/strong&gt;.&lt;br&gt;
😝&lt;/p&gt;

&lt;p&gt;There are a lot of places on the web from where you can learn (for &lt;strong&gt;&lt;em&gt;free&lt;/em&gt;&lt;/strong&gt;).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;YouTube&lt;/li&gt;
&lt;li&gt;Udemy&lt;/li&gt;
&lt;li&gt;DEV/Medium&lt;/li&gt;
&lt;li&gt;Twitter (yes, a lot of people tweet about web dev😂)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But as a beginner, it's very likely that you'd prolly choose YouTube and since YouTube has &lt;strong&gt;a hell lot of channels to choose from&lt;/strong&gt;, &lt;em&gt;finding a channel that has a style you really enjoy&lt;/em&gt; would play a major role in learning journey.&lt;/p&gt;

&lt;p&gt;Here's a list of my fav channels(and soon enough even yours 🤞)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCW5YeuERMmlnqo4oq8vwUpg"&gt;Net Ninja&lt;/a&gt; :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TD1T8coB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghbygqmfhlwbglct61t1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TD1T8coB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghbygqmfhlwbglct61t1.png" alt="Net Ninja's Channel Page on YouTube"&gt;&lt;/a&gt;&lt;br&gt;
This is my go-to channel for literally anything web.&lt;br&gt;
Shaun has this tendency to &lt;strong&gt;&lt;em&gt;super-simplify any concept&lt;/em&gt;&lt;/strong&gt; to a form that literally a 5yo can understand.&lt;br&gt;
He has playlist on topics, in which he explains concepts as we build a project.&lt;br&gt;
However, Shaun likes to take his time so &lt;strong&gt;&lt;em&gt;if you've some dead-lines to meet&lt;/em&gt;&lt;/strong&gt;. This is definitely &lt;strong&gt;not the right channel for the situation&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/user/TechGuyWeb"&gt;Traversy Media&lt;/a&gt; :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f14DFnR6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vhsxcujjuft9uzx0kbf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f14DFnR6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vhsxcujjuft9uzx0kbf.png" alt="Traversy Media's Channel Page on YouTube"&gt;&lt;/a&gt;&lt;br&gt;
Brad Traversy is the &lt;strong&gt;&lt;em&gt;OG web dev youtuber&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
A lot of people who make web dev tutorials on YouTube have claimed to have learnt from his videos. &lt;br&gt;
His videos have this &lt;strong&gt;&lt;em&gt;natural style&lt;/em&gt;&lt;/strong&gt; that makes it seem like you're &lt;strong&gt;&lt;em&gt;learning from a actual teacher in person&lt;/em&gt;&lt;/strong&gt;. &lt;br&gt;
He teaches you all the essentials (the &lt;strong&gt;&lt;em&gt;20%&lt;/em&gt;&lt;/strong&gt; with which you can get &lt;strong&gt;&lt;em&gt;80% of the work&lt;/em&gt;&lt;/strong&gt; done)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCFbNIlppjAuEX4znoulh0Cw"&gt;WebDevSimplified&lt;/a&gt; :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pJl4gtW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6qr0mu2ydv09ap6dvyu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pJl4gtW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6qr0mu2ydv09ap6dvyu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Kyle is an kinda like the best of both worlds from Net Ninja and Traversy Media.&lt;br&gt;
His goal as a YouTuber is "&lt;code&gt;simplifying the web, so you can build your dream projects sooner&lt;/code&gt;" which he absolutely aces.&lt;br&gt;
His videos tend to be crisp and to the point, so if you &lt;strong&gt;&lt;em&gt;want a fundamental understanding of concepts&lt;/em&gt;&lt;/strong&gt; while &lt;strong&gt;&lt;em&gt;killing your dead-lines, this is the best channel&lt;/em&gt;&lt;/strong&gt; for the situation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UClb90NQQcskPUGDIXsQEz5Q"&gt;Dev Ed&lt;/a&gt; :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YE8cGyql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7a8tbbrp45lrd5tkcgu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YE8cGyql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7a8tbbrp45lrd5tkcgu.png" alt="Dev Ed's Channel Page on YouTube"&gt;&lt;/a&gt;&lt;br&gt;
This is the YouTuber I personally best relate to.&lt;br&gt;
His videos focus on showing you &lt;strong&gt;&lt;em&gt;how to think&lt;/em&gt;&lt;/strong&gt; (in terms of both &lt;strong&gt;design&lt;/strong&gt; and &lt;strong&gt;development&lt;/strong&gt;).&lt;br&gt;
His videos are absolutely delightful and fun to watch.&lt;br&gt;
He is the &lt;strong&gt;&lt;em&gt;PewDiePie of Web Dev YouTube&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/user/99baddawg"&gt;Ben Awad&lt;/a&gt; :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sJBNEh8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/946ta027ul4um5luiyhj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sJBNEh8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/946ta027ul4um5luiyhj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Ben has been an inspirational figure/role model to me.&lt;br&gt;
He &lt;strong&gt;&lt;em&gt;builds real-projects&lt;/em&gt;&lt;/strong&gt; that he deploys and monetizes right in front of us.&lt;br&gt;
He's also &lt;strong&gt;&lt;em&gt;THE YouTuber to learn React.JS, graphQl and TypeScript&lt;/em&gt;&lt;/strong&gt; from.&lt;br&gt;
His content is filled with wit and dark humor (kinda) and is absolutely fun to watch&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you ❤️ this post,&lt;br&gt;
Do hit me up on Twitter &lt;a href="https://twitter.com/LucidMach"&gt;@LucidMach&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks For The Read,&lt;br&gt;
✌️&lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/lucidmach"&gt;@lucidmach&lt;/a&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
