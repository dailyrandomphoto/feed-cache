<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Gerenciando Tarefas Agendadas do Laravel no Banco de Dados</title>
      <author>Pedro Paulo Silva</author>
      <pubDate>Fri, 18 Jun 2021 20:55:04 +0000</pubDate>
      <link>https://dev.to/pedropms/gerenciando-tarefas-agendadas-do-laravel-no-banco-de-dados-1l2n</link>
      <guid>https://dev.to/pedropms/gerenciando-tarefas-agendadas-do-laravel-no-banco-de-dados-1l2n</guid>
      <description>&lt;p&gt;Tarefas agendadas são uma ótima maneira de executar processos repetitivos de maneira automatizada em nossos projetos, basta definir as tarefas e escolher os momentos em que elas serão executadas e pronto, pode deixar o resto do trabalho com o &lt;a href="https://en.wikipedia.org/wiki/Cron"&gt;cron&lt;/a&gt; do servidor.&lt;/p&gt;

&lt;p&gt;Geralmente essa definição dos momentos em que as tarefas irão rodar fica dentro do projeto e acaba sendo suficiente em muitos casos, porém, essa maneira de gerenciarenciamento acaba sendo um impecílio quando se precisa alterar o horário em que as tarefas serão executadas. Gerenciando dessa maneira, será necessário uma alteração no arquivo, e uma nova &lt;em&gt;release&lt;/em&gt; do projeto para as alterações terem efeito. Isso também restringe que o ajuste no horário da tarefa seja feito somente por um desenvolvedor.&lt;/p&gt;

&lt;p&gt;Para resolver esse problema, podemos gerenciar as tarefas agendadas no banco de dados, fazendo com que apenas a alteração de um registro já altere o funcionamento da tarefa.&lt;/p&gt;

&lt;p&gt;No Laravel temos o pacote: &lt;a href="https://github.com/robersonfaria/laravel-database-schedule"&gt;Laravel Database Schedule&lt;/a&gt;, que permite o gerenciamento das tarefas no banco de dados e ainda fornece uma interface para que a alteração das tarefas possa ser feita de maneira mais simples e por alguém sem tanto conhecimento de programção.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#instala%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Instalação
&lt;/h1&gt;

&lt;p&gt;Para instalar a biblioteca vamos rodar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer require robersonfaria/laravel-database-schedule
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Após a instalação precisamos rodar as &lt;em&gt;migrations&lt;/em&gt; para criar as tabelas usadas pela biblioteca:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Por último, exportar o arquivo de configurações:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan vendor:publish --provider="RobersonFaria\DatabaseSchedule\DatabaseSchedulingServiceProvider" --tag="config"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No arquivo de configurações vamos alterar o &lt;strong&gt;restricted_access&lt;/strong&gt; para &lt;code&gt;false&lt;/code&gt; para o teste. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nr2jsGHQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwejpmkvkyb3y4kn6uif.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nr2jsGHQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwejpmkvkyb3y4kn6uif.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OBS:&lt;/strong&gt; essa configuração deixa o dashboard de tarefas agendadas público, para restringir o acesso somente à usuários autorizados deixe a propriedade como &lt;code&gt;false&lt;/code&gt; e consulte a &lt;a href="https://github.com/robersonfaria/laravel-database-schedule#dashboard-authorization"&gt;documentação&lt;/a&gt; para definir quem poderá acessar.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#criando-a-tarefa-agendada"&gt;
  &lt;/a&gt;
  Criando a Tarefa Agendada
&lt;/h1&gt;

&lt;p&gt;Para exemplo vamos criar uma tarefa rodando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan make:command NovoComando
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E configuramos o comando dessa maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;protected $signature = 'comando:novo-comando';

protected $description = 'Novo comando teste';

public function handle(): int
{
    $this-&amp;gt;info('Comando rodando!');
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Normalmente, agora seria o momento em que iríamos cadastrar esse comando que criamos, no &lt;code&gt;Kernel.php&lt;/code&gt; e configurariamos o horário para a tarefa rodar, mas usando o &lt;em&gt;database schedule&lt;/em&gt; não faremos isso.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#agendando-a-tarefa-no-banco-de-dados"&gt;
  &lt;/a&gt;
  Agendando a Tarefa no Banco de Dados
&lt;/h1&gt;

&lt;p&gt;Após iniciar o servidor com:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan serve
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vamos acessar &lt;a href="http://localhost:8000/schedule"&gt;http://localhost:8000/schedule&lt;/a&gt; para entrar no dashboard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sDEGHt0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jii2yvghjx4ac5h8axr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sDEGHt0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jii2yvghjx4ac5h8axr.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No formulário, vamos escolher o comando que queremos agendar, a expressão cron que vai definir quando ocorrerá a execução e marcar a opção de envio de email caso ocorra uma falha na execução, para isso também vamos definir um email.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RC1Afw8o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drj4uu7o3sqkifngzdva.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RC1Afw8o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drj4uu7o3sqkifngzdva.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Para entender todas as opções e parâmetros que podem ser configurados na tarefa agendada visite a &lt;a href="https://github.com/robersonfaria/laravel-database-schedule"&gt;documentação&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Após essa configuração podemos ver no dashboard nosso comando cadastrado.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L3JrDfJf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q96hr0hgv944hsj3paw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L3JrDfJf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q96hr0hgv944hsj3paw.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#executando-as-tarefas-agendadas"&gt;
  &lt;/a&gt;
  Executando as tarefas agendadas
&lt;/h1&gt;

&lt;p&gt;Para testar localmente vamos rodar o comando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan schedule:run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E depois do comando rodar, se acessarmos o email cadastrado e a sessão de &lt;strong&gt;Histórico&lt;/strong&gt; no dashboard veremos o resutado.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mz8Mo-lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/539au6dzj8rwz6cd5ht5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mz8Mo-lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/539au6dzj8rwz6cd5ht5.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4vJZ_KaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk7ten4wx5lv7fn5o2ws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4vJZ_KaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk7ten4wx5lv7fn5o2ws.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Caso ocorra algum erro, o email e histórico continuam sendo registrados.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qla1EtoO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jw5mvduyx1o0bf0k8lfw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qla1EtoO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jw5mvduyx1o0bf0k8lfw.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zNap7z5n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xx6jeib9fr8ux4ogyws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zNap7z5n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xx6jeib9fr8ux4ogyws.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Referências
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/robersonfaria/laravel-database-schedule"&gt;https://github.com/robersonfaria/laravel-database-schedule&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>braziliandevs</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Where to Find Side Project Ideas💡</title>
      <author>Firangiz Ganbarli</author>
      <pubDate>Fri, 18 Jun 2021 20:04:38 +0000</pubDate>
      <link>https://dev.to/firangizg/where-to-find-side-project-ideas-58n6</link>
      <guid>https://dev.to/firangizg/where-to-find-side-project-ideas-58n6</guid>
      <description>&lt;p&gt;Hey friends! &lt;/p&gt;

&lt;p&gt;After my last post on &lt;a href="https://dev.to/firangizg/5-steps-to-plan-a-side-project-3h7f"&gt;5 Steps to Plan a Side Project&lt;/a&gt;, I started to search for new project ideas. While there are tons of lists of them online, I just cannot be satisfied with them for some reason (maybe because I just want to be creative and contribute to a unique project instead of tutorial projects). &lt;/p&gt;

&lt;p&gt;I just found a new idea while eating lunch with my father the other day. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;ps. it is related to food 😌&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, I was wondering...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do y'all find side projects to work on? Where does the initial idea come from?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>watercooler</category>
      <category>sideprojects</category>
      <category>beginners</category>
    </item>
    <item>
      <title>🚌 How big is the bus factor for Forem's most complicated files?</title>
      <author>Steve Ziegler</author>
      <pubDate>Fri, 18 Jun 2021 19:33:01 +0000</pubDate>
      <link>https://dev.to/stevezieglerva/how-big-is-the-bus-factor-for-forem-s-most-complicated-files-48cm</link>
      <guid>https://dev.to/stevezieglerva/how-big-is-the-bus-factor-for-forem-s-most-complicated-files-48cm</guid>
      <description>&lt;p&gt;Ever since watching Adam Tornhill's excellent talk on &lt;a href="https://www.youtube.com/watch?v=fl4aZ2KXBsQ"&gt;prioritizing technical debt as if time and money matters&lt;/a&gt;, I've wanted a simple way to analyze my own repos. I wanted to replicate Adam's process of identifying code hotspots based on each file's code complexity, change frequency, and recency of the last change. I also wanted to see if I could recreate his "bus factor" analysis to see which files would be most adversely affected if a primary developer was hit by a bus, won the lottery, or just plain quit.&lt;/p&gt;

&lt;p&gt;I was able to create a simplified Python version that generated the hotspot data along with other basic git log metrics. I expected some high bus factor files knowing how many initial file commits Ben made to Forem. Surely there were plenty of complicated files that only he touched!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w4uAxlSO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5y7cuzi2k17pu6v8e8jt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w4uAxlSO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5y7cuzi2k17pu6v8e8jt.png" alt="Top forem committers over time showing the old timers: Ben, Mac, Molly, Michael, and rhymes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The hotspot list shows some intuitive hotspots for a Rails app like schema.rb and routes.rb which are used to manage the database and url routing. It also shows how user.rb and article.rb are hotspots for Forem which make sense given its focus on content publishing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;🔥 Hotspots 
Commits  Comp.   Age    Score  File
  388    63589     1    100.0  db/schema.rb
  427    29318     1     50.7  config/routes.rb
  157    65260     2     41.5  app/javascript/chat/chat.jsx
  359    24357     1     35.4  app/models/user.rb
   98    72604    20     28.8  app/views/admin/configs/show.html.erb
  290    24093     6     28.3  app/models/article.rb
  169    34455     3     23.6  spec/models/user_spec.rb
  154    37107     7     23.2  spec/models/article_spec.rb
   69    48449    59     13.5  spec/requests/api/v0/articles_spec.rb
  177    17235     2     12.4  app/controllers/stories_controller.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So how susceptible are these hotspots to losing a team member? To analyze the bus factor, you can see how many different authors touched the file in the last 365 days.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RSDWfP1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlzmrukcee115rub7coy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RSDWfP1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlzmrukcee115rub7coy.png" alt="Histogram showing that most hotspots have had lots of authors touch it"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Luckily, most hotspots have had at least 10 unique authors touch the file. This might be another big benefit of taking Forem open: many people have touched the code and that collective body of knowledge now has 20+ unique authors committing per month.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o8jqe9no--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mjkktcekwsjvviawphlv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o8jqe9no--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mjkktcekwsjvviawphlv.png" alt="Forem has 20+ unique authors committing per month"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The good news is that the bus factor with Forem is low and the project should be able to weather changes in contributors. &lt;/p&gt;

&lt;p&gt;If you want to learn more, you can see all of the &lt;a href="http://nerdthoughts.net/git_analysis/forem/output/results.html"&gt;analytics&lt;/a&gt; on the repo and view the &lt;a href="https://github.com/stevezieglerva/git-log-analytics"&gt;source code&lt;/a&gt; on GitHub. &lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>10 Examples of a Good 👩‍💻🧑‍💻 Developer Portfolio 💼 for Your Inspiration 🦄</title>
      <author>Roden</author>
      <pubDate>Fri, 18 Jun 2021 19:32:50 +0000</pubDate>
      <link>https://dev.to/kerthin/10-examples-of-a-good-developer-portfolio-for-your-inspiration-2f88</link>
      <guid>https://dev.to/kerthin/10-examples-of-a-good-developer-portfolio-for-your-inspiration-2f88</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Hello, Friends. Today, I would like to show you the portfolios that I found on the Internet. You know, I think that a good presentation of yourself is sometimes much more important than your professionalism (within reason, of course). And this also applies to beginners who still have a little development experience and can prove themselves by creating their own website, where they will be able to post their work in the future. In my opinion, this is better than just using github or other services for this. Your own portfolio will give you the opportunity to present yourself and your work the &lt;code&gt;way you want&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Your personal portfolio gives you personality.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can also read my post where I created a page for project presentations (I think you might like it) + there is a &lt;code&gt;Demo on CodePen&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/kerthin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEDW7r1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N_Cn4rKT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/634154/b6864fc7-4410-46ca-a11d-bc605dc6d2b1.jpeg" alt="kerthin image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kerthin/awesome-developer-portfolio-page-for-your-projects-responsive-2npp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🔥Awesome Developer Portfolio Page for your Projects 📱 (responsive)&lt;/h2&gt;
      &lt;h3&gt;Roden ・ Jun 6 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codepen&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Well, ladies and Gentlemen, let's get started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://brittanychiang.com/#jobs"&gt;&lt;h1&gt;Brittany Chiang&lt;/h1&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/ysresYiVgcZd5vVCVs/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ysresYiVgcZd5vVCVs/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
I really like the portfolio of this developer, because it is very concise and it seems that there is nothing superfluous in it. It is also very memorable and contains extremely useful and important information. It has a very nice design with a very good color scheme.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://riccardozanutta.com/"&gt;&lt;h1&gt;Riccardo Zanutta&lt;/h1&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/0B33aNPEAsgYXZeq3n/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/0B33aNPEAsgYXZeq3n/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
A good portfolio with a beautiful minimalist style and nice animations.It is definitely worth paying attention to as an example for inspiration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bepatrickdavid.com/"&gt;&lt;h1&gt;Patrick David&lt;/h1&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/4M1f8pqzbuIjbjqGFv/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/4M1f8pqzbuIjbjqGFv/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
An excellent portfolio of an Italian developer and UI / UX designer. The site has an amazing design. The site also has a lot of beautiful animation and a very unusual preloader.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fabianirsara.com/"&gt;&lt;h1&gt;Fabian&lt;/h1&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/GZvjfKSvoLzeUCJjGa/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/GZvjfKSvoLzeUCJjGa/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
You can say ," What did you find on this site?" Personally, I liked this portfolio for its design focused primarily on the font. This is one of those designs where the font plays a dominant role and sets the rest of the style. Moreover, such a site is not very difficult to create, it can appeal to those who do not really want to bother creating a complex design for their site. &lt;code&gt;But you will have to worry about finding the font&lt;/code&gt; &lt;strong&gt;;)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adeolaadeoti.netlify.app/"&gt;&lt;h1&gt;adeola.&lt;/h1&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/YExdX9w5vJGi1MoG5R/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/YExdX9w5vJGi1MoG5R/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Portfolio of a Frontend developer from Lagos. A very nice one-page site, which has a beautiful animation. I think many people may like it because of its unusual style.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adriengervaix.com/index.html"&gt;&lt;h1&gt;Adrien Gervaix&lt;/h1&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/vQ0SPgLpAUVTNlsuQj/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/vQ0SPgLpAUVTNlsuQj/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Portfolio of a French UI / UX freelance designer. On the site you can see beautiful svg elements and also a number of attractive animations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://sanjoo.in/"&gt;&lt;h1&gt;SANJOO&lt;/h1&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/2dz2GfHf49nVU0QTge/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/2dz2GfHf49nVU0QTge/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Portfolio of a freelancer from India. The site is designed in the same style as the &lt;a href="https://fabianirsara.com/"&gt;Fabian&lt;/a&gt; portfolio. Here, too, the design is dominated exclusively by the font.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://findmatthew.com/"&gt;&lt;h1&gt;Matthew Williams&lt;/h1&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/KjYlfBmOBMM1cP3Zwa/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/KjYlfBmOBMM1cP3Zwa/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Quite often found portfolios on the Internet. If you have ever searched the Internet for examples of good portfolios, then perhaps you could come across this example. The portfolio is owned by Matthew Williams, who is a full-stack web developer. A very decent portfolio, but in my opinion slightly outdated in terms of design and site elements. But in general, it can be a good example, especially for beginners.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jacekjeznach.com/"&gt;&lt;h1&gt;Jack.&lt;/h1&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/Q0AZRlEJphEEdT4nC7/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Q0AZRlEJphEEdT4nC7/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Portfolio of a Polish frontend developer. The site has a beautiful and unusual animation, as well as seamless transitions between the pages of the site. The portfolio has a very minimalistic design, which is very well combined with the selected colors for the site.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bruno-simon.com/"&gt;&lt;h1&gt;Bruno Simon&lt;/h1&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/k6VW5GNEiAdGa31jPz/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/k6VW5GNEiAdGa31jPz/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Amazing portfolio of web developer Bruno Simon, which is made in 3d style with the help of three.js. (and perhaps some other 3d libraries). I'm sure you knew about it, but I think it's a sin not to add this portfolio to your list. It is perfect in everything from the design to the way it provides information (you can even have fun playing bowling or overcoming obstacles on the site). To find out information about the developer, you need to use this car to drive to the appropriate fields with information about the developer himself, as well as about his work. Also on the site there is a physics of elements and characteristic sounds when interacting with them. This is a great portfolio, which in my opinion is extremely difficult to repeat. I think that in this way the author wanted to separate his portfolio from the usual one-page sites, which simply show graphs with developer skills (I never understood why they were needed).&lt;br&gt;
&lt;a href="https://i.giphy.com/media/bkJxx6uKcDtgP9zOsQ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/bkJxx6uKcDtgP9zOsQ/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;The End&lt;/h1&gt;

&lt;p&gt;Well, that's it, thank you friends, for your time. I hope that this collection will help you and your inspiration to create your beautiful portfolio. (Please just don't use skill charts).&lt;br&gt;
&lt;a href="https://i.giphy.com/media/jwFbMfYthIM6pttfjF/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/jwFbMfYthIM6pttfjF/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>css</category>
    </item>
    <item>
      <title>Error Handling in JavaScript  (Golang Style)</title>
      <author>Bibek</author>
      <pubDate>Fri, 18 Jun 2021 19:00:16 +0000</pubDate>
      <link>https://dev.to/bibekkakati/error-handling-in-javascript-golang-style-4fj1</link>
      <guid>https://dev.to/bibekkakati/error-handling-in-javascript-golang-style-4fj1</guid>
      <description>&lt;p&gt;In this short article, we are going to see how we can handle error in JavaScript in Golang style.&lt;/p&gt;

&lt;p&gt;I am assuming, you have some experience with JavaScript and you are aware of the issues with error handling like throwing an exception to the parent method from try-catch block or chaining multiple then-blocks and implementing logic inside it. These things can easily mess up with the code making it difficult to read.&lt;/p&gt;

&lt;p&gt;Golang avoids these type of problems by handling errors/exceptions atomically.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#error-handling-in-golang"&gt;
  &lt;/a&gt;
  Error handling in Golang
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;methodCall&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;// handle error&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;// do something with the result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use a similar pattern in JavaScript with the help of a &lt;code&gt;try-catch&lt;/code&gt; block like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;methodCall&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If any error occurs, we are returning the &lt;code&gt;error&lt;/code&gt; in the second position of the array and the &lt;code&gt;result&lt;/code&gt; as &lt;em&gt;null&lt;/em&gt; in the first position.&lt;/p&gt;

&lt;p&gt;If there is no error, we are returning the &lt;code&gt;result&lt;/code&gt; in the first position and &lt;code&gt;error&lt;/code&gt; as &lt;em&gt;null&lt;/em&gt; in the second position.&lt;/p&gt;

&lt;p&gt;Now we can call the &lt;code&gt;getData&lt;/code&gt; method then handle the &lt;code&gt;result&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// handle the error&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// do something with the result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This pattern of error handling makes it very easy to read and understand the code.&lt;/p&gt;

&lt;p&gt;Let me know what do you think about this pattern.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Originally published on &lt;a href="https://blog.bibekkakati.me/error-handling-in-javascript-like-golang"&gt;blog.bibekkakati.me&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Thank you for reading 🙏&lt;/p&gt;

&lt;p&gt;If you enjoyed this article or found it helpful, give it a thumbs-up 👍&lt;/p&gt;

&lt;p&gt;Feel free to connect 👋&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/kakatibibek"&gt;Twitter&lt;/a&gt; | &lt;a href="https://instagram.com/bibekkakati"&gt;Instagram&lt;/a&gt; | &lt;a href="https://linkedin.com/in/bibekkakati"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you like my work and want to support it, you can do it here. I will really appreciate it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/bibekkakati"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nAlyWXzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dbibekkakati%26button_colour%3DFF5F5F%26font_colour%3Dffffff%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
      <category>go</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 18 Jun 2021 18:38:30 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-38dh</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-38dh</guid>
      <description>&lt;p&gt;Hey there!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking back on your week, what was something you're proud of?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Catching up with old friends... or whatever else might spark joy ❤️ &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Congrats on your wins this week!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/zBhZiVNNQjfTG/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/zBhZiVNNQjfTG/giphy.gif" alt='Mae Whitman saying "yassss" in front of Fireworks'&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>Python's Collections Module: namedtuple</title>
      <author>Kathan Vakharia</author>
      <pubDate>Fri, 18 Jun 2021 18:26:54 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/python-s-collections-module-namedtuple-582e</link>
      <guid>https://dev.to/kathanvakharia/python-s-collections-module-namedtuple-582e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As it has &lt;strong&gt;tuple&lt;/strong&gt; in it's name, one thing is clear that it will add some superpower🦸‍♀️ to the tuples.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;namedtuple&lt;/code&gt; is a  special type of &lt;code&gt;tuple&lt;/code&gt; that has &lt;em&gt;named&lt;/em&gt; indices. Ofcourse, they also have normal integer indices as they are tuples anway.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#importing-namedtuple"&gt;
  &lt;/a&gt;
  Importing namedtuple
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-namedtuple-endraw-creation"&gt;
  &lt;/a&gt;
  &lt;code&gt;namedtuple&lt;/code&gt; creation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Step 1: Define namedtuple
# 'typename'=&amp;gt; used when printing an obj &amp;amp; low-lvl stuff
# 'fieldnames'=&amp;gt; list of names of indices
&lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Student'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;field_names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'fname'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'lname'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                     &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Step 2: Create a namedtuple
&lt;/span&gt;
&lt;span class="c1"&gt;# explicitly assigning named indices
&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Shan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Patel"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# named indices are inferred
&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Kathan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Vakharia"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="s"&gt;"""OUTPUT
Student(fname='Shan', lname='Patel', age=19)
Student(fname='Kathan', lname='Vakharia', age=19)
"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;📑 It is important to note that the identifier you use for defining the &lt;code&gt;namedtuple&lt;/code&gt;(&lt;em&gt;Student&lt;/em&gt; here) is the one you have to use while instantiating a &lt;code&gt;namedtuple&lt;/code&gt;. It has nothing to do with the &lt;code&gt;typename&lt;/code&gt; argument-It's just a &lt;em&gt;name&lt;/em&gt; for your custom tuple sub-class. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quoting the python &lt;a href="https://docs.python.org/3/library/collections.html#collections.namedtuple"&gt;documentation&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;collections.namedtuple(typename, field_names,...)&lt;/code&gt;&lt;br&gt;
     - Returns a new tuple subclass named &lt;em&gt;typename&lt;/em&gt;.&lt;br&gt;
We can cross-verify if we want using &lt;code&gt;issubclass&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; issubclass(Student, tuple)
True
&lt;/pre&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# CORRECT WAY
&lt;/span&gt;&lt;span class="n"&gt;s0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"heet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"vakharia"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;"""OUTPUT
blah(fname='heet', lname='vakharia')
""""
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# INCORRECT way
&lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"blah"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;field_names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"fname"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"lname"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blah&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"kathan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"vakharia"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;"""OUTPUT
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
NameError: name 'blah' is not defined
"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#indexing-namedtuples"&gt;
  &lt;/a&gt;
  Indexing namedtuples
&lt;/h2&gt;

&lt;p&gt;Indexing namedtuple object is very straight-forward. Here's how you do it,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# way1 : using integer indices
# Same like 'plain-tuples'
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"First element of s1: {}"&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="c1"&gt;# way 2: using named indices 'NEW'
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Element of s2 having named index lname: {}"&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="s"&gt;"""OUTPUT
First element of s1: Shan
Element of s2 having named index lname: Vakharia
"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As it is a sub-class of &lt;code&gt;tuple&lt;/code&gt;, it inherits all the methods and attributs of &lt;code&gt;tuple&lt;/code&gt;. &lt;br&gt;
However, there are some interesting methods pertaining to &lt;code&gt;namedtuple&lt;/code&gt;. Let's see what are those,&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#classmethod-raw-somenamedtuplemakeiterable-endraw-"&gt;
  &lt;/a&gt;
  &lt;em&gt;classmethod&lt;/em&gt; &lt;code&gt;somenamedtuple._make(iterable)&lt;/code&gt;
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Doe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="s"&gt;"""OUTPUT
Student(fname='John', lname='Doe', age=34)
"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#-raw-somenamedtupleasdict-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;somenamedtuple._asdict()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Returns a new &lt;code&gt;dict&lt;/code&gt; which maps field names to their corresponding values,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;

&lt;span class="n"&gt;Student&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Student'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;field_names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'fname'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'lname'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                     &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;shan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Shan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Patel"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;kathan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Kathan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Vakharia"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# namedtuple._asdict() 
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_asdict&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kathan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_asdict&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="s"&gt;"""OUTPUT
{'fname': 'Shan', 'lname': 'Patel', 'age': 19}
{'fname': 'Kathan', 'lname': 'Vakharia', 'age': 19}
"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-somenamedtuplereplacekwargs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;somenamedtuple._replace(**kwargs)&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Returns a new instance of the named tuple replacing specified fields with new values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;kathan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Kathan"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Vakharia"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# a new tuple will be created with changed fname
&lt;/span&gt;&lt;span class="n"&gt;kathan_v2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kathan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Karsh"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kathan_v2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Old kathan is still unchanged
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kathan&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="s"&gt;"""OUTPUT
Student(fname='Karsh', lname='Vakharia', age=19)
Student(fname='Kathan', lname='Vakharia', age=19)
"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that wraps our discussion on &lt;code&gt;namedtuple&lt;/code&gt;. I have intentionally left some minor functionalities because they are too trivial :) However, feel free to check out the &lt;a href="https://docs.python.org/3/library/collections.html#collections.somenamedtuple._fields"&gt;documentation&lt;/a&gt; for that remaining 5% stuff.&lt;/p&gt;

</description>
      <category>python</category>
      <category>codenewbie</category>
      <category>collections</category>
    </item>
    <item>
      <title>Progress on Portfolio and Mentorship</title>
      <author>MikaZuki Augus</author>
      <pubDate>Fri, 18 Jun 2021 18:21:34 +0000</pubDate>
      <link>https://dev.to/mikacodez/progress-on-portfolio-and-mentorship-2m16</link>
      <guid>https://dev.to/mikacodez/progress-on-portfolio-and-mentorship-2m16</guid>
      <description>&lt;p&gt;Whatsup Guys Mika here!&lt;/p&gt;

&lt;p&gt;Back with another post on updates with my progress on how things have been going with my coding journey so far.&lt;/p&gt;

&lt;p&gt;I think it would probably be best to try and submit these once a week instead of every other day as it will help me to compile all the information that I have learned over the week in to one post!&lt;/p&gt;

&lt;p&gt;So in terms of progress on the portfolio I have been able to come close to make a functional website that I was working on. I was even able to apply some styles and effects in Javascript with the help of some of the community guys at DEV!&lt;/p&gt;

&lt;p&gt;So now the website looks a lot more functional, which is progress!&lt;/p&gt;

&lt;p&gt;In other news! I told you guys that I was in dire need of a Mentor, someone that can help steer me along the path to become a great developer! Great news I have found someone! Hopefully through this mentorship I will be able to complete more projects and document more things and experiences that I can share with you guys along my journey.&lt;/p&gt;

&lt;p&gt;Key thing to take away from this post today is not to give up when you feel stuck.The next day could offer you another chance to tackle that issue, so just simply sleep on it and try again the next day!&lt;/p&gt;

&lt;p&gt;Thanks for Reading,&lt;br&gt;
Mika/Malcolm.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Serving static files and creating websites using Python Flask</title>
      <author>Rishabh Tatiraju</author>
      <pubDate>Fri, 18 Jun 2021 17:34:19 +0000</pubDate>
      <link>https://dev.to/rtficial/serving-static-files-and-creating-websites-using-python-flask-41c3</link>
      <guid>https://dev.to/rtficial/serving-static-files-and-creating-websites-using-python-flask-41c3</guid>
      <description>&lt;p&gt;No matter who you are - a business owner or a developer - having a website shall be inevitable at a point in your career. There are a wide variety of options at your disposal - from no-code, dropdown website builders to hardcore web development using JavaScript frameworks like React. &lt;/p&gt;

&lt;p&gt;In this article, we'll talk about another option to build a basic, static website using Python Flask and HTML/CSS + JavaScript, which falls somewhere in between this spectrum of web development choices. This is also a demonstration of how versatile the Flask microframework is!&lt;/p&gt;

&lt;p&gt;Additionally, we'll see how we can publish our website online using Heroku.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can refer to my &lt;a href="https://dev.to/rtficial/building-your-first-restful-api-with-python-flask-1lmc"&gt;previous article&lt;/a&gt; to understand how to setup Flask to make simple API calls. It will also serve as a good base for this tutorial.&lt;/p&gt;

&lt;p&gt;Source code for this tutorial can be found on my &lt;a href="https://github.com/tatirajurishabh/flask-static-tutorial"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;If you haven't already, install Flask with the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;Flask
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#folder-structure"&gt;
  &lt;/a&gt;
  Folder structure
&lt;/h2&gt;

&lt;p&gt;Create a folder in a location of your choice and open it using your favorite code editor. This will be our workspace folder.&lt;/p&gt;

&lt;p&gt;In this workspace folder, create a file called &lt;code&gt;main.py&lt;/code&gt;. This file will hold our Flask code with all the routes and configurations.&lt;/p&gt;

&lt;p&gt;Within the same folder, create another folder called &lt;code&gt;static&lt;/code&gt;. Leave it empty for the moment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flask-setup"&gt;
  &lt;/a&gt;
  Flask setup
&lt;/h2&gt;

&lt;p&gt;Open the created &lt;code&gt;main.py&lt;/code&gt; file and import the Flask module in the first line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we initialize the Flask object as usual. However, we pass in two more parameters to the constructor - &lt;code&gt;static_folder&lt;/code&gt; as &lt;code&gt;static&lt;/code&gt; (which is our static directory name) and &lt;code&gt;static_url_path&lt;/code&gt;, which we'll leave as blank.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;static_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'static'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;static_url_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-our-webpage"&gt;
  &lt;/a&gt;
  Building our webpage
&lt;/h2&gt;

&lt;p&gt;In order to serve a static webpage, we need to make an HTML file that will hold our webpage content. Create a file within the &lt;code&gt;static&lt;/code&gt; directory called &lt;code&gt;galaxy.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can put any valid HTML code in this file. I have included a basic webpage with some styling below, feel free to edit this code as it suits you!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Galaxy&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("https://upload.wikimedia.org/wikipedia/commons/thumb/5/52/Hubble2005-01-barred-spiral-galaxy-NGC1300.jpg/2560px-Hubble2005-01-barred-spiral-galaxy-NGC1300.jpg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;NGC 1300&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Barred spiral galaxy&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#serving-our-webpage"&gt;
  &lt;/a&gt;
  Serving our webpage
&lt;/h2&gt;

&lt;p&gt;Now lets serve this static webpage we just created. In the &lt;code&gt;main.py&lt;/code&gt; file, we'll add a new &lt;code&gt;GET&lt;/code&gt; request with route &lt;code&gt;/galaxy&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/galaxy'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;galaxy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will then add the magic code that will automatically serve this static webpage as a route. The Flask object contains a function called &lt;code&gt;send_static_file&lt;/code&gt;, which accepts the name of the file located in your static directory as the parameter, and returns it back as a valid HTML response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/galaxy'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;galaxy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_static_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'galaxy.html'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we'll add the code to execute our Flask server at the bottom of the &lt;code&gt;main.py&lt;/code&gt; file. We'll pass in &lt;code&gt;threaded&lt;/code&gt; as &lt;code&gt;True&lt;/code&gt; to allow multithreaded operations, and set &lt;code&gt;port&lt;/code&gt; to &lt;code&gt;5000&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;threaded&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the end, the entire &lt;code&gt;main.py&lt;/code&gt; file looks like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;static_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'static'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;static_url_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/galaxy'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;galaxy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_static_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'galaxy.html'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;threaded&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the code by executing the command &lt;code&gt;python main.py&lt;/code&gt;, and navigate to &lt;code&gt;http://localhost:5000/galaxy&lt;/code&gt; or &lt;code&gt;http://127.0.0.1/galaxy&lt;/code&gt; to see the magic!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8WHg0yFS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/MKf3ZwVx/flask-static-file-galaxy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8WHg0yFS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/MKf3ZwVx/flask-static-file-galaxy.jpg" alt="Flask Static File Example - Galaxy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can similarly add more routes and serve other static HTML files to build a complete website!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-online"&gt;
  &lt;/a&gt;
  Deploying online
&lt;/h2&gt;

&lt;p&gt;Now that you have finished building your pages and added the relevant Flask code, its time to publish your website on the internet for everyone to see. To deploy your website online, we will use a combination of GitHub and Heroku.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uploading-your-code-to-github"&gt;
  &lt;/a&gt;
  Uploading your code to GitHub.
&lt;/h3&gt;

&lt;p&gt;Log in to your GitHub account (or create a new one) and create a new repository. Name it as you wish. Once done, with the working directory set as your workspace folder, run the following commands one after the other.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: make sure you replace &lt;code&gt;&amp;lt;YOUR_USERNAME&amp;gt;&lt;/code&gt; with your GitHub Username and &lt;code&gt;&amp;lt;YOUR_REPOSITORY_NAME&amp;gt;&lt;/code&gt; with the repository name you just created.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git init
git remote add origin https://github.com/&amp;lt;YOUR_USERNAME&amp;gt;/&amp;lt;YOUR_REPOSITORY_NAME&amp;gt;.git
git branch &lt;span class="nt"&gt;-M&lt;/span&gt; main
git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Initial commit"&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setting-up-heroku"&gt;
  &lt;/a&gt;
  Setting up Heroku
&lt;/h3&gt;

&lt;p&gt;Heroku is a cloud platform that allows us to operate applications in the cloud. We will use Heroku to deploy and publish our website on the web.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Publishing to Heroku is free for simple websites with low traffic.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Create a Heroku account on heroku.com and confirm your email address. Once done, go ahead and create a new team and call it anything you wish.&lt;/p&gt;

&lt;p&gt;Within that new team, you will find the &lt;code&gt;New&lt;/code&gt; button. Click on it and select &lt;code&gt;Create New App&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On the following page, you will be asked to name your new app and choose a region. Name your website appropriately and select any region. Click &lt;code&gt;Create App&lt;/code&gt; to continue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wbXYt3Kz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/Y2v4q6zc/heroku-create.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wbXYt3Kz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/Y2v4q6zc/heroku-create.png" alt="Creating an app on Heroku"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Subsequently, you will be shown a page where you will find an option to select a deployment method. Select &lt;code&gt;GitHub&lt;/code&gt;. This will reveal an option to connect your Heroku account with your GitHub account. Follow the steps as instructed.&lt;/p&gt;

&lt;p&gt;Once connected, a search bar will appear. Enter your repository name and hit search, and select your repository when it appears in the search results.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v82dc8----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/cLS6mVyZ/heroku-github-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v82dc8----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/cLS6mVyZ/heroku-github-1.png" alt="Heroku GitHub search"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After linking your repository, you will be shown a section titled &lt;code&gt;Automatic Deploys&lt;/code&gt;. Select the branch (&lt;code&gt;main&lt;/code&gt; by default) where your website code resides, and click &lt;code&gt;Enable Automatic Deploys&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l-HQ5w1V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/zfdBqvLX/heroku-github-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l-HQ5w1V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/zfdBqvLX/heroku-github-2.png" alt="Heroku Auto Deploy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This completes our Heroku setup. Moving along.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploying-your-website"&gt;
  &lt;/a&gt;
  Deploying your website
&lt;/h3&gt;

&lt;p&gt;Before deploying your website, Heroku must know in which programming language is the website being served, for which it requires a file called &lt;code&gt;Procfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create a file called &lt;code&gt;Procfile&lt;/code&gt; (no extension) in the root of the workspace directory. Include the following line in the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;web: gunicorn main:app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Gunicorn is an HTTP web server for Python&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We must also create a file called &lt;code&gt;requirements.txt&lt;/code&gt;, that tells Heroku what dependencies to install before running our Flask server. Create this file in the root of the workspace directory, and add the following content in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Flask
gunicorn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once done, push these changes to GitHub using the following commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Added Procfile and Requirements"&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we enabled Automatic Deploys, Heroku will automatically deploy your website to &lt;code&gt;https://&amp;lt;YOUR_HEROKU_APP_NAME&amp;gt;.herokuapp.com/&lt;/code&gt; in a few minutes. Once done, you can visit that link and see your website live on the internet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ending-notes"&gt;
  &lt;/a&gt;
  Ending Notes
&lt;/h2&gt;

&lt;p&gt;We just saw a simple way to serve static webpages using Flask. We also saw how to easily deploy the same online using Heroku. This method is not only limited to HTML webpages, but also any type of file as long as it exists in the &lt;code&gt;static&lt;/code&gt; folder. &lt;/p&gt;

&lt;p&gt;In the upcoming articles of the series, we’ll look at advanced features that we can build using Flask, including authentication (login/signup), and data storage.&lt;/p&gt;

&lt;p&gt;Let me know in the comments section if you have any feedback or queries, and as always, keep coding!&lt;/p&gt;

</description>
      <category>python</category>
      <category>html</category>
      <category>heroku</category>
      <category>webdev</category>
    </item>
    <item>
      <title>JavaScript-30-Day-18</title>
      <author>KUMAR HARSH</author>
      <pubDate>Fri, 18 Jun 2021 17:31:04 +0000</pubDate>
      <link>https://dev.to/cenacr007_harsh/javascript-30-day-18-3h8f</link>
      <guid>https://dev.to/cenacr007_harsh/javascript-30-day-18-3h8f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#adding-up-times-with-reduce"&gt;
  &lt;/a&gt;
  &lt;center&gt; Adding up times with Reduce &lt;/center&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  &lt;a href="https://cenacrharsh.github.io/JS-30-DAY-18/"&gt;demo&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HZSYMn8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlmr8rd9ksfletiagbji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HZSYMn8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlmr8rd9ksfletiagbji.png" alt="ss"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today we will be using &lt;code&gt;Array.prototype.map&lt;/code&gt; and &lt;code&gt;Array.prototype.reduce&lt;/code&gt; to figure out the total runtime of given videos in hours, minutes and seconds.&lt;/p&gt;

&lt;p&gt;So we are given a list of items each mimicking a video and each one has a &lt;code&gt;data-time&lt;/code&gt; attribute telling us the length of the video in the format &lt;code&gt;minutes:seconds&lt;/code&gt;, and we need to figure out how to pull them out of the DOM, convert them to numbers, make them into minutes and seconds, add it all up, figure out how many hours, minutes and seconds there are totally, then finally &lt;code&gt;console.log&lt;/code&gt; those actual values.&lt;/p&gt;

&lt;p&gt;Here is sample of list items given:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"videos"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;data-time=&lt;/span&gt;&lt;span class="s"&gt;"5:43"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Video 1&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;data-time=&lt;/span&gt;&lt;span class="s"&gt;"2:33"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Video 2&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;data-time=&lt;/span&gt;&lt;span class="s"&gt;"3:45"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Video 3&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;data-time=&lt;/span&gt;&lt;span class="s"&gt;"0:47"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Video 4&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;data-time=&lt;/span&gt;&lt;span class="s"&gt;"5:21"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Video 5&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;First thing we want to do is select all of those nodes&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timeNodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[data-time]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We are not selecting list items because we don't know if it's always going to be a list item so we will select anything with a &lt;code&gt;data-time&lt;/code&gt; attribute on it.&lt;/p&gt;

&lt;p&gt;Now this &lt;code&gt;timeNodes&lt;/code&gt; is a NodeList and to use &lt;code&gt;map&lt;/code&gt; we need an Array, so we need to convert this from a node list into an array of actual time strings.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timeNodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[data-time]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now &lt;code&gt;timeNodes&lt;/code&gt; is an array of list items.&lt;/p&gt;

&lt;p&gt;We will now extract time out of this array of list items.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;timeNodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now &lt;code&gt;seconds&lt;/code&gt; is an array of strings (containing all the times)&lt;/p&gt;

&lt;p&gt;Now we want to convert the time into just seconds. The format in which we have our time right now is &lt;code&gt;minutes:seconds&lt;/code&gt; so we need to split this string on the &lt;code&gt;:&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;timeNodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;timeCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mins&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;timeCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But the problem we run into here is after splitting what we get is also a string and we need numbers to do any kind of mathematical calculation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1RyKZOFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vxj0kxbbv97furj8t8kf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1RyKZOFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vxj0kxbbv97furj8t8kf.png" alt="1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we need to map over the array again and use &lt;code&gt;parseFloat&lt;/code&gt; to convert the string into numbers.&lt;/p&gt;

&lt;p&gt;We can see how &lt;code&gt;parseFloat&lt;/code&gt; solves our problem:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KDsrh4bh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v92wa8kubecdaanszlnj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KDsrh4bh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v92wa8kubecdaanszlnj.png" alt="2"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;timeNodes&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;timeCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mins&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;timeCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;mins&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;secs&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This gives us all the time in seconds.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2gnQoRui--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1u1d1glebrt79jm33zx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2gnQoRui--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1u1d1glebrt79jm33zx.png" alt="3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we have all the times in seconds, we need to add them all up and we are going to use &lt;code&gt;reduce&lt;/code&gt; for that.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;timeNodes&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;timeCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mins&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;timeCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;mins&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;secs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vidSeconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;vidSeconds&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This gives us the total number of seconds of every single video added together.&lt;/p&gt;

&lt;p&gt;Time to chop down the total seconds into hours, minutes and seconds.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;secondsLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hours&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secondsLeft&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3600&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;We use &lt;code&gt;Math.floor&lt;/code&gt; to get rid of the decimal part, for example 2.5 hours needs to be converted to 2 hours and we'll convert the remaining 0.5 hours into minutes and seconds&lt;/p&gt;

&lt;p&gt;1hour=3600seconds&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="nx"&gt;secondsLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;secondsLeft&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secondsLeft&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;//1min=60seconds&lt;/span&gt;
      &lt;span class="nx"&gt;secondsLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;secondsLeft&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;hours &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;mins&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;minutes &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;secondsLeft&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;seconds`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is final output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R-rI-rgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8uwlfrj1nugu6lp42mb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R-rI-rgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8uwlfrj1nugu6lp42mb.png" alt="4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and with this our project for the day was completed.&lt;/p&gt;

&lt;p&gt;GitHub repo:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/cenacrharsh"&gt;
        cenacrharsh
      &lt;/a&gt; / &lt;a href="https://github.com/cenacrharsh/JS-30-DAY-18"&gt;
        JS-30-DAY-18
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#blog-on-day17-of-javascript30"&gt;
  &lt;/a&gt;
  Blog on Day-17 of javascript30
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/cenacr007_harsh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOSLbihe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---UOoV_Rg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/641726/db02e77a-1c1c-423b-8d31-85eca73347ae.jpg" alt="cenacr007_harsh image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/cenacr007_harsh/javascript-30-day-17-2kg3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;JavaScript-30-Day-17&lt;/h2&gt;
      &lt;h3&gt;KUMAR HARSH ・ Jun 17 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#blog-on-day16-of-javascript30"&gt;
  &lt;/a&gt;
  Blog on Day-16 of javascript30
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/cenacr007_harsh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOSLbihe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---UOoV_Rg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/641726/db02e77a-1c1c-423b-8d31-85eca73347ae.jpg" alt="cenacr007_harsh image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/cenacr007_harsh/javascript-30-day-16-a41" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;JavaScript-30-Day-16&lt;/h2&gt;
      &lt;h3&gt;KUMAR HARSH ・ Jun 16 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#blog-on-day15-of-javascript30"&gt;
  &lt;/a&gt;
  Blog on Day-15 of javascript30
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/cenacr007_harsh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOSLbihe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---UOoV_Rg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/641726/db02e77a-1c1c-423b-8d31-85eca73347ae.jpg" alt="cenacr007_harsh image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/cenacr007_harsh/javascript-30-day-15-l8j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;JavaScript-30-Day-15&lt;/h2&gt;
      &lt;h3&gt;KUMAR HARSH ・ Jun 15 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#follow-me-on-twitter"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/cenacr007_harsh"&gt;Follow me on Twitter&lt;/a&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#follow-me-on-linkedin"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.linkedin.com/in/kumarharsh22/"&gt;Follow me on Linkedin&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;DEV Profile&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__641726"&gt;
  
    .ltag__user__id__641726 .follow-action-button {
      background-color: #000000 !important;
      color: #000000 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/cenacr007_harsh" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOSLbihe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---UOoV_Rg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/641726/db02e77a-1c1c-423b-8d31-85eca73347ae.jpg" alt="cenacr007_harsh image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cenacr007_harsh"&gt;KUMAR HARSH&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cenacr007_harsh"&gt;B.Tech (CSE) | Competitive Programming Enthusiast | Front End Web Developer | Cloud Computing (GCP) | Blogger&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;You can also do the challenge at &lt;a href="https://javascript30.com/"&gt;javascript30&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks &lt;a class="mentioned-user" href="https://dev.to/wesbos"&gt;@wesbos&lt;/a&gt;
 , &lt;a href="https://github.com/wesbos"&gt;WesBos&lt;/a&gt; to share this with us! 😊💖&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please comment and let me know your views&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank You!
&lt;/h2&gt;

</description>
      <category>javascript</category>
      <category>github</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Python's Collections Module: defaultdict</title>
      <author>Kathan Vakharia</author>
      <pubDate>Fri, 18 Jun 2021 16:46:33 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/python-s-collections-module-defaultdict-52ol</link>
      <guid>https://dev.to/kathanvakharia/python-s-collections-module-defaultdict-52ol</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;It won't surprise you if I tell you it is also a &lt;code&gt;dict&lt;/code&gt; subclass :) &lt;/p&gt;

&lt;p&gt;&lt;code&gt;defaultdict&lt;/code&gt; container type eliminates the chances to get &lt;em&gt;KeyErrors&lt;/em&gt; in case of normal dictionaries while accessing non existent keys.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U1Oob5Ky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9xtcoi8yko4i6u7jkr3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U1Oob5Ky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9xtcoi8yko4i6u7jkr3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's see how &lt;code&gt;defaultdict&lt;/code&gt; works,&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#importing-defaultdict"&gt;
  &lt;/a&gt;
  Importing defaultdict
&lt;/h3&gt;

&lt;p&gt;Importing &lt;code&gt;defaultdict&lt;/code&gt; is same as in case of &lt;code&gt;Counter&lt;/code&gt; , just make sure about the capitalization.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yqox7krv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxkupqv681ujvilz0wd9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yqox7krv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxkupqv681ujvilz0wd9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before, we move ahead don't forget it is a dictionary internally so we can leverage all the methods of built-in &lt;code&gt;dict&lt;/code&gt; class.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-raw-defaultdict-endraw-to-provide-default-values-for-nonexistent-keys"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;defaultdict&lt;/code&gt; to provide default values for non-existent keys
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cMCC7Rd3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikkipc2wwj8xiq0g0hkc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cMCC7Rd3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikkipc2wwj8xiq0g0hkc.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
We can simplify the above process using a &lt;strong&gt;lambda&lt;/strong&gt; function.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wMVaYT19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6fdlbmheftviz9slktz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wMVaYT19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6fdlbmheftviz9slktz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🦜 Moreover, we can also pass the &lt;em&gt;builtin&lt;/em&gt; constructor functions as &lt;code&gt;default_factory&lt;/code&gt; argument.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here, I have passed &lt;code&gt;list&lt;/code&gt; which means the default value for any key will be output of &lt;code&gt;list()&lt;/code&gt; ➡️ empty list&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YDn7uPuG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kndccl8lr662z3fewoa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YDn7uPuG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kndccl8lr662z3fewoa.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's all for the &lt;code&gt;defaultdict&lt;/code&gt; container. I hope you are enjoying the series :) If so, leave a like and please comment down below if I've commited any mistake(s)!&lt;/p&gt;

</description>
      <category>python</category>
      <category>codenewbie</category>
      <category>collections</category>
    </item>
    <item>
      <title>Tracking Infrastructure Costs for Startups</title>
      <author>Ben Schaechter</author>
      <pubDate>Fri, 18 Jun 2021 16:35:09 +0000</pubDate>
      <link>https://dev.to/bensign/tracking-infrastructure-costs-for-startups-pi1</link>
      <guid>https://dev.to/bensign/tracking-infrastructure-costs-for-startups-pi1</guid>
      <description>&lt;p&gt;As cloud infrastructure service offerings have grown from a small set of services like virtual machines, object storage and networking primitives to an à la carte menu of hundreds of services, maintaining visibility into what services you're using and paying for can be a job in and of itself. As a startup you are rightfully focused on finding product market fit. However very soon after you achieve product market fit, margins start to become important. The sooner you start tending to cloud costs the easier it will be to get under control when the time comes. This post is meant to give a quick overview of how to think about cloud costs when you're just getting up and running as a startup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cost-metrics-should-be-a-company-kpi"&gt;
  &lt;/a&gt;
  Cost Metrics Should be a Company KPI
&lt;/h2&gt;

&lt;p&gt;As you're navigating to finding product market fit you're typically tracking metrics that are customer focused. Depending on the nature of the company, you may be looking at the number of new user registrations, active user engagement metrics or revenue being generated. Typically, companies will also take a look at technical KPIs like performance of the application and the number of bugs/exceptions that are being raised.&lt;/p&gt;

&lt;p&gt;However, one often-forgotten metric that startups fail to track is cloud costs. This is primarily because usage-based infrastructure providers make this information particularly hard to find and track. Startups are usually granted credits from providers like AWS, GCP, Azure and DigitalOcean and forget about them until they expire and are suddenly faced with frantically unpacking their surprise bill. By tracking cost metrics from day 1, you can avoid these scenarios and always know how your infrastructure spend is trending.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-using-cost-allocation-tags-early"&gt;
  &lt;/a&gt;
  Start Using Cost Allocation Tags Early
&lt;/h2&gt;

&lt;p&gt;Instituting certain early behaviors in your organization can save you a lot of time and effort down the line and probably the easiest one to do is leveraging cost allocation tags. Using tags allows you to group infrastructure together by function (i.e. front-end vs back-end), environment (i.e. staging vs production) or even developer (i.e. Molly vs Brian) on your team. By applying tags to your infrastructure, you can see not only how much your infrastructure is trending in aggregate but also see how it is trending by each tag you apply.&lt;/p&gt;

&lt;p&gt;Cost Allocation Tags cost nothing and are usually pretty easy to apply. In the same way you think about writing unit tests, you should consider applying cost allocation tags as a general best-practice behavior. Just like with unit test, the earlier you get started with cost allocation tags the easier it becomes to manage over time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implement-infrastructure-guardrails"&gt;
  &lt;/a&gt;
  Implement Infrastructure Guardrails
&lt;/h2&gt;

&lt;p&gt;Infrastructure providers typically make it incredibly easy for you to provision resources: you can create some new virtual machines in a few clicks on consoles, create backups for storage volumes with the flip of a switch and easily push new files to an object storage as often as you'd like. What we've found from looking at aggregated, anonymized data is that the vast majority of customers have not put into place very basic guardrails that could keep costs in check - mostly from just not knowing these exist.&lt;/p&gt;

&lt;p&gt;Some easy guardrail examples to implement include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implementing lifecycle policies on ECR repos to prevent a backlog of unused legacy images.&lt;/li&gt;
&lt;li&gt;Using intelligent tiering on S3 Buckets to pay less money for assets which are no longer accessed.&lt;/li&gt;
&lt;li&gt;Purchasing Savings Plans and Reserved Instances for instances you know will be used consistently.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These guardrails typically take very little time for customers to enable but most people don't think about them. They also can have major consequences for saving money that adds up every single month.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outsource-your-cost-monitoring"&gt;
  &lt;/a&gt;
  Outsource your cost monitoring
&lt;/h2&gt;

&lt;p&gt;When you're a startup, your focus should be on your business. Spending time having to learn AWS cost APIs and getting them implemented in the manner you want can easily be an entire engineer's time. As your startup grows to have finance and management counterparts who are curious about costs and accounting for them properly, the asks become bespoke and it takes significant engineering time to get cost data organized and delivered to them that's better spent being outsourced.&lt;/p&gt;

&lt;p&gt;In the same way you look to third parties like Sentry for exception handling rather than rolling your own, sourcing cost monitoring solutions is likely your best bet. &lt;a href="https://vantage.sh/"&gt;Vantage&lt;/a&gt; offers a free tier to all startups with less than $2,500 per month in cloud infrastructure costs. You can get up and running in a few minutes and invite team-members to your Vantage account to share reports with others — which is a lot better than getting them on the AWS Console itself.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>startup</category>
    </item>
  </channel>
</rss>
