<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I want to build a Python wrapper for an API, how should I approach it?</title>
      <author>Aahnik Daw</author>
      <pubDate>Mon, 12 Apr 2021 02:01:45 +0000</pubDate>
      <link>https://dev.to/aahnik/i-want-to-build-a-python-wrapper-for-an-api-how-should-i-approach-it-pk4</link>
      <guid>https://dev.to/aahnik/i-want-to-build-a-python-wrapper-for-an-api-how-should-i-approach-it-pk4</guid>
      <description>&lt;p&gt;I am planning to build a python wrapper around a rest API.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I want to support friendly functions, with autocompletion in the editor.&lt;/li&gt;
&lt;li&gt;I want 100% test coverage&lt;/li&gt;
&lt;li&gt;I want the package to be modular, so that, any changes to API, can be easily reflected&lt;/li&gt;
&lt;li&gt;I want to support both async and normal methods
(the core will be implemented thru async, but there will be a wrapper for those who don't want to use async)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;library&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Api&lt;/span&gt;

&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Api&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_job&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_thing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;do_job&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;library.sync&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Api&lt;/span&gt;

&lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_thing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the data that will be passed to the functions should be validated. planning to use pydantic.&lt;/p&gt;

&lt;p&gt;planning to create a sub-package &lt;code&gt;library.models&lt;/code&gt; to contain all the modules defining the models.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;how should I design the entire thing? how should I structure the project?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;best practices? guides?&lt;/strong&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Effortlessly explore the nuScenes dataset with SiaSearch</title>
      <author>SiaSearch</author>
      <pubDate>Mon, 12 Apr 2021 01:50:22 +0000</pubDate>
      <link>https://dev.to/siasearch/effortlessly-explore-the-nuscenes-dataset-with-siasearch-275</link>
      <guid>https://dev.to/siasearch/effortlessly-explore-the-nuscenes-dataset-with-siasearch-275</guid>
      <description>&lt;h2&gt;
  &lt;a href="#a-guide-to-better-access-explore-and-understand-unstructured-sensor-data-for-autonomous-driving-development"&gt;
  &lt;/a&gt;
  A guide to better access, explore, and understand unstructured sensor data for autonomous driving development
&lt;/h2&gt;

&lt;p&gt;To accelerate the speed of autonomous vehicle adoption, an increasing number of organizations and individuals are making their projects available to the public. Open data is fueling commercial and technological advancement in autonomous driving—one of most well known resources being the &lt;a href="https://www.nuscenes.org/"&gt;nuScenes dataset&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Developed by the team at Motional (formerly nuTonomy), nuScenes is one of the most popular open-source datasets for autonomous driving. The nuScenes dataset enables researchers to study a wide range of urban driving situations using data captured by the full sensor suite of a self-driving car. The first dataset of its kind, nuScenes was a key player in cultivating a culture of data sharing and collaboration within the mobility industry.&lt;/p&gt;

&lt;p&gt;To further advance this mission, Motional recently partnered with Berlin-based startup &lt;a href="https://www.siasearch.io/"&gt;SiaSearch&lt;/a&gt; to introduce a completely new way to interact with nuScenes—by using a data curation platform to delve deeper into the data than ever before.&lt;/p&gt;

&lt;p&gt;This guide will walk you through how to better access, explore and understand the nuScenes dataset with the SiaSearch platform.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-nuscenes-dataset"&gt;
  &lt;/a&gt;
  What is the nuScenes Dataset?
&lt;/h2&gt;

&lt;p&gt;The nuScenes dataset is one of the largest public datasets for autonomous driving. The dataset contains a rich library of meticulously hand-annotated scenes collected by real self-driving cars. Recorded in Boston and Singapore, nuScenes features a diverse range of traffic situations, driving maneuvers, and unexpected behaviors.&lt;/p&gt;

&lt;p&gt;The dataset includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Full sensor suite: 32-beam LiDAR, 6 cameras and radars with complete 360° coverage&lt;/li&gt;
&lt;li&gt;1000 urban street scenes, 20 seconds each&lt;/li&gt;
&lt;li&gt;1,440,000 camera images&lt;/li&gt;
&lt;li&gt;23 classes and 8 attributes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sjwy6zii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qfchggtpoc764kqfru7m.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sjwy6zii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qfchggtpoc764kqfru7m.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessing-nuscenes-data-in-siasearch"&gt;
  &lt;/a&gt;
  Accessing nuScenes data in SiaSearch
&lt;/h2&gt;

&lt;p&gt;To access the data yourself, you’ll need to &lt;a href="https://public.sia-search.com/"&gt;sign up for a free account on SiaSearch&lt;/a&gt;. After creating an account, you can immediately load and visualize nuScenes data within the web-based GUI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now that we’re all set up, let’s start exploring!&lt;/strong&gt; Upon loading nuScenes in SiaSearch, you’ll see the main dashboard, which captures key features of the dataset. This view lets you quickly understand the overall dataset composition, as well as identify any gaps in data distribution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M74C5oHr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7107q5y1rgbevtpn23pc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M74C5oHr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7107q5y1rgbevtpn23pc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#querying-the-nuscenes-dataset"&gt;
  &lt;/a&gt;
  Querying the nuScenes Dataset
&lt;/h2&gt;

&lt;p&gt;Having a holistic view of the dataset, while useful, is not enough. The ability to drill into specific subsets can uncover insights and imbalances in the data—a critical step in model building and validation. &lt;/p&gt;

&lt;p&gt;SiaSearch makes every piece of nuScenes data searchable against all available and auto-extracted dimensions using its intelligent search interface. The platform features two ways to search for the exact sequences you want, using either a visual or code interface. The visual query lets you select extractors from a list of semantic attributes and driving situations, while the code query functions like any API call statement would.&lt;/p&gt;

&lt;p&gt;For example, if we are searching for rainy weather scenes with over three cars in view, you could submit the following query using the code interface:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vehicle_following = 'True' AND precip_type = 'RAIN' AND 
road_joint = 'True' AND forward_velocity &amp;gt;= 5 AND num_cars &amp;gt;= 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Within seconds, the API returns clips that match the query attributes. This makes it easy to search the entire data lake to return situations that fit the case in question. From the search interface, specific clips can be selected by clicking into them to reveal more details, such as charts for forward velocity and acceleration profiles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#curating-custom-training-datasets-from-nuscenes"&gt;
  &lt;/a&gt;
  Curating custom training datasets from nuScenes
&lt;/h2&gt;

&lt;p&gt;Another key benefit of using the platform is the ability to transform data to produce custom training datasets. The flexibility of the SiaSearch platform allows you to finetune data for training and testing to see a measurable improvement in your models.&lt;/p&gt;

&lt;p&gt;For example, you may want to isolate the data right before or after an unprotected left turn in order to contextualize vehicle behavior. The SiaSearch interface gives you the ability to adjust the length of snippets to match your requirements in just a few clicks.&lt;/p&gt;

&lt;p&gt;Here are just a few ways you can use the SiaSearch to transform data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Re-adjust clip length by clicking on the adjust clip button in the replay viewer. Easily trim or expand snippets according to your needs.&lt;/li&gt;
&lt;li&gt;Add custom tags to selected segments to produce new subsets of data.&lt;/li&gt;
&lt;li&gt;Leave comments for collaborators on a frame or sequence level to notify them of any questions or feedback.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rx8G5dpe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nmjm5oq0v9e9i9qoh7o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rx8G5dpe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nmjm5oq0v9e9i9qoh7o.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we’ve selected our training samples, we need to find a way to feed the data back into the computer vision model.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exporting-data-from-siasearch"&gt;
  &lt;/a&gt;
  Exporting data from SiaSearch
&lt;/h2&gt;

&lt;p&gt;The final step is to export your data into a format you can import directly into your model. To access the export page, add one or more snippets to your export list from either the search or playback pages. &lt;/p&gt;

&lt;p&gt;On the export page, you can review a breakdown of the selected snippets based on their associated queries, as well as basic statistics to get an idea of the quantity and contents of the export. When you’re happy with your results, you can export the raw data and or specific metadata attributes as a parquet file to feed back into your model or validation pipeline.&lt;/p&gt;




&lt;p&gt;Carefully curated data is critical in the development of any great computer vision model. At SiaSearch, we are determined to accelerate ADAS development by empowering engineers with full access and visibility into their data.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you found this article interesting, please leave a comment and follow us for similar content. For more information about the SiaSearch platform, please check out our website at &lt;a href="https://www.siasearch.io/"&gt;https://www.siasearch.io/&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nuScenes is available for commercial use under our commercial license agreement. Please reach out to &lt;a href="mailto:nuScenes@motional.com"&gt;nuScenes@motional.com&lt;/a&gt; to learn more.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>datascience</category>
      <category>machinelearning</category>
      <category>aws</category>
    </item>
    <item>
      <title>First Attempt at Intersection Observer</title>
      <author>Yuan-Hsi Lee</author>
      <pubDate>Mon, 12 Apr 2021 01:15:16 +0000</pubDate>
      <link>https://dev.to/yuanleemidori/first-attempt-at-intersection-observer-129i</link>
      <guid>https://dev.to/yuanleemidori/first-attempt-at-intersection-observer-129i</guid>
      <description>&lt;p&gt;Thanks to Pedro, I learned a cool API this week and applied it in our favorite project &lt;a href="https://github.com/Seneca-CDOT/telescope"&gt;telescope&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was assigned an issue to accomplish the new banner design, which is to &lt;a href="https://github.com/Seneca-CDOT/telescope/issues/2041"&gt;make the navbar appear only when the user scroll to the timeline&lt;/a&gt;. In other word, the navbar should not be showed in the banner, but, it should be showed when the first post is at the top of the screen.&lt;/p&gt;

&lt;p&gt;To accomplish this feature, I need to track the element in the current screen. The API that Pedro introduced to me is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;Intersection Observer&lt;/a&gt;. The basic idea of this API is to &lt;strong&gt;observe&lt;/strong&gt; the element in the viewport. The function &lt;code&gt;isIntersecting()&lt;/code&gt; tells you if the element that you're observing is still in the viewport. It doesn't have to 100% in the screen or 100% out of the screen, the observed percentage can be configured as well.&lt;/p&gt;

&lt;p&gt;Therefore, since our goal is to show the navbar when the user scrolls to the timeline, and the first post is at the top of the screen. In other word, the navbar should be showed when the banner is totally gone. We put the observer to our banner.&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://github.com/Seneca-CDOT/telescope/pull/2094"&gt;this PR&lt;/a&gt;, I move &lt;code&gt;&amp;lt;navbar&amp;gt;&lt;/code&gt; into &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;, so that I can separate it from the &lt;code&gt;&amp;lt;Banner&amp;gt;&lt;/code&gt;. Moreover, to add props for &lt;code&gt;&amp;lt;Banner&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;navbar&amp;gt;&lt;/code&gt; in order to share the result of intersection observer. After moving the position of navbar, I also need to add navbar to about page and search page, because all pages used to share the navbar when it was in the banner header. The other changes that needed to make is the CSS styling of navbar in about page. In about page, &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; uses a certain color from our palettes. Once we move navbar to about page, the navbar will be applied with these color because navbar icons all have &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; in their links. By adding another styling setting to &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;, the color can be overridden. I'm still thinking if there is a better way to do so, since the original styling for navbar should not be overridden, and the solution should not be overridden to correct.&lt;/p&gt;

&lt;p&gt;It was an amazing experience to work with something new. Thanks to Pedro and Dave's help and suggestion in this PR! The initial thought was actually using React context. However, it &lt;em&gt;is&lt;/em&gt; too complicated to use, and since we only need to share the state with one component, we can do it without using context. But, I'm definitely gonna check out more practices of React context.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>ui</category>
      <category>intersectionobserver</category>
    </item>
    <item>
      <title>Turn Anything Into A Form Field With React Hook Form Controller</title>
      <author>Erik Lyngved</author>
      <pubDate>Mon, 12 Apr 2021 01:02:43 +0000</pubDate>
      <link>https://dev.to/elyngved/turn-anything-into-a-form-field-with-react-hook-form-controller-42c</link>
      <guid>https://dev.to/elyngved/turn-anything-into-a-form-field-with-react-hook-form-controller-42c</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover image photo by &lt;a href="https://unsplash.com/@chrisjdavis?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Chris J. Davis&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/computer-form?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://react-hook-form.com/"&gt;React Hook Form&lt;/a&gt; has quickly become my favorite library to wrangle forms of all shapes and sizes, mainly for its great developer experience. The 30 second screencast on their home page nicely illustrates how to integrate it into a standard form using the magic of &lt;code&gt;register&lt;/code&gt; to connect each field. When using native &lt;code&gt;&amp;lt;input/&amp;gt;&lt;/code&gt; components, it's pretty simple to get up and running.&lt;/p&gt;

&lt;p&gt;But in the real world, we often don't work with vanilla inputs. Popular UI libraries often abstract and wrap any underlying form elements, making it hard or impossible to use with &lt;code&gt;register&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Sometimes we want to delight our users with a custom interactive component, like rating a product with 5 actual star icons instead of a boring select box. How can we connect these to an existing form without messy logic?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#enter-the-controller"&gt;
  &lt;/a&gt;
  Enter the Controller
&lt;/h1&gt;

&lt;p&gt;The library exports a &lt;code&gt;&amp;lt;Controller/&amp;gt;&lt;/code&gt; component which was made for exactly this purpose. It allows us to connect any component to our form, enabling it to display and set its value.&lt;/p&gt;

&lt;p&gt;To use it, you'll need the &lt;code&gt;control&lt;/code&gt; object returned from &lt;code&gt;useForm()&lt;/code&gt; instead of &lt;code&gt;register&lt;/code&gt;. Also, as usual, you'll need a &lt;code&gt;name&lt;/code&gt; to tell the form which field we are controlling. Finally, the &lt;code&gt;render&lt;/code&gt; prop is where we place our component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Controller syntax&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;control&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Controller&lt;/span&gt;
    &lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;myField&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Custom field component goes here */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#making-the-field-component"&gt;
  &lt;/a&gt;
  Making the Field Component
&lt;/h1&gt;

&lt;p&gt;Why is it called &lt;code&gt;Controller&lt;/code&gt;? It could be because our field component needs to be a &lt;em&gt;&lt;a href="https://reactjs.org/docs/forms.html#controlled-components"&gt;controlled component&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In a nutshell, a controlled component is one that gets and sets its current "state" via props. In the case of a form field, that state is the field's current value.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input/&amp;gt;&lt;/code&gt; is one example of a component that can be controlled. We tell the input what its current value is, and we give it a way to tell us when that value should be changed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// &amp;lt;input/&amp;gt; as a controlled component in a standard React form&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setVal&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
    &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setVal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
  &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we see the two props required to make our field component work with the Controller:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;value&lt;/code&gt; - It should show the current value of the field.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onChange&lt;/code&gt; - It should be able to tell the Controller when a change to the current value is made.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These also happen to be two of the properties handed to us by the &lt;code&gt;render&lt;/code&gt; function! Its signature includes a &lt;code&gt;field&lt;/code&gt; object which has &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;onChange&lt;/code&gt; (among other things).&lt;/p&gt;

&lt;p&gt;It doesn't make much sense to use the Controller for a basic input, but here it is for illustration purposes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Using a basic input in a Controller&lt;/span&gt;
&lt;span class="c1"&gt;// (though you can just use `register` here)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;control&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Controller&lt;/span&gt;
      &lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;myField&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{({&lt;/span&gt; &lt;span class="nx"&gt;field&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="c1"&gt;// Equivalent to &amp;lt;input value={field.value} onChange={field.onChange} /&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: if you're using React Hook Form V6 or earlier, the function signature here is slightly different. &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;onChange&lt;/code&gt; are instead top-level properties of the argument, looking like the following instead.&lt;/p&gt;


&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// V6 or earlier&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#real-examples"&gt;
  &lt;/a&gt;
  Real Examples
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#using-a-ui-library-material-ui"&gt;
  &lt;/a&gt;
  Using a UI library: Material UI
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/rhf-controller-material-ui-9ik00"&gt;Check out the full example on Code Sandbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many projects use form inputs from popular UI libraries like &lt;a href="https://material-ui.com/"&gt;Material UI&lt;/a&gt;. The problem is that any &lt;code&gt;&amp;lt;input/&amp;gt;&lt;/code&gt; components are usually hidden from us, so we can't use &lt;code&gt;register&lt;/code&gt; to connect them to our form. This is where Controller comes in!&lt;/p&gt;

&lt;p&gt;Often they will use the same &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;onChange&lt;/code&gt; props we're used to seeing.&lt;/p&gt;

&lt;p&gt;If this is the case, we can simply spread the &lt;code&gt;{...field}&lt;/code&gt; object into the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Using a Material-UI TextField component&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Controller&lt;/span&gt;
  &lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;myTextField&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{({&lt;/span&gt; &lt;span class="nx"&gt;field&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TextField&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sometimes the props are not named the same. For example, Checkbox accepts its value as &lt;code&gt;checked&lt;/code&gt; instead of &lt;code&gt;value&lt;/code&gt;. This means we can't easily spread &lt;code&gt;field&lt;/code&gt; into it, but the result is still fairly easy to put together.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Using a Material-UI Checkbox component&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Controller&lt;/span&gt;
  &lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;myCheckbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{({&lt;/span&gt; &lt;span class="na"&gt;field&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="p"&gt;}})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Checkbox&lt;/span&gt; &lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-from-scratch-a-five-star-rating-field"&gt;
  &lt;/a&gt;
  Building from scratch: a five star rating field
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/rhf-controller-5-stars-lyef7"&gt;Check out the full example on Code Sandbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We've all probably used the ubiquitous widget that allows us to rate anything by clicking on a row of star icons. Thankfully, if we are just able to create a controlled component, we can cleanly fit it into the rest of the form.&lt;/p&gt;

&lt;p&gt;Let's pretend we have a simple &lt;code&gt;StarIcon&lt;/code&gt; component that renders a single star icon. It accepts a &lt;code&gt;active&lt;/code&gt; boolean prop that tells it whether the icon should be filled in or not, and it can be clicked to fire an &lt;code&gt;onClick&lt;/code&gt; handler. If we use the &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;onChange&lt;/code&gt; props as provided by the Controller's &lt;code&gt;field&lt;/code&gt;, we can construct a line of stars like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Our controlled five star field component&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FiveStarField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StarIcon&lt;/span&gt; &lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StarIcon&lt;/span&gt; &lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StarIcon&lt;/span&gt; &lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StarIcon&lt;/span&gt; &lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StarIcon&lt;/span&gt; &lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we're using the usual props, we can simply pass this into the Controller with &lt;code&gt;render={({ field }) =&amp;gt; &amp;lt;FiveStarField {...field} /&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Using &lt;code&gt;&amp;lt;Controller/&amp;gt;&lt;/code&gt; and a properly controlled component, you can make pretty much anything into a form field compatible with React Hook Form. The field can be as simple or fancy as you want, with any logic encapsulated in it, as long as it does these two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Receive and render the current value/state of the field, commonly through the &lt;code&gt;value&lt;/code&gt; prop.&lt;/li&gt;
&lt;li&gt;Call a function when that value should be updated, commonly through the &lt;code&gt;onChange&lt;/code&gt; prop.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>forms</category>
      <category>reacthookform</category>
    </item>
    <item>
      <title>Parameter passing in C++</title>
      <author>Dave Amiana</author>
      <pubDate>Mon, 12 Apr 2021 01:01:21 +0000</pubDate>
      <link>https://dev.to/iamdeb25/parameter-passing-in-c-4ibn</link>
      <guid>https://dev.to/iamdeb25/parameter-passing-in-c-4ibn</guid>
      <description>&lt;p&gt;C++ offers a myriad of configuration that enhances performance. Most of these can be traced with the idea of &lt;em&gt;pointers and references&lt;/em&gt;. Pointers and references are tools for memory management that allow us to work closely with the hardware. They are beneficial in many ways but using them introduces overhead for the programmer. In other words, using pointers and references adds more responsibility for the programmer as they must assure what values their pointers are referencing towards, whatever happens when the value changes, and what resources will get affected. In large projects, it can be very difficult to keep track of the resources that depend on your function, class, or variable. &lt;/p&gt;

&lt;p&gt;To resolve this, the programmer must familiarize themselves with the techniques the language supported for maintaining efficiency and ease of use. After all, pointers and references deserve their own right to be included in a high-performing language like C/C++. In this blog, I'll introduce different types of parameter passing and their use-cases. &lt;/p&gt;

&lt;p&gt;Since this topic is closely related to the &lt;a href="https://docs.microsoft.com/en-us/cpp/cpp/scope-visual-cpp#:~:text=When%20you%20declare%20a%20program,visible%20within%20that%20function%20body."&gt;scopes of variables&lt;/a&gt; and stack frames, it is important to note that resources that are local to the function are freed after the function is executed. So, returning references to local resources within a function can be problematic which often causes a compilation error. &lt;/p&gt;

&lt;p&gt;Generally, there two means of passing an argument to a function: pass by value, and pass by reference. But the concept of constness in C++ deserves its room for this discussion and we shall see more of that later. &lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#passing-by-value-raw-void-functiontype-type-endraw-"&gt;
  &lt;/a&gt;
  passing by value &lt;code&gt;void function(Type _type);&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Passing an argument by value requires the program to copy the value of the type the argument has taken on. The main benefit of this method to the programmer is that they would not have to worry about incurring unintended changes anywhere else in their program. Local changes on the &lt;code&gt;_type&lt;/code&gt; are ensured to only &lt;em&gt;live&lt;/em&gt; within the scope of a function. &lt;/p&gt;

&lt;p&gt;Consider the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void function(int _a){
   std::cout&amp;lt;&amp;lt; a &amp;lt;&amp;lt;std::endl;
}
int main(){
    int a = 5;
    function(a);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the program, the &lt;code&gt;function&lt;/code&gt; has copied the value of &lt;code&gt;a&lt;/code&gt;, whenever we make changes on the value of &lt;code&gt;_a&lt;/code&gt; within the scope of the program, that will not incur changes on the variable &lt;code&gt;a&lt;/code&gt; that we declared on our main function. &lt;/p&gt;

&lt;p&gt;On the other hand, for enormous types, copying can take time. We pay for this extra amount of resources as they take a toll on our performance, and we don't want that. So, what can we do?&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#passing-by-reference-raw-void-functiontype-type-endraw-or-raw-void-functiontype-amptype-endraw-"&gt;
  &lt;/a&gt;
  passing by reference &lt;code&gt;void function(Type *_type)&lt;/code&gt; or &lt;code&gt;void function(Type &amp;amp;_type)&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Passing by reference allows seamless transaction of resources between functions. By seamless, I meant the program no longer copies the value of &lt;code&gt;_type&lt;/code&gt;. Instead, it takes note of the memory address of that type and uses it thereafter. The catch is: whenever we make changes on &lt;code&gt;_type&lt;/code&gt;, it manifests anywhere else on our program within which &lt;code&gt;_type&lt;/code&gt; is used. &lt;/p&gt;

&lt;p&gt;Think of sharing a sheet of paper with your friend, any kind of changes done on that sheet of paper may be irreversible. And that's what we ought to look for since our responsibility extends to keeping track of the functions that share on one piece of resources. In passing by reference, we are allowing our functions to rewrite &lt;code&gt;_type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Consider the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void function(int *ptr){
    std::cout&amp;lt;&amp;lt; *(ptr) &amp;lt;&amp;lt;std::endl;
    *ptr += 1;
}

void function(int &amp;amp;a){
    std::cout&amp;lt;&amp;lt; a &amp;lt;&amp;lt;std::endl;
    a += 1;
}

int main(){
    int *ptr = nullptr;
    int a = 5;
    ptr = &amp;amp;a;

    function(ptr);
    function(a);

    std::cout&amp;lt;&amp;lt; a &amp;lt;&amp;lt; std::endl;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The program outputs &lt;code&gt;5,6,7&lt;/code&gt; as we updated the value of &lt;code&gt;ptr&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; which points to the same memory address where the initial value was &lt;code&gt;5&lt;/code&gt;. In many situations, we may want to consider the concept of sharing a single piece of resources. For instance, we may want to update &lt;code&gt;_type&lt;/code&gt; such as keeping a record of time per transaction. &lt;/p&gt;

&lt;p&gt;But what if we want to restrict our references in a way that we guarantee that a function cannot change whatever the initial value of that reference? In this situation, we should consider passing an argument by &lt;code&gt;const reference&lt;/code&gt;.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#passing-by-raw-const-endraw-reference-raw-void-functionconst-type-amptype-endraw-or-raw-void-functionconst-type-type-endraw-"&gt;
  &lt;/a&gt;
  passing by &lt;code&gt;const&lt;/code&gt; reference &lt;code&gt;void function(const Type &amp;amp;_type)&lt;/code&gt; or &lt;code&gt;void function(const Type *_type)&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Passing by const reference imposes a restriction that the value of our references is not allowed to be changed. This makes them &lt;em&gt;read-only&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Consider the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void function(const int *ptr){*ptr += 1;}

void function(const int &amp;amp;a){a += 1;}

int main(){
    int *ptr = nullptr;
    int a = 5;
    ptr = &amp;amp;a;

    function(ptr);
    function(a);

    std::cout&amp;lt;&amp;lt; a &amp;lt;&amp;lt; std::endl;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The program throws a compiler error indicating that references cannot be updated. This type of parameter passing is useful whenever a large &lt;code&gt;_type&lt;/code&gt; is passed on a function as we want to guarantee that the function cannot update the values of &lt;code&gt;_type&lt;/code&gt;. &lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#takeaways"&gt;
  &lt;/a&gt;
  Takeaways
&lt;/h1&gt;

&lt;p&gt;In summary, for small types such as primitive types, passing by value is apt. In situations where we may want to update the values or enormous types, we should consider passing by reference whereas in situations where we want to guarantee that a function cannot change the value of &lt;code&gt;_type&lt;/code&gt;, passing by const reference impose the rule that &lt;code&gt;_type&lt;/code&gt; cannot be updated.&lt;/p&gt;




&lt;p&gt;Image source: Photo by William Fortunato from Pexels&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>programming</category>
    </item>
    <item>
      <title>What are Data Classes in Python?</title>
      <author>dev0928</author>
      <pubDate>Mon, 12 Apr 2021 00:59:33 +0000</pubDate>
      <link>https://dev.to/dev0928/what-are-data-classes-in-python-1lo0</link>
      <guid>https://dev.to/dev0928/what-are-data-classes-in-python-1lo0</guid>
      <description>&lt;p&gt;Data classes is a new feature introduced in Python 3.7. This feature aims to reduce boilerplate code sucs as &lt;code&gt;__init__()&lt;/code&gt; and &lt;code&gt;__eq()__&lt;/code&gt; methods in user-defined Python classes. By using the &lt;code&gt;dataclasses&lt;/code&gt; module’s decorators and functions, one can create concise Python classes. Let’s review the use of the data classes feature with an example.&lt;/p&gt;

&lt;p&gt;Employee class could be declared concisely like shown below with the data classes decorator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dataclasses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dataclass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;base_pay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;
    &lt;span class="n"&gt;tax_rate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;hobbies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default_factory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_pay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;net_pay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;base_pay&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;base_pay&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tax_rate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;net_pay&lt;/span&gt;


&lt;span class="n"&gt;emp1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Doe'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'john.doe@example.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Fishing'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Soccer'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emp1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;#Employee(id=1, first_name='John', last_name='Doe', email='john.doe@example.com', base_pay=10000, tax_rate=0.01, hobbies=['Fishing', 'Soccer']) 
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emp1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calculate_pay&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  &lt;span class="c1"&gt;#9900.0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;@dataclass&lt;/code&gt; decorator above generates &lt;code&gt;init&lt;/code&gt;, &lt;code&gt;repr&lt;/code&gt; and &lt;code&gt;eq&lt;/code&gt; methods by default. &lt;code&gt;@dataclass&lt;/code&gt; generator without any parameters like declared above is equivalent to the below declaration:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unsafe_hash&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frozen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;order&lt;/code&gt; parameter is set to true, it will generate boilerplate methods  &lt;code&gt;lt&lt;/code&gt;, &lt;code&gt;gt&lt;/code&gt;, &lt;code&gt;le&lt;/code&gt;, and &lt;code&gt;ge&lt;/code&gt;. Also, true value supplied to the &lt;code&gt;unsafe_hash&lt;/code&gt; parameter would generate &lt;code&gt;hash&lt;/code&gt; method. &lt;/li&gt;
&lt;li&gt;Dataclasses use the &lt;code&gt;typing&lt;/code&gt; module to define the data type of the declared class fields. However, if one wishes to not specify the field data types, they can use &lt;code&gt;typing.Any&lt;/code&gt; for all of their fields in the class.&lt;/li&gt;
&lt;li&gt;By default, all fields of the class are included in the generated methods. But this can be customizable using field declaration. For example, &lt;code&gt;tax_rate&lt;/code&gt; field in the example is excluded from the &lt;code&gt;init&lt;/code&gt; method.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;tax_rate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Also, we can use the &lt;code&gt;default_factory&lt;/code&gt; parameter to initialize complex data types such as list.&lt;/li&gt;
&lt;li&gt;Dataclasses module has several convenience functions. For example, &lt;code&gt;dataclasses.fields&lt;/code&gt; function provides a list of fields in the form of tuple. Also, &lt;code&gt;dataclasses.asdict&lt;/code&gt; returns a dictionary representation of the supplied object.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Dataclasses&lt;/strong&gt; is one of the powerful features introduced in the recent versions of Python. Here is the &lt;a href="%20https://docs.python.org/3/library/dataclasses.html"&gt;link&lt;/a&gt; for learning more about it's capabilities so you can start using this feature in your projects.&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Python Type Annotations </title>
      <author>Dave Amiana</author>
      <pubDate>Mon, 12 Apr 2021 00:39:24 +0000</pubDate>
      <link>https://dev.to/iamdeb25/python-type-annotations-141n</link>
      <guid>https://dev.to/iamdeb25/python-type-annotations-141n</guid>
      <description>&lt;p&gt;Python 3.10 just announced their &lt;a href="https://docs.python.org/3.10/whatsnew/3.10.html"&gt;release&lt;/a&gt; on April 10 this year. Most of the updates were done to improve the developer experience and maintainability of the codebase. &lt;/p&gt;

&lt;p&gt;We enjoyed the fun of writing Python code for its readable syntax, and user-friendly language design. It was clearly meant for getting rid of type prefix you would normally write in other languages such as C++ or Java. Keep in mind that C++ and Java are compiled languages that necessarily impose a set of grammatical rules for mapping them onto a machine code that you can execute. But Python is a dynamically typed language where the interpreter can infer the type of the entities we are calling out on our function by the concept of &lt;a href="https://bityl.co/6LB9"&gt;duck typing&lt;/a&gt; -- &lt;em&gt;if it walks like a duck and it quacks like a duck, then it must be a duck&lt;/em&gt;. This gives us so much room to focus on the algorithm instead of worrying about an obscure programming syntax in expressing the logic of our code. This is okay for relatively small projects where we could just comment out the type of parameters we expect on our function(or method). But building a maintainable software system with people calls for a better solution than commenting out what their function expects.&lt;/p&gt;

&lt;p&gt;Before we talk about typed annotations in Python, let us first appreciate the elegance of type prefix in other languages so we can get a sense of when to annotate our code. Whereas type prefix can introduce syntax overheads, it is built-in the language for a reason: (1) &lt;a href="https://bityl.co/6LBU"&gt;parsing&lt;/a&gt;, and (2) &lt;a href="https://bityl.co/6LBT"&gt;type-safety&lt;/a&gt;.  In a way, type prefix guards whatever type our function expects to take in and the type it returns for we can generally think of a function as a black box that accepts and returns something. With an imposed typed restrictions to other compiled languages, it enables us to keep the intentionality of our code, that we can guarantee that it is serving its purpose. So, not only that we can clearly write (and read) what goes in and out of our function, but we can also ensure that our function takes in the right types that we specified.&lt;/p&gt;

&lt;p&gt;But how can we adapt this to Python? That's where type annotations come in. &lt;/p&gt;

&lt;p&gt;In the following sections, we will explore some features of Type annotations that Python 3.10 supports. Before we begin, here's how we can annotate a simple function in Python:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# annotated 
def λ(x:int)-&amp;gt;float:
     return x*0.1

# unannotated
def λ(x):
     return x*0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we see in the annotated version of our &lt;code&gt;λ&lt;/code&gt; function, it takes an integer value of &lt;code&gt;x&lt;/code&gt; and returns a value of type &lt;code&gt;float&lt;/code&gt; whereas the unannotated version may require some guessing into what &lt;code&gt;λ&lt;/code&gt; function expects. Consider the same function written in C++:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;float λ(int x){
    return (float)x*0.1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The main benefit we get on type annotations in Python is readability and static analysis. The &lt;a href="https://www.python.org/dev/peps/pep-0484/"&gt;PEP 484&lt;/a&gt;, on Python 3.5 release specified that although Python may potentially support runtime type checking, Python will remain a dynamic language.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-static-analysis-and-how-can-we-do-that-in-python"&gt;
  &lt;/a&gt;
  What is Static analysis and how can we do that in Python?
&lt;/h3&gt;

&lt;p&gt;Static analysis tools are a way to easily detect vulnerabilities without executing a program. This provides an insight into our code without necessarily executing them which automates code quality maintenance. Static analysis tools also automate finding security problems at an early age. So far so great, but how can we use it on our IDE's?&lt;/p&gt;

&lt;p&gt;There are several types of static analysis that exist, and they have different purposes ranging from styling analysis to unused code detection. &lt;a href="https://luminousmen.com/post/python-static-analysis-tools"&gt;Here's an article&lt;/a&gt; I found that explores the ecosystem for Python static analysis.&lt;/p&gt;




&lt;p&gt;Now, let's cover some features of type annotations we can do with Python 3.10. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#new-type-union-operator"&gt;
  &lt;/a&gt;
  New type union operator
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# in previous versions
def λ(x: Union[int, float])-&amp;gt;Union[int, float]:
    return x*2

# in Python 3.10
def λ(x: int | float)-&amp;gt; int | float:
   return x*2

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The new union operator is accepted as the second arguments to &lt;code&gt;isinstance()&lt;/code&gt; and &lt;code&gt;issubclass()&lt;/code&gt; functions as in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; isinstance(1, int | str)
True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#improved-typealias-annotation"&gt;
  &lt;/a&gt;
  Improved TypeAlias Annotation
&lt;/h4&gt;

&lt;p&gt;Type aliasing in Python can now be expressed explicitly. Compare:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# in previous versions
StrCache = 'Cache[str]'  # a type alias
LOG_PREFIX = 'LOG[DEBUG]'  # a module constant
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# in Python 3.10
StrCache: TypeAlias = 'Cache[str]'  # a type alias
LOG_PREFIX = 'LOG[DEBUG]'  # a module constant
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more see: &lt;a href="https://docs.python.org/3.10/whatsnew/3.10.html"&gt;https://docs.python.org/3.10/whatsnew/3.10.html&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#takeaways"&gt;
  &lt;/a&gt;
  Takeaways
&lt;/h2&gt;

&lt;p&gt;While type annotations may introduce syntactical overhead, it improves the readability of our code thereby keeping our intentionality intact. As developers, we want to make our codebase easy to use and difficult to misuse. &lt;/p&gt;




&lt;p&gt;Image source: &lt;a href="https://www.elegantthemes.com/blog/wp-content/uploads/2020/02/000-Online-Code-Editors.png"&gt;https://www.elegantthemes.com/blog/wp-content/uploads/2020/02/000-Online-Code-Editors.png&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>python</category>
    </item>
    <item>
      <title>Portfolio advice</title>
      <author>crfries</author>
      <pubDate>Mon, 12 Apr 2021 00:16:28 +0000</pubDate>
      <link>https://dev.to/crfries/portfolio-advice-4m1o</link>
      <guid>https://dev.to/crfries/portfolio-advice-4m1o</guid>
      <description>&lt;p&gt;Hi everyone! I’ve started to apply at companies and could use some advice on my portfolio. I have been putting in apps like crazy and just not receiving many call backs or interviews. If you could take a look and any criticism is welcomed. Thank you! &lt;a href="http://www.coreys.world"&gt;http://www.coreys.world&lt;/a&gt;&lt;/p&gt;

</description>
      <category>portfolio</category>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Node.js and Firebase: Generating Email Verification Link</title>
      <author>Francisco  Inoque</author>
      <pubDate>Sun, 11 Apr 2021 22:43:56 +0000</pubDate>
      <link>https://dev.to/frantchessico/node-js-and-firebase-generating-email-verification-link-1ci8</link>
      <guid>https://dev.to/frantchessico/node-js-and-firebase-generating-email-verification-link-1ci8</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hi-guys"&gt;
  &lt;/a&gt;
  Hi guys,
&lt;/h3&gt;

&lt;p&gt;In this &lt;strong&gt;API&lt;/strong&gt; I will explain how to generate a link to verify email from using &lt;strong&gt;firebase-admin&lt;/strong&gt; and send this link to the user using &lt;strong&gt;nodemailer&lt;/strong&gt;. Let's start now.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 let's create the email-verification folder, inside the folder we will open the terminal and run the following commands:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;yarn init -y&lt;/code&gt; To start a Nodejs project.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add firebase-admin express nodemail&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add nodemon typescript -D&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/frantchessico/generating-link-to-verify-email-with-firebase-admin"&gt;To configure typescript please visit the project repository&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2 Second, let's create a firebase.ts file&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase-admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;




&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;serviceAccount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializeApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;credential&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;credential&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serviceAccount&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;databaseURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DATABASEURL&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;





  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;adminAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;3 Third, we will create the sendEmail.service.ts file which is the body of the message that will be sent to the user:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nodemailer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;adminAuth&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../config/firebase&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transporter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTransport&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your hsot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3333&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emailVerification&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Francisco&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;



        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;adminAuth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generateEmailVerificationLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailLink&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

                &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;adminAuth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUserByEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;





                &lt;span class="k"&gt;await&lt;/span&gt;  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;transporter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMail&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                  &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Francisco Inoque &amp;lt;accounts@franciscoinoque.tech&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Email Verification&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, to verify your email please, &amp;lt;a href="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;emailLink&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt; click here &amp;lt;/a&amp;gt;`&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;

                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;success_msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;please check in your inbox, we sent verification email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

            &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="p"&gt;}&lt;/span&gt;



&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Fourth, let's create the router.ts file:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;emailVerification&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../services/emailVerification.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/send-email-verification&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;emailVerification&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;And finally we're going to create the server.ts file:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./routes/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;



&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;



&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3033&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is running on http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#thanks-please-clone-the-full-repository-here-and-give-me-a-star"&gt;
  &lt;/a&gt;
  Thanks, please clone the full repository &lt;a href="https://github.com/frantchessico/generating-link-to-verify-email-with-firebase-admin"&gt;here&lt;/a&gt; and give me a star
&lt;/h1&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>firebase</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Difference between =, ==, and === in JavaScript</title>
      <author>Etulan</author>
      <pubDate>Sun, 11 Apr 2021 22:00:35 +0000</pubDate>
      <link>https://dev.to/etulan/difference-between-and-in-javascript-3na2</link>
      <guid>https://dev.to/etulan/difference-between-and-in-javascript-3na2</guid>
      <description>&lt;p&gt;First, What is an operator?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScript &lt;strong&gt;operators&lt;/strong&gt; are used to assign values, compare values, perform arithmetic operations e.t.c. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#classes-of-operators"&gt;
  &lt;/a&gt;
  Classes of Operators
&lt;/h1&gt;

&lt;p&gt;*Assignment Operators&lt;br&gt;
*Arithmetic Operators&lt;br&gt;
*Comparison Operators&lt;br&gt;
*String Operators&lt;br&gt;
*Conditional Operators&lt;br&gt;
*Logical Operators&lt;br&gt;
*Bitwise Operators&lt;br&gt;
*Relational Operators&lt;br&gt;
*Unary Operators and more...&lt;/p&gt;

&lt;p&gt;For this article, I will only focus on those operators that include =, ==, ===.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#assignment-operators"&gt;
  &lt;/a&gt;
  Assignment Operators
&lt;/h1&gt;

&lt;p&gt;Assignment operators assign values to variables in JavaScript. It assigns values to its left operand based on the value of its right operand.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A5zy7qif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kei9vt0afhfwrigczt26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5zy7qif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kei9vt0afhfwrigczt26.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#arithmetic-operators"&gt;
  &lt;/a&gt;
  Arithmetic Operators
&lt;/h1&gt;

&lt;p&gt;They perform an arithmetic operation between numerical variables and/or values. They include &lt;strong&gt;+&lt;/strong&gt;, &lt;strong&gt;-&lt;/strong&gt;, &lt;strong&gt;(*)&lt;/strong&gt;, &lt;strong&gt;(/)&lt;/strong&gt;, &lt;strong&gt;%&lt;/strong&gt;, &lt;strong&gt;++&lt;/strong&gt;, &lt;strong&gt;--&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i3Poe-3R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3sq7ccyvtcw0kk7j1d0g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3Poe-3R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3sq7ccyvtcw0kk7j1d0g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#comparison-operators"&gt;
  &lt;/a&gt;
  Comparison Operators
&lt;/h1&gt;

&lt;p&gt;Comparison operators are used in determining the equality or difference between variables or values. Comparison operators are further divided into two, the equality operators and relational operators.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#equality-operators"&gt;
  &lt;/a&gt;
  Equality Operators
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Equality Operator (==)  &lt;em&gt;equal to&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Inequality operator (!=)  &lt;em&gt;not equal&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Identity operators (===)   &lt;em&gt;equal value and equal type&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;NonIdentity operators (!==) &lt;em&gt;not equal value and not equal type&lt;/em&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#equality-operator-"&gt;
  &lt;/a&gt;
  Equality Operator (==)
&lt;/h3&gt;

&lt;p&gt;This checks whether its two operands are equal and returns a boolean result.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Hv0dxZo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5smjxqqis4hjdqd3vkp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Hv0dxZo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5smjxqqis4hjdqd3vkp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#identity-operator-"&gt;
  &lt;/a&gt;
  Identity Operator ===
&lt;/h3&gt;

&lt;p&gt;The strict equality operator (===) checks whether its two operands are equal and of the same type, returning a Boolean result.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ICIgNzYD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tx1qnzwdisna38bbt803.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ICIgNzYD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tx1qnzwdisna38bbt803.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#differences-between-"&gt;
  &lt;/a&gt;
  Differences between =, ==, ===;
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Firstly, = is an assignment operator whereas the other two are equality (comparison) operators.&lt;/li&gt;
&lt;li&gt;= assigns a value to a variable.
== compares two variables while ignoring the data type of each 
variable.
=== compares two variables in terms of its values and data 
types (string, number).&lt;/li&gt;
&lt;li&gt;= returns a string or number
== returns a boolean expression, true if the values are equal 
and false if they are not.
=== also returns a boolean expression, true if both the values 
and data types are equal and false if either value/datatype is 
not equal.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>zuri</category>
    </item>
    <item>
      <title>Show your style on your Github Readme!</title>
      <author>Ellaine Tolentino</author>
      <pubDate>Sun, 11 Apr 2021 21:45:35 +0000</pubDate>
      <link>https://dev.to/tolentinoel/show-your-style-on-your-github-readme-2129</link>
      <guid>https://dev.to/tolentinoel/show-your-style-on-your-github-readme-2129</guid>
      <description>&lt;h1&gt;
  &lt;a href="#hey-yall"&gt;
  &lt;/a&gt;
  Hey y'all!
&lt;/h1&gt;

&lt;p&gt;If you came across this blog it maybe is a sign to update your GitHub repo and put more of your own coolness to it! &lt;br&gt;
&lt;a href="https://i.giphy.com/media/xTiTngBQncyTMceuXK/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xTiTngBQncyTMceuXK/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Something I discovered recently is that you can style your repo using many things on a markdown file and display it like a landing page on your Github! I love personalizing things I own and this is a great way to show some character on your repo!&lt;/p&gt;

&lt;p&gt;So let's go and I'll show you what elements I used to make mine!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First up..&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-your-repo"&gt;
  &lt;/a&gt;
  Create your repo
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Go to your Github account and create a new repository.&lt;/li&gt;
&lt;li&gt;Name the new repo under your username. (&lt;em&gt;It comes out something like username/username.&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;A note will pop up just like in the photo below that'll let you know you had it right! (&lt;em&gt;In my case, I had a warning since I already made mines.&lt;/em&gt;)
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6uqv0gec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pczsrkdjb93skzlzjz4p.png" alt="Create your repo under your Github username"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#add-icons-amp-stats"&gt;
  &lt;/a&gt;
  Add Icons &amp;amp; Stats
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/anuraghazra/github-readme-stats"&gt;Anurag Hazra's Github&lt;/a&gt; - definitely a good source if you want to apply some Github stats and display your top languages used to any visitor of your page. You can customize size, color and also offers a compact version of each. &lt;/p&gt;

&lt;p&gt;I chose to display my top languages and Github stats in Merko theme. The line of code I added looks like this..&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;![Ellaine's github stats](https://github-readme-stats.vercel.app/api?username=tolentinoel&amp;amp;theme=merko&amp;amp;layout=compact)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Here's what it looks like in day mode.&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_WqnKXyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhvzfmnej9iam2256lam.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_WqnKXyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhvzfmnej9iam2256lam.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And in dark mode..&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--erYDVY4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytjnvrewbkg9ogyuziry.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--erYDVY4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytjnvrewbkg9ogyuziry.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#add-emojis-amp-badges"&gt;
  &lt;/a&gt;
  Add Emojis &amp;amp; Badges
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md"&gt;Emoji Github&lt;/a&gt; - Great resource for a ton of emojis you can put on your markdowns!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md#table-of-contents"&gt;Badges or Shields&lt;/a&gt; - You can definitely use this reference to display your social media &amp;amp; top languages used or your tech stack. See these example badges below!&lt;br&gt;
&lt;a href="https://github.com/tolentinoel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1oOob1BO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/GitHub-100000%3Fstyle%3Dfor-the-badge%26logo%3Dgithub%26logoColor%3Dviolet"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/ellainet/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--imBRhTaX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/LinkedIn-0077B5%3Fstyle%3Dfor-the-badge%26logo%3Dlinkedin%26logoColor%3Dwhite"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#photos"&gt;
  &lt;/a&gt;
  Photos
&lt;/h2&gt;

&lt;p&gt;I haven't really attached a photo on a markdown until recently doing it to my Github repo! Just like on HTML, your code in attaching a photo can look like this;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img src='images/Github_banner.png' alt="banner"&amp;gt;&amp;lt;/img&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result would look like this;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d_CvYf5e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fzluwbbqjyaj7u86o7q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d_CvYf5e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fzluwbbqjyaj7u86o7q.png" alt="Ellaine's Github page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Closer look at the banner&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7ye6i3zL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb12dvutumkrl18jjw15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ye6i3zL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb12dvutumkrl18jjw15.png" alt="Banner made from Canva"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I made the banner design using &lt;a href="https://www.canva.com/"&gt;Canva!&lt;/a&gt; with a LinkedIn banner template.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Last but not least, and probably my favorite..&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#gif-banners"&gt;
  &lt;/a&gt;
  Gif banners
&lt;/h2&gt;

&lt;p&gt;YES!! I actually just tried if putting a gif would work, and it did! Just refer it to your code like an image! I also used Canva to design the animation on this gif.&lt;/p&gt;

&lt;p&gt;In code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img src='[relative path]' alt=""&amp;gt;&amp;lt;/img&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Closer look at the gif&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ER0QWbWP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8poooh7vsctzgstw6ent.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ER0QWbWP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8poooh7vsctzgstw6ent.gif" alt='Gif that says Mabuhay welcome to my page"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hnet.com/video-to-gif/"&gt;Hnet video to gif&lt;/a&gt; - also a good way to convert your video clips into a gif!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://giphy.com/"&gt;Giphy&lt;/a&gt; - Another great resource for gifs or creating your own!&lt;/p&gt;

&lt;p&gt;So that's about all the things I used to upgrade my Github readme profile! I hope it helped you guys put more of your own style on your Github profile and also find ways to vamp up your markdowns!&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

</description>
      <category>github</category>
      <category>codenewbie</category>
      <category>markdown</category>
    </item>
    <item>
      <title>20 tools &amp; resources for getting the right color for your project</title>
      <author>Nicolas Jeremias</author>
      <pubDate>Sun, 11 Apr 2021 21:43:10 +0000</pubDate>
      <link>https://dev.to/niconj/20-tools-resources-for-getting-the-right-color-for-your-project-2cio</link>
      <guid>https://dev.to/niconj/20-tools-resources-for-getting-the-right-color-for-your-project-2cio</guid>
      <description>&lt;p&gt;It all started with me thinking: "I need to revamp my website and add some color urgently!". &lt;/p&gt;

&lt;p&gt;That took me into browsing different sites looking for a nice color combination that would reflect myself in. &lt;/p&gt;

&lt;p&gt;But since I'm a huge procrastinator I ended up listing tools and websites to get the colors instead of actually picking some for my site.&lt;/p&gt;

&lt;p&gt;Here are all the sites I've visited and played a little with in my, procrastinated, journey of finding some colors for myself:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hexcolor"&gt;
  &lt;/a&gt;
  &lt;a href="https://hexcolor.co/palette-generator"&gt;Hexcolor&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://hexcolor.co/palette-generator"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---1Vs41-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8mwd7qpoi8fkdzxhxz96.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pick a color, extract colors from an image, generate beautiful gradients and palettes using this free and complete web tool.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#happy-hues"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.happyhues.co"&gt;Happy Hues&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.happyhues.co"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--odozpbMg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hk8vkkf2dxugl855rtu5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A curated list of beautiful pallets displayed as you change them.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#piggment"&gt;
  &lt;/a&gt;
  &lt;a href="https://piggment.co"&gt;Piggment&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://piggment.co"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BSWA1yg9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvhshm0h74b1djo88zj4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create your own gradient or pick one from a pre-built extensive list of nice samples.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#coolors"&gt;
  &lt;/a&gt;
  &lt;a href="https://coolors.co"&gt;Coolors&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://coolors.co"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J1TtPof8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x34732xcdrsmzikm9x6i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A beautiful palette generator, very versatile and with the option of testing how different types of colorblind people would see them.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#colorbox"&gt;
  &lt;/a&gt;
  &lt;a href="https://colorbox.dev"&gt;Colorbox&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://colorbox.dev"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Sxti6cK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uo7on37pxgj4amo5dee2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create shades and tints quickly and in a very customizable way.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#picular"&gt;
  &lt;/a&gt;
  &lt;a href="https://picular.co"&gt;Picular&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://picular.co"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T2BCr47C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9a97w8v5shr6iil9int.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just type the name of what you want to get a color from and Picular will give you back a list of colors matching your search!&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#trianglify"&gt;
  &lt;/a&gt;
  &lt;a href="https://trianglify.io"&gt;Trianglify&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://trianglify.io"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KF4zoapw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqi0so97wpuwt3h8pbx2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, you got me, this one is not necessary under the "color" category, but think these are just mesmerising and wanted to share them.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#cssgradient"&gt;
  &lt;/a&gt;
  &lt;a href="https://cssgradient.io"&gt;Cssgradient&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://cssgradient.io"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oLfIC9G---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ugceclg389m90u51rhog.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Generate your gradient with this friendly and straight to the point tool.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#colorsinspo"&gt;
  &lt;/a&gt;
  &lt;a href="https://colorsinspo.com"&gt;Colorsinspo&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://colorsinspo.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t2aKPI6V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqn6anvunnmh1pk882y5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A full suite of tools, pickers, palettes and also tutorials about color related topics.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#mycolor-space"&gt;
  &lt;/a&gt;
  &lt;a href="https://mycolor.space"&gt;Mycolor Space&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mycolor.space"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OouW8sS8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jghi13se6ru48fanp1zu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Swiftly create a full palette, and several related palettes, from a single color of your choosing.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#colorable"&gt;
  &lt;/a&gt;
  &lt;a href="https://colorable.jxnblk.com"&gt;Colorable&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://colorable.jxnblk.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G4vZSnZx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spxatk8go84pu9j2h74s.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check if your background and font color contrast correctly with this simple but extremely powerful tool. &lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#css-peeper"&gt;
  &lt;/a&gt;
  &lt;a href="https://csspeeper.com"&gt;CSS Peeper&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://csspeeper.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jlH3QqlN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ds5q139pg0r81rx0weem.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you want to extract the colors and inspect the html elements from a site? Then this extension is all you need.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#calcolor"&gt;
  &lt;/a&gt;
  &lt;a href="https://calcolor.co/blend"&gt;Calcolor&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://calcolor.co/blend"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--djqrYxYy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neltwn4g687b21whosjr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Explore the different shades between 2 colors of your choosing.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#gradient-animator"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.gradient-animator.com"&gt;Gradient Animator&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.gradient-animator.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ah8CO9ST--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odrhznurwnk5j9bjucd1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Generate a gradient css animation in no time with this site.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#adobe-color"&gt;
  &lt;/a&gt;
  &lt;a href="https://color.adobe.com/create/color-wheel"&gt;Adobe Color&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://color.adobe.com/create/color-wheel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KUhyA2w8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpxnzj04lyoxdd5ywo98.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Explore trends and create your own color palettes with this extremely and easy to use chromatic wheel by Adobe (they also have a chromatic-simon-says if you feel up to the challenge).&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#css-matic"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.cssmatic.com"&gt;CSS Matic&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.cssmatic.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fK0v4y0Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zk6j3ehcz1gc0k5afpuz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not only you’ll get a gradient generator, but also you can play around with a very helpful Border Radius and Box Shadow sandbox.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#muzli-colors"&gt;
  &lt;/a&gt;
  &lt;a href="https://colors.muz.li"&gt;Muzli Colors&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://colors.muz.li"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JVZhOndM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kkfgc427ue97qkzhpfvy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pick a color and several palettes will be generated for you.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#make-tints-and-shades"&gt;
  &lt;/a&gt;
  &lt;a href="https://maketintsandshades.com"&gt;Make Tints and Shades&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://maketintsandshades.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nfuLw0q7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofll6fmvpvth0txve9ck.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get your tints and shades based on one, or several, base colors.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#shadowlord"&gt;
  &lt;/a&gt;
  &lt;a href="https://noeldelgado.github.io/shadowlord/#89467d"&gt;Shadowlord&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://noeldelgado.github.io/shadowlord/#89467d"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xqv4T4ug--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/13mwfdvp738k7brl606z.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dynamic and straight to the point tints &amp;amp; shades generator.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#mdigi-tools"&gt;
  &lt;/a&gt;
  &lt;a href="https://mdigi.tools/color/"&gt;Mdigi Tools&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mdigi.tools/color/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f1F2Gv5L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y651ocvl5in7632wuvaw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A full suite, not only with several color tools, but also with dev, design and writing tools among others.&lt;/p&gt;




&lt;p&gt;I hope them help you finding the best color combination for your project!&lt;/p&gt;

</description>
      <category>color</category>
      <category>css</category>
      <category>palette</category>
      <category>design</category>
    </item>
  </channel>
</rss>
