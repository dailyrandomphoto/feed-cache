<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Tutorial: Make an Heart "clicker" with vue.js and firebase</title>
      <author>Shai Angress</author>
      <pubDate>Sat, 30 Jan 2021 17:42:55 +0000</pubDate>
      <link>https://dev.to/venatus/tutorial-make-an-heart-clicker-with-vue-js-and-firebase-3npe</link>
      <guid>https://dev.to/venatus/tutorial-make-an-heart-clicker-with-vue-js-and-firebase-3npe</guid>
      <description>&lt;p&gt;Hi!&lt;br&gt;
In this tutorial you will learn how to make a "heart clicker" interaction/game!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AhcYbJNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r01ikf4zg5j5ffh2d523.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AhcYbJNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r01ikf4zg5j5ffh2d523.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
This tutorial can be a good practice for anyone who want to learn javascript, vue, web-development, it can also fit experience developers who needs a little refreshment.&lt;br&gt;
To make this tutorial work for your best, please prepare the following, I'll be waiting here:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- Vue app (you can use &lt;a href="https://cli.vuejs.org/guide/installation.html"&gt;vue-cli&lt;/a&gt;).&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;- firebase project and App (we'll setup it later).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ok good, now we're ready to start.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1 - Create the heart&lt;/strong&gt;&lt;br&gt;
In this part we'll focus on drawing the heart using javascript canvas element.&lt;br&gt;
Create a new component, name it HeartClicker and replace all the App.vue template with this component, so your app template should look like follow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;HeartClicker&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Add a canvas element to your template, you can wrap it with a div for later use.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; 
      &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"heart"&lt;/span&gt; 
      &lt;span class="na"&gt;:width=&lt;/span&gt;&lt;span class="s"&gt;"width"&lt;/span&gt; 
      &lt;span class="na"&gt;:height=&lt;/span&gt;&lt;span class="s"&gt;"height"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Now, define the width and height properties for the heart in your component's data:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Drawing the heart will be done in the mounted method, which will be called after view is rendered, according to Vue &lt;a href="https://vuejs.org/v2/api/#mounted"&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Called after the instance has been mounted, where el is replaced by the newly created vm.$el. If the root instance is mounted to an in-document element, vm.$el will also be in-document when mounted is called.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Grabbing the html canvas to draw the heart:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#heart&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beginPath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bezierCurveTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bezierCurveTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;62.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;62.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bezierCurveTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bezierCurveTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;62.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bezierCurveTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;62.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bezierCurveTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#FF0000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// heart color&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// fill the shape we draw&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Check your browser, it should display a heart:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dxgx4ZNk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/24tppih9b34w79bdztug.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dxgx4ZNk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/24tppih9b34w79bdztug.png" alt="HEART"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 2 - firebase setup&lt;/strong&gt;&lt;br&gt;
Add a realtime database in &lt;strong&gt;test mode&lt;/strong&gt; for now (you can change it later).&lt;br&gt;
Create a field name 'count' with value of zero:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pRTNRmRe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qnvts43t7lhtrqy3179q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pRTNRmRe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qnvts43t7lhtrqy3179q.gif" alt="firebase count"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now add firebase to your project with npm or yarn:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i firebase
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;In the &lt;strong&gt;src&lt;/strong&gt; folder create a new folder &lt;strong&gt;services&lt;/strong&gt; and add a file &lt;strong&gt;ClickCountManager.js&lt;/strong&gt;.&lt;br&gt;
Separating the logic for firebase is a good practice, you can use this script in other projects that are not vue.&lt;br&gt;
ClickCountManager.js:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firebaseConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializeApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firebaseConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firebaseCountRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/count&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;registerToCounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;firebaseCountRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;snapshot&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;onValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;snapshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;firebaseCountRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;addClick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;registerToCounts&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Copy the firebaseConfig from firebase settings under &lt;em&gt;'your apps'&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's analyze the script.&lt;br&gt;
First we initialize the firebase app using &lt;code&gt;firebase.initializeApp(firebaseConfig)&lt;/code&gt; function, then we reference to firebase database and the count field that we created earlier in our realtime database:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firebaseCountRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/count&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;registerToCounts&lt;/strong&gt; function will be used to get updates to the global counter that we save in firebase.&lt;br&gt;
&lt;strong&gt;addClick&lt;/strong&gt; function adds and save a new click to our count field.&lt;br&gt;
We export these functions to use in our HeartClicker component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 3 - use firebase in our component&lt;/strong&gt;&lt;br&gt;
Now that we have firebase ready and set we can use it in our HeartClicker component.&lt;br&gt;
Go back to the HeartClicker component, import ClickCountManager methods:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;addClick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;registerToCounts&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../services/ClickCountManager&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Add a new globalClicks field to our data:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;globalClicks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;then add a new 'onClick' handler &lt;a href="https://v1.vuejs.org/guide/events.html#Method-Handler"&gt;method&lt;/a&gt; in HeartClicker component:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;addClick&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Attach the method to the canvas element:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; 
        &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"heart"&lt;/span&gt; 
        &lt;span class="na"&gt;:width=&lt;/span&gt;&lt;span class="s"&gt;"width"&lt;/span&gt; 
        &lt;span class="na"&gt;:height=&lt;/span&gt;&lt;span class="s"&gt;"height"&lt;/span&gt; 
        &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"onClick"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{globalClicks}}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;And lastly, register to count updates in the created function of your component:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;created&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;registerToCounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;globalClicks&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;globalClicks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;globalClicks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;I register to counts in the [created] lifecycle hook (&lt;a href="https://vuejs.org/v2/api/#created"&gt;https://vuejs.org/v2/api/#created&lt;/a&gt;) so we'll have that data before the component mounts. I recommend to have a look at Vue &lt;a href="https://vuejs.org/v2/guide/instance.html#Lifecycle-Diagram"&gt;lifecycle diagram&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Open the browser and click the heart, you should see the count field in firebase and the globalCount property update.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;br&gt;
What you've learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a Vue component&lt;/li&gt;
&lt;li&gt;Use data in a Vue component&lt;/li&gt;
&lt;li&gt;Vue lifecycle&lt;/li&gt;
&lt;li&gt;Use and integrate firebase realtime database
I hope you enjoyed this tutorial, please write your thoughts/feedback in the discussion below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Bonus Level! - add "juice"&lt;/strong&gt;&lt;br&gt;
If you want to spice things up, you can continue to the bonus level where you will learn how to add "juice" to your heart by using some simple css and canvas particles.&lt;br&gt;
The bonus level is in another post:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/venatus" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UTnt9XId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Q5xwUWvb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/568230/13ef0f38-b6d7-4b0c-abde-52b1586496e0.jpeg" alt="venatus image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/venatus/bonus-level-vue-js-and-firebase-heart-click-3ep" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Bonus Level - vue.js and firebase "Heart Click"&lt;/h2&gt;
      &lt;h3&gt;Shai Angress ・ Jan 30 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vue&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#firebase&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;You can grab the source here: &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/sangress"&gt;
        sangress
      &lt;/a&gt; / &lt;a href="https://github.com/sangress/vue_heart_clicker"&gt;
        vue_heart_clicker
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Heart "clicker" with vue.js and firebase
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>html</category>
      <category>firebase</category>
      <category>vue</category>
    </item>
    <item>
      <title>Why You Should Be Writing React Custom Hooks</title>
      <author>Dave M</author>
      <pubDate>Sat, 30 Jan 2021 16:14:48 +0000</pubDate>
      <link>https://dev.to/sevenzark/why-you-should-be-writing-react-custom-hooks-5egl</link>
      <guid>https://dev.to/sevenzark/why-you-should-be-writing-react-custom-hooks-5egl</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZCHxUopw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jcu3xk99jeyboblnv640.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZCHxUopw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jcu3xk99jeyboblnv640.png" alt="React Custom Hooks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You’re probably familiar with built-in React hooks like useEffect and useState. But have you explored writing custom hooks? Or thought about why you would want to?&lt;/p&gt;

&lt;p&gt;“No, why would I?” You might ask. And since you’re playing along so kindly, I’ll tell you!&lt;/p&gt;

&lt;p&gt;Custom hooks are a handy way to encapsulate hook-related logic that can be re-used across components when using component composition isn’t really something that will help, make sense, or just "look" semantically right. &lt;/p&gt;

&lt;p&gt;Think of a custom hook as a super-powered helper function. According to the &lt;a href="https://reactjs.org/docs/hooks-rules.html"&gt;rules of hooks&lt;/a&gt;, you can't call a hook (like useEffect) in an ordinary helper function that is declared outside of a component. But you &lt;em&gt;can&lt;/em&gt; call hooks inside custom hooks!&lt;/p&gt;

&lt;p&gt;Additionally, if you have a component in which you have two or more separate pieces of useEffect logic going on, you might want to consider putting them into custom hooks to separate and name them, even if this isn’t logic that will be shared by any other component.&lt;/p&gt;

&lt;p&gt;This is much like encapsulating logic into a well-named function for the sake of readability and code organization. After all, it’s a bit tough to read a string of useEffect routines and understand what’s going on. But if, on the other hand, you have one called something like useSyncCustomerRecordStore, then your consumer code is that much more readable.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#headless-components" class="anchor"&gt;
  &lt;/a&gt;
  Headless Components
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PGJbBWAr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6hksqpmi6bsk3kxh3876.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PGJbBWAr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6hksqpmi6bsk3kxh3876.png" alt="Headless Components"&gt;&lt;/a&gt;&lt;br&gt;
It’s not quite a perfect comparison, but in a way, you can think of custom hooks as being a bit like headless components. Mostly because they can call hooks themselves, such as useEffect and useState. These built-in React hooks can work in custom hooks the same way they work in components.&lt;/p&gt;

&lt;p&gt;The difference between a custom hook and a component is that a custom hook will return values, not React components or markup. In this way, they’re sort of like component helpers.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-shape-of-a-custom-hook" class="anchor"&gt;
  &lt;/a&gt;
  The Shape Of A Custom Hook
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aF1gwn-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1ib0zmhl15i28wqe4b5m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aF1gwn-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1ib0zmhl15i28wqe4b5m.png" alt="Shape Of A Hook"&gt;&lt;/a&gt;&lt;br&gt;
Custom hooks are really just:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Functions whose names begin with 'use...'&lt;/li&gt;
&lt;li&gt;Functions which can call other hooks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A simple custom hook might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Custom hook code&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useMyCustomHook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someDataKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;someValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSomeValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setSomeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;useSomeOtherHook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someDataKey&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;someDataKey&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;someNewValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Consumer component code&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyAwesomeComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;someDataKey&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMyCustomHook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someDataKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;someValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#example-page-data" class="anchor"&gt;
  &lt;/a&gt;
  Example: Page Data
&lt;/h1&gt;

&lt;p&gt;I’m currently working on an enterprise application suite realized in the form of micro-service applications. To the user, it seems like one large application, but really, under the hood, it’s a collection of several independent React apps.&lt;/p&gt;

&lt;p&gt;These apps need to refer to each others’ pages with links and common titles, and that data — called pageData — is set up in a context provider so that any component at any level in the apps can access it with a useContext hook.&lt;/p&gt;

&lt;p&gt;Now, it is pretty simple to use this data without writing a custom hook. All a consumer component has to do is import the PageDataContext and then call useContext on it, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// External Libraries&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// App Modules&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PageDataContext&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./PageDataContext&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pageData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PageDataContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pageData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#okay-so-why-use-a-custom-hook-for-this" class="anchor"&gt;
  &lt;/a&gt;
  Okay, So Why Use A Custom Hook For This?
&lt;/h2&gt;

&lt;p&gt;Okay, so that's pretty simple, right? It's only three lines of code: two import statements, and a call to useContext. In that case, why am I still recommending a custom hook for a situation like this?&lt;/p&gt;

&lt;p&gt;Here are a few reasons, from least to most important:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#eliminating-boilerplate-adds-up" class="anchor"&gt;
  &lt;/a&gt;
  Eliminating Boilerplate Adds Up
&lt;/h3&gt;

&lt;p&gt;If you just look at this one example, I'm only eliminating one line of boilerplate, because I will still have to import my custom hook, usePageData. I only really eliminate the line that imports useContext.&lt;/p&gt;

&lt;p&gt;So what's the big deal? The thing is, just about every page in my enterprise app suite needs to use this pageData object, so we're talking hundreds of components. If we eliminate even one line of boilerplate from each one, we're talking hundreds of lines. &lt;/p&gt;

&lt;p&gt;And believe me, just writing that extra line every time I create a new page feels that much more annoying, so there's a sort of pscychological/motivational benefit that adds up over time, too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wellnamed-functions" class="anchor"&gt;
  &lt;/a&gt;
  Well-Named Functions
&lt;/h3&gt;

&lt;p&gt;If you've used hooks like useEffect much in your code, you've probably come across situations where there are two or three pieces of useEffect logic (either in separate calls to useEffect, or combined into one). This quickly gets hard to take in when you're reading the code. &lt;/p&gt;

&lt;p&gt;If you're like me, you wind up putting comments about each piece of useEffect logic, such as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;// Get the page data&lt;/span&gt;
    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...  stuff happens here&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But one of the fundamental concepts of readable code is noticing where you're writing blocks of comments in big dumping ground "main" type functions, and instead separating those pieces of logic into their own, individual, well-named functions. Another developer reading your code is going to have a much easier time taking it all in when these details are abstracted away from the big picture. But when they're ready to drill into detail, they can go look at the function declaration.&lt;/p&gt;

&lt;p&gt;The same is true of custom hooks. If I see this in the component code, I have a pretty good idea of what is going on:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pageData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useGetPageData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#encapsulation" class="anchor"&gt;
  &lt;/a&gt;
  Encapsulation
&lt;/h3&gt;

&lt;p&gt;I've saved the most important reason for last, and that's that it is good to encapsulate the logic in one place. Sure it's only two lines of code, but what if we decide to store pageData in a Redux or Mobx store instead of React Context?&lt;/p&gt;

&lt;p&gt;If we're already using a custom hook, no problem! We just change the internal code in the hook and return the same pageData object back to the consumer code. What we don't have to do is go and update hundreds of components to import, say, useSelector, and then call it instead of useContext.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-usegetpagedata-looks-like" class="anchor"&gt;
  &lt;/a&gt;
  What useGetPageData Looks Like
&lt;/h2&gt;

&lt;p&gt;It's dead simple! Just:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// External Libraries&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// App Modules&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PageDataContext&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./PageDataContext&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useGetPageData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PageDataContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#other-things-you-can-do-with-custom-hooks" class="anchor"&gt;
  &lt;/a&gt;
  Other Things You Can Do With Custom Hooks
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ypd82QxD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gkfe4kdo331g5q5ht0pl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ypd82QxD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gkfe4kdo331g5q5ht0pl.jpg" alt="Creative Hooking"&gt;&lt;/a&gt;&lt;br&gt;
The example I gave for page data is intentionally very basic, but there are many more useful things you can do with custom hooks, such as encapsulating shared logic for updating and reading Redux state. Just think of anything you want to do with hooks but for which you want to avoid a bunch of copy/paste boilerplate, and you're set to start getting creative with it.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>hooks</category>
    </item>
    <item>
      <title>How to become an effective programmer?</title>
      <author>Rishabh Singh</author>
      <pubDate>Sat, 30 Jan 2021 15:43:44 +0000</pubDate>
      <link>https://dev.to/mindninjax/how-to-become-an-effective-programmer-5a00</link>
      <guid>https://dev.to/mindninjax/how-to-become-an-effective-programmer-5a00</guid>
      <description>&lt;p&gt;&lt;strong&gt;How to become an effective programmer?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I know many of has have this question in our minds especially students and people who are new to coding. Now just like any other skill, coding doesn't have a right or wrong way of learning. This is one of the reasons it's easy to get misguided as a beginner. &lt;/p&gt;

&lt;p&gt;So what it actually takes to be an &lt;strong&gt;effective programmer?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2bZIjPGC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d4tvukbt5mra37cvwklk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2bZIjPGC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d4tvukbt5mra37cvwklk.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-take-on-this" class="anchor"&gt;
  &lt;/a&gt;
  My take on this
&lt;/h1&gt;




&lt;p&gt;Here are few tips which have helped me to improve both as a dev &amp;amp; as a student:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start learning about Data Structures &amp;amp; Algorithms early (start with basics)&lt;/li&gt;
&lt;li&gt;Don't skip the maths (knowing basics can go a long way)&lt;/li&gt;
&lt;li&gt;Start building things (learn as you go)&lt;/li&gt;
&lt;li&gt;Collaborate &amp;amp; Code&lt;/li&gt;
&lt;li&gt;Participate in coding competitions &amp;amp; hackathons&lt;/li&gt;
&lt;li&gt;Build an online presence with a developer profile&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#discuss" class="anchor"&gt;
  &lt;/a&gt;
  Discuss
&lt;/h1&gt;




&lt;p&gt;Feel free to share your own tips which have helped you to improve as a developer in the &lt;strong&gt;discussion/comments&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>watercooler</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The Importance of Slowing (Way!) Down as a Junior Software Engineer</title>
      <author>Alex Morton</author>
      <pubDate>Sat, 30 Jan 2021 15:35:01 +0000</pubDate>
      <link>https://dev.to/alexlsalt/the-importance-of-slowing-way-down-as-a-junior-software-engineer-4jei</link>
      <guid>https://dev.to/alexlsalt/the-importance-of-slowing-way-down-as-a-junior-software-engineer-4jei</guid>
      <description>&lt;p&gt;&lt;em&gt;This post was originally published on January 30, 2021 on &lt;a href="https://alexlsalt.github.io/blog"&gt;my blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;I learned a ton this week at work. Seriously, a ton. And I loved every minute of it.&lt;/p&gt;

&lt;p&gt;Well. I loved every minute of it &lt;em&gt;in retrospect&lt;/em&gt;. During the week (and even the past month) it's been a bit of a rollercoaster. But I do love rollercoasters so I've got that going for me.&lt;/p&gt;

&lt;p&gt;This week, one of my major wins was working on my biggest coding push to date (in the context of my new job) and it was a refactoring of several bits of code.&lt;/p&gt;

&lt;p&gt;Along with the refactor itself, I was writing tests in the corresponding spec, and I seriously had &lt;em&gt;zero&lt;/em&gt; experience writing tests.&lt;/p&gt;

&lt;p&gt;Regardless, I took each task as it came. I submitted my code changes for review in GitHub and moved on to another task as I waited for the helpful review comments to come back with further hints in the right direction.&lt;/p&gt;

&lt;p&gt;I pored over the comments and corrections and caught myself when I'd jump a little too quickly at making the changes - before fully and completely understanding the reasons behind the corrections.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;That&lt;/em&gt; was a big shift from this week, actually! Stopping myself and not letting myself move forward on making further changes to my code before understanding every single word on the code review. Not only that, but not letting myself advance before I could potentially explain the reasoning to someone else regarding why a change was being suggested.&lt;/p&gt;

&lt;p&gt;There was a certain magical moment when I consciously caught myself jumping straight into the code without fully understanding it, and I made myself restore the files, go back to the PR, and read the comment twice through, three times through, four, five, six more times through - until it finally clicked.&lt;/p&gt;

&lt;p&gt;And that's the way it should be, too. I was so wrapped up in getting the code written and the PR merged that I wasn't slowing myself down enough to truly understand it.&lt;/p&gt;

&lt;p&gt;But this is exactly what I mean when I say that we usually need to slow all the way down in order to actually go so much faster.&lt;/p&gt;

&lt;p&gt;The act of me submitting more code changes that I didn't understand ran the risk of doing it completely wrong and spending more time than necessary going back-and-forth yet again with the code reviews.&lt;/p&gt;

&lt;p&gt;On the other hand, slowing myself way, way, way down, reading through the corrections and suggestions several times through, and clarifying the suggestions in my own words ended up putting me on the right track and getting the PR approved and merged that much quicker.&lt;/p&gt;

&lt;p&gt;This is such an exciting time, right at the beginning of this career in software engineering - I really feel like I'm drinking it all in and that every single moment at work is a chance to learn something new or take a lesson one level deeper.&lt;/p&gt;




&lt;p&gt;Pssst! I send weekly newsletters about the self-taught coding journey and my own coding adventures (and misadventures!)  &lt;a href="https://ladies-code-collective.ck.page/e53b5fca44"&gt;Sign up here! &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devjournal</category>
      <category>codenewbie</category>
      <category>career</category>
      <category>womenintech</category>
    </item>
    <item>
      <title>Why I Love Notion for Note-taking and Much More</title>
      <author>Brenda Michelle</author>
      <pubDate>Sat, 30 Jan 2021 12:24:03 +0000</pubDate>
      <link>https://dev.to/brendamichellle/why-i-love-notion-for-note-taking-and-much-more-245c</link>
      <guid>https://dev.to/brendamichellle/why-i-love-notion-for-note-taking-and-much-more-245c</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclaimer: I am not sponsored by notion these are all my thoughts and opinion&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you are interested in seeing a detailed video on how I organize and take my notes check out my newest video. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jQDtiWQySJ0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I have always been in love with stationery, notebooks, pens, colorful highlighters, and when I started learning how to code I was excited to color code my notes and get to it. &lt;/p&gt;

&lt;p&gt;However, once I started working on personal projects I realized that handwritten notes were not efficient. I would spend so much time trying to find the specific note that I wanted to reference and even more time trying to decode what my code snippets meant. &lt;/p&gt;

&lt;p&gt;That was when I discovered Notion and my life changed. I went from using countless notebooks and apps to just using one. In this post, I will share with you all the top 5 reasons why I love the Notion app for note-taking and much more. If you are interested in knowing more about what I use notion for check out my Youtube channel or leave a comment below.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-its-digital" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. It’s Digital&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The fact that it is digital and I can access it from anywhere is a huge plus. I can see my notes on my laptop, phone, tablet, or any other device I just need to login into my account. I no longer have to carry a bunch of notebooks and turn countless pages looking for that one note. With the quick find feature, I can find anything in my notes or in any of my pages. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-userfriendly-interface" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. User-friendly Interface&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The interface is extremely user-friendly after a few days of using the app I felt at home. It is simple and clean with a side navbar and all the free space to do whatever comes to mind. You can even completely collapse the navbar on desktop which gives you even more space. &lt;/p&gt;

&lt;p&gt;They also offer free templates that you can use and customize based on your needs. You can also create templates and reuse them. I have created some &lt;a href="https://brendamichellle.com/links.html"&gt;free templates&lt;/a&gt; that you can duplicate and start using for different things. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-endless-possibilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Endless Possibilities&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The possibilities are endless with the Notion app. I personally use notion as my planner, which includes the year, monthly weekly, daily goals, and tasks. I also have a content planner, pages for notes, and templates I’ve made. I have even created a portfolio site with notion. I like going on Youtube or Pinterest and searching “notion setup ” to find inspiration and see what everyone else does with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-all-in-one" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. All- in – one&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;It is the perfect all-in-one workspace. Personally, I love just having one app as my go-to. Before using notion I would use a separate calendar app, a notebook planner, Trello and even a to-do list app. Now all of that is in my Notion account. This has helped me be even more time-efficient. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-an-api-is-coming" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. An API is coming!&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;One of the most exciting reasons why I love and am excited about notion is that they are currently working on an API. Just thinking of all the possibilities gets me so excited. Being able to integrate it into other apps, websites etc.&lt;/p&gt;

&lt;p&gt;If you are looking for an all-in-one workspace where you can take efficient notes and level up your life I 100% recommend the Notion app. If you already use the Notion app let me know in the comments what are your favorite features or what do you use it for? &lt;/p&gt;




&lt;p&gt;I hope this post was helpful. If you have any questions leave them in the comments or if you just want to chat reach out I would love to &lt;a href="https://www.instagram.com/brendamichellle/"&gt;connect&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Photo by &lt;a href="https://unsplash.com/@cathrynlavery?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Cathryn Lavery&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/note-taking?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>I've written an extension so you don't have to Google</title>
      <author>Tomasz Smykowski</author>
      <pubDate>Sat, 30 Jan 2021 11:24:43 +0000</pubDate>
      <link>https://dev.to/tomaszs2/i-ve-wrote-an-extension-so-you-don-t-have-to-google-5485</link>
      <guid>https://dev.to/tomaszs2/i-ve-wrote-an-extension-so-you-don-t-have-to-google-5485</guid>
      <description>&lt;p&gt;Today I have stumbled upon a great article by Austin Z. Henley called "Can you make a basic web app without googling?" &lt;a href="https://web.eecs.utk.edu/~azh/blog/webappwithoutgoogling.html"&gt;read it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The article pretty much sums up what is, in a way, wrong with software development nowadays. Not looking far away, i can tell you how my work looked like in some of teams I have worked in. To add almost any feature I had to Google for technical nuances to find the solution I needed for the given stack. Than I had to look at the documentation, source code, ask several coworkers for additional information. Just to add one little thing.&lt;/p&gt;

&lt;p&gt;For a lot of developers out there it seems like a normal way of doing their job. Spending 90% of time on preparations and information gathering, and 10% on the actual implementation. The proportion becomes even worse if there is someone who has to make a business decision or you have to wait for other things to happen first.&lt;/p&gt;

&lt;p&gt;But the question is, if there is really no other way to approach problems? With several teams i have created during my career, we were able to set up a working environment that lowers preparation costs. The most important way to improve the productivity of a team, is to give every member the right to improve project, either by adding tests, comments, or documentation each time, it took too long to find the answer. Contrary - any limitations make developers either not note their know-how anywhere or putting them in places they are not looking up later.&lt;/p&gt;

&lt;p&gt;One problem that especially gained my attention lately was to find a way, to enable each team member, but also whole team know how inside the source code. In my experience it is the right thing to store it for productivity purpose, because it is the place every developer has in front of his/hers eyes.&lt;/p&gt;

&lt;p&gt;You may consider - why not use comments and structured comments that generate documentation for that purpose? The answer is that often, know-how is not something we consider a comment a good place for it. Let we look at some examples:&lt;/p&gt;

&lt;p&gt;1) An application you are developing uses a set of icons. If you can not find one, that is required by the design, you have to contact John, receive the icon, make sure it has proper format, and put it into a /src/internal/images/icons folder before calling generateIcons script. Often people are stuck at the process, because they forget about something. New members have to learn the process from other members.&lt;/p&gt;

&lt;p&gt;2) The application contains a specific interface IWiredEnumerable instead of standard IEnumerable. Everyone should use the interface as a business requirement. But team members forget about it often.&lt;/p&gt;

&lt;p&gt;3) You often have to use a method defined in an external library. However the method is not documented, so you end up DuckDuckIng documentation every time you use it.&lt;/p&gt;

&lt;p&gt;Now imagine, that before you have wrote some info for you, or for other team members to solve these issue. Where would you place it?&lt;/p&gt;

&lt;p&gt;This is how &lt;a href="https://marketplace.visualstudio.com/items?itemName=tomasz-smykowski.assistant"&gt;Assistant&lt;/a&gt; extension for Visual Studio Code was invented. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-assistant-works" class="anchor"&gt;
  &lt;/a&gt;
  How Assistant works?
&lt;/h1&gt;

&lt;p&gt;Let's go over situations described above, to show how the extension works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-to-1" class="anchor"&gt;
  &lt;/a&gt;
  Solution to 1)
&lt;/h2&gt;

&lt;p&gt;For the first situation you'd like to make sure all members know how to prepare an icon, but you don't want to put a lengthy comment in the code. Also, you know looking through the documentation will take time. So you decide to assist developer when he/she looks at Icon class constructor:&lt;/p&gt;

&lt;p&gt;when: developer views Icon class constructor&lt;br&gt;
than: show message: if icon is not available in /src/internal/images/icons, contact John, make sure he sends SVG. Put it into the above folder and call generateIcons.&lt;/p&gt;

&lt;p&gt;Result: every time a a developer looks a the Icon class constructor, above the line, he/she will see your assistance message. It will be placed in the source code editor above constructor line. It is impossible to miss out!&lt;/p&gt;

&lt;p&gt;Also, since the rule is stored separately than the source code, it does not have to comply to comments and structured comments good practices or even your team specific rules. You are fine to mention John, and give every hint you find useful for the particular situation!&lt;/p&gt;

&lt;p&gt;The example perfectly shows how having Assistant rules liberates team members and embraces everyone to improve coding flow of every developer! He/she does not look in any other place to find the piece of a really important business logic!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-2" class="anchor"&gt;
  &lt;/a&gt;
  Solution 2)
&lt;/h2&gt;

&lt;p&gt;You want to recall every developer to use IWiredEnumerable instead of standard IEnumerable. You decide to assist developers:&lt;/p&gt;

&lt;p&gt;when: developer tries to create object and assign to IEnumerable type&lt;br&gt;
than: display a message to use IWiredEnumerable that takes care about integrity&lt;/p&gt;

&lt;p&gt;Result: if the developer won't remember about using the IWiredEnumerable, he will finish the code with IEnumerable. Maybe, he/she will spend some time duplicating features of IWiredEnumerable. Than  will commit the change, and learn about the rule during a code review. Or even worse: the change will be merged eroding the code standards. Either way the developer will have to spend additional time to rewrite the code to use IWiredEnumerable increasing the risk for mistakes and lowering the performance.&lt;/p&gt;

&lt;p&gt;However, with Assistant rule, the developer will know to use IWiredEnumerable as soon as trying to assign to IEnumerable type. He/she will be happy to switch immediately to the proper interface and finish the task earlier, because IWiredEnumerable contains part of the things he/she expected to write on its own.&lt;/p&gt;

&lt;p&gt;Discussion: such rules can be introduced also with regular linters. However you should be aware writing linter rules is not trivial. Every developer has to learn it to contribute to the know how.&lt;/p&gt;

&lt;p&gt;On the other hand, with Assistant, all you have to write is a rule and message. The rule can be even "IEnumerable&amp;lt;" since it will match every time someone tries to create to assign to IEnumerable. The overheat to write an assistant rule is almost zero.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-to-3" class="anchor"&gt;
  &lt;/a&gt;
  Solution to 3)
&lt;/h2&gt;

&lt;p&gt;That example is one of my favorites. You have once for a while to use an external method called getCost(distance, type,...) located in an external library. Your client shares the method to allow everyone to calculate employee travel cost. All you have to provide is the distance and type. However it is not documented. It accepts kilometers as the distance, and type='e' for external employees and type='i' for internal ones.&lt;/p&gt;

&lt;p&gt;Also it has five more arguments we will ommit now. What you want to make sure is that every developer, including you, will be reminded distance is in kilometers. Especially since you are using meters and miles in your project. Also you'd like to describe other parameters, you use the most to save some time.&lt;/p&gt;

&lt;p&gt;You decide to write an Assistant rule:&lt;/p&gt;

&lt;p&gt;when: a developer writes " getCost("&lt;br&gt;
than: show a message indicating first parameter is distance in kilometers, what values type accepts etc.&lt;/p&gt;

&lt;p&gt;Result: every time you or other developer has to call getCost(, he/she sees an information about parameters. That way the risk of wrong metric unit is lowered, and also productivity is increased because DuckDucking is not required anymore.&lt;/p&gt;

&lt;p&gt;Discussion: The example assumes that you can not write a method that calls getCost() and document it properly. It is the limitation of the example. However still, you can notice that some information about parameters can not fit into formal requirements your team uses for comments and structured comments generating documentation.&lt;/p&gt;

&lt;p&gt;With Assistant you don't have to care what are the formal rules.  You don't have to defend each useful comment you write and waste your energy and time for such nonsense. As the developer, you know what knowledge helps you the most.&lt;/p&gt;

&lt;p&gt;You can gather know-how for your own benefit. It can be stored in personal or preferences project file. None of these has to be committed to the repository. However, when you gather some know-how it is great to introduce the way of work to the whole team, so everyone can enjoy not Googling! Than, the team can share common know-how file, while each member has still a private space for his own know-how.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#extensibility" class="anchor"&gt;
  &lt;/a&gt;
  Extensibility
&lt;/h1&gt;

&lt;p&gt;I am using Assistant now for several months for several projects, and it saved me a lot of Googling. Every time I stumble upon on a knowledge to gather I create a rule. Than, it pays off nicely, when I have every information in place. Also I have onboarded new developers with Assistant rules, and it helped greatly to lower the time to make valuable contributions.&lt;/p&gt;

&lt;p&gt;Since rules can be written as a regular text, or Regex, it is really easy to create them. Also Regex gives some really interesting ways to use the extension for more complex problems.&lt;/p&gt;

&lt;p&gt;If you like the concept, check the extension out: &lt;a href="https://marketplace.visualstudio.com/items?itemName=tomasz-smykowski.assistant"&gt;Assistant&lt;/a&gt;, since it is free and open source, you are welcome to contribute, either with ideas for new features or code contributions. The source code is pretty easy to play with.&lt;/p&gt;

&lt;p&gt;However, if you just want to try it out, all you have to do is install it, and write a simple rule. In case you don't have any ideas, just download some rules that are available at the plugin page.&lt;/p&gt;

</description>
      <category>productivity</category>
    </item>
    <item>
      <title>Setting up Express Server 📡 with TypeScript</title>
      <author>Tejas Nikhar</author>
      <pubDate>Sat, 30 Jan 2021 07:32:59 +0000</pubDate>
      <link>https://dev.to/tejastn10/setting-up-express-server-with-typescript-3dg5</link>
      <guid>https://dev.to/tejastn10/setting-up-express-server-with-typescript-3dg5</guid>
      <description>&lt;p&gt;Express.js is a web application framework that is built on top of Node.js. It provides a minimal interface with all the tools required to build a web application. Express.js adds flexibility to an application with a huge range of modules available on npm that you can directly plug into Express as per requirement.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-a-gitignore-file" class="anchor"&gt;
  &lt;/a&gt;
  Step 1: Create a &lt;strong&gt;.gitignore&lt;/strong&gt; file
&lt;/h3&gt;

&lt;p&gt;Add &lt;em&gt;node_modules/&lt;/em&gt; and &lt;em&gt;.env&lt;/em&gt; in it as we don't want node modules to be pushed to GitHub and also our secret keys to be publicly available.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;node_modules/
.env
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-add-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  Step 2: Add dependencies
&lt;/h3&gt;

&lt;p&gt;You may use &lt;strong&gt;yarn&lt;/strong&gt; or &lt;strong&gt;npm&lt;/strong&gt; (I am using yarn here).&lt;/p&gt;

&lt;p&gt;yarn add                    for  dependencies&lt;/p&gt;

&lt;p&gt;yarn add -D              for dev dependencies&lt;/p&gt;

&lt;p&gt;NOTE: We might add more later on... and discuss them as we move along. Also, the version may be newer for you or some of the packages may be deprecated in the future. Also as we are using typescript we require &lt;em&gt;type-definitions (@types)&lt;/em&gt; of all dependencies we have added&lt;/p&gt;

&lt;p&gt;The dependencies shown below are the basic ones I think are required for the server to be up and running.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"colors"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.4.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"cors"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.8.5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dotenv"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^8.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"express"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.17.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@types/cors"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.8.9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@types/express"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.17.9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"concurrently"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^5.3.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"nodemon"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.0.6"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-create-tsconfigjson-file-and-add-the-following" class="anchor"&gt;
  &lt;/a&gt;
  Step 3: Create tsconfig.json file and add the following
&lt;/h3&gt;

&lt;p&gt;Configuring TypeScript&lt;/p&gt;

&lt;p&gt;You might want to look at the official documentation providing more insights for configuring TypeScript and study more parameters available and use according to your needs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Basic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Options&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"es6"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Specify&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;ECMAScript&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;target&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;version.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"module"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"commonjs"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Specify&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;generation.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"sourceMap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Generates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;corresponding&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'.map'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;file.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"outDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./dist"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Redirect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;structure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;directory.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rootDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./src"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Specify&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;directory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;files.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Strict&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Type-Checking&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Options&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"strict"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;strict&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;type-checking&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;options.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Resolution&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Options&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"moduleResolution"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Specify&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;resolution&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;strategy.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"baseUrl"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Base&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;directory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;resolve&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;non-absolute&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;names.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"paths"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"node_modules/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"src/types/*"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"esModuleInterop"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Advanced&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Options&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"skipLibCheck"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Skip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;checking&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;declaration&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;files.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"forceConsistentCasingInFileNames"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"include"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"src/**/*"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"exclude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"src/types/*.ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node_modules"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;".vscode"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-create-the-main-file" class="anchor"&gt;
  &lt;/a&gt;
  Step 4: Create the main file
&lt;/h3&gt;

&lt;p&gt;Create an &lt;em&gt;src&lt;/em&gt; folder in your directory and add an &lt;em&gt;app.ts&lt;/em&gt; file with the following contents to get your express server up and running.&lt;/p&gt;

&lt;p&gt;Relative Path: &lt;em&gt;src/app.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;colors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;cors&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;API Running...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;` 📡 Backend server: `&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inverse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bold&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
      &lt;span class="s2"&gt;` Running in &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; mode on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-5-setting-up-running-scripts" class="anchor"&gt;
  &lt;/a&gt;
  Step 5: Setting up running scripts
&lt;/h3&gt;

&lt;p&gt;Add the following to the &lt;em&gt;package.json&lt;/em&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"watch-ts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"tsc -w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"server"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nodemon dist/app.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"concurrently -k -p &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;[{name}]&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; -n &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Typescript,Node&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; -c &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;blue.bold,yellow.bold&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;yarn run watch-ts&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;yarn run server&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; "&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now run "&lt;em&gt;yarn run dev&lt;/em&gt; " to start our server and voila we have our server up and running.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B5LLJfo6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hd131ohohpzmsp8e9npd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B5LLJfo6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hd131ohohpzmsp8e9npd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should see this as your output in the terminal and &lt;em&gt;dist/&lt;/em&gt;  directory should appear in your project containing all the JavaScript code with ES6 syntax.&lt;/p&gt;

&lt;p&gt;Also, there's a &lt;a href="https://www.npmjs.com/package/ts-node"&gt;ts-node&lt;/a&gt; package that runs node server using TypeScript files without any need to generate any JavaScript files.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>typescript</category>
      <category>node</category>
    </item>
    <item>
      <title>Animating real world data on an interactive map using Python</title>
      <author>Chris Greening</author>
      <pubDate>Sat, 30 Jan 2021 06:03:26 +0000</pubDate>
      <link>https://dev.to/chrisgreening/animating-real-world-data-on-an-interactive-map-using-python-17pd</link>
      <guid>https://dev.to/chrisgreening/animating-real-world-data-on-an-interactive-map-using-python-17pd</guid>
      <description>&lt;p&gt;In this tutorial, we're going to cover step-by-step how to create an animated map that visualizes real world UK energy consumption per year at the regional level! &lt;/p&gt;

&lt;p&gt;This type of visualization is known as a choropleth and can yield highly visual, comprehensive insights into our data from a geospatial perspective 🌎. &lt;/p&gt;

&lt;p&gt;If you would rather follow along in a Jupyter Notebook, you can find that, as well as the datasets, &lt;a href="https://github.com/chris-greening/tutorials/blob/master/Python/uk-choropleth/uk_choropleth.ipynb"&gt;here&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/chris-greening"&gt;
        chris-greening
      &lt;/a&gt; / &lt;a href="https://github.com/chris-greening/tutorials"&gt;
        tutorials
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;For this tutorial, we'll need three third-party libraries that you'll have to install to follow along!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pandas.pydata.org/"&gt;pandas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plotly.com/python/"&gt;plotly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://geopandas.org/"&gt;geopandas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; &lt;code&gt;geopandas&lt;/code&gt; can be a bit tricky to install if you're a Windows user, check their &lt;a href="https://geopandas.org/install.html"&gt;official installation&lt;/a&gt; instructions or this &lt;a href="https://geoffboeing.com/2014/09/using-geopandas-windows/"&gt;blog post&lt;/a&gt; for guidance (or drop a comment below and I'll try to help!). &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#downloading-our-datasets" class="anchor"&gt;
  &lt;/a&gt;
  Downloading our datasets
&lt;/h1&gt;

&lt;p&gt;If you don't feel like downloading them from the UK government website, you can get them from the repo as well and skip this part:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/chris-greening/tutorials/blob/master/Python/uk-choropleth/Subnational_total_final_energy_consumption_statistics.csv"&gt;Sub-national total final energy consumption statistics: 2005 to 2018 (csv)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chris-greening/tutorials/tree/master/Python/uk-choropleth/NUTS_Level_1_(January_2018)_Boundaries-shp"&gt;NUTS Level 1 (January 2018) Super Generalised Clipped Boundaries in the United Kingdom&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-energy-data" class="anchor"&gt;
  &lt;/a&gt;
  The energy data
&lt;/h3&gt;

&lt;p&gt;The first dataset we are going to download is the &lt;a href="https://www.gov.uk/government/statistics/total-final-energy-consumption-at-regional-and-local-authority-level-2005-to-2018"&gt;Sub-national total final energy consumption statistics: 2005 to 2018 (csv)&lt;/a&gt;. This &lt;em&gt;.csv&lt;/em&gt; contains UK energy consumption data from 2005-2018 broken down to the local administrative level. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7G-3JRSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jcz9antstfr8353yl03p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7G-3JRSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jcz9antstfr8353yl03p.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-regional-shapefile" class="anchor"&gt;
  &lt;/a&gt;
  The regional shapefile
&lt;/h3&gt;

&lt;p&gt;The second dataset we'll need is the &lt;a href="https://geoportal.statistics.gov.uk/datasets/nuts-level-1-january-2018-super-generalised-clipped-boundaries-in-the-united-kingdom"&gt;NUTS Level 1 (January 2018) Super Generalised Clipped Boundaries in the United Kingdom&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The dataset we need can be found by clicking &lt;em&gt;Download &amp;gt; Shapefile&lt;/em&gt;. This shapefile contains polygonal coordinates that will allow us to map geospatial data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kHSvkBu8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ob7zzhtp9i82uics8z07.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kHSvkBu8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ob7zzhtp9i82uics8z07.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now... &lt;em&gt;time to code!&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#importing-the-libraries" class="anchor"&gt;
  &lt;/a&gt;
  Importing the libraries
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;geopandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;gpd&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;plotly.express&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;px&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;plotly&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#importing-the-datasets" class="anchor"&gt;
  &lt;/a&gt;
  Importing the datasets
&lt;/h1&gt;

&lt;p&gt;Okay, we're ready to get to work! &lt;/p&gt;

&lt;p&gt;Luckily, &lt;code&gt;pandas&lt;/code&gt; and &lt;code&gt;geopandas&lt;/code&gt; provide us with some handy functions that make importing datasets straightforward and painless!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Importing the energy dataset into a pandas.DataFrame
&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"path/to/Subnational_total_final_energy_consumption_statistics.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Importing the shapefile into a geopandas.GeoDataFrame
&lt;/span&gt;&lt;span class="n"&gt;gdf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gpd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"path/to/NUTS_Level_1_(January_2018)_Boundaries.shp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#observing-our-datasets" class="anchor"&gt;
  &lt;/a&gt;
  Observing our datasets
&lt;/h1&gt;

&lt;p&gt;Before we dive into preparing our data, let's take a look and see what it is we're working with 🔎. We want to find a way to match our geographic data to our energy data. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p-et3L8J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xg1pdn5xdq7lw37k2eg9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p-et3L8J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xg1pdn5xdq7lw37k2eg9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MXQBeSXc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f304i4833wijjghr0q79.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MXQBeSXc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f304i4833wijjghr0q79.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this case, we can see that the &lt;code&gt;df["NAME"]&lt;/code&gt; and &lt;code&gt;gdf["nuts118nm"]&lt;/code&gt; columns both contain names of geographic regions! &lt;/p&gt;

&lt;p&gt;With this in mind, we can now start working towards the goal of unifying these datasets for the animation by preparing both datasets in such a way that these region names match.&lt;/p&gt;

&lt;p&gt;Feel free to get familiar with this data! Look at the column names, see what's available to us, and just mess around with it. &lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#geographic-data" class="anchor"&gt;
  &lt;/a&gt;
  Geographic data
&lt;/h1&gt;
&lt;h3&gt;
  &lt;a href="#preprocessing-the-geographic-data" class="anchor"&gt;
  &lt;/a&gt;
  Preprocessing the geographic data
&lt;/h3&gt;

&lt;p&gt;Preparing the geographic data is relatively straightforward. We know that we want our region names to match those contained in &lt;code&gt;df&lt;/code&gt; so we'll perform some routine text munging.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Remove unnecessary info, whitespace, and title the names 
&lt;/span&gt;&lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"nuts118nm"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"nuts118nm"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"(England)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"nuts118nm"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"nuts118nm"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"nuts118nm"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"nuts118nm"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#mapping-to-a-coordinate-reference-system" class="anchor"&gt;
  &lt;/a&gt;
  Mapping to a Coordinate Reference System
&lt;/h3&gt;

&lt;p&gt;Currently, looking at our &lt;code&gt;gdf["geometry"]&lt;/code&gt; column tells us that our polygons point to coordinates in an arbitrary space. &lt;/p&gt;

&lt;p&gt;We can easily project &lt;code&gt;gdf&lt;/code&gt;'s coordinates to actual Earth coordinates in preparation of mapping them on our choropleth.&lt;/p&gt;

&lt;p&gt;Additionally, we will convert the geospatial data into a format known as GeoJSON.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;gdf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_crs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;epsg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4326&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;geojson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#energy-data" class="anchor"&gt;
  &lt;/a&gt;
  Energy data
&lt;/h1&gt;
&lt;h3&gt;
  &lt;a href="#preparing-the-energy-data" class="anchor"&gt;
  &lt;/a&gt;
  Preparing the energy data
&lt;/h3&gt;

&lt;p&gt;After looking at the dataset, we can see that we are provided the data in two sets of units, Gigawatt hours (GWh) and Kilotonne of oil equivalent (KTOE). For this tutorial, we are going to be working exclusively in GWh. &lt;/p&gt;

&lt;p&gt;We can also see after some investigating that our regional data is provided as all uppercase values. The full dataset is broken down to the Local Administrative Unit level but we're going to filter out only the regions.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Filter only the GWh rows
&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"UNIT"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"GWh"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Filter the uppercased regions and title them
&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"NAME"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isupper&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"NAME"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"NAME"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Let's see what this has left us with:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"NAME"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;'North East'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'North West'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Yorkshire And The Humber'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="s"&gt;'East Midlands'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'West Midlands'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'East Of England'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="s"&gt;'Greater London'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'South East'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'South West'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Inner London'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Outer London'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Northern Ireland'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Scotland'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Wales'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#combining-the-london-rows" class="anchor"&gt;
  &lt;/a&gt;
  Combining the London rows
&lt;/h3&gt;

&lt;p&gt;Uh oh! In &lt;code&gt;gdf["nuts118nm"]&lt;/code&gt;, London is listed only once but in &lt;code&gt;df["NAME"]&lt;/code&gt;, it is broken into three separate regions: &lt;code&gt;"Inner London"&lt;/code&gt;, &lt;code&gt;"Outer London"&lt;/code&gt;, &lt;code&gt;"Greater London"&lt;/code&gt;. No worries, we'll sum these all together into just &lt;code&gt;"London"&lt;/code&gt; rows.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Filter only the rows that contain the "London" substring
&lt;/span&gt;&lt;span class="n"&gt;london_rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"NAME"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"London"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Set all of these rows as "London"
&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;london_rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"NAME"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"London"&lt;/span&gt;

&lt;span class="c1"&gt;# Group these rows by name and year and sum  
&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"NAME"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"YEAR"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;as_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#creating-the-animation" class="anchor"&gt;
  &lt;/a&gt;
  Creating the animation
&lt;/h1&gt;

&lt;p&gt;And now for the moment we've all been waiting for... &lt;/p&gt;

&lt;p&gt;we're now ready to create and animate our choropleth! &lt;/p&gt;

&lt;p&gt;Luckily, &lt;code&gt;plotly.express&lt;/code&gt; has the &lt;a href="https://plotly.com/python/mapbox-county-choropleth/"&gt;&lt;code&gt;choropleth_mapbox&lt;/code&gt;&lt;/a&gt; function which lets us do this easily and efficiently.&lt;/p&gt;

&lt;p&gt;For this animation, we will visualize the &lt;code&gt;df["ALL_FUELS_TOTAL"]&lt;/code&gt; column which contains the aggregate energy consumption per region per year.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Max/min y-bounds for our color range  
&lt;/span&gt;&lt;span class="n"&gt;min_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"ALL_FUELS_TOTAL"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;max_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"ALL_FUELS_TOTAL"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Choropleth map 
&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plotly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choropleth_mapbox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="n"&gt;geojson&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;geojson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="n"&gt;locations&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"NAME"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"ALL_FUELS_TOTAL"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="n"&gt;animation_frame&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"YEAR"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;featureidkey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"properties.nuts118nm"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;color_continuous_scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;plotly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;diverging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Temps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;range_color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Energy consumption (GWh)"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Start visualization hovered over the UK 
&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_layout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;mapbox_style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"carto-positron"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;mapbox_zoom&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;3.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="n"&gt;mapbox_center&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;"lat"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;55.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="s"&gt;"lon"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.43&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eeTmQ0Hn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/703g5sajze51rrtmwfsk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eeTmQ0Hn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/703g5sajze51rrtmwfsk.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#in-conclusion" class="anchor"&gt;
  &lt;/a&gt;
  In conclusion
&lt;/h1&gt;

&lt;p&gt;And there you have it! In just a few quick steps, we were able to combine real world data into a meaningful and exciting visualization. &lt;/p&gt;

&lt;p&gt;If you're interested in further exploring real world data and visualizations, check out the &lt;a href="https://uk-energy-consumption.herokuapp.com/"&gt;UK energy consumption dashboard&lt;/a&gt; I've been working on (if it doesn't load right away, give it a minute or try reloading as I am currently on the Heroku free hosting plan).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PM9WC4Ou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jexwu1ocvj2p3p10f141.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PM9WC4Ou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jexwu1ocvj2p3p10f141.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/chris-greening"&gt;
        chris-greening
      &lt;/a&gt; / &lt;a href="https://github.com/chris-greening/UK-Energy-Consumption"&gt;
        UK-Energy-Consumption
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Analysis of UK energy consumption data between 2005-2018
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you enjoyed this blog post, be sure to check out some of my other work as well and leave me some feedback in the comments below! &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/chrisgreening" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F18p9AbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--neAFS6a7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/482393/52b5179a-7754-451f-a6bf-233266e3a62f.jpg" alt="chrisgreening image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/chrisgreening/scraping-every-post-on-an-instagram-profile-with-less-than-10-lines-of-python-1n8b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Scraping every post on an Instagram profile with less than 10 lines of Python&lt;/h2&gt;
      &lt;h3&gt;Chris Greening ・ Jan 21 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#datascience&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/chrisgreening" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F18p9AbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--neAFS6a7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/482393/52b5179a-7754-451f-a6bf-233266e3a62f.jpg" alt="chrisgreening image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/chrisgreening/visualizing-the-butterfly-effect-with-python-39m3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Visualizing the Butterfly Effect with Python &lt;/h2&gt;
      &lt;h3&gt;Chris Greening ・ Oct 26 '20 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#physics&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#science&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>python</category>
      <category>datascience</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Make side projects fun again</title>
      <author>Mehdi Zed</author>
      <pubDate>Sat, 30 Jan 2021 03:41:37 +0000</pubDate>
      <link>https://dev.to/jesuisundev/make-side-projects-fun-again-2oa2</link>
      <guid>https://dev.to/jesuisundev/make-side-projects-fun-again-2oa2</guid>
      <description>&lt;p&gt;A side project should be pure fun only. I'm not talking about forcing yourself to make a boring todo app just to fill up your portfolio. I'm talking about creation and fun!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer" class="anchor"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;I'm not going to lecture you on why you should have a side project going on&lt;/strong&gt;. The number of side projects made by a developer &lt;a href="https://www.linkedin.com/pulse/i-have-side-code-projects-show-you-ezekiel-buchheit/"&gt;does not determine its value&lt;/a&gt;. It really doesn't.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There will be no organizational advice either.&lt;/strong&gt; I already dedicated another article to it and internet is fill of this kind of stuff.&lt;/p&gt;

&lt;p&gt;Today, we're going to talk about why you should do the adventure of a side project. &lt;strong&gt;Without answering this question first, your project will end up like 99% of side projects.&lt;/strong&gt; Forgotten, deep in your folders.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-is-a-means-not-an-end" class="anchor"&gt;
  &lt;/a&gt;
  Code is a means, not an end
&lt;/h3&gt;

&lt;p&gt;Without knowing it, in the summer of 1999, I started my first side project. At that time, I was just a kid. I didn't know how to code. But I had a silly crazy passion: Final Fantasy 8.&lt;/p&gt;

&lt;p&gt;The most logical way for me to share my knowledge? &lt;strong&gt;A website i thought !&lt;/strong&gt; In a few minutes, I find myself making HTML tags and displaying things on a page. Code! I had no idea how it worked. Frankly, I didn't give a fuck. I was just in a trance talking about Final Fantasy 8 to my PC.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TJ-QEJcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dafsc1i1x/image/upload/v1602460686/sidepro/cooper_otxitz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TJ-QEJcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dafsc1i1x/image/upload/v1602460686/sidepro/cooper_otxitz.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code is a way to create stuff. A means, not an end. It is the essence, the basis of what side projects are.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The subject you're going to choose is the most important thing to think about. This will determine how your side project will unfold. This will really harness your power.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-incredible-power-of-developers" class="anchor"&gt;
  &lt;/a&gt;
  The incredible power of developers
&lt;/h3&gt;

&lt;p&gt;With your job where you are told what to do for 8 hours, you tend to forget something crazy. Something that is unique to your job and that millions of people envy you. &lt;strong&gt;You are a creator.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most people with ideas don't do anything. Unable to realize them. You can. You know how to make what you had in your head come out on the screen. &lt;strong&gt;Pure creation.&lt;/strong&gt; Enormous power.&lt;/p&gt;

&lt;p&gt;This incredible power has a crazy value. &lt;strong&gt;And let's face it, you and I rarely use it.&lt;/strong&gt; It's incredible to think that we can do anything, but most of the time we don't do anything. Code is the ultimate creative tool of our time. &lt;strong&gt;And we master this tool!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, I know what you're thinking.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;So what? Why should i do it? You're a nice little prick, but I don't want to work again after my day of work. I don't have any project idea. Anyway, you really think I have time for this ?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We're going to address all this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-should-i-do-it" class="anchor"&gt;
  &lt;/a&gt;
  Why should i do it?
&lt;/h3&gt;

&lt;p&gt;I'm supposed to give you a list of logical facts that are supposed to motivate you.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;More practice will make you a better developer.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A side project will make you a more attractive developer for recruiters.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You will consolidate your knowledge about the things you already know&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You will learn about new technologies&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I could also talk about passion. &lt;strong&gt;But you know &lt;a href="https://www.jesuisundev.com/en/do-you-need-passion-as-a-developer/"&gt;my opinion about passion among developers&lt;/a&gt;.&lt;/strong&gt; I could really emphasize on the recruitment side of things. A profile with side projects is more likely to be noticed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But even for recruitment, this is not a good enough reason.&lt;/strong&gt; Except for young developers struggling to enter the job market, with or without side projects, you'll find a job easily.&lt;/p&gt;

&lt;p&gt;If we're honest two minutes about all this, who cares ? I know that none of these reasons are really going to convince you because of a common reality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-dont-want-to-work-again-after-my-day-of-work" class="anchor"&gt;
  &lt;/a&gt;
  I don't want to work again after my day of work
&lt;/h3&gt;

&lt;p&gt;We get into the heart of what I wanted to tell you. &lt;strong&gt;Most developers get into side projects for the wrong reasons.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Somebody, somewhere, &lt;strong&gt;probably a stupid blogger like me&lt;/strong&gt;, lectured you. He told you that a developer without a side project is a bad developer. When you felt the anguish of having to justify yourself, you took the plunge.&lt;/p&gt;

&lt;p&gt;You took the first shitty idea found on the internet, like a basic todo-app, and you made a hello world. That's where it ended. That was six months ago. Just thinking about it depresses you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OnZMs2e7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dafsc1i1x/image/upload/v1602461148/sidepro/darth_sheldon_iu5wiz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OnZMs2e7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dafsc1i1x/image/upload/v1602461148/sidepro/darth_sheldon_iu5wiz.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You will never finish a side project that doesn't give you pleasure&lt;/strong&gt;. I can give you all the logical reasons in the world. I can tell you about career, visibility, skills and even money. It doesn't change the fact that you won't be working on a chore after 8 hours of work.&lt;/p&gt;

&lt;p&gt;You have to start with the fun. &lt;strong&gt;It's the only thing that will count when you'll have the choice between Netflix and your side project.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And I'm going to be a bit extreme here. If you can't find anything that motivates you more than Netflix (I have nothing against Netflix), don't waste your time with a side project.&lt;/p&gt;

&lt;p&gt;With that in mind, the problem to solve is now obvious.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-dont-have-any-project-idea" class="anchor"&gt;
  &lt;/a&gt;
  I don't have any project idea
&lt;/h3&gt;

&lt;p&gt;Last week I shipped a side project called &lt;a href="https://www.across-universe.com/"&gt;&lt;strong&gt;Across The Universe&lt;/strong&gt;&lt;/a&gt;. A three minute web experience &lt;a href="https://www.jesuisundev.com/en/across-the-universe/"&gt;that takes you through the universe via the browser&lt;/a&gt;. I was obsessed with this project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When I had finally finished my work day, I couldn't wait to go back into space.&lt;/strong&gt; It wasn't a chore, it was an adventure! How did I come up with such an idea?&lt;/p&gt;

&lt;p&gt;Along with a lot of other things, &lt;strong&gt;I love video games and everything related to space&lt;/strong&gt;. So I ended up &lt;a href="https://www.youtube.com/watch?v=uG8V9dRqSsw&amp;amp;t=49s"&gt;watching this video on YouTube&lt;/a&gt;. The part with the wormhole gave me the idea to reproduce the effect in a browser. And one thing led to another it became an exciting experience with story and music.&lt;/p&gt;

&lt;p&gt;With my hands I created a trip across the universe. I was over the moon! Pure injected fun in my veins.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XdZ6qWN3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dafsc1i1x/image/upload/v1602461277/sidepro/thumb-1920-783327_gkxxra.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XdZ6qWN3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dafsc1i1x/image/upload/v1602461277/sidepro/thumb-1920-783327_gkxxra.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I can't tell you what kind of project will have the same effect on you. &lt;strong&gt;But I can tell you that to find it, you have to start with what you like.&lt;/strong&gt; You have to start with you. That's the only thing that matters.&lt;/p&gt;

&lt;p&gt;You should not give a fuck about your portfolio, the originality of the idea or whether it's already done or not. You should not care if it could make money or not right now. You should not care if it makes you a better dev or not. You should not care &lt;a href="https://www.youtube.com/watch?v=KauRmlffjqc"&gt;if it's useful or not&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It's by removing the notion of drudgery from your project that you'll keep at it.&lt;/strong&gt; I'm convinced of it. Everybody starts for the wrong reasons. So there's only one question to ask yourself first.&lt;/p&gt;

&lt;p&gt;What do you do for fun? Getting drunk with your buddies? You play games? Watch TV shows? Go for a run? In whatever you do, there is potential for some super fun creation.&lt;/p&gt;

&lt;p&gt;For some of us it's doing something creative on a subject they love. Others will love to do a backend API. Others will be excited to do open source. Everybody love something. Use this to found something you are all about and start from here.&lt;/p&gt;

&lt;p&gt;Now, there's still a huge problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-really-think-i-have-time-for-this-" class="anchor"&gt;
  &lt;/a&gt;
  You really think I have time for this ?
&lt;/h3&gt;

&lt;p&gt;This one is hard honestly. I'm not a complete idiot and I understand that time management is a real challenge. Family, work, friends. We all have busy days.&lt;/p&gt;

&lt;p&gt;Once again, I'm supposed to say something like "win the morning". Get up every day at four o'clock and work on your stuff. And even if, having tested it, yes it works, it's still super constraining.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I prefer a more pragmatic approach before going to these extremes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Often, when people hear side project they are thinking about a huge project. A huge project will indeed suck up all your time. You have to start by changing this way of thinking.&lt;/p&gt;

&lt;p&gt;A side project can be something very small and quick to do. Last March, during confinement, I did a very small side project. &lt;strong&gt;&lt;a href="https://www.jesuisundev.com/en/lockdown-lets-code-a-dumb-idea-with-javascript-ai/"&gt;A little app that reacts to your facial expressions using artificial intelligence in the browser.&lt;/a&gt;&lt;/strong&gt; I rarely laughed as much as when I did that crap.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/da1AR6IHPPcKV5Z87X/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/da1AR6IHPPcKV5Z87X/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The actual development of this project took me only a few hours. More if you count the upstream research and the writing of the article.&lt;/p&gt;

&lt;p&gt;You can tell me all you want that you have a crazy schedule, we all have a little bit of free time. &lt;strong&gt;It's amazing what you can produce just by putting in a few productive hours a week.&lt;/strong&gt; A few productive hours a week is all you need.&lt;/p&gt;

&lt;p&gt;Finally, I return to the main point of this article. &lt;strong&gt;You will suddenly discover a lot of free time if your personal project is as fun as Netflix.&lt;/strong&gt; That and the smallest possible scope are the key to ship anything you love.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#epilogue" class="anchor"&gt;
  &lt;/a&gt;
  Epilogue
&lt;/h3&gt;

&lt;p&gt;Replace the notion of drudgery by the notion of pleasure in your side project and I promise you that you will finish it. All other reasons should be secondary. Otherwise it becomes work. And work, you're already doing it 8+ hours a day. I think that's enough.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>motivation</category>
      <category>productivity</category>
      <category>sideprojects</category>
    </item>
    <item>
      <title>Thoughts on Serverless Architectures</title>
      <author>Farmijo</author>
      <pubDate>Sat, 30 Jan 2021 02:46:33 +0000</pubDate>
      <link>https://dev.to/farmijo/thoughts-on-serverless-architectures-49k7</link>
      <guid>https://dev.to/farmijo/thoughts-on-serverless-architectures-49k7</guid>
      <description>&lt;p&gt;Several months ago, I started working in a small startup. Given their growing volume of clients and needs and due to the small team, they decided to build most of their core infrastructure through AWS lambda functions, using the serverless framework for it. So, we're running our whole business through lambda and it works! It's amazing to see that a whole working business is built over a such simple architecture.Before working here, I just saw lambdas as a way of build crons or small tasks, but it could be bigger than that.&lt;/p&gt;

&lt;p&gt;After working with it for some time, I'm starting to see a lot of of advantages but some cons too. Summarized, is a really good way to make things scalable and provide a unified framework to build things without worry too much about infrastructure issues.&lt;br&gt;
But, it have some trade-offs to be known too.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Serverless, its name says it, don't worry about servers. Just code, deploy and it will work. On this days of overwhelming complexity through containers and kubernetes, is fine to avoid this kind of worries.&lt;/li&gt;
&lt;li&gt;Prod and Dev environments can be easily replicable at 100%! No need to worry about environments too!&lt;/li&gt;
&lt;li&gt;Easy deploys, easy rollbacks. And, through Serverless framework, be platform agnostic is quite easy (not 100% transparent, though)&lt;/li&gt;
&lt;li&gt;All of this allows to build and ship things really fast!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But, there are things to take care off. Some of them are tradeOffs, some of them just points to take into consideration:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Serverless framework does not provide any information about how to build your stuff. It just provides an easy way to build and deploy a Serverless infrastructure on a lot of cloud platforms. The way that it avoids the server problems and configs does not mean that it helps you to properly develop things. You can develop HORRORS (coupled lambdas, twisted Code,..) and deploy it easily. Its advantage is on avoid to have dedicated staff into infrastructure, not into development.&lt;/li&gt;
&lt;li&gt;You're slave of a cloud provider. Someone will manage your servers, responses time will depend on them, scalability too... if you Work with Serverless, Make sure that you're able to migrate to other alternatives easily.&lt;/li&gt;
&lt;li&gt;Infernal YAMLs. You will be defining too much stuff through them. Be sure that you're writing them properly too. &lt;/li&gt;
&lt;li&gt;Local development can be problematic if you start to couple lambdas. One lambda development works fine, two at the same time, don't. They don't react on local quite fine to external events or invocations, so you will need to take care of how you structure your Serverless architecture &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Having some cons, I think that it can boost the productivity of a team and fits perfectly for MVP constructions. But, think about it more as a sinergy than as a Swiss knife. A poor codebase built through a Serverless architecture won't be better than a poor codebase on premise. But, if things are built properly, the boost of productivity is gigantic.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Debugging Your React App</title>
      <author>Milecia</author>
      <pubDate>Sat, 30 Jan 2021 01:14:27 +0000</pubDate>
      <link>https://dev.to/flippedcoding/debugging-your-react-app-4a4l</link>
      <guid>https://dev.to/flippedcoding/debugging-your-react-app-4a4l</guid>
      <description>&lt;p&gt;There are so many weird things that happen when you're working on a React app. Sometimes you fix a bug in one place and it causes a bug in some seemingly unrelated area. It's like a game of whack-a-mole and you can approach it with a  strategy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#take-advantage-of-all-the-browser-tools" class="anchor"&gt;
  &lt;/a&gt;
  Take advantage of all the browser tools
&lt;/h2&gt;

&lt;p&gt;You might be able to quickly find the problem by looking at the network tab in the developer tools of your browser and look for any odd status codes. You can also use the element tab to start tracking down the real issue. Sometimes you can start by inspecting an element and that will show you the right source file to dig in.&lt;/p&gt;

&lt;p&gt;With React in particular, installing the React Dev Tools in Chrome is a game-changer. You can look at the props of components, find out which components are nested inside of each other, and see if things are being rendered as you expect. Use these tools to give you a great place to start looking for an issue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-in-a-file-that-comes-from-your-browser-tool-search" class="anchor"&gt;
  &lt;/a&gt;
  Start in a file that comes from your browser tool search
&lt;/h2&gt;

&lt;p&gt;Once you've figured out which file is a good starting point, jump in there and start looking for anything unusual. Are there any states that aren't being updated? Is there a function that isn't being called as expected? Is there an unnecessary div that's throwing off your styles?&lt;/p&gt;

&lt;p&gt;This is where the debugging effort can take you down the rabbit hole. Try and approach it as systematically as possible. If you found the method that's causing issues, start drilling in there. Spend some time looking in this place, but if you notice you're spending more than an hour there, it might be time to go down another rabbit hole.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-sure-youre-passing-the-right-data-in-the-right-format" class="anchor"&gt;
  &lt;/a&gt;
  Make sure you're passing the right data in the right format
&lt;/h2&gt;

&lt;p&gt;One of the things you have to deal with when working with JavaScript is that it isn't a strongly-typed language. That means the shape of your data can change at any time and cause the strangest things to happen and silently cause errors. Many times this is how we end up with those undefined values that we know for a fact have real values.&lt;/p&gt;

&lt;p&gt;Using Typescript is one way around this, but if your project isn't in a place to start integrating that, you'll have to pay attention to any changes to APIs you work with. A common thing that happens is that there are changes on the back-end that don't get communicated to the front-end developers. So make sure you check your data before you start a major refactor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-any-parent-components" class="anchor"&gt;
  &lt;/a&gt;
  Check any parent components
&lt;/h2&gt;

&lt;p&gt;Sometimes the real issue isn't with the component or function you're looking at. One good example is if you can't get &lt;code&gt;position: sticky&lt;/code&gt; to work. There might be some parent element high up in the DOM tree that has an &lt;code&gt;overflow: hidden&lt;/code&gt; property set. This can be true for a number of issues.&lt;/p&gt;

&lt;p&gt;You might have a context that is pulling from the wrong data source or it doesn't actually have state hooks set up like you thought it would. When you've torn apart a file looking for the bug, try going up a level. The root cause could be buried in a place you wouldn't suspect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#compare-files" class="anchor"&gt;
  &lt;/a&gt;
  Compare files
&lt;/h2&gt;

&lt;p&gt;Many times our components and views are created using similar architectures. As an app grows, it's not uncommon for a view or component to fall out of the standard set up. Check that the problem file looks similar to other files like it. Finding those clues by looking for examples from other parts of the app will rule out the simple stuff early on.&lt;/p&gt;

&lt;p&gt;Having this kind of uniformity in a codebase helps find and prevent issues because you can visually spot the difference between files. Maybe there's a prop not being passed to the right component or maybe there's a component that should be used instead of what's in place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-your-packages" class="anchor"&gt;
  &lt;/a&gt;
  Check your packages
&lt;/h2&gt;

&lt;p&gt;There are some packages that aren't compatible with each other. That could be the problem if you've drilled down in the code and landed in the &lt;code&gt;node_modules&lt;/code&gt; folder. This is a deeper issue and one that might lead to crawling through Stack Overflow. To start a check for this, take a look at the versions in your package.json and then take a look at the current version on the &lt;a href="https://www.npmjs.com/"&gt;npm site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You might find that your installed version is out of date or that you're not using the package you thought you were. When your debugging leads you here, it's time to start looking for workarounds or replacements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#those-miscellaneous-checks" class="anchor"&gt;
  &lt;/a&gt;
  Those miscellaneous checks
&lt;/h2&gt;

&lt;p&gt;Sometimes there are just weird things combining to make the perfect bug storm. If you're having issues with data loading, make sure it's not a CORS or permissions problem. If you can't figure out why those styles aren't quite right, check for styles on the parent components.&lt;/p&gt;

&lt;p&gt;Having routing issues? Check that the routes are defined in the correct place with the right components. Maybe the state management approach in the app is a little difficult to understand, so add comments as you figure things out. That will pay off tremendously in the future.&lt;/p&gt;




&lt;p&gt;Debugging is hard. There are bugs that take time to track down, but these steps will give you a good checklist to get started. When you've been hitting your head against the desk for too long trying to fix a bug, get up and walk away for a while. After you've taken a break, moved around a bit, and maybe had a snack, come back and see if these tips help!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>debugging</category>
    </item>
    <item>
      <title>Should you join a coding bootcamp?</title>
      <author>Marisa You</author>
      <pubDate>Sat, 30 Jan 2021 00:45:25 +0000</pubDate>
      <link>https://dev.to/marisayou/should-you-join-a-coding-bootcamp-39hi</link>
      <guid>https://dev.to/marisayou/should-you-join-a-coding-bootcamp-39hi</guid>
      <description>&lt;p&gt;If you've never been totally in love with your job and have thought about changing your career and becoming a programmer, you've probably come across coding bootcamps while doing your research. A bootcamp seem like a great option for someone in your position -- you get handed a curriculum of things that you need to learn, it's much less expensive than grad school, and the top bootcamps all boast extremely high employment rates after graduation. There's no better time than now, amidst a pandemic (especially if you've lost your job due to it), to change your career and turn your life around. So should you enroll in a bootcamp?&lt;/p&gt;

&lt;p&gt;The short answer is that it depends. It depends on how much time and effort you can put into it and what you want out of it.&lt;/p&gt;

&lt;p&gt;I graduated from my bootcamp recently, and these are my thought about it. For some background on me, I don't have a degree in computer science, but I do have a degree in another engineering field. I also studied programming on my own for a while before I decided to join a bootcamp and get some more formal training on it. As a disclaimer, some other bootcamp grads might have had very different experiences from me. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#can-you-really-do-it-with-no-experience" class="anchor"&gt;
  &lt;/a&gt;
  Can you really do it with no experience?
&lt;/h1&gt;

&lt;p&gt;You can. In fact, I'd say 75% of my cohort had absolutely no experience with coding before coming into the bootcamp, and most of them graduated with me. However, I'd highly encourage you to dabble with it for a good while before handing your money over to a bootcamp for several reasons:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-career-change-is-a-big-deal" class="anchor"&gt;
  &lt;/a&gt;
  A career change is a big deal
&lt;/h3&gt;

&lt;p&gt;And you want to make sure that it's right for you. Bootcamps are less expensive and less of a time commitment than, say, a master's degree, but they're still a lot of money. If you didn't like your last job, or even if you did, what guarantee is there that you'll like coding? I'd recommend learning on your own for at least a few months before you join a bootcamp, because you probably want to make sure you like coding before you commit yourself to it.&lt;/p&gt;

&lt;p&gt;For the bootcamp I attended, there was about 80-100 hours of pre-work before classes started, but in my opinion, this is not nearly enough for you to gauge whether you'll like coding every day for 5 days a week for the next few decades.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-wont-feel-as-behind-during-the-program" class="anchor"&gt;
  &lt;/a&gt;
  You won't feel (as) behind during the program
&lt;/h3&gt;

&lt;p&gt;In the first month of my program, quite a few of my cohort-mates stated that they had cried several times each week because they felt so lost. A few even said by the end of the first week that they felt like quitting. Almost all of these people made it to the end, which is very commendable, and you can too. But it would be better to save yourself some of the stress of falling behind, because there will be plenty of other things for you to stress about.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#youll-be-able-to-go-beyond-the-curriculum" class="anchor"&gt;
  &lt;/a&gt;
  You'll be able to go beyond the curriculum
&lt;/h3&gt;

&lt;p&gt;If you're not struggling with keeping up with the curriculum, then you'll have the capacity to learn things outside of that. The reality is that there is so much to learn in this field that you can never really stop learning, so you don't have to limit yourself to just learning things taught in the bootcamp's curriculum.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-the-daytoday-life-of-a-bootcamp-student-like" class="anchor"&gt;
  &lt;/a&gt;
  What is the day-to-day life of a bootcamp student like?
&lt;/h1&gt;

&lt;p&gt;I've only ever attended one bootcamp, so I can't speak for all bootcamps. For my bootcamp, there were 5 "phases" in my program, each one about 3 weeks long. For the first four phases, in the middle of each phase, there was a code challenge (aka coding test), which you had to pass to move onto the next phase. At the end of the phase, there was a phase project. The entire last phase, however, was dedicated to a single capstone project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#schedule" class="anchor"&gt;
  &lt;/a&gt;
  Schedule
&lt;/h3&gt;

&lt;p&gt;I was on Zoom at 9 am sharp every day Monday through Friday. Most days followed a similar schedule. We'd start with stand-up, where we gathered together and talked about what we were going to do for that day. We'd work on labs (basically small assignments) individually for part of most of the day, but most days, there was also a pair programming lab. Once or twice a day, there would also be a 1-2 hour lecture with the instructor. At 5:30 pm, we'd begin stand-down, where we each reviewed how our day went and got to know each other better. A lot of the day was very flexible, and we'd all work individually or in small groups in separate breakout rooms for the majority of the time. This meant that most of what you did in a day was entirely up to you.&lt;/p&gt;

&lt;p&gt;Exceptions to this schedule were during project weeks. The whole day would be dedicated to working on your project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-school-but-its-not-really-like-school" class="anchor"&gt;
  &lt;/a&gt;
  It's school, but it's not really like school
&lt;/h3&gt;

&lt;p&gt;In addition to not having a rigid schedule, you don't get graded on anything you do (other than the code challenge, which you only have to pass). You don't have to do all of the labs if you don't feel like they'll benefit you. In fact, no one's even going to force you to do any of them, if you don't want to. This means that how much you get out of a bootcamp is entirely up to you. &lt;/p&gt;

&lt;p&gt;You'll have an instructor to teach you the topics in the curriculum, but you shouldn't depend on your instructor to teach you everything. It's very possible that you'll get an instructor whose teaching style isn't suitable for you, but learning on your own is something that you'll have to do eventually anyway.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#outside-of-the-classroom-aka-zoom" class="anchor"&gt;
  &lt;/a&gt;
  Outside of the classroom (aka Zoom)
&lt;/h3&gt;

&lt;p&gt;If it's not really like school, is there homework? How many extra hours do you need to put in outside of class? The answer is that there is homework if you choose to give yourself homework, and you'll put in as many extra hours as you would like to. I personally spent a few hours every night either working on more labs from class or learning other things on my own, and I hardly ever slept before 1 am. There were also very few weekends where I took breaks. In addition to the projects I did for the program, I also wrote little mini projects on my own (some of which are in my other blog posts). However, you absolutely can get by without doing any of that. Again, it's entirely up to you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-friends" class="anchor"&gt;
  &lt;/a&gt;
  Making friends
&lt;/h3&gt;

&lt;p&gt;Making friends during my bootcamp was a very unexpected part of it for me. Especially because classes are all entirely online now, I didn't really give this much though before I started my bootcamp. However, because you see the same people five days a week for four months straight, and you're all more or less struggling through the same things, it's kind of a bonding experience. I was very lucky to have had very kind and genuine cohort-mates, and I'll definitely be keeping in touch with some of them for a very long time.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#will-a-bootcamp-really-help-me-get-a-job" class="anchor"&gt;
  &lt;/a&gt;
  Will a bootcamp really help me get a job?
&lt;/h1&gt;

&lt;p&gt;So the running theme is that it depends on you. A bootcamp can help you in the process of getting a job if you're eager to learn and put in the work, but it won't get the job for you. Most bootcamps have career services. At my bootcamp, each student gets a career coach to help with the job searching process, but career service always emphasizes that the career coach is just there to guide you and you're the one in the driving seat. &lt;/p&gt;

&lt;p&gt;Bootcamps usually have high graduate employment rates, but employment can mean a lot of different things. To be realistic, you won't get a 6-figure paying job right out of a bootcamp. You've just spent 4 months, give or take, working really hard and learning new things every day, but truthfully, you still know next to nothing about coding. A lot of people do get employed within a few months after graduating from a bootcamp, but a lot of the time they get hired as interns or apprentices. And what they'll be doing in their job is most likely not what they've learned at bootcamp.&lt;/p&gt;

&lt;p&gt;A bootcamp is a good place to learn how to learn. It is not a place that will teach you everything you need to know to become a programmer.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#advice-and-takeaways" class="anchor"&gt;
  &lt;/a&gt;
  Advice and takeaways
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#be-comfortable-with-being-uncomfortable" class="anchor"&gt;
  &lt;/a&gt;
  Be comfortable with being uncomfortable
&lt;/h3&gt;

&lt;p&gt;That's the only way to grow and learn. At the beginning of this experience, the thought of not know a lot of things really scared me. Now, the thought is still daunting, but instead of thinking, "I'll never be able to learn all of this," I think of it from a perspective of, "There's still so much interesting stuff out there for me to learn." &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#be-eager-to-learn" class="anchor"&gt;
  &lt;/a&gt;
  Be eager to learn
&lt;/h3&gt;

&lt;p&gt;This one might be kind of obvious. But if you really find yourself enjoying coding, you won't groan so much at the thought of having to stay up later to work on a project or to learn more about something. Learning is hard, but it should also be exciting. Like I mentioned earlier, this is a field where you have to constantly learn for the rest of your career if you want to be good at it, so if you don't find yourself eager to learn more about computer science, this really might not be the right career for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-compare-yourself-to-other-people-in-your-cohort" class="anchor"&gt;
  &lt;/a&gt;
  Don't compare yourself to other people in your cohort
&lt;/h3&gt;

&lt;p&gt;Everyone enters the bootcamp with different background. Some people will have a head start because they've already coded a bit beforehand (again, I think you should do this if at all possible), and some people will find everything entirely new. What you should compare yourself to is your past self. If you feel like you've done your personal best and have learned new things every day, then you're on the right track.&lt;/p&gt;

&lt;p&gt;This sums up most of what I have to say. These are my honest thoughts about my bootcamp experience, both the good and the bad. If you have any questions, feel free to leave a comment and I'll try to get back to you!&lt;/p&gt;

</description>
      <category>beginners</category>
    </item>
  </channel>
</rss>
