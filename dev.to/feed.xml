<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Engenharia de Software: O tal Code Review</title>
      <author>Marylly</author>
      <pubDate>Tue, 14 Sep 2021 23:16:17 +0000</pubDate>
      <link>https://dev.to/marylly/engenharia-de-software-o-tal-code-review-5eof</link>
      <guid>https://dev.to/marylly/engenharia-de-software-o-tal-code-review-5eof</guid>
      <description>&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9"&gt;
  &lt;/a&gt;
  O que é?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Code Review&lt;/em&gt; ou Revisão de código é uma prática onde o código desenvolvido para atender determinada demanda passa pela revisão de outras pessoas desenvolvedoras antes de ser integrada a uma versão principal de um software.&lt;/p&gt;

&lt;p&gt;Idealmente não deve ser um processo mandatório, e sim um pacto do time, e o valor deve ser muito bem entendido para que existam benefícios.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-review-x-pr%C3%A1ticas-ag%C3%A9is"&gt;
  &lt;/a&gt;
  &lt;em&gt;Code Review&lt;/em&gt; x Práticas Agéis
&lt;/h2&gt;

&lt;p&gt;Do ponto de vista do desenvolvimento ágil de software, o &lt;em&gt;code review&lt;/em&gt; é um processo que impacta a velocidade do time e da entrega, e pode virar um gargalo se algumas boas práticas não são atendidas, logo uma má prática.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contexto-e-cen%C3%A1rios-comuns"&gt;
  &lt;/a&gt;
  Contexto e Cenários + comuns
&lt;/h2&gt;

&lt;p&gt;Considerando muitos times de desenvolvimento de software, muitos não detém do todo o conhecimento elementar que permitam um modelo de trabalho mais ágil utilizando &lt;em&gt;trunk based&lt;/em&gt; sem um processo de &lt;em&gt;code review&lt;/em&gt; estruturado e maduro. O &lt;em&gt;trunk based&lt;/em&gt; deve ser o próximo passo após superadas essas deficiências e o processo de &lt;em&gt;code review&lt;/em&gt; eliminado.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#como-aplicar"&gt;
  &lt;/a&gt;
  Como aplicar?
&lt;/h2&gt;

&lt;p&gt;Apesar de alguns contrapontos, o processo de &lt;em&gt;code review&lt;/em&gt; pode ser bem benéfico, e pode apoiar a maturidade e evolução técnica do time em muito aspectos.&lt;/p&gt;

&lt;p&gt;Nessa prática, temos dois papéis: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pessoa(s) quem desenvolveu o código&lt;/li&gt;
&lt;li&gt;Pessoa(s) quem pode trazer pontos de melhoria, identificar contrapontos e sugerir formas distintas para resolver não somente o problema de implementação, como problemas relacionados a demanda do código.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Pode ser feito de duas maneiras: (1) Pessoalmente com as pessoas que a autora do código confia e se sente segura, ou sua liderança imediata. (2) Utilizando o recurso de &lt;em&gt;Pull Request&lt;/em&gt; oferecida por ferramentas de host de versionamento (GitHub, GitLab, BitBucket, etc)&lt;/p&gt;

&lt;p&gt;A expectativa do processo é responder algumas das perguntas relacionadas abaixo:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Código limpo ou &lt;a href="https://dev.to/marylly/clean-code-introducao-bfb"&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;:&lt;/strong&gt; É possível as pessoas lerem o código e entender o seu propósito (comportamento/resultado)? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Diretrizes do Projeto:&lt;/strong&gt; Perfomático, escalável, enxuto, padrões de projetos, padrões de arquitetura, &lt;em&gt;style guide&lt;/em&gt;, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Funcionalidade:&lt;/strong&gt; O comportamento do código atende as expectativas da pessoa desenvolvedora e as pessoas que irão usar: clientes, etc? Efeitos colaterais no comportamento e/ou funcionalidades já existentes no software?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Complexidade:&lt;/strong&gt; As mesmas tarefas e resultados do código podem ser executadas com um código mais simples e enxuto?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Testes:&lt;/strong&gt; O código está sendo testado? Existem cenários que cubram os cenários feliz e infeliz do processo principal desenvolvido no código? Se um comportamento indesejado ou inesperado surgir, os testes sinalizaram?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Nomes:&lt;/strong&gt; Os nomes utilizados no código trazem uma conexão com os processos e problemas de negócio que o código está sendo desenvolvido para resolver? Os nomes empregados nas variáveis, classes, métodos, funções apoiam o entendimento do comportamento ou da saída de código em revisão?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Comentários:&lt;/strong&gt; Os que foram utilizados estão fácil de compreender, curtos e realmente úteis onde aplicados?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Efeitos colaterais:&lt;/strong&gt; Impacta na comunicação e/ou comportamento de aplicações internas/externas e de parceiros? Quebra de contratos de comunicação?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Documentação:&lt;/strong&gt; A documentação de apoio precisa ser atualizada? Contém o que precisa para executar alguma atividade ou tarefa relacionada ao código?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benef%C3%ADcios"&gt;
  &lt;/a&gt;
  Benefícios
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Apoia o engajamento do time com a saúde do código;&lt;/li&gt;
&lt;li&gt;Apoia no aprendizado de linguagens, frameworks, paradigmas, etc;&lt;/li&gt;
&lt;li&gt;Acelera o engajamento de novas pessoas desenvolvedoras sobre o que é esperado do código;&lt;/li&gt;
&lt;li&gt;A medida que as boas práticas e melhorias são aplicadas, novas formas são discutidas e absorvidas, aumentando a qualidad;&lt;/li&gt;
&lt;li&gt;Fortalece a confiança da pessoa desenvolvedora e do time em &lt;em&gt;deploys&lt;/em&gt; de alta qualidade;&lt;/li&gt;
&lt;li&gt;Promove discussões sobre: (1) Tecnologias usadas e novas (2) Discussões sobre arquitetura de código (3) Discussões sobre boas práticas;&lt;/li&gt;
&lt;li&gt;Promove o compartilhamento de conhecimento e a cooperação;&lt;/li&gt;
&lt;li&gt;Apoia na identificação de refatorações e débitos técnicos que podem ser trabalhados posteriormente.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#contrapontos"&gt;
  &lt;/a&gt;
  Contrapontos
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Pode gerar estresse e ansiedade para as pessoas autoras do código, principalmente para pessoas novas no time/projeto.&lt;/li&gt;
&lt;li&gt;Pode se tornar um gargalo no ciclo de desenvolvimento de software.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#recomenda%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  RECOMENDAÇÕES
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#autora-do-c%C3%B3digo"&gt;
  &lt;/a&gt;
  Autora do Código
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Na apresentação ou descrição da revisão, comunique o objetivo da implementação, e se for necessário, as idéias por traz da solução desenvolvida;&lt;/li&gt;
&lt;li&gt;Se o processo for por PRs, faça-os de forma incremental com pouco conteúdo e sinalize o trabalho ainda em andamento (vulgo WIP ou &lt;em&gt;Work in Progress&lt;/em&gt;), para não desestimular as pessoas revisoras pelo volume ou pela falta de tempo para revisar adequadamente;&lt;/li&gt;
&lt;li&gt;Evite enviar para revisão pedaços de código não-funcionais ou que não agregam ao processo. Atrapalha a revisão e aumenta o tempo utilizado para entender o que o código faz;&lt;/li&gt;
&lt;li&gt;Evite códigos de coisas que ainda vão ser desenvolvidas no futuro (as vezes coisas não confirmadas). Ex. Classes vazias, métodos/funçõe vazios, as vezes só a sua assinatura, TO-DOS, etc;&lt;/li&gt;
&lt;li&gt;Não espere pelo tempo das pessoas revisoras, sinalize as envolvidas, afinal todas temos prazos para serem atendidos, e a entrega é do time, pelo alguém do time deve se organizar para fazer a revisão;&lt;/li&gt;
&lt;li&gt;Se for fazer revisão pessoalmente, agende com a pessoa e reserve um tempo para focar adequadamente no processo;&lt;/li&gt;
&lt;li&gt;Se não houver consenso ou ocorrer conflitos, busque a liderança ou outras pessoas para chegar na melhor solução possível para o contexto e momento;&lt;/li&gt;
&lt;li&gt;Em revisões privadas, compartilhe os resultados num comentário do PR ou num canal comum com o time para que todas entendam e aprendam com a informação;&lt;/li&gt;
&lt;li&gt;Evite código/artefatos desnecessários: Código comentado que não está e/ou nem será utilizado, arquivos que não precisam ser versionados ou que são temporários.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#revisora-do-c%C3%B3digo"&gt;
  &lt;/a&gt;
  Revisora do código
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Evite criticar a pessoa ou código;&lt;/li&gt;
&lt;li&gt;Seja propositiva nos comentários, e compartilhe suas razões;&lt;/li&gt;
&lt;li&gt;Foque nas diretrizes do projeto;&lt;/li&gt;
&lt;li&gt;Evite compartilhar opiniões pessoais, faça de forma privada, somente você e a pessoa autora;&lt;/li&gt;
&lt;li&gt;Não compartilhe &lt;em&gt;feedbacks&lt;/em&gt; negativos ou construtivos, faça de forma privada, somente você e a pessoa autora;&lt;/li&gt;
&lt;li&gt;Se existir dúvida se vai ofender ou gerar conflitos, faça de forma privada ou busque apoio para transmitir a mensagem adequadamente;&lt;/li&gt;
&lt;li&gt;Nem sempre as preferências da pessoa revisora é uma regra que deve ser adotada pela pessoa autora do código, e isso deve ficar bem entendido pelas pessoas envolvidas;&lt;/li&gt;
&lt;li&gt;Sinalize quando um comentário é apenas uma sugestão, não necessariamente algo mandatório, e a pessoa autora pode tomar a decisão de fazer ou não;&lt;/li&gt;
&lt;li&gt;Busque o consenso em detrimento da imposição;&lt;/li&gt;
&lt;li&gt;Abordagens interessantes de solução foram apresentadas, reconheça, aprecie a pessoa autora do código, reforce as coisas boas e que trazem valor;&lt;/li&gt;
&lt;li&gt;Se não conhece muito bem a &lt;em&gt;codebase&lt;/em&gt;, comece pelos testes para entender o comportamento desenvolvido e os elementos do código utilizado para confrontar com a proposta inicial da demanda.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#princ%C3%ADpios-recomendados"&gt;
  &lt;/a&gt;
  Princípios Recomendados
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Novas demandas emergentes:&lt;/strong&gt; Podem surgir necessidades de reavaliação da implementação, refatoração e até necessidade de criar novas funcionalidades. As pessoas da liderança e de negócio devem ser sinalizadas e a solução replanejada ou refatorada de acordo com o prazo, pessoas e recursos disponíveis, evitar absorver esse trabalho emergente num trabalho iniciado e identificado através de uma revisão de código;&lt;br&gt;
&lt;strong&gt;2. Ambiente seguro e inclusivo:&lt;/strong&gt; NÃO é um espaço para repressão das pessoas autoras por preconceitos por parte das pessoas revisoras, pelas características da pessoa autora do código (raça, gênero, origem, religião, inclinação política, comportamento e/ou aparência), todas as pessoas DEVEM ser respeitadas pelo o que REALMENTE são;&lt;br&gt;
&lt;strong&gt;3. Espaço de aprendizado:&lt;/strong&gt; NÃO é um espaço para as pessoas autoras serem reprimidas por falta de alguns conhecimentos, e sim, para suprir deficiências técnicas, aprender novas formas de trabalho, exporem suas idéias, fortalecerem seus conhecimentos e obter &lt;em&gt;feedback&lt;/em&gt; sobre a evolução do trabalho antes de ir para ambiente produtivo;&lt;br&gt;
&lt;strong&gt;4. Revisões rápidas:&lt;/strong&gt; O time deve ser encorajado a fazer as revisões assim que possível, o período máximo de um dia de trabalho para ser concluído.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%B5es"&gt;
  &lt;/a&gt;
  Conclusões
&lt;/h2&gt;

&lt;p&gt;Apesar do &lt;em&gt;Code Review&lt;/em&gt; não ser considerada uma boa prática, pode ser um espaço de muito crescimento e amadurecimento das pessoas envolvidas, e deve ser utilizado como um trampolim para a evolução para o formato &lt;em&gt;trunk based&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Se conhece outras formas para a prática do processo, compartilhe comigo nos comentários, seria muito legal continuar a conversa e evoluir sobre o tema. =]&lt;/p&gt;

&lt;p&gt;&lt;em&gt;ATENÇÃO: Esse conteúdo é a consolidação das impressões e opiniões da autora sobre o assunto, resultado de vivências e processos empíricos que trouxeram resultados para contextos específicos, não há garantia que é aderente a qualquer contexto e/ou time de desenvolvimento de software.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Referências
&lt;/h2&gt;

&lt;p&gt;Google Inc: &lt;strong&gt;The Standard of Code Review, Engineering Practices.&lt;/strong&gt; Acessado em 10 de Setembro de 2021: &lt;a href="https://google.github.io/eng-practices/review/reviewer/standard.html"&gt;https://google.github.io/eng-practices/review/reviewer/standard.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yu, Chak Shun; Better Programming Blog: &lt;strong&gt;5 Actionable tips to deliver higher quality code reviews today.&lt;/strong&gt;&lt;br&gt;
Acessado em 14 de Setembro de 2021: &lt;a href="https://betterprogramming.pub/5-actionable-tips-to-deliver-higher-quality-code-reviews-today-de422cd538df"&gt;https://betterprogramming.pub/5-actionable-tips-to-deliver-higher-quality-code-reviews-today-de422cd538df&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codereview</category>
      <category>agile</category>
      <category>bestpractice</category>
      <category>engineering</category>
    </item>
    <item>
      <title>Understanding Ngrx Actions, Reducers and Effects</title>
      <author>Muhammad Muhktar Musa</author>
      <pubDate>Tue, 14 Sep 2021 23:01:24 +0000</pubDate>
      <link>https://dev.to/mcube25/understanding-ngrx-actions-reducers-and-effects-j9e</link>
      <guid>https://dev.to/mcube25/understanding-ngrx-actions-reducers-and-effects-j9e</guid>
      <description>&lt;h4&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h4&gt;

&lt;p&gt;Actions, Reducers and Effects are building blocks in Ngrx which is used in many Angular applications. This article is meant to explain the relationship between the three and how we can use them in an application&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#actions"&gt;
  &lt;/a&gt;
  Actions
&lt;/h4&gt;

&lt;p&gt;Actions are one of the main building blocks in Ngrx. Actions express unique events that happen throughout an application. This events can be user interaction with a page, external interaction through network request and direct interaction with the device API's. Actions are the input and output of many systems in Ngrx. They help in understanding how events are handled in an application. The Action is an object like interface. Let us have a look of what an Action interface looks like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface Action {
  type: string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Action interface has a single property. Its type is represented as a string. The type property is for describing the action that will be dispatched into an application. The value of the type comes from the &lt;strong&gt;&lt;em&gt;[source]&lt;/em&gt;&lt;/strong&gt;  event and is used to provide a context of what category of action is to be taken. Properties are added to an action to provide additional context or metadata for an action. Actions are JavaScript objects in simple terms. For example an event is triggered from an authentication after interacting with a backend API can be described as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  type: '[Auth API] Login success';
  username: string;
  password: string;
  phone - number: number;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above action is an event triggered by a user clicking a login button from the login page to attempt to authenticate a user. The username, password and phone-number are defined as additional metadata from the login page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#writing-actions"&gt;
  &lt;/a&gt;
  Writing Actions
&lt;/h4&gt;

&lt;p&gt;The following rules should be applied when a good action is to be written within an application&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Write actions before developing features. This is to understand and gain a shared knowledge of the feature being implemented&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide contents that are descriptive and that are targeted to a unique event with more detailed information that can be used to debug in the developer tools.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Divide actions into categories based on the event source.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Actions are inexpensive to write. For this reason, the more actions written the better a developer can express a work flow.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Actions should be event driven. Events should be captured and not commands as the description of an event are the handling of the event.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us take a look at an example Action. First we import Actions from the Ngrx store into our action file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Action } from '@ngrx/store';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we import our data source&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Assessmentconfig } from 'src/app/shared/models/school.model';

export enum AssessmentconfigActionTypes {
  CreateAssessmentconfig = '[Assessmentconfig] Create'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we implement our action&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export class CreateAssessmentconfig implements Action {
 type = AssessmentconfigActionTypes.CreateAssessmentconfig;
  constructor(public payload: { assessmentconfig: Assessmentconfig }) {}
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The CreateAssessmentconfig function returns an object in the shape of an action interface. The constructor will be used to define any additional metadata needed for the handling of the action. The action being dispatched should be created in a consistent, type-safe way. The action creator can the be used to return the action when dispatching.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;onSubmit(username: string, password: string){
  store.dispatch(CreateAssessmentconfig({
    username: username,
    password: password
  }
  ))
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The CreateAssessmentconfig action creator receives an object of username and password and returns a plane javaScript object with a property type of &lt;strong&gt;&lt;em&gt;[Login Page], Login&lt;/em&gt;&lt;/strong&gt;. The returned action has very specific context about where the action came from and what happened.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The category of the action is captured within the square brackets []&lt;/li&gt;
&lt;li&gt;The category is used to group actions for a particular area. This area can be a component page, backend API or browser API&lt;/li&gt;
&lt;li&gt;The Login text after the category is a description of what event occurred from the action.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#reducers"&gt;
  &lt;/a&gt;
  Reducers
&lt;/h4&gt;

&lt;p&gt;Reducers are functions responsible for handling transitions from one state to the next state in an application. They are pure functions in that they produce the same output for a given input without any side effects handling state transition synchronously. Each reducer function takes the latest Action dispatched, the current state and determines whether to return a newly modified state or the original state.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-reducer-function"&gt;
  &lt;/a&gt;
  The Reducer Function
&lt;/h4&gt;

&lt;p&gt;The consistent parts of pieces of state managed by a reducer are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An interface or type that defines the shape of the state &lt;/li&gt;
&lt;li&gt;The functions that handle the state changes for the associated actions&lt;/li&gt;
&lt;li&gt;The arguments including the initial state or current state and current action.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us take a look at an example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export interface AssessmentconfigState {
  // additional entities state properties
  selectedId: number;
  loading: boolean;
  error: string;
  query: AssessmentconfigSearchQuery;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A reducer file is created and the a default state is set as in above. A reducer function is a listener of actions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export class CreateAssessmentconfig implements Action {
 type = AssessmentconfigActionTypes.CreateAssessmentconfig;
  constructor(public payload: { assessmentconfig: Assessmentconfig }) {}
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code in the Actions folder describes the transitions that will be handled by the reducer. We will import this action into the reducer file. The shape of the state will now be defined according to what is to be captured.&lt;/p&gt;

&lt;p&gt;We can now use the default state to create an initial state for a required state property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const initialAssessmentconfigState: AssessmentconfigState({

  selectedId: null,
  loading: false,
  error: '',
  query: {
    filter: '',
    sorting: '',
    limit: 999,
    page: 1
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create a reducer function we can&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export function assessmentconfigReducer(state = initialAssessmentconfigState,
  action: AssessmentconfigActions): AssessmentconfigState {
  switch (action.type) {
    case AssessmentconfigActionTypes.CreateAssessmentconfig:
      return {
        ...state,
        loading: true,
        error: ''
      };

    default:
      return state;
  }
}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the reducer above, the action is strongly typed. The action handles the state transition immutably. The state transition are not modifying the original state but returning a new state of objects using the spread operator. The spread syntax copies the properties for the current state into the object creating a new reference.&lt;br&gt;
 This ensures that a new state is produced with the change. This preserves the purity of the change thereby promoting referential integrity that guarantees old references are discarded when a state change occurs.  When an action is dispatched, all registered reducers receive the action. Reducers are only responsible for deciding which state transition should occur for a given action.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#effects"&gt;
  &lt;/a&gt;
  Effects
&lt;/h4&gt;

&lt;p&gt;In an Angular application there is need to handle impure actions. Impure actions can be network request, websocket messages and time based events. In a service based Angular application, components are responsible for interacting with external resources through services. Effects provide a way to interact with those services so as to isolate them from the component. They handle task such as fetching data, running task that produce multiple events and other external interactions where components do not need explicit knowledge of such interactions. In other words effects&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;isolate side effects from components allowing for more pure components that select state and dispatch actions.&lt;/li&gt;
&lt;li&gt;are long running services that listen to observable of every action dispatched on the store&lt;/li&gt;
&lt;li&gt;filter the actions based on the type of action they are interested in. This is done by an operator&lt;/li&gt;
&lt;li&gt;performs tasks which are synchronous or asynchronous, returning a new action.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In service based applications, components interact with data through many different services that expose the data through properties and methods. This services may depend on other services. Components consume these services to perform task giving them many responsibilities. &lt;br&gt;
 Effects when used along with the &lt;strong&gt;&lt;em&gt;store&lt;/em&gt;&lt;/strong&gt; decreases the responsibility of the component. In a larger application, it becomes more important because of multiple sources of data.  Effects handle external data and interactions allowing services to be less stateful and only perform tasks related to the external interactions.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#writing-effects"&gt;
  &lt;/a&gt;
  Writing Effects
&lt;/h4&gt;

&lt;p&gt;To isolate side effects from a component, an effect class should be created to listen for events and perform task. Effects are injectable service classes with distinct parts which are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An injectable actions service that provides an observable stream of all actions dispatched after the latest state has been reduced.&lt;/li&gt;
&lt;li&gt;Metadata is attached to the observable stream using the create function. The metadata is used to register the streams the store subscribes to and returns actions from the effects stream dispatching back to the store.&lt;/li&gt;
&lt;li&gt;Actions are filtered using pipeable &lt;code&gt;ofType&lt;/code&gt; operator. This operator takes one or more action types as arguments and filters the action to be acted upon.&lt;/li&gt;
&lt;li&gt;Effects are subscribed to the store observable.&lt;/li&gt;
&lt;li&gt;Services are injected into effects to interact with external API's and handle stream.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us take an example at play&lt;br&gt;
First we import&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The action and services are now imported from the&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {AssessmentconfigActionTypes,CreateAssessmentconfig,
 CreateAssessmentconfigFail 
} from './assessmentconfig.actions';
import { SchoolService } from 'src/app/shared/services/school.service';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create the effects by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Injectable()
export class AssessmentconfigEffects {
  // ========================================= CREATE
  @Effect()
  create: Observable&amp;lt;Action&amp;gt; = this.actions$.pipe(
    ofType&amp;lt;CreateAssessmentconfig&amp;gt;(AssessmentconfigActionTypes.CreateAssessmentconfig),
      this.service.createAssessmentConfig(schoolId, action.payload.assessmentconfig).pipe(
        switchMap((assessmentconfig: Assessmentconfig) =&amp;gt; {
          const a1 = new CreateAssessmentconfigSuccess({ result: assessmentconfig });
          const a2 = new SelectAssessmentconfigById({ id: assessmentconfig.id });
          return [a1, a2];
        }),
        catchError(({ message }) =&amp;gt; of(new CreateAssessmentconfigFail({ error: message })))
      )
    )
  );

  constructor(private actions$: Actions, private store: Store&amp;lt;ApplicationState&amp;gt;,
     private service: SchoolService) {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The AssessmentconfigEffects is listening for all dispatched actions through the Action stream. It shows its specific interest by using the  &lt;code&gt;ofType&lt;/code&gt; operator. The stream of action is then mapped into a new observable using the &lt;code&gt;switchMap&lt;/code&gt;  operator. It returns a new action with an error method attached. The action is dispatched to the store where it would be handled by the reducers when a state change is needed. It is very important to handle errors when dealing with observable streams so that the effects can continue running.&lt;/p&gt;

&lt;p&gt;This brings us to the end of this article. We have explained how to create Ngrx Actions, Reducers and Effects as well as their implementation in an application.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>angular</category>
      <category>ngrx</category>
      <category>devops</category>
    </item>
    <item>
      <title>CodePen no VS code</title>
      <author>Ricardo Rodrigues</author>
      <pubDate>Tue, 14 Sep 2021 22:48:52 +0000</pubDate>
      <link>https://dev.to/rrodrigues345/codepen-no-vs-code-1mcj</link>
      <guid>https://dev.to/rrodrigues345/codepen-no-vs-code-1mcj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#codepen-amp-vscode"&gt;
  &lt;/a&gt;
  CodePen &amp;amp; VSCode
&lt;/h2&gt;

&lt;p&gt;CodePen é um editor de código on-line útil e libertador para desenvolvedores de qualquer nível de habilidade, e particularmente capacitante para pessoas que estão aprendendo a programar. Usando apenas seu navegador, permite que você escreva códigos principalmente em linguagens de front-end como HTML, CSS, JavaScript e veja os resultados à medida que os constrói.  Além disso, é principalmente um ambiente de desenvolvimento social pois permite uma maneira fácil de compartilhar seu projeto com a comunidade dev. &lt;/p&gt;

&lt;p&gt;Entretanto, em alguns casos, pode ser que você queira exportar o seu projeto para um outro editor de código-fonte, como o Visual Studio Code, desenvolvido pela Microsoft e assim praticar em um editor diferente. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#primeiros-passos"&gt;
  &lt;/a&gt;
  Primeiros Passos
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#crie-uma-pasta-para-armazenar-o-projeto-no-seu-computador"&gt;
  &lt;/a&gt;
  Crie uma pasta para armazenar o projeto no seu computador:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cf1O_uh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/02-criar-pasta-projeto.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cf1O_uh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/02-criar-pasta-projeto.png" alt="imagem pasta"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#abra-a-pasta-com-o-vs-code"&gt;
  &lt;/a&gt;
  Abra a pasta com o VS code:
&lt;/h3&gt;

&lt;p&gt;Clique com o botão direito do mouse em cima da pasta e escolha a opção "Abrir com --&amp;gt; Visual Studio Code"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lF1gsUKT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/01-abrir-com-vscode.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lF1gsUKT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/01-abrir-com-vscode.png" alt="imagem abrir-com-vscode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crie-os-arquivos-para-fazer-a-importa%C3%A7%C3%A3o-do-conte%C3%BAdo"&gt;
  &lt;/a&gt;
  Crie os arquivos para fazer a importação do conteúdo
&lt;/h3&gt;

&lt;p&gt;O VS code abrirá a pasta do projeto, porém não há ainda nenhum arquivo. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---78lq3oM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/03-criar-arquivos.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---78lq3oM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/03-criar-arquivos.png" alt="imagem abrir-com-vscode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vamos então, criar 3 arquivos, referentes às 3 colunas do CodePen contendo o HTML, o CSS e o JAVASCRIPT .&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;index.html;&lt;/li&gt;
&lt;li&gt;style.css;&lt;/li&gt;
&lt;li&gt;app.js;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feito isso, cole o conteúdo do CodePen correspondente a cada arquivo. &lt;/p&gt;

&lt;p&gt;No CodePen o conteúdo estava separado, já no VS code precisaremos referenciar os conteúdos para que fiquem interligados. Fazemos isso editando o arquivo index.html. &lt;/p&gt;

&lt;p&gt;No arquivo index.html, editamos o &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; e adicionaremos o caminho do arquivo &lt;code&gt;style.css&lt;/code&gt;. No &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; adicionaremos o link referente ao &lt;code&gt;app.js&lt;/code&gt;. Veja a imagem, onde destaquei o código em amarelo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AE_lDXL1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/04-editar-html-01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AE_lDXL1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/04-editar-html-01.png" alt="imagem editar-html"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Confira o resultado abrindo o arquivo index.html pelo seu navegador. Aqui no exemplo, usaremos o Google Chrome:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bo2_z4P5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/05-abrir-com-google.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bo2_z4P5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/05-abrir-com-google.png" alt="imagem abrir-com-google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Veja como está abrindo direitinho no Google Chrome:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eoYWgAxW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/05-abrir-com-google2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eoYWgAxW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rrodrigues345/rrodrigues345.github.io/raw/main/codepen-to-vscode/05-abrir-com-google2.png" alt="Visualizando site no Google Chrome"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora você poderá praticar também no VS code e depois exportar seus projetos para o CodePen. Fica a seu critério!&lt;/p&gt;

&lt;p&gt;Essa dica também é útil nos casos em que você ficará por um período sem internet, então nada melhor do que ter seus arquivos disponíveis &lt;em&gt;offline&lt;/em&gt; =)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seja-meu-amigo-de-bolso"&gt;
  &lt;/a&gt;
  Seja meu amigo de bolso!
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/rrodrigues345"&gt;twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.instagram.com/rrodrigues345/"&gt;instagram&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Referências:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.alura.com.br/artigos/codepen-o-que-e-e-como-usar"&gt;https://www.alura.com.br/artigos/codepen-o-que-e-e-como-usar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=xvkuNF_8Coc"&gt;https://www.youtube.com/watch?v=xvkuNF_8Coc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=j6S1Izj5mqM"&gt;https://www.youtube.com/watch?v=j6S1Izj5mqM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>codepen</category>
      <category>vscode</category>
      <category>alura</category>
      <category>imersaodev</category>
    </item>
    <item>
      <title>Sorting Algorithms in 3 Minutes</title>
      <author>mosemet</author>
      <pubDate>Tue, 14 Sep 2021 22:30:19 +0000</pubDate>
      <link>https://dev.to/tebohom/sorting-algorithms-in-3-minutes-3mf3</link>
      <guid>https://dev.to/tebohom/sorting-algorithms-in-3-minutes-3mf3</guid>
      <description>&lt;h3&gt;
  &lt;a href="#bubble-sort-algorithm"&gt;
  &lt;/a&gt;
  Bubble Sort Algorithm
&lt;/h3&gt;

&lt;p&gt;Bubble sort is a simple sorting algorithm that repeatedly steps through the array, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. The algorithm, which is a comparison sort, is named for the way smaller or larger elements "bubble" to the top of the list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;swapSort&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
                &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#min-sort-algorithm-custom"&gt;
  &lt;/a&gt;
  Min Sort Algorithm - Custom
&lt;/h3&gt;

&lt;p&gt;Min Sort or Minimum sorting algorithm is a custom algorithm I created when I started studying sorting algorithms. It merely grabs the minimum element within the array, pushes the minimum element into a new array, and also deletes that minimum element from the old array. So it will get a new minimum with each iteration until the new array is sorted. I found it quite handy as it was straightfoward to implement using built-in functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;minSort&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
                &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#selection-sort-algorithm"&gt;
  &lt;/a&gt;
  Selection Sort Algorithm
&lt;/h3&gt;

&lt;p&gt;Selection sort algorithm divides the input list into two parts: a sorted sub-list of items which is built up from left to right at the front (left) of the list and a sub-list of the remaining unsorted items that occupy the rest of the list. Initially, the sorted sub-list is empty and the unsorted sub-list is the entire input list. The algorithm proceeds by finding the smallest (or largest, depending on sorting order) element in the unsorted sub-list, exchanging (swapping) it with the leftmost unsorted element (putting it in sorted order), and moving the sub-list boundaries one element to the right.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;selectionSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;  
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
          &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; 
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#quick-sort-algorithm"&gt;
  &lt;/a&gt;
  Quick Sort Algorithm
&lt;/h3&gt;

&lt;p&gt;Quicksort is an in-place sorting algorithm. It is a divide-and-conquer algorithm. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. For this reason, it is sometimes called partition-exchange sort.[4] The sub-arrays are then sorted recursively. This can be done in-place, requiring small additional amounts of memory to perform the sorting.&lt;/p&gt;

&lt;p&gt;Animation:&lt;br&gt;
An animation on how the algorithm works can be found &lt;a href="https://en.wikipedia.org/wiki/Quicksort#/media/File:Sorting_quicksort_anim.gif"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;shift&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;quickSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pivotIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;quickSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pivotIndex&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;quickSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pivotIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#merge-sort-algorithm"&gt;
  &lt;/a&gt;
  Merge Sort Algorithm
&lt;/h3&gt;

&lt;p&gt;In computer science, merge sort (also commonly spelled as mergesort) is an efficient, general-purpose, and comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the order of equal elements is the same in the input and output. &lt;/p&gt;

&lt;p&gt;Conceptually, a merge sort works as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Divide the unsorted list into n sub-lists, each containing one element (a list of one element is considered sorted).&lt;/li&gt;
&lt;li&gt;Repeatedly merge sub-lists to produce new sorted sub-lists until there is only one sub-list remaining. This will be the sorted list.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;merger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mergedArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="nx"&gt;mergedArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;mergedArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;mergedArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;mergedArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;mergedArr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;mergeSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;middle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mergeSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mergeSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;merger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>algorithms</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 14 Sep 2021 22:19:34 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-1mki</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-1mki</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thoughtful-questions-and-study-groups"&gt;
  &lt;/a&gt;
  Thoughtful questions and study groups
&lt;/h2&gt;

&lt;p&gt;When a new developer joined &lt;a class="mentioned-user" href="https://dev.to/jingjing142"&gt;@jingjing142&lt;/a&gt;
's team, they felt compelled to write down the things that helped &lt;em&gt;them&lt;/em&gt; get started with their developer career — and lucky for us that they did!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jingjing142" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cstQ0ZbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--TBjQXFgx--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/384604/b4449fc2-17f5-4c9d-9234-66af382ad70c.jpeg" alt="jingjing142"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jingjing142/tips-for-starting-your-first-developer-job-2gfe" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Tips for starting your first developer job&lt;/h2&gt;
      &lt;h3&gt;Jing ・ Sep 7 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#womenintech&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#quick-typescript-tip"&gt;
  &lt;/a&gt;
  Quick TypeScript tip
&lt;/h2&gt;

&lt;p&gt;"The next time you consider type casting a property with as MyType," writes &lt;a class="mentioned-user" href="https://dev.to/smeijer"&gt;@smeijer&lt;/a&gt;
, "consider writing a type assertion instead." Here's why...&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/smeijer" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xcpMT_fZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--BKNo7n4T--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/163536/99565e6b-c04d-4165-985b-16990c8e1dd9.png" alt="smeijer"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/smeijer/typescript-type-assertions-4klf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Typescript Type Assertions &lt;/h2&gt;
      &lt;h3&gt;Stephan Meijer ・ Sep 7 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#assertions&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#development&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#we-all-started-out-as-beginners"&gt;
  &lt;/a&gt;
  We all started out as beginners
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/annika_h"&gt;@annika_h&lt;/a&gt;
 shared this soothing and helpful post that will really come in handy if you could use some motivation and advice this week.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/s2engineers" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MbQ0yEJR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jcJ1yWF7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2029/7ed5faf1-5170-46b9-8906-316c8ffabffe.png" alt="SinnerSchrader Engineers"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c3ygjALZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZJMP2QHa--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/358905/ebfd9aa5-da74-4ce8-939d-00184da3c192.jpeg" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/s2engineers/things-you-might-want-to-hear-from-an-experienced-developer-2m9n" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Things you might want to hear from an experienced developer &lt;/h2&gt;
      &lt;h3&gt;Annika_H for SinnerSchrader Engineers ・ Sep 8 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#motivation&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#writing-with-your-other-hand"&gt;
  &lt;/a&gt;
  Writing with your other hand
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/jessicacregg"&gt;@jessicacregg&lt;/a&gt;
 explains how switching careers is like becoming ambidextrous — it might feel impossible at first, but when you reframe the tools at your disposal, a world of options opens up!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jessicacregg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5tmg8-Po--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZFSzR6Uk--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/437227/103e69d2-3c3c-4ca7-a1bb-61003d6608b2.jpg" alt="jessicacregg"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jessicacregg/my-experience-as-a-career-switcher-in-tech-4p3j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My Experience as a Career Switcher in Tech&lt;/h2&gt;
      &lt;h3&gt;𝕛𝕖𝕤𝕤𝕚𝕔𝕒 ・ Sep 6 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;In this guide, &lt;a class="mentioned-user" href="https://dev.to/dastasoft"&gt;@dastasoft&lt;/a&gt;
 explores what Node/Express is and how it works, shows us how we can build a REST API to store and retrieve data, test endpoints, and upload our application. Super informative!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/dastasoft" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---wZs2Esu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--k5bXZLGT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/337369/f37a6e53-6f09-40cf-a55a-eb43d7c9e859.jpeg" alt="dastasoft"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dastasoft/how-every-web-developer-can-become-fullstack-with-node-js-11fc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How Every Web Developer Can Become FullStack With Node.js&lt;/h2&gt;
      &lt;h3&gt;dastasoft ・ Sep 10 ・ 25 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#100-days-of-web-security-education"&gt;
  &lt;/a&gt;
  100 days of web security education
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/lindsfonnes"&gt;@lindsfonnes&lt;/a&gt;
 is participating in 100 days of hacking — and will be sharing content about common vulnerabilities and how we as developers can defend against them. In this intro post, Lindsey presents how they view the intersection of web security. and software development.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/lindsfonnes" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WFsQxzQP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7GZb4415--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/599646/64ce8a36-7b32-44b3-b901-8949b01613f5.jpeg" alt="lindsfonnes"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lindsfonnes/why-security-is-important-for-every-developer-21d9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why Every Web Developer Should Learn About Security&lt;/h2&gt;
      &lt;h3&gt;Lindsey Fonnesbeck ・ Sep 7 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofhacking&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#baseline-scope-and-documentation"&gt;
  &lt;/a&gt;
  Baseline, scope, and documentation
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/erikmelone"&gt;@erikmelone&lt;/a&gt;
 dives into two time-efficient ways to write better documentation.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/erikmelone" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2jhTZclY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3VYrRmHp--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/694604/abe33402-1bc3-40ca-839f-6545a70a8082.jpeg" alt="erikmelone"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/erikmelone/how-to-write-clear-and-concise-documentation-4mjm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to write clear and concise documentation&lt;/h2&gt;
      &lt;h3&gt;Erik Melone ・ Sep 11 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#culture&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>An approach to loosely coupled CloudWatch alarms and contextual alerts</title>
      <author>Lars Jacobsson</author>
      <pubDate>Tue, 14 Sep 2021 21:50:27 +0000</pubDate>
      <link>https://dev.to/mathem/an-approach-to-loosely-coupled-cloudwatch-alarms-and-contextual-alerts-2fh2</link>
      <guid>https://dev.to/mathem/an-approach-to-loosely-coupled-cloudwatch-alarms-and-contextual-alerts-2fh2</guid>
      <description>&lt;p&gt;We have for the past four years used a third party for monitoring and alerting of our large scale serverless ecommerce platform. &lt;/p&gt;

&lt;p&gt;For a number of reasons, we have recently decided to leave this provider in favour of CloudWatch.&lt;/p&gt;

&lt;p&gt;This post will take you through how we used my two favourite AWS services, EventBridge and StepFunctions, to set up error anomaly detection for 100% of our Lambda functions along with context rich Slack alerts in less than two days. This model supports any resource type and alarm type, but for brevity I will focus on error anomaly alarms for Lambda.&lt;/p&gt;

&lt;p&gt;Some understanding of both &lt;a href="https://aws.amazon.com/eventbridge/"&gt;EventBridge&lt;/a&gt; and &lt;a href="https://aws.amazon.com/step-functions/"&gt;StepFunctions&lt;/a&gt; is assumed.&lt;/p&gt;




&lt;p&gt;One thing we lacked with the third party solution was a coupling with CloudFormation stacks. Monitors were created by hand and if something was removed on the AWS side we were left with an orphaned monitor.&lt;/p&gt;

&lt;p&gt;Being obsessed with automation, we needed a fast way to onboard all core resources to being monitored by CloudWatch. As a first approach we build &lt;a href="https://github.com/mhlabs/cfn-alarms"&gt;cfn-alarms&lt;/a&gt;, a CLI tool to generate CloudFormation alarm and alerting boilerplate resources based on the resources in a template, but to roll that out on hundreds of stacks proved inefficient. However, we still wanted to tie the alarms with the lifecycle of the resources they monitor so that when a Lambda function is deleted, the associated alarms are deleted with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#loosely-coupled-alarms"&gt;
  &lt;/a&gt;
  Loosely coupled alarms
&lt;/h2&gt;

&lt;p&gt;At first we looked at what we require our teams to monitor when they deploy features to our platform. We came up with a quite small list of services including Lambda errors, SQS queue depth, API 5XX/4XX rate, etc.&lt;/p&gt;

&lt;p&gt;When new resources are created or deleted, CloudTrail emits events to EventBridge's default bus with the configuration of the resource. To create or delete alarms we can simply create rules to match these events and route them to Lambda functions that programmatically spin them up or down:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  LambdaCreation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src
      Handler: lambda/creation.handler
      Events:
        LambdaCreationEvent:
          Type: EventBridgeRule
          Properties:
            InputPath: $.detail.requestParameters
            EventBusName: default
            Pattern:
              source:
                - aws.lambda
              detail-type:
                - AWS API Call via CloudTrail
              detail:
                eventName:
                  - prefix: CreateFunction
    [...]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This rule will forward the CloudTrail event's requestParameters to the function handler, which looks like this (truncated for brevity. Refer to the &lt;a href="https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CloudWatch.html#putMetricAlarm-property"&gt;SDK docs&lt;/a&gt; for syntax):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exports.handler = async (event) =&amp;gt; {
  const functionName = event.functionName;
  const tags = event.tags;

  const threshold = tags["alarm:lambda:errors:anomaly:threshold"] || 2;

  await cloudWatch
    .putAnomalyDetector({
        ... truncated ...
    })
    .promise();

  await cloudWatch
    .putMetricAlarm({
      AlarmName: `auto:${functionName}:lambda:errors:anomaly`,
      AlarmDescription: `Error anomaly detected`,
      Tags: Object.keys(tags).map((p) =&amp;gt; {
        return { Key: p, Value: tags[p] };
      }),
      ... truncated ...
    })
    .promise();
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note how we allow for customisation of certain alarm configurations by using a tagging strategy of &lt;code&gt;alarm:&amp;lt;service&amp;gt;:&amp;lt;metric&amp;gt;:&amp;lt;evaluation type&amp;gt;:&amp;lt;variable&amp;gt;&lt;/code&gt;. This naming is reflected in the &lt;code&gt;AlarmName&lt;/code&gt; property for a semantic coupling. Also note how we relay the tags from the monitored resource onto the alarm resource. This will later be used in the alerting phase when monitors go in and out of alarm.&lt;/p&gt;

&lt;p&gt;The alarm lifecycle event flow is very simple and looks like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yzE8ELK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nkrqclfpsun3nv7n923.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yzE8ELK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nkrqclfpsun3nv7n923.png" alt="Alarm creation and deletion diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This approach also allows us to build custom tooling to onboard or reconfigure the entire platform in one go without the need of deploying all stacks.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#alerting"&gt;
  &lt;/a&gt;
  Alerting
&lt;/h2&gt;

&lt;p&gt;Getting alerting right is difficult and is a balance act of not skipping valuable alerts, but at the same time keeping it brief and relevant to avoid &lt;a href="https://en.wikipedia.org/wiki/Alarm_fatigue"&gt;alarm fatigue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At Mathem we use Slack across all development teams and we have a requirement to tag all resources with the team name owning the service. We wanted to leverage this to automatically direct alerts to team specific Slack channels. This is why we relay the resource tags on the alarm resource in the code example above.&lt;/p&gt;

&lt;p&gt;When a CloudWatch alarm changes state there's an event put on EventBridge. A state can be one of &lt;code&gt;OK&lt;/code&gt;, &lt;code&gt;ALARM&lt;/code&gt; and &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt;. We are interested in alerting on &lt;code&gt;ALARM&lt;/code&gt; and communicating recovery on &lt;code&gt;OK&lt;/code&gt;. The aim is to be as brief as possible whilst giving the developers quick access to extended context, such as logs and CloudWatch metrics related to the alarm. For this we'll use a StepFunctions state machine triggered by an EventBridge rule:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source:
  - aws.cloudwatch
detail-type:
  - CloudWatch Alarm State Change
detail:
  state:
    value:
      - ALARM
      - OK
resources:
  - prefix: !Sub &amp;gt;-
      arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:auto:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the prefix matching on the alarm ARN. Including &lt;code&gt;auto:&lt;/code&gt; at the end ensures only automatically created alarms are consumed by the state machine.&lt;/p&gt;

&lt;p&gt;The state machine takes different actions depending on the alarm state and resource type the alarm is concerning.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MtOjbfCK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fiqwe10bsqkpew4cafty.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MtOjbfCK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fiqwe10bsqkpew4cafty.png" alt="State machine"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first state simply fetches the tags from the alarm resource. The tags we are interested in are &lt;code&gt;team&lt;/code&gt;, &lt;code&gt;aws:cloudformation:stack-name&lt;/code&gt; and &lt;code&gt;aws:cloudformation:logical-id&lt;/code&gt;. The &lt;code&gt;team&lt;/code&gt; tag decides where to send the alert and the &lt;code&gt;aws:cloudformation:...&lt;/code&gt; tags are used to make the alert message more human readable.&lt;/p&gt;

&lt;p&gt;Next, we check if it's an alarm or a recovery. If it's an alarm we'll send a message to a Slack channel following &lt;code&gt;#alerts-&amp;lt;teamname&amp;gt;-&amp;lt;environment&amp;gt;&lt;/code&gt;. If the channel doesn't exist, our Slack bot creates it for us.&lt;/p&gt;

&lt;p&gt;The alert is short and to the point. It also provides the developer buttons that instantly takes them to either the alarm page or the failing resource's page in the AWS console. This saves us from wasting time manually clicking our way to the root cause.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o5hws0oD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oeu6wbc2a3jtpadtuhpz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o5hws0oD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oeu6wbc2a3jtpadtuhpz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the message is sent we pass the output to a parallel state. In one branch we store the message id, or timestamp, we get back from Slack to a DynamoDB table. We'll retrieve this when the alarm has recovered to update the original message.&lt;/p&gt;

&lt;p&gt;The other branch in the parallel state allow us to extend the alarm notification with additional context depending on the resource type we're notifying about. At this point in time we have only implemented extra context for Lambda error alarms for which we fetch the most recent error log and post it as a thread reply along with a link to the log group:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fkE47KTo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s88kwdjijajq4c3cb1c8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkE47KTo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s88kwdjijajq4c3cb1c8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This can be extended with for example X-Ray data or whatever might be useful without flooding the channel.&lt;/p&gt;

&lt;p&gt;When an alarm reach an &lt;code&gt;OK&lt;/code&gt; state we update the original alarm instead of posting a new message.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oAl8_UQ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8i4rv1johelqks5mxc5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oAl8_UQ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8i4rv1johelqks5mxc5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;This post covered an approach using EventBridge and Lambda to onboard a large set of resources to be monitored by CloudWatch Alarms and StepFunctions to create contextual  Slack alerts that can easily be extended to other notification channels.&lt;/p&gt;

&lt;p&gt;You can find a reference project for this post &lt;a href="https://github.com/ljacobsson/cw-alarms-poc"&gt;here&lt;/a&gt;. The state of the project is early days and be mindful of &lt;a href="https://aws.amazon.com/cloudwatch/pricing/"&gt;CloudWatch Alarm costs&lt;/a&gt; before deploying.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>eventbridge</category>
      <category>stepfunctions</category>
    </item>
    <item>
      <title>
HackerRank #38 | SubArray | 🇧🇷 </title>
      <author>Beatriz Maciel</author>
      <pubDate>Tue, 14 Sep 2021 21:03:14 +0000</pubDate>
      <link>https://dev.to/beatrizmaciel/hackerrank-38-subarray-1693</link>
      <guid>https://dev.to/beatrizmaciel/hackerrank-38-subarray-1693</guid>
      <description>&lt;p&gt;&lt;a href="https://www.hackerrank.com/challenges/java-negative-subarray/problem"&gt;Este exercício&lt;/a&gt; me custou algumas muitas horas de resolução. Não tanto pelo enunciado, mas sim pelo desenvolvimento.&lt;br&gt;
O problema pede para que peguemos um &lt;code&gt;int n&lt;/code&gt; que vai delimitar a quantidade de elementos de um array. No exemplo, ele usa &lt;code&gt;n = 5&lt;/code&gt; e devolve um array com 5 elementos, separados por espaço.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;5
1 -2 4 -5 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O intuito é de fazer subarrays a partir desse array, sendo que cada subarray pode ter 1 ou mais posições. Exemplos de arrays que podem ser formados:&lt;/p&gt;

&lt;p&gt;Subarrays que podem ser formados começando na posição 0:&lt;/p&gt;

&lt;p&gt;[1]&lt;br&gt;
[1, -2]&lt;br&gt;
[1, -2, 4]&lt;br&gt;
[1, -2, 4, -5]&lt;br&gt;
[1, -2, 4, -5, 1]&lt;/p&gt;

&lt;p&gt;Subarrays que podem ser formados começando na posição 2:&lt;/p&gt;

&lt;p&gt;[4]&lt;br&gt;
[4, -5]&lt;br&gt;
[4, -5, 1]&lt;/p&gt;

&lt;p&gt;Subarrays que podem ser formados começando na posição 4:&lt;br&gt;
[1]&lt;/p&gt;

&lt;p&gt;Agora que já sabemos como são feitos os subarrays, queremos saber quanto será o resultado da soma deles. Por exemplo:&lt;/p&gt;

&lt;p&gt;[1]                    = 1&lt;br&gt;
[1, -2]                = -1&lt;br&gt;
[1, -2, 4]             = 3&lt;br&gt;
[1, -2, 4, -5]         = -2&lt;br&gt;
[1, -2, 4, -5, 1]      = -1&lt;/p&gt;

&lt;p&gt;O problema pede para descobrirmos quantos subarrays têm como resultado somas negativas. No caso acima, 3 subarrays têm resultados negativos, mas sabemos que ainda podemos fazer vários outros subarrays e para isso precisamos contabilizar a soma array por array.&lt;/p&gt;

&lt;p&gt;=======&lt;/p&gt;

&lt;p&gt;Para resolver esse problema, segui o passo a passo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Escaneei o &lt;code&gt;int n&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Fiz um novo array com &lt;code&gt;n&lt;/code&gt; elementos: &lt;code&gt;int[] array = new int[n]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Fiz um for que escaneia os valores para todos os &lt;code&gt;n&lt;/code&gt; elementos
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        Scanner scanner = new Scanner(new File("input.txt"));
        int n = scanner.nextInt();
        int[] array = new int[n];

        for (int i = 0; i &amp;lt; n; i++) {
            array[i] = scanner.nextInt();
        }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Declarei a variável &lt;code&gt;int sum = 0;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Declarei a variável &lt;code&gt;int negativeSum = 0;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Fiz dois &lt;code&gt;for&lt;/code&gt;, um dentro do outro. O primeiro &lt;code&gt;for (j)&lt;/code&gt; serve para fixar a primeira posição do array, enquanto que o segundo &lt;code&gt;for&lt;/code&gt; (z) vai percorrer todos os elementos seguintes.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        for (int j = 0; j &amp;lt; array.length; j++) {
            for (int z = j; z &amp;lt; array.length; z++) {
              Boolean isNegativeSum = negativeSum(j,z, array);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Dentro do segundo &lt;code&gt;for&lt;/code&gt;, será necessário passar um método booleano que faz a soma dos elementos dentro do array e confere se são negativos ou positivos (lembrando que queremos contar apenas os arrays que têm resultados negativos!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O método passa &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; e &lt;code&gt;array&lt;/code&gt; e faz mais uma iteração. Fica assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public static Boolean negativeSum(int j, int z, int[] array) {

        int sum = 0;
        for (int i = j; i &amp;lt;= z; i++) {
            sum += array[i];
        }

        if (sum &amp;lt; 0)
            return true;

        return false;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Por fim, ao retornar para a &lt;code&gt;main&lt;/code&gt; depois de ter passado pelo método booleano, somamos, através da soma &lt;code&gt;isNegativeSum++&lt;/code&gt;. Código final fica assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] array = new int[n];

        for (int i = 0; i &amp;lt; n; i++) {
            array[i] = scanner.nextInt();
        }

        int sum = 0;
        int negativeSum = 0;
        for (int j = 0; j &amp;lt; array.length; j++) {
            for (int z = j; z &amp;lt; array.length; z++) {
                Boolean isNegativeSum = negativeSum(j,z, array);

                if (isNegativeSum) {
                    negativeSum++;
                }
            }
        }
        System.out.println(negativeSum);
    }

    public static Boolean negativeSum(int j, int z, int[] array) {

        int sum = 0;
        for (int i = j; i &amp;lt;= z; i++) {
            sum += array[i];
        }

        if (sum &amp;lt; 0)
            return true;

        return false;

    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;=======&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Referências:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/4439595/how-to-create-a-sub-array-from-another-array-in-java"&gt;How to create a subarray from another array&lt;/a&gt; : StackOverFlow&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.baeldung.com/java-array-sum-average"&gt;Java array sum average&lt;/a&gt; : Baeldung&lt;/p&gt;

</description>
      <category>java</category>
      <category>subarray</category>
      <category>array</category>
    </item>
    <item>
      <title>AWS User Group Dubai 2021 Container Series Meetups</title>
      <author>Vlad Ionescu</author>
      <pubDate>Tue, 14 Sep 2021 20:37:50 +0000</pubDate>
      <link>https://dev.to/aws-heroes/aws-user-group-dubai-2021-container-series-meetups-49fi</link>
      <guid>https://dev.to/aws-heroes/aws-user-group-dubai-2021-container-series-meetups-49fi</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post will be updated with more information after each meetup!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#details"&gt;
  &lt;/a&gt;
  Details
&lt;/h2&gt;

&lt;p&gt;This series of talks and hands-on workshops around the concept of "&lt;em&gt;AWS cloud-native modern applications&lt;/em&gt;" introduces AWS cloud platform in that light. Starting with the core building blocks of modernizing traditional applications, and how to capitalize on AWS services and capabilities to build a better resilient, reliable application with cloud-native design in mind.&lt;/p&gt;

&lt;p&gt;It's 2021. There is a need to find ways to speed up the process of deploying, scaling, and automating our applications, also enable developers and operations teams "&lt;em&gt;DevOps&lt;/em&gt;" to collaborate effectively, work efficiently, save resources, and solve the matrix from Hell problems. The magic word here is Containers. This is a pragmatic hands-on series of workshops to introduce members to AWS container workloads focusing on the fundamentals and where to start, AWS Containers 101 workshop.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Conception &amp;amp; leadership: AWS Container Hero &lt;strong&gt;Walid Shaari&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Organizer: AWS Community Hero &lt;strong&gt;Anas Khattar&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Outreach: AWS Community Hero &lt;strong&gt;Ahmed Samir&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Speakers:

&lt;ul&gt;
&lt;li&gt;AWS Container Hero &lt;strong&gt;Walid Shaari&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;AWS Container Hero &lt;strong&gt;Vlad Ionescu&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Follow AWS UG Dubai on Twitter: &lt;a href="https://twitter.com/awsdubai"&gt;@awsdubai&lt;/a&gt; and &lt;a href="https://twitter.com/AWSomeMENA"&gt;@AWSomeMENA&lt;/a&gt;!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This post will be updated with more information after each meetup!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#intro-to-containers-101"&gt;
  &lt;/a&gt;
  Intro to Containers 101
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wlsme5iQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07rqf2tjsg5yefrb5up6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wlsme5iQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07rqf2tjsg5yefrb5up6.png" alt="Cover image for the first talk"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the first talk of this new series, we will introduce the format for this multi-talk series. After that, we’ll discuss containers in an abstract way. Why do we use containers? What are some different ways of running containers?&lt;/p&gt;

&lt;p&gt;Agenda:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intro to this series: speakers, format, sponsors&lt;/li&gt;
&lt;li&gt;What are some ideal use cases for containers?&lt;/li&gt;
&lt;li&gt;How can we run containers in production?&lt;/li&gt;
&lt;li&gt;Open discussions, Q&amp;amp;A&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keywords:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Containers, Docker, OCI&lt;/li&gt;
&lt;li&gt;AWS ECS, Amazon EKS, Kubernetes, Lambda Containers, Serverless&lt;/li&gt;
&lt;li&gt;Immutable Infrastructure, Virtual Machines, VMs&lt;/li&gt;
&lt;li&gt;Gitpod, GitHub Codespaces&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;📆 Date: Wednesday, Sept. 15, 2021, at 8:30 PM UTC +4&lt;/p&gt;

&lt;p&gt;🌍 Venue: online, see all the details at &lt;a href="https://www.meetup.com/AWS-Dubai/events/280711543/"&gt;AWS UG Dubai Meetup #8 (virtual): Part 1 - Intro to Containers 101&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This post will be updated with more information after each meetup!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#building-containers-102"&gt;
  &lt;/a&gt;
  Building Containers 102
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ivBjqAOe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oo0xm708vdyg3q206zdj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ivBjqAOe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oo0xm708vdyg3q206zdj.png" alt="Cover image for the second talk"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this session we will discuss everything about building containers. What’s a container image? how do we build a container image? and the definition of OCI will be covered. We will end this talk with some best practices, and we will build up some excitement for the workshop!&lt;/p&gt;

&lt;p&gt;Agenda:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Container workflows&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Dockerfiles&lt;/li&gt;
&lt;li&gt;Building an image&lt;/li&gt;
&lt;li&gt;Tagging an image&lt;/li&gt;
&lt;li&gt;Running a container from an image&lt;/li&gt;
&lt;li&gt;Best practices and helpful tools&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keywords:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dockerfiles&lt;/li&gt;
&lt;li&gt;Docker, OCI, Open Container Initiative&lt;/li&gt;
&lt;li&gt;GitHub Actions, CircleCI&lt;/li&gt;
&lt;li&gt;AWS ECR, Github Container Registry, Dockerhub, Quay&lt;/li&gt;
&lt;li&gt;Hadolint, Snyk, Dependabot, Dive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;📆 Date: Tuesday, Sept. 21, 2021, at 8:30 PM UTC +4&lt;/p&gt;

&lt;p&gt;🌍 Venue: online, see all the details at &lt;a href="https://www.meetup.com/AWS-Dubai/events/280722294/"&gt;AWS UG Dubai Meetup #9 (virtual): Part 2 - Building Containers 102&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This post will be updated with more information after each meetup!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#building-containers-102-lab"&gt;
  &lt;/a&gt;
  Building Containers 102 Lab
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jy2_2HDE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79jq2bko622tqt8rwpuv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jy2_2HDE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79jq2bko622tqt8rwpuv.png" alt="Cover image for the workshop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this hands-on lab you will learn how to build containers for different applications. After a short introduction, each student will open a pre-configured Gitpod workspace and build container images for 3 applications: one Go app, one Python app, and a React app! Once an image is built, we will push the image to Amazon Elastic Container Registry. For extra credit, we will also inspect the image we built. No previous experience with Docker, Go, Python, React, or Javascript is required!&lt;/p&gt;

&lt;p&gt;This will be a live and guided workshop, leveraging Zoom, Slack, and Gitpod.&lt;/p&gt;

&lt;p&gt;Requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub account&lt;/li&gt;
&lt;li&gt;Gitpod account (can be created instantly)&lt;/li&gt;
&lt;li&gt;An active AWS account (if you don’t have an AWS account, you can do the first half of the workshop)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keywords:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS, ECR, Amazon Elastic Container Registry, Github Container Registry, Dockerhub, Quay&lt;/li&gt;
&lt;li&gt;Workshop, Interactive, Live, Guided&lt;/li&gt;
&lt;li&gt;Docker, OCI, Containerd, Buildkit, GitHub Actions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;📆 Date: Wednesday, Sept. 22, 2021, at 8:30 PM UTC +4&lt;/p&gt;

&lt;p&gt;🌍 Venue: online, see all the details at &lt;a href="https://www.meetup.com/AWS-Dubai/events/280722765/"&gt;AWS UG Dubai Meetup #10 (virtual): Part 3 - Building Containers Lab&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This post will be updated with more information after each meetup!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#application-modernization-with-amazon-eks"&gt;
  &lt;/a&gt;
  Application Modernization with Amazon EKS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tl6s65IN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sq0897hj7ivyuf0hstgt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tl6s65IN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sq0897hj7ivyuf0hstgt.png" alt="Cover image for the fourth talk"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this session, we will explore the popular workload manager and scheduler Kubernetes. Amazon managed Kubernetes service, Elastic Container Service for Kubernetes (Amazon EKS)  takes care of the heavy-lifting and lets one focus on managing the containerized workloads. EKS, however, still gives you the flexibility and choice where to run, and how to efficiently run your data-plane that hosts your workloads. In this session, we cover what you need to know to get your application up and running with Kubernetes on AWS. We show how Amazon EKS makes deploying Kubernetes on AWS simple and scalable.&lt;/p&gt;

&lt;p&gt;Agenda:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Review the general Kubernetes architecture and relate to EKS&lt;/li&gt;
&lt;li&gt;How to set up and provision your Kubernetes cluster using console and eksctl.&lt;/li&gt;
&lt;li&gt;Discuss the important abstractions that developers use to map their traditional application into any kubernetes platform.&lt;/li&gt;
&lt;li&gt;How to deploy software efficiently, while sustaining reliable and scalable applications. &lt;/li&gt;
&lt;li&gt;Deploy your first microservices on EKS&lt;/li&gt;
&lt;li&gt;EKS possible development deployment workflow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keywords:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;EKS-Distro, EKS-Anywhere&lt;/li&gt;
&lt;li&gt;Fargate, data plane&lt;/li&gt;
&lt;li&gt;YAML, Helm, Gitops, Operators&lt;/li&gt;
&lt;li&gt;Pod, Deployment, Service, ConfigMap, Secret&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;📆 Date: Tuesday, Sept. 28, 2021, at 8:30 PM UTC +4&lt;/p&gt;

&lt;p&gt;🌍 Venue: online, see all the details at &lt;a href="https://www.meetup.com/AWS-Dubai/events/280723703/"&gt;AWS UG Dubai Meetup #11: Part 4 - Application Modernization with Amazon EKS&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This post will be updated with more information after each meetup!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>devops</category>
    </item>
    <item>
      <title>JS Coding Question #8: Capitalize All Words In A Sentence [Not So Easy]😓😣</title>
      <author>Let's Code</author>
      <pubDate>Tue, 14 Sep 2021 19:16:29 +0000</pubDate>
      <link>https://dev.to/frontendengineer/code-this-8-capitalize-all-words-in-a-sentence-not-so-easy-2bcn</link>
      <guid>https://dev.to/frontendengineer/code-this-8-capitalize-all-words-in-a-sentence-not-so-easy-2bcn</guid>
      <description>&lt;h4&gt;
  &lt;a href="#interview-question-8"&gt;
  &lt;/a&gt;
  Interview Question #8:
&lt;/h4&gt;

&lt;p&gt;Write a function that will capitalize all words in a sentence.🤔&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you need practice, try to solve this on your own. I have included 3️⃣ potential solutions below. &lt;/p&gt;

&lt;p&gt;Note: There are many other potential solutions to this problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Feel free to bookmark 🔖 even if you don't need this for now. You may need to refresh/review down the road when it is time for you to look for a new role.&lt;/p&gt;

&lt;p&gt;Codepen: If you want to play around and experiment with the code: &lt;a href="https://codepen.io/angelo_jin/pen/xxrdBVE"&gt;https://codepen.io/angelo_jin/pen/xxrdBVE&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#solution-1-array-map-recommended"&gt;
  &lt;/a&gt;
  Solution #1: Array Map (Recommended)
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;This is one solution I would go by if I am going to be asked in an interview. It pretty straight-forward approach and is legible. 🔥
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#solution-2-array-reduce-recommended"&gt;
  &lt;/a&gt;
  Solution #2: Array Reduce (Recommended)
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Another solution that I like. Array reduce is used as intended where one value is returned as a result of every iteration. Pretty sexy 💃 approach just like array map above.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#solution-3-forof-loop"&gt;
  &lt;/a&gt;
  Solution #3: for-of loop
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Below is an alternative solution that can be used but it creates a variable to push results which array reduce solves easily. I see this as an OK option.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Happy coding and good luck if you are interviewing!&lt;/p&gt;

&lt;p&gt;If you want to support me - &lt;a href="https://www.buymeacoffee.com/letscode77"&gt;Buy Me A Coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case you like a video instead of bunch of code 👍😊&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5Vc2-kdGZ1s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>challenge</category>
      <category>javascript</category>
      <category>jobinterview</category>
    </item>
    <item>
      <title>How to Build Technical Debt Backlog from Scratch</title>
      <author>LTV Co. Engineering</author>
      <pubDate>Tue, 14 Sep 2021 19:16:20 +0000</pubDate>
      <link>https://dev.to/ltvengineering/how-to-build-technical-debt-backlog-from-scratch-l2j</link>
      <guid>https://dev.to/ltvengineering/how-to-build-technical-debt-backlog-from-scratch-l2j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of%C2%A0content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#start-simple"&gt;Start simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#spread-the-idea"&gt;Spread the idea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#make-it-happen"&gt;Make it happen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusions"&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;We all know the feeling of spending a Friday afternoon waiting for error-prone code to evolve into a production bug to make you suffer. You’ve tried to improve it, but then your product manager comes to you with a higher priority feature that needs to be addressed as soon as possible.&lt;/p&gt;

&lt;p&gt;Well, the bug will have to wait for another time, maybe next week? And then, the cycle will begin anew. With each new cycle, you’re amassing what’s known as technical debt.&lt;/p&gt;

&lt;p&gt;An article in the Information and Software Technology Journal &lt;a href="https://www.sciencedirect.com/science/article/pii/S0950584917305098"&gt;defines technical debt as&lt;/a&gt; “the consequences of software development actions that intentionally or unintentionally prioritize client value and/or project constraints such as delivery deadlines, over more technical implementation and design considerations…”&lt;/p&gt;

&lt;p&gt;There are so many small actions (and inactions) that probably contribute to tech debt. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We never updated the library because it isn’t a priority and it works fine… until it doesn’t.&lt;/li&gt;
&lt;li&gt;We created a temporary fix for an urgent issue that became permanent.&lt;/li&gt;
&lt;li&gt;We omitted tests for a new feature because of a deadline, making it harder to refactor the code later without breaking something because of the lack of tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just like any other loan, the longer we postpone our tech debt the more work that has to be done in order to pay it off. Dealing with production bugs and witnessing developer frustration is what motivates us to take a more proactive approach to managing tech debt. With the ultimate goal of making it more of a priority for the company, we want to start defining our procedures.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#start-simple"&gt;
  &lt;/a&gt;
  Start simple &lt;a&gt;
&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We want the documentation process to be simple, yet effective—something where everyone can contribute and propose solutions in a structured way that is easy to understand and communicative.&lt;/p&gt;

&lt;p&gt;We can start with a simple table like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nr8Ojf72--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/148bcxzzktf4fn5xq2vw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nr8Ojf72--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/148bcxzzktf4fn5xq2vw.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will end up with a clean table that works as the foundation. Of course, you can start adding your own columns—the things you have seen, things you wanted to fix, etc. But it’s impossible for you to know everything about every single file in your project, which is why it’s important to get other developers involved and allow them to fill in the gaps. As you might expect, they won’t have difficulty flagging examples of technical debt in the code. After all, who knows it better than those who work with it every day?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#spread-the-idea"&gt;
  &lt;/a&gt;
  Spread the idea &lt;a&gt;
&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Next comes the critical step of getting your product managers involved. They will be a key piece of this process because they are the ones that decide if you work on something or just let it sit in the backlog. They deal with business requests and it could be hard for them to push those back and let developers work on something that is hard to monetize or that is not a key feature.&lt;/p&gt;

&lt;p&gt;The solution is to make them aware of how much it costs to deal with technical debt during the development process, and how getting rid of it could save a lot of time and money. Here are some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Cleaner code makes it easier to track bugs.&lt;/strong&gt; Remember that hard to read code you wanted to fix? When it eventually becomes a production bug, you’ll spend hours trying to understand the code, finding the issue and implementing a fix for it. Having clear code from the start makes that process easier—but if it’s just spaghetti, it could be a hard time.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Save dev/QA time and money.&lt;/strong&gt; It is simple math, fewer bugs means less QA time and less time trying to code a fix. Let’s see an example:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Imagine you fix a bug on one section of your application, you send it to QA, and it’s approved and deployed. Great! But a few days later, the same bug is reported on a different part of the application. And yes, it’s the exact same code you just fixed, but it was duplicated all over the place. Investing a few hours on refactoring and removing duplicated code will save you days of dev/QA cycles for the same fix over and over.&lt;/p&gt;

&lt;p&gt;Let’s try to quantify both scenarios:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xy3H2cf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gb0u9flj85c61l59g2f.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xy3H2cf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gb0u9flj85c61l59g2f.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4cDFW7vs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9t0dwcderevzzi691yi.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4cDFW7vs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9t0dwcderevzzi691yi.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some people might argue that it’s just a couple of hours and a few bucks, but the real value of this is when you multiply it by several weekly bugs. For example, assuming you see this scenario on a weekly basis, then it means &lt;strong&gt;you will save 104 hours and $6,864 per year&lt;/strong&gt;—resources that you could be using on adding new revenue generating features instead.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Reduce the learning curve for new developers.&lt;/strong&gt; As new developers get into a team/project, the first challenge they will face is to get used to the code. The sooner they learn it and understand it, the sooner they can start being productive. Having a clean codebase would make it easier for them.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Avoid developer frustration and demotivation.&lt;/strong&gt; It’s not a secret that dealing with bugs and poor code can be frustrating for developers. If they have to deal with it on a daily basis, they can quickly burn out.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you get the PM on board, you can improve your base table and add backlog related details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wfzMZj7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilno995m4rfecof1jk7f.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wfzMZj7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilno995m4rfecof1jk7f.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#make-it-happen"&gt;
  &lt;/a&gt;
  Make it happen &lt;a&gt;
&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;After the previous steps, you will have something more robust and similar to a backlog. So you can roll up your sleeves with your PM to start creating the tickets and prioritizing them into the backlog. Here are some useful tips:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It’s important to tag or differentiate them somehow, otherwise they can easily get lost and sit in the backlog forever.&lt;/li&gt;
&lt;li&gt;Prioritize them. Add estimates and define estimated dates for when they’re going to be executed.&lt;/li&gt;
&lt;li&gt;Make sure to keep it up to date. Keep checking that the tickets are actually being processed and not pushed back.
Ideally, you can schedule a recurring reminder to check up on tech debt tickets.&lt;/li&gt;
&lt;li&gt;Define some guidelines about how to report tech debt, that way you can help make sure that the developer has clear instructions on how to report new tech debt and keep the backlog clean.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Great job! Just like that, tech debt is now part of your regular backlog, everyone is aware of its existence and tickets can be pulled into a sprint and assigned to developers.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions &lt;a&gt;
&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Tech debt is present in every software project. But most people tend to just ignore it, either because it can’t be monetized or because they don’t give it the importance it deserves. But it’s the team’s responsibility to talk about it, to make it visible to everyone, and most importantly to demonstrate the risk and negative impact that it can have on projects and developer motivation.&lt;/p&gt;

&lt;p&gt;This is not a one-time exercise. Creating the backlog is just the base for it, but then everyone has to continue working to keep it updated and make this process part of the daily routine.&lt;/p&gt;

&lt;p&gt;It shouldn’t be a hard or painful process as long as everyone gets involved and remains committed to it. If you make it part of your regular development process you’ll quickly see the benefits of prioritizing tech debt.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nRRm2ZU8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8nplwcaivb2vvg8vrf9n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nRRm2ZU8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8nplwcaivb2vvg8vrf9n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>workflow</category>
      <category>processimprovement</category>
    </item>
    <item>
      <title>Better React Micro Frontends w/ Nx</title>
      <author>Graham Marlow</author>
      <pubDate>Tue, 14 Sep 2021 19:09:35 +0000</pubDate>
      <link>https://dev.to/mgmarlow/better-react-micro-frontends-w-nx-5gnm</link>
      <guid>https://dev.to/mgmarlow/better-react-micro-frontends-w-nx-5gnm</guid>
      <description>&lt;p&gt;One of the first articles we covered in &lt;a href="https://techbookclub.dev"&gt;tech book club&lt;/a&gt; was &lt;a href="https://martinfowler.com/articles/micro-frontends.html"&gt;Micro Frontends&lt;/a&gt;, an approach to scaling frontend development across many independent and autonomous teams.&lt;/p&gt;

&lt;p&gt;Although the content of the article is well-articulated, the accompanying example is lacking. It hacks &lt;a href="https://create-react-app.dev/"&gt;create-react-app&lt;/a&gt; with an extra package to enable Webpack builds and offers no mechanism to run all of the micro frontend applications in tandem. The example is easy to follow, but inspires no confidence for a real-world scenario.&lt;/p&gt;

&lt;p&gt;After experimenting with different tools and approaches, I think I've constructed a better scaffold for micro frontends that improves the overall developer experience. This article walks you through that approach.&lt;/p&gt;

&lt;p&gt;You can find the complete example &lt;a href="https://github.com/mgmarlow/micronx"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monorepos-with-nx"&gt;
  &lt;/a&gt;
  Monorepos with Nx
&lt;/h2&gt;

&lt;p&gt;One of the major disadvantages to micro frontends is complexity. Rather than maintaining all of your application code in one place, that code is now spread across multiple applications and managed by separate teams. This can make collaboration on shared assets difficult and tedious.&lt;/p&gt;

&lt;p&gt;Keeping each micro frontend within the same repository (monorepo) is one easy way to help manage this complexity. Google &lt;a href="https://cacm.acm.org/magazines/2016/7/204032-why-google-stores-billions-of-lines-of-code-in-a-single-repository/fulltext"&gt;famously uses this technique&lt;/a&gt; to manage its billion-line codebase, relying on automation and tools to manage the trade-offs.&lt;/p&gt;

&lt;p&gt;Rather than using create-react-app to bootstrap micro frontends, turn instead to &lt;a href="https://nx.dev/"&gt;Nx&lt;/a&gt;. Nx is a build framework that offers tools to manage a multi-application monorepo, a perfect fit for micro frontends.&lt;/p&gt;

&lt;p&gt;Here are a few ways Nx helps manage micro frontends:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Script orchestration: run servers/builds for multiple micro frontends concurrently with a single command.&lt;/li&gt;
&lt;li&gt;Share common components and code libraries conveniently without introducing lots of Webpack overhead.&lt;/li&gt;
&lt;li&gt;Manage consistent dependency versions.&lt;/li&gt;
&lt;li&gt;Run builds and tests for affected changes across micro frontends based on &lt;a href="https://nx.dev/latest/react/core-extended/affected"&gt;dependency graphs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nx is certainly not the only tool that supports monorepos, but I’ve found it to be a great fit for micro frontends thanks to its built-in React support and batteries-included functionality. &lt;a href="https://lerna.js.org/"&gt;Lerna&lt;/a&gt; is noteworthy alternative that offers less built-in functionality at the advantage of flexibility.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#detailed-example"&gt;
  &lt;/a&gt;
  Detailed example
&lt;/h2&gt;

&lt;p&gt;Nx requires only a few configuration changes to support micro frontends and you won’t need the help of an ejection tool like &lt;code&gt;react-app-rewired&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new Nx workspace with two React applications (one container, one micro frontend).&lt;/li&gt;
&lt;li&gt;Extend Nx’s default React Webpack configuration to disable chunking and generate an asset manifest.&lt;/li&gt;
&lt;li&gt;Implement conventional micro frontend components as described in the Thoughtworks article.&lt;/li&gt;
&lt;li&gt;Tie it all together with a single &lt;code&gt;npm start&lt;/code&gt; script.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-create-the-nx-workspace"&gt;
  &lt;/a&gt;
  1. Create the Nx workspace
&lt;/h2&gt;

&lt;p&gt;Begin by creating a new Nx workspace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-nx-workspace@latest micronx

? What to create &lt;span class="k"&gt;in &lt;/span&gt;the new workspace...
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; empty
Use Nx Cloud?
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; No
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Navigate into the new &lt;code&gt;micronx&lt;/code&gt; directory and create two React applications, one container and one micro frontend. It’s important to select &lt;code&gt;styled-components&lt;/code&gt; (or another CSS-in-JS solution) so that your component CSS is included in the micro frontend’s JS bundle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ./micronx
npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--also&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dev @nrwl/react

&lt;span class="c"&gt;# Container application&lt;/span&gt;
nx g @nrwl/react:app container
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; styled-components
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; No

&lt;span class="c"&gt;# Micro frontend&lt;/span&gt;
nx g @nrwl/react:app dashboard
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; No
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far you've created a monorepo with two separate React applications: container and dashboard. Either React application can be served independently via its respective &lt;code&gt;nx run &amp;lt;app&amp;gt;:serve&lt;/code&gt; script, but there's nothing yet in place to have them work together.&lt;/p&gt;

&lt;p&gt;The next step sprinkles in some configuration changes that allow you to dynamically load the dashboard application as a micro frontend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-modify-micro-frontend-webpack-configuration"&gt;
  &lt;/a&gt;
  2. Modify micro frontend Webpack configuration
&lt;/h2&gt;

&lt;p&gt;Nx stores most of its relevant configuration in the &lt;code&gt;workspace.json&lt;/code&gt; file stored at the project's root.&lt;/p&gt;

&lt;p&gt;You need to modify &lt;code&gt;workspace.json&lt;/code&gt; to point the micro frontend’s Webpack configuration to a new file, &lt;code&gt;webpack.config.js&lt;/code&gt;. This new file contains the configuration updates necessary to support dynamically loading the micro frontend.&lt;/p&gt;

&lt;p&gt;Note that you don’t need to do this for the container, since the container is not a micro frontend.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;workspace.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"projects"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dashboard"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"targets"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"webpackConfig"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"webpack.config.js"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you need to create that file, &lt;code&gt;webpack.config.js&lt;/code&gt;, at the root directory of the project.&lt;/p&gt;

&lt;p&gt;This modified Webpack configuration extends the default code from &lt;a href="https://github.com/nrwl/nx/blob/master/packages/react/plugins/webpack.ts"&gt;@nrwl/react&lt;/a&gt; to avoid losing any functionality. Following the Thoughtworks example, two modifications are needed to support conventional micro frontends:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Disable chunking so the container application loads one bundle per micro frontend.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;WebpackManifestPlugin&lt;/code&gt; to map the generated JS output to an easy import path (taken from &lt;a href="https://github.com/facebook/create-react-app/blob/bb64e31a81eb12d688c14713dce812143688750a/packages/react-scripts/config/webpack.config.js#L705"&gt;react-scripts webpack configuration&lt;/a&gt;).
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--also&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dev webpack-manifest-plugin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// webpack.config.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reactWebpackConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nrwl/react/plugins/webpack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;WebpackManifestPlugin&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webpack-manifest-plugin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getWebpackConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reactWebpackConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Disable chunking&lt;/span&gt;
  &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;optimization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;optimization&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;runtimeChunk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;splitChunks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Enable asset-manifest&lt;/span&gt;
  &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WebpackManifestPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;asset-manifest.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;publicPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;entrypoints&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;manifestFiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;manifest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;manifest&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;manifest&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;entrypointFiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entrypoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;fileName&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.map&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;manifestFiles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;entrypoints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;entrypointFiles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getWebpackConfig&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;nx run dashboard:serve&lt;/code&gt; and visit &lt;a href="http://localhost:4200/asset-manifest.json"&gt;http://localhost:4200/asset-manifest.json&lt;/a&gt;. Note that the dashboard application now only has one entry point: &lt;code&gt;main.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"files"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"main.js"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/main.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"main.js.map"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/main.js.map"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"polyfills.js"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/polyfills.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"polyfills.js.map"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/polyfills.js.map"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"assets/.gitkeep"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/assets/.gitkeep"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"favicon.ico"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/favicon.ico"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"index.html"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/index.html"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"entrypoints"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"main.js"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-add-in-micro-frontend-components"&gt;
  &lt;/a&gt;
  3. Add in micro frontend components
&lt;/h2&gt;

&lt;p&gt;With Nx configured properly, the next step is to follow Thoughtworks example and introduce all of the micro frontend functionality.&lt;/p&gt;

&lt;p&gt;The following links don't deviate from the article, but are included for completeness.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/mgmarlow/micronx/blob/main/apps/container/src/app/MicroFrontend.tsx"&gt;Create a new component, &lt;code&gt;MicroFrontend&lt;/code&gt;, in the container&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/mgmarlow/micronx/blob/main/apps/container/src/app/app.tsx"&gt;Use the &lt;code&gt;MicroFrontend&lt;/code&gt; component to load the dashboard micro frontend in the container&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/mgmarlow/micronx/blob/main/apps/dashboard/src/main.tsx"&gt;Export render functions so the dashboard micro frontend no longer renders itself to the DOM&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/mgmarlow/micronx/blob/main/apps/dashboard/src/index.html"&gt;Update the dashboard's &lt;code&gt;index.html&lt;/code&gt; so it can still be served independently&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#4-tie-everything-together"&gt;
  &lt;/a&gt;
  4. Tie everything together
&lt;/h2&gt;

&lt;p&gt;The last step is to serve the micro frontend and container together. Add &lt;code&gt;concurrently&lt;/code&gt; and modify your start script to serve the dashboard on a specific port.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"concurrently &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;nx run container:serve&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;nx run dashboard:serve --port=3001&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;npm start&lt;/code&gt; and you've got micro frontends.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-with-nx"&gt;
  &lt;/a&gt;
  Working with Nx
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#serving-micro-frontends"&gt;
  &lt;/a&gt;
  Serving micro frontends
&lt;/h3&gt;

&lt;p&gt;Nx doesn't have out-of-the-box functionality for serving multiple applications simultaneously, which is why I resorted to &lt;code&gt;concurrently&lt;/code&gt; in the above example. That said, running individual micro frontends is made easy with the Nx CLI.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Develop micro frontends independently via &lt;code&gt;nx run &amp;lt;project&amp;gt;:serve&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;See how they fit into the whole application via &lt;code&gt;npm start&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#generators"&gt;
  &lt;/a&gt;
  Generators
&lt;/h3&gt;

&lt;p&gt;Nx ships with a &lt;a href="https://nx.dev/latest/react/react/overview#generators"&gt;handful of generators&lt;/a&gt; that help scaffold your application. In particular, the library generator makes it really easy to share React components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nx g lib common
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This creates a new React library in your project's &lt;code&gt;libs/&lt;/code&gt; directory with a bunch of pre-configured build settings. Included is a convenient TypeScript path alias that makes importing the library straightforward:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// apps/dashboard/src/app/app.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ComponentA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ComponentB&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@micronx/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nx provides additional benefits to sharing code this way by keeping track of your project's &lt;a href="https://nx.dev/latest/react/structure/dependency-graph"&gt;dependency graph&lt;/a&gt;. The relationships between your various code libraries and each dependent application can be illustrated by running &lt;code&gt;nx dep-graph&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Internally, Nx uses this dependency graph to reduce the number of builds/tests that need to be run when changes are introduced. If you make a change to &lt;code&gt;apps/dashboard/&lt;/code&gt; and run &lt;code&gt;nx affected:test&lt;/code&gt;, Nx will only run tests for the Dashboard micro frontend. This becomes very powerful as the dependency graph of your project grows in complexity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optimizations"&gt;
  &lt;/a&gt;
  Optimizations
&lt;/h3&gt;

&lt;p&gt;Something unique to the micro frontend strategy is the duplication of common vendor dependencies and shared code libraries in the production JS bundles.&lt;/p&gt;

&lt;p&gt;The Thoughwork's article touches on this in the &lt;a href="https://martinfowler.com/articles/micro-frontends.html#CommonContent"&gt;"Common Content"&lt;/a&gt; section, advocating for tagging common dependencies as &lt;a href="https://webpack.js.org/configuration/externals/"&gt;Webpack externals&lt;/a&gt; to prevent them from being included in each application's final bundle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;externals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;react&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ReactDOM&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once &lt;a href="https://nx.dev/latest/react/guides/webpack-5"&gt;Nx upgrades its React tools to Webpack 5&lt;/a&gt;, a new method of code optimization will be available for micro frontend projects via &lt;a href="https://webpack.js.org/concepts/module-federation/"&gt;Module Federation&lt;/a&gt;. This strategy enables building shared code libraries (&lt;code&gt;libs/&lt;/code&gt;) &lt;a href="https://webpack.js.org/concepts/module-federation/#components-library-as-container"&gt;into the container application&lt;/a&gt;, removing yet another common dependency from the micro frontend bundles.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>I Curated 1000s of APIs For Your Next Project !</title>
      <author>Saumya</author>
      <pubDate>Tue, 14 Sep 2021 18:57:59 +0000</pubDate>
      <link>https://dev.to/saumya66/i-curated-1000s-of-apis-for-your-next-project-53ce</link>
      <guid>https://dev.to/saumya66/i-curated-1000s-of-apis-for-your-next-project-53ce</guid>
      <description>&lt;p&gt;Hi, fellow Programmers, I understand the pain of searching APIs for a project that you have an idea of. Wandering around the internet and not finding it sometimes.&lt;/p&gt;

&lt;p&gt;So I went around the internet and curated 10 Sites that have the most massive listing of APIs. And you can use these APIs for free on any project idea that you have!&lt;/p&gt;

&lt;p&gt;Waaait..if you are a video person I've got you covered 👍:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6ASdKXEyBtc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So without further ado, here they are 👇: &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-publicapi-github-repo-"&gt;
  &lt;/a&gt;
  1. public-api Github Repo :
&lt;/h3&gt;

&lt;p&gt;If you have ever searched for API Listings you must have come across this github repository. As it has a massive collection of 915 APIs in one place. And has around 154,000 Github Stars ! 🤯&lt;/p&gt;

&lt;p&gt;Go to  &lt;a href="https://github.com/public-apis/public-apis"&gt;public-api&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rpRy0W3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631642241315/P-8xnopaT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rpRy0W3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631642241315/P-8xnopaT.png" alt="PublicAPI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-rapid-api-"&gt;
  &lt;/a&gt;
  2. Rapid API :
&lt;/h3&gt;

&lt;p&gt;This is a really helpful product based on just APIs. It's not just a listing of APIs but also a marketplace for APIs. If you have built an API and want to charge people for using it, you can just put it on RapidAPI.&lt;/p&gt;

&lt;p&gt;And if you just want to use APIs, you can even test an API on multiple languages, in the API playground that RapidAPI provides! 👌 It is really helpful.&lt;/p&gt;

&lt;p&gt;Go to the  &lt;a href="https://rapidapi.com/collection/list-of-free-apis"&gt;Free API listing of RapidAPI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bIfK8OIR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631642320034/VlOrDggyB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bIfK8OIR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631642320034/VlOrDggyB.png" alt="Free API listing of RapidAPI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-dev-resources-"&gt;
  &lt;/a&gt;
  3. Dev Resources :
&lt;/h3&gt;

&lt;p&gt;This is not just an API resource but as pretty explanatory from its name - It has super awesome resources from various categories for a Developer! 😀&lt;/p&gt;

&lt;p&gt;Go to  &lt;a href="https://devresourc.es/tools-and-utilities/public-apis"&gt;Dev Resources - Public API&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NtQ-5W_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631642339710/zJ6DWGgnK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NtQ-5W_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631642339710/zJ6DWGgnK.png" alt="Dev Resources"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-api-house-"&gt;
  &lt;/a&gt;
  4. API House :
&lt;/h3&gt;

&lt;p&gt;SuperClean UI. Choose the API category and get awesome APIs.&lt;/p&gt;

&lt;p&gt;Go to  &lt;a href="https://apihouse.vercel.app"&gt;API House&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xzmUAkb8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631642348723/29mPAQ19xl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xzmUAkb8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631642348723/29mPAQ19xl.png" alt="API House"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-public-apis"&gt;
  &lt;/a&gt;
  5. Public APIs:
&lt;/h3&gt;

&lt;p&gt;According to Public Apis, they have a collection of 800+ interesting and useful Public APIs under 70+ categories.&lt;/p&gt;

&lt;p&gt;Go to  &lt;a href="https://public-apis.xyz/"&gt;Public apis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LWz0qw_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631642387762/0UKJp1eZ6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LWz0qw_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631642387762/0UKJp1eZ6.png" alt="Public apis"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-public-apis"&gt;
  &lt;/a&gt;
  6. Public Apis:
&lt;/h3&gt;

&lt;p&gt;This is a super awesome place. Good UI. You can submit and list your own APIs. You can learn a lot about APIs from it "Learn" section. You can search APIs. Filter them according to free of premium &amp;amp; also the category!&lt;/p&gt;

&lt;p&gt;Has a great newsletter too with 45,000 users as said in the site.&lt;/p&gt;

&lt;p&gt;Go to  &lt;a href="https://public-apis.io/"&gt;Public APIs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ihlbGek9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631642395079/SXg4KxefN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ihlbGek9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631642395079/SXg4KxefN.png" alt="Public Apis"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-api-list"&gt;
  &lt;/a&gt;
  7. API List:
&lt;/h3&gt;

&lt;p&gt;This is a cool place with very well categorized APIs.  &lt;/p&gt;

&lt;p&gt;Go to  &lt;a href="https://apilist.fun/"&gt;API List&lt;/a&gt;.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2I4lnO28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631642411060/SUOW8LbSY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2I4lnO28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631642411060/SUOW8LbSY.png" alt="API List"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-anyapi"&gt;
  &lt;/a&gt;
  8. AnyApi:
&lt;/h3&gt;

&lt;p&gt;Go to  &lt;a href="https://any-api.com/"&gt;Any API&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lddVXQ_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631642445294/1TMYXuUln.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lddVXQ_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631642445294/1TMYXuUln.png" alt="AnyApi"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-free-apis-"&gt;
  &lt;/a&gt;
  9. Free APIs :
&lt;/h3&gt;

&lt;p&gt;Go to  &lt;a href="https://free-apis.github.io/#/"&gt;Free APIs&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uCzyuOnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631642451179/FIInJ1FCe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uCzyuOnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631642451179/FIInJ1FCe.png" alt="Free APIs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-public-api"&gt;
  &lt;/a&gt;
  10. Public API:
&lt;/h3&gt;

&lt;p&gt;A ton of fun APIs in here too!&lt;/p&gt;

&lt;p&gt;Go to  &lt;a href="https://www.public-apis.ml/"&gt;Public API&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ODC81Xyh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631642457871/VFOx45Cm8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ODC81Xyh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631642457871/VFOx45Cm8.png" alt="Free APIs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope it helps you make more awesome projects, get more confident and be a better Engineer!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hi-im-saumya-i-keep-documenting-my-journey-on-youtube-and-also-active-on-twitter"&gt;
  &lt;/a&gt;
  Hi, I'm Saumya. I keep documenting my journey on  &lt;a href="https://www.youtube.com/c/saumyanayak"&gt;Youtube&lt;/a&gt; and also active on  &lt;a href="https://twitter.com/saumya4real"&gt;Twitter&lt;/a&gt;.  🙌
&lt;/h4&gt;

&lt;p&gt;Would love to connect with you &amp;amp; I'll see you in the next one! 😉&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>code</category>
      <category>programming</category>
      <category>project</category>
    </item>
  </channel>
</rss>
