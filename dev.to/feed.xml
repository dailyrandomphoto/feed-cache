<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Solution: Delete Operation for Two Strings</title>
      <author>seanpgallivan</author>
      <pubDate>Fri, 07 May 2021 09:11:28 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-delete-operation-for-two-strings-235k</link>
      <guid>https://dev.to/seanpgallivan/solution-delete-operation-for-two-strings-235k</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/delete-operation-for-two-strings/discuss/1195718"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-583-medium-delete-operation-for-two-strings"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/delete-operation-for-two-strings/"&gt;Leetcode Problem #583 (&lt;em&gt;Medium&lt;/em&gt;): Delete Operation for Two Strings&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given two strings &lt;code&gt;word1&lt;/code&gt; and &lt;code&gt;word2&lt;/code&gt;, return &lt;em&gt;the minimum number of &lt;strong&gt;steps&lt;/strong&gt; required to make &lt;code&gt;word1&lt;/code&gt; and &lt;code&gt;word2&lt;/code&gt; the same&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In one &lt;strong&gt;step&lt;/strong&gt;, you can delete exactly one character in either string.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;word1 = "sea", word2 = "eat"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;You need one step to make "sea" to "ea" and another step to make "eat" to "ea".&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;word1 = "leetcode", word2 = "etco"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= word1.length, word2.length &amp;lt;= 500&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;word1&lt;/code&gt; and &lt;code&gt;word2&lt;/code&gt; consist of only lowercase English letters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This problem is basically asking us to identify the &lt;strong&gt;longest common subsequence&lt;/strong&gt; (&lt;strong&gt;LCS&lt;/strong&gt;) between the two words (&lt;strong&gt;W1, W2&lt;/strong&gt;). The answer will then be the combined difference between the length of the words and the length of the LCS.&lt;/p&gt;

&lt;p&gt;For a typical LCS solution, we would use a &lt;strong&gt;bottom-up&lt;/strong&gt; &lt;strong&gt;dynamic programming&lt;/strong&gt; (&lt;strong&gt;DP&lt;/strong&gt;) approach and use nested loops to compare each letter of each word against each other (&lt;strong&gt;W1[i], W2[j]&lt;/strong&gt;). This would normally call for a DP array of size &lt;strong&gt;(m + 1) * (n + 1)&lt;/strong&gt;, where &lt;strong&gt;m = W1.length&lt;/strong&gt; and &lt;strong&gt;n = W2.length&lt;/strong&gt;. Since the LCS process references the previous row and column for the target cell, we'll need the extra buffer of &lt;strong&gt;0&lt;/strong&gt;-filled cells. Each cell in the DP array at &lt;strong&gt;dp[i][j]&lt;/strong&gt; will represent the longest subsequence found between &lt;strong&gt;W1.substr(0,i)&lt;/strong&gt; and &lt;strong&gt;W2.susbtr(0,j)&lt;/strong&gt;. Our final answer will then be &lt;strong&gt;dp[m][n]&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Since the DP array is being built iteratively, in order, we can reduce the normal &lt;strong&gt;space complexity&lt;/strong&gt; from &lt;strong&gt;O(N * M)&lt;/strong&gt; by only keeping the current and last rows (&lt;strong&gt;dpCurr, dpLast&lt;/strong&gt;) as we iterate through. This will drop the space complexity to &lt;strong&gt;O(N)&lt;/strong&gt;. Doing this, we can also ensure that the shorter word is used for &lt;strong&gt;N&lt;/strong&gt; by swapping the two words if necessary.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N * M)&lt;/strong&gt; where &lt;strong&gt;N&lt;/strong&gt; and &lt;strong&gt;M&lt;/strong&gt; are the lengths of the two words&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(N)&lt;/strong&gt; where &lt;strong&gt;N&lt;/strong&gt; is the length of the smaller of the two words&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Javascript and Java will find it easier to iterate repeatedly through an array rather than a string, so we can initially &lt;strong&gt;split()&lt;/strong&gt; or &lt;strong&gt;toCharArray()&lt;/strong&gt; the two words (&lt;strong&gt;WA1, WA2&lt;/strong&gt;).&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;minDistance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;W1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;W2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;W1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;W2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;W1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;W2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;W2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;W1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;WA1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;W1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;WA2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;W2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;dpLast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint16Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;dpCurr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint16Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
            &lt;span class="nx"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;WA1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;WA2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;minDistance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;W1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;W2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;W1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;W2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;W1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;W2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;W2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;W1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
        &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;W1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;W2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;minDistance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="no"&gt;W1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="no"&gt;W2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;W1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;W2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;tempStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;W1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="no"&gt;W1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;W2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="no"&gt;W2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempStr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tempInt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempInt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="no"&gt;WA1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;W1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toCharArray&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="no"&gt;WA2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;W2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toCharArray&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;WA1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; 
                &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;WA2&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
                    &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                    &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;tempArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;dpLast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;dpCurr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempArr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;minDistance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;W1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;W2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;W1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;W2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;W1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;W2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;W1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
                &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;W2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                    &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>Website Security: 11 Steps to protect your Website from Attacks 🐱‍💻</title>
      <author>webdeasy.de</author>
      <pubDate>Fri, 07 May 2021 09:05:28 +0000</pubDate>
      <link>https://dev.to/webdeasy/website-security-11-steps-to-protect-your-website-from-attacks-207d</link>
      <guid>https://dev.to/webdeasy/website-security-11-steps-to-protect-your-website-from-attacks-207d</guid>
      <description>&lt;p&gt;&lt;em&gt;At this very moment, countless websites become targets of hacker attacks. Often, uninstalled updates and ignorance are to blame. What you can do to prevent hacker attacks on your website, you can learn here.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hacker attacks are very unpleasant for those affected and can lead to loss of revenue, loss of customer confidence and other unpleasant consequences. Therefore, you should regularly check your website security for potential security vulnerabilities and fix them as soon as possible.&lt;/p&gt;

&lt;p&gt;Some weak points can be eliminated quite easily with a few small steps. There are also certain techniques that should be observed when implementing (programming) the website in order to protect your website from hackers in the best possible way.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents 🛡️
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#website-security-check"&gt;Website Security Check&lt;/a&gt; ✔️&lt;/li&gt;
&lt;li&gt;&lt;a href="#attack-scenarios"&gt;Possible attack scenarios ⚔️&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Improve Website Security&lt;/strong&gt; 🔒

&lt;ul&gt;
&lt;li&gt;&lt;a href="#tls"&gt;1. Use TLS (SSL) certificate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sql"&gt;2. Avoid SQL Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#xss"&gt;3. XSS (CORS) Issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ddos-protection"&gt;4. Prevent DDOS Attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#secure-passwords"&gt;5. Use strong passwords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#session-management"&gt;6. Session Management &amp;amp; Cookie Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#informations"&gt;7. Hide public (sensitive) information&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#validate-user-data"&gt;8. Validate user input&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#updates"&gt;9. Install updates regularly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#backups"&gt;10. Create Regular Backups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#spam-form"&gt;11. Prevent Spam in Contact Form&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt; 📝&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#website-security-check"&gt;
  &lt;/a&gt;
  Website Security Check ✔️ &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Website security is a very complex topic and in general: &lt;strong&gt;no system is unhackable!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;However, you can make it very difficult for attackers and especially against mass attacks, such as Brute-Force-Attacks, you can protect yourself relatively easily, you just have to go about it.&lt;/p&gt;

&lt;p&gt;It is best to close security holes as soon as possible, before someone discovers them and can exploit them maliciously. To detect them, there are now many tools online, such as &lt;a href="https://siwecos.de/"&gt;Siwecos&lt;/a&gt; or &lt;a href="https://www.virustotal.com/gui/home/url"&gt;VirusTotal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These tools check a whole range of possible vulnerabilities. Many of them are only recommendations, others should definitely be fixed. However, really critical vulnerabilities are not always detected by such tools, so manual checking is definitely necessary.&lt;/p&gt;

&lt;p&gt;You should check and implement the following safety aspects in any case.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#possible-attack-scenarios"&gt;
  &lt;/a&gt;
  Possible attack scenarios &lt;a&gt;&lt;/a&gt; ⚔️
&lt;/h1&gt;

&lt;p&gt;There are an almost infinite number of attack scenarios on websites or web servers. In the following, I will briefly discuss the most common scenarios and briefly explain what happens during an attack. In “good” attacks, often a combination of a variety of different ways is tried to hack the system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SQL Injection (SQLi):&lt;/strong&gt; Malicious database queries are injected to read data or gain access.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brute-Force-Attacks:&lt;/strong&gt; Trial and error is used to try to gain access to a system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Local File Inclusion (LFI):&lt;/strong&gt; Malicious source code is executed on the target system and can have various consequences – such as system takeover.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cross-Site-Scripting (XSS):&lt;/strong&gt; Execution of malicious JavaScript code in the browser of the website visitor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Defacement:&lt;/strong&gt; Infiltrating/altering information on a website, e.g. to spread political propaganda.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DDoS Angriff:&lt;/strong&gt; The aim is to crash the target system by overloading it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take over website/web server and use as bot:&lt;/strong&gt; Web server becomes part of a botnet to spread malware, for example.&lt;/p&gt;

&lt;p&gt;The goals of the attack types can be different: Some are aimed at tapping user data, others try to overload the system and crash it, and others simply want to cause chaos.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#improve-website-security"&gt;
  &lt;/a&gt;
  Improve Website Security 🔒
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#1-use-tls-ssl-certificate"&gt;
  &lt;/a&gt;
  1. Use TLS (SSL) certificate &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;TLS certificates (also known as SSL – SSL is the older version of the protocol) for websites are responsible for secure communication between client and server and are a very important part of website security. The certificate encrypts all data exchanged between the browser (client) and the website (server). Without this encryption, all passwords or even bank data could be intercepted in plain text by attackers.&lt;/p&gt;

&lt;p&gt;Secure (encrypted) connections can be recognized by the lock in front of the domain and the preceding &lt;strong&gt;https://&lt;/strong&gt; like here:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H1DMl4Qk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeasy.de/wp-content/uploads/2019/05/ssl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H1DMl4Qk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeasy.de/wp-content/uploads/2019/05/ssl.png" alt="https:// of the domain webdeasy.de"&gt;&lt;/a&gt;&lt;br&gt;
In addition, certification authorities (CA) such as &lt;a href="https://www.globalsign.com/en"&gt;GlobalSign&lt;/a&gt; confirm the authenticity of a domain or even the entire company. This ensures that it is a real website and not, for example, a phising site or similar. Especially for sites with login you should always make sure that this lock appears in front of the domain.&lt;/p&gt;

&lt;p&gt;If your website deals with personal data, &lt;strong&gt;you definitely need an TLS certificate&lt;/strong&gt;. Its use must also be mentioned in the privacy policy in a corresponding paragraph. For more information, please contact your data protection officer.&lt;/p&gt;

&lt;p&gt;Most hosters have a free TLS certificate included. Otherwise you can rent it there for a small fee. Alternatively, you can also generate a free certificate from &lt;a href="https://letsencrypt.org/"&gt;Let’s Encrypt&lt;/a&gt;. If you use &lt;a href="https://docs.plesk.com/de-DE/onyx/customer-guide/websites-und-domains/sichern-von-verbindungen-mit-ssltlszertifikaten/abrufen-eines-kostenlosen-ssltlszertifikats-von-let%E2%80%99s-encrypt.77233/"&gt;Plesk&lt;/a&gt; to manage your website, you can install the extension for free and use it to protect domains and mail servers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;FunFact:&lt;/strong&gt; Google is its own certification authority (CA), so they virtually certify themselves. 🤯 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E9lTTj27--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeasy.de/wp-content/uploads/2019/05/Google-SSL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E9lTTj27--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeasy.de/wp-content/uploads/2019/05/Google-SSL.png" alt="*.google.com Certificate"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#2-avoid-sql-injection"&gt;
  &lt;/a&gt;
  2. Avoid SQL Injection &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;An SQL injection is an attack in which foreign SQL code is executed on the server-side system of the server. In this way, the attacker can execute SQL queries on the server and thus modify or read data.&lt;/p&gt;

&lt;p&gt;Whhhaaaaattt? Don’t worry, here’s a little example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;index&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;“4” was written to the SQL statement by a user input and everything is fine. However, the user can also enter the following into an HTML input or HTML textarea: &lt;em&gt;“4; UPDATE name SET place=’somewhere’ WHERE ID=4”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Our SQL statement would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;index&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'somewhere'&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The update command was inserted into the statement. An attacker simply used it to change a record from the database.&lt;/p&gt;

&lt;p&gt;In this example, only an unimportant value is changed. However, such attacks can also change passwords and read confidential data from the database. Attackers do not do this manually, of course, but use tools for this purpose. You can also use them to see if your website is vulnerable.&lt;/p&gt;

&lt;p&gt;To protect against this, it is essential that you mask all user input before it is executed in the database. How this works depends on the programming language.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Here you can find a &lt;a href="https://webdeasy.de/en/php-database-class/"&gt;PHP database class&lt;/a&gt; that is secured against SQL Injections and that you can use for your website for free.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.veracode.com/blog/secure-development/how-prevent-sql-injection-nodejs"&gt;Prevent SQL-Injection in Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/prevent-python-sql-injection/"&gt;Prevent SQL-Injection in Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-xss-cors-issue"&gt;
  &lt;/a&gt;
  3. XSS (CORS) Issue &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;XSS stands for &lt;strong&gt;Cross-Site Scripting&lt;/strong&gt; and is an attack that executes malicious code in the visitor’s browser. How this happens is quite simple. Here’s an example: In a form on a website, you can write normal text. Let’s assume we have a guestbook where the text is simply displayed on the website. I.e. the user input is loaded 1: 1 into the website. However, if the attacker enters JavaScript tags (e.g. &lt;code&gt;&amp;lt;script&amp;gt;alert('HIHIHAHA H4CK3D! 😈');&amp;lt;/script&amp;gt;&lt;/code&gt;) with malicious code instead of a text and it is embedded in the website, it will be executed for all users in the browser.&lt;/p&gt;

&lt;p&gt;CORS stands for &lt;strong&gt;Cross-Origin Resource Sharing&lt;/strong&gt; and can prevent such attacks. It prohibits (or allows) connections for certain scripts or URLs. Therefore, you should definitely check your CORS configuration on the server.&lt;/p&gt;

&lt;p&gt;Since this malicious code enters the server via user input, it is beneficial to check every user input. You can use either a &lt;strong&gt;blacklist&lt;/strong&gt; or a &lt;strong&gt;whitelist&lt;/strong&gt; for this purpose. If you only want to allow a few inputs, you should use the whitelist and check whether the input is on the whitelist. If you have a lot of entries and want to reject only a few, you can write “Forbidden” on the blacklist and reject entries with contents of the blacklist.&lt;/p&gt;

&lt;p&gt;This is how it might look in JavaScript for a blacklist:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// this variable comes from your html input&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;blacklist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;link&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  &lt;span class="c1"&gt;// These are the FORBIDDEN words&lt;/span&gt;
&lt;span class="nx"&gt;blacklist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blacklistEntry&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blacklistEntry&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You used a forbidden word! Stop it!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Everything is great! Go on!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for a whitelist like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;edit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// this variable comes from your html input&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;whitelist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;delete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;edit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  &lt;span class="c1"&gt;// only these words are ALLOWED&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isValid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;whitelist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;whitelist&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;isValid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Everything is great! Go on!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You have not used the right word!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find more information about CORS &lt;a href="https://www.securai.de/veroeffentlichungen/blog/was-ist-cors-und-welche-sicherheitsauswirkungen-hat-es-auf-web-applikationen/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-prevent-ddos-attacks"&gt;
  &lt;/a&gt;
  4. Prevent DDOS Attacks &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;DDOS stands for Distributed Denial of Service and is an attack in which the server is brought to its knees by overload. This happens because a huge computer network (botnets) “spams” the server with connections.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mrnX1zcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeasy.de/wp-content/uploads/2019/05/800px-Stachledraht_DDos_Attack.svg_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mrnX1zcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeasy.de/wp-content/uploads/2019/05/800px-Stachledraht_DDos_Attack.svg_.png" alt="Visualized DDOS Attack, Source: https://de.wikipedia.org/wiki/Denial_of_Service#/media/File:Stachledraht_DDos_Attack.svg"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Source: &lt;a href="https://de.wikipedia.org/wiki/Denial_of_Service#/media/File:Stachledraht_DDos_Attack.svg"&gt;https://de.wikipedia.org/wiki/Denial_of_Service#/media/File:Stachledraht_DDos_Attack.svg&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Fortunately, there are services that cannot completely stop such attacks, but can at least dampen them to a certain point. One provider is &lt;a href="https://www.cloudflare.com/ddos/"&gt;Cloudflare&lt;/a&gt;, for example. As a rule, however, these services are subject to a fee. Therefore, you should carefully consider whether you need protection against DDOS attacks.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#5-use-strong-passwords"&gt;
  &lt;/a&gt;
  5. Use strong passwords&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This step is important for everyone. Not only administrators, but also private individuals should pay attention to secure passwords. This includes upper and lower case letters, numbers, digits and special characters. In my opinion, passwords should be at least 8 characters or even longer. Here you can &lt;a href="https://www.lastpass.com/de/password-generator"&gt;generate passwords easily and securely&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since you then have a large number of passwords and they are hard to remember, you can make your life easier with a password manager like &lt;a href="https://keepass.info/download.html"&gt;KeePass&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#6-session-management-amp-cookie-handling"&gt;
  &lt;/a&gt;
  6. Session Management &amp;amp; Cookie Handling&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Logins require sessions to know which user is logged in and what actions they are allowed to perform. A unique session ID is stored to uniquely identify a user. In the past, these were often appended to the URL. For example, it looks like this: &lt;code&gt;example.com/dashboard?sid=89234nFJK98nkdf823njkFsdn387$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, if you send this link to show friends this page, they are logged in directly. The session ID was sent with the link and the server thinks that it is the same user. If you send such a link to a close friend it is often not tragic. But imagine you share this link in a social network… 💥&lt;/p&gt;

&lt;p&gt;Therefore, many years ago, it was decided to find a better solution. That’s why links should look like this today: &lt;code&gt;https://example.com/dashboard&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here the session ID is not included in the URL, but stored in a cookie that is only stored in the user’s temporary memory. Others who call the link have no possibility (this way) to take over his session.&lt;/p&gt;

&lt;p&gt;Here you can take a look at how to implement a &lt;a href="https://webdeasy.de/en/complete-login-system-with-node-js-vue-js-restapi-jwt-part-1-2/"&gt;secure login system with Node.js&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#7-hide-public-sensitive-information"&gt;
  &lt;/a&gt;
  7. Hide public (sensitive) information&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;There is information that does not belong in the public domain. For websites, for example, this is the PHP version, the absolute file path of the website (e.g. /var/www/html/webroot/site1990/new/stage/) or the server operating system.&lt;/p&gt;

&lt;p&gt;To illustrate this, I have a frightening example here. With Google I have the possibility to search not only for specific keywords, but also with parameters e.g. file extensions and citations. So with this search I can display pages that have a publicly accessible phpinfo file. In this file the complete PHP configuration of a server is disclosed and we get a lot of interesting information about the server.&lt;/p&gt;

&lt;p&gt;I typed “ext:php intitle:phpinfo” into Google search and get a few results. One result gave me this page:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hK4yFtv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeasy.de/wp-content/uploads/2019/05/php4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hK4yFtv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeasy.de/wp-content/uploads/2019/05/php4.png" alt="Public phpinfo.php of a page&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;br&gt;
Among them are hundreds of lines with all PHP settings. This is fatal, because this server is still running PHP version 4.4.2. Support and further development of this PHP version has already been discontinued since 2008 and contains serious security vulnerabilities.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://de.wikipedia.org/wiki/PHP#PHP_4"&gt;https://de.wikipedia.org/wiki/PHP#PHP_4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should therefore delete these sensitive files after use or protect them with a password (e.g. via an &lt;a href="https://www.lcn.com/support/articles/how-to-password-protect-a-folder-on-your-website-with-htaccess/"&gt;.htaccess file&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;You should also make sure that the &lt;code&gt;display_errors&lt;/code&gt; variable is set to &lt;code&gt;Off&lt;/code&gt; on live systems. This is because attackers also receive information about the internal file system there. It is even worse with database errors. Here, in the worst case, even the access data is output. &lt;strong&gt;Of course, this should be prevented at all costs!&lt;/strong&gt; In your PHP settings you can instead specify that error messages should be written to a log file.&lt;/p&gt;

&lt;p&gt;With an Apache web server you can change the line in your &lt;em&gt;php.ini&lt;/em&gt; to &lt;code&gt;Off&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;display_errors = Off
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you do not have access to this file, you can insert the following line at the beginning of the file in individual PHP scripts. It is important that this command is executed before the first output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ini_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;display_errors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This disables all error messages for the time being. From time to time, however, you need an output to debug a script. In this case it is a good idea to output the output only for your own IP. Under PHP it works like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_SERVER&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"REMOTE_ADDR"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"YOUR.IPV4.ADDRESS.HERE"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"your debug output"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#8-validate-user-input"&gt;
  &lt;/a&gt;
  8. Validate user input&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The topic of validation is a large one and is interesting and even essential for developers. Validation is about checking and validating the data sent from the client to the server according to certain rules. Invalid input is rejected in the process, as it may also contain malicious code. This step is also important against &lt;a href="#xss"&gt;XSS attacks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Especially when data is written to a database, validation is even more important. This way, even server commands can be executed. In the worst case, even data can be deleted or the server can be shut down. We have already covered this in &lt;a href="#sql-injections"&gt;2. Avoid SQL Injection&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To make it clear what I mean by validation, here is an example in PHP:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;// if id is not a number&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;is_numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"id not valid"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// type must be one of the following strings&lt;/span&gt;
&lt;span class="nv"&gt;$types&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"slow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"slower"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"normal"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"fast"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"faster"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;in_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$types&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"invalid type"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Parameters successfully validated&lt;/span&gt;
&lt;span class="c1"&gt;// Code goes here&lt;/span&gt;
&lt;span class="k"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the parameters &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; are passed as GET parameters. The script is aborted if &lt;code&gt;id&lt;/code&gt; is not a number or &lt;code&gt;type&lt;/code&gt; is not in the &lt;code&gt;$types&lt;/code&gt; whitelist. The script is then terminated with &lt;code&gt;exit()&lt;/code&gt;. If the conditions do not apply, the rest of the code can be executed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-install-updates-regularly"&gt;
  &lt;/a&gt;
  9. Install updates regularly&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Many websites are based on a CMS (Content Management System), such as &lt;a href="https://webdeasy.de/en/wordpress-code-snippets-en/"&gt;WordPress&lt;/a&gt;, &lt;a href="https://www.drupal.org/"&gt;Drupal&lt;/a&gt; or &lt;a href="https://www.joomla.de/"&gt;Joomla&lt;/a&gt;. To ensure security, there are regular updates. Again and again new security holes are found and closed by the developers as soon as possible. For this reason, your CMS installation should always be up to date. With most CMS you can set email notifications to be informed about new updates. You should take advantage of this and manually check your pages for updates at regular intervals.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With the tool &lt;a href="https://secure.wphackedhelp.com/"&gt;WPHackedHelp&lt;/a&gt; you can check your WordPress site for security vulnerabilities.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The same applies to the installed plugins. As soon as stable updates are available, you should install them.&lt;/p&gt;

&lt;p&gt;Also, your host system (server system) should always be up to date. It is not a big deal if you still have Ubuntu 18.04 instead of the latest Ubuntu 20.04. The important thing is that you use a version that still gets active security updates. On the manufacturer’s pages you can usually find overviews, in which details of individual releases are listed. If you read the abbreviation &lt;strong&gt;LTS&lt;/strong&gt; (Long Term Support), everything is usually good. This means that your version is supported longer, i.e. it is provided with current updates longer than other versions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Before you update your website and plugins to the latest version, you should create a backup in case something goes wrong during the update and you need to restore the original version.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#10-create-regular-backups"&gt;
  &lt;/a&gt;
  10. Create Regular backups&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Regular backups indirectly contribute to the security of your website. If you find out today that your website has been compromised, you can easily revert to an old state and close the security holes.&lt;/p&gt;

&lt;p&gt;Many hosters offer regular snapshots for free or for an additional charge. If you manage your hosting through Plesk, you can use the backup manager or directly create a shell script that backs up directories like &lt;em&gt;/var/www/vhosts&lt;/em&gt; to an external backup storage. Your hoster will surely help you choose the right backup solution.&lt;/p&gt;

&lt;p&gt;External backups are backups that are saved on a completely different system. In the best case, they are even in another data center. Because as we have seen in the past, even a data center is not safe from &lt;a href="https://constellix.com/news/massive-fire-destroyed-ovh-strasbourg-data-center"&gt;external influences&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-prevent-spam-in-contact-form"&gt;
  &lt;/a&gt;
  11. Prevent Spam in Contact Form&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Many (well-known) websites have a big problem with bots that leave spam in all kinds of forms on the website. This can be very annoying.&lt;/p&gt;

&lt;p&gt;To protect yourself against this, you can easily install the &lt;a href="https://webdeasy.de/en/hide-google-recaptcha-badge/"&gt;Google reCAPTCHA&lt;/a&gt; or if you use WordPress, I can recommend the plugin &lt;a href="https://wordpress.org/plugins/antispam-bee/"&gt;Antispam Bee&lt;/a&gt;. Just install and set up, done.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion&lt;a&gt;&lt;/a&gt; 📝
&lt;/h1&gt;

&lt;p&gt;Whew! That was quite a few steps to improve your website security. Which security aspects are implemented on your website and which ones are you catching up on? Or maybe you have some more steps to protect yourself from attacks?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: All information is compiled to the best of our knowledge. These are tips, but cannot replace a complete safety check by an expert! (A similar post was published by me about 2 years ago, this is an update and improvement)&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#if-you-liked-the-article-i-would-be-happy-if-you-check-out-my-blog-webdeasyde-and-follow-me-on-twitter"&gt;
  &lt;/a&gt;
  &lt;em&gt;If you liked the article, I would be happy if you check out &lt;a href="https://webdeasy.de/"&gt;my blog webdeasy.de&lt;/a&gt; and follow me on &lt;a href="https://twitter.com/webdeasy"&gt;Twitter&lt;/a&gt;.&lt;/em&gt; 😃
&lt;/h4&gt;

</description>
      <category>security</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>php</category>
    </item>
    <item>
      <title>A day in the life of a Software Engineer at Holland &amp; Barrett</title>
      <author>Jacob Herper</author>
      <pubDate>Fri, 07 May 2021 09:02:01 +0000</pubDate>
      <link>https://dev.to/jakeherp/a-day-in-the-life-of-a-software-engineer-at-holland-barrett-88p</link>
      <guid>https://dev.to/jakeherp/a-day-in-the-life-of-a-software-engineer-at-holland-barrett-88p</guid>
      <description>&lt;p&gt;A lot has changed for most tech companies over the last year. While we were all working from an office at least 3-4 days per week before the pandemic hit in early 2020, almost everybody works remotely now. At Holland &amp;amp; Barrett, we are in the lucky position to help people with their wellbeing during the pandemic. Therefore, our stores remained open throughout all the lockdowns, but we also saw a significantly increased demand in our digital platform. This is one of the main reasons our engineering team has grown from a small part of the organisation to over 150 people in less than one year - and we continue to grow beyond our wildest beliefs just one short year ago. This article should give you a rough idea of what a typical day in a software engineer's life for the UK's leading health and wellness retailer looks like.&lt;/p&gt;

&lt;p&gt;I usually start my workday at 8:00 am with a fresh cup of tea by opening up my email client to check on any issues that might have happened overnight or see if any meetings have been scheduled after I left work at 4:30 pm the day before. Next, I sign in to Jira to check the progress of the current sprint and see if any of my colleagues' tickets are ready for code review, at which point I open up Gitlab to look at open Pull Requests (or Merge Requests, how Gitlab calls them) and see if any of them require my attention. Furthermore, I connect to the VPN at this point to access any of our internal APIs and run code without interruption on my local machine. I typically spend around an hour on code reviews for my peers to ensure all our tickets move along smoothly.&lt;/p&gt;

&lt;p&gt;Now is a great time to catch up on Slack conversations that might have happened after I left the day before since our team works flexible hours, and while my workday ends at 4:30 pm, other colleagues work until six or even later.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7diB0tOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4hhr9xs5cgpvlfwnfoq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7diB0tOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4hhr9xs5cgpvlfwnfoq.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At 10 am, it's time for our daily standup where our cross-functional squad goes over what we did the day before, what we are planning to work on today and whether there are any issues or blockers that require a colleague to resolve before we can move forward. Standups are relatively quick in our team, and by 10:15 am, I usually find time to focus on actual development work. More often than not, the mornings are free of meetings, which allows us to either work on tickets alone or collaborate with a colleague to do some pair programming or discuss an issue we ran into in our code.&lt;/p&gt;

&lt;p&gt;With a short break in between to stretch my legs and grab another beverage, this takes me to around 1 pm – lunchtime!&lt;/p&gt;

&lt;p&gt;One of the great benefits of working remotely full-time is sharing my lunchtime with my wife and daughter and cooking a fresh meal every day and depending on how long it takes me to cook, I can either go for a quick walk with my daughter or find some time to play with her.&lt;/p&gt;

&lt;p&gt;At 2 pm it's time to get back to work, and if the day is free of meetings, I will try to wrap up my work from the morning, look at my implementation again and see what I can improve, add more tests or pick up a new ticket from the backlog. Most days, there will be a meeting or two in the afternoon, and I try to spend a few minutes before to prepare myself for the discussion and pour myself another cup of tea.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tGFtlAkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zo53fcw7odowwppfgn02.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tGFtlAkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zo53fcw7odowwppfgn02.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Towards the end of my workday, I make sure that all my changes are committed and pushed, ready for the next morning. At 4:30 pm, I say goodbye to the team on Slack, close my laptop and disconnect from work.&lt;/p&gt;

</description>
      <category>workstations</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Evolution of Data Access Control</title>
      <author>Laura O. Tolentino</author>
      <pubDate>Fri, 07 May 2021 08:58:26 +0000</pubDate>
      <link>https://dev.to/ionorah14/the-evolution-of-data-access-control-42dh</link>
      <guid>https://dev.to/ionorah14/the-evolution-of-data-access-control-42dh</guid>
      <description>&lt;p&gt;Access management is an essential part of every cloud infrastructure. You cannot have an efficient cloud infrastructure without compartmentalizing access to cloud resources. Good access management is also the key element to good information security.&lt;/p&gt;

&lt;p&gt;There are several approaches to adopt when it comes to data access control specifically. In this article, we are going to review some of the approaches that can be implemented as well as the challenges with each method.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;DAC &amp;amp; MAC&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The two basic data access control methods are Discretionary Access Control (DAC) and Mandatory Access Control (MAC). DAC is very straightforward; the owner of the data decides which users get access to the data. In this model, the owner of the data can specify how data access control rules are defined.&lt;/p&gt;

&lt;p&gt;MAC is the opposite of DAC. In the MAC model, &lt;a href="https://resources.infosecinstitute.com/certification/access-control-models-and-methods/"&gt;a central figure is responsible&lt;/a&gt; for determining how data can be accessed. This means that access to data is based on rules that apply to everyone, regardless of the owner of the data. This centralized model, however, is often the source of bottlenecks in access management.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Role Based Access Control (RBAC)&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;A transformation of the two previous methods is Role Based Access Control. As the name suggests, access to data is granted based on privileges given to roles. Only the roles that require access to data is given access, and the process happens automatically.&lt;/p&gt;

&lt;p&gt;RBAC allows for principles such as separation of privilege and “least required privilege” to be implemented across the organization. Users can have multiple roles that grant them access to different layers of data, providing maximum flexibility.&lt;/p&gt;

&lt;p&gt;For instance, someone with an Admin role can have access to data creation and modification, while another person with Operations role can only have access to things like adding comments or tagging certain data points.&lt;/p&gt;

&lt;p&gt;It is also worth noting that RBAC &lt;a href="https://www.csoonline.com/article/3251714/what-is-access-control-a-key-component-of-data-security.html"&gt;allows for role hierarchy&lt;/a&gt; to be used to manage access to data. The only challenge is that roles must be defined and assigned meticulously to prevent unauthorized access.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Attribute Based Access Control (ABAC)&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Attribute Based Access Control or ABAC expands RBAC by taking more attributes into account. ABAC can still use roles as one of the attributes for controlling data access, but it is also capable of adopting other attributes such as users, environment attributes, resource attributes, and more.&lt;/p&gt;

&lt;p&gt;A data access control engine determines if the attributes attached to a user allows that person to access specific parts of the data. When you compare &lt;a href="https://frontegg.com/blog/rbac-vs-abac"&gt;RBAC vs. ABAC&lt;/a&gt;, it is clear that ABAC offers extra flexibility. ABAC can also limit access to specific resources through inversed attribute rules.&lt;/p&gt;

&lt;p&gt;Is ABAC the perfect data access control method? The approach is certainly granular and very flexible, but it is not perfect yet. ABAC requires immense attention to details. Some organizations are starting to incorporate Entity Based Access Control or EBAC to bridge the gap between RBAC and ABAC.&lt;/p&gt;

&lt;p&gt;It is safe to say that data access control is still evolving. As organizations face bigger, more complex challenges, new models and approaches will be adopted to solve them.&lt;/p&gt;

</description>
      <category>dataaccess</category>
      <category>bigdata</category>
      <category>informationsecurity</category>
      <category>cloudresources</category>
    </item>
    <item>
      <title>Python3 Programming - Exercise 26</title>
      <author>Otu Michael</author>
      <pubDate>Fri, 07 May 2021 08:58:08 +0000</pubDate>
      <link>https://dev.to/otumianempire/python3-programming-exercise-26-16f4</link>
      <guid>https://dev.to/otumianempire/python3-programming-exercise-26-16f4</guid>
      <description>&lt;h1&gt;
  &lt;a href="#starting-a-project"&gt;
  &lt;/a&gt;
  Starting a project
&lt;/h1&gt;

&lt;p&gt;A project idea can make you procrastinate, do you believe that?&lt;/p&gt;

&lt;p&gt;Do you also know that it is better to have a broad view of the project you want to build before you start coding? Of course, having a broad view of the project doesn't mean implement it at once.&lt;/p&gt;

&lt;p&gt;Do you know that it is not, sometimes, the code that makes the project but the idea and documentation? Yes, what is an idea if it is just a paper project?&lt;/p&gt;

&lt;p&gt;Do you know that your project does not have to necessarily rock the world? I mean, if you want to do something. Your project can be function implementations of some mathematical concepts. Your projects can just be the solutions (implementations) of some algorithm and data structure course.&lt;/p&gt;

&lt;p&gt;We are telling you that, having an understanding of the programming concepts we have discussed so far and can use them is the whole purpose of this journey.&lt;/p&gt;

&lt;p&gt;A project may fit into one file. It depends. You should know when to separate concerns (functionalities) and when to use a class. You can separate some functions in a new file. If some of these functions and data required can fit into a class, do that.&lt;/p&gt;

&lt;p&gt;Get the project idea and write a story on it. This story will guide you on how you should implement the idea.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtual-environment"&gt;
  &lt;/a&gt;
  Virtual environment
&lt;/h2&gt;

&lt;p&gt;Whenever we want to start a project, it is recommended that we use a virtual environment. A virtual environment separates the requirements we need for our particular project from the modules on our local system. With this approach, we can choose a version of a module that is unique to our project.&lt;/p&gt;

&lt;p&gt;This will not affect the version of the local module if it exists. We recommend you use pipenv.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-management"&gt;
  &lt;/a&gt;
  Project management
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com"&gt;Github&lt;/a&gt; is one of the free servers that can host our project. You will have to create a Github repo for your project. This will allow others to contribute to your project. Again, if the unfortunate happens when you lose your PC, you still have the remote code available on &lt;a href="https://github.com"&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://trello.com"&gt;Trello&lt;/a&gt; can be used as a management tool for your project. It is a very great tool for managing projects for a small number of devs also.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unit-test"&gt;
  &lt;/a&gt;
  Unit test
&lt;/h2&gt;

&lt;p&gt;There are instances whereby we have to take another step to develop an interface for some functionalities. There is no need for these extra step when is not needed. Write a unit test instead. Try and break your code and fix it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h2&gt;

&lt;p&gt;Every project must have a story. This story tells onlookers and stakeholders what your project does and sometimes the benefit it comes with. It tells users and other devs how to use your application and sometimes how to extend it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-go-from-here"&gt;
  &lt;/a&gt;
  Where to go from here
&lt;/h2&gt;

&lt;p&gt;From here, try going through the resources below. (It is not compulsory). It is good for your programming health. The more you understand the better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-structure-a-project"&gt;
  &lt;/a&gt;
  How to structure a project
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python-guide.org/writing/structure/"&gt;The Hitchhiker's guide to python - Structuring Your Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://julien.danjou.info/starting-your-first-python-project/"&gt;Julien Danjou - Starting your first Python project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#more-on-virtual-environments"&gt;
  &lt;/a&gt;
  More on virtual environments
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python-guide.org/dev/virtualenvs/"&gt;The Hitchhiker's guide to python - Pipenv &amp;amp; Virtual Environments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pipenv.pypa.io/en/latest/"&gt;Pipenv - Python Dev Workflow for Humans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/pipenv-guide/"&gt;Real Python - Pipenv: A Guide to the New Python Packaging Tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#more-projects-for-your-elbow"&gt;
  &lt;/a&gt;
  More Projects for your elbow
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.upgrad.com/blog/python-projects-ideas-topics-beginners/"&gt;42 Exciting Python Project Ideas &amp;amp; Topics for Beginners by Rohit Sharma &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://beginnerpythonprojects.com/"&gt;Python projects for beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mikkegoes.com/python-projects-for-beginners/"&gt;10 Easy Python Programming Project Ideas by Mikke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dataquest.io/blog/python-projects-for-beginners/"&gt;DATAQUEST - 45 Fun (and Unique) Python Project Ideas for Easy Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#the-end-next-is-the-swiftpythonpracticals-and-sample-projects"&gt;
  &lt;/a&gt;
  The end - next is the &lt;a href="https://github.com/otumian-empire/swift-python-practicals"&gt;swift-python-practicals&lt;/a&gt; and sample projects.
&lt;/h1&gt;

</description>
      <category>python3</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>This will remove Your GitHub Fear </title>
      <author>Sanjay Singh Rajpoot</author>
      <pubDate>Fri, 07 May 2021 08:54:51 +0000</pubDate>
      <link>https://dev.to/sanjaysinghrajpoot/this-will-remove-your-github-fear-1995</link>
      <guid>https://dev.to/sanjaysinghrajpoot/this-will-remove-your-github-fear-1995</guid>
      <description>&lt;p&gt;I have seen a lot of people facing problem using Git and GitHub properly😢, with the help of this guide most of your problems will be sorted🙂.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-you-should-learn-git-and-github-"&gt;
  &lt;/a&gt;
  Why you should learn Git and Github 😕?
&lt;/h1&gt;

&lt;p&gt;Before starting you should know why this is important. Open-source software is a huge part of the tech industry. Over and over, we hear about the power of open source. Git and GitHub is the backbone of open source community, everything from Readme file to fixing bugs starts and ends with &lt;strong&gt;GitHub&lt;/strong&gt;. Let's start by discussing why you should be interested in getting involved with open source.&lt;/p&gt;

&lt;p&gt;There are many benefits of contributing to open source projects. Assess your career and development goals and you might be able to accomplish them by contributing to &lt;strong&gt;open source software&lt;/strong&gt;. Here's a brief and non-exhaustive list of some of the benefits of getting involved with open source:&lt;/p&gt;

&lt;p&gt;-Familiarize yourself with Git&lt;br&gt;
-Gain experience&lt;br&gt;
-Get attention from employers and recruiters&lt;br&gt;
-Connect with other developers in the community&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#learn-git-and-github-basics"&gt;
  &lt;/a&gt;
  Learn Git and GitHub Basics
&lt;/h1&gt;

&lt;p&gt;Before you can go scouting for an open-source project to work on, you should know the basics of Git and GitHub. You don't need to be an expert. But there are a few commands you should definitely know and understand:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;git init -&amp;gt; to start git &lt;/li&gt;
&lt;li&gt;git clone&lt;/li&gt;
&lt;li&gt;git checkout -b &lt;/li&gt;
&lt;li&gt;git branch&lt;/li&gt;
&lt;li&gt;git add&lt;/li&gt;
&lt;li&gt;git commit -m  -&amp;gt; commit with message &lt;/li&gt;
&lt;li&gt;git merge &lt;/li&gt;
&lt;li&gt;git push&lt;/li&gt;
&lt;li&gt;git pull&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article won't discuss what these commands do or how they work. This is a checklist for you to measure your understanding. To make sure you understand when and how to use each command, I suggest you create your own project locally using Git and push your project to GitHub.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#now-its-to-time-make-your-own-repository"&gt;
  &lt;/a&gt;
  Now It's to time make your own Repository
&lt;/h1&gt;

&lt;p&gt;Go ahead and log in with your email and password to GitHub. We are going to make our own repository so if anything gets wrong you can simply delete it and make a new one. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-go-to-githubcom"&gt;
  &lt;/a&gt;
  1. Go to GitHub.com
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the upper-right corner of any page, use the  drop-down menu, and select New repository.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bfgbEEzX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jjjq8q10rlsm3gz66dw7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bfgbEEzX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jjjq8q10rlsm3gz66dw7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Drop-down with option to create a new repository&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XkbsMENc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bp03pwg6xvd1gyr36pue.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XkbsMENc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bp03pwg6xvd1gyr36pue.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type a short, memorable name for your repository. For example, "hello-world".&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Field for entering a repository name&lt;br&gt;
Optionally, add a description of your repository. For example, "My first repository on GitHub."&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Field for entering a repository description&lt;br&gt;
Choose a repository visibility. For more information, see "About repository visibility."&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select Initialize this repository with a README.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UOw4_7LR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgujldzg2l6gzldu0be3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UOw4_7LR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgujldzg2l6gzldu0be3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Initialize this repository with a README checkbox&lt;br&gt;
Click Create repository.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Button to create a repository&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--efWIua8o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhpntk467gq902f5qorl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--efWIua8o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhpntk467gq902f5qorl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Congratulations! You've successfully created your first repository.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-clone-your-fork"&gt;
  &lt;/a&gt;
  2. Clone your fork
&lt;/h2&gt;

&lt;p&gt;To clone the fork you've created, click the "Code" button and copy the URL that's provided.&lt;/p&gt;

&lt;p&gt;In your terminal, change into the directory that you want to hold your forked project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd &amp;lt;directory_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now clone your forked repository using git clone and the URL you just copied&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone &amp;lt;URL&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change into the folder that was just created. This will likely match the name of the project you forked. So if we're using the Sandpack repo as an example, that would be [sandpack]:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd &amp;lt;project_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-create-a-branch-locally"&gt;
  &lt;/a&gt;
  3. Create a branch locally
&lt;/h2&gt;

&lt;p&gt;Before you start working, create a separate branch that will hold all the code that you add or edit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout -b &amp;lt;branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-make-your-changes"&gt;
  &lt;/a&gt;
  4. Make your changes
&lt;/h2&gt;

&lt;p&gt;Now you can finally code! You may also be editing copy, fixing grammatical errors, or improving documentation. Whatever changes you're looking to make, you can finally do it at this step!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-commit-and-push-your-changes"&gt;
  &lt;/a&gt;
  5. Commit and push your changes
&lt;/h2&gt;

&lt;p&gt;Before you commit and push your changes, make sure to run and test your code. Once your sure that your code is functioning as desired, you can commit and push your changes to GitHub.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
git commit -m 'commit message here'
git push -u origin head
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#congrates-you-made-it"&gt;
  &lt;/a&gt;
  Congrates You made it 🥳🥳🎈🎉🎊
&lt;/h1&gt;

&lt;p&gt;If you have followed all the steps properly everything should work fine. To check everything worked go to your GitHub repository and you will find all your changes. &lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>codenewbie</category>
      <category>coding</category>
    </item>
    <item>
      <title>Quick WHM/cPanel All email passwords reset </title>
      <author>Abdallah Deeb</author>
      <pubDate>Fri, 07 May 2021 08:42:14 +0000</pubDate>
      <link>https://dev.to/abdallah/quick-whm-cpanel-all-email-passwords-reset-1cma</link>
      <guid>https://dev.to/abdallah/quick-whm-cpanel-all-email-passwords-reset-1cma</guid>
      <description>&lt;p&gt;You generally don’t want to use this script. This is a last resort, when all mailbox passwords for the entire account need to be changed. For this script to work, you need root access to your WHM/cPanel server. This could ruin everything, be warned!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here be dragons!&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;newpass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'SomeStr0ngPasswordGoesHere!'&lt;/span&gt;
&lt;span class="nv"&gt;accountname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'example'&lt;/span&gt;
&lt;span class="nv"&gt;domainname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'example.com'&lt;/span&gt;

uapi &lt;span class="nt"&gt;--user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$accountname&lt;/span&gt; Email list_pops &lt;span class="se"&gt;\&lt;/span&gt;
  | &lt;span class="nb"&gt;grep &lt;/span&gt;email &lt;span class="se"&gt;\&lt;/span&gt;
  | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{print$2}'&lt;/span&gt; | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="nt"&gt;-F&lt;/span&gt;&lt;span class="se"&gt;\@&lt;/span&gt; &lt;span class="s1"&gt;'{print$1}'&lt;/span&gt; | &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;read &lt;/span&gt;m&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
    &lt;/span&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;changing password &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;$m&lt;/span&gt;
    uapi &lt;span class="nt"&gt;--user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;@accountname Email passwd_pop &lt;span class="nv"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$domainname&lt;/span&gt; &lt;span class="nv"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$m&lt;/span&gt; &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$newpass&lt;/span&gt;
  &lt;span class="k"&gt;done
&lt;/span&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here are the links to the official API docs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://documentation.cpanel.net/display/DD/UAPI+Functions+-+Email%3A%3Apasswd%5C_pop"&gt;https://documentation.cpanel.net/display/DD/UAPI+Functions+-+Email%3A%3Apasswd\_pop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://documentation.cpanel.net/display/DD/UAPI+Functions+-+Email%3A%3Alist%5C_pops"&gt;https://documentation.cpanel.net/display/DD/UAPI+Functions+-+Email%3A%3Alist\_pops&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Is there a better way to do this?&lt;/strong&gt; probably&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can I randomize the password?&lt;/strong&gt; sure, but how will you send the new passwords to your users?&lt;/p&gt;

&lt;p&gt;Hope it helps!&lt;/p&gt;

</description>
      <category>bash</category>
      <category>cpanel</category>
      <category>password</category>
      <category>script</category>
    </item>
    <item>
      <title>50 Projects in 50 Days, 4/5 there! 🌻</title>
      <author>Chiara Mapelli</author>
      <pubDate>Fri, 07 May 2021 08:29:00 +0000</pubDate>
      <link>https://dev.to/chiaraintech/50-projects-in-50-days-4-5-there-2157</link>
      <guid>https://dev.to/chiaraintech/50-projects-in-50-days-4-5-there-2157</guid>
      <description>&lt;p&gt;Time flies, I have now completed 40 small projects whilst renovating a property and moving houses. Safe to say there have been hiccups along the way in both cases 😂&lt;br&gt;
I am finally much more comfortable working with the DOM and with string interpolations! Yay!&lt;br&gt;
This is what I have been to over the past 10-ish days:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;31st Project: Password Generator&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Okay, this project has been one of the best so far, because it is much more than a simply presentational effort. The aim is to build a password generator which ensures that 5 conditions are met: the password needs to be longer than 20 characters, and it needs to include both uppercase and lowercase letters, symbols and numbers.&lt;br&gt;
To generate a random element of each of these categories, we make use of the &lt;strong&gt;ASCII chart&lt;/strong&gt; and of the &lt;strong&gt;String object's 'fromCharCode'&lt;/strong&gt;'s property.&lt;br&gt;
To generate the uppercase and lowercase letters, we take a random number and multiply it by 26, due to the length of the alphabet. We then add 97 or 65, to the lower and upper case instances respectively. This is because the first lowercase letter - a -, has the symbol 97 and the first uppercase letter A has the code of 65.&lt;br&gt;
We proceed to do the same for the numbers, (though we obviously limit our random number to 10), and we use the code of 48 in this case, as 0 has the char code of 48.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GzYZpKe7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzbxgleop013kjp1aspd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GzYZpKe7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzbxgleop013kjp1aspd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even though this is not the only way to generate random characters, I think this is one of the simplest methods to do it.&lt;br&gt;
The actual function to generate the password wasn't the easiest to wrap my head round, to be fair.&lt;br&gt;
Essentially, if no condition has been checked or filled in, return nothing as a password, otherwise loop through whatever the length of the conditions is (4 + the length in my case) and for each type that is true, call the relative password to generate a random character. Though the concept is rather easy, there was a lot of looping and forEaching which I still need to work on 😊&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;32nd Project: Good, Cheap and Fast&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is so very true that a project can't be three things at the same time: good, cheap and fast. You can only pick two out of these three, like every good project manager knows. This project was a relatively simple one, though instead of using simple checkboxes, we created a rolling ball which uses an animation to be slided from left to right, and back.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0whyV8yr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtwkr7n9kkekki6ru72u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0whyV8yr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtwkr7n9kkekki6ru72u.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We used two @keyframes queries to manage the slideOn and the slideOff animations. slideOn is the opposite of slideOff, and the transformations use the translateX property to slide the ball back and forth according to where within the div is placed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ybOcj85q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7u4o639zmbhiovdpfhg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ybOcj85q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7u4o639zmbhiovdpfhg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;33rd Project: Notes App&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here we had yet another very useful project, a cute notes app.  It might sound as trite and overused, though this time we used a couple new things, and I did learn that I can't grab the value of a 'div' as I can do for a textarea (lol), but I can get the content of the div by looking up its innerHTML value.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VmxU53g6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/laxa9j3izs2nvkemb5gv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VmxU53g6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/laxa9j3izs2nvkemb5gv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first new thing I came across is the Marked library. &lt;a href="https://marked.js.org/"&gt;https://marked.js.org/&lt;/a&gt;&lt;br&gt;
We used it as it's rather light-weight and as it implements all markdown features from the supported flavours &amp;amp; specifications of the case. In our case we simply wrapped the text around it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fPthIg40--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0jj4e8psta7oqkf3lu6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fPthIg40--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0jj4e8psta7oqkf3lu6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I use localStorage in my daily job, so I was rather comfortable using this storage for this app, as well. What is important to know about localStorage (which can be accessed in the Application tab in the Developers' Tools), is that we can only store a key-value pair of string type. Should I want to store an array or an object as a value, I would have to stringify the value (e.g. using JSON.stringify). sessionStorage is another similar way of storing data, though the data will be lost when I refresh my browser.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dxr6X0IW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e6gmp0mnyn6isy53qy8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dxr6X0IW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e6gmp0mnyn6isy53qy8f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;34th Project: Animated Countdown&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Okay so I learnt another way to center a div (lol, probably my most googled CSS-related problem). Basically, just position it fixed within the page and assign a top and left 50% to it. Then, as you want to center the whole element and not just the left side of it, you will have to transform: translate(-50%, -50%), so that it actually is in center of the page (or element) itself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aBnYwkWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1abd7ewjn9n7k0adzmwr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aBnYwkWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1abd7ewjn9n7k0adzmwr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also realised that there is an event listener called animationend, which is fired when a CSS animation has completed! Veeeery much super handy for anything DOM in my opinion. The whole animation was managed by this event listener, which allowed me to add and remove classes on the elements that I needed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DIMkUwBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3d91qd6fumswet7o134.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DIMkUwBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3d91qd6fumswet7o134.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my specific case, if the animation name was either goIn or goOut, the respective keyframes animations would have fired.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fw3eposM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04c9uagl5enakhu29bk6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fw3eposM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04c9uagl5enakhu29bk6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;35th Project: Image Carousel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The project was a mix of much of the others, I think. Slightly easier than some of the others, but a bit trickier in terms of calculations on the X axis.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T75IMvj7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oucajpyzk3jnwvuiev31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T75IMvj7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oucajpyzk3jnwvuiev31.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
As usual, we used a mix of indexes and length to understand what to move, toward what direction and when to reset the carousel.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;36th Project: Hoverboard&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I absolutely adored coding this little project because when I was little I had a T-shirt which did the same thing! I have a board made up of squares, each time I hover onto a square, the square changes colour. I did not really learn anything new in the proper sense of it, but I had loads of fun, and I was able to put into practice the majority of what I have studied so far, which was amazingly rewarding.&lt;br&gt;
The main things to keep in mind here is how &lt;strong&gt;mouseover&lt;/strong&gt; and &lt;strong&gt;mouseup&lt;/strong&gt; work: mouseover is like hovering onto an element, whereas mouseup is used when I move the focus away from the element.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9kGBt0Bt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hw86h2knlc9d6ikbxk4m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9kGBt0Bt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hw86h2knlc9d6ikbxk4m.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;37th Project: Pokedex&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It was really fun to work on this project, and the PokeAPI (&lt;a href="https://pokeapi.co/"&gt;https://pokeapi.co/&lt;/a&gt;) is so easy to work with! It is incredible how we can dynamically add a new card only using variables and string interpolation in the JavaScript code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HhppwVQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3io3ylgira08za2acb5j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HhppwVQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3io3ylgira08za2acb5j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quite a few JavaScript methods were used here, which gave me the chance to work on my knowledge. Namely: &lt;strong&gt;slice&lt;/strong&gt;, &lt;strong&gt;padStart&lt;/strong&gt;, &lt;strong&gt;find&lt;/strong&gt; and &lt;strong&gt;indexOf&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WXygKvms--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujqq87v91gdpnva6ujr2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WXygKvms--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujqq87v91gdpnva6ujr2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;38th Project: Mobile Tag Navigation&lt;/strong&gt;&lt;br&gt;
This was a simple project which simulated a phone and a mobile menu below it. It was similar to some other stuff we did earlier on. It boils down to adding and removing the classes of show/active and to show the respective image when I click on the specific buttons.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ZtZLFuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ta4jo3uu61b61fe3w2m8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ZtZLFuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ta4jo3uu61b61fe3w2m8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;39th Project: Password Strength&lt;/strong&gt;&lt;br&gt;
A functional exercise which also looks good! I had never used Tailwind CSS before, but I work with Bootstrap on a daily basis, which is rather similar I would say. It was really handy to be able to style my form already in the HTML code, without worrying too much for it in the CSS file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yMUQjZjX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0um00yax3803nni2fmsr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yMUQjZjX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0um00yax3803nni2fmsr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In terms of CSS itself, the fact that the filter property to blur an element is so simple yet so effective, really is telling. If you apply it to the background like in my case, it does change the whole look of the page!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LyIsp7qa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d63yin8tqbcaxw94ts2i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LyIsp7qa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d63yin8tqbcaxw94ts2i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;40th Project: 3D Boxes Background&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Okay so I realised that you need to have both your maths and logic ready when dealing with animations and transitions. This project was really cool to code, a fun exercise to practice the various transform properties.&lt;/p&gt;

&lt;p&gt;I finally got to use rotateZ! It is used to rotate an element across its z-axis without making it look funny. In my case, I used it to rotate the images by 360 degrees, so completely.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ibUqccwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqekbma8c7ozfwnzhh23.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ibUqccwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqekbma8c7ozfwnzhh23.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
The JavaScript part of it was the most complex for me, as maths isn't really my strongest point. I used a nested loop (booo! but useful in this case) to control when and how the images would have rotated. As the container is 500x500, and there are 4 boxes on each row, for 4 rows, I had to think in terms of 125-125-125-125. That's why when I click the button, all the boxes rotate according to which index they have, alongside the Z-axis.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BtCR3eIX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwvimyr7ebsnt0hnl0hw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BtCR3eIX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwvimyr7ebsnt0hnl0hw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>How To Improve Your SEO Ranking</title>
      <author>Jemima Abu</author>
      <pubDate>Fri, 07 May 2021 08:19:10 +0000</pubDate>
      <link>https://dev.to/jemimaabu/how-to-improve-your-seo-ranking-1d7j</link>
      <guid>https://dev.to/jemimaabu/how-to-improve-your-seo-ranking-1d7j</guid>
      <description>&lt;p&gt;Fun fact: if you Google "&lt;a href="https://www.google.com/search?q=front+end+developer+nigeria"&gt;front end developer Nigeria&lt;/a&gt;", my portfolio website shows up on the first page. Why? SEO.&lt;/p&gt;

&lt;p&gt;Search Engine Optimization (SEO) is how you make sure your website shows up in relevant search results. Ranking refers to a website's position in those search results.&lt;/p&gt;

&lt;p&gt;In this article, we'll be discussing how to optimize your website or brand to help you get a high ranking on Google and other search engines. We'll also discuss how to improve the online presence for yourself or your brand.&lt;/p&gt;

&lt;p&gt;I'd like to preface this by saying that I'm not an SEO expert so I'll just be sharing the tips that worked for me.&lt;/p&gt;

&lt;p&gt;Here's what we'll be covering in this article:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="#what-is-seo"&gt;What is SEO?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#importance-of-seo"&gt;Why is SEO important?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tips-for-improving-seo"&gt;How do I improve my website's SEO ranking?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tips-for-creating-an-online-presence"&gt;How do I improve my personal/my brand's online presence?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing-for-seo"&gt;How do I test the SEO of my websites?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-is-seo"&gt;
  &lt;/a&gt;
  What is SEO
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Search engine optimization is the process of improving the quality and quantity of website traffic to a website or a web page from search engines.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Simply put, SEO is ensuring that your website receives relevant and continuous traffic through organic search results. Organic search results refer to results that show up in search terms due to relevancy as opposed to paid search results.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cD9chlpW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620314285788/UJLW7bGn5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cD9chlpW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620314285788/UJLW7bGn5.png" alt="organic versus paid search results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Studies have shown that people &lt;a href="https://www.oakcitytechnology.com/websites/do-people-actually-click-on-paid-ads-in-google/#:~:text=However%2C%20to%20answer%20this%20directly,organic%20results%20over%20paid%20ads."&gt;tend to click more on organic search results than ads&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;SEO doesn't just affect your websites; it affects the visibility of anything you post online such as articles, products or videos. &lt;/p&gt;

&lt;p&gt;The world of Search Engine Optimization is so vast and complex that companies have dedicated &lt;a href="https://digitalmarketinginstitute.com/blog/what-does-an-seo-manager-do"&gt;SEO managers&lt;/a&gt;  just to ensure the visibility of their brand.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importance-of-seo"&gt;
  &lt;/a&gt;
  Importance of SEO
&lt;/h2&gt;

&lt;p&gt;The major importance of SEO is to increase the traffic and visibility of your website and content. High rankings are the best way to generate traffic to your site.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uzSaj5oQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620306812288/1Ien9sL8G.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uzSaj5oQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620306812288/1Ien9sL8G.png" alt="organic traffic.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above image is a screenshot of the traffic for &lt;a href="https://jemimaabu.medium.com/how-to-write-a-cv-in-nigeria-d05d8981dbda"&gt;an article I wrote in 2017&lt;/a&gt;. The article has had over 32,000 views since then and over 50% of that traffic was from organic search results on Google. &lt;/p&gt;

&lt;p&gt;Having a high ranking means that you no longer have to constantly market your products and content and instead you attract your target audience naturally.&lt;/p&gt;

&lt;p&gt;Think of it this way: when was the last time you went to the second page of Google? The higher your search engine ranking, the more visible your site is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tips-for-improving-seo"&gt;
  &lt;/a&gt;
  Tips for Improving SEO
&lt;/h2&gt;

&lt;p&gt;There are &lt;a href="https://backlinko.com/google-ranking-factors"&gt;multiple ranking factors&lt;/a&gt; that can affect the SEO of your site but I'll be focusing on the factors I prioritized in order to optimize my website: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Accessibility&lt;/li&gt;
&lt;li&gt;Metadata&lt;/li&gt;
&lt;li&gt;Relevant content and links&lt;/li&gt;
&lt;li&gt;Performance and page speed&lt;/li&gt;
&lt;li&gt;Traffic and backlinks&lt;/li&gt;
&lt;li&gt;Domain name and extensions&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#accessibility"&gt;
  &lt;/a&gt;
  Accessibility
&lt;/h3&gt;

&lt;p&gt;Accessibility means creating websites that can be used by everyone. Ideally, you should build your websites to be as accessible as possible. Not only is it considered best practice but it also &lt;a href="https://www.dbswebsite.com/blog/accessibility-seo-a-perfect-fit/"&gt;directly affects your site SEO&lt;/a&gt;. &lt;br&gt;
Accessibility also improves user experience which is another important contributor to SEO.&lt;/p&gt;

&lt;p&gt;Here are some quick tips to focus on to ensure your personal website meets base accessibility needs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Use the lang attribute in your HTML tag.&lt;/strong&gt; The lang attribute is what allows browsers to translate websites from one language to another so be sure to write your HTML tags appropriately e.g. &lt;code&gt;&amp;lt;html lang="en"&amp;gt;&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use alt tags for images that require description.&lt;/strong&gt; Alt tags describe the content of an image for screen readers and should be included as attributes in image tags &lt;code&gt;&amp;lt;img alt="" src="" /&amp;gt;&lt;/code&gt;. Alt tags are also &lt;a href="https://www.bigcommerce.com/ecommerce-answers/what-is-an-alt-tag-and-how-does-it-impact-seo/"&gt;used by search engines&lt;/a&gt; to return relevant image results.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use &lt;a href="https://www.w3schools.com/html/html5_semantic_elements.asp#:~:text=What%20are%20Semantic%20Elements%3F,%3E%20%2D%20Clearly%20defines%20its%20content."&gt;semantic elements&lt;/a&gt; for creating layouts in HTML.&lt;/strong&gt; Semantic elements such as &lt;code&gt;nav&lt;/code&gt;, &lt;code&gt;footer&lt;/code&gt; and &lt;code&gt;header&lt;/code&gt; provide a description of the content to screenreaders.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use heading tags in the appropriate order.&lt;/strong&gt; The rule of thumb is to have only one H1 tag on a page, serving as the title and let the headings follow in sequential order i.e. a &lt;code&gt;h4&lt;/code&gt; tag shouldn't appear before a &lt;code&gt;h2&lt;/code&gt; tag in the same section.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ensure that the colors on your site have adequate contrast.&lt;/strong&gt; Adequate contrast between the colors of the text and the background allows for easily readable content.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use descriptive links.&lt;/strong&gt; Links on your website should describe the page they lead to e.g. &lt;code&gt;Read More About Me&lt;/code&gt; rather than generic statements like &lt;code&gt;Click Here&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can view my slides on &lt;a href="https://www.jemimaabu.com/talks/web-accessibility.html"&gt;Getting Started With Web Accessibility&lt;/a&gt;, watch my video on &lt;a href="https://www.youtube.com/watch?v=QSXdTuD9Rak"&gt;Understanding Accessibility as A Concept&lt;/a&gt; or check out the &lt;a href="https://romeo.elsevier.com/accessibility_checklist/downloads/developer_designer_checklist.pdf"&gt;Accessibility Checklist by Jay Nemchik&lt;/a&gt;  for more information and resources.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#metadata"&gt;
  &lt;/a&gt;
  Metadata
&lt;/h3&gt;

&lt;p&gt;Metadata is what provides information about your website to search engines.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eikCZVaF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620319671614/QoI5VUTaZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eikCZVaF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620319671614/QoI5VUTaZ.png" alt="metadata of jemimaabu.com"&gt;&lt;/a&gt;&lt;br&gt;
The two major tags for SEO are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Title.&lt;/strong&gt; The &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag is included in HTML and it contains the name of your webpage. It's a good idea to include your main keyword in your title tag.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Jemima Abu: Front End Developer&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The title tag should be changed on each page to describe the content of the new page e.g. &lt;code&gt;&amp;lt;title&amp;gt;About Me | Jemima Abu&amp;lt;/title&amp;gt;&lt;/code&gt;. A descriptive title also improves the ranking for articles and videos. Your title should be between 50 to 60 characters to avoid search engines &lt;a href="https://unamo.com/blog/seo/title-tags-best-practices#:~:text=Length,cut%20off%20in%20the%20middle."&gt;truncating or ignoring it&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Description.&lt;/strong&gt; The description tag describes the content of your webpage and it's also placed in the  tag of your HTML page. It should explain the main goal of your webpage and use more keywords related to the message you're trying to pass along.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Jemima Abu is a self-taught 
    Front End Developer and school-taught Systems Engineer 
    from Lagos, Nigeria."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another tag to mention is the &lt;strong&gt;keywords&lt;/strong&gt; tag. It was previously used by search engines to match relevant keywords but most search engines have announced that &lt;a href="https://www.reliablesoft.net/meta-keywords/#relevancy"&gt;they no longer consider the meta keyword tag&lt;/a&gt; in a site's ranking. Using too many keywords can also have a negative impact on your site's SEO as this could be seen as spam by some search engines.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#relevant-content-and-links"&gt;
  &lt;/a&gt;
  Relevant content and links
&lt;/h3&gt;

&lt;p&gt;Providing relevant content on your website increases your website's SEO ranking. Here are some tips on increasing the relevancy of content for articles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Use action words in your title&lt;/strong&gt; and words related to search terms. An article with a title like "Introduction to Web Accessibility" or "How to Make Your Website Accessible" would be placed higher than an article simply titled "Web Accessibility".&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use proper formatting&lt;/strong&gt; by separating sections with titles and emphasizing important content using bold text or italics.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Include links to related resources&lt;/strong&gt; in your article. &lt;a href="https://blog.alexa.com/outbound-links-content-marketing/#:~:text=Linking%20to%20high%2Dquality%20external,SEO%20health%20of%20a%20page."&gt;Using outbound links&lt;/a&gt;  can lend to the credibility of your content.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Avoid plagiarism.&lt;/strong&gt; If Google detects the same content in two search results, they'll remove whichever they consider least relevant. If you're trying to upload your content to multiple sites, be sure to include a [canonical link](&lt;a href="https://moz.com/learn/seo/canonicalization#:%7E:text=A%20canonical%20tag%20(aka%20%22rel,content%20appearing%20on%20multiple%20URLs.)"&gt;https://moz.com/learn/seo/canonicalization#:~:text=A%20canonical%20tag%20(aka%20%22rel,content%20appearing%20on%20multiple%20URLs.)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Provide a summary&lt;/strong&gt; of your content in list tags. Google tends to place summarized content at the top of search results.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--70SijFul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620328037087/JvnUEnn4b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--70SijFul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620328037087/JvnUEnn4b.png" alt="list-content.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using relevant keywords in the link of your article also helps with ranking. If I write an article titled "How To Make Your Website Accessible", a good link would be &lt;code&gt;myblog/make-your-website-accessible&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance-and-page-speed"&gt;
  &lt;/a&gt;
  Performance and Page Speed
&lt;/h3&gt;

&lt;p&gt;Performance and page speed are factors used by Google to determine a website's ranking. If your page loads slowly or has poor performance, it &lt;a href="https://moz.com/learn/seo/page-speed"&gt;directly affects your SEO&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are some tips on improving how fast your page loads:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Reduce images to the maximum rendered size.&lt;/strong&gt; If an image on a page only gets rendered at a maximum width of 450px then the width of the actual image shouldn't be more than 450px. You can also &lt;a href="https://kinsta.com/blog/optimize-images-for-web/"&gt;optimize your images&lt;/a&gt;  to reduce their data size.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Avoid using embeds.&lt;/strong&gt; When using embeds, the time it takes them to load is also calculated with your page speed. I was able to increase my page speed score from 63 to 91 by getting rid of the YouTube embeds on my landing page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reduce loading animation.&lt;/strong&gt; Google measures how long it takes for content to appear on your page so if you're animating content into the page, the time for animation might affect your score. Try to keep all loading animation under 1s.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Minify your files&lt;/strong&gt; You can reduce the size of your CSS and JavaScript files by minifying them. This means removing all spaces, new lines and other unnecessary characters. You can use the &lt;a href="https://www.minifier.org/"&gt;Minifier tool&lt;/a&gt; to do this manually.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use &lt;a href="https://developers.google.com/speed/pagespeed/insights/"&gt;Page Speed Insights&lt;/a&gt; on your website to get more information on how to improve the performance and decrease loading time.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gDEvYNrJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620368314251/S_FwG6bF38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gDEvYNrJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620368314251/S_FwG6bF38.png" alt="page-speed.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#traffic-and-backlinks"&gt;
  &lt;/a&gt;
  Traffic and backlinks
&lt;/h3&gt;

&lt;p&gt;If your site gets a lot of traffic from other sources, it increases its ranking as it seems more relevant. A good way of generating traffic and improving your SEO is using backlinks.&lt;/p&gt;

&lt;p&gt;Backlinks are the inbound links for your site. They're created when other websites link to your site. Backlinks are basically votes from other sites vouching for the credibility of your site. A backlink from a highly ranked site also boosts your ranking.&lt;/p&gt;

&lt;p&gt;Google uses backlinks as one of their &lt;a href="https://searchengineland.com/now-know-googles-top-three-search-ranking-factors-245882"&gt;top three ranking factors&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can create backlinks by including a link to your site whenever you appear online. If you publish an article for an online magazine or you appear in an interview, including a link to your website on those sources create more backlinks for your site.&lt;/p&gt;

&lt;p&gt;You can &lt;a href="https://backlinko.com/hub/seo/backlinks"&gt;read this article&lt;/a&gt; to learn more about backlinks.&lt;/p&gt;

&lt;p&gt;You can also use the &lt;a href="https://www.freecodecamp.org/news/how-and-why-to-get-started-with-google-analytics-153dc35b7812/"&gt;Google Analytics tool&lt;/a&gt; to detect how much traffic your website generates and which sources you acquire traffic from.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yf_0JU2T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620374277843/VWKfy8lOZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yf_0JU2T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620374277843/VWKfy8lOZ.png" alt="traffic analytics of jemimaabu.com"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#domain-name-and-extensions"&gt;
  &lt;/a&gt;
  Domain name and extensions
&lt;/h3&gt;

&lt;p&gt;Having a domain name tailored to your website is a good way of increasing traffic to your site as it lends credibility. Your domain name should perfectly represent your website e.g. use your full name for a personal site or the main keyword for a business site. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k8wz_aZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620327165313/GWQpXgKCi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k8wz_aZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620327165313/GWQpXgKCi.png" alt="domain-ranking.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The domain extension also matters. &lt;code&gt;.com&lt;/code&gt; domains are the most popular domain extension and &lt;a href="https://novanym.com/pages/why-com-is-the-best-domain-extension-for-seo#:~:text=with%20suffixes%20like%20.-,net%20and%20.,they%20have%20become%20more%20popular."&gt;tend to have higher rankings&lt;/a&gt;. For location-targeted rankings, you can use country code domains e.g. &lt;code&gt;.co.uk&lt;/code&gt; or &lt;code&gt;.eu&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can &lt;a href="https://shrsl.com/2vhty"&gt;buy a domain name on Namecheap&lt;/a&gt; (this is an affiliate link so I get a commission if you decide to buy with this link).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tips-for-creating-an-online-presence"&gt;
  &lt;/a&gt;
  Tips for creating an online presence
&lt;/h2&gt;

&lt;p&gt;Having an online presence refers to having all results related to you or your brand show up when you Google yourself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T_78NX-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620304200851/G4fCWnvPi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T_78NX-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620304200851/G4fCWnvPi.png" alt="Search results for jemima abu on google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While all the tips for improving SEO can also be applied to increasing your search results, here are some specific actions you can take to ensure a solid online presence:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Have a personal website.&lt;/strong&gt; If you're trying to secure your brand's online presence, invest in a &lt;a href="https://shrsl.com/2vhty"&gt;&lt;code&gt;.com&lt;/code&gt;  domain name&lt;/a&gt; and make sure all your other online accounts (Twitter, Instagram, LinkedIn) point to that site. 
You can read my article &lt;a href="https://www.freecodecamp.org/news/beginners-guide-to-creating-a-portfolio-website/"&gt;How To Create a Portfolio Website&lt;/a&gt;  for a step-by-step guide to creating your personal website.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Direct traffic to your site.&lt;/strong&gt; Aside from organic traffic, you can also take advantage of your social media presence to direct traffic to your personal site. If you have a viral tweet or video, be sure to include a link to your site somewhere.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Create accounts on larger platforms.&lt;/strong&gt; If you're going to create a personal blog, you might generate more traffic by creating it on a site like Hashnode, Medium or Dev.to than a lesser-known platform.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use the same username across all accounts and URLs.&lt;/strong&gt; If you have a name you want to be known by online, make sure that's the name that you use for every account and in the same format.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use common keywords on all your accounts.&lt;/strong&gt;
I use pretty much the same tagline for all my accounts (&lt;em&gt;"Self-taught Front End Developer, School Taught Systems Engineer"&lt;/em&gt;) so this helps link them together.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#testing-for-seo"&gt;
  &lt;/a&gt;
  Testing for SEO
&lt;/h2&gt;

&lt;p&gt;You can test your website's SEO by running the &lt;a href="https://developers.google.com/web/tools/lighthouse"&gt;Lighthouse audit tool&lt;/a&gt; in Google Chrome. The audit returns a score based on how optimized your site is for search engines. The passed audits section contains the features of your website that improves SEO.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JjhSw9oS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620332180712/5h46gp8Hj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JjhSw9oS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620332180712/5h46gp8Hj.png" alt="seo-audit.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also use an &lt;a href="https://www.seobility.net/en/seocheck/?px=2&amp;amp;a_aid=6094eba07a470"&gt;online SEO checker&lt;/a&gt; to get a more detailed report on the SEO of your website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;And that's how you can get your website to the first page of search results for relevant keywords.&lt;/p&gt;

&lt;p&gt;If you're interested in more in-depth research on the workings of SEO, you can check out these articles and tutorials:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://searchengineland.com/guide/what-is-seo"&gt;What is Search Engine Optimization?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://optinmonster.com/seo-ranking-factors/"&gt;10 Crucial SEO Ranking Factors You Need To Know&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://click.linksynergy.com/deeplink?id=i1rVYzXnF5I&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fspecializations%2Fseo"&gt;SEO Specialization&lt;/a&gt;  - University of California, Coursera&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can also read my article on &lt;a href="https://blog.jemimaabu.com/how-i-built-my-perfect-score-portfolio-website"&gt;How I Built My Perfect Portfolio Website&lt;/a&gt; for more insight into the process of creating my website.&lt;/p&gt;

&lt;p&gt;If you found this article useful and you'd like to contribute to my content creation, feel free to &lt;a href="https://www.buymeacoffee.com/jemimaabu"&gt;buy me a coffee&lt;/a&gt; 😊&lt;/p&gt;

&lt;p&gt;If you have any questions or comments, leave a message below or reach out on &lt;a href="https://twitter.com/jemimaabu"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>seo</category>
      <category>portfolio</category>
      <category>beginners</category>
      <category>marketing</category>
    </item>
    <item>
      <title>Switching up your Spotify experience with microfrontends and Blazor</title>
      <author>Dante De Ruwe</author>
      <pubDate>Fri, 07 May 2021 08:03:26 +0000</pubDate>
      <link>https://dev.to/dantederuwe/switching-up-your-spotify-experience-with-microfrontends-and-blazor-4k72</link>
      <guid>https://dev.to/dantederuwe/switching-up-your-spotify-experience-with-microfrontends-and-blazor-4k72</guid>
      <description>&lt;p&gt;In &lt;a href="https://dev.to/dantederuwe/my-experiences-creating-a-netflix-clone-using-microfrontends-1n46"&gt;&lt;strong&gt;my previous article&lt;/strong&gt;&lt;/a&gt;, I talked about creating a Netflix clone using &lt;a href="https://piral.io"&gt;Piral&lt;/a&gt;: an open-source framework for creating modular applications. I highly recommend giving that article a quick read first, if you are not yet familiar with microfrontends and/or Piral. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/dantederuwe" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PUiMywyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j9RDcHkJ--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/521522/c2a86a2a-eeb6-4b72-a173-082a84abb6c9.jpeg" alt="dantederuwe image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dantederuwe/my-experiences-creating-a-netflix-clone-using-microfrontends-1n46" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My experiences creating a Netflix clone using microfrontends&lt;/h2&gt;
      &lt;h3&gt;Dante De Ruwe ・ Mar 18 ・ 23 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#piral&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#microfrontends&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Since then, I've been making contributions on GitHub and working closely together with the maintainers of Piral, to provide a helping hand to improve their framework in any way I could. &lt;br&gt;
The main bulk of the improvements was made in their converter for &lt;strong&gt;Blazor&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this article, I will share my experiences creating a microfrontend web app with Blazor and Piral. I'll also give a little &lt;em&gt;behind-the-scenes&lt;/em&gt; look at how this was made possible, highlight some of the quirks of using Blazor in a microfrontend solution, and explain how the combination of Piral and Blazor has improved.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://spiralfy.party"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9C5eq9Fg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/website%3Fcolor%3D1ed45f%26style%3Dflat-square%26up_message%3Dspiralfy.party%26url%3Dhttps%253A%252F%252Fspiralfy.party" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#spiralfy-a-modular-web-application"&gt;Spiralfy: a modular web application&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-spiralfy-appshell"&gt;The Spiralfy appshell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-player-a-simple-pilet"&gt;The player: a simple pilet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-controls-a-blazor-pilet"&gt;The controls: a Blazor pilet!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#dev-story-making-blazor-work-with-microfrontends"&gt;Dev story: making Blazor work with microfrontends&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#looking-back"&gt;Looking back&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-needed-improvement-and-why"&gt;What needed improvement, and why?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-has-changed-and-improved"&gt;What has changed and improved?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#final-thoughts"&gt;Final thoughts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#spiralfy-a-modular-web-application"&gt;
  &lt;/a&gt;
  Spiralfy: a modular web application
&lt;/h1&gt;


&lt;center&gt;
&lt;a href="https://spiralfy.party"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ouAnly6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/GM0W1xr.gif"&gt;
&lt;/a&gt;
&lt;/center&gt;




&lt;p&gt;First of all, let's discuss the demo application that I created to showcase the use of Blazor with Piral: Spiralfy. A clever – or some would say &lt;em&gt;cheesy&lt;/em&gt; – play on words between Spotify and Piral, of course. But what does it do?&lt;/p&gt;

&lt;p&gt;Log in with your Spotify premium account, and access a way to switch up your Spotify experience!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;For a long time now, I wanted a way to shuffle play my playlists. I'm not talking about shuffling the songs within one playlist, that's something you can obviously already do. The feature I wanted could be described as "swiping through playlists": Spiralfy picks one playlist at random, shuffle playing its songs, and whenever you feel like you want a different &lt;em&gt;vibe&lt;/em&gt;, you let Spiralfy pick a new playlist to listen to.&lt;/p&gt;

&lt;p&gt;(I got inspired in part by &lt;a href="https://lofi.cafe"&gt;lofi.cafe&lt;/a&gt;, where you can switch through curated lofi playlists like they were radio stations. But I wanted the user to be able to use their own Spotify playlists instead.)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The code
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;"Talk is cheap. Show me the code" ~ Linus Thorvalds&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Spiralfy is a modular distributed web application, also known as a microfrontend application. In my previous microfrontend project I decided to make separate GitHub repositories for each and every module; to really demonstrate that these are highly decoupled and autonomous. This time, I chose to bundle all parts into one repository (a &lt;em&gt;monorepo&lt;/em&gt;), just because it would be easier to discover and browse all the code at once. You can find the code on &lt;a href="https://git.io/spiralfy"&gt;git.io/spiralfy&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/DanteDeRuwe"&gt;
        DanteDeRuwe
      &lt;/a&gt; / &lt;a href="https://github.com/DanteDeRuwe/spiralfy"&gt;
        spiralfy
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A different way of using Spotify! Built using a microfrontend approach with Piral, Blazor and React.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/064ab3fe9191738fac91a81f4f9caec30ad490bb930da4b2619ca47cd62c241c/68747470733a2f2f692e696d6775722e636f6d2f6c6647574450712e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/064ab3fe9191738fac91a81f4f9caec30ad490bb930da4b2619ca47cd62c241c/68747470733a2f2f692e696d6775722e636f6d2f6c6647574450712e706e67" height="80px"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;switching up your Spotify experience with microfrontends and Blazor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;p&gt;&lt;a href="https://app.netlify.com/sites/spiralfy/deploys" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/fd27c8b72e73baadd367d61031a0aaa91ff3dbced512b28dc8d41bd166a36132/68747470733a2f2f6170692e6e65746c6966792e636f6d2f6170692f76312f6261646765732f32626466363065662d323364342d346665342d393836382d3338313938643261653538322f6465706c6f792d737461747573" alt="Netlify Status"&gt;&lt;/a&gt;
&lt;a href="https://spiralfy.party" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/60921779dfaa149ef7ba5faed8ee131e4b732c5d349a547b242d2a5ee5f49a7c/68747470733a2f2f696d672e736869656c64732e696f2f776562736974653f636f6c6f723d316564343566267374796c653d666c61742d7371756172652675705f6d6573736167653d73706972616c66792e70617274792675726c3d687474707325334125324625324673706972616c66792e7061727479" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;span&gt;Made with&lt;/span&gt;
&lt;span&gt;
  &lt;a href="https://reactjs.org" rel="nofollow"&gt;
    &lt;img id="user-content-react-logo" src="https://camo.githubusercontent.com/e351498609920befd443e505f5f02e45fd630f79aaedc92d75a58c3b05af3511/68747470733a2f2f692e696d6775722e636f6d2f674e7877776e312e706e67" height="10"&gt;
    React
  &lt;/a&gt;
&lt;/span&gt;
&lt;span&gt;,&lt;/span&gt;
&lt;span&gt;
  &lt;a href="https://blazor.net" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/a20213aa89674c1ffe88dc60ac74aa1e791d726eab0e99c07056fa4234cfbdea/68747470733a2f2f646576626c6f67732e6d6963726f736f66742e636f6d2f6173706e65742f77702d636f6e74656e742f75706c6f6164732f73697465732f31362f323031392f30342f4272616e64426c617a6f725f6e6f68616c6f5f31303030782e706e67" height="10"&gt;
    Blazor
  &lt;/a&gt;
&lt;/span&gt;
&lt;span&gt;and&lt;/span&gt;
&lt;span&gt;
  &lt;a href="https://piral.io" rel="nofollow"&gt;
    &lt;img id="user-content-piral-logo" src="https://camo.githubusercontent.com/b5540ddc9078660b30b82bc28c2bd28063391778969021e3763ab39bf96a0f35/68747470733a2f2f706972616c2e696f2f6c6f676f2d73696d706c652e66383636373038342e706e67" height="10"&gt;
    Piral
  &lt;/a&gt;
&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://spiralfy.party" rel="nofollow"&gt;&lt;br&gt;
&lt;img src="https://camo.githubusercontent.com/8568a96a97a3e8777b62eee10aa2e0d1db443f04bbd5ccdd11e7f1d32c8e54d1/68747470733a2f2f692e696d6775722e636f6d2f474d30573178722e676966"&gt;&lt;br&gt;
&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;h2&gt;
About&lt;/h2&gt;
&lt;p&gt;First of all, let's discuss the demo application that I created to showcase the use of Blazor with Piral: Spiralfy. A clever – or some would say &lt;em&gt;cheesy&lt;/em&gt; – play on words between Spotify and Piral, of course. But what does it do?&lt;/p&gt;
&lt;p&gt;Log in with your Spotify premium account, and access a way to switch up your Spotify experience!&lt;/p&gt;
&lt;p&gt;For a long time now, I wanted a way to shuffle play my playlists. I'm not talking about shuffling the songs within one playlist, that's something you can obviously already do. The feature I wanted could be described as "swiping through playlists": Spiralfy picks one playlist at random, shuffle playing its songs, and whenever you feel like you want a different &lt;em&gt;vibe&lt;/em&gt;, you let Spiralfy pick a new playlist to listen to.&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/DanteDeRuwe/spiralfy"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;For now, Spiralfy exists in 3 parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the Piral instance: &lt;code&gt;spiralfy-appshell&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;player&lt;/code&gt; pilet&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;controls&lt;/code&gt; pilet&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;What are these words?&lt;/em&gt;&lt;br&gt;
In case you did not read my previous article: a quick summary here. In the Piral framework, pilets are the individual feature modules, also known as microfrontends. Pilets are usually published to a feed service. The Piral instance (aka app shell) will pull all registered pilets from the feed service, and put them where they need to go as defined by the pilets themselves.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#the-spiralfy-appshell"&gt;
  &lt;/a&gt;
  The Spiralfy appshell
&lt;/h2&gt;

&lt;p&gt;For the Spiralfy app shell, I decided to go with &lt;code&gt;piral-core&lt;/code&gt; instead of the full &lt;code&gt;piral&lt;/code&gt; framework.&lt;/p&gt;

&lt;p&gt;I actually started with the full version of Piral, but after realizing that I will not be using any dashboards, translation, notifications... and other fancy features (bundled in a collection called &lt;code&gt;piral-ext&lt;/code&gt;) I migrated to &lt;code&gt;piral-core&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://docs.piral.io/guidelines/tutorials/22-core-and-base"&gt;Piral docs page on &lt;code&gt;piral-core&lt;/code&gt;&lt;/a&gt; actually describes this scenario pretty well: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Quite often the scenario is that somebody starts with &lt;code&gt;piral&lt;/code&gt; but then realized that one or the other plugin should not be included. (...) In any of these cases a migration from &lt;code&gt;piral&lt;/code&gt; to &lt;code&gt;piral-core&lt;/code&gt; makes sense.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There were only 2 plugins that I actually wanted: &lt;a href="https://npmjs.com/piral-menu"&gt;&lt;code&gt;piral-menu&lt;/code&gt;&lt;/a&gt;, in case I would want to add items to the navigation menu in an easy way; and &lt;a href="https://npmjs.com/piral-blazor"&gt;&lt;code&gt;piral-blazor&lt;/code&gt;&lt;/a&gt;, for reasons explained below.&lt;/p&gt;

&lt;p&gt;So, the &lt;code&gt;index.tsx&lt;/code&gt; file looks a little bit like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createBlazorApi&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;piral-blazor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Piral&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SetErrors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SetLayout&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;piral-core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createMenuApi&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;piral-menu&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;layout&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./layout&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;feedUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://feed.piral.cloud/api/v1/pilet/spiralfy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createInstance&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;createBlazorApi&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="c1"&gt;//this is where the magic is included ✨&lt;/span&gt;
    &lt;span class="nx"&gt;createMenuApi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;requestPilets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;feedUrl&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;piral&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Piral&lt;/span&gt; &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SetLayout&lt;/span&gt; &lt;span class="na"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SetErrors&lt;/span&gt; &lt;span class="na"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Piral&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;piral&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Things to notice about this setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the plugins each come from their respective packages, not from &lt;code&gt;piral&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;in the full Piral framework, we would use &lt;code&gt;renderInstance&lt;/code&gt;. Piral-core however, does not come with react bundled. It means we should use the standard &lt;code&gt;render&lt;/code&gt; method from &lt;code&gt;react-dom&lt;/code&gt; to render our Piral instance. (read more &lt;a href="https://docs.piral.io/guidelines/tutorials/22-core-and-base"&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#-raw-piralblazor-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://npmjs.com/piral-blazor"&gt;&lt;code&gt;piral-blazor&lt;/code&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Although I called &lt;code&gt;piral-blazor&lt;/code&gt; a plugin, it is actually considered a &lt;strong&gt;converter&lt;/strong&gt;: a package that brings support to use a different UI framework. Piral supports around 15 different UI frameworks, other than React. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you would like more information on how &lt;code&gt;piral-blazor&lt;/code&gt; works, I would suggest you read the second part of this article, too!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I included the Blazor converter in the app shell, because I already knew I was going to add a Blazor pilet. It's also possible to load &lt;code&gt;piral-blazor&lt;/code&gt; from a pilet. This is for example useful if the app shell already existed and you don't want to change it. This is beyond the scope of this article.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-player-a-simple-pilet"&gt;
  &lt;/a&gt;
  The player: a simple pilet
&lt;/h2&gt;

&lt;p&gt;The player pilet is rather barebones. It uses the following npm package, which is neat wrapper around the &lt;a href="https://developer.spotify.com/documentation/web-playback-sdk/"&gt;Spotify web playback SDK&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/gilbarbara"&gt;
        gilbarbara
      &lt;/a&gt; / &lt;a href="https://github.com/gilbarbara/react-spotify-web-playback"&gt;
        react-spotify-web-playback
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A simple player for Spotify's web playback
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This allows us to have Spotify playback from the browser. If we only used the Spotify API, we could control the playback, but we would have to have an active device it is playing on. This eliminates that.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Since I wanted to make my own layout for a player in Blazor, I'm setting this one to &lt;code&gt;display:none&lt;/code&gt;. This way it's loaded, but it's also hidden from view. &lt;em&gt;Yes I am aware that this is hacky, stop bullying me! :/&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While the pilet is simple, this is however demonstrating a niche problem that is pretty well solved by the fact that Piral (and microfrontends in general) can be very &lt;strong&gt;technology-independent&lt;/strong&gt;. If you want to write an app in Blazor, but a certain feature has a pretty nice Javascript library already: You can most of the time just use it from a different microfrontend. This way, there's way less need in having to struggle with any JS interop.&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
&lt;a href="https://i.imgur.com/DpDlQP9.jpg"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--er7k1nvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/DpDlQP9l.png"&gt;&lt;br&gt;
&lt;/a&gt;&lt;br&gt;
&lt;/center&gt;

&lt;h2&gt;
  &lt;a href="#the-controls-a-blazor-pilet"&gt;
  &lt;/a&gt;
  The controls: a Blazor pilet!
&lt;/h2&gt;

&lt;p&gt;Now for the interesting bit: the Blazor pilet! &lt;/p&gt;

&lt;p&gt;To create the Blazor pilet, I followed the documentation for &lt;code&gt;Piral.Blazor&lt;/code&gt;, from their &lt;a href="https://github.com/smapiot/Piral.Blazor#readme"&gt;README&lt;/a&gt; on GitHub. &lt;code&gt;Piral.Blazor&lt;/code&gt; is a set of NuGet packages that will make Piral work from the .NET side. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/smapiot"&gt;
        smapiot
      &lt;/a&gt; / &lt;a href="https://github.com/smapiot/Piral.Blazor"&gt;
        Piral.Blazor
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      All .NET things to make Blazor work seamlessly in microfrontends using Piral. 🧩
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;The process boils down to installing a template. If you want to transform an existing Blazor app however, all you have to do is defining the app shell name, installing the &lt;a href="https://nuget.org/packages/Piral.Blazor.Tools"&gt;&lt;code&gt;Piral.Blazor.Tools&lt;/code&gt;&lt;/a&gt; package that will create the right files for your pilet, and installing &lt;a href="https://nuget.org/packages/Piral.Blazor.Utils"&gt;&lt;code&gt;Piral.Blazor.Utils&lt;/code&gt;&lt;/a&gt; to be able to use custom Piral attributes in your code.&lt;/p&gt;

&lt;p&gt;To make the interaction with the Spotify API a lot easier I used the following great NuGet package, which provides fully typed responses and requests.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/JohnnyCrazy"&gt;
        JohnnyCrazy
      &lt;/a&gt; / &lt;a href="https://github.com/JohnnyCrazy/SpotifyAPI-NET"&gt;
        SpotifyAPI-NET
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🔉 A Client for the Spotify Web API, written in C#/.NET
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Alright, after this round of &lt;em&gt;NuGet installing&lt;/em&gt;, we can talk about the components. &lt;/p&gt;

&lt;p&gt;A standard &lt;strong&gt;page&lt;/strong&gt; in Blazor, using the &lt;code&gt;@page&lt;/code&gt; directive, will work as expected, and will be automatically registered on the pilet API. This is what I used to register the player on the homepage.&lt;/p&gt;

&lt;p&gt;For an &lt;strong&gt;extension&lt;/strong&gt;, like a login button that should end up in the app shell header, we can use the &lt;code&gt;PiralExtension&lt;/code&gt; attribute, specifying the name of the extension slot you want to render into.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@attribute [PiralExtension("header-items")]

@if(_username is null){
    &amp;lt;a href="@_authUri"&amp;gt;Login via Spotify&amp;lt;/a&amp;gt;
}
else
{
    &amp;lt;p&amp;gt;Welcome @_username&amp;lt;/p&amp;gt;
}

@code {
   //...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And... I would say... That's almost the entire story. Because Piral.Blazor does some pretty neat stuff under the hood, the developer experience of creating a Blazor pilet is really similar to creating a regular Blazor WASM application!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lets-run-it"&gt;
  &lt;/a&gt;
  Let's run it!
&lt;/h3&gt;

&lt;p&gt;Because we are using Piral, running the Blazor pilet does include an extra step. We need to use the Piral CLI to do its magic! Again, the &lt;code&gt;Piral.Blazor&lt;/code&gt; docs to the rescue!&lt;/p&gt;

&lt;p&gt;From your Blazor project folder, run your pilet via the Piral CLI 🚀&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx pilet debug &lt;span class="nt"&gt;--base&lt;/span&gt; ../piral~/&amp;lt;project-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;(You could also add a &lt;code&gt;--feed&lt;/code&gt; argument, as outlined &lt;a href="https://dev.to/dantederuwe/my-experiences-creating-a-netflix-clone-using-microfrontends-1n46#%E2%96%B8-debugging-one-pilet-and-seeing-the-interaction-with-the-other-pilets-too"&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;In addition to this, if you want to debug your Blazor pilet using for example Visual Studio, you can just run the pilet with IISExpress. (if you want to use Blazor 3.2, there are extra things to consider. You can read about them &lt;a href="https://github.com/smapiot/Piral.Blazor/tree/blazor-3.2#readme"&gt;here&lt;/a&gt;. &lt;em&gt;The cool kids use Blazor 5 anyway&lt;/em&gt; ⌐■_■ )&lt;/p&gt;

&lt;p&gt;This way, you can really use the entire Blazor debugging experience: hitting breakpoints, stepping through your code, and so on.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#dev-story-making-blazor-work-with-microfrontends"&gt;
  &lt;/a&gt;
  Dev story: making Blazor work with microfrontends
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Achievement unlocked: you have reached part 2 of the story.&lt;/em&gt; In this part, I wanted to take the opportunity to tell you about how the combination of Piral and Blazor has matured over the period that I was actively contributing to its codebase; working closely together with the maintainers of Piral. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#looking-back"&gt;
  &lt;/a&gt;
  Looking back
&lt;/h2&gt;

&lt;p&gt;Now, how was Piral with Blazor organized some 2 or 3 months ago?&lt;/p&gt;


&lt;center&gt;
&lt;a href="https://i.imgur.com/kBlzCzA.png"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0cAr24LH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kBlzCzA.png"&gt;The Piral Blazor ecosystem in March, 2021

&lt;/a&gt;
&lt;/center&gt;


&lt;p&gt;This does not look too complicated. Let's break it down.&lt;/p&gt;

&lt;p&gt;For the &lt;strong&gt;Piral instance&lt;/strong&gt;, we rely of course on the Piral framework (although, as said before, this could also be piral-core). Next to that, we also need &lt;code&gt;piral-blazor&lt;/code&gt; as a converter. &lt;/p&gt;

&lt;p&gt;Under the hood, &lt;code&gt;piral-blazor&lt;/code&gt; would actually download the &lt;a href="https://www.nuget.org/packages/Piral.Blazor.Core"&gt;&lt;code&gt;Piral.Blazor.Core&lt;/code&gt;&lt;/a&gt; NuGet package, which would contain &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Blazor framework files:  dlls, boot files, metadata, etc.&lt;/li&gt;
&lt;li&gt;custom code that would 

&lt;ul&gt;
&lt;li&gt;expose some methods that can be invoked from the JS side to register, load and unload components&lt;/li&gt;
&lt;li&gt;make sure activated components get rendered in a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with a specific id&lt;/li&gt;
&lt;li&gt;provide a way to register dependencies from the pilets in the DI container &lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;piral-blazor&lt;/code&gt; would include these files in the Piral instance, and could call the exposed methodes using JS interop. This then would allow exposing some functions in the pilet API to allow pilets to activate components from their &lt;code&gt;setup&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;pilets&lt;/strong&gt; would be created using the official template. The template created files that can be divided into 2 categories: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the Blazor files&lt;/li&gt;
&lt;li&gt;other files, mainly TS, codegen and JSON files, where the registration with the pilet API was handled (&lt;code&gt;setup&lt;/code&gt; function etc...)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Blazor files can be considered to be the heart of the pilet, while the other files were just there to be the proverbial "glue" that would make everything integrate into the Piral framework.&lt;/p&gt;

&lt;p&gt;Still confused? Below I give an example on how this all worked.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;Let's say you know how to create the most beautiful counter component in Blazor. You want to use this counter as a microfrontend in your React application, and give it a dedicated page. Maybe you would also want to render it as an extension on another part of your web app.&lt;/p&gt;

&lt;p&gt;Of course, you are already using Piral. You would add the &lt;code&gt;piral-blazor&lt;/code&gt; converter to the plugins of your Piral instance.&lt;/p&gt;

&lt;p&gt;Then, you would then set up a pilet using &lt;code&gt;Piral.Blazor.Template&lt;/code&gt;, and add your counter component. To expose this component to be able to get picked up by Piral you would add an &lt;code&gt;ExposePilet&lt;/code&gt; attribute. This would look like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@attribute [ExposePilet("my-awesome-counter")]     //!

&amp;lt;div&amp;gt;
    &amp;lt;p&amp;gt;Current count: @count&amp;lt;/p&amp;gt;
    &amp;lt;button @onclick="Increment"&amp;gt;Increment&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;

@code {
    int count = 0;

    void Increment()
    {
        count++;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then you would edit the created &lt;code&gt;index.tsx&lt;/code&gt; file to something like:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PiletApi&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;name-of-piral-instance&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PiletApi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineBlazorReferences&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./My.Dependency.dll&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./My.Components.dll&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/counter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromBlazor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-awesome-counter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;//page&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter-slot&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromBlazor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-awesome-counter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;//extension&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;These last lines would register the counter component as a page and an extension via the pilet API. &lt;code&gt;piral-blazor&lt;/code&gt; would then via Piral.Blazor.Core lookup the component in the defined references, activate it using JS invokable methods, and integrate it somewhere in the webpage. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-needed-improvement-and-why"&gt;
  &lt;/a&gt;
  What needed improvement, and why?
&lt;/h2&gt;

&lt;p&gt;There are several aspects where the aforementioned ecosystem could improve. Below I outline some of the goals that were set to make this better:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The user should be able to select the &lt;strong&gt;version of Blazor&lt;/strong&gt; they want, independently of the &lt;code&gt;piral-blazor&lt;/code&gt; version (because the latter is tied to the Piral version).&lt;/li&gt;
&lt;li&gt;There should be a way to &lt;strong&gt;transform an existing Blazor application&lt;/strong&gt; into a Blazor pilet with minimal effort.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Registering Blazor dependencies&lt;/strong&gt; is cumbersome and error-prone: they need to be manually entered, and if they are not in the right order they will not load correctly. Ideally, we would have an automatic solution.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Registering pages and extensions&lt;/strong&gt; onto the pilet API should be possible purely from Blazor, without having to do any TypeScript configuration (in the setup function). Additionally, to define pages we should not use a custom attribute, but use the built-in &lt;code&gt;@page&lt;/code&gt; directive from Blazor.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Debugging&lt;/strong&gt; a Blazor pilet from for example Visual Studio should be possible: triggering breakpoints, stepping through the code, ...&lt;/li&gt;
&lt;li&gt;Various improvements to single-page navigation, static files, scoped razor styles, ...&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#what-has-changed-and-improved"&gt;
  &lt;/a&gt;
  What has changed and improved?
&lt;/h2&gt;

&lt;p&gt;Let's dive right in by providing an updated diagram of the Piral Blazor ecosystem:&lt;/p&gt;


&lt;center&gt;
&lt;a href="https://i.imgur.com/7KWReas.png"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--drQ3W4RZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7KWReas.png"&gt;The Piral Blazor ecosystem in May, 2021

&lt;/a&gt;
&lt;/center&gt;


&lt;p&gt;Let's go over the improvement goals and see how this new architecture fulfills them: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1. The user should be able to select the &lt;strong&gt;version of Blazor&lt;/strong&gt; they want, independently of the &lt;code&gt;piral-blazor&lt;/code&gt; version (because the latter is tied to the Piral version).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This first goal was made possible by extracting the responsibility of dealing with Blazor files into a new npm package called &lt;code&gt;blazor&lt;/code&gt;, and including it as a peer dependency of &lt;code&gt;piral-blazor&lt;/code&gt;. This way, the user can install a &lt;code&gt;piral-blazor&lt;/code&gt; version that corresponds to their Piral version, and choose any version of the &lt;code&gt;blazor&lt;/code&gt; package to include any version of Blazor (e.g. &lt;code&gt;blazor@3.2.x&lt;/code&gt; will resolve to the .NET Blazor 3.2 release train).&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;2. There should be a way to &lt;strong&gt;transform an existing Blazor application&lt;/strong&gt; into a Blazor pilet with minimal effort.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For this goal, we created &lt;a href="https://nuget.org/packages/Piral.Blazor.Tools"&gt;&lt;code&gt;Piral.Blazor.Tools&lt;/code&gt;&lt;/a&gt;. The workflow for transforming a Blazor project into a pilet now looks something like this: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a &lt;code&gt;PiralInstance&lt;/code&gt; property to your &lt;code&gt;.csproj&lt;/code&gt; file with the name of your Piral instance. &lt;/li&gt;
&lt;li&gt;Install the &lt;code&gt;Piral.Blazor.Tools&lt;/code&gt; package&lt;/li&gt;
&lt;li&gt;Build the project. The first time you do this, this can take some time as it will fully scaffold the pilet.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;(stuff omitted for brevity. Read the complete description &lt;a href="https://github.com/smapiot/Piral.Blazor#2-transforming-an-existing-blazor-application-into-a-pilet"&gt;here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is the reason the template is now grayed out on the diagram: you don't &lt;em&gt;need&lt;/em&gt; it anymore (but it's still nice to get a quick start)!&lt;/p&gt;

&lt;p&gt;Template or not, the tools package will do all the heavy lifting and create all files needed for integration with the final framework. But this time, they will not be mixed in with the Blazor files: the user should not see these at all! We decided to put them all in a &lt;code&gt;piral~&lt;/code&gt; folder. This final tilde makes it so that this folder will by default not be checked in, thanks to the default .NET &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;3. &lt;strong&gt;Registering Blazor dependencies&lt;/strong&gt; is cumbersome and error-prone: they need to be manually entered, and if they are not in the right order they will not load correctly. Ideally, we would have an automatic solution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The tools package allows us to scaffold the pilet, and also copy over any files that we like to the user's pilet. We used this to fix this problem, by letting the tools copy over a &lt;code&gt;blazor.codegen&lt;/code&gt; file. &lt;/p&gt;

&lt;p&gt;If you are unfamiliar with codegen files, no worries, I was too! They are basically ways to generate code at build-time. Here you can learn more about one of the loaders that Piral can use (this is one for Parcel):&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/FlorianRappl"&gt;
        FlorianRappl
      &lt;/a&gt; / &lt;a href="https://github.com/FlorianRappl/parcel-plugin-codegen"&gt;
        parcel-plugin-codegen
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Parcel plugin for bundle-time code generation. Simple, powerful, and flexible. 📦
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;blazor.codegen&lt;/code&gt; looks for a JSON file called &lt;code&gt;project.assets.json&lt;/code&gt; to build up a dependency graph for the Blazor project, and then traverses/flattens this graph in the right order: dlls without dependencies (=&lt;em&gt;leaves&lt;/em&gt; in the graph) should be loaded first, then their parents, and so on.  &lt;em&gt;(For you algorithm nerds: this is depth-first post-order traversal 🤓 )&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It will then use this ordered list of dependencies to generate the pilet API integration code for us at build-time! (How this works will become clearer together with the next goal)&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;4. &lt;strong&gt;Registering pages and extensions&lt;/strong&gt; onto the pilet API should be possible purely from Blazor, without having to do any TypeScript configuration (in the setup function). Additionally, to define pages we should not use a custom attribute, but use the built-in &lt;code&gt;@page&lt;/code&gt; directive from Blazor. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was an interesting challenge. What has to happen for this to work is that we should have a list of all components that are defined as pages or extensions. And as an additional challenge: we need this list before the components are even loaded, so we cannot simply get them at runtime.&lt;/p&gt;

&lt;p&gt;Luckily, when Blazor gets compiled, this &lt;code&gt;@page&lt;/code&gt; directive just gets converted into a &lt;code&gt;[RouteAttribute]&lt;/code&gt;, and we also have the &lt;code&gt;[PiralExtension]&lt;/code&gt; attribute, so it's all attributes and we can treat these almost in the same way!&lt;/p&gt;

&lt;p&gt;What we came up with, is the &lt;code&gt;Piral.Blazor.Analyzer&lt;/code&gt;: a command line tool that will use reflection on the Blazor project dll to extract all components that have certain attributes. The codegen then calls &lt;code&gt;dotnet Piral.Blazor.Analyzer &amp;lt;args&amp;gt;&lt;/code&gt;; the output of which gives us something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"routes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"/counter"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"extensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"My.Components.Counter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"my-awesome-counter"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The codegen then has all the required information to create code for functions that the setup function needs. The &lt;code&gt;index.tsx&lt;/code&gt; file then will use these generated functions from the codegen, and becomes:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PiletApi&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;name-of-piral-instance&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Blazor&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./blazor.codegen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PiletApi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Blazor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerDependencies&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;Blazor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerPages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;Blazor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerExtensions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;blockquote&gt;
&lt;p&gt;5. &lt;strong&gt;Debugging&lt;/strong&gt; a Blazor pilet from for example Visual Studio should be possible: triggering  breakpoints, stepping through the code, ...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was an interesting challenge. The first step for me was learning how the debugger actually works. I stumbled upon an excellent blog post by Safia Abdalla. She's a software engineer at Microsoft on the .NET team.&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__37984"&gt;
  
    .ltag__user__id__37984 .follow-action-button {
      background-color: #3498DB !important;
      color: #FFFFFF !important;
      border-color: #3498DB !important;
    }
  
    &lt;a href="/captainsafia" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SdWxbhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZuYLEVYS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/37984/46b8bf0f-9fb1-4e3b-bd68-3590ea5737b4.jpeg" alt="captainsafia image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/captainsafia"&gt;Safia Abdalla&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/captainsafia"&gt;I make open source at @nteractio, make software at 
@Microsoft, and write books and blogs. Dream big and follow through even bigger.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The blogpost can be found on her personal blog: &lt;a href="https://safia.rocks/blog/blazor-wasm-debugging/"&gt;&lt;em&gt;Under the hood with debugging in Blazor WebAssembly&lt;/em&gt;&lt;/a&gt;. There, she explains the concept of the debugging proxy.&lt;/p&gt;

&lt;p&gt;After some experiments and proof-of-concept work, we found out that in Blazor 3.2, we could not load the dlls and pdbs (symbol files) dynamically. They had to be included in the &lt;code&gt;blazor.boot.json&lt;/code&gt; file for them to get picked up by the debugger. &lt;br&gt;
We solved this by configuring the Piral CLI using a kras script injector. I won't go into too much detail here, so I'm oversimplifying massively: &lt;a href="https://github.com/florianrappl/kras"&gt;kras&lt;/a&gt; is a proxy/mock server for your frontend. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/FlorianRappl"&gt;
        FlorianRappl
      &lt;/a&gt; / &lt;a href="https://github.com/FlorianRappl/kras"&gt;
        kras
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Efficient server proxying and mocking in Node.js. 💪
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;While it is most commonly used to mock a backend, we can use it as a proxy too! You can configure kras with js files included in a &lt;code&gt;mocks&lt;/code&gt; folder. Let's take a look at a code snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* mocks/debug.js */&lt;/span&gt;

&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toProxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;uniqueAssemblyNames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;uniquePdbNames&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shouldBeProxied&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;toProxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))?.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/_framework/_bin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shouldBeProxied&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;iisUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blazor.boot.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;returnWithTweakedBBJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This last part is what we mentioned before: when we debug we want to modify the &lt;code&gt;blazor.boot.json&lt;/code&gt; file to include our pilet dlls and pdbs, so they get loaded when the debug starts.&lt;/p&gt;

&lt;p&gt;As we see on line 5, a request should be proxied if the url points to one of our unique dlls or pdbs. This means the shared dlls from the appshell will just be loaded as normal, but the dlls the Pilet brings will be proxied. On line 9 we can see where to: the requests for the pilet dlls will be proxied to the url where IISExpress is running (we can get this from the &lt;code&gt;launchSettings.json&lt;/code&gt; file by the way).&lt;/p&gt;

&lt;p&gt;Because of this &lt;em&gt;hack&lt;/em&gt;, we can now trigger breakpoints in Visual Studio, step through the code, inspect variables, etc.! &lt;/p&gt;

&lt;p&gt;Oh, by the way, .NET 5 made stuff a lot easier with the inclusion of lazy loading! I won't give a full explanation, but it boils down to: we can now just load the pilet dlls and pdbs lazily, and everything just works! Proxying and tweaking the boot file isn't necessary!&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;6. Various improvements to single-page navigation, static files, scoped razor styles, ...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I won't go into details about these. There are always things to improve about code, and these were some major ones :) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;We take the same scenario as before: the counter. With the new setup, if we want a page, there is nothing at all to do that is special. We just need a regular Blazor page. If we also want to expose an extension, we can use the new &lt;code&gt;[PiralExtension]&lt;/code&gt; attribute from &lt;a href="https://nuget.org/packages/Piral.Blazor.Utils"&gt;&lt;code&gt;Piral.Blazor.Utils&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@page "/counter"
@attribute [PiralExtension("my-awesome-counter")] 

&amp;lt;div&amp;gt;
    &amp;lt;p&amp;gt;Current count: @count&amp;lt;/p&amp;gt;
    &amp;lt;button @onclick="Increment"&amp;gt;Increment&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;

@code {
    int count = 0;

    void Increment()
    {
        count++;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The tooling will do all the rest! &lt;strong&gt;No more screwing around in TypeScript&lt;/strong&gt; for a setup function to manually create and keep updated! Isn't that convenient?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(For more advanced uses you can still define an optional &lt;code&gt;setup.tsx&lt;/code&gt; file. Refer to the &lt;a href="https://github.com/smapiot/Piral.Blazor#readme"&gt;README&lt;/a&gt; to see how that works.)&lt;/em&gt;&lt;/p&gt;








&lt;h1&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h1&gt;

&lt;p&gt;My first thought after writing this article would be &lt;em&gt;"damn, I wrote quite a long article again"&lt;/em&gt;, immediately followed by &lt;em&gt;"are people actually going to read this one?"&lt;/em&gt;. My last post was received very well, and I thank each and everyone that reacted to it! Feel free to let me know in the comments if this article was in any way interesting, helpful or cool! &lt;/p&gt;

&lt;p&gt;I enjoyed contributing to Piral a lot. I've always wanted to dive into the open-source community, and because of the guidance given by the Piral maintainers, I feel like I could make a difference in this project (Piral is also pretty damn cool if you ask me). &lt;/p&gt;

&lt;p&gt;Looking back on it, in my opinion, using Piral and Blazor has become better in both functionality and developer experience, and I'm really proud of that (&lt;em&gt;"hey, a Belgian guy that says he is proud of something, that's quite rare!"&lt;/em&gt;). If you want to see my contributions first-hand; or just criticize my code, &lt;a href="https://github.com/smapiot/piral/pulls?q=is%3Apr+author%3ADanteDeRuwe"&gt;here&lt;/a&gt; and &lt;a href="https://github.com/smapiot/Piral.Blazor/pulls?q=is%3Apr+author%3ADanteDeRuwe"&gt;here&lt;/a&gt; are lists of the PRs I made. &lt;/p&gt;

&lt;p&gt;Then I want to address Blazor. While I can definitely see the appeal of it, and it's a cool technology: it was pretty hard to get a grasp on the technical side of it. Lots of the stuff that's going on is quite &lt;em&gt;magical&lt;/em&gt; at first. I'm glad the entire thing is open-source, because finding solutions often meant peeking behind the curtain and reading the source files on the &lt;a href="https://github.com/dotnet/aspnetcore"&gt;dotnet/aspnetcore&lt;/a&gt; repo.&lt;/p&gt;

&lt;p&gt;Because of this however, I've learned an awful lot about how Blazor WebAssembly works; what the limitations and weird quirks are, etc. It also just broadened my knowledge of the .NET ecosystem as a whole.&lt;/p&gt;

</description>
      <category>blazor</category>
      <category>piral</category>
      <category>microfrontends</category>
      <category>webdev</category>
    </item>
    <item>
      <title>My Binary Search Solution is better than yours </title>
      <author>Dimer BWimBA</author>
      <pubDate>Fri, 07 May 2021 07:57:26 +0000</pubDate>
      <link>https://dev.to/dimer191996/my-binary-search-solution-is-better-than-yours-2k21</link>
      <guid>https://dev.to/dimer191996/my-binary-search-solution-is-better-than-yours-2k21</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const binary = (val, arr) =&amp;gt; {
  let lower = 0;
  let upper = arr.length - 1;
  while (lower &amp;lt;= upper) {
    console.log("ols");
    const middle = lower + Math.floor((upper - lower) / 2);
    if (val === arr[middle]) {
      return middle;
    }
    if (val &amp;lt; arr[middle]) {
      console.log("right");
      upper = middle - 1;
    } else {
      console.log("left");
      lower = middle + 1;
    }
  }
  return -1;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>algorithms</category>
      <category>simplecode</category>
    </item>
    <item>
      <title> Rock Paper Scissors Spock Lizard game in JavaScript</title>
      <author>matvii</author>
      <pubDate>Fri, 07 May 2021 07:50:07 +0000</pubDate>
      <link>https://dev.to/hodovani/rock-paper-scissors-spock-lizard-game-in-javascript-55np</link>
      <guid>https://dev.to/hodovani/rock-paper-scissors-spock-lizard-game-in-javascript-55np</guid>
      <description>&lt;p&gt;Welcome to my tutorial!&lt;/p&gt;

&lt;p&gt;In this tutorial, we're gonna build a really simple game of Rock Paper Scissors Spock Lizard.&lt;/p&gt;

&lt;p&gt;Please check my GitHub account for the complete source code.&lt;br&gt;
&lt;a href="https://github.com/hodovani/rock-paper-scissors-Spock-lizard"&gt;https://github.com/hodovani/rock-paper-scissors-Spock-lizard&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are gonna use vanilla JavaScript, HTML, CSS for this game.&lt;/p&gt;

&lt;p&gt;YouTube video&lt;br&gt;
&lt;a href="https://youtu.be/pJw39quoajE"&gt;https://youtu.be/pJw39quoajE&lt;/a&gt;&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>javascript</category>
      <category>html</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
