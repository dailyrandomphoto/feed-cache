<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Generate Swagger for your Rails project, with no code changes, in 2 ¹/₂ minutes</title>
      <author>Kevin Gilpin</author>
      <pubDate>Wed, 07 Apr 2021 21:54:06 +0000</pubDate>
      <link>https://dev.to/appland/generate-swagger-for-your-rails-project-with-no-code-changes-in-2-minutes-3abj</link>
      <guid>https://dev.to/appland/generate-swagger-for-your-rails-project-with-no-code-changes-in-2-minutes-3abj</guid>
      <description>&lt;p&gt;In this 2 1/2 minute video, I'm introducing a new tool for Ruby called &lt;a href="https://github.com/applandinc/appmap_swagger-ruby#appmap_swagger"&gt;&lt;code&gt;appmap_swagger&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;appmap_swagger&lt;/code&gt; eliminates the need to manually write &lt;a href="https://swagger.io/specification/"&gt;Swagger&lt;/a&gt;. It works by generating Swagger directly from your test cases. It doesn’t just look at your tests though; that’s not enough information to generate Swagger. It actually runs them. It sees every request, every mime type, every parameter, every header and every response. This information is generated by recording your test cases using a Ruby gem called &lt;a href="https://marketplace.visualstudio.com/items?itemName=appland.appmap"&gt;AppMap&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Try using &lt;code&gt;appmap_swagger&lt;/code&gt; as you work! As you write your code and run test cases, re-generate AppMaps by running the tests with &lt;code&gt;APPMAP=true&lt;/code&gt;. Then run &lt;code&gt;bundle exec rake appmap:swagger&lt;/code&gt;. To see how your web services are changing, run &lt;code&gt;bundle exec rake appmap:swagger:diff&lt;/code&gt;. Here's an example from my own work, showing how routes are being changed, added, and removed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ bundle exec rake appmap:swagger:diff
changed       @ info.version
old value     : v0.22.0
new value     : v0.22.1
added         @ paths."/api/api_keys".delete.responses
added key     : 200
added value   : {"content"=&amp;gt;{"application/json"=&amp;gt;{}}}
removed       @ paths."/scenarios/{id}".put.requestBody.content."application/json".schema.properties.scenario.properties
removed key   : mapset
removed value : {"type"=&amp;gt;"string"}
removed       @ paths."/scenarios/{scenario_id}/save_as".post.requestBody.content."application/json".schema.properties.save_as.properties
removed key   : feature
removed value : {"type"=&amp;gt;"string"}
removed       @ paths."/scenarios/{scenario_id}/save_as".post.requestBody.content."application/json".schema.properties.save_as.properties
removed key   : feature_group
removed value : {"type"=&amp;gt;"string"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once I'm happy with what I see, and with the test coverage, I push the work-in-progress Swagger files up to my code repo. I create a Draft pull request as soon as I start coding, that way everyone can see what I’m doing, as I work. The generated Swagger file &lt;code&gt;openapi_stable.yaml&lt;/code&gt; gives my colleagues a great view of any web services changes that I’m making. That makes the eventual code review of my pull request a lot easier, and it helps make sure that my changes to the web services API don’t break anyone else’s code.&lt;/p&gt;

&lt;p&gt;Thanks for watching / reading! And if &lt;code&gt;appmap_swagger&lt;/code&gt; interests you, be sure and check out the &lt;a href="https://marketplace.visualstudio.com/items?itemName=appland.appmap"&gt;AppMap extension for VSCode&lt;/a&gt;. It turns AppMaps into interactive, accurate software architecture diagrams right in your IDE. The dependency map, trace view, web services, SQL, and source code integration help you understand and optimize your code &lt;em&gt;before&lt;/em&gt; code review. &lt;/p&gt;

&lt;p&gt;P.S. If you saw this post last week, my apologies for the re-publishing. It turned out that there were bugs in the Gem that kept it from working for a lot of people. So, I hope you'll give me another chance!&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>vscode</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to write better reusable code</title>
      <author>Andi Rosca</author>
      <pubDate>Wed, 07 Apr 2021 21:18:08 +0000</pubDate>
      <link>https://dev.to/andi23rosca/how-to-design-better-reusable-code-2l3a</link>
      <guid>https://dev.to/andi23rosca/how-to-design-better-reusable-code-2l3a</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Side-note, the &lt;a href="https://godoffrontend.com/posts/terseness-vs-control/"&gt;original article&lt;/a&gt; contains some interactive elements that are only images here. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Code that is easy to reuse is not very customizable, and code that is very customizable is not as easy to reuse.&lt;/p&gt;

&lt;p&gt;Think of the difference between&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;custom-button&lt;/span&gt; &lt;span class="na"&gt;color=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Cancel&lt;span class="nt"&gt;&amp;lt;/custom-button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;custom-button&lt;/span&gt; &lt;span class="na"&gt;color=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt; &lt;span class="na"&gt;async=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;size=&lt;/span&gt;&lt;span class="s"&gt;"big"&lt;/span&gt; &lt;span class="na"&gt;border=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"cancel"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Cancel
&lt;span class="nt"&gt;&amp;lt;/custom-button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can do more stuff with more code, but that comes with the cost of spending more time setting things up, i.e. boilerplate.&lt;/p&gt;

&lt;p&gt;Just think of all the abstract factory makers you've worked with if you've ever written some Java.&lt;/p&gt;

&lt;p&gt;How can we write code that is easy to use by other developers, without sacrificing on the ability to customize?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#abstraction"&gt;
  &lt;/a&gt;
  Abstraction
&lt;/h2&gt;

&lt;p&gt;A good abstraction hides away the details that the developer doesn't care about, and only exposes the relevant bits and pieces.&lt;/p&gt;

&lt;p&gt;It's like when you try to explain your code to a non-technical person. You gloss over a lot of the details and years of knowledge you accumulated, and use more simple language and analogies that can convey the main idea.&lt;/p&gt;




&lt;p&gt;Think of an HTML element such as the &lt;code&gt;input&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As a user of the HTML abstraction, you don't care about the inner workings of the browser that make it possible to have an interactive text-box presented to the user.&lt;/p&gt;

&lt;p&gt;What &lt;strong&gt;you&lt;/strong&gt; care about is that when you write &lt;code&gt;&amp;lt;input type="text" /&amp;gt;&lt;/code&gt; the user can now enter some data.&lt;/p&gt;

&lt;p&gt;But if an abstraction hides too many things, then it becomes useless in all but the most basic cases.&lt;/p&gt;

&lt;p&gt;Imagine if the input element didn't even let you change the placeholder text.&lt;/p&gt;

&lt;p&gt;Soon, a lot of developers would be doing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-input-class"&lt;/span&gt; &lt;span class="na"&gt;contenteditable=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Placeholder text...&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Placeholder text..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you think that's a stretch you can look into recommended ways of replacing browser checkboxes with custom styled ones like &lt;a href="https://css-tricks.com/the-checkbox-hack/"&gt;this one&lt;/a&gt;. Almost all involve hiding the original box and replacing it with an svg or html/css one you made yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-about-balance-%E2%98%AF"&gt;
  &lt;/a&gt;
  It's about balance ☯
&lt;/h2&gt;

&lt;p&gt;So an abstraction's job is to hide things away from the user, so that they can focus on the task at hand. But also to not hide away too many things, in case the user wants to customize it to suit their needs.&lt;/p&gt;

&lt;p&gt;If it sounds like creating a good abstraction is hard to do, that's because &lt;em&gt;it is.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Your job as a developer is to navigate these complexities and walk the fine line between too complex and too simple.&lt;/p&gt;

&lt;p&gt;Let's see a few mental models and recipes that can get you started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pattern-1-sane-defaults-and-escape-hatches"&gt;
  &lt;/a&gt;
  Pattern 1: Sane defaults and escape hatches
&lt;/h2&gt;

&lt;p&gt;This pattern is as simple as it sounds.&lt;/p&gt;

&lt;p&gt;Imagine you're making a recipe website for the singer Pitbull, who has recently taken up cooking. &lt;br&gt; He's known as &lt;strong&gt;Mr. World-Wide™&lt;/strong&gt;, so the website has to support all languages of the world.&lt;/p&gt;

&lt;p&gt;It's a fair assumption to make that most people visiting your website from Spanish, Mexican, Colombian addresses speak Spanish, so you make your default language for those IPs, well, Spanish.&lt;br&gt;&lt;br&gt;
You also know that there's such a thing as expats in the world, so you provide selection box at the top of your website to change the language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mr. World-Wide™&lt;/strong&gt; is indeed happy with your services.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2RMQx2JZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkdwwk87rr7t96d6danb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2RMQx2JZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkdwwk87rr7t96d6danb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Setting the default language to Spanish is a &lt;strong&gt;sane default&lt;/strong&gt;; a good assumption to make on how users will use your product/code/feature. You're now saving ~80% of people time from changing the language themselves.&lt;/p&gt;

&lt;p&gt;The language selection box at the top is an &lt;strong&gt;escape hatch&lt;/strong&gt;. For the rest of the users to whom the assumption doesn't apply, you offer a way for them to make changes.&lt;/p&gt;

&lt;p&gt;The escape hatch does make some people do more steps to use your website, but it doesn't make it &lt;strong&gt;impossible&lt;/strong&gt; for them to use it.&lt;/p&gt;

&lt;p&gt;The same principle applies to writing reusable code. You want to save time for 80% of the developers using your code, but leave a way for the rest of 20% to customize it to suit their needs.&lt;/p&gt;



&lt;p&gt;Obviously, most situations won't be as cut and dry as the example I've just provided. The hard part about applying this pattern is that you need to know what the most common use cases &lt;em&gt;are&lt;/em&gt;, which requires insight into the users of your code before you've even started writing it.&lt;/p&gt;

&lt;p&gt;However, it generally doesn't help if you obsess over what your potential users will try to do.&lt;/p&gt;

&lt;p&gt;If it's not obvious what the common use case is from the beginning, try the following things:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dogfooding"&gt;
  &lt;/a&gt;
  Dogfooding 🐶
&lt;/h3&gt;

&lt;p&gt;Dogfooding refers to eating your own dog food, i.e. use your own code yourself, in realistic scenarios.&lt;/p&gt;

&lt;p&gt;The more different real-life scenarios you can come up with to test your code, the better of a picture you will have of your code's shortcomings and what you can change to accommodate your future users.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#focus-on-the-escape-hatches"&gt;
  &lt;/a&gt;
  Focus on the escape hatches 🚀
&lt;/h3&gt;

&lt;p&gt;If after dogfooding it's still not super clear which features of your code you should make easy by default, you can try another approach and leave the figuring out for later.&lt;/p&gt;

&lt;p&gt;The way to do this and minimize breaking changes is to focus on building your escape hatches and making your code customizable.&lt;/p&gt;

&lt;p&gt;The more generically customizable it is, the better the chances of you being able to make modifications in the future without causing breaking changes.&lt;/p&gt;

&lt;p&gt;There is however the tradeoff that making things too customizable may make the internal implementation too complicated to maintain.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;Let's say you have made a vanilla JavaScript button library that provides the coolest button the world has ever seen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ADWYj3DK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0s14kot5enkdl8v3slt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ADWYj3DK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0s14kot5enkdl8v3slt.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BestestButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Amazing button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From dogfooding you learn that it's very common to need to include icons, or loading spinners for buttons triggering async actions, etc.&lt;/p&gt;

&lt;p&gt;Now you may not know exactly which case you should support and make easiest for your amazing button, but you can ignore that for now and build in escape hatches that will enable you to consolidate the library later on, without having breaking changes.&lt;/p&gt;

&lt;p&gt;In this particular case you could add the following escape hatches for your users (and yourself):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make the button constructor accept both strings and HTML elements for the content shown inside&lt;/li&gt;
&lt;li&gt;Accept a second argument which will be a configuration object
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BestestButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="c1"&gt;// Instead of only strings users can add their own custom html elements&lt;/span&gt;
  &lt;span class="nx"&gt;elementContainingIconAndText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Generic configuration object that can be extended with&lt;/span&gt;
  &lt;span class="c1"&gt;// other accepted properties&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;animateClick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The example I've laid out is quite simple and had possibly obvious answers, but the same principles apply to more complex scenarios.&lt;/p&gt;

&lt;p&gt;It'll probably take longer to come up with good escape hatches but anythings possible with enough time spent.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pattern-2-do-one-thing-well"&gt;
  &lt;/a&gt;
  Pattern 2: Do one thing well
&lt;/h2&gt;

&lt;p&gt;I named it a pattern for the sake of title consistency but this one's more of a philosophy. You should start thinking about it before any line of code is written.&lt;/p&gt;

&lt;p&gt;What &lt;em&gt;"do one thing well"&lt;/em&gt; means is that you should very clearly define what your code can do, and what it &lt;strong&gt;&lt;em&gt;won't&lt;/em&gt;&lt;/strong&gt; do.&lt;/p&gt;

&lt;p&gt;Let's say you've decided to create an HTML Canvas library for making interactive 2D shapes that you can select and drag around. You go ahead and implement a great library that many people use and like.&lt;/p&gt;

&lt;p&gt;However, you start noticing that many users report the library rendering very slowly when there are more than 5000 shapes, and they all urge you to also provide a WebGL rendering option, for high-performance needs.&lt;/p&gt;

&lt;p&gt;It is up to you now to decide if the &lt;em&gt;one thing&lt;/em&gt; that your library does well is either:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Makes drawing 2D shapes &lt;strong&gt;&lt;em&gt;on the Canvas&lt;/em&gt;&lt;/strong&gt; easy&lt;/li&gt;
&lt;li&gt; Makes drawing 2D shapes &lt;strong&gt;&lt;em&gt;in the Browser&lt;/em&gt;&lt;/strong&gt; easy&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It's your choice what the scope of your library is, but it should be a conscious choice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-just-go-with-the-flow"&gt;
  &lt;/a&gt;
  Don't just go with the flow 🌊
&lt;/h3&gt;

&lt;p&gt;If you get pressured into implementing version 2, people might start requesting for you to add more functionality. Maybe they want special options for the WebGL. Maybe they want you to add basic 3D shapes as well.&lt;/p&gt;

&lt;p&gt;You might wake up in a few years realizing you implemented &lt;a href="https://www.blender.org/features/"&gt;Blender&lt;/a&gt; in the browser, when all you actually wanted to do was to drag some rectangles around.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stick-with-what-you-believe-is-best"&gt;
  &lt;/a&gt;
  Stick with what you believe is best
&lt;/h3&gt;

&lt;p&gt;If you stick with your initial scope and purpose, you can spend more time to improve the features that are already there.&lt;/p&gt;

&lt;p&gt;You could still implement that WebGL rendering option for performance gains, but this time as part of the goal of the library.&lt;br&gt;
If people start requesting basic 3D shapes, you can simply say that implementing that would defeat the purpose of the library.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-can-make-multiple-things-that-do-one-thing-well"&gt;
  &lt;/a&gt;
  You can make multiple things that do one thing well
&lt;/h3&gt;

&lt;p&gt;If you do think a browser based Blender is cooler and want to implement a WebGL 3D editor, there's no reason why you can't create a new library that does that &lt;em&gt;one thing&lt;/em&gt; very well, without changing your 2D Canvas code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-2-coming-soon"&gt;
  &lt;/a&gt;
  Part 2 coming soon
&lt;/h2&gt;

&lt;p&gt;There are more tips I would like to share with you, but I want to keep articles at a manageable length.&lt;/p&gt;

&lt;p&gt;Stay tuned for part 2 of this post!&lt;/p&gt;

&lt;p&gt;You can subscribe to get email notifications on the original post page (at the bottom): &lt;a href="https://godoffrontend.com/posts/terseness-vs-control/"&gt;https://godoffrontend.com/posts/terseness-vs-control/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Youtube To MP3 😍</title>
      <author>Said Mounaim</author>
      <pubDate>Wed, 07 Apr 2021 21:18:01 +0000</pubDate>
      <link>https://dev.to/said_mounaim/youtube-to-mp3-3ja6</link>
      <guid>https://dev.to/said_mounaim/youtube-to-mp3-3ja6</guid>
      <description>&lt;p&gt;youtube to mp3 app using html5, css3 &amp;amp;javascript 😍🎉&lt;/p&gt;

&lt;p&gt;Demo : &lt;br&gt;
&lt;a href="https://youtube-mp3.netlify.app/"&gt;https://youtube-mp3.netlify.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code :&lt;br&gt;
&lt;a href="https://github.com/saidMounaim/100DaysOfCode/tree/main/Day50"&gt;https://github.com/saidMounaim/100DaysOfCode/tree/main/Day50&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check my #100DaysOfCode challenge 😍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/saidMounaim/100DaysOfCode"&gt;https://github.com/saidMounaim/100DaysOfCode&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>100daysofcode</category>
      <category>programming</category>
    </item>
    <item>
      <title>Self-Studying Advice from CodeNewbie Community</title>
      <author>Ben Halpern</author>
      <pubDate>Wed, 07 Apr 2021 20:57:29 +0000</pubDate>
      <link>https://dev.to/devteam/self-studying-advice-from-codenewbie-community-ibh</link>
      <guid>https://dev.to/devteam/self-studying-advice-from-codenewbie-community-ibh</guid>
      <description>&lt;p&gt;I came across a great post on the &lt;a href="https://community.codenewbie.org"&gt;CodeNewbie Community&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selfstudying-101-advice-from-a-selftaught-dev"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://community.codenewbie.org/httpspauline/self-studying-101-advice-from-a-self-taught-dev-2io2"&gt;"Self-studying 101: Advice From a Self-Taught Dev”&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;If you're a newbie in deep need of self-teaching tips, or just feel like you need to improve on this skills, I highly recommend this post.&lt;/p&gt;

&lt;p&gt;Reminder that the CodeNewbie community is a space entirely dedicated to newbie success. It's built DEV's open source software &lt;a href="https://github.com/forem/forem"&gt;Forem&lt;/a&gt; but posts and comments are moderated explicitly with newbies in mind. Check it out if you want a second space to hang out.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: We're getting closer to getting Forem Open Source project to general availability with versioned releases for anyone who wants to host a Forem. Stay tuned.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  🌱
&lt;/h4&gt;

</description>
      <category>forem</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Why I didn't just use NgRx, NGXS or Subjects in a Service</title>
      <author>Mike Pearson</author>
      <pubDate>Wed, 07 Apr 2021 20:20:24 +0000</pubDate>
      <link>https://dev.to/this-is-angular/why-i-didn-t-just-use-ngrx-ngxs-or-subjects-in-a-service-1djf</link>
      <guid>https://dev.to/this-is-angular/why-i-didn-t-just-use-ngrx-ngxs-or-subjects-in-a-service-1djf</guid>
      <description>&lt;p&gt;I am about to throw shade at some beloved state management solutions, and this is bound to upset some people. Great people have worked hard on these, and I am seriously grateful to anyone who has contributed to the many state management options out there.  However, I have been asked to clarify why I created StateAdapt instead of using an existing solution. &lt;/p&gt;

&lt;p&gt;Before you read this you should read &lt;a href="https://medium.com/weekly-webtips/introducing-stateadapt-reusable-reactive-state-management-9f0388f1850e"&gt;my article introducing StateAdapt&lt;/a&gt;. It is much more positive than this.&lt;/p&gt;

&lt;p&gt;Anyway, let's get into it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ngrx"&gt;
  &lt;/a&gt;
  NgRx
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8I2G6vh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9barqgte6p1qysw4g8b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8I2G6vh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9barqgte6p1qysw4g8b.png" alt="What NgRx is missing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#state-pattern-is-coupled-to-state"&gt;
  &lt;/a&gt;
  State pattern is coupled to state
&lt;/h3&gt;

&lt;p&gt;Recently I created a complex tree of components in an NgRx project only to find out later that a 2nd copy of that tree of components needed to exist on the same page at the same time. I would need to add an extra property to 30 actions so that the reducer could become more complicated and know whether an action should apply to one place in the state tree or another. &lt;/p&gt;

&lt;p&gt;If we managed state like we built UIs—with components—we could add another instance of a state pattern in as little as 2 lines of code. I believe we could achieve this with the state adapter pattern introduced in NgRx/Entity, but I think most people would view it as even more boilerplate unless the surrounding boilerplate was reduced at the same time. That is what I did in StateAdapt. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boilerplate"&gt;
  &lt;/a&gt;
  Boilerplate
&lt;/h3&gt;

&lt;p&gt;Everyone knows about the boilerplate problem with NgRx. The NgRx Core team has done a terrific job of reducing this, but in order to reduce it to a minimum you would need to take full advantage of RxJS, which StateAdapt does. StateAdapt achieves the same benefits as NgRx with 60% the minimum code compared to modern NgRx. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-practices"&gt;
  &lt;/a&gt;
  Best practices?
&lt;/h3&gt;

&lt;p&gt;NgRx seems to try to distance itself from Redux, but it is still a copy of Redux wrapped in an observable. Unfortunately, there is a lot of wisdom and best practices in the Redux community that did not successfully make its way over. There is some guidance, like &lt;a href="https://www.youtube.com/watch?v=JmnsEvoy-gY"&gt;this terrific talk&lt;/a&gt; by Mike Ryan, but I believe people are largely using NgRx in a way that minimizes the benefits they get from it. &lt;/p&gt;

&lt;p&gt;I wrote &lt;a href="https://medium.com/@m3po22/stop-using-ngrx-effects-for-that-a6ccfe186399"&gt;Stop using ngrx/effects for that&lt;/a&gt; in 2017 in the hopes that people would stop using ngrx/effects for everything. It mostly didn't work. The first example in the &lt;a href="https://ngrx.io/guide/effects"&gt;NgRx/Effects&lt;/a&gt; documentation is for something that NgRx/Effects shouldn't be used for: Subscribing to data by dispatching an action. In my article I explain why using plain RxJS makes data dependencies much more flexible and maintainable. &lt;/p&gt;

&lt;p&gt;My solution did not catch on very well, and I have seen indications that people were intimidated by the little-known &lt;code&gt;using&lt;/code&gt; function from RxJS that it requires. Unfortunately I was too lazy to write more about that solution. So, one of my primary goals in StateAdapt was to just take care of that behind the scenes. I am very happy with how it turned out. With StateAdapt, developers can focus on thinking reactively and not worry about how to involve the store. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ngxs"&gt;
  &lt;/a&gt;
  NGXS
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--20j0w87T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1yau65kxrq4yhg2qtdi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--20j0w87T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1yau65kxrq4yhg2qtdi.png" alt="What NGXS is missing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#state-pattern-is-coupled-to-state"&gt;
  &lt;/a&gt;
  State pattern is coupled to state
&lt;/h3&gt;

&lt;p&gt;This is the same problem I talked about with NgRx above. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#everything-is-an-effect"&gt;
  &lt;/a&gt;
  Everything is an effect
&lt;/h3&gt;

&lt;p&gt;I already thought people were drastically overusing NgRx/Effects, but then somebody created a state management library where literally everything is an effect. &lt;/p&gt;

&lt;p&gt;Rather than repeat myself about why I love pure functions, I will just refer you to &lt;a href="https://medium.com/@m3po22/stop-using-ngrx-effects-for-that-a6ccfe186399"&gt;my first article&lt;/a&gt;. I think it is wonderful that people are trying to reduce state management boilerplate, but I personally find NGXS code to be hard to understand. Data structure manipulation gets in the way of trying to understand the overall data flow in an application, and vice versa. I like separation of concerns between the big picture stuff and the details of how state is changed. NgRx has that (when not overusing NgRx/Effects) but it comes at the cost of all that boilerplate. But StateAdapt maintains it while reducing boilerplate.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiple-action-dispatching"&gt;
  &lt;/a&gt;
  Multiple action dispatching
&lt;/h3&gt;

&lt;p&gt;Dispatching multiple actions at the same time is an anti-pattern in Redux, and NGXS encourages it with special syntax. &lt;/p&gt;

&lt;p&gt;One of my first experiences in an NGXS application was opening Redux Devtools and seeing this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--073dOfcH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcr1a3f26gx10ea2prod.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--073dOfcH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcr1a3f26gx10ea2prod.png" alt="Multiple Actions Dispatched"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I looked at the code and saw that these actions were all dispatched at the same time. &lt;/p&gt;

&lt;p&gt;The line between what was happening and how the app reacted was blurred to the point where I could no longer clearly see what was happening. There should have just been one action dispatched: &lt;code&gt;AnswerCall&lt;/code&gt;. If I was interested in the details, I could click on it and look at the state changes. &lt;/p&gt;

&lt;p&gt;Also, if you try to jump to any of these actions in Redux Devtools it will put the app in an intermediate state that is impossible in reality. &lt;/p&gt;

&lt;p&gt;The last issue is that this is backwards from FRP. Rather than multiple action handlers listening to one action in their respective state files, the event source is in charge of making all the changes downstream. An event source that dispatches multiple actions is a lot more than an event source.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#akita"&gt;
  &lt;/a&gt;
  Akita
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1d6JRcVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyn2az9ps5di36btcmsu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1d6JRcVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyn2az9ps5di36btcmsu.png" alt="What Akita is missing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#imperative-state-management"&gt;
  &lt;/a&gt;
  Imperative State Management
&lt;/h3&gt;

&lt;p&gt;State is updated imperatively in Akita, like it tends to be in NGXS. Actually, NGXS would be improved if its syntax were more like Akita's, but they both suffer from the issues I mentioned in the section about NGXS.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#subjects-in-a-service"&gt;
  &lt;/a&gt;
  Subjects in a Service
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oh_nQO8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chjw6jadsiuy6btxq64t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oh_nQO8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chjw6jadsiuy6btxq64t.png" alt="What RxJS is missing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-redux-devtools"&gt;
  &lt;/a&gt;
  No Redux Devtools
&lt;/h3&gt;

&lt;p&gt;RxJS is notoriously annoying to debug. Usually you have to edit the file by putting a &lt;code&gt;tap(console.log)&lt;/code&gt; in there, reload the app and reproduce the situation you wanted to debug. But Redux Devtools keeps track of everything automatically, so you can just open it anytime and explore what happened at any time. &lt;/p&gt;

&lt;p&gt;(Actions and state reactions are a big part of understanding what is happening in an application, so Redux Devtools is great, but I am still trying to find a better way to debug RxJS for the other parts of applications. If anyone knows of anything, let me know.) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-selectors"&gt;
  &lt;/a&gt;
  No Selectors
&lt;/h3&gt;

&lt;p&gt;Sometimes you want to combine observables, but &lt;code&gt;combineLatest&lt;/code&gt; emits once for each input observable, even if the input observables emit synchronously. I believe this is the original reason NgRx included &lt;code&gt;createSelector&lt;/code&gt;, because selectors solve this. &lt;/p&gt;

&lt;p&gt;It is also really nice to have all the derived state calculated in pure functions, separate from the asynchronous RxJS stuff. &lt;/p&gt;

&lt;p&gt;Another benefit is with derived state. Pure RxJS makes you &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;distinctUntilChanged&lt;/code&gt; and &lt;code&gt;shareReplay&lt;/code&gt; if you want to calculate derived state efficiently. Selectors do not need any of that.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#stateadapt"&gt;
  &lt;/a&gt;
  StateAdapt
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gvlgzhfK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qt4qidf4hdut76ljur7r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gvlgzhfK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qt4qidf4hdut76ljur7r.png" alt="StateAdapt has everything"&gt;&lt;/a&gt;&lt;br&gt;
So, all of that is why I wrote StateAdapt. Is it perfect? No. Is it for everyone? Well, I think it is for everyone who loves minimal, reactive, debuggable and reusable code. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://state-adapt.github.io/"&gt;Give it a try&lt;/a&gt; and let me know what you think. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#others"&gt;
  &lt;/a&gt;
  Others
&lt;/h1&gt;

&lt;p&gt;If there are any I missed, please let me know. I searched a lot before I wrote StateAdapt, but I may have missed something. &lt;/p&gt;

&lt;p&gt;Also, if anyone wants to see any comparisons, I would love to create some. I already plan on doing some. But if you show me a feature developed in one state pattern, I will recreate it using StateAdapt. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you!
&lt;/h1&gt;

&lt;p&gt;And please forgive me! I love you all!&lt;/p&gt;

</description>
      <category>stateadapt</category>
      <category>ngrx</category>
      <category>ngxs</category>
      <category>akita</category>
    </item>
    <item>
      <title>Want to Learn Programming? Avoid These 3 Mistakes</title>
      <author>Mateusz Dziubek</author>
      <pubDate>Wed, 07 Apr 2021 20:19:02 +0000</pubDate>
      <link>https://dev.to/matdziu/want-to-learn-programming-avoid-these-3-mistakes-2j42</link>
      <guid>https://dev.to/matdziu/want-to-learn-programming-avoid-these-3-mistakes-2j42</guid>
      <description>&lt;p&gt;As the date of my &lt;a href="https://codersbible.com/before-you-start-webinar/"&gt;online workshop “Before You Start Learning How to Code”&lt;/a&gt; approaches, I thought I’ll share 3 common mistakes that you should be aware of when diving head first into the complicated programming world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mistake-1-you-learn-to-code-but-do-not-focus-on-practice"&gt;
  &lt;/a&gt;
  MISTAKE #1: YOU LEARN TO CODE, BUT DO NOT FOCUS ON PRACTICE
&lt;/h2&gt;

&lt;p&gt;So you started learning to code. That’s great! What were the factors that you took into consideration when choosing the resource you’re learning from? If it’s an online course you should look for completeness (it should cover all the basics) and friendliness of the teaching style. But there’s one more important thing. Your first course/book/tutorial about programming should be focused on &lt;strong&gt;practice&lt;/strong&gt; as much as possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-from-my-life"&gt;
  &lt;/a&gt;
  Example from my life:
&lt;/h3&gt;

&lt;p&gt;When I was designing &lt;a href="https://codersbible.teachable.com/p/python"&gt;my programming course for beginners&lt;/a&gt; I wanted my students to experience transformation, which is heavily focused on practice. I even phrased this transformation in one sentence: &lt;strong&gt;go from absolute beginner to having a complex programming project, which you'll be able to code by yourself&lt;/strong&gt;. Capstone projects, final projects, practice assignments - these are keywords you should look for while doing your research.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mistake-2-you-focus-on-practice-but-do-not-create-projects"&gt;
  &lt;/a&gt;
  MISTAKE #2: YOU FOCUS ON PRACTICE, BUT DO NOT CREATE PROJECTS
&lt;/h2&gt;

&lt;p&gt;Treat practice exercises as side quests. Your primary goal should always be to create a small project, which has at least one of below characteristics:&lt;/p&gt;

&lt;p&gt;It’s fun (time really does fly by as you're having fun). &lt;br&gt;
It’s not too complicated (it should challenge you, not make you depressed). &lt;br&gt;
It’s made for somebody (make something even a tiny bit useful for you or your friends).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-from-my-life"&gt;
  &lt;/a&gt;
  Example from my life:
&lt;/h3&gt;

&lt;p&gt;Back when I was starting my programming journey I focused too much on theory. I remember spending 3 months reading “Thinking in Java” only to end up forgetting 90% of the material. Then I gave it another go, but this time I completed all exercises from the book. It was a bit better, but they became quite repetitive with time and made me unable to answer more creative job interview questions. In the end it was a deep dive into a project called “Manip” (a 3D simulator I created for my robotics classes) that showed my weaknesses and helped me improve rapidly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mistake-3-you-create-projects-but-do-not-showcase-them"&gt;
  &lt;/a&gt;
  MISTAKE #3: YOU CREATE PROJECTS, BUT DO NOT SHOWCASE THEM
&lt;/h2&gt;

&lt;p&gt;So you’re learning to code - great, you’re doing practice projects - amazing, but to actually land a dream job you need to make a connection with recruiters. Not only by sending them CV, but also &lt;strong&gt;by showing them what you can build&lt;/strong&gt;. The number one reason aspiring programmers do not upload their code to sites like &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; is perfectionism. Escape it as soon as possible. When in the future you revisit projects that you’re building now, you will always be unsatisfied with their quality. And that’s good. It means you’re making substantial progress!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-from-my-life"&gt;
  &lt;/a&gt;
  Example from my life:
&lt;/h3&gt;

&lt;p&gt;For inspiration, take a look at websites where I share my skills publicly and pick the one that best suits your needs: &lt;a href="https://github.com/matdziu"&gt;GitHub&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/m-dziubek/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://matdziu.medium.com/"&gt;Medium&lt;/a&gt;, &lt;a href="https://dev.to/matdziu"&gt;Dev.to&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>What's New in Codesphere Version 1.7.0</title>
      <author>Saji Wang</author>
      <pubDate>Wed, 07 Apr 2021 19:58:56 +0000</pubDate>
      <link>https://dev.to/codesphere/what-s-new-in-codesphere-version-1-7-0-478j</link>
      <guid>https://dev.to/codesphere/what-s-new-in-codesphere-version-1-7-0-478j</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;We have exciting news.. we read your feedback and listened, we just released v1.7.0 as the latest version of Codesphere!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#whats-new%C2%A0"&gt;
  &lt;/a&gt;
  What's new? 
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We added GitHub integration support&lt;/li&gt;
&lt;li&gt;We added ESlint code assistance&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fixes"&gt;
  &lt;/a&gt;
  Fixes
&lt;/h3&gt;

&lt;p&gt;✓ We improved overall sign-up and sign-in process&lt;/p&gt;

&lt;p&gt;In addition, our team is currently working on allowing users to sign in with third-party accounts like GitHub and Google to ensure that our users can get started with Codesphere as quickly as possible. We will be adding more frameworks and soon you will be able to connect your own domain and so much more. Stay tuned for future releases!&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>changelog</category>
      <category>webdev</category>
      <category>programming</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Want to get started with web components?</title>
      <author>Matt Levy</author>
      <pubDate>Wed, 07 Apr 2021 19:49:29 +0000</pubDate>
      <link>https://dev.to/ficusjs/want-to-get-started-with-web-components-4h7p</link>
      <guid>https://dev.to/ficusjs/want-to-get-started-with-web-components-4h7p</guid>
      <description>&lt;p&gt;Browsers have improved &lt;em&gt;greatly&lt;/em&gt;. Many of the reasons to reach for a big framework like React or Angular have gone away.&lt;/p&gt;

&lt;p&gt;You don't have to rely on a complex build system, bundlers, or other tooling to ship your Javascript to users anymore.&lt;/p&gt;

&lt;p&gt;Browsers have support to import Javascript modules directly. You don't have to template your components in JSX and add all the baggage and complexity of a build tool - you can use Javascript &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;tagged template literal syntax&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If don't want to pull in the complexity of a large framework like React or Angular, but still want to build applications with components, &lt;a href="https://docs.ficusjs.org"&gt;FicusJS&lt;/a&gt; is for you!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.ficusjs.org"&gt;FicusJS&lt;/a&gt; is a set of lightweight functions for developing web applications. It is focused on creating web components, managing application state plus a pub/sub event bus.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-web-components"&gt;
  &lt;/a&gt;
  What are web components?
&lt;/h2&gt;

&lt;p&gt;Web components are a set of browser APIs that allow you to create new custom, reusable, encapsulated HTML tags for use in web applications.&lt;br&gt;
Web Components work across modern browsers and can be used with any JavaScript library or framework that works with HTML.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#go-buildless"&gt;
  &lt;/a&gt;
  Go build-less
&lt;/h2&gt;

&lt;p&gt;Browsers have improved a lot over the past years. It's now possible to do web development without requiring any build tools, using the native module loader of the browser. We think this is a great fit for &lt;a href="https://docs.ficusjs.org"&gt;FicusJS&lt;/a&gt;, and we recommend this as a general starting point.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#aligns-with-standards"&gt;
  &lt;/a&gt;
  Aligns with standards
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.ficusjs.org"&gt;FicusJS&lt;/a&gt; aligns with standard browser APIs which means it is not based on any proprietary code or libraries.&lt;/p&gt;

&lt;p&gt;As it is based on standards, it has longevity and is a good choice for enterprise web applications.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#try-it-out"&gt;
  &lt;/a&gt;
  Try it out
&lt;/h2&gt;

&lt;p&gt;The easiest way to try out &lt;a href="https://docs.ficusjs.org"&gt;FicusJS&lt;/a&gt; is using a hello world example.&lt;/p&gt;

&lt;p&gt;Create an &lt;code&gt;index.html&lt;/code&gt; file and copy the following between the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;hello-world&amp;gt;&amp;lt;/hello-world&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://cdn.skypack.dev/@ficusjs/renderers/lit-html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://cdn.skypack.dev/ficusjs@3/component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;createComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello-world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello to you!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;div&amp;gt;
&amp;lt;p&amp;gt;Test component&amp;lt;/p&amp;gt;
&amp;lt;button type="button" @click="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;Click me!&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Alternatively, fork this Codepen to see it in action - &lt;a href="https://codepen.io/ducksoupdev/pen/GRZPqJO"&gt;https://codepen.io/ducksoupdev/pen/GRZPqJO&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The hello world example creates a new &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements"&gt;custom element&lt;/a&gt;&lt;br&gt;
using the &lt;code&gt;createComponent&lt;/code&gt; function and registers it to the &lt;code&gt;hello-world&lt;/code&gt; tag. It uses the &lt;a href="https://www.npmjs.com/package/lit-html"&gt;lit-html&lt;/a&gt; renderer (&lt;a href="https://github.com/ficusjs/ficusjs-renderers"&gt;multiple renderers are available&lt;/a&gt;) for creating HTML from &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;tagged template literals&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once registered, the tag can be used multiple times in HTML and instances can be programmatically obtained using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector"&gt;&lt;code&gt;document.querySelector&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
or &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector"&gt;&lt;code&gt;element.querySelector&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Using pysimilar to compute similarity between texts</title>
      <author>Jordan Kalebu</author>
      <pubDate>Wed, 07 Apr 2021 19:48:42 +0000</pubDate>
      <link>https://dev.to/kalebu/using-pysimilar-to-compute-similarity-between-texts-290g</link>
      <guid>https://dev.to/kalebu/using-pysimilar-to-compute-similarity-between-texts-290g</guid>
      <description>&lt;p&gt;Hi guys , &lt;br&gt;
I recently wrote an article titled &lt;a href="https://kalebujordan.dev/how-to-detect-plagiarism-in-text-using-python/"&gt;How to detect plagiarism in text using python&lt;/a&gt; where by I shown how you can easily detect the plagiarism between documents as title says manually using cosine similarity.&lt;/p&gt;

&lt;p&gt;I republished that article on multiple platform including here on &lt;strong&gt;dev.to&lt;/strong&gt; and &lt;strong&gt;Hackernoon&lt;/strong&gt;, and its one of my most viewed article plus most starred GitHub repository among articles repositories.&lt;/p&gt;

&lt;p&gt;Which gave me a second thought to refactor the code/article to make it more easily and friendly to get started with even for absolutely beginners leading me to build a python library &lt;strong&gt;pysimilar&lt;/strong&gt; which I can say simplify it to the maximum;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-started-with-pysimilar"&gt;
  &lt;/a&gt;
  Getting started with Pysimilar
&lt;/h2&gt;

&lt;p&gt;To get started with pysimilar for comparing text documents, you just need to install first of which you can either install directly from github or using pip.&lt;/p&gt;

&lt;p&gt;Here how to install pysimilar using pip&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;pysimilar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here how to install directly from github&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/Kalebu/pysimilar
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;pysimilar
&lt;span class="nv"&gt;$ &lt;/span&gt;pysimilar -&amp;gt; python setup.py &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With Pysimilar you can either compare text documents  as strings or specify the path to the file containing the textual documents.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#comparing-strings-directly"&gt;
  &lt;/a&gt;
  Comparing strings directly
&lt;/h3&gt;

&lt;p&gt;You can easily compare strings using pysimilar using &lt;em&gt;compare()&lt;/em&gt; method just as illustrated below;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pysimilar&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;compare&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'very light indeed'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'how fast is light'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;0.17077611319011649&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#comparing-strings-contained-files"&gt;
  &lt;/a&gt;
  Comparing strings contained files
&lt;/h3&gt;

&lt;p&gt;To compare strings contained in the files, you just need to explicit specify the &lt;strong&gt;isfile&lt;/strong&gt; parameter to True just as illustrated below;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'README.md'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'LICENSE'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;0.25545580376557886&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Well that's all for this article &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Kalebu"&gt;
        Kalebu
      &lt;/a&gt; / &lt;a href="https://github.com/Kalebu/pysimilar"&gt;
        pysimilar
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A python library for computing the similarity between two string(text) based on cosine similarity
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
pysimilar&lt;/h1&gt;
&lt;p&gt;A python library for computing the similarity between two string(text) based on cosine similarity made by &lt;a href="https://github.com/Kalebu"&gt;kalebu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/kalebuj" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3ba8042b343d12b84b85d2e6563376af4150f9cd09e72428349c1656083c8b5a/68747470733a2f2f63646e2e6275796d6561636f666665652e636f6d2f627574746f6e732f64656661756c742d6f72616e67652e706e67" alt="Buy Me A Coffee" height="41" width="174"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
How does it work ?&lt;/h2&gt;
&lt;p&gt;It uses Tfidf Vectorizer to transform the text into vectors and then obtained vectors are converted into arrays of numbers and then finally cosine similary computation is employed resulting to output indicating how similar they are.&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;You can either install it directly from &lt;em&gt;Github&lt;/em&gt; or use &lt;em&gt;pip&lt;/em&gt; to install it, here is how you to install it directly from github;&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;$  git clone https://github.com/Kalebu/pysimilar
$  &lt;span class="pl-c1"&gt;cd&lt;/span&gt; pysimilar
$ pysimilar -&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; python setup.py install
&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Installation with pip&lt;/h2&gt;
&lt;div class="highlight highlight-source-python js-code-highlight"&gt;
&lt;pre&gt;$ &lt;span class="pl-s1"&gt;pip&lt;/span&gt; &lt;span class="pl-s1"&gt;install&lt;/span&gt; &lt;span class="pl-s1"&gt;pysimilar&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Example of usage&lt;/h2&gt;
&lt;p&gt;Pysimilar allows you to either specify the string you want to compare directly or specify path to files containing string you want to compare.&lt;/p&gt;
&lt;p&gt;Here an example on how to compare strings directly;&lt;/p&gt;
&lt;div class="highlight highlight-source-python js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c1"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s1"&gt;pysimilar&lt;/span&gt; &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s1"&gt;compare&lt;/span&gt;
&lt;span class="pl-c1"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;compare&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Kalebu/pysimilar"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>python</category>
      <category>nlp</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>git stash - Store your uncommitted changes aside to work on it later</title>
      <author>Raunaq </author>
      <pubDate>Wed, 07 Apr 2021 19:47:38 +0000</pubDate>
      <link>https://dev.to/raunaqchawhan/git-stash-store-your-uncommitted-changes-aside-to-work-on-it-later-5713</link>
      <guid>https://dev.to/raunaqchawhan/git-stash-store-your-uncommitted-changes-aside-to-work-on-it-later-5713</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this post, we'll be looking at the &lt;code&gt;git stash&lt;/code&gt; command and its usage. We come across situations in our development work where we are in the middle of a task with quite a good amount of code changes and have to switch to some other task that has come on priority. Now, if the changes are somewhat complete then we can commit it and start with the other task but what if those changes are unfinished and far away from a meaningful commit, in that case instead of committing it we can make use of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;git stash&lt;/code&gt; stores the uncommitted changes that we've made on our current branch away to be used at a later point in time and we are left with the code that was present before those changes. This allows us to work on our other task and get back to the stashed one later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-stash"&gt;
  &lt;/a&gt;
  git stash
&lt;/h2&gt;

&lt;p&gt;Suppose we have a demo project and we've modified some files in it&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--whqUcfeI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617450893454/zx24SE4It.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--whqUcfeI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617450893454/zx24SE4It.png" alt="screenshot 1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we can see from the above screenshot that we have modified two files and now we'll use &lt;code&gt;git stash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FwkAd5fP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617451546655/-Bgeev86A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FwkAd5fP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617451546655/-Bgeev86A.png" alt="git stash.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After performing &lt;code&gt;git stash&lt;/code&gt;, the changes get stashed and when we use &lt;code&gt;git status&lt;/code&gt;, it shows that there is nothing to commit. Now, we can work on any other changes, switch branches and perform different operations and once we are done, we can re-apply the stash and continue working on it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reapplying-the-stashed-changes"&gt;
  &lt;/a&gt;
  Re-applying the stashed changes
&lt;/h2&gt;

&lt;p&gt;We can use the following command to re-apply the stashed changes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash pop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UrTp1pLy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617455223016/Zn2AcG1_g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UrTp1pLy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617455223016/Zn2AcG1_g.png" alt="git stash pop.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We see that the above command pops out our stashed changes and applies them to the current branch. After the changes are applied, it gets removed from the stash.&lt;/p&gt;

&lt;p&gt;If we don't want our changes to be removed from the stash after applying it on the branch, we can use the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash apply
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command can be used to apply the same changes on multiple branches.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multiple-stashes"&gt;
  &lt;/a&gt;
  Multiple stashes
&lt;/h2&gt;

&lt;p&gt;We are not limited to a single stash and can use the &lt;code&gt;git stash&lt;/code&gt; command multiple times to create as many stash as required. We can then use the following command to view our stashes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Suppose, we've created few stashes by running the &lt;code&gt;git stash&lt;/code&gt; command multiple times&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w7QLUowA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617466048079/avUWgD8RK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w7QLUowA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617466048079/avUWgD8RK.png" alt="git stash list.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We see that this command list out all the stashes that we've created and the stashes are identified as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stash@{n}: WIP(work in progress) on (branch on which stash is created): (commit from which the stash is created)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Identifying which stash contains what change becomes difficult as the message does not provide any context related to the change that it holds. Therefore, instead of using only &lt;code&gt;git stash&lt;/code&gt; we can use the following command that adds a description to the stash&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash save "description to give you an idea about your change"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XmGODtUU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617468260159/31RNXLGRL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XmGODtUU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617468260159/31RNXLGRL.png" alt="git stash save.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git stash pop&lt;/code&gt; and &lt;code&gt;git stash apply&lt;/code&gt; re-applies the most recently created stash which is &lt;code&gt;stash@{0}&lt;/code&gt;. If we want to re-apply the changes from a different stash, we should pass its identifier as the last argument to the respective commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash pop stash@{3}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash apply stash@{3}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#stash-untracked-and-ignored-files"&gt;
  &lt;/a&gt;
  Stash untracked and ignored files
&lt;/h2&gt;

&lt;p&gt;By default, &lt;code&gt;git stash&lt;/code&gt; stores the staged and unstaged changes only. It will not store the new files added to the directory that has not been staged yet and also the files that have been ignored.&lt;/p&gt;

&lt;p&gt;If we also want to stash the new files, we can use the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash save "description" -u
OR
git stash save "description" --include-untracked
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the following command will stash all the files including the ignored ones&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash save "description" -a
OR
git stash save "description" --all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#view-the-changes-recorded-in-a-stash"&gt;
  &lt;/a&gt;
  View the changes recorded in a stash
&lt;/h2&gt;

&lt;p&gt;We can use the following command to view the changes recorded in a particular stash as a diff between the stashed contents and the commit back when the stash was first created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash show -p stash@{n}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#stash-specific-files"&gt;
  &lt;/a&gt;
  Stash specific files
&lt;/h2&gt;

&lt;p&gt;We can make use of the &lt;code&gt;--patch&lt;/code&gt; flag while running the &lt;code&gt;git stash&lt;/code&gt; command that instructs Git not to stash everything that is modified instead it will iterate through all the changes and ask whether we want to stash it or not&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash save "description" -p
OR
git stash save "description" --patch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-a-branch-from-the-stash"&gt;
  &lt;/a&gt;
  Create a branch from the stash
&lt;/h2&gt;

&lt;p&gt;Suppose we stashed some changes from a branch and continue to work on that particular branch and later try to re-apply those stashed changes, it might happen that the stashed changes try to modify a file which has already been modified and it results in a merge conflict. In that case we'll have to resolve the conflict or what we can do is use the following command that creates a new branch and checks out the commit we were on when the stash was created and reapply the stashed changes and removes the stash if it gets applied successfully.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash branch branch_name stash@{n}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fTdOBoZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617551747074/pAjGpw9N7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fTdOBoZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617551747074/pAjGpw9N7.png" alt="git stash branch.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cleaning-the-stash"&gt;
  &lt;/a&gt;
  Cleaning the stash
&lt;/h2&gt;

&lt;p&gt;So far we've seen how to create a stash and re-apply those changes back, now we'll be looking at the commands that will allow us to delete the stash. If we want to delete a particular stash, we can use the following command to delete it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash drop stash@{n}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--49gNRSTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617552551576/tFjMvyNSs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--49gNRSTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617552551576/tFjMvyNSs.png" alt="git stash drop.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case we want to delete all the stashes, it can be done using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git stash clear
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this post, we learned about the &lt;code&gt;git stash&lt;/code&gt; command that lets us store our uncommitted changes that are not ready enough to be committed. We learned how to stash our work and also re-apply the changes back.&lt;/p&gt;

&lt;p&gt;By default, the stash command only stores the staged and unstaged changes so we learned how to stash the untracked and ignored files as well.&lt;br&gt;
We learned the command to view the changes stored in a stash and also stash specific files. Lastly, we created a branch from the stash and also deleted the created stashes.&lt;/p&gt;




&lt;p&gt;Thanks for taking the time to read this post. I hope this post helped you in learning something and if you enjoyed it, please share.&lt;/p&gt;

&lt;p&gt;It would be great to connect with you on &lt;a href="https://twitter.com/_raunaq_"&gt;Twitter&lt;/a&gt;. Please do share your valuable feedback and suggestions👋&lt;/p&gt;

</description>
      <category>git</category>
      <category>programming</category>
    </item>
    <item>
      <title>Verify matching parens, brackets and braces with Elixir</title>
      <author>Lucas Perez</author>
      <pubDate>Wed, 07 Apr 2021 19:44:56 +0000</pubDate>
      <link>https://dev.to/lucassperez/verify-matching-parens-brackets-and-braces-with-elixir-dh5</link>
      <guid>https://dev.to/lucassperez/verify-matching-parens-brackets-and-braces-with-elixir-dh5</guid>
      <description>&lt;p&gt;So I've started to study the Elixir language and decided to solve some coding exercise with it in order to better understand some concepts.&lt;br&gt;
Since I liked my solution, I decided to make a post explaining the thought process behind it. Suggestions to further improve the code or to better follow Elixir's conventions are more than appreciated! (:&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;I want to make a function that receives a string as input, supposedly a mathematical expression or some code snippet, and tells me whether all of it's opening parenthesis/brackets/braces have a correct closing match.&lt;br&gt;
Some expressions as examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 * 2 (3 + [4 / 5])
# should return true
9 / [(8 + 7] - 6)
# should return false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#make-a-plan"&gt;
  &lt;/a&gt;
  Make a plan
&lt;/h2&gt;

&lt;p&gt;Before coding, I think it is a good ideia do solve the problem theoretically, and then try to implement it.&lt;br&gt;
For this exercise, I believe using the &lt;a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"&gt;stack&lt;/a&gt; idea is a very good approach. Basically, a stack is a set of items that have two operations: &lt;strong&gt;push&lt;/strong&gt; and &lt;strong&gt;pop&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The push operation will put a new item in the set&lt;/li&gt;
&lt;li&gt;The pop operation will remove the last pushed item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the stack follows the "Last In, First Out" dynamic. When I put an item in the stack, this item will be the first one to get out when I start removing them.&lt;/p&gt;

&lt;p&gt;How can we use a stack here? Well, my theoretical solution would be to iterate over all the characters in the input string, and if:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is an opening char (parens/brackets/braces), put it in a stack&lt;/li&gt;
&lt;li&gt;It is a closing char, check the last item in the stack: If it matches, we &lt;em&gt;pop&lt;/em&gt; it and continue the recursion. If it doesn't, the input string is not valid&lt;/li&gt;
&lt;li&gt;If it is something else, ignore&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the whole input string is iterated and I never found an error, this means that all closers had a matching opener, but it doesn't necessarily means the string is valid. This input is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 + (2 * [3]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the closers had a matching opener, but not all the openers were closed. This means that if we survive the iteration, we also have to check if our final stack is &lt;em&gt;empty&lt;/em&gt;. If it is, all openers were closed, and the input was valid. If it is not, the input was not valid.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-implementation"&gt;
  &lt;/a&gt;
  The Implementation
&lt;/h2&gt;

&lt;p&gt;Good, we have a plan, so now we have to translate it into Elixir.&lt;br&gt;
For starters, I'm creating a module &lt;code&gt;Parens&lt;/code&gt; with a function &lt;code&gt;check&lt;/code&gt; that will receive as input a string.&lt;br&gt;
This function &lt;code&gt;check&lt;/code&gt; will have to iterate over the string, so we can use the &lt;code&gt;String&lt;/code&gt; module's &lt;code&gt;split/2&lt;/code&gt; function. So we have our first piece of code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defmodule Parens &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; check&lt;span class="p"&gt;(&lt;/span&gt;expression&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    expression
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; String&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm using the pipe operator &lt;code&gt;|&amp;gt;&lt;/code&gt; here, meaning that whatever comes before it, is going to be the first argument of whatever comes after it. In this case, &lt;code&gt;expression&lt;/code&gt; is going to be the first argument of &lt;code&gt;String.split&lt;/code&gt;.&lt;br&gt;
The second argument is an empty string so we can split the expression at every character. The result of this is a list, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"a + b * (c / d)" |&amp;gt; String.split("")
# ["", "a", " ", "+", " ", "b", " ", "*", " ", "(", "c", " ", "/", " ", "d", ")", ""]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On our theoretical solution, every character but openers/closers were to be ignored, so we can apply a &lt;strong&gt;filter&lt;/strong&gt; in this resulting list. To do that, we can use &lt;code&gt;Enum.filter/2&lt;/code&gt;, which receives two arguments.&lt;br&gt;
The first one is something that "is enumerable", which means that this something must implement the Enum protocol.&lt;br&gt;
Luckly, lists do that, so we can pass our resulting list as the first argument to our filter.&lt;br&gt;
The second argument is a &lt;em&gt;function&lt;/em&gt; that receives an element of our list and then decide if it or shouldn't be in the filtered result. More precisely, if this &lt;em&gt;function&lt;/em&gt; returns a falsy value (&lt;code&gt;false&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;), then the element will not be in the resulting filtered list. If it returns a truthy value (anything else), it is going to be in the filtered result.&lt;br&gt;
In our case, this function will verify if each element of our list is a parens/brackets/braces and keep it if it is, removing it otherwise. One way to do that is like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;fn &lt;span class="k"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;x&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This anonymous function will receive something (&lt;em&gt;x&lt;/em&gt;) and see if it belongs to that list, which happens to be a list with only our parens/brackets/braces.&lt;br&gt;
We could also use the capture notation, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&amp;amp;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The capture notation is similar, but instead of declaring &lt;em&gt;x&lt;/em&gt;, we just use &amp;amp;1, &amp;amp;2, &amp;amp;3... for all of our arguments.&lt;/p&gt;

&lt;p&gt;Good, so our code right now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defmodule Parens &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; check&lt;span class="p"&gt;(&lt;/span&gt;expression&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    expression
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; String&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; Enum&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to iterate over our resulting list and use our "stack strategy". To do that, I decided to create a &lt;strong&gt;private function&lt;/strong&gt; called &lt;code&gt;iterate&lt;/code&gt;, where I'll recursively walk over our elements, passing the stack around, until we checked all of our elements. Since I'll need the stack, this function will have an arity of 2, which means it will have 2 arguments.&lt;br&gt;
The first thing I do when I'm thinking about recursion it to write the stop condition. In this case, it should stop once our list of characters is empty. I'll make use of the wonderful &lt;strong&gt;pattern matching&lt;/strong&gt; functionality to do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;defp iterate([], stack), do: stack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means that this function will only execute when the first element is an empty list and the second element is whatever it arrives here.&lt;br&gt;
In this case, this function will do nothing and just return the stack, so we can later verify if it is empty or not.&lt;/p&gt;

&lt;p&gt;A very important thing to note here is that we also have to pass a &lt;code&gt;stack&lt;/code&gt; when we first call the iterate function. Our stack will start empty, so our pipeline will be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; check&lt;span class="p"&gt;(&lt;/span&gt;expression&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  expression
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; String&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; Enum&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; iterate&lt;span class="p"&gt;([])&lt;/span&gt;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: We could also use a default value, but I'll keep it like this.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now the hard part. After writing a stop condition to our recursion, we have to write the recursive step (or steps).&lt;/p&gt;

&lt;p&gt;Let's check our plan again. We have to look at each element, and if it is an opener, we put it in the stack and go on. Let's do this part first.&lt;/p&gt;

&lt;p&gt;I love pattern matching, so I'll be using it here again. And to further help us, I'll also use &lt;strong&gt;guards&lt;/strong&gt; to decide if the function will be executed or not:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function will only be executed if the variable &lt;code&gt;head&lt;/code&gt; belongs to that list of openers. But where is this variable coming from?&lt;br&gt;
We are pattern matching the first argument with &lt;code&gt;[head | tail]&lt;/code&gt;, so this function will need for the first argument to be a list with a first element. This first element will be bound to &lt;code&gt;head&lt;/code&gt;. The rest of the list will be bound to &lt;code&gt;tail&lt;/code&gt;. If you are in doubt, open the interactive elixir shell in your terminal (write iex and press enter) and try this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
head
#&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
tail
#&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;head2 &lt;span class="p"&gt;|&lt;/span&gt; tail2&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
head2
#&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
tail2
#&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;head3 &lt;span class="p"&gt;|&lt;/span&gt; tail3&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
# Will raise &lt;span class="k"&gt;a&lt;/span&gt; matching error&lt;span class="p"&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The head and tail are important concepts. The head is the first element of a list, and the tail &lt;strong&gt;is the list itself&lt;/strong&gt;, but &lt;strong&gt;without the first element&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Okay, back to our function. What will it do if the character is an opener? It should push it to the stack and continue iterating. We can do that simply by calling &lt;code&gt;iterate&lt;/code&gt; again with the right arguments.&lt;br&gt;
Since we already checked the first element, we can pass the list without the first element. That is precisely what &lt;code&gt;tail&lt;/code&gt; is! Good, but how can we &lt;strong&gt;push&lt;/strong&gt; the element to the stack?&lt;br&gt;
Elixir offers a good way to put an item in a list, and it is simply like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;new_element &lt;span class="p"&gt;|&lt;/span&gt; stack&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a list which its head is &lt;code&gt;new_element&lt;/code&gt;, and its tail is the &lt;code&gt;stack&lt;/code&gt;. You can always go to iex and make some experiments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
#&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So our function looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; iterate&lt;span class="p"&gt;(&lt;/span&gt;tail&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; stack&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When it is an opener, we simply call iterate with &lt;code&gt;tail&lt;/code&gt; and pass the stack with a newly pushed &lt;code&gt;head&lt;/code&gt; item.&lt;/p&gt;

&lt;p&gt;Good! Now that we have this part done, let's check the plan again.&lt;/p&gt;

&lt;p&gt;We already know how to stop the recursion;&lt;br&gt;
We already took care of the "ignore if not opener/closer" issue;&lt;br&gt;
We already know how to push an opener to the stack and continue;&lt;/p&gt;

&lt;p&gt;We now have to do something when the element is a "closer". When that happens, the idea was to look at the last added item of our stack, which happens to be the head of &lt;code&gt;stack&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This part of the code was heavily refactored, but I'll tell how I did it first time. For each possible closer, which are &lt;code&gt;}&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt;, I made its single pattern matched function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defp iterate&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"}"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt;
defp iterate&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"]"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt;
defp iterate&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;")"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for each one of those, I made a simple if/else statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defp iterate&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"}"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; hd&lt;span class="p"&gt;(&lt;/span&gt;stack&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"{"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    iterate&lt;span class="p"&gt;(&lt;/span&gt;tail&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;tl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;stack&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    false
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First of all, I used the functions &lt;code&gt;hd&lt;/code&gt; and &lt;code&gt;tl&lt;/code&gt;, which returns the &lt;strong&gt;head&lt;/strong&gt; and the &lt;strong&gt;tail&lt;/strong&gt; of a list, respectively. It would be the same as this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defp iterate&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"}"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;stack_head &lt;span class="p"&gt;|&lt;/span&gt; stack_tail&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; stack_head &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"{"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    iterate&lt;span class="p"&gt;(&lt;/span&gt;tail&lt;span class="p"&gt;,&lt;/span&gt; stack_tail&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    false
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, since this function will only execute if the element is exactly &lt;code&gt;}&lt;/code&gt;, I'm verifying if the last added item in the stack (its head) is &lt;code&gt;{&lt;/code&gt;, which would be a match.&lt;br&gt;
If it is, we have to pop it. The "popped" version of the stack is simply its tail, so that's why we don't pass the stack to the next iteration, but rather the &lt;code&gt;stack_tail&lt;/code&gt;.&lt;br&gt;
If it doesn't match, we know that the input string is not valid, so I'm returning a &lt;code&gt;false&lt;/code&gt; here.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;else&lt;/code&gt; part is not really needed, because if the condition to go inside the "if" parte is not true, this would return &lt;code&gt;nil&lt;/code&gt;, but I'll keep it with this &lt;code&gt;else&lt;/code&gt; for now. We can refactor later.&lt;/p&gt;

&lt;p&gt;This looks like a valid "alpha version" of our &lt;code&gt;iterate&lt;/code&gt; function. What is missing is verifying if the stack is empty or not after the stop condition. A way to do that is to add a comparison with &lt;code&gt;[]&lt;/code&gt; in the stop condition or in the pipeline  of our &lt;code&gt;check&lt;/code&gt; function. I'll show the latter first because I can talk briefly about the &lt;code&gt;Kernel&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Kernel&lt;/code&gt; module has all the functions we can use "natively", without calling a module. So if you want so sum two integers, you can do both:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
#&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
Kernel&lt;span class="p"&gt;.+(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
#&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;==&lt;/code&gt; comparison is also part of the &lt;code&gt;Kernel&lt;/code&gt; module, so we can do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; check&lt;span class="p"&gt;(&lt;/span&gt;expression&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    expression
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; String&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; Enum&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; iterate&lt;span class="p"&gt;([])&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; Kernel&lt;span class="p"&gt;.==([])&lt;/span&gt;
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will take whatever returns from the &lt;code&gt;iterate&lt;/code&gt; call and use it as the first argument of &lt;code&gt;Kernel.==&lt;/code&gt;. The second argument is &lt;code&gt;[]&lt;/code&gt;, so we are going to return the comparison of the result of &lt;code&gt;iterate&lt;/code&gt; with &lt;code&gt;[]&lt;/code&gt;.&lt;br&gt;
If the input is invalid, the &lt;code&gt;iterate&lt;/code&gt; may return &lt;code&gt;false&lt;/code&gt;, and then the comparison with &lt;code&gt;[]&lt;/code&gt; will also be false.&lt;br&gt;
Another possibility is that the &lt;code&gt;iterate&lt;/code&gt; will return a not empty stack. Then, the comparison with &lt;code&gt;[]&lt;/code&gt; will be false as well.&lt;br&gt;
This actually solves it, but for me it is really ugly.&lt;/p&gt;

&lt;p&gt;For starters, sometimes &lt;code&gt;iterate&lt;/code&gt; returns a boolean, and sometimes it returns a list, which could be empty or not.&lt;br&gt;
Now that I wrote about &lt;code&gt;Kernel&lt;/code&gt; a little bit, I think we should not use it in this case (:&lt;br&gt;
To avoid it, we can put this comparison in our stop condition, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defp iterate&lt;span class="p"&gt;([],&lt;/span&gt; stack&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; stack &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another way is to pattern match the second argument as well!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defp iterate&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="p"&gt;[]),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; true
defp iterate&lt;span class="p"&gt;([],&lt;/span&gt; _stack&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the first argument is an empty list and the second agument is also an empty list, we return &lt;code&gt;true&lt;/code&gt;.&lt;br&gt;
If the first argument is an empty list and the second argument is anything (the _ denotes that this variable will not be used), we return false.&lt;br&gt;
&lt;em&gt;Note: We could simply use _ instead of _stack, but I think it is nice to put some name to it in the name of readability, since it is not obvious what the second argument could be&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#okay-so-this-apparently-works-right"&gt;
  &lt;/a&gt;
  Okay, so this apparently works, right?
&lt;/h4&gt;

&lt;p&gt;If we try to run our code now, we are going to sometimes get an error!&lt;br&gt;
To test it, we can use our module inside iex. To do that, save the code in a file, for example, &lt;code&gt;parens.ex&lt;/code&gt;. Now, run &lt;code&gt;iex parens.ex&lt;/code&gt;. You'll be able to use the &lt;code&gt;Parens&lt;/code&gt; module we just created inside iex!&lt;br&gt;
If you try to check a string where a closer would be found before any opener, the code would try to get the head of an empty stack, which raises an error. You can verify it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;Parens&lt;span class="p"&gt;.&lt;/span&gt;check&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"a}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
#&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; Raises error&lt;span class="p"&gt;!&lt;/span&gt;

Parens&lt;span class="p"&gt;.&lt;/span&gt;check&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"(a}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
#&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can fix this by checking if the stack is empty before trying to get its head.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#or"&gt;
  &lt;/a&gt;
  &lt;em&gt;Or...&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;We could simply pattern match the second argument to empty list when we have a closer, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; _&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The guard will ensure that &lt;code&gt;head&lt;/code&gt; is a closer, and when the stack is an empty list, we just return &lt;code&gt;false&lt;/code&gt; before trying to get the head of an empty list (which raises an error).&lt;/p&gt;

&lt;p&gt;The first version of our solution could then be this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defmodule Parens &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; check&lt;span class="p"&gt;(&lt;/span&gt;expression&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    expression
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; String&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; Enum&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; iterate&lt;span class="p"&gt;([])&lt;/span&gt;
  end

  defp iterate&lt;span class="p"&gt;([],&lt;/span&gt; stack&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; stack &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

  defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; iterate&lt;span class="p"&gt;(&lt;/span&gt;tail&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; stack&lt;span class="p"&gt;])&lt;/span&gt;

  defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; _&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; false

  defp iterate&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"}"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; hd&lt;span class="p"&gt;(&lt;/span&gt;stack&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"{"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      iterate&lt;span class="p"&gt;(&lt;/span&gt;tail&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;tl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;stack&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
     false
    end
  end

  defp iterate&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"]"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; hd&lt;span class="p"&gt;(&lt;/span&gt;stack&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      iterate&lt;span class="p"&gt;(&lt;/span&gt;tail&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;tl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;stack&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
     false
    end
  end

  defp iterate&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;")"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; hd&lt;span class="p"&gt;(&lt;/span&gt;stack&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      iterate&lt;span class="p"&gt;(&lt;/span&gt;tail&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;tl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;stack&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
     false
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Nice!&lt;/strong&gt; So now our code actually works!&lt;br&gt;
But it doesn't really give me good vibes...&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#refactor"&gt;
  &lt;/a&gt;
  Refactor!
&lt;/h2&gt;

&lt;p&gt;First, we are using lists like &lt;code&gt;["{", "[", "("]&lt;/code&gt;, &lt;code&gt;["{", "[", "("]&lt;/code&gt; and &lt;code&gt;["{", "[", "(", "}", "]", ")"]&lt;/code&gt;, which could be extracted to &lt;strong&gt;module attributes&lt;/strong&gt;.&lt;br&gt;
Module attributes are values that can be used by any method in a module. To define them, we can write &lt;code&gt;@attribute_name&lt;/code&gt; and then its value. We can do it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defmodule Parens &lt;span class="k"&gt;do&lt;/span&gt;
  @opener &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  @closer &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a nice little addition, so now we can rewrite our guards and filter like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;Enum&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
Enum&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; @opener &lt;span class="p"&gt;||&lt;/span&gt; &amp;amp;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; @closer&lt;span class="p"&gt;))&lt;/span&gt;

defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; @opener&lt;span class="p"&gt;,&lt;/span&gt;

defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; _&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; false
defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; _&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; @closer&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we still have 3 big functions that are basically the same, which are the ones that decide what to do when the element we are checking is a closer character.&lt;br&gt;
I'll write what I did and then explain it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defmodule Parens &lt;span class="k"&gt;do&lt;/span&gt;
  @pairs %&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;stack_head &lt;span class="p"&gt;|&lt;/span&gt; stack_tail&lt;span class="p"&gt;])&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; @closer&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; @pairs&lt;span class="p"&gt;[&lt;/span&gt;stack_head&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; head &amp;amp;&amp;amp; iterate&lt;span class="p"&gt;(&lt;/span&gt;tail&lt;span class="p"&gt;,&lt;/span&gt; stack_tail&lt;span class="p"&gt;)&lt;/span&gt;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So first, I created a &lt;code&gt;@pairs&lt;/code&gt; module attribute which is a &lt;strong&gt;map&lt;/strong&gt;. Each key of the map is an opener character and it maps to a closer character (maps are like hashes and dictionaries, if you are coming from ruby or python).&lt;br&gt;
Then, I made a &lt;code&gt;iterate/2&lt;/code&gt; function that has a guard. This guard will ensure that &lt;code&gt;head&lt;/code&gt; variable (the first element of our list) is a closer (so it is one of &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt; or &lt;code&gt;}&lt;/code&gt;).&lt;br&gt;
I also used a &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; boolean operation here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;@pairs&lt;span class="p"&gt;[&lt;/span&gt;stack_head&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; head &amp;amp;&amp;amp; iterate&lt;span class="p"&gt;(&lt;/span&gt;tail&lt;span class="p"&gt;,&lt;/span&gt; stack_tail&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the left side is a &lt;strong&gt;falsy&lt;/strong&gt; value, then this value is returned and the right side is not executed (which stops our recursion).&lt;br&gt;
If the left side is &lt;strong&gt;truthy&lt;/strong&gt;, then whatever is at the right side is returned. In this case, the right side is a function call, continuing the recursion.&lt;/p&gt;

&lt;p&gt;Now I'll look at &lt;code&gt;@pairs[stack_head]&lt;/code&gt;. Remember that &lt;code&gt;@pairs&lt;/code&gt; is a map, so &lt;code&gt;@pairs["{"]&lt;/code&gt;, for example, returns &lt;code&gt;"}"&lt;/code&gt;.&lt;br&gt;
If whatever is the head of our stack is an opener, then it maps to some closer (&lt;code&gt;@pairs[stack_head]&lt;/code&gt;, then, is some closer). If this closer equals to &lt;code&gt;head&lt;/code&gt; (the element we are checking itself), then the comparison returns &lt;code&gt;true&lt;/code&gt;, which will then return the right side of the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, continuing our recursion!&lt;br&gt;
If not, then the comparison will return &lt;code&gt;false&lt;/code&gt;, and not execute the right side of the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.&lt;br&gt;
So this is enough to check if the parens are matching and stop the recursion otherwise.&lt;/p&gt;

&lt;p&gt;So our second version of the program is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;defmodule Parens &lt;span class="k"&gt;do&lt;/span&gt;
  @pairs %&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  @opener &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"{"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  @closer &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; check&lt;span class="p"&gt;(&lt;/span&gt;expression&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    expression
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; String&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; Enum&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="p"&gt;(&lt;/span&gt;&amp;amp;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; @opener &lt;span class="p"&gt;||&lt;/span&gt; &amp;amp;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; @closer&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; iterate&lt;span class="p"&gt;([])&lt;/span&gt;
  end

  defp iterate&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="p"&gt;[]),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; true
  defp iterate&lt;span class="p"&gt;([],&lt;/span&gt; _stack&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; false

  defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; stack&lt;span class="p"&gt;)&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; @opener&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; iterate&lt;span class="p"&gt;(&lt;/span&gt;tail&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; stack&lt;span class="p"&gt;])&lt;/span&gt;

  defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; _&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; @closer&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; false

  defp iterate&lt;span class="p"&gt;([&lt;/span&gt;head &lt;span class="p"&gt;|&lt;/span&gt; tail&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;stack_head &lt;span class="p"&gt;|&lt;/span&gt; stack_tail&lt;span class="p"&gt;])&lt;/span&gt; when head &lt;span class="k"&gt;in&lt;/span&gt; @closer&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; @pairs&lt;span class="p"&gt;[&lt;/span&gt;stack_head&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; head &amp;amp;&amp;amp; iterate&lt;span class="p"&gt;(&lt;/span&gt;tail&lt;span class="p"&gt;,&lt;/span&gt; stack_tail&lt;span class="p"&gt;)&lt;/span&gt;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#thats-it-for-today"&gt;
  &lt;/a&gt;
  That's it for today
&lt;/h4&gt;

&lt;p&gt;Thanks for reading this. I'm enjoying Elixir very much. Pattern matching is quite powerful and fun.&lt;br&gt;
Please correct any mistakes I might have made (:&lt;br&gt;
I hope you learned something today, and have a good day.&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>algorithms</category>
      <category>functional</category>
    </item>
    <item>
      <title>Keep up with the times: use AWS PrivateLink</title>
      <author>Gert Leenders</author>
      <pubDate>Wed, 07 Apr 2021 19:33:19 +0000</pubDate>
      <link>https://dev.to/aws-builders/keep-up-with-the-times-use-aws-privatelink-1a38</link>
      <guid>https://dev.to/aws-builders/keep-up-with-the-times-use-aws-privatelink-1a38</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h2&gt;

&lt;p&gt;This post starts with a brief explanation of AWS PrivateLink, distilled mostly from the &lt;a href="https://d1.awsstatic.com/whitepapers/aws-privatelink.pdf"&gt;AWS PrivateLink Whitepaper&lt;/a&gt; but limited down to the very essence.&lt;/p&gt;

&lt;p&gt;The second part is a hands-on example describing how to set up a VPC Endpoint Service and a VPC Endpoint connection. It includes a CloudFormation template with all necessary resources. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-aws-privatelink"&gt;
  &lt;/a&gt;
  What is AWS PrivateLink?
&lt;/h2&gt;

&lt;p&gt;In a nutshell, AWS PrivateLink provides secure, private connectivity between Amazon VPCs, AWS services, and on-premises applications on the AWS network. As a result, you can simply and securely access services on AWS using Amazon’s private network.&lt;/p&gt;

&lt;p&gt;AWS PrivateLink allows you also to create an application in your Amazon VPC and offers that application as a VPC endpoint service. The VPC endpoint service allows others to access your service using AWS PrivateLink.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-private-link-vs-vpc-peering"&gt;
  &lt;/a&gt;
  AWS Private Link vs VPC Peering
&lt;/h2&gt;

&lt;p&gt;AWS PrivateLink is not a replacement for VPC Peering. In some use cases, VPC Peering is still the better option. On the other hand, cases where access was previously established using VPC Peering, are now better off using AWS PrivateLink.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-benefits-of-aws-privatelink"&gt;
  &lt;/a&gt;
  The benefits of AWS PrivateLink
&lt;/h3&gt;

&lt;p&gt;Compared with VPC Peering AWS PrivateLink has quite some benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;PrivateLink uses private IP addresses for traffic&lt;/strong&gt;: PrivateLink traffic does not traverse the internet. AWS PrivateLink uses private IP addresses and security groups within an Amazon VPC so that services function as though they were hosted directly within an Amazon VPC.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Security&lt;/strong&gt;: compared to VPC peering, which allows access to all resources, AWS PrivateLink only allows access to a specific service or application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PrivateLink Supports CIDR overlap&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Unidirectional access&lt;/strong&gt;: Only VPC Endpoints can initiate a connection.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Simplify Network Management&lt;/strong&gt;: AWS PrivateLink is easy to use and manage because it removes the need to whitelist public IPs and manage internet connectivity with internet gateways, NAT gateways, or firewall proxies. AWS PrivateLink allows for connectivity to services across different accounts and Amazon VPCs with no need for route table modifications. There is no longer a need to configure an internet gateway, VPC peering connection, or Transit VPC to enable connectivity.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Facilitate Your Cloud Migration&lt;/strong&gt;: AWS PrivateLink gives on-premises networks private access to AWS services via AWS Direct Connect. Customers can more easily migrate traditional on-premises applications to services hosted in the cloud and use cloud services with the confidence that traffic remains private.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#aws-privatelink-usecases"&gt;
  &lt;/a&gt;
  AWS PrivateLink use-cases
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#private-access-to-saas-applications"&gt;
  &lt;/a&gt;
  Private Access to SaaS Applications
&lt;/h3&gt;

&lt;p&gt;AWS PrivateLink enables Software-as-a-Service (SaaS) providers to build highly scalable and secure services on AWS. Using a VPC Endpoint Service, Service providers can privately expose their service to thousands of customers on AWS with ease.&lt;/p&gt;

&lt;p&gt;Previously, exposing a service using VPC Peering felt like using a sledgehammer to crack a nut. To me, it felt that way because VPC peering potentially exposes all your resources instead of limiting it to a single service. So, if you have a service you want to expose over the private AWS Network, using a VPC Endpoint Service is a no-brainer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shared-services"&gt;
  &lt;/a&gt;
  Shared Services
&lt;/h3&gt;

&lt;p&gt;Shared services like security services, logging, monitoring, DevOps tools, and authentication can be exposed as VPC Endpoint Services. Again this gives you quite some benefits compared to VPC Peering. On top of that, it could help you to overcome the VPC peering limit of 125 peering connections to a single Amazon VPC.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hybrid-services"&gt;
  &lt;/a&gt;
  Hybrid Services
&lt;/h3&gt;

&lt;p&gt;The Network Load Balancer sitting behind a VPC Endpoint Service enables the extension of a service architecture to load balance workloads across resources in AWS and on-premises resources and makes it easy to migrate-to-cloud, burst-to-cloud, or failover-to-cloud. As you complete the&lt;br&gt;
migration to the cloud, on-premises targets could be replaced by target instances in AWS.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#microservices"&gt;
  &lt;/a&gt;
  Microservices
&lt;/h3&gt;

&lt;p&gt;AWS PrivateLink VPC Endpoint Services are well suited for a microservices environment. A service consumer would then request access to the endpoint service and create an&lt;br&gt;
interface VPC endpoint associated with an endpoint service in their Amazon VPC. There isn't much more to tell, it's just a really good fit for Microservices 😄&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#deep-dive-privately-exposing-your-softwareasaservice"&gt;
  &lt;/a&gt;
  Deep Dive: Privately exposing your Software-as-a-Service
&lt;/h2&gt;

&lt;p&gt;Recently the requirement to privately expose one of our services came up. Instead of choosing VPC peering, we choose a VPC Endpoint Service to expose our service this time. Let me quickly guide you through the necessary steps to expose your service as VPC Endpoint Service.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Add a Network Load balancer&lt;/strong&gt;: The creation of a VPC Endpoint Service requires a Network Load Balancer (NLB). To fulfil this I deployed an extra NLB besides my existing Application Load Balancer (ALB). Although an extra load balancer has a slight cost overhead it also separates traffic and responsibilities. In case of troubles, this could help to pinpoint the cause, furthermore, it also limits blast radius in case a load balancer would fail.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/target-group-register-targets.html#target-security-groups"&gt;Adjust the security group of your targets&lt;/a&gt;&lt;/strong&gt;: in contrast to an ALB, an NLB does not have a security group. If you know the IP ranges of your consumers you can use those. You could also allow all &lt;a href="https://en.wikipedia.org/wiki/Private_network"&gt;private network ranges&lt;/a&gt; like I did in the CloudFormation example below.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create a VPC Endpoint Service and attach it to the NLB.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is how this looks translated into CloudFormation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;AWSTemplateFormatVersion: '2010-09-09'
Description: VPC Endpoint service stack.

Parameters:
  Application:
    Type: String
  VpcId:
    Type: AWS::EC2::VPC::Id
  PrivateSubnetIds:
    Type: List&amp;lt;AWS::EC2::Subnet::Id&amp;gt;
  HostedZoneId:
    Description: Hosted zone id
    Type: AWS::Route53::HostedZone::Id
  HostedZoneDomainName:
    Description: Hosted zone domain name
    Type: String
  LogBucketName:
    Type: String

Resources:
  EndpointServiceNetworkLoadBalancerCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub ${Application}.${HostedZoneDomainName}
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref HostedZoneDomainName
          HostedZoneId: !Ref HostedZoneId

  EndpointServiceNetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub endpointsrv-${Application}-nlb-cfn
      Type: network
      Scheme: internal
      Subnets:
        - !Select [ 0, !Ref PrivateSubnetIds ]
        - !Select [ 1, !Ref PrivateSubnetIds ]
        - !Select [ 2, !Ref PrivateSubnetIds ]
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "true"
        - Key: load_balancing.cross_zone.enabled
          Value: "true"
        - Key: access_logs.s3.enabled
          Value: "true"
        - Key: access_logs.s3.bucket
          Value: !Ref LogBucketName
        - Key: access_logs.s3.prefix
          Value: endpointservice-NLB
      Tags:
        - Key: Name
          Value: !Sub endpointsrv-${Application}-nlb-cfn

  EndpointServiceNetworkLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref EndpointServiceTargetGroup
      LoadBalancerArn: !Ref EndpointServiceNetworkLoadBalancer
      Port: 443
      Protocol: TLS
      Certificates:
        - CertificateArn: !Ref EndpointServiceNetworkLoadBalancerCert
      SslPolicy: ELBSecurityPolicy-FS-1-2-Res-2019-08

  EndpointServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub endpointsrv-${Application}-tg-cf
      Port: 80
      Protocol: TCP
      VpcId: !Ref VpcId
      HealthCheckProtocol : HTTP
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "90"
      Tags:
        - Key: Name
          Value: !Sub endpointtsrv-${Application}-tg-cf

  EndpointService:
    Type: AWS::EC2::VPCEndpointService
    Properties:
      AcceptanceRequired: True
      NetworkLoadBalancerArns:
        - !Ref EndpointServiceNetworkLoadBalancer

  EndpointServicePermissions:
    Type: AWS::EC2::VPCEndpointServicePermissions
    Properties:
      AllowedPrincipals:
        - arn:aws:iam::123456789012:root #changeme
      ServiceId: !Ref EndpointService

# Other necessary resources ##############################

  EC2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      ...
      MaxInstanceLifetime: 1209600 # 14 days
      LaunchTemplate:
        LaunchTemplateId: !Ref Ec2ServiceLaunchTemplate
        Version: !GetAtt Ec2ServiceLaunchTemplate.LatestVersionNumber
      TargetGroupARNs:
        - !Ref EndpointServiceTargetGroup
      ...

  Ec2ServiceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      ...
      LaunchTemplateData:
        MetadataOptions:
          HttpTokens: required
        SecurityGroupIds:
            - !Ref Ec2ServiceSecurityGroup

 Ec2ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Application}-sg-cfn
      GroupDescription: Enable HTTP and Endpoint Access
      SecurityGroupIngress:
        ...
        - CidrIp: 10.0.0.0/8
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
          Description: Allow traffic from the NLB (which has no security group and is a pass-through)
        - CidrIp: 172.16.0.0/12
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
          Description: Allow traffic from the NLB (which has no security group and is a pass-through)
        - CidrIp: 192.168.0.0/16
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
          Description: Allow traffic from the NLB (which has no security group and is a pass-through)
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub ${Application}-sg-cfn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#a-few-caveats"&gt;
  &lt;/a&gt;
  A few Caveats
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Tags or not supported for the CloudFormation &lt;code&gt;VPCEndpointService&lt;/code&gt; Resource. 😟&lt;/li&gt;
&lt;li&gt;To allow a VPC Endpoint connection from another account change &lt;code&gt;AllowedPrincipals&lt;/code&gt; under the &lt;code&gt;EndpointServicePermissions&lt;/code&gt; CloudFormation Resource.&lt;/li&gt;
&lt;li&gt;CloudFormation doesn't support private DNS names for an Endpoint Service. You need to add the private DNS manually in the Web Console (under VPC Endpoint Service) after the endpoint is created. &lt;strong&gt;This name must match with the Certificate Domain name attached to the NLB Listener.&lt;/strong&gt; &lt;a href="https://docs.aws.amazon.com/vpc/latest/privatelink/dns-txt-records.html"&gt;The DNS name also needs to be verified using TXT records&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;It's NOT possible to test a VPC Endpoint Service from within the same account&lt;/strong&gt;. You can only test a VPC Endpoint service by creating a VPC Endpoint connection in another account.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#create-a-vpc-endpoint-connection-to-a-vpc-endpoint-service-web-console"&gt;
  &lt;/a&gt;
  Create a VPC Endpoint Connection to a VPC Endpoint Service (Web Console)
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;In another account create a VPC Endpoint using 'Find Service by name'. Specify the Endpoint Service Name and the VPC to deploy the Endpoints.&lt;/li&gt;
&lt;li&gt;Accept the connection &lt;strong&gt;in the account hosting the VPC Endpoint service&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Back in the Customer's account, after the connection is accepted, on the VPC Endpoint choose 'Modify Private DNS names' and tick 'Enable Private DNS Name'. Ensure 'Enable DNS hostnames' and 'Enable DNS Support' are set to 'true' for the VPC.&lt;/li&gt;
&lt;li&gt;In the VPC Endpoint Service account, for a second time accept the connection under the VPC Endpoint service.
The connection is now ready and the Endpoint is reachable using the Private DNS name.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;A VPC Endpoints connection can also easily be created using CloudFormation. See the example below.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-other-useful-vpc-endpoint-connection"&gt;
  &lt;/a&gt;
  Bonus: Other useful VPC Endpoint connection
&lt;/h2&gt;

&lt;p&gt;Besides VPC Endpoint connections to custom SAAS Endpoint Services, the following VPC Endpoints are very handy or even highly recommended to have. These endpoints will prevent traffic to other AWS Services to leave the AWS private network and to go over a public network. Besides being more secure this is also more efficient.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/interface-vpc-endpoints.html"&gt;VPC Interface Endpoint for EC2&lt;/a&gt;. &lt;a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#ec2-10-remediation"&gt;Security Hub finding EC2.10&lt;/a&gt; even states you should have this configured &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/vpc-endpoints.html"&gt;VPC Interface Endpoints for ECR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/vpc/latest/privatelink/vpc-endpoints-s3.html"&gt;VPC Gateway Endpoint for S3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A CloudFormation example of an VPC Interface Endpoint for EC2:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  EC2VpcEndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub vpc-endpoint-ec2-${EnvironmentName}-sg-cfn
      GroupDescription: Allow EC2 VPC Endpoint outbound traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: !Ref VPCCidr
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
          Description: Allow traffic from within the VPC to the EC2 Endpoint

  EC2VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PrivateSubnetAZA
        - !Ref PrivateSubnetAZB
        - !Ref PrivateSubnetAZC
      PrivateDnsEnabled: True
      SecurityGroupIds:
         - !Ref EC2VpcEndpointSG
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enjoy and until next time!&lt;/p&gt;

&lt;p&gt;References: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://d1.awsstatic.com/whitepapers/aws-privatelink.pdf"&gt;Securely Access Services Over
AWS PrivateLink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/vpc/latest/privatelink/endpoint-services-overview.html"&gt;AWS PrivateLink Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>devops</category>
      <category>aws</category>
      <category>cloud</category>
      <category>architecture</category>
    </item>
  </channel>
</rss>
