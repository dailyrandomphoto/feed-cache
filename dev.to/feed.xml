<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 05 Oct 2021 17:52:14 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-1l1d</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-1l1d</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#happy-hacktoberfest"&gt;
  &lt;/a&gt;
  Happy Hacktoberfest!
&lt;/h2&gt;

&lt;p&gt;Hacktoberfest is here and this post from &lt;a class="mentioned-user" href="https://dev.to/ayushi7rawat"&gt;@ayushi7rawat&lt;/a&gt;
 is a great primer on what it's all about. We hope all participants have a blast this month! &lt;em&gt;Pro tip; We're celebrating on DEV, too! Learn how to maximize your Hacktoberfest experience in partnership with this community &lt;a href="https://dev.to/devteam/hacktoberfest-2021-is-here-4a3l"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ayushi7rawat" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NP9DC7xq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rSq1_0WY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/602187/e7a9f681-495a-4ca8-aa6e-c572f3a99f2a.jpg" alt="ayushi7rawat"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ayushi7rawat/beginner-s-guide-to-hacktoberfest-2021-24d1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Beginner's guide to Hacktoberfest 2021&lt;/h2&gt;
      &lt;h3&gt;Ayushi Rawat  ・ Sep 30 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#hacktoberfest&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#computerscience&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#mere-semantics-are-crucial"&gt;
  &lt;/a&gt;
  Mere Semantics (... are crucial!)
&lt;/h2&gt;

&lt;p&gt;"A semantically correct HTML tag informs the browser and the developer about its content. It also helps keyboards and assistive technologies to navigate through a website." &lt;/p&gt;

&lt;p&gt;-&lt;a class="mentioned-user" href="https://dev.to/polgarj"&gt;@polgarj&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;I learned a lot from this article and I hope you do, too!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/polgarj" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cjWlF5iv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GD42SaIS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/453470/3b14ce30-941e-4f9e-a830-61c342d1e4ba.jpg" alt="polgarj"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/polgarj/a-short-guide-to-help-you-pick-the-correct-html-tag-56l9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;A short guide to help you pick the correct HTML tag&lt;/h2&gt;
      &lt;h3&gt;Jozsef Polgar ・ Sep 28 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#promises-promises"&gt;
  &lt;/a&gt;
  Promises, Promises
&lt;/h2&gt;

&lt;p&gt;A clear and concise explanation of promises and async/await in JavaScript — with a singing analogy 🎤 Thanks, &lt;a class="mentioned-user" href="https://dev.to/santan47"&gt;@santan47&lt;/a&gt;
&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/santan47" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bhefq3ve--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--_m2UqHwH--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/617037/0ce86226-e5db-45bb-85ab-9e6af265aa63.jpeg" alt="santan47"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/santan47/promise-async-await-in-javascript-mlb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Promise &amp;amp; Async await in JavaScript.&lt;/h2&gt;
      &lt;h3&gt;Santan kr Sharma ・ Sep 29 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-doppler-effect-securing-and-managing-your-facebook-amp-google-api-keys"&gt;
  &lt;/a&gt;
  The Doppler Effect: Securing and Managing Your Facebook &amp;amp; Google API keys.
&lt;/h2&gt;

&lt;p&gt;Following the widespread Facebook outage this week, proper organization and security of Facebook (and Google!) processes is top of mind. &lt;a class="mentioned-user" href="https://dev.to/zion"&gt;@zion&lt;/a&gt;
 delivers with this tutorial all about using Doppler to manage API keys securely and in a straightforward manner. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/zion" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uW-fD0YW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--raTz_OO2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/629105/b7e4e2fa-ea9a-49b0-97c8-d24f9714c26d.jpg" alt="zion"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/zion/facebook-and-google-authentication-with-node-js-and-doppler-maf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Facebook and Google Authentication with Node.js and Doppler&lt;/h2&gt;
      &lt;h3&gt;Ekekenta Odioyenfe .C ・ Sep 28 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#mind-blown"&gt;
  &lt;/a&gt;
  Mind = Blown
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/trekhleb"&gt;@trekhleb&lt;/a&gt;
 shows us how train a car in a simulator to do self-parking using a genetic algorithm — need I say more? So cool.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/trekhleb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_xKZvdeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--vEQB6cia--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/75714/b0158eeb-ee34-4382-9afd-ca9f9bede62c.JPG" alt="trekhleb"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/trekhleb/self-parking-car-in-500-lines-of-code-58ea" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Self-Parking Car in &amp;lt;500 Lines of Code&lt;/h2&gt;
      &lt;h3&gt;Oleksii Trekhleb ・ Sep 28 ・ 25 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#what-it-means-to-have-good-commits-and-how-to-accomplish-it"&gt;
  &lt;/a&gt;
  What it Means to Have Good Commits — and How to Accomplish It.
&lt;/h2&gt;

&lt;p&gt;Another super relevant guide for Hacktoberfest! &lt;a class="mentioned-user" href="https://dev.to/mishmanners"&gt;@mishmanners&lt;/a&gt;
 reviews how to make good commits and how good commits make you a great team player in this article&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mishmanners" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Rph_F4D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ak56TdXS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/397557/4eb4ece3-2832-407c-b933-f1b4b58829e6.jpg" alt="mishmanners"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mishmanners/how-to-make-a-good-git-commit-1ed7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to make a good `git commit`&lt;/h2&gt;
      &lt;h3&gt;Michelle Mannering ・ Oct 1 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#git&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#how-chris-got-the-job"&gt;
  &lt;/a&gt;
  How Chris Got the Job
&lt;/h2&gt;

&lt;p&gt;HUGE congrats to &lt;a class="mentioned-user" href="https://dev.to/dailydevtips1"&gt;@dailydevtips1&lt;/a&gt;
 for landing a job at Daily.dev. Find out how he made it happen in this post. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/dailydevtips1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0-ei4oTN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--edQh_ULI--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/370165/083a25f4-e79b-42c4-9e5f-0332b834ca5e.png" alt="dailydevtips1"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dailydevtips1/how-i-landed-a-job-at-daily-dev-50ii" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How I landed a job at Daily.dev&lt;/h2&gt;
      &lt;h3&gt;Chris Bongers ・ Oct 1 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Unpaid CTO adventures: Getting my fiancee`s business to generating 100k a month.</title>
      <author>Nick DeJesus</author>
      <pubDate>Tue, 05 Oct 2021 17:43:50 +0000</pubDate>
      <link>https://dev.to/dayhaysoos/unpaid-cto-adventures-getting-my-fiancee-s-business-to-generating-100k-a-month-2004</link>
      <guid>https://dev.to/dayhaysoos/unpaid-cto-adventures-getting-my-fiancee-s-business-to-generating-100k-a-month-2004</guid>
      <description>&lt;p&gt;You ever wonder about what people do at the C-level of a company? I did too, and no matter how many times people described it to me or I looked it up, it still never really clicked. That is until my fianceè, &lt;a href="https://twitter.com/parissAthena"&gt;Pariss&lt;/a&gt;, decided to launch her own business, Black Tech Pipeline (BTP). I've been witnessing her growth as an entrepreneur, Founder, CEO, and overall business woman. I'm extremely proud of how she's been handling it all on this first-time journey. &lt;/p&gt;

&lt;p&gt;One side-effect of Pariss launching her business was me somehow becoming her CTO. It's different from what you might expect for most CTO's. I'm in an unpaid position and held in this role indefinitely. Since this is the case, I've been alongside Pariss in this journey of learning and growing, but on the technical side. Black Tech Pipeline has also become my baby, and I see the great potential it has to become one of the best digital platforms on the internet. With that being said, I have a better understanding of what C-level exec people worry and care about. &lt;/p&gt;

&lt;p&gt;To oversimplify everything: &lt;/p&gt;

&lt;p&gt;CEO's have to make sure that the business can make money and scale.&lt;/p&gt;

&lt;p&gt;CTO's have to help the CEO with their goal, but focus on the tech side of things to make that goal come true.&lt;/p&gt;

&lt;p&gt;These roles can look wildly different for everyone. It really depends on the business itself and what the people running it envision it to become. This is why my take may sound so vague.&lt;/p&gt;

&lt;p&gt;Right now, BTP is doing &lt;em&gt;very&lt;/em&gt; well, but I have a feeling that I can help Pariss grow and scale it into a business that can be generating $100,000 a month. There is a lot of context that needs to be painted for me to get to that part, so let me break down her business and give insight on the things I've had to care about as Unpaid CTO.&lt;/p&gt;

&lt;p&gt;In this blog post, I'm going to break down my fianceé’s business model and talk about how I, Unpaid CTO, plan to alleviate a lot of the work that Pariss has on her shoulders, while also helping Black Tech Pipeline make more money.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-business"&gt;
  &lt;/a&gt;
  The business:
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Black Tech Pipeline&lt;/em&gt;✨&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blacktechpipeline.com"&gt;blacktechpipeline.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BTP is a job board and recruiting agency focused on connecting Black technologists to open job opportunities in the tech industry.  &lt;/p&gt;

&lt;p&gt;First order of business, as CTO, was for me to build the website!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blacktechpipeline.com"&gt;https://blacktechpipeline.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BTP has two business models: A job board and a recruiting service.&lt;/p&gt;

&lt;p&gt;The job board:&lt;/p&gt;

&lt;p&gt;Every company on the BTP job board receives a landing page that contains content around that companies values, diversity, equity, and inclusion (DE&amp;amp;I) initiatives, safety policies, what type of leadership they have, an overview of their interview process, benefits, and images of their team.&lt;/p&gt;

&lt;p&gt;Companies interested in being on the BTP job board have to take a discovery call with Pariss. She wants to learn more about the interested company, share more information on BTP, and talk about whether partnering may be a good fit or not. After every call, they receive an automated rate sheet that details BTP's services and pricing structure. If the company is interested in partnering, Pariss sends the company a legal agreement, and once that's signed, the company receives a questionnaire to fill out that Pariss uses to build them their landing page for the job board. Every job board is completely unique, thanks to MDX (I'll talk a bit about that later).&lt;/p&gt;

&lt;p&gt;Recruitment:&lt;/p&gt;

&lt;p&gt;BTP has a talent database with over 1,500 Black tech candidates from all around the world! They're mainly in the US, but also in Canada, the EU, UK, and Africa. They range from junior, to mid-level, to senior, and up. They're diverse in gender, education, tech stack, field in tech, and more.&lt;/p&gt;

&lt;p&gt;When companies are interested in recruitment, Pariss sends them a form that asks questions about the roles they'd like her and her team to source for, and anything they should keep in mind while sourcing. Then, Pariss and her sourcing assistants search the talent database for candidates that fit the requirements of that companies open roles. They connect interested candidates over to those companies, and if the company hires a BTP candidate, BTP gets a 20% cut of the hires first year base salary- standard pricing for recruiting. &lt;/p&gt;

&lt;p&gt;BTP's recruitment service has a unique and valuable model. After a company hires a candidate through recruitment, there is a 90 day check-in model where Pariss meets with the candidate and the organization separately, virtually, and bi-weekly to make sure that everything the hire is having a good experience and being set up for success. If there are any issues with the employer, she works with them on reviewing policies or procedures to improve the hires experience and to help the company retain them. So not only is her service a recruiting platform, her clients are also paying for transparent feedback on themselves as an employer that will improve the current and futures hires experience.&lt;/p&gt;

&lt;p&gt;She does have other miscellaneous revenue streams from the website but we're not going to get into those.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-business-has-been-doing"&gt;
  &lt;/a&gt;
  How business has been doing
&lt;/h2&gt;

&lt;p&gt;Phenomenal! Since launching BTP in September 2020, Pariss is averaging around 20k a month and business isn't slowing down at all. She's partnered with some of the biggest companies in the world, as well as start ups and everything in between. She has many returning clients and gets new ones from word of mouth, news articles and social media. She hasn't had to do any outreach at all.&lt;/p&gt;

&lt;p&gt;Honestly, if she wanted to continue this way forever, I don't think it's a bad idea as a life style business. If you think in terms of scalability and growth, there are definitely things that can be worked on, but I'll get to that in a moment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-current-stack"&gt;
  &lt;/a&gt;
  The current stack:
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#gatsby-hosted-on-netlify"&gt;
  &lt;/a&gt;
  Gatsby hosted on Netlify
&lt;/h4&gt;

&lt;p&gt;Gatsby was my go-to choice for me on this because I absolutely love how you can process and format data and bake it into a GraphQL layer. We knew we'd be needing a job board for the site and would have to have a page for every client. To keep things simple and affordable, I wanted to use Markdown as the source of data and figured I could use Gatsby's life cycle methods to build out the pages.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#forestry-cms"&gt;
  &lt;/a&gt;
  Forestry CMS
&lt;/h4&gt;

&lt;p&gt;I wanted a CMS that connected directly to GitHub that also allowed you to create Markdown files. They have a very generous free-tier and it allowed her the ability to launch her business until she could afford to pay.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mdx"&gt;
  &lt;/a&gt;
  MDX
&lt;/h4&gt;

&lt;p&gt;I love MDX so much! MDX allows you to use React in Markdown files. With MDX, she's given enough flexibility on the landing pages for companies to speak from their own voices and brand the way they want to. If you look at each page on the job board, they are completely unique. Most job boards have a specified format that displays the same amount of data per employer. Some clients have videos, some have more pictures than others and they're all in whatever order they want.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Magic links 🪄&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conceptually, magic links are a form of passwordless login.&lt;/p&gt;

&lt;p&gt;We use magic links that allow clients to update the job board roles on their own. Instead of giving them a log in, they use the magic link on an interface that actually updates the Black Tech Pipeline GitHub repo, which then triggers a Netlify build. &lt;/p&gt;

&lt;p&gt;We got help setting this up by an agency called &lt;a href="https://upstatement.com/"&gt;Upstatement&lt;/a&gt;. Would highly recommend hiring them for marketing, design or dev work, they have some geniuses over there!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Airtable
We hold all the candidate data in Airtable. It's been a tremendous help with getting kicked off, however, we are starting to find it limiting and might have to look elsewhere (my biggest problem to solve, yet).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-problems"&gt;
  &lt;/a&gt;
  The Problems
&lt;/h2&gt;

&lt;p&gt;Earlier, I said that business is going great and it'd be totally fine if Pariss wanted to continue the way she is now. From a scalibility perspective, there's quite a few problems we have:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#black-tech-pipeline-cant-run-without-pariss"&gt;
  &lt;/a&gt;
  Black Tech Pipeline can't run without Pariss
&lt;/h4&gt;

&lt;p&gt;Pariss literally &lt;em&gt;is&lt;/em&gt; the business. There is no way that Black Tech Pipeline can function without her existence. This might sound nice because it places a really heavy importance on an individual, which allows for extreme job security, but there are quite a few issues with this. When a person is the business itself, that usually means there aren't enough systems in place that help the business move along  to reach its full potential. It also means that she is doing a lot of the work on her own.&lt;/p&gt;

&lt;p&gt;I believe that a good solution for this is to set her up so that BTP is a business that anyone could run. We could set up very detailed documentation to talk through processes we have in place, and/or leverage my Unpaid CTO skills to build something that handles some of these processes for her (spoilers).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#airtable-isnt-sustainable-long-term"&gt;
  &lt;/a&gt;
  Airtable isn't sustainable long term
&lt;/h4&gt;

&lt;p&gt;If you're a candidate that's part of the database, you submit your data once and that's that. If something changes, like location or number, you have to resubmit instead of updating your data. We'd like to actually start putting out ads to get more candidates in the database, but we are hesitant to do that while everything is relying on Airtable at the moment.&lt;/p&gt;

&lt;p&gt;It would be ideal to allow candidates to submit their application and keep it up to date over time. This would make us feel better about the integrity of our data.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#getting-a-hold-of-candidates-is-hard"&gt;
  &lt;/a&gt;
  Getting a hold of candidates is hard
&lt;/h4&gt;

&lt;p&gt;Recruiting seems easy because you're simply asking people if they'd like to interview for a high paying job. However, it's not that simple at all. The solution to this, in my perspective, wouldn't be to build something to contact people easier and faster. If people want to be available, they will be available. Along with waiting for replies, sourcing also requires a lot of time and energy to search and reach out.&lt;/p&gt;

&lt;p&gt;I think the answer here would be to increase the amount of candidates in our database. Right now, we have over 1,500 candidates and it's hard to get them to reply to cold emails in general. If we had a database with over 10,000 candidates, perhaps our chances of getting a response would be easier. If there was a way to increase the chance of individual responses alone, I'd go that route but I can't think of a reasonable way to go about solving that.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#we-cant-display-candidate-data"&gt;
  &lt;/a&gt;
  We can't display candidate data
&lt;/h4&gt;

&lt;p&gt;Many clients have asked if there was a way that they could view the candidates in the database themselves but we can't allow it. We always want to vet employers and understand their DE&amp;amp;I and safety practices before introducing them to our candidates. We also want to keep track of who's reaching out to who, and where everyone is in their interview process. &lt;/p&gt;

&lt;p&gt;However, finding a way to allow employers to source candidates themselves would give us back a lot of time to focus on other tasks and allows the recruitment model to scale itself. It's an interesting obstacle to overcome. &lt;/p&gt;

&lt;p&gt;So to quickly recap on the problems:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We need more systems in place to handle Pariss' tasks. We want BTP to be in a position where other people can run it on their own.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Airtable was great for starting but not ideal long term. Mostly want to allow candidates to update their data as time goes on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It's too hard to recruit as more and more companies request that service. It's very time consuming and it's hard to get candidates to respond.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Can't give clients direct access to the database.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ultimately, the recruiting part of her business is a significant money making part. We'd like to get better at landing recruits by increasing the number of candidates in the database, but  Airtable is not going to scale well for that. It's sort of a chicken and egg problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;I'm going to build a platform for Black Tech Pipeline, a web app on Next JS and AWS Amplify. Both Candidates and Employers will both be able to create accounts and will get assigned specific roles.&lt;/p&gt;

&lt;p&gt;Candidates will be able to upload similar data to what they do now in the Airtable database, but also get the ability to update info as things change and delete their info from the backend.&lt;/p&gt;

&lt;p&gt;Pariss and her assistants will be able to search the database as they already do with Airtable, but the integrity of the data will be better since I can set up forms with validation and formatting a bit better than Airtable can.&lt;/p&gt;

&lt;p&gt;There's also something I want to try out and see if I can take things further.&lt;/p&gt;

&lt;p&gt;We want to give the employers the ability to search the an anonymous version of the talent database. Basically, there will be only enough information to know if they would be interested in talking to the candidate, not enough to identify. We also will give the candidates a space in the form for an "anonymous pitch", where we ask them to write a paragraph about their experiences and what they're looking for in a way that doesn't give away who they are. &lt;/p&gt;

&lt;p&gt;I want to provide a system where an employer will "like" an anonymous candidates profile, Black Tech Pipeline employees will get notified of that interest, and they can go and reach out to the candidates on the employer's behalf if they want. It can also be looked at as a way of "bookmarking" a candidate for future reference. This, of course, is optional for companies that have active recruiters.&lt;/p&gt;

&lt;p&gt;To be honest, I'm probably going to need to talk to some lawyers about this "anonymous search" approach, but I'm excited to do some exploring.&lt;/p&gt;

&lt;p&gt;If things go really well, Pariss will be able to land multiple 4-5 recruits a month, which would bring her around 100k a month (if most salaries are near 100k and she takes 20% cut of first year salary). From there, she'll get so tied up in consultations with her hires and employer partners that she'll have to use those funds to hire more people to help her run the business, taking things to the next level.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;If you've made it this far, I want to say thank you so much for reading. I really enjoy my role as Unpaid CTO and figured I'd share parts of what it's like having such an important role. I've already started building and want to say I'm maybe 60% through the things I've detailed above, I'll be saving much more technical blog posts for later. &lt;/p&gt;

&lt;p&gt;If anyone has any questions or suggestions, feel free to hit me up on Twitter!&lt;/p&gt;

</description>
      <category>business</category>
      <category>cto</category>
      <category>diversity</category>
    </item>
    <item>
      <title>Scrape API based site with Python</title>
      <author>Bishwas Bhandari</author>
      <pubDate>Tue, 05 Oct 2021 17:31:53 +0000</pubDate>
      <link>https://dev.to/bishwasbh/scrape-api-based-site-with-python-4a46</link>
      <guid>https://dev.to/bishwasbh/scrape-api-based-site-with-python-4a46</guid>
      <description>&lt;p&gt;Welcome to our another, web scraping with Python tutorial series. Today, we gonna do API web scraping with Python. I think scraping API based website is the easiest thing, we’ll ever do in your lifetime. We will be dealing with tokens, sessions, headers and form data. In short, today’s learning will be called API web scraping Python.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LVy34KUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8l2bl8kafy2utkhdtykm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LVy34KUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8l2bl8kafy2utkhdtykm.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.webmatrices.com/scrape-api-based-site-with-python/"&gt;Learn More&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>webscraping</category>
      <category>testing</category>
    </item>
    <item>
      <title>WASM is AWSM</title>
      <author>vibalijoshi</author>
      <pubDate>Tue, 05 Oct 2021 17:10:10 +0000</pubDate>
      <link>https://dev.to/vibalijoshi/wasm-is-awsm-3a98</link>
      <guid>https://dev.to/vibalijoshi/wasm-is-awsm-3a98</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;We live in times where you learn JS to write server side code and desktop apps (electron), and you also learn C++ / Rust to create browser apps.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Does this sound strange? well this is kindaaa true 😦&lt;/p&gt;

&lt;p&gt;With advent of JavaScript runtime environments like Node.js it is possible to write server side code with JS and not learn other languages like PHP,  C++, Java and JSP, Python,  Ruby on Rails. Hence a single person can just master JavaScript and write both frontend and backend code without any hassle.  &lt;/p&gt;

&lt;p&gt;Even though JavaScript is no doubt the most known language, not everyone is a master in it. Let's say you make a game using unity and C++ and you want to make it available for the web (as in the browser) but for that you would require to learn JavaScript. This would restrict a lot of possible amazing talented people who want to contribute to the web but cannot. &lt;strong&gt;Here is where the the gangsta WebAssembly arrives.&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wasm"&gt;
  &lt;/a&gt;
  WASM
&lt;/h2&gt;

&lt;p&gt;WASM or WebAssembly allows programmers to write application for the web other than the beloved JavaScript. You can write code in languages such as C, C++, Rust, Python, Go and even COBOL! FYI WebAssembly is a low-level assembly-like language.&lt;br&gt;
As mentioned the case of a game developer above; The WASM format removes the need for browser plug-ins to support online gaming and makes it possible to support graphics-heavy games. &lt;/p&gt;

&lt;p&gt;You can use it for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Better execution for languages and toolkits that are currently cross-compiled to the Web (C/C++, GWT, …)&lt;/li&gt;
&lt;li&gt;Image / video editing&lt;/li&gt;
&lt;li&gt;Games: Casual games that need to start quickly, AAA games that have heavy assets, Game portals (mixed-party/origin content).&lt;/li&gt;
&lt;li&gt;Peer-to-peer applications (games, collaborative editing, decentralized and centralized).
and many more, check out &lt;a href="https://webassembly.org/docs/use-cases/"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As the MDN Docs say:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;WebAssembly is a new type of code that can be run in &lt;strong&gt;modern web&lt;br&gt;
browsers&lt;/strong&gt; — it is a &lt;strong&gt;low-level assembly-like language&lt;/strong&gt; with a compact&lt;br&gt;
&lt;strong&gt;binary format&lt;/strong&gt; that runs with &lt;strong&gt;near-native performance&lt;/strong&gt; and provides&lt;br&gt;
languages such as &lt;strong&gt;C/C++, C# and Rust&lt;/strong&gt; with a compilation target so that&lt;br&gt;
they can run on the web. It is also designed to run alongside&lt;br&gt;
JavaScript, &lt;strong&gt;allowing both to work together.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#browser-support"&gt;
  &lt;/a&gt;
  Browser support
&lt;/h3&gt;

&lt;p&gt;Firefox and Chrome browsers currently support the wasm format on Linux, MacOS, Windows and Android. The latest versions of Edge and Safari now include WebAssembly support as well.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rpSLbNYo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8fmjs4r2ov60u4nzd9x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rpSLbNYo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8fmjs4r2ov60u4nzd9x.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#low-level-assemblylike-language"&gt;
  &lt;/a&gt;
  Low level assembly-like language
&lt;/h3&gt;

&lt;p&gt;This is how WASM works under the hood in very simple words:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High level languages like C, C++ and Rust are compiled into binary format, that is, .wasm and text format .wat.&lt;/li&gt;
&lt;li&gt;The source code written in C, C++ and Rust is compiled to .wasm using a compiler.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9O1FueTq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dg92pmmug97ve6325u7j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9O1FueTq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dg92pmmug97ve6325u7j.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#compatibility-with-js"&gt;
  &lt;/a&gt;
  Compatibility with JS
&lt;/h3&gt;

&lt;p&gt;Remember ⚠⚠&lt;br&gt;
It is not an alternative to JavaScript. It works alongside JavaScript, replacing &lt;strong&gt;asm.js&lt;/strong&gt; (WASM's old competitor) as the compilation target for C/C++ applications.&lt;br&gt;
Bonus read: &lt;a href="https://hacks.mozilla.org/2017/03/why-webassembly-is-faster-than-asm-js/"&gt;Why WebAssembly is Faster Than asm.js&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lets-give-it-a-try"&gt;
  &lt;/a&gt;
  Let's give it a try!
&lt;/h3&gt;

&lt;p&gt;Here is the list of languages that web assembly supports:&lt;br&gt;
&lt;a href="https://github.com/appcypher/awesome-wasm-langs#contents"&gt;https://github.com/appcypher/awesome-wasm-langs#contents&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Without any setup&lt;/em&gt;&lt;/strong&gt; : To just get a feel about how the whole webAssembly concept looks like you can check out &lt;a href="https://webassembly.studio/"&gt;WebAssembly Studio&lt;/a&gt; : an online IDE tool developed by Mozilla that can be used to compile C/C++ and Rust code into WebAssembly (WASM).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tTaZc6dw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m7ts52lihuvk6mysu0z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tTaZc6dw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m7ts52lihuvk6mysu0z.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Setup required:&lt;/em&gt;&lt;/strong&gt; If you are a C/C++ lover you can use &lt;a href="http://kripken.github.io/emscripten-site/"&gt;Emscripten&lt;/a&gt; : a complete compiler toolchain to WebAssembly. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;C/C++ code can be compiled to .wasm using Emscripten SDK. Later, the .wasm code can be used with the help of javascript in your html file to display the output.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ino-WSkp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzc8vkcdfp4am0bjrro8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ino-WSkp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzc8vkcdfp4am0bjrro8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you prefer Rust then try: &lt;a href="https://www.hellorust.com/setup/wasm-target/"&gt;rustc&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#compiling-cc-to-webassembly"&gt;
  &lt;/a&gt;
  Compiling C/C++ to WebAssembly
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;As explained above we would need to set up Emscripten Environment for C/C++.&lt;/li&gt;
&lt;li&gt;Setup the Emscripten SDK following &lt;a href="https://emscripten.org/docs/getting_started/downloads.html"&gt;these instructions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We use emscripten to generate everything we need to run our code, as WebAssembly, in the browser.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In new directory make a .c file and name it  &lt;code&gt;demo.c&lt;/code&gt; . Copy paste this code to this program file.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&amp;lt;emscripten/emscripten.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Now, using the terminal window you used to enter the Emscripten compiler environment, navigate to the same directory as your  &lt;code&gt;demo.c&lt;/code&gt;  file, and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;emcc demo.c -s WASM=1 -o demo.html
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The options we’ve passed in with the command are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;-s WASM=1&lt;/code&gt;  — Specifies that we want wasm output. If we don’t specify this, Emscripten will just output  &lt;a href="http://asmjs.org/"&gt;asm.js&lt;/a&gt;, as it does by default.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;-o demo.html&lt;/code&gt;  — Specifies that we want Emscripten to generate an HTML page to run our code in (and a filename to use), as well as the wasm module and the JavaScript "glue" code to compile and instantiate the wasm so it can be used in the web environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point in your source directory you should have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The binary wasm module code &lt;code&gt;demo.wasm&lt;/code&gt; : A WebAssembly file generally ends with &lt;code&gt;.wasm&lt;/code&gt; and it contains the &lt;strong&gt;binary instructions&lt;/strong&gt; as well as &lt;strong&gt;data&lt;/strong&gt; (&lt;em&gt;memory&lt;/em&gt;) generated during compilation.&lt;/li&gt;
&lt;li&gt;  A JavaScript file containing glue code to translate between the native C functions, and JavaScript/wasm &lt;code&gt;demo.js&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  An HTML file to load, compile, and instantiate your wasm code, and display its output in the browser &lt;code&gt;demo.html&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-to-run-this"&gt;
  &lt;/a&gt;
  How to run this?
&lt;/h3&gt;

&lt;p&gt;Open the resulting &lt;code&gt;demo.html&lt;/code&gt; in your browser. Make sure that it is updated to avoid any compatibility issues. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-output"&gt;
  &lt;/a&gt;
  The output
&lt;/h3&gt;

&lt;p&gt;If you successfully followed this then you would get this output in your browser’s JavaScript console. &lt;a href="https://wordpress.org/support/article/using-your-browser-to-diagnose-javascript-errors/"&gt;Here is how you can find your console&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-wg4Jph--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgltzrwtky3i8hcj8tqs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-wg4Jph--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgltzrwtky3i8hcj8tqs.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;("Hello World" would be displayed)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You did it 🎊&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h3&gt;

&lt;p&gt;You can also learn web assembly and write native code directly. But it is quite tough hence people do not prefer that. &lt;/p&gt;

&lt;p&gt;Interested to know more? Read the undisputed &lt;a href="https://developer.mozilla.org/en-US/docs/WebAssembly"&gt;MDN docs on WebAssembly&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Time Zones Are Hard</title>
      <author>Jeffrey Fate</author>
      <pubDate>Tue, 05 Oct 2021 17:04:39 +0000</pubDate>
      <link>https://dev.to/jeffreyfate/time-zones-are-hard-4pan</link>
      <guid>https://dev.to/jeffreyfate/time-zones-are-hard-4pan</guid>
      <description>&lt;p&gt;I recently saw this on Twitter (hope it doesn't trigger any of you):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;NEW TIME ZONES!!!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KzFs2I5q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FAv7UPuVEAA87S9.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--sS_bPZiK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1369555721033904131/SkcVjCe3_normal.jpg" alt="Maz Jovanovich profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Maz Jovanovich
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @maz_jovanovich
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      PSA: As of today, Australia has 5 time zones once again. Apologies in advance to our overseas friends trying to make sense of this temporal anarchy. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      04:47 AM - 03 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1444524436548296705" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1444524436548296705" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1444524436548296705" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#whats-the-big-deal"&gt;
  &lt;/a&gt;
  What's The Big Deal?
&lt;/h2&gt;

&lt;p&gt;Imagine your application has users throughout Australia. They probably include people in the three red states in the right image above; where time is different during daylight saving time.&lt;/p&gt;

&lt;p&gt;Let's also say your application has a feature that is very time-dependent. Let's say live TV recording. Users set recordings based on the schedule, in their local time. They expect not to miss recording their favorite shows.&lt;/p&gt;

&lt;p&gt;Without updating and releasing a new version, everyone in the 3 states with a new time zone (only during DST) could miss recording a show at what is now 9pm.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problems-everywhere"&gt;
  &lt;/a&gt;
  Problems Everywhere
&lt;/h2&gt;

&lt;p&gt;There aren't many devices or applications or services that don't depend on correct time. DRM. Caching. Shoe launches. Events. Reminders.&lt;/p&gt;

&lt;p&gt;I bet most people reading this have stored or fetched time that needed to be displayed in the correct time zone. Perhaps you didn't convert the time, but I bet it had to be converted somewhere downstream.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fix-it"&gt;
  &lt;/a&gt;
  Fix It
&lt;/h2&gt;

&lt;p&gt;One solution to this problem is to do away with time zones altogether. As amazing as this would be for us, the chances are extremely low. If the United States can't convert to metric, there is basically no chance the entire world will ditch time zones.&lt;/p&gt;

&lt;p&gt;Time for an engineering solution.&lt;/p&gt;

&lt;p&gt;One possible solution is to only persist UTC (coordinated universal time) for any date-time. This gets us partway there. No users (ok, maybe a couple) will want to enter time in UTC, so we'll probably have to convert it. Here's where it gets tricky.&lt;/p&gt;

&lt;p&gt;This amazing video by Computerphile puts it better than I could.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-5wpm-gesOY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let's see if we can find a solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#user-first"&gt;
  &lt;/a&gt;
  User First
&lt;/h2&gt;

&lt;p&gt;Let's start with a user story:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As a TV lover, I want to record my show in my local time, so that I can watch it later&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;How do we know the local time? Location. There are a few different ways to know location: IP address, Geolocation API, GPS, asking where the user is, more. Now that we have the location, we must find the time zone.&lt;/p&gt;

&lt;p&gt;This is the part I don't have a solid abstraction for. We must somehow map that location (latitude/longitude, city name, address) to the correct time zone. The most accurate is latitude/longitude, but we must fallback to a less precise location too.&lt;/p&gt;

&lt;p&gt;Is it feasible to map the borders of each time zone and do our best to match locations to those borders?&lt;/p&gt;

&lt;p&gt;The rest of the solution is simple enough. Once we have the correct time zone, we can convert UTC to the local time and we're done.&lt;/p&gt;

&lt;p&gt;Logic that does this should be encapsulated into something that can be easily integrated and reused. Something like a REST API or a local library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#just-an-exercise"&gt;
  &lt;/a&gt;
  Just An Exercise
&lt;/h2&gt;

&lt;p&gt;I admit, this appears to have been solved already, but I thought it was a fun exercise. A reminder that we always have to think about time.&lt;/p&gt;

&lt;p&gt;Here are some of the resources I found while trying to better understand time zones:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/david-dick/time-zone-olson/blob/master/lib/Time/Zone/Olson.pm"&gt;Olson Time Zones&lt;/a&gt;&lt;br&gt;
&lt;a href="https://raw.githubusercontent.com/unicode-org/cldr/master/common/supplemental/windowsZones.xml"&gt;Windows Time Zones&lt;/a&gt;&lt;br&gt;
&lt;a href="https://timezonedb.com/references/get-time-zone"&gt;TimeZoneDB&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.washingtonpost.com/news/worldviews/wp/2016/02/12/the-radical-plan-to-destroy-time-zones-2/"&gt;The radical plan to destroy time zones&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.wired.co.uk/article/universal-time-zones"&gt;What would happen if we abolished time zones altogether?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://theconversation.com/the-hazards-of-living-on-the-right-side-of-a-time-zone-border-116630"&gt;The hazards of living on the right side of a time zone border&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.theguardian.com/news/2019/jan/11/watching-the-sun-not-the-clock-sleep-body-clocks-daylight-saving-time"&gt;Why we should be watching the sun, not the clock&lt;/a&gt;&lt;/p&gt;

</description>
      <category>timezones</category>
    </item>
    <item>
      <title>Adonis Js - Events and Mailing Part 2</title>
      <author>Ted Ngeene</author>
      <pubDate>Tue, 05 Oct 2021 17:00:14 +0000</pubDate>
      <link>https://dev.to/tngeene/adonis-js-events-and-mailing-part-2-4f17</link>
      <guid>https://dev.to/tngeene/adonis-js-events-and-mailing-part-2-4f17</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Curiosity keeps leading us down new paths. ~ Walt Disney&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is often said that in programming there's always more than one way of doing things. The maxim is that to grow we must be open to new ideas...new ways of doing things. &lt;br&gt;
New ways of thinking are always applicable in our lives as developers.&lt;/p&gt;

&lt;p&gt;In this second piece of implementing events and mailing in Adonis, I'll demonstrate another technique we can use to capture different events in our applications.&lt;/p&gt;

&lt;p&gt;A reminder that the entire source code for this project can be found &lt;a href="https://github.com/tngeene/adonis-tutorial-fitit"&gt;here&lt;/a&gt;.&lt;br&gt;
Let's start.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#using-the-builtin-adonis-event-emitter-module"&gt;
  &lt;/a&gt;
  Using the built-in Adonis event emitter module
&lt;/h2&gt;

&lt;p&gt;For this guide, we'll use the built-in Event emitter module that comes in AdonisJs. You can peruse the &lt;a href="https://docs.adonisjs.com/guides/events"&gt;official event documentation&lt;/a&gt; to have a better understanding of this concept.&lt;/p&gt;

&lt;p&gt;We'll implement the same flow we did in our &lt;a href="https://dev.to/tngeene/events-and-mailing-part-1-2oi1"&gt;previous article&lt;/a&gt;, where the user receives a notification email upon registration to activate their account, so be sure to check it out!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-the-adonisjs-event-module"&gt;
  &lt;/a&gt;
  What is the AdonisJs event module?
&lt;/h2&gt;

&lt;p&gt;According to the adonis documentation, "The AdonisJS event emitter module is built on top of emittery".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/sindresorhus/emittery"&gt;Emittery&lt;/a&gt; is a modern async event emitter for node.js.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some basic knowledge of the node.js event loop would help you better understand it but is not necessary.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node ace make:prldfile events
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This command creates a new events.ts file in the contracts directory. This file is the entry point for all events in our application. Select all options prompted by the CLI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App/Models/User&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ioc:Adonis/Core/Event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;EventsList&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new:user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Event.on&lt;/code&gt; method registers a new event listener. It accepts the name of the event, in our case &lt;code&gt;new:user&lt;/code&gt;, followed by a method to handle the events as the arguments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#listener-classes"&gt;
  &lt;/a&gt;
  Listener Classes
&lt;/h2&gt;

&lt;p&gt;Listener classes define the logic for our events. This is similar to the model function we defined in the last post.&lt;br&gt;
Conventionally event listeners are stored inside the app/Listeners directory. However, you can customize the namespace inside the &lt;code&gt;.adonisrc.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;To make a new event listener class that will handle the emailing, run the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node ace make:listener User

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A new &lt;code&gt;User.ts&lt;/code&gt; file will be created under the &lt;code&gt;app/Listeners/&lt;/code&gt; directory. Open the newly created file and paste this code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Mail&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ioc:Adonis/Addons/Mail&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Env&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ioc:Adonis/Core/Env&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;EventsList&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ioc:Adonis/Core/Event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ioc:Adonis/Core/Route&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;onNewUser&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;newUser&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;EventsList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new:user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appDomain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;APP_URL&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;APP_NAME&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultFromEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DEFAULT_FROM_EMAIL&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentYear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prefixUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;appDomain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeSigned&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;verifyEmail&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;expiresIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;24hours&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Mail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;message&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultFromEmail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Please verify your email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;htmlView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;emails/auth/verify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;appName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;appDomain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentYear&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the code above is very similar to what we'd defined earlier as the &lt;code&gt;sendVerificationEmail()&lt;/code&gt; function. For a more detailed explanation, head over to &lt;a href="https://dev.to/tngeene/events-and-mailing-part-1-2oi1"&gt;that article&lt;/a&gt; and check out the description.&lt;/p&gt;

&lt;p&gt;However, just as a recap, we're defining the mail sending capability and building a URL that will encode our user token. The token expires in 24 hours and is tied down to a named URL, &lt;code&gt;verifyEmail&lt;/code&gt;. Now, onto the new stuff.&lt;/p&gt;

&lt;p&gt;public async onNewUser({ newUser }: EventsList['new:user'])&lt;/p&gt;

&lt;p&gt;We're defining an async function named, &lt;code&gt;onNewUser&lt;/code&gt; inside the default User class that takes the &lt;code&gt;newUser&lt;/code&gt; as an argument. The newUser argument is tied to the event we just defined before. There, it'll always ensure that the parameters passed will match the ones defined in the event declaration.&lt;/p&gt;

&lt;p&gt;If you wish to pass more than one argument, you can always define them in the &lt;code&gt;events.ts&lt;/code&gt; file by separating them with semicolons.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
 &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new:user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;arg2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;modelName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;arg3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;modelName&lt;/span&gt;&lt;span class="p"&gt;;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then calling the same arguments on the function declaration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;onNewUser&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;arg3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;....&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we can emit our event on the authController.&lt;/p&gt;

&lt;p&gt;Import the events module&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Event from '@ioc:Adonis/Core/Event'

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then right below the validation in the register function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;validations&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new:user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're calling the &lt;code&gt;new:user&lt;/code&gt; event we defined in the &lt;code&gt;events.ts&lt;/code&gt; file as this is the event name, the second parameter is the arguments to take.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that the argument names must be named similarly to the arguments we passed to the event declaration. By this I mean that you have to name the variable newUser just as it's declared in the event declaration. The same follows when having multiple arguments.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, we'll test the event.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember to turn on the development server by running, &lt;code&gt;node ace serve --watch&lt;/code&gt;`&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#registration"&gt;
  &lt;/a&gt;
  Registration
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--emlGtDaU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqw6psdvb6m4jd7thi1f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--emlGtDaU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqw6psdvb6m4jd7thi1f.png" alt="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqw6psdvb6m4jd7thi1f.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#email"&gt;
  &lt;/a&gt;
  Email
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qCn6Gmfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/seg2tvj2j71lu9teh6jf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qCn6Gmfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/seg2tvj2j71lu9teh6jf.png" alt="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/seg2tvj2j71lu9teh6jf.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#account-activated"&gt;
  &lt;/a&gt;
  Account activated
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--41IfNi0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acxn2isxsxr1o7i4srq3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--41IfNi0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acxn2isxsxr1o7i4srq3.png" alt="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acxn2isxsxr1o7i4srq3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;The complete source code can be accessed on my &lt;a href="https://github.com/tngeene/adonis-tutorial-fitit"&gt;Github profile, here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Frontend code for the email template can be found in this &lt;a href="https://www.notion.so/78a312be1151c46a994b21c1729cf3d5"&gt;GitHub gist&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.adonisjs.com/guides/events"&gt;official adonis events documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.logrocket.com/a-complete-guide-to-the-node-js-event-loop/"&gt;Node.js event loop&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In this article, we've learned another way of working with events in AdonisJs. It's entirely up to you to decide which method best works for you. That being said, always employ the most optimal approach.&lt;br&gt;
If you have any queries, comment and insight, don't hesitate to reach out on my &lt;a href="https://twitter.com/Ngeene_kihiu"&gt;Twitter&lt;/a&gt;, &lt;a href="https://tngeeene.com/"&gt;personal website&lt;/a&gt; or simply by leaving a comment below.&lt;/p&gt;

&lt;p&gt;I'll be going over models, migrations, and relationships in my next article. Till then...cheers!&lt;/p&gt;

</description>
      <category>adonis</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>Laravel Sanctum</title>
      <author>Siddhu</author>
      <pubDate>Tue, 05 Oct 2021 16:49:40 +0000</pubDate>
      <link>https://dev.to/siddhartha/laravel-sanctum-d3m</link>
      <guid>https://dev.to/siddhartha/laravel-sanctum-d3m</guid>
      <description>&lt;p&gt;I want to build an authentication system for both WEB and Mobile using API. After searching for good framework, Finally I choose Laravel. It is well suited for my requirement and one of the best frameworks, large community and well documented.&lt;/p&gt;

&lt;p&gt;In this article, I'll explain step by step flow that how to integrate Laravel Sanctum. Mainly I focus on API base authentication.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use cases
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;API Tokens&lt;/li&gt;
&lt;li&gt;Web Authentication&lt;/li&gt;
&lt;li&gt;You can use both (API Tokens &amp;amp; Web Authentication)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#api-tokens"&gt;
  &lt;/a&gt;
  API Tokens
&lt;/h3&gt;

&lt;p&gt;Its generate a simple API token for your user without complication of OAuth. This token have expire very long time (years). All tokens store in single database table and authenticating incoming HTTP requests via the Authorization header which should contain a valid API token.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-authentication"&gt;
  &lt;/a&gt;
  Web Authentication
&lt;/h3&gt;

&lt;p&gt;Laravel Sanctum  will only attempt to authenticate using cookies when the incoming request originates from your own frontend. When you call HTTP request, it will first check for an authentication cookie and, if none is present, Sanctum will then examine the Authorization header for a valid API token.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-can-use-both-api-tokens-amp-web-authentication"&gt;
  &lt;/a&gt;
  You can use both (API Tokens &amp;amp; Web Authentication)
&lt;/h3&gt;

&lt;p&gt;It's okay to use single service either API Tokens or Web Authentication, it doesn't mean that you should mandatory use both services. You can use anyway based on your requirement. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#laravel-installation"&gt;
  &lt;/a&gt;
  Laravel installation
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;composer create-project laravel/laravel laravel_sanctum&lt;/code&gt;&lt;br&gt;
after installation done, start server to check installation successfully done.&lt;br&gt;
&lt;code&gt;php artisan serve&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lUnkD2i6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ulob5tiko21lghcv45i6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUnkD2i6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ulob5tiko21lghcv45i6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the latest version of Laravel has already include Laravel Sanctum. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WRIefBpR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3k6o11xtcifcqdfo0yiw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WRIefBpR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3k6o11xtcifcqdfo0yiw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, If you are using old version of Laravel, You can do it manually. &lt;/p&gt;

&lt;p&gt;In your application's &lt;code&gt;composer.json&lt;/code&gt; file does not include &lt;code&gt;laravel/sanctum&lt;/code&gt; then add it on &lt;code&gt;composer.json' file and run command&lt;/code&gt;composer update` &lt;strong&gt;or&lt;/strong&gt; follow the link instructions &lt;a href="https://laravel.com/docs/8.x/sanctum#installation"&gt;Larevel-sanctum&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database-config"&gt;
  &lt;/a&gt;
  Database config
&lt;/h3&gt;

&lt;p&gt;Open &lt;code&gt;.env&lt;/code&gt; file and add your database details, In my case I'm using MySQL.&lt;/p&gt;

&lt;pre&gt;

    DB_CONNECTION=mysql
    DB_HOST=127.0.0.1
    DB_PORT=3306
    DB_DATABASE=laravel_sanctum
    DB_USERNAME=root
    DB_PASSWORD=

&lt;/pre&gt;

&lt;p&gt;After database configuration done. Run the command &lt;code&gt;php artisan migrate&lt;/code&gt;. it will create a default database tables from Laravel.&lt;/p&gt;

&lt;p&gt;Now you should add Sanctum's middleware to your &lt;code&gt;api&lt;/code&gt; middleware group at &lt;code&gt;app/Http/Kernel.php&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;
 protected $middlewareGroups = [
        'web' =&amp;gt; [
            \App\Http\Middleware\EncryptCookies::class,
            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
            \Illuminate\Session\Middleware\StartSession::class,
            // \Illuminate\Session\Middleware\AuthenticateSession::class,
            \Illuminate\View\Middleware\ShareErrorsFromSession::class,
            \App\Http\Middleware\VerifyCsrfToken::class,
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
        ],
        'api' =&amp;gt; [
            \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
            'throttle:api',
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
        ],
    ];
&lt;/pre&gt;

&lt;p&gt;Next, you should publish the Sanctum configuration and migration files using the &lt;code&gt;vendor:publish&lt;/code&gt; Artisan command. The sanctum configuration file will be placed in your application's &lt;code&gt;config&lt;/code&gt; directory:&lt;/p&gt;

&lt;pre&gt;
php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider"
&lt;/pre&gt;

&lt;p&gt;And it will create migration file for personal access token&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WnJf5p7d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y45505ftbhm0a3swtnnn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WnJf5p7d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y45505ftbhm0a3swtnnn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sanctum allows you to issue API tokens / personal access tokens that may be used to authenticate API requests to your application. When making requests using API tokens, the token should be included in the &lt;code&gt;Authorization&lt;/code&gt; header as a &lt;code&gt;Bearer&lt;/code&gt; token.&lt;/p&gt;

&lt;p&gt;To begin issuing tokens for users, your User model should use the &lt;code&gt;Laravel\Sanctum\HasApiTokens&lt;/code&gt; trait:&lt;/p&gt;

&lt;pre&gt;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;
}
&lt;/pre&gt;

&lt;p&gt;Create a controller for user authentication&lt;/p&gt;

&lt;pre&gt;
php artisan make:controller Authcontroller 
&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KI-S6XbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djy3pqfyx6c9xp6rdgup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KI-S6XbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djy3pqfyx6c9xp6rdgup.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;it will AuthController, In the AuthController add the follow lines&lt;/p&gt;

&lt;p&gt;Request&lt;br&gt;
&lt;code&gt;use Illuminate\Http\Request;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Response&lt;br&gt;
&lt;code&gt;use Illuminate\Http\Response;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is for password encrpt&lt;br&gt;
&lt;code&gt;use Illuminate\Support\Facades\Hash;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Your user model&lt;br&gt;
&lt;code&gt;use App\Models\User;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#register-user"&gt;
  &lt;/a&gt;
  Register User
&lt;/h3&gt;

&lt;pre&gt;
public function register(Request $request)
{
    $fields = $request-&amp;gt;validate([
        "name" =&amp;gt; 'required|string',
        "email" =&amp;gt; 'required|string|unique:users,email',
        "password" =&amp;gt; 'required|string|confirmed'
    ]);

    $user = User::create([
        'name' =&amp;gt; $fields['name'],
        'email' =&amp;gt; $fields['email'],
        'password' =&amp;gt; bcrypt( $fields['password'] ),
    ]);

    $token = $user-&amp;gt;createToken('myapptoken')-&amp;gt;plainTextToken;

    $response = [
        'user' =&amp;gt; $user,
        'token' =&amp;gt; $token,
    ];

    return response($response, 201);
}

&lt;/pre&gt;
 

&lt;h3&gt;
  &lt;a href="#login"&gt;
  &lt;/a&gt;
  Login
&lt;/h3&gt;

&lt;pre&gt;
public function login(Request $request)
{
    $fields = $request-&amp;gt;validate([
        "email" =&amp;gt; 'required|string',
        "password" =&amp;gt; 'required|string',
    ]);

    // Check Email
    $where = ["email"=&amp;gt;$fields['email']];
    $user = User::where($where)-&amp;gt;first();

    // Check Password
    if(!$user || !Hash::check($fields['password'], $user-&amp;gt;password))
    {
       return response([
           'message' =&amp;gt; "Bad credentials"
       ],401);
    }

    $token = $user-&amp;gt;createToken('myapptoken')-&amp;gt;plainTextToken;

    $response = [
        'user'=&amp;gt;$user,
        'token'=&amp;gt;$token
    ];

    return response($response,201);
}
&lt;/pre&gt;

&lt;h3&gt;
  &lt;a href="#logout"&gt;
  &lt;/a&gt;
  logout
&lt;/h3&gt;

&lt;pre&gt;
public function logout(Request $request)
{
    auth()-&amp;gt;user()-&amp;gt;tokens()-&amp;gt;delete();

    $response = [
        'message' =&amp;gt; 'logged out'
    ];

    return response($response,201);
}
&lt;/pre&gt;

&lt;p&gt;Now go to &lt;code&gt;routes\api.php&lt;/code&gt; and config Public/Protected routes like as shown in below&lt;/p&gt;

&lt;pre&gt;
//Public routes
Route::post('/register', [AuthController::class,'register']);
Route::post('/login', [AuthController::class,'login']);


//Protected routes
Route::group(['middleware'=&amp;gt;['auth:sanctum']], function () {
    Route::post('/logout', [AuthController::class,'logout']);
});
&lt;/pre&gt;

&lt;p&gt;It time to call API's. For this demo I'm using Postman&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wqfP-b_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zl0vraotch0mxmej2n33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wqfP-b_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zl0vraotch0mxmej2n33.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This request I have sent without post data to check the validations, And you must set the &lt;code&gt;headers&lt;/code&gt; otherwise you will encounter with errors. &lt;code&gt;Accept:Application\Json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let register an User&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WD_QJOhL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pswfzb1274btdjs5h5b9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WD_QJOhL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pswfzb1274btdjs5h5b9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You are successfully configured &lt;code&gt;Laravel Sanctum&lt;/code&gt;  :)&lt;/p&gt;

&lt;p&gt;In the response you will receive personal access token. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G_RlujbY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jeqjw5w0b19d6ubk62xx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G_RlujbY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jeqjw5w0b19d6ubk62xx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this response you can notice that we have received token, Use that token for all protected services. You should pass that token in headers as bearer token for Authorization.&lt;/p&gt;

&lt;p&gt;I also give an example for Logout.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---qH15JRn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jycjezugu0ypj8modea3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---qH15JRn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jycjezugu0ypj8modea3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you hit protected API without token, That request is unauthorized. &lt;/p&gt;

&lt;p&gt;Now I added Bearer token in request, Then I'm successfully logout.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dcn8odxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a89uargfd9z6v6lt2j3a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dcn8odxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a89uargfd9z6v6lt2j3a.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please feel free to ask me anything on this topic!&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>api</category>
      <category>mobileauthentication</category>
      <category>sanctum</category>
    </item>
    <item>
      <title>SQL Server to React in 60 Seconds With Prisma</title>
      <author>Jon Crowell</author>
      <pubDate>Tue, 05 Oct 2021 16:44:07 +0000</pubDate>
      <link>https://dev.to/jonrcrowell/sql-server-to-react-in-60-seconds-with-prisma-16fj</link>
      <guid>https://dev.to/jonrcrowell/sql-server-to-react-in-60-seconds-with-prisma-16fj</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Previously published at &lt;a href="//www.fullstackfish.com"&gt;fullstackfish.com&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Connecting SQL Server to React with Prisma is a straightforward and satisfying experience. This post will guide you through the process of getting your Azure SQL Server data onto a screen in a React app in less than a minute. Really. (As long as you pause your timer while &lt;code&gt;npm&lt;/code&gt; is downloading files.)&lt;/p&gt;

&lt;p&gt;Of course, there are a few prerequisites before you can get it connected that quickly. Prisma supports working with existing databases (which we are doing in this post) as well as defining the database in your app and then creating the database objects through migrations (which will be covered in other posts).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You must have an existing Azure SQL Server with a database that you have credentials for. You must also have your ip whitelisted in Azure.&lt;/li&gt;
&lt;li&gt;The database must have at least one table with data that we can query.&lt;/li&gt;
&lt;li&gt;You must have up-to-date versions of Node.js (12.6 or higher) and Visual Studio Code installed. &lt;em&gt;See &lt;a href="https://www.fullstackfish.com/posts/2021-10-05-use-volta-like-a-sophisticated-dev/"&gt;nvm is for barbarians. Manage Node versions with Volta instead&lt;/a&gt; for a great way to manage Node versions.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;You must have &lt;code&gt;create-next-app&lt;/code&gt; installed globally. (&lt;code&gt;npm global install create-next-app&lt;/code&gt; if you don't)&lt;/li&gt;
&lt;li&gt;You must have an empty folder on your hard-drive for this project.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And that's it. Let's do this.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open your empty project folder in VS Code&lt;/li&gt;
&lt;li&gt;Open a terminal and run the following command to initialize a new next app:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The dot (.) will create the next app in the current path.&lt;/p&gt;

&lt;p&gt;Once the app is initialized, you should see a confirmation. Run the app to verify it compiles and runs correctly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; in a browser to verify.&lt;/p&gt;

&lt;p&gt;Now stop the app and let's get some data.&lt;/p&gt;

&lt;p&gt;You'll need to add the following dependencies, &lt;code&gt;prisma&lt;/code&gt; as a dev dependency and &lt;code&gt;@prisma/client&lt;/code&gt; as a regular dependency.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-D&lt;/span&gt; prisma
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i @prisma/client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check your package.json file to verify that you have version 3.01 or greater of prisma in the dev dependencies.&lt;/p&gt;

&lt;p&gt;Initialize prisma in your app. This will add a prisma folder in root with a schema.prisma file. It will also add a .env file if you don't already have one, which you shouldn't at this point. For future reference, if you do have a .env file, this step will add a new entry into the file without harming anything else you may have in there.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx prisma init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The default connection that is configured in the schema.prisma file is for Postgres. Let's fix that.&lt;/p&gt;

&lt;p&gt;Edit the file to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// schema.prisma&lt;/span&gt;
&lt;span class="nx"&gt;generator&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;provider&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prisma-client-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;datasource&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sqlserver&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;url&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the constant DATABASE_URL that is referenced. We'll update the value of that constant in the .env file now.&lt;/p&gt;

&lt;p&gt;Set the connection string in the .env file to point to your Azure SQL Server database. I'm using a username and password for this example. Explaining all the variations on connection strings is beyond the scope of this post, but I'm assuming you can figure that out.&lt;/p&gt;

&lt;p&gt;My connection string, with the sensitive bits masked to protect the innocent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sqlserver://[SERVERNAME].database.windows.net:1433;database=[DATABASENAME];encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;user=[USERNAME];password=[PASSWORD]"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Connection strings can be long, so you'll have to scroll to the right to see the whole thing.&lt;/p&gt;

&lt;p&gt;Now we're ready to introspect the database. This step will populate the Prisma schema based on your database schema. Make sure you have your schema.prisma file open before you run the following. It's fun to watch the magic happen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx prisma db pull
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Boom! Our app and database are now friends.&lt;/p&gt;

&lt;p&gt;Assuming your connection string is correct and you have access to your database, you should now see a list of all the tables in the dbo schema generated as models in your schema.prisma file. This functionality is currently limited to tables in the dbo schema. You won't have views or functions, or stored procs in the schema file, which is true for all databases Prisma works with, so don't get your SQL Server feelings hurt. You can still interact with those objects in your app.&lt;/p&gt;

&lt;p&gt;Now that we have a valid schema, let's run the command to generate the Prisma client.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx prisma generate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next is a fabulous tool that keeps your backend and frontend code safely separate but extremely easy to work with in the same project, among many other benefits.&lt;/p&gt;

&lt;p&gt;Add a lib folder in root with a prisma.js file, and copy/paste or type the following into that file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// lib/prisma.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@prisma/client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;production&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;prisma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prisma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;prisma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the best practice defined by Prisma and Next for the integration. You'll be able to import a single instance of the prisma client throughout your app (something we'll do shortly), which will handle connection pools for you and protect you from memory leaks. See &lt;a href="https://www.prisma.io/docs/support/help-articles/nextjs-prisma-client-dev-practices"&gt;Best practice for instantiating PrismaClient with Next.js&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;Let's define an API route that our front-end will consume.&lt;/p&gt;

&lt;p&gt;Add a file in pages/api called products.js. Replace "products" with whatever table you want to work with from your database. I'm using Adventure Works for this example.&lt;/p&gt;

&lt;p&gt;Add this to the products.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/api/products.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../lib/prisma&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now delete the contents of the pages/index.js file and replace it with the following as a guide. You'll need to use your React skills to create a component that incorporates your data.&lt;/p&gt;

&lt;p&gt;You'll need to replace &lt;code&gt;products&lt;/code&gt; with whatever table you want from your database, and use fields from that table instead of the ones I'm using below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/index.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:3000/api/products&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ProductID&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="err"&gt;—&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ListPrice&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. Let's see if it worked.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; in a browser and behold your data!&lt;/p&gt;

&lt;p&gt;Hit me up on twitter &lt;a href="https://twitter.com/jonrcrowell"&gt;@jonrcrowell&lt;/a&gt; to let me know what you think or if you ran into any issues.&lt;/p&gt;

&lt;p&gt;Prisma released the SQL Server connector on September 7, 2021. Read the official announcement here:&lt;br&gt;
&lt;a href="https://www.prisma.io/blog/prisma-microsoft-sql-server-azure-sql-production-ga"&gt;Microsoft SQL Server Support in Prisma is Production-Ready&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sql</category>
      <category>javascript</category>
      <category>react</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>How to Create a PWA With Next.js</title>
      <author>Avneesh Agarwal</author>
      <pubDate>Tue, 05 Oct 2021 16:39:50 +0000</pubDate>
      <link>https://dev.to/byteslash/how-to-create-a-pwa-with-next-js-4dbm</link>
      <guid>https://dev.to/byteslash/how-to-create-a-pwa-with-next-js-4dbm</guid>
      <description>&lt;p&gt;Hey all,&lt;/p&gt;

&lt;p&gt;This post is in collaboration with &lt;a href="https://www.youtube.com/c/JamesQQuick"&gt;James Q Quick&lt;/a&gt;. If you like to see videos then check out this video by  &lt;a href="https://www.youtube.com/c/JamesQQuick"&gt;James Q Quick&lt;/a&gt;.&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ARNN_zmrwcw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So let's get the party started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-pwa"&gt;
  &lt;/a&gt;
  What is a PWA?
&lt;/h3&gt;

&lt;p&gt;PWA stands for Progressive web app. It is basically like a web app built with HTML, CSS, and Javascript with a few more features like-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Extremely Fast&lt;/li&gt;
&lt;li&gt;Installable&lt;/li&gt;
&lt;li&gt;Works in all browsers&lt;/li&gt;
&lt;li&gt;Provides an offline page&lt;/li&gt;
&lt;li&gt;Push notifications&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-nextjs-app"&gt;
  &lt;/a&gt;
  Creating a Next.js app
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app next-pwa-demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am going to convert the default Next.js template into a PWA, you can convert your web app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-the-required-dependency"&gt;
  &lt;/a&gt;
  Installing the required dependency
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i next-pwa # npm
yarn add next-pwa # yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#generating-a-manifest"&gt;
  &lt;/a&gt;
  Generating a manifest
&lt;/h2&gt;

&lt;p&gt;I am going to use &lt;a href="https://www.simicart.com/manifest-generator.html"&gt;Simicart &lt;/a&gt; for generating the manifest. You can simply add the details of your app and it will generate a manifest. Make sure to select &lt;code&gt;standalone&lt;/code&gt; in the display&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CbVTZ_qY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631105021139/isB5mFO9g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CbVTZ_qY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631105021139/isB5mFO9g.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The generated manifest will look similar to this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "theme_color": "#000000",
  "background_color": "#ffffff",
  "display": "standalone",
  "scope": "/",
  "start_url": "/",
  "name": "Next PWA",
  "short_name": "PWA",
  "description": "This app is to demo PWA in Next.js",
  "icons": [
    {
      "src": "/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/icon-256x256.png",
      "sizes": "256x256",
      "type": "image/png"
    },
    {
      "src": "/icon-384x384.png",
      "sizes": "384x384",
      "type": "image/png"
    },
    {
      "src": "/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After you are done with adding all the details, install the zip file and extract it. After you have extracted, drag and drop all the files in the public folder.&lt;br&gt;
 We will rename &lt;code&gt;manifest.webmanifest&lt;/code&gt; to &lt;code&gt;manifest.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, the public directory should look like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jOYYMdf0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631104061093/p46yEEcg8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jOYYMdf0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631104061093/p46yEEcg8.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-raw-documentjs-endraw-"&gt;
  &lt;/a&gt;
  Creating  &lt;code&gt;_document.js&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Create &lt;code&gt;_document.js&lt;/code&gt; in the pages folder and add the following piece of code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Document, { Html, Head, Main, NextScript } from "next/document";

class MyDocument extends Document {
  render() {
    return (
      &amp;lt;Html&amp;gt;
        &amp;lt;Head&amp;gt;
          &amp;lt;link rel="manifest" href="/manifest.json" /&amp;gt;
          &amp;lt;link rel="apple-touch-icon" href="/icon.png"&amp;gt;&amp;lt;/link&amp;gt;
          &amp;lt;meta name="theme-color" content="#fff" /&amp;gt;
        &amp;lt;/Head&amp;gt;
        &amp;lt;body&amp;gt;
          &amp;lt;Main /&amp;gt;
          &amp;lt;NextScript /&amp;gt;
        &amp;lt;/body&amp;gt;
      &amp;lt;/Html&amp;gt;
    );
  }
}

export default MyDocument;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configuring-pwa-in-next-config"&gt;
  &lt;/a&gt;
  Configuring PWA in Next config
&lt;/h3&gt;

&lt;p&gt;We will need to add some data for configuring the PWA, so add this snippet in &lt;code&gt;next.config.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const withPWA = require("next-pwa");

module.exports = withPWA({
  pwa: {
    dest: "public",
    register: true,
    skipWaiting: true,
  },
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You have made your app a PWA 🥳&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SqVgS4NE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631107349883/VTP2RgjEd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SqVgS4NE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631107349883/VTP2RgjEd.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-better-development-environment"&gt;
  &lt;/a&gt;
  Making better development environment
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#adding-the-autogenerated-files-to-gitignore"&gt;
  &lt;/a&gt;
  Adding the auto-generated files to .gitignore
&lt;/h4&gt;

&lt;p&gt;If you notice then a few files like service workers, and workbox has been added to the public folder. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7dp0jIg9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631106642797/L1CYGDmvD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7dp0jIg9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631106642797/L1CYGDmvD.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These files change constantly and are not needed in your GitHub. So, do the following to remove them from production.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Delete &lt;code&gt;sw.js&lt;/code&gt;, &lt;code&gt;sw.js.map&lt;/code&gt;, &lt;code&gt;workbox-****.js&lt;/code&gt; and &lt;code&gt;workbox-****.js.map&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the files to &lt;code&gt;.gitignore&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# PWA files
**/public/sw.js
**/public/workbox-*.js
**/public/worker-*.js
**/public/sw.js.map
**/public/workbox-*.js.map
**/public/worker-*.js.map
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now if you restart the server then the filenames will be dark&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tmh5y8xf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631106954234/TB-1YKiLR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tmh5y8xf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631106954234/TB-1YKiLR.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#disabling-pwa-in-development"&gt;
  &lt;/a&gt;
  Disabling PWA in development
&lt;/h4&gt;

&lt;p&gt;In development, you might want to disable PWA because it gives a lot of console messages.&lt;/p&gt;

&lt;p&gt;We will disable it like this in &lt;code&gt;next.config.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const withPWA = require("next-pwa");

module.exports = withPWA({
  pwa: {
    dest: "public",
    register: true,
    skipWaiting: true,
    disable: process.env.NODE_ENV === "development",
  },
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope you found this useful. See ya in the next one ✌🏻&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links-&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/ARNN_zmrwcw"&gt;James's video&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/jamesqquick"&gt;Follow James on Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://avneesh-links.vercel.app/"&gt;All socials&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>nextjs</category>
      <category>react</category>
    </item>
    <item>
      <title>Skeleton Screen Loading Animation using HTML &amp; CSS</title>
      <author>Shantanu Jana</author>
      <pubDate>Tue, 05 Oct 2021 16:36:09 +0000</pubDate>
      <link>https://dev.to/shantanu_jana/skeleton-screen-loading-animation-using-html-css-1ec3</link>
      <guid>https://dev.to/shantanu_jana/skeleton-screen-loading-animation-using-html-css-1ec3</guid>
      <description>&lt;p&gt;In this article I have shown how Skeleton Screen Loading Animation is created using HTML CSS and JavaScript. I created this animation on a &lt;a href="https://www.foolishdeveloper.com/2021/09/simple-profile-card-ui-design.html"&gt;profile card&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;You will see various websites where you can see &lt;strong&gt;Skeleton Loading Animation&lt;/strong&gt; before loading any element. Undoubtedly it enhances the quality and beauty of the website a lot. You need to have a basic idea about HTML and CSS to make it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#skeleton-screen-loading-animation"&gt;
  &lt;/a&gt;
  Skeleton Screen Loading Animation
&lt;/h2&gt;

&lt;p&gt;I have shown this kind of effect before but it was not effective. In this case I have used JavaScript to make it work. This &lt;a href="https://www.foolishdeveloper.com/2021/09/skeleton-screen-loading-animation.html"&gt;Skeleton Screen Loading Animation&lt;/a&gt; will continue for three seconds when you open the web page. After three seconds this effect is off and all the information on the profile card can be seen.&lt;/p&gt;

&lt;p&gt;Below I have given a live demo that will help you know how it works.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/fghty/embed/yLXGqZE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now you create an HTML, CSS and JavaScript file. You can use this link to download the source code. If you are a beginner, follow the tutorial below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-design-the-web-page"&gt;
  &lt;/a&gt;
  Step 1: Design the web page
&lt;/h3&gt;

&lt;p&gt;To create this animation, I first designed the webpage with CSS code. Here I have used light blue as the background color of the web page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#eff7f2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Lato"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i3IUaZn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0rb3fwz9lla2jnmczcx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3IUaZn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0rb3fwz9lla2jnmczcx.jpg" alt="Design the web page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-basic-structure-of-skeleton-loading"&gt;
  &lt;/a&gt;
  Step 2: Basic structure of Skeleton Loading
&lt;/h3&gt;

&lt;p&gt;Now I have created the basic structure of this Skeleton Loading Animation or Profile Card. I have used the &lt;code&gt;width: 300px&lt;/code&gt; and &lt;code&gt;height: 400px&lt;/code&gt; of this profile card. A shadow has been used around the card to enhance the beauty.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-card skeleton"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.user-card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-10px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;box-shadow&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt; &lt;span class="n"&gt;ease-in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.user-card&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-10px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ppBixttf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eiyr8facewnna20lubh9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ppBixttf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eiyr8facewnna20lubh9.jpg" alt="Basic structure of Skeleton Loading"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-add-profile-image-and-cover-image"&gt;
  &lt;/a&gt;
  Step 3: Add profile image and cover image
&lt;/h3&gt;

&lt;p&gt;Now I have added profile image and cover image in profile card. I have used the width and height of the profile image 100 px. I used &lt;code&gt;border-radius: 50%&lt;/code&gt; to make it completely round. I have added a cover image with &lt;code&gt;height: 150px&lt;/code&gt; and width: 100%.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-cover"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-avatar"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"user profile image"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.user-card&lt;/span&gt; &lt;span class="nc"&gt;.user-cover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(img1.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.user-card&lt;/span&gt; &lt;span class="nc"&gt;.user-cover&lt;/span&gt; &lt;span class="nc"&gt;.user-avatar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v7JeGmnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dd44pjk2q0ato9o5je1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v7JeGmnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dd44pjk2q0ato9o5je1.jpg" alt="Add profile image and cover image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-add-basic-information-to-the-card"&gt;
  &lt;/a&gt;
  Step 4: Add basic information to the card
&lt;/h3&gt;

&lt;p&gt;Now I have added some basic information in this Skeleton Screen Loading Animation or Profile Card. I used margin-top: 35px to keep all the information from top to bottom.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-details"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-name hide-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Anamika Roy&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-email hide-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Web Designer&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-text hide-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lorem ipsum ... consectetur. &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.user-card&lt;/span&gt; &lt;span class="nc"&gt;.user-details&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.user-card&lt;/span&gt; &lt;span class="nc"&gt;.user-details&lt;/span&gt; &lt;span class="nc"&gt;.user-name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.user-card&lt;/span&gt; &lt;span class="nc"&gt;.user-details&lt;/span&gt; &lt;span class="nc"&gt;.user-email&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0f5fc0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.user-card&lt;/span&gt; &lt;span class="nc"&gt;.user-details&lt;/span&gt; &lt;span class="nc"&gt;.user-text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#666&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E-8bTsKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mjy7oln31ooup6ydxjm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E-8bTsKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mjy7oln31ooup6ydxjm.jpg" alt="Add basic information to the card"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-create-contact-button"&gt;
  &lt;/a&gt;
  Step 5: Create contact button
&lt;/h3&gt;

&lt;p&gt;Now I have added a contact button in it. I have used the button &lt;code&gt;height: 35px&lt;/code&gt;, &lt;code&gt;width 60%&lt;/code&gt; and background color blue. I have used font-weight: bold to increase the size of the text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"contact-user hide-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;CONTACT&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.user-card&lt;/span&gt; &lt;span class="nc"&gt;.contact-user&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#035f7d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NL8kypuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lant0cy7ebkgedh7pqz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NL8kypuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lant0cy7ebkgedh7pqz.jpg" alt="Create contact button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-add-loading-effect-to-images"&gt;
  &lt;/a&gt;
  Step 5: Add Loading Effect to images
&lt;/h3&gt;

&lt;p&gt;First I added animation between the profile image and the cover image. However, there is no animation in the image, only I have used gray color in the background. The way I designed the profile image and the cover image is the same way I designed it here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.user-card.skeleton&lt;/span&gt; &lt;span class="nc"&gt;.user-cover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e2e2e2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.user-card.skeleton&lt;/span&gt; &lt;span class="nc"&gt;.user-cover&lt;/span&gt; &lt;span class="nc"&gt;.user-avatar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.user-card.skeleton&lt;/span&gt; &lt;span class="nc"&gt;.user-cover&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e2e2e2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iu7cjUb3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3ghj5th10vbuhd2ozo8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iu7cjUb3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3ghj5th10vbuhd2ozo8.jpg" alt="Add Loading Effect to images"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-add-loading-effect-to-the-information"&gt;
  &lt;/a&gt;
  Step 6: Add Loading Effect to the information
&lt;/h3&gt;

&lt;p&gt;Now I have added animation and color between the text and the button. First I added colors to the buttons and texts, then I added animations using &lt;code&gt;@keyframes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;animation-duration: 2s&lt;/code&gt; used to help make this animation work every two seconds. Here animation means a black shadow will continue to travel from left to right every 2 seconds.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.user-card.skeleton&lt;/span&gt; &lt;span class="nc"&gt;.hide-text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e2e2e2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.user-card.skeleton&lt;/span&gt; &lt;span class="nc"&gt;.hide-text&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#e2e2e2&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#d5d5d5&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#e2e2e2&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;animation-name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gradient-animation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-iteration-count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I have implemented this animation using @keyframes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;gradient-animation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;from&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v-wM8YzJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjohmn92lreq0gw27iyb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v-wM8YzJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjohmn92lreq0gw27iyb.jpg" alt="Add Loading Effect to the information"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-7-turn-off-skeleton-loading-effect-using-javascript"&gt;
  &lt;/a&gt;
  Step 7: Turn off Skeleton Loading Effect using JavaScript
&lt;/h3&gt;

&lt;p&gt;Now the most important thing is to turn off the animation using JavaScript. Above we have added Skeleton Screen Loading Animation using css. &lt;/p&gt;

&lt;p&gt;This animation will continue indefinitely. So now after some time using JavaScript you have to turn off that animation and instruct to view all the information in the profile card. I set the time to 3000 milliseconds using &lt;code&gt;setTimeout&lt;/code&gt;. That means after &lt;code&gt;3000 milliseconds&lt;/code&gt; that gray color animation will be hidden.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to use 4 seconds instead of these 3 seconds then you have to use 4000 instead of 3000 here.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;$el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.user-card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Loading finished&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;skeleton&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;$el&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.hide-text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hide-text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NFBx2xrj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7n9n2kkpkj9ublipoo5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NFBx2xrj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7n9n2kkpkj9ublipoo5.jpg" alt="Skeleton Screen Loading Animation using HTML CSS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you learned from this tutorial how to create &lt;strong&gt;Skeleton Loading Animation using HTML CSS and JavaScript&lt;/strong&gt;. I have already shared many more such tutorials, you can see those designs.&lt;/p&gt;

&lt;p&gt;You can visit my blog for more tutorials like this.&lt;br&gt;
&lt;a href="https://www.foolishdeveloper.com/"&gt;https://www.foolishdeveloper.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to connect jambonz with Dasha AI</title>
      <author>Dasha</author>
      <pubDate>Tue, 05 Oct 2021 16:22:27 +0000</pubDate>
      <link>https://dev.to/dashaai/how-to-connect-jambonz-with-dasha-ai-5bd6</link>
      <guid>https://dev.to/dashaai/how-to-connect-jambonz-with-dasha-ai-5bd6</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Originally posted on &lt;a href="https://dasha.ai/en-us/blog/how-connect-jambonz-dasha-AI"&gt;https://dasha.ai/en-us/blog/how-connect-jambonz-dasha-AI&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note from the editor: this is a repost of David Horton's &lt;a href="https://blog.jambonz.org/how-to-connect-jambonz-with-dasha-ai"&gt;article&lt;/a&gt;. &lt;a href="https://jambonz.org"&gt;jambonz&lt;/a&gt; is an open source CPaaS for communications service providers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dasha.ai/en-us"&gt;Dasha&lt;/a&gt; is a conversational-AI-as-a-service platform that lets you embed realistic voice and text conversational capabilities into your apps or products.  Dasha is a relatively new entry in the conversational AI space, albeit one with that is &lt;a href="https://dasha.ai/en-us/blog/gartner-cool-vendor-dasha"&gt;getting some nice press&lt;/a&gt; and brings some interesting capabilities, including such things as handling conversational digressions more easily and a nice &lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt; plugin for creating applications using their &lt;a href="https://docs.dasha.ai/en-us/default/dasha-script-language/"&gt;declarative language&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When building contact center solutions using &lt;a href="https://jambonz.org"&gt;jambonz&lt;/a&gt;, integrating with Dasha is a breeze!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dasha-side"&gt;
  &lt;/a&gt;
  Dasha side
&lt;/h3&gt;

&lt;p&gt;Make sure you have node.js version 13+ and npm installed. You will also want the latest version of Visual Studio Code running to edit and test the Dasha app.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Join &lt;a href="https://community.dasha.ai"&gt;Dasha Community&lt;/a&gt; - you will get your API key here automatically&lt;/li&gt;
&lt;li&gt;Open VSCode and install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=dasha-ai.dashastudio&amp;amp;ssr=false"&gt;Dasha Studio Extension&lt;/a&gt; from the extension store.  You’ll get all the DSL syntax highlighting and a GUI interface for debugging your conversation flow.&lt;/li&gt;
&lt;li&gt;Run &lt;strong&gt;&lt;code&gt;npm i -g "@dasha.ai/cli@latest"&lt;/code&gt;&lt;/strong&gt; to install the latest Dasha CLI.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#run-a-dasha-app"&gt;
  &lt;/a&gt;
  Run a dasha app
&lt;/h3&gt;

&lt;p&gt;You’ll want to load up a Dasha conversational AI app. For the purposes of this tutorial, we will load up the simple &lt;a href="https://github.com/dasha-samples/dasha-sip-test"&gt;inbound tester app&lt;/a&gt; that they provide.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/dasha-samples/dasha-sip-test &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;dasha-sip-test &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm &lt;span class="nb"&gt;install

&lt;/span&gt;Cloning into &lt;span class="s1"&gt;'dasha-sip-test'&lt;/span&gt;...
remote: Enumerating objects: 66, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Counting objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;66/66&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;51/51&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Total 66 &lt;span class="o"&gt;(&lt;/span&gt;delta 27&lt;span class="o"&gt;)&lt;/span&gt;, reused 41 &lt;span class="o"&gt;(&lt;/span&gt;delta 14&lt;span class="o"&gt;)&lt;/span&gt;, pack-reused 0
Unpacking objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;66/66&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;

added 204 packages, and audited 205 packages &lt;span class="k"&gt;in &lt;/span&gt;2s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Dasha integrates with voice systems over SIP.  That makes it super simple to integrate with jambonz.&lt;/p&gt;

&lt;p&gt;So the next thing we shall do is create a SIP endpoint on the hosted Dasha platform that we can send our calls to.  We will create a unique SIP URL that routes to their platform and which on the Dasha side is linked to our application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dasha sip create-inbound &lt;span class="nt"&gt;--application-name&lt;/span&gt; sip-test-app sip-test-app
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"applicationName"&lt;/span&gt;: &lt;span class="s2"&gt;"sip-test-app"&lt;/span&gt;,
  &lt;span class="s2"&gt;"priority"&lt;/span&gt;: 0,
  &lt;span class="s2"&gt;"groupName"&lt;/span&gt;: &lt;span class="s2"&gt;"Default"&lt;/span&gt;,
  &lt;span class="s2"&gt;"uri"&lt;/span&gt;: &lt;span class="s2"&gt;"sip:5de44e6b-c0df-4532-b952-e4e4c5a5a9ec@sip.us.dasha.ai"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whoa, slow down!  What just happened there?&lt;/p&gt;

&lt;p&gt;We used the dasha cli to create a SIP URI on the Dasha platform that we can send to.  We specified an application name and a config name -- in this case, using &lt;code&gt;sip-test-app&lt;/code&gt; for both.  &lt;/p&gt;

&lt;p&gt;We can also use the dasha cli to list the sip-inbound endpoint we have created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dasha sip list-inbound
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"sip-test-app"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"applicationName"&lt;/span&gt;: &lt;span class="s2"&gt;"sip-test-app"&lt;/span&gt;,
    &lt;span class="s2"&gt;"priority"&lt;/span&gt;: 0,
    &lt;span class="s2"&gt;"groupName"&lt;/span&gt;: &lt;span class="s2"&gt;"Default"&lt;/span&gt;,
    &lt;span class="s2"&gt;"uri"&lt;/span&gt;: &lt;span class="s2"&gt;"sip:5de44e6b-c0df-4532-b952-e4e4c5a5a9ec@sip.us.dasha.ai"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see the data returned is an object keyed by the config name where the values are objects containing information about an individual SIP URI.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that in order for everything to link up properly on the Dasha side, the &lt;code&gt;application-name&lt;/code&gt; you use in the &lt;code&gt;dasha sip create-inbound&lt;/code&gt; command must match the value in the &lt;code&gt;name&lt;/code&gt; field of your &lt;code&gt;dashaappfile&lt;/code&gt; (which is found in &lt;code&gt;app/app.dashaapp&lt;/code&gt;).  If you want to change the name of the application, change it in the dashaappfile and create a new sip inbound URI using that same name, then restart your app.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now all we need to do is start our Dasha app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm start &lt;span class="k"&gt;in&lt;/span&gt;

..skipping startup log messages here..

Waiting &lt;span class="k"&gt;for &lt;/span&gt;calls via SIP
sip:5de44e6b-c0df-4532-b952-e4e4c5a5a9ec@sip.us.dasha.ai
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that it again tells us the SIP URI Dasha has exposed for our application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jambonz-side"&gt;
  &lt;/a&gt;
  jambonz side
&lt;/h3&gt;

&lt;p&gt;On the jambonz side, all we need to do is to &lt;a href="https://www.jambonz.org/docs/webhooks/dial/"&gt;dial&lt;/a&gt; an outbound call leg to that SIP URI provided.  Let's whip up a jambonz app to do just that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npx create-jambonz-app &lt;span class="nt"&gt;--scenario&lt;/span&gt; dial dasha-connect

Creating a new jambonz app &lt;span class="k"&gt;in&lt;/span&gt; /Users/dhorton/dasha/dasha-connect

Installing packages...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: you can see the finished app &lt;a href="https://github.com/jambonz/dasha-connect"&gt;here on github&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This gives us a basic demo jambonz application that by default dials a talking time clock.  Let's change it to dial the Dasha SIP URI instead.  &lt;/p&gt;

&lt;p&gt;First, let's rename the webhook file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;dasha-connect
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mv &lt;/span&gt;lib/routes/endpoints/dial-time.js lib/routes/endpoints/dial-dasha.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, replace the contents of &lt;code&gt;lib/routes/endpoints/dial-dasha.js&lt;/code&gt; with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WebhookResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@jambonz/node-client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;WebhookResponse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST /dial-dasha&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WebhookResponse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dial&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;answerOnBridge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sip&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;sipUri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sip:5de44e6b-c0df-4532-b952-e4e4c5a5a9ec@sip.us.dasha.ai&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;503&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: replace the &lt;code&gt;sipUri&lt;/code&gt; above with your own SIP URI that you generated in the previous step.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can see that all we are doing is using the jambonz dial target type to dial out to a SIP URI.&lt;/p&gt;

&lt;p&gt;Finally, edit the &lt;code&gt;lib/routes/endpoints/index.js&lt;/code&gt; to reference &lt;code&gt;dial-dasha&lt;/code&gt; instead of &lt;code&gt;dial-time&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/call-status&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./call-status&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/dial-dasha&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./dial-dasha&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As with any jambonz Node.js app, we need to provide environment variables to reference our account sid and other details, so edit the &lt;code&gt;ecosystem.config.js&lt;/code&gt; file accordingly, then start it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pm2 start ecosystem.config.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that it's running, all we need to do is create an application in our jambonz portal for this webhook:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KBwxH6RV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632667376844/-gRvaADWM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KBwxH6RV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632667376844/-gRvaADWM.png" alt="dasha-app.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and then point a phone number to it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6tOk9jMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632667393265/d7uDy417Z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6tOk9jMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632667393265/d7uDy417Z.png" alt="dasha-pn.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it!  Time to test by calling the number we assigned.  This dasha sample app is quite simple so you will simply hear a woman's voice saying hello and then waiting for your response after which she will close out the conversation.  &lt;/p&gt;

&lt;p&gt;Of course, this simple Dasha app is only meant to provide an easy way to verify SIP connectivity, and you can now proceed to build out more sophisticated conversational AI apps using Dasha and connect them to your jambonz voice applications.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>vscode</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Two ways to integrate Javadoc into IntelliJ IDEA</title>
      <author>scottshipp</author>
      <pubDate>Tue, 05 Oct 2021 15:55:33 +0000</pubDate>
      <link>https://dev.to/scottshipp/two-ways-to-integrate-javadoc-into-intellij-idea-leb</link>
      <guid>https://dev.to/scottshipp/two-ways-to-integrate-javadoc-into-intellij-idea-leb</guid>
      <description>&lt;p&gt;Do you Google for Javadoc? Isn't it annoying? Picture this: you're in a flow state, with a full stack on your mind, and a good couple dozen business concepts thrown in, and you just want to double-check the behavior of a given library method. Do you really want to stop what you're doing, open a browser, search for the library documentation, make sure you are looking at the right version, and then navigate to the class and method in question?&lt;/p&gt;

&lt;p&gt;You don't have to!&lt;/p&gt;

&lt;p&gt;Here are two fast and easy ways to add Javadoc to IntelliJ so you can see it using the "Quick Documentation" feature: simply hover your mouse on any piece of code or use the Quick Documentation shortcut key, Ctrl+Q for Linux or Windows and F1 on macOS!&lt;/p&gt;

&lt;p&gt;Now, on to the first way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-maven"&gt;
  &lt;/a&gt;
  Using Maven
&lt;/h2&gt;

&lt;p&gt;On Maven projects, run the &lt;code&gt;dependency:resolve&lt;/code&gt; phase with &lt;code&gt;classifier=javadoc&lt;/code&gt; and IntelliJ will automatically acquire documentation superpowers.&lt;/p&gt;

&lt;p&gt;There are two ways to run this. First, you can run the following Maven command from the terminal inside the root directory for the project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mvn dependency:resolve &lt;span class="nt"&gt;-Dclassifier&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;javadoc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also run that from the "Execute Maven goal" window, which appears when you open the Maven tool window (View &amp;gt; Tool windows &amp;gt; Maven) and press the "M" icon.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4gUME1JT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wy9sigyoogrweb805bl3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4gUME1JT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wy9sigyoogrweb805bl3.png" alt="The Execute Maven Goal window in IntelliJ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want, you can even tell Maven to &lt;em&gt;always&lt;/em&gt; download Javadoc when available. Navigate to Preferences &amp;gt; Build, Execution, Deployment &amp;gt; Build Tools &amp;gt; Maven &amp;gt; Importing and check the Automatically download documentation checkbox.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#with-a-url-or-jar-file"&gt;
  &lt;/a&gt;
  With a URL or Jar file
&lt;/h2&gt;

&lt;p&gt;Do you have a URL to some Javadoc on the web? Then open Project Structure, navigate to Libraries, and click the icon that combines a "+" and a globe.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a7wks6sP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qo81b2lojco9tlki6uiv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a7wks6sP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qo81b2lojco9tlki6uiv.png" alt="The Libraries UI in IntelliJ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Paste the URL and save it.&lt;/p&gt;

&lt;p&gt;If you happen to have the javadoc in a jar file instead, you can use the normal "+" icon you see in this same Project Structure &amp;gt; Libraries window.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-it-looks-like"&gt;
  &lt;/a&gt;
  What it looks like
&lt;/h2&gt;

&lt;p&gt;With any of those settings in place, you can simply hover your mouse on any piece of code and see the resulting Javadoc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r5NVmM1J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhc7rtw2lqenng6174lo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r5NVmM1J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhc7rtw2lqenng6174lo.png" alt="Quick Documentation view in IntelliJ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With Javadoc just a mouse-hover away, you can remain focused on the task at hand rather than disrupting your flow and going on a wild goose chase.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by Miriam Espacio from Pexels&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
