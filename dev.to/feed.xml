<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>3 Ways to create a Navbar (CSS Grid Layout)</title>
      <author>crayoncode</author>
      <pubDate>Fri, 29 Jan 2021 10:54:55 +0000</pubDate>
      <link>https://dev.to/crayoncode/3-ways-to-create-a-navbar-css-grid-layout-4kal</link>
      <guid>https://dev.to/crayoncode/3-ways-to-create-a-navbar-css-grid-layout-4kal</guid>
      <description>&lt;p&gt;Today let's build three different navbar layouts using the CSS grid layout and I'll show you, how easy it is to change the arrangement of the items without actually touching the markup.&lt;/p&gt;

&lt;p&gt;Read the full article or watch me code this on Youtube (TL;DW):&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/IrjSsWOuie4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  Result
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/crayon-code/embed/OJbLdpX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#markup" class="anchor"&gt;
  &lt;/a&gt;
  Markup
&lt;/h2&gt;

&lt;p&gt;The markup is basically a &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; element with&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a logo (the feather)&lt;/li&gt;
&lt;li&gt;three navigation items and&lt;/li&gt;
&lt;li&gt;a highlighted item for the user menu.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since we're going to produce three different layout versions, the for loop is there to prevent us from copy-pasting ourselves.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;main
  // generates the navbar three times
  // each with different version classes
  // version-1, version-2 &amp;amp; version-3
  - for (let i=0; i&amp;lt;3; i++)
    header(class="version-" + (i+1))
      .logo
        i.fas.fa-feather-alt
      nav
        ul.nav
          li 
            a(href="#") 
              i.far.fa-chart-bar
              | Dashboard
          li 
            a(href="#") 
              i.far.fa-edit
              | Projects
          li 
            a(href="#") 
              i.far.fa-envelope-open
              | Posts
      a.user(href="#") 
        i.far.fa-user
        | Jane Doe
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#basics-background-amp-variables" class="anchor"&gt;
  &lt;/a&gt;
  Basics, Background &amp;amp; Variables
&lt;/h2&gt;

&lt;p&gt;Let's first setup a few basic variables that define the background and foreground color, as well as some transition paramters which are used in multiple spots:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="na"&gt;--background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#2b2b2b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;--foreground-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="na"&gt;--transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;250ms&lt;/span&gt; &lt;span class="n"&gt;ease-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Each navbar is also having its own highlight colors, which is why the &lt;code&gt;--color&lt;/code&gt; variable is defined within the scope of each version's own CSS class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.version-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ba4aff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.version-2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#008aff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.version-3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#22d1d3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's also reset padding, margin and box-sizing on each element. Alternatively you can include a pre-made normalization/reset CSS file like normalize.css or sanitize.css.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As a fancy bonus, here's the code for the background which is just three different gradients stacked on top of each other in different angles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;322deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
      &lt;span class="mh"&gt;#ba4aff&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;#ba4aff&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;178deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="mh"&gt;#008aff&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;#008aff&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;24deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="mh"&gt;#00ffc6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;#00ffc6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;35%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#header-grid-configuration-outer-grid" class="anchor"&gt;
  &lt;/a&gt;
  Header Grid Configuration (Outer Grid)
&lt;/h2&gt;

&lt;p&gt;We're going to use two nested grid layouts. The outer one on the &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; element  is simply there for providing the general layout of the navbar, so in order to tell where the logo, the navbar and the user menu is located:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;750px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Lato"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The basic principle is to provide for each version of a navbar a different configuration for the columns and areas of the grid layout. A template area is a named section of the grid layout and an element can be assigned to it by providing the name of the area to it. And that's why it works, to change position of elements purely based on the CSS code, because only by switching or changing the values in &lt;code&gt;grid-template-areas&lt;/code&gt; the browser adapts the places of the element and the order inside the markup becomes irrelevant:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// logo (left), nav items (left), user menu (right)&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.version-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
    &lt;span class="na"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;min-content&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;max-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"logo nav user"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;place-self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// logo (left), nav items (centered), user menu (right)&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.version-2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
    &lt;span class="na"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;min-content&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;max-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"logo nav user"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;align-self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.user&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;justify-self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// user menu, nav items (centered), logo (right)&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.version-3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
    &lt;span class="na"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;max-content&lt;/span&gt; &lt;span class="n"&gt;min-content&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;min-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"user nav . logo"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;justify-self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;align-self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Pay close attention to the values in &lt;code&gt;grid-template-columns&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;min-content&lt;/code&gt; is used mostly for the logo because it should always consume as less space as possible / needed.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;max-content&lt;/code&gt; is used mostly for the user menu, since there are two words, &lt;code&gt;min-content&lt;/code&gt; word produce a word wrap, because in that case the column with is minimized. &lt;code&gt;max-content&lt;/code&gt; behaves that way that it maximizes the space for the content, but uses only as much space, as required.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;auto&lt;/code&gt; in our case means that it takes the remaining space, which is just what we want for the navigation items.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So in the end, all we need to do is to assign those identifiers mentioned in the &lt;code&gt;grid-template-areas&lt;/code&gt; to the parts of the navbar and that's all being needed to setup the basic layout of the navbar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.logo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.user&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#navigation-grid-configuration-inner-grid" class="anchor"&gt;
  &lt;/a&gt;
  Navigation Grid Configuration (Inner Grid)
&lt;/h2&gt;

&lt;p&gt;The grid for the navigation items (&lt;code&gt;.nav&lt;/code&gt;) is a nested grid layout inside the outer grid that defines the general arrangement (logo, navigation items, user menu) in the &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; element. It uses the CSS grid's auto flow mechanics. This means that no explicit order of columns is defined, but each direct descendant element of the grid container (&lt;code&gt;.nav&lt;/code&gt;) is given its own column. We can tell the grid layout how to deal with elements that are not assigned to a certain cell or group of cells in the grid. &lt;code&gt;grid-auto-flow: column&lt;/code&gt; tells it to create a new column for each unassigned element. Setting it to &lt;code&gt;row&lt;/code&gt; would cause it to create a new row.&lt;br&gt;
&lt;code&gt;grid-auto-columns&lt;/code&gt; is there to tell the grid which size auto-generated columns have, which is pretty awesome in our case, since we can simply tell it, to fit the content without wrapping it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;grid-auto-flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;grid-auto-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;max-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;place-self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#link-amp-icon-styling" class="anchor"&gt;
  &lt;/a&gt;
  Link &amp;amp; Icon Styling
&lt;/h2&gt;

&lt;p&gt;Now, let's get into the finer details of the styling. Each link in the header navbar is a flex-box that centers its content vertically and also having a little bit of padding and rounded corners.&lt;/p&gt;

&lt;p&gt;The markup makes use of a few font-awesome icons, so each &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tag is given the highlight color and rendered slightly smaller, such that it doesn't "overpower" the text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
    &lt;span class="c1"&gt;// align content vertically&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5rem&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;foreground-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.7em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#link-hover-effect" class="anchor"&gt;
  &lt;/a&gt;
  Link Hover Effect
&lt;/h2&gt;

&lt;p&gt;For the hover effect we're going to use a nice &lt;code&gt;clip-path&lt;/code&gt; effect. Each link is given an &lt;code&gt;::after&lt;/code&gt; pseudo-element having the highlight color as background color and a &lt;code&gt;clip-path&lt;/code&gt; that slightly cuts of the bottom right corner. If the link is not hovered, its positioned to the left (invisible) and on hover it's shifted to the right such that it covers the link's area. The &lt;code&gt;z-index&lt;/code&gt; setup makes sure that the hightlight does not cover the text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;--slantness&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;slantness&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;slantness&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;slantness&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#logo-amp-user-menu" class="anchor"&gt;
  &lt;/a&gt;
  Logo &amp;amp; User Menu
&lt;/h2&gt;

&lt;p&gt;The logo is simply a feather icon from font awesome and is colored on hover. To give it a little bit of a prettier shape, the top left and right bottom corner is strongly rounded off, which fits the shape of the feather and provides a nice effect on hover.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.logo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;place-self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-top-left-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-bottom-right-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To make the user menu stand out a little, is given a slight box shadow to the inside using the highlight color. The same effect could have been achieved using a border, but the advantage of a box shadow is, that it does not affect the box-model and therefore keeps the size of the element consistent with the others.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.user&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>css</category>
      <category>tutorial</category>
      <category>ui</category>
    </item>
    <item>
      <title>JavaScript News and Updates of January 2021 </title>
      <author>Pavel Lazarev</author>
      <pubDate>Fri, 29 Jan 2021 10:34:13 +0000</pubDate>
      <link>https://dev.to/plazarev/javascript-news-and-updates-of-january-2021-1jj0</link>
      <guid>https://dev.to/plazarev/javascript-news-and-updates-of-january-2021-1jj0</guid>
      <description>&lt;p&gt;Hello everyone! The new year has just begun but the JavaScript world is already buzzing with exciting news and updates. While exploring various sources I have learned some interesting JavaScript stuff and eager to share it with you.&lt;/p&gt;

&lt;p&gt;Get ready to learn about key findings from two fresh reports on JavaScript trends, a new micro-framework from the DHTMLX team, a major update of the Snowpack build tool, and the latest web initiatives. In addition, I have also collected some tips and articles that will help to broaden your knowledge and skills in JavaScript.&lt;/p&gt;

&lt;p&gt;Let’s roll!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-tools-and-updates" class="anchor"&gt;
  &lt;/a&gt;
  New Tools and Updates
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#highlighting-new-javascript-trends" class="anchor"&gt;
  &lt;/a&gt;
  Highlighting New JavaScript Trends
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sGg_UGdT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n6d9o19zrlhgoa0vqwww.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sGg_UGdT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n6d9o19zrlhgoa0vqwww.jpg" alt="JavaScript Trends"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The turbulent year of 2020 is over, but we continue analyzing changes that have been reshaping the JavaScript landscape over the last twelve months to better understand the upcoming trends. For this purpose, I offer to take advantage of two recently released JavaScript surveys.&lt;/p&gt;

&lt;p&gt;State of JS is one of the most popular and insightful JavaScript research projects based on real user feedback. The 2020 edition reveals some interesting facts. First of all, the majority of responders (more than 88%) still love using JavaScript for building apps, but at the same time, a considerable part of the survey participants (39%) think that JavaScript is overcomplicated. When talking about the state of things in JavaScript technologies, it is worth mentioning the growing popularity of Svelte and Snowpack, stable advancement of TypeScript and Next.js, as well as rising dissatisfaction with Angular, Redux, and Mocha. It is also nice to mention that dev.to is ranked in the top 3 of Blogs &amp;amp; Magazines read by developers. Get more valuable info on the &lt;a href="https://2020.stateofjs.com/en-US/"&gt;State of JS page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;JavaScript Rising Stars 2020 is another interesting source of information on the JavaScript trends based on the number of stars added to various tools on GitHub during the last year. The most starred JavaScript instruments of 2020 are Deno (+30.2k☆), Vue.js (+22.5k☆), React (+19.8k☆), Playwright (+19.7k☆), VS Code (+19.1k☆). Due to a different approach used for the preparation of this report, the results in key categories may differ from the State of JS outcomes, but it still can be useful to take a look at the &lt;a href="https://risingstars.js.org/2020/en"&gt;full report&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#introducing-dhtmlx-optimus" class="anchor"&gt;
  &lt;/a&gt;
  Introducing DHTMLX Optimus
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9W2D7Afk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j4x3e3dswjli761r4icp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9W2D7Afk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j4x3e3dswjli761r4icp.png" alt="DHTMLX Optimus"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DHTMLX Suite is a popular JavaScript library that provides a collection of lightweight and highly customizable UI widgets for implementing various functionalities in web projects. From now on, this library can be utilized more conveniently and productively with DHTMLX Optimus. It is a new micro-framework enabling web developers to build DHTMLX-based applications of any complexity with less time and effort.&lt;/p&gt;

&lt;p&gt;The framework allows making the most of modern coding technologies such as ES6 classes, JS modules, and Webpack bundler. Thus, it is possible to define the front-end structure of a specific web app with a set of independent components (modules) and reuse them later in other projects. Optimus can also be employed in combination with any server-side technology. Here is a &lt;a href="https://github.com/DHTMLX/optimus-starter-app"&gt;step-by-step&lt;/a&gt; instruction on how to start using Optimus in real-case scenarios. If you want to learn more about this framework, check out the &lt;a href="https://dhtmlx.com/blog/dhtmlx-optimus-micro-framework-boosting-web-development-suite-ui-widgets/"&gt;release article&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#meet-snowpack-v30" class="anchor"&gt;
  &lt;/a&gt;
  Meet Snowpack v3.0
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SsJUVx3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mvklcvg1yqreu0iz00ld.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SsJUVx3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mvklcvg1yqreu0iz00ld.jpg" alt="Snowpack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fast, simple, efficient – these are three words that vividly describe a bundle-free and JavaScript ESM-powered build tool named Snowpack. The popularity of this tool is growing really fast and it is already considered by many as a viable alternative to more intricate and well-established tools such as Webpack. Earlier this month, Snowpack was updated to version 3.0.&lt;/p&gt;

&lt;p&gt;This major release provides a set of powerful new features for faster web development. For instance, it offers a new way of loading any packages directly into your project via steaming imports. Another remarkable feature of this update is a build-in optimizer based on esbuild. This novelty helps to prepare production builds much faster than Webpack or Rollup. Starting from v3.0, Snowpack also comes with a modified JavaScript API and Node.js runtime. Find more details in the &lt;a href="https://www.snowpack.dev/posts/2021-01-13-snowpack-3-0"&gt;release article&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#w3c-launches-miniapps-working-group" class="anchor"&gt;
  &lt;/a&gt;
  W3C Launches MiniApps Working Group
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yDRUcH9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/temzi5wv9x7lbns4pjp9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yDRUcH9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/temzi5wv9x7lbns4pjp9.png" alt="W3C"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;World Wide Web Consortium (W3C), one of the main driving forces behind the evolution of web standards, has recently established the MiniApps Working Group. MiniApp is a relatively new and promising format of mobile apps combining advantages of web technologies (CSS, JavaScript, etc.) and enhanced user experience of native apps.&lt;/p&gt;

&lt;p&gt;The primary goal of the W3C’s initiative is to work out specifications that will ensure maximal integration of MiniApps with the web architecture, better interoperability between various MiniApp platforms, and more active promotion of this technology among web developers. Read this &lt;a href="https://www.w3.org/blog/2021/01/w3c-launches-the-miniapps-working-group/"&gt;material&lt;/a&gt; to get a deeper insight into the plans of the MiniApps Working Group.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#open-web-docs-a-new-project-for-improving-web-documentation" class="anchor"&gt;
  &lt;/a&gt;
  Open Web Docs – a New Project for Improving Web Documentation
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LjWICmAi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6hcfxdo3gaduip6gauqf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LjWICmAi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6hcfxdo3gaduip6gauqf.png" alt="Open Web Docs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A coalition of large technology companies has recently announced the launch of the Open Web Docs project. This undertaking aims to provide better maintainability and sustainability of Web-API and JavaScript documentation for web platform technologies. The list of founders and contributors to this project includes Google, Microsoft, Mozilla, W3C, and others. It is expected that Open Web Docs will support and closely cooperate with the main documentation platforms such as MDN Web Docs. Additional information on the project and its strategy for 2021 can be found in this &lt;a href="https://opencollective.com/open-web-docs/updates/introducing-open-web-docs"&gt;article&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-tips-and-articles" class="anchor"&gt;
  &lt;/a&gt;
  Useful Tips and Articles
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#selecting-development-tools-for-business-web-apps" class="anchor"&gt;
  &lt;/a&gt;
  Selecting Development Tools for Business Web Apps
&lt;/h4&gt;

&lt;p&gt;There are many reasons why JavaScript is continuously ranked high among programming languages in various surveys. One of the key factors in favor of JavaScript is its huge ecosystem and plenty of tools that significantly simplify various development stages. But the abundance of coding technologies raises a serious question of choice for developers. &lt;/p&gt;

&lt;p&gt;When talking about building business apps, standard technology stacks are also frequently complemented with special JavaScript UI libraries. Such UI components help to implement comprehensive functionalities for project management, scheduling, data visualization, etc. This &lt;a href="https://hackernoon.com/top-web-development-tools-for-building-business-applications-in-2021-0n1234pe"&gt;article&lt;/a&gt; contains a lot of useful information on top web development tools, including JS UI libraries, that suit well for developing business apps.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#comprehensive-guide-to-frontend-performance-optimization-in-2021" class="anchor"&gt;
  &lt;/a&gt;
  Comprehensive Guide to Front-End Performance Optimization in 2021
&lt;/h4&gt;

&lt;p&gt;High performance is probably one of the key success indicators of any web application. As web development technologies are becoming more sophisticated, web developers have to consider a growing number of metrics, tools, and front-end techniques to achieve optimal application performance. Otherwise, it is hard to expect that end-users will get quick and seamless experience. Where to start improving performance? What are possible bottlenecks? And how to keep your app fast enough on a long-term basis? These and many other related questions are addressed in this great &lt;a href="https://www.smashingmagazine.com/2021/01/front-end-performance-2021-free-pdf-checklist/"&gt;front-end performance checklist for 2021&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#best-javascript-charting-tools-for-visualizing-data-in-business-apps" class="anchor"&gt;
  &lt;/a&gt;
  Best JavaScript Charting Tools for Visualizing Data in Business Apps
&lt;/h4&gt;

&lt;p&gt;It is hard to imagine any modern business web application without data visualization capabilities. Using various types of charts, it is possible to present complex data in a straightforward way. However, it may take a lot of time to implement a charting functionality from scratch. Therefore, web developers frequently utilize ready-made JavaScript charting components to save time and exclude unnecessary coding errors. This &lt;a href="https://dzone.com/articles/8-javascript-chart-components-for-business-apps"&gt;article&lt;/a&gt; highlights the most popular JavaScript libraries dedicated specifically to visualizing data in web apps.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-to-deal-with-memory-leaks-in-web-apps" class="anchor"&gt;
  &lt;/a&gt;
  How to Deal with Memory Leaks in Web Apps
&lt;/h4&gt;

&lt;p&gt;When building a single-page application (SPA) some web developers pay little attention to keeping the app’s memory usage low. It can lead to memory leaks. This kind of issue can cause increased resource consumption in users’ devices, poor runtime performance, or even program crashes. If you are interested in learning techniques that will help to detect and fix memory leaks in SPAs, the &lt;a href="https://nolanlawson.com/2020/02/19/fixing-memory-leaks-in-web-applications/"&gt;blog post&lt;/a&gt; prepared by Nolan Lowson is exactly what you need.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#insight-into-javascript-seo" class="anchor"&gt;
  &lt;/a&gt;
  Insight into JavaScript SEO
&lt;/h4&gt;

&lt;p&gt;All owners of online businesses are undoubtedly interested in getting the highest search engine rankings to attract more potential customers. It can be hardly achieved without proper JavaScript SEO optimization. But SEO specialists frequently face many challenges on the way to making JavaScript content SEO-friendly. To do the job right, it is necessary to clearly understand how search engines crawl and index JavaScript, ways to facilitate this process, common obstacles in JavaScript SEO, and their solutions. The author of this &lt;a href="https://www.semrush.com/blog/javascript-seo/"&gt;article&lt;/a&gt; has a lot of experience in search marketing and shares valuable tips on optimizing JavaScript code for SEO.&lt;/p&gt;

&lt;p&gt;That’s it for now. Hope that you’ve enjoyed this news digest and deepened your knowledge of JavaScript. Stay tuned for more JavaScript stuff in February.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>news</category>
    </item>
    <item>
      <title>You Don't Know JS: Scope &amp; Closures: What's the Scope?</title>
      <author>Rajat Verma</author>
      <pubDate>Fri, 29 Jan 2021 10:21:25 +0000</pubDate>
      <link>https://dev.to/rajat2502/you-don-t-know-js-scope-closures-what-s-the-scope-g12</link>
      <guid>https://dev.to/rajat2502/you-don-t-know-js-scope-closures-what-s-the-scope-g12</guid>
      <description>&lt;h1&gt;
  &lt;a href="#chapter-1-whats-the-scope" class="anchor"&gt;
  &lt;/a&gt;
  Chapter 1: What's the Scope?
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;While working with JS, have you ever thought, How does it know which variables are accessible by any given statement, and how does it handle two variables of the same name?&lt;/li&gt;
&lt;li&gt;The answers to questions like these take the form of well-defined rules called scope. In this book, we will dig deeper into all the aspects of scope.&lt;/li&gt;
&lt;li&gt;Let's first uncover how the JS engine processes our programs: &lt;/li&gt;
&lt;li&gt;As we studied in the last book that JS is a compiled language and it is first parsed before the execution begins.&lt;/li&gt;
&lt;li&gt;The code author's decisions on where to place variables, functions, and blocks with respect to each other are analyzed according to the rules of scope, during the initial parsing/compilation phase.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#compiled-vs-interpreted" class="anchor"&gt;
  &lt;/a&gt;
  Compiled vs. Interpreted
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Code compilation is a set of steps that process the text of your code and turn it into a list of instructions the computer can understand. Typically, the whole source code is transformed at once, and those resulting instructions are saved as output that can later be executed.&lt;/li&gt;
&lt;li&gt;In case of interpretation, the source code is transformed line by line; each line or statement is executed before immediately proceeding to process the next line of the source code.&lt;/li&gt;
&lt;li&gt;Here is an image showing the difference between the two: &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DMU26PM---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/42200276/106129194-0ad25300-6186-11eb-9ca8-d0b7ebc32f88.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DMU26PM---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/42200276/106129194-0ad25300-6186-11eb-9ca8-d0b7ebc32f88.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's now learn about the compilation of a program:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compiling-code" class="anchor"&gt;
  &lt;/a&gt;
  Compiling Code
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Scope is primarily determined during compilation, so understanding how compilation and execution relate is key in mastering scope.&lt;/li&gt;
&lt;li&gt;There are mainly three stages of compilation:

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Tokenizing/Lexing&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parsing&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code Generation&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#tokenizinglexing" class="anchor"&gt;
  &lt;/a&gt;
  Tokenizing/Lexing
&lt;/h4&gt;

&lt;p&gt;Breaking up a string of characters into meaningful (to the language) chunks, called tokens. For eg:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  var a = 2;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This program would likely be broken up into the following tokens: &lt;code&gt;var&lt;/code&gt; , &lt;code&gt;a&lt;/code&gt; , &lt;code&gt;=&lt;/code&gt; , &lt;code&gt;2&lt;/code&gt; , and &lt;code&gt;;&lt;/code&gt;. Whitespace may or may not be persisted as a token,     depending on whether it's meaningful or not. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#parsing" class="anchor"&gt;
  &lt;/a&gt;
  Parsing
&lt;/h4&gt;

&lt;p&gt;Parsing is the process of taking a stream of tokens and turning it into a tree of nested elements, called the &lt;strong&gt;Abstract Syntax Tree&lt;/strong&gt; or &lt;strong&gt;AST&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;For example, the tree for &lt;code&gt;var a = 2;&lt;/code&gt; might start with a top-level node called &lt;code&gt;VariableDeclaration&lt;/code&gt; , with a child node called &lt;code&gt;Identifier&lt;/code&gt; (whose value is a ), and another child called &lt;code&gt;AssignmentExpression&lt;/code&gt; which itself has a child called &lt;code&gt;NumericLiteral&lt;/code&gt; (whose value is 2 ).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#code-generation" class="anchor"&gt;
  &lt;/a&gt;
  Code Generation
&lt;/h4&gt;

&lt;p&gt;Code generation involves taking an AST and turning it into executable code. This part varies greatly depending on the language, the platform it's targeting, and other factors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The implementation details of a JS engine (utilizing system memory resources, etc.) are much deeper than we will dig here. We'll keep our focus on the observable behavior of our programs and let the JS engine manage those deeper system-level abstractions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#required-two-phases" class="anchor"&gt;
  &lt;/a&gt;
  Required: Two Phases
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The most important observation we can make about the processing of JS programs is that it occurs in (at least) two phases: parsing/compilation first, then execution.&lt;/li&gt;
&lt;li&gt;The separation of a parsing/compilation phase from the subsequent execution phase is an observable fact, There are three program characteristics you can observe to prove this to yourself: syntax errors, early errors, and hoisting.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#syntax-errors-from-the-start" class="anchor"&gt;
  &lt;/a&gt;
  Syntax Errors from the Start
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Consider the program:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var greeting = "Hello";
console.log(greeting);
greeting = ."Hi";
// SyntaxError: unexpected token .
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;When we try to execute this program it shows no output, but instead throws a &lt;code&gt;SyntaxError&lt;/code&gt; about the unexpected &lt;code&gt;.&lt;/code&gt; token right before the &lt;code&gt;"Hi"&lt;/code&gt; string.&lt;/li&gt;
&lt;li&gt;Since, JS is a compiled language and not interpreted (line by line), the string was not printed, and the program was executed as a whole.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#early-errors" class="anchor"&gt;
  &lt;/a&gt;
  Early Errors
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Now, consider:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log("Howdy");
saySomething("Hello", "Hi");
// Uncaught SyntaxError: Duplicate parameter name not
// allowed in this context
function saySomething(greeting, greeting) {
  "use strict";
  console.log(greeting);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;"Howdy"&lt;/code&gt; message is not printed, despite being a well-formed statement. Instead, just like the snippet in the previous section, the SyntaxError here is thrown before the program is executed. &lt;/li&gt;
&lt;li&gt;In this case, it's because strict-mode (opted in for only the saySomething(..) function here) forbids, among many other things, functions to have duplicate parameter names; this has always been allowed in non-strict-mode.&lt;/li&gt;
&lt;li&gt;Here also, we can observe that the code was first fully parsed and then only the execution began. Otherwise, the string &lt;code&gt;"Howdy"&lt;/code&gt; would be printed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hoisting" class="anchor"&gt;
  &lt;/a&gt;
  Hoisting
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Finally, consider:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function saySomething() {
  var greeting = "Hello";
  {
    greeting = "Howdy"; // error comes from here
    let greeting = "Hi";
    console.log(greeting);
  }
}
saySomething();
// ReferenceError: Cannot access 'greeting' before initialization
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The noted ReferenceError occurs from the line with the statement &lt;code&gt;greeting = "Howdy"&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;What's happening is that the greeting variable for that statement belongs to the declaration on the next line, &lt;code&gt;let greeting = "Hi"&lt;/code&gt;, rather than to the previous var greeting = "Hello" statement.&lt;/li&gt;
&lt;li&gt;Here also, we can notice that the JS engine could only know, at the line that error is thrown, that the next statement would declare a block-scoped variable of the same name ( greeting ) is if the JS engine had already processed this code in an earlier pass, and already set up all the scopes and their variable associations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#compiler-speak" class="anchor"&gt;
  &lt;/a&gt;
  Compiler Speak
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Let's now learn how the JS engine identifies the variables and determines their scopes as the program is compiled.&lt;/li&gt;
&lt;li&gt;Let's first see an example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var students = [
  { id: 14, name: "Kyle" },
  { id: 73, name: "Suzy" },
  { id: 112, name: "Frank" },
  { id: 6, name: "Sarah" },
];

function getStudentName(studentID) {
  for (let student of students) {
    if (student.id == studentID) {
      return student.name;
    }
  }
}

var nextStudent = getStudentName(73);

console.log(nextStudent);
// Suzy
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;All occurrences of variables/identifiers in a program serve in one of two "roles": either they're the target of an assignment or they're the source of a value.&lt;/li&gt;
&lt;li&gt;If a variable is being assigned a value, then it is a &lt;strong&gt;target&lt;/strong&gt; otherwise a &lt;strong&gt;source&lt;/strong&gt; of value.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#targets" class="anchor"&gt;
  &lt;/a&gt;
  Targets
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;In the above code, since the &lt;code&gt;students&lt;/code&gt; and &lt;code&gt;nextStudent&lt;/code&gt; variables are assigned a value so they are both targets.&lt;/li&gt;
&lt;li&gt;There are three other target assignment operations in the code that are perhaps less obvious. One of them:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (let student of students) {
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This statement assigns a value to &lt;code&gt;student&lt;/code&gt; for each element of the array &lt;code&gt;students&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another target reference:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getStudentName(73);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, the argument &lt;code&gt;73&lt;/code&gt; is assigned to the parameter &lt;code&gt;studentID&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The last target reference in the program is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function getStudentName(studentID) {
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A &lt;code&gt;function&lt;/code&gt; declaration is a special case of a target reference. Here the identifier &lt;code&gt;getStudentName&lt;/code&gt; is assigned a function as a value.&lt;/p&gt;

&lt;p&gt;So, we have identified all the targets in the program, let's now identify the sources!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sources" class="anchor"&gt;
  &lt;/a&gt;
  Sources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The sources are as follows:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (let student of students)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here the &lt;code&gt;student&lt;/code&gt; is a target but the array &lt;code&gt;students&lt;/code&gt; is a source reference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (student.id == studentID)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this statement, both the &lt;code&gt;student&lt;/code&gt; and &lt;code&gt;studentID&lt;/code&gt; are source references.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return student.name;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;student&lt;/code&gt; is also a source reference in the &lt;code&gt;return&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;getStudentName(73)&lt;/code&gt;, &lt;code&gt;getStudentName&lt;/code&gt; is a source reference (which we hope resolves to a function reference value). In &lt;code&gt;console.log(nextStudent)&lt;/code&gt;, &lt;code&gt;console&lt;/code&gt; is a source reference, as is &lt;code&gt;nextStudent&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In case you were wondering, &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;log&lt;/code&gt; are all properties, not variable references.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cheating-runtime-scope-modifications" class="anchor"&gt;
  &lt;/a&gt;
  Cheating: Runtime Scope Modifications
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Scope is determined as the program is compiled, and should not generally be affected by runtime conditions.&lt;/li&gt;
&lt;li&gt;However, in non-strict-mode, there are technically still two ways to cheat this rule, modifying a program's scopes during runtime.&lt;/li&gt;
&lt;li&gt;The first way is to use the &lt;code&gt;eval(..)&lt;/code&gt; function that receives a string of code to compile and execute on the fly during the program runtime. If that string of code has a &lt;code&gt;var&lt;/code&gt; or &lt;code&gt;function&lt;/code&gt; declaration in it, those declarations will modify the current scope that the &lt;code&gt;eval(..)&lt;/code&gt; is currently executing in:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function badIdea() {
eval("var oops = 'Ugh!';");
console.log(oops);
}

badIdea(); // Ugh!
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;If the &lt;code&gt;eval(..)&lt;/code&gt; function was not present, the program would throw an error that the variable &lt;code&gt;oops&lt;/code&gt; was not defined. But eval(..) modifies the scope of the &lt;code&gt;badIdea()&lt;/code&gt; function at runtime.&lt;/li&gt;
&lt;li&gt;The second way to cheat is the &lt;code&gt;with&lt;/code&gt; keyword, which essentially dynamically turns an object into a local scope — its properties are treated as identifiers in that new scope's block:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var badIdea = { oops: "Ugh!" };

with (badIdea) {
  console.log(oops); // Ugh!
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The global scope was not modified here, but badIdea was turned into scope at runtime rather than compile-time, and its property oops becomes a variable in that scope.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; At all costs, avoid &lt;code&gt;eval(..)&lt;/code&gt; (at least, &lt;code&gt;eval(..)&lt;/code&gt; creating declarations) and &lt;code&gt;with&lt;/code&gt;. Again, neither of these cheats is available in strict-mode, so if you just use strict-mode (you should!) then the temptation goes away!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lexical-scope" class="anchor"&gt;
  &lt;/a&gt;
  Lexical Scope
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;JS's scope is determined at compile-time, the term for this kind of scope is &lt;strong&gt;lexical scope&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;"Lexical" is associated with the "lexing" stage of compilation, as discussed earlier in this chapter.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; It's important to note that compilation doesn't do anything in terms of reserving memory for scopes and variables.&lt;/p&gt;

&lt;p&gt;That's it for this chapter. I will be back with the notes of the next chapter. &lt;/p&gt;

&lt;p&gt;Till then, &lt;strong&gt;Happy Coding!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you enjoyed reading these notes or have any suggestions or doubts, then do let me know your views in the comments. &lt;br&gt;
In case you want to connect with me, follow the links below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/rajat2502"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/rajat2502"&gt;GitHub&lt;/a&gt; | &lt;a href="https://twitter.com/rajatverma2502"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>8 Things I wish I knew as a Junior Developer</title>
      <author>Simon Holdorf</author>
      <pubDate>Fri, 29 Jan 2021 09:03:07 +0000</pubDate>
      <link>https://dev.to/simonholdorf/8-things-i-wish-i-knew-as-a-junior-developer-4g7d</link>
      <guid>https://dev.to/simonholdorf/8-things-i-wish-i-knew-as-a-junior-developer-4g7d</guid>
      <description>&lt;p&gt;Being a junior developer is not easy. You have a lot of work to do, and you're expected to know everything that's going on in your company. These tips will help you get started on the right foot.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-dont-be-afraid-to-ask-questions" class="anchor"&gt;
  &lt;/a&gt;
  1. Don't be afraid to ask questions
&lt;/h2&gt;

&lt;p&gt;Asking questions is probably one of the most critical skills for any programmer. You should always try to learn something new when working on a problem or feature, even if it's just some new concept that might come in handy later. &lt;/p&gt;

&lt;p&gt;Besides, there are times when you will encounter issues that have already been solved by someone else (such as Stack Overflow). In these cases, don't be afraid to ask for help! It's better to spend 10 minutes googling and asking questions than spending 2 hours debugging an issue that someone else has already solved. &lt;/p&gt;

&lt;p&gt;I think this is true for &lt;a href="https://thesmartcoder.dev/the-road-from-junior-to-senior-developer/"&gt;senior developers&lt;/a&gt;. You never know what obscure problem someone else might run into that will save them time down the road (or even give them ideas for features they could implement). Even if it doesn't help anyone directly, every question asked and answered helps everyone indirectly by increasing our collective knowledge base. &lt;/p&gt;

&lt;p&gt;If your company has a mentorship program or internal forums where you can ask questions, take advantage of them! Even if they aren't related to your specific project or team, asking about general issues will likely still help you out in the long run.  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-dont-worry-about-seniority" class="anchor"&gt;
  &lt;/a&gt;
  2. Don't worry about seniority
&lt;/h2&gt;

&lt;p&gt;This is probably the most critical point on this list. It's straightforward to get caught up in the idea of seniority and worry about whether or not you are "senior enough" to do a particular task. There is no such thing as being "senior enough" for anything in my experience. If you think you are ready, then go ahead and try it! &lt;/p&gt;

&lt;p&gt;Even if you fail at first, learn from your mistakes and move on. You can always ask for help if you need it. Just remember that seniority is all relative. There will always be someone who has more experience than you, so don't let that hold you back from doing something because of how it will look on your resume or portfolio.  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-be-proactive" class="anchor"&gt;
  &lt;/a&gt;
  3. Be proactive
&lt;/h2&gt;

&lt;p&gt;To be successful in software development, immensely as a junior developer, it helps to take the initiative when solving problems or implementing features. This means going above and beyond what was asked of you and making sure that things are done the first time correctly (it also makes it easier for other developers to review your code).&lt;/p&gt;

&lt;p&gt;I personally find this approach useful because it allows me to learn more about the problem domain I am working in (which is often a requirement when working with larger projects). Asking questions during these times can be helpful, too, since they often lead to discussions about why individual decisions were made or why certain approaches were taken (this may help guide future decision-making). &lt;/p&gt;

&lt;p&gt;Even if your ideas aren't implemented right away, they might inspire others or even make their way into future versions of the product (I have seen this happen many times before). &lt;/p&gt;

&lt;p&gt;This also helps build trust with your team members since they know that you will do what needs to be done without continually asking them for guidance.  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-write-good-code" class="anchor"&gt;
  &lt;/a&gt;
  4. Write good code
&lt;/h2&gt;

&lt;p&gt;This may seem obvious, but it's straightforward to get caught up in the idea of shipping features and not worrying about how they are implemented. This is especially true when working on a team with many developers (or even working alone). &lt;/p&gt;

&lt;p&gt;However, writing good code makes it easier for other developers to read and review your work (which saves time in the long run). It also makes it easier for you to understand your own code later on (saving time in the short run). &lt;/p&gt;

&lt;p&gt;If you have never written tests before, this is another area where you can take the initiative and learn more about your language or framework by reading about testing strategies or writing some simple tests yourself. If you write tests, they will help you catch bugs early on instead of debugging them after a feature has been shipped. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-read-code" class="anchor"&gt;
  &lt;/a&gt;
  5. Read code
&lt;/h2&gt;

&lt;p&gt;This one is pretty obvious, but it's still essential. Reading code is a great way to learn how things are done in other projects and languages. It also allows you to see what kinds of problems developers face when writing software, which will help you with problem-solving later on in your career.&lt;/p&gt;

&lt;p&gt;If you ever get stuck on something and need help from someone else, being able to explain the problem is extremely important. This helps with communication between developers as well as collaboration on projects (which should be the primary goal of any developer). Also, reading code may just give you some ideas for your own project! &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#6-learn-from-others" class="anchor"&gt;
  &lt;/a&gt;
  6. Learn from others
&lt;/h2&gt;

&lt;p&gt;This point should be obvious too, but I think it's important enough that I wanted to mention it anyway. Take advantage of opportunities to learn from others! For example, if someone asks a question on Stack Overflow that you know the answer, go ahead and answer it! You might also consider sharing your knowledge by blogging or speaking at meetups/conferences. Even if your answer isn't directly related to your job duties, there is still value in answering questions since you are likely learning something new while doing so (this might help solve future problems that come up as well). &lt;/p&gt;

&lt;p&gt;Also, keep an eye out for articles/videos/podcasts/books that might be relevant to what you are working on. These can often explain why certain decisions were made and how they could be improved upon. &lt;/p&gt;

&lt;p&gt;Finally, don't forget about books! Books are probably one of the best ways to learn new things because they allow you to read at your own pace without being interrupted by meetings or interruptions from coworkers. &lt;/p&gt;

&lt;p&gt;There are so many great books out there that cover a wide range of topics. Ensure that whatever book(s) you choose covers topics relevant to what you do day-to-day!   &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#7-practice-what-you-learn" class="anchor"&gt;
  &lt;/a&gt;
  7. Practice what you learn
&lt;/h2&gt;

&lt;p&gt;This is a great way to solidify your knowledge of a topic, and it's also an easy way to show off what you have learned to others (such as interviewers or potential employers). You could start doing some &lt;a href="https://thesmartcoder.dev/9-awesome-projects-you-can-build-with-vanilla-javascript/"&gt;JavaScript practice projects&lt;/a&gt;, for example.&lt;/p&gt;

&lt;p&gt;It might be a little more difficult if you are working on a large project, but there are still opportunities to practice what you learn. For example, maybe you can implement some features using the latest technology that your company just started using. If not, you can try implementing some small feature using this new technology and sharing it with your team members. &lt;/p&gt;

&lt;p&gt;The point is that even if you aren't able to use the new stuff at work, there are plenty of opportunities outside of work where you can show off what you have learned (such as meetups/conferences or hackathons). You might even consider writing blog posts about the technologies/frameworks that interest you. I have found many useful articles/videos on blogs before!   &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#8-dont-worry-about-experience" class="anchor"&gt;
  &lt;/a&gt;
  8. Don't worry about experience
&lt;/h2&gt;

&lt;p&gt;I think this one applies more to junior developers who have recently graduated from college or Bootcamp. It's very easy for junior developers who just graduated to focus too much on building up their resume and acquiring "senior level" experience instead of focusing on learning new things and developing their skillset. &lt;/p&gt;

&lt;p&gt;However, this approach doesn't always work out well in the long run because it leads to junior developers trying to do things they aren't ready for yet (and then getting frustrated when they fail). &lt;/p&gt;

&lt;p&gt;Instead, I would recommend focusing on learning new things regardless of whether or not they will help your resume in the short term. If anything, take advantage of opportunities to build your skillset and give yourself an edge over other candidates during interviews (even if they don't lead directly to a job offer). &lt;/p&gt;

&lt;p&gt;Also, don't worry about whether or not something counts as "senior-level experience". Only worry about whether or not something will help you become a better developer!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#final-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;Junior developers should really focus on the fundamentals of programming and building projects while also improving their problem-solving skills. This will help you develop into a better developer over time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you like what I write and want to support me and my work, please follow me on &lt;a href="https://twitter.com/simonholdorf"&gt;Twitter&lt;/a&gt; to learn more about programming, making, writing &amp;amp; careers🥰&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>todayilearned</category>
      <category>career</category>
    </item>
    <item>
      <title>Enough JavaScript to get you Started : #19 IIFE✨</title>
      <author>Adarsh Pandya</author>
      <pubDate>Fri, 29 Jan 2021 08:04:30 +0000</pubDate>
      <link>https://dev.to/whoadarshpandya/enough-javascript-to-get-you-started-19-iife-3j2k</link>
      <guid>https://dev.to/whoadarshpandya/enough-javascript-to-get-you-started-19-iife-3j2k</guid>
      <description>&lt;h3&gt;
  &lt;a href="#iife" class="anchor"&gt;
  &lt;/a&gt;
  IIFE ✨
&lt;/h3&gt;

&lt;p&gt;👉 IIFE or &lt;code&gt;immediately invoked functions as expressions&lt;/code&gt; simply refers to a function which runs as soon as it is defined.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;👉 Which means if you have to write a function which runs in beginning of your web app , you can use IIFE.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;👉 in early days if we want to do something like this we need to define a function and call it... &lt;br&gt;&lt;/p&gt;

&lt;p&gt;👉 but with IIFE design pattern the syntax and the code makes much more sense. &lt;br&gt;&lt;/p&gt;

&lt;p&gt;👉 IIFE takes 2 parentheses , one is meant for defining a anonymous function and another is meant to call the anonymous function.&lt;/p&gt;

&lt;p&gt;👉 &lt;strong&gt;&lt;code&gt;Syntax&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(
  // anonymous function
  function () {
    //function body
})();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;br&gt;
👉 We'll create one IIFE which will greet user as soon as he/she comes to our website 😀 &lt;br&gt;&lt;br&gt;
👉 &lt;strong&gt;&lt;code&gt;Example : the old way&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function greet () {
    alert('hello user ! how are you?');
}

greet();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;👉 &lt;strong&gt;&lt;code&gt;Example : the new way&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(function(){
    alert('hello user ! how are you?');
})();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;👉 &lt;strong&gt;&lt;code&gt;Example : Arrow functions as IIFE&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;( () =&amp;gt; {
      alert('hello user ! how are you?');
})();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let me know in comment section if you have any doubt or feedback. it's always worth to give time to the thriving developer community :) &lt;br&gt;
&lt;br&gt;
Keep Coding ❤
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hey-let-connect" class="anchor"&gt;
  &lt;/a&gt;
  Hey , Let' Connect👋
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://twitter.com/codarsh"&gt;Twitter&lt;/a&gt; /&lt;br&gt;
 &lt;a href="https://github.com/WhoAdarshPandya/"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>100daysofcode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Create Loading Animations with SVG and CSS</title>
      <author>James Sinkala</author>
      <pubDate>Fri, 29 Jan 2021 07:23:40 +0000</pubDate>
      <link>https://dev.to/xinnks/create-loading-animations-with-svg-and-css-1d0p</link>
      <guid>https://dev.to/xinnks/create-loading-animations-with-svg-and-css-1d0p</guid>
      <description>&lt;p&gt;One of the best ways to go about creating loading animations for your web projects that doesn't involve loading assets from your web server, external CDN's or third party Javascript plugins is creating it within your web app using the same web technologies you use to render them.&lt;br&gt;
This ensures that your animations appear just as soon as you need them making sure the user experience isn't affected based on the speed of a user's connection.&lt;/p&gt;

&lt;p&gt;In this tutorial we are going to make a simple loading animation for web projects using HTML and CSS.&lt;/p&gt;

&lt;p&gt;The end result we are after is the following animation.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--huFQ3nbp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gqmymopg8bignlcfhvcx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--huFQ3nbp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gqmymopg8bignlcfhvcx.gif" alt="Loading Animation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add the following html template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"svg-loader"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"svg-container"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 100 100"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;circle&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loader-svg bg"&lt;/span&gt; &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="na"&gt;r=&lt;/span&gt;&lt;span class="s"&gt;"45"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/circle&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;circle&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loader-svg animate"&lt;/span&gt; &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="na"&gt;r=&lt;/span&gt;&lt;span class="s"&gt;"45"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/circle&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As evident from the illustration above the animation template consists of two circles one on top of another, with the first circle being thicker than the second one both having the same circumference giving the illusion of one circle being inside the other.&lt;/p&gt;

&lt;p&gt;The cx and cy attributes inside the circles are the x-axis and y-axis coordinates respectively of the two circles. They make sure that the two circles are centered on the same coordinate.&lt;/p&gt;

&lt;p&gt;Add the following css:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.svg-loader&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-around&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.loader-svg&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;stroke-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;stroke-linecap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;148&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.loader-svg.bg&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;stroke-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;207&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;205&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;245&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The above css makes sure the loading component is centered within it's container also making sure there are different stroke widths and colors for the two circles.&lt;/p&gt;

&lt;p&gt;We then animate the second circle, which will be on top of the first circle with CSS to complete our loading animation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.animate&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;stroke-dasharray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;242.6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fill-animation&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;fill-animation&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;stroke-dasharray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40&lt;/span&gt; &lt;span class="m"&gt;242.6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;stroke-dashoffset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;stroke-dasharray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;141.3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;stroke-dashoffset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;141.3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;stroke-dasharray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40&lt;/span&gt; &lt;span class="m"&gt;242.6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;stroke-dashoffset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;282.6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here's what's going on in the above css.&lt;br&gt;
When we draw our circle it is simply a single dash stroke painting the outline of our shape from beginning to the end of the circle, the &lt;em&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray"&gt;stroke-dasharray&lt;/a&gt;&lt;/em&gt; attribute gives us the ability to break that into a pattern of dashes and gaps. We can exploit this feature to obtain the animation end result that we want.&lt;/p&gt;

&lt;p&gt;In order to have a smooth animation effect like the one above we need to know the circumference of the circle, where circumference = 2 x &lt;em&gt;pi&lt;/em&gt; x &lt;em&gt;radius&lt;/em&gt;. We then use the &lt;em&gt;stroke-dasharray&lt;/em&gt; attribute to draw a maximum of one dash and gap alternating their sizes at different states of the animation while maintaining the circumference length when the two are added.&lt;/p&gt;

&lt;p&gt;With a circle radius of 45 we get the circumference of 282.6, so when we set the &lt;em&gt;stroke-dasharray&lt;/em&gt; value to 141.3 it means that the dash and gap have that same value which add to give a sum of 282.6.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;&lt;a href="https://developer.mozilla.org/en-us/docs/Web/SVG/Attribute/stroke-dashoffset"&gt;stroke-dashoffset&lt;/a&gt;&lt;/em&gt; attribute is a presentation attribute defining an offset on the rendering of the associated dash array, this offset gives the rotational effect to the loading animation, otherwise the animation will appear broken. This is all that is happening in the &lt;strong&gt;fill-animation&lt;/strong&gt; animation. &lt;br&gt;
We finish by applying this animation to the second circle with the &lt;em&gt;.animation&lt;/em&gt; class making sure that this animation goes on infinitely.&lt;/p&gt;

&lt;p&gt;This is just a base to the sort of animations one can make with SVG and CSS, get experimental and creative creating fast and pixel perfect loading animations for your web projects.&lt;/p&gt;

</description>
      <category>css</category>
      <category>svg</category>
      <category>webdev</category>
      <category>animation</category>
    </item>
    <item>
      <title>How Redux works ? (Only HTML &amp; Pure JS)</title>
      <author>Trung Nguyen</author>
      <pubDate>Fri, 29 Jan 2021 04:15:42 +0000</pubDate>
      <link>https://dev.to/papercoding22/how-redux-works-4gnl</link>
      <guid>https://dev.to/papercoding22/how-redux-works-4gnl</guid>
      <description>&lt;p&gt;This is a code example of Redux with only HTML &amp;amp; pure JavaScript. &lt;a href="https://codesandbox.io/s/fast-leftpad-ruo9l?file=/index.html"&gt;Code sandbox&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="nx"&gt;DOCTYPE&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Redux&lt;/span&gt; &lt;span class="nx"&gt;basic&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/title&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://unpkg.com/redux@latest/dist/redux.min.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Clicked&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&amp;gt; time&lt;/span&gt;&lt;span class="err"&gt;s
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;increment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;decrement&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;-&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;incrementIfOdd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increment&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;odd&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;incrementAsync&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increment&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INCREMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DECREMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
          &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Redux&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;valueEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;valueEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;increment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INCREMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;decrement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DECREMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;incrementIfOdd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INCREMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;incrementAsync&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INCREMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/html&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The webpage looks like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e_jMpc4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pv5xw09z5mgajl5d4gyg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e_jMpc4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pv5xw09z5mgajl5d4gyg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;createStore&lt;/code&gt; &amp;amp; &lt;code&gt;counterReducer&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Counter reducer&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;counterReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INCREMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DECREMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Create store&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Redux&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterReducer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;createStore&lt;/code&gt; receives a &lt;code&gt;counterReducer&lt;/code&gt; function as a param and return an object called store.&lt;/li&gt;
&lt;li&gt;This is the diagram of createStore function with mental model as a class.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ibbHhYNE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d0wre1y2pper4p1zdufu.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is &lt;a href="https://gist.github.com/gaearon/ffd88b0e4f00b22c3159"&gt;simplified version of &lt;code&gt;createStore&lt;/code&gt; in redux source code&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;currentReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;currentState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;listeners&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isDispatching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentState&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDispatching&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Reducers may not dispatch actions.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;isDispatching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;currentState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;isDispatching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;replaceReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nextReducer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;currentReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nextReducer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@@redux/INIT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@@redux/INIT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;replaceReducer&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;currentReducer&lt;/code&gt; = &lt;code&gt;counterReducer&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;currentState&lt;/code&gt; = &lt;code&gt;preloadedSate&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;When store is created, it initially &lt;code&gt;dispatch&lt;/code&gt; with action type is &lt;code&gt;'@@redux/INIT'&lt;/code&gt; so that every reducer returns their initial state. In case &lt;code&gt;counterReducer&lt;/code&gt;, it returns &lt;code&gt;0&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-happens-inside-raw-dispatch-endraw-function-" class="anchor"&gt;
  &lt;/a&gt;
  What happens inside &lt;code&gt;dispatch&lt;/code&gt; function ?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Dispatch function inside Redux store&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
    &lt;span class="nx"&gt;currentState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listeners&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentListeners&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nextListeners&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The function &lt;code&gt;currentReducer&lt;/code&gt; is called which is &lt;code&gt;counterReducer&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Because action type is &lt;code&gt;@@redux/INIT&lt;/code&gt; and &lt;code&gt;currentState&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;, so &lt;code&gt;counterReducer&lt;/code&gt; returns &lt;code&gt;0&lt;/code&gt; as default value which is the initial state of the store.&lt;/li&gt;
&lt;li&gt;Now, &lt;code&gt;currentState&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;After updating the state with initial value, it calls all listeners that is subscribing the store to notify.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;valueEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;valueEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In this case, we have &lt;code&gt;render()&lt;/code&gt; function, it is called back and update the DOM element with the initial value.&lt;/li&gt;
&lt;li&gt;Now in the browser, we will se the number &lt;code&gt;0&lt;/code&gt; shown.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#updating-state-when-action-is-sent" class="anchor"&gt;
  &lt;/a&gt;
  Updating state when action is sent
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;increment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INCREMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;When users click on the button "+", store dispatches the action with type &lt;code&gt;'INCREMENT'&lt;/code&gt; to the reducer of the store and the flow is the same as explanation above.&lt;/li&gt;
&lt;li&gt;Function &lt;code&gt;currentReducer&lt;/code&gt; is called with state is &lt;code&gt;0&lt;/code&gt; and action's type is &lt;code&gt;'INCREMENT'&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Because &lt;code&gt;'INCREMENT'&lt;/code&gt; is a case inside &lt;code&gt;counterReducer&lt;/code&gt; function, so the new state now is equal to &lt;code&gt;0 + 1&lt;/code&gt; and returned to the state of the store.&lt;/li&gt;
&lt;li&gt;Next, again it notifies listeners to let them know state is updated successfully.&lt;/li&gt;
&lt;li&gt;Now, in the screen we will see Clicked: 1 times&lt;/li&gt;
&lt;li&gt;The flow is similar to other action types&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So this is basically how Redux works under the hood. In real life project, Redux store may have multiple &lt;code&gt;reducers&lt;/code&gt; and &lt;code&gt;midleware&lt;/code&gt;, and 3rd-party libraries enhance Redux workflow. But at very its core that's how it works basically !&lt;/p&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Easy Way to console.log() w/o console.log()
</title>
      <author>Brad Beggs</author>
      <pubDate>Fri, 29 Jan 2021 01:25:19 +0000</pubDate>
      <link>https://dev.to/brad_beggs/easy-way-to-console-log-w-o-console-log-4f95</link>
      <guid>https://dev.to/brad_beggs/easy-way-to-console-log-w-o-console-log-4f95</guid>
      <description>&lt;p&gt;Whether you’re hunting for a bug or writing code, you likely use Javascript’s ‘console.log()’. It works but &lt;code&gt;console&lt;/code&gt; has 19 other methods to assist your development and debugging. &lt;/p&gt;

&lt;p&gt;Most notably is &lt;code&gt;console.table()&lt;/code&gt; when working with objects and arrays, which provides a prettier format for these data types. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consoletable-for-arrays-objects-and-mixed-data-types" class="anchor"&gt;
  &lt;/a&gt;
  console.table() - for arrays, objects, and mixed data types
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#output-an-array-and-array-of-arrays" class="anchor"&gt;
  &lt;/a&gt;
  Output an Array and Array of Arrays
&lt;/h3&gt;

&lt;p&gt;‘console.table’ provides the index on the left and indexed values or just ‘value’ across the top for array or array of arrays. &lt;/p&gt;

&lt;p&gt;A 1d array with &lt;code&gt;.table() vs .log()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;namesStartingWithA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alec&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alexis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Anastasia&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andre&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrea&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrew&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrew&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;namesStartingWithA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="nx"&gt;Index&lt;/span&gt;    &lt;span class="nx"&gt;Value&lt;/span&gt; 
&lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alec&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alexis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Anastasia&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andre&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrea&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrew&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrew&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;namesStartingWithA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// same data as above looks like this&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alec&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alexis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Anastasia&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andre&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrea&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrew&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrew&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A 2d array with &lt;code&gt;.table() vs .log()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;namesStartingWithA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alec&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alexis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Anastasia&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andre&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrea&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrew&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrew&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;namesStartingWithA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="nx"&gt;Index&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;           &lt;span class="mi"&gt;1&lt;/span&gt;          &lt;span class="mi"&gt;2&lt;/span&gt;        &lt;span class="nx"&gt;Value&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alec&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;       &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alexis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;       
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Anastasia&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andre&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrea&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;    
&lt;span class="mi"&gt;2&lt;/span&gt;                                       &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrew&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;                                       &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrew&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;namesStartingWithA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrew&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrew&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output-of-objects-and-arrays-of-objects" class="anchor"&gt;
  &lt;/a&gt;
  Output of Objects and Arrays of Objects
&lt;/h3&gt;

&lt;p&gt;When outputting an array of objects,  the keys become headers. If the data has many values or many keys, avoid using ‘console.table()’.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;namesStartingWithAWithId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="nx"&gt;Index&lt;/span&gt;   &lt;span class="nx"&gt;Name&lt;/span&gt;            &lt;span class="nx"&gt;ID&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alec&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;      &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alexis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;    &lt;span class="mi"&gt;69&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Anastasia&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="mi"&gt;815&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andre&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrea&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;    &lt;span class="mi"&gt;062&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrew&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;    &lt;span class="mi"&gt;97&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrew&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;    &lt;span class="mi"&gt;772&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;namesStartingWithAWithId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;86&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#show-selected-columns-only" class="anchor"&gt;
  &lt;/a&gt;
  Show Selected Columns Only
&lt;/h3&gt;

&lt;p&gt;It is possible to select just the column(s) you want to see.&lt;/p&gt;

&lt;p&gt;For example: ‘console.table(data, [‘columnName’])’  You do need the brackets and single quote. &lt;code&gt;[‘ ‘]&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;namesStartingWithAWithId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; 

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="nx"&gt;Index&lt;/span&gt;      &lt;span class="nx"&gt;ID&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;69&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="mi"&gt;815&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;68&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;062&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="mi"&gt;97&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;     &lt;span class="mi"&gt;772&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#not-recommended-on-complex-or-long-data" class="anchor"&gt;
  &lt;/a&gt;
  Not Recommended On Complex or Long Data
&lt;/h3&gt;

&lt;p&gt;Because ‘console.table()’ is highly visual, long arrays or complex objects are likely harder to understand in this table format unless you specify the column(s). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-useful-consoletable-tidbits" class="anchor"&gt;
  &lt;/a&gt;
  Other Useful console.table Tidbits
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;In Firefox, &lt;code&gt;console.table()&lt;/code&gt; displays only 1000 rows. &lt;/li&gt;
&lt;li&gt;Click a header column name and the browser sorts the table based on the column data (ASC and DSC).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#reference" class="anchor"&gt;
  &lt;/a&gt;
  Reference
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Console/table"&gt;MDN console.table&lt;/a&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>A Walking Stick and a .vimrc 🌄 ⌨️</title>
      <author>John William Davis</author>
      <pubDate>Fri, 29 Jan 2021 00:51:02 +0000</pubDate>
      <link>https://dev.to/papadavis47/a-walking-stick-and-a-vimrc-27jl</link>
      <guid>https://dev.to/papadavis47/a-walking-stick-and-a-vimrc-27jl</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-do-these-two-things-have-in-common" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What do these two things have in common?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The best thing about Vim, the reason why I have come to love this particular piece of software so much, is that it can be so incredibly personal and unique for each user. I love the way that I can effectively have my own personal Vim designed by me - specifically for me. What makes this possible is the &lt;code&gt;.vimrc&lt;/code&gt; file. The &lt;code&gt;.vimrc&lt;/code&gt; file can be tailored a bit at a time as my workflow changes. And my &lt;code&gt;.vimrc&lt;/code&gt; changes as my knowledge and my skill level, with Vim itself and with programming in general, increases.&lt;/p&gt;

&lt;p&gt;This past summer my 11-year-old son found a fallen tree branch, about two meters long, on the forest floor while we were camping in the mountains. He began whittling on the branch and using it as a walking stick. I watched him make some designs on the bark with his pocket knife. He took the walking stick home with him from the mountains and he continued working on it, carving more designs, whittling the wood to make a placeholder that fit his hand perfectly.&lt;/p&gt;

&lt;p&gt;Recently, I began seeing the parallels between my son's walking stick and my &lt;code&gt;.vimrc&lt;/code&gt; file. By editing my &lt;code&gt;.vimrc&lt;/code&gt; file, adding plugins using &lt;a href="https://github.com/VundleVim/Vundle.vim"&gt;Vundle&lt;/a&gt; ( &lt;em&gt;Vundle itself being a brilliant plugin&lt;/em&gt; ), making leader key bindings, finding the themes that I like working with, adding all sorts of settings, tweaking just about everything - I am making it more and more practical for me. I am making the walking stick that I want to take with me on a hiking trail.&lt;/p&gt;

&lt;p&gt;In customizing my &lt;code&gt;.vimrc&lt;/code&gt;, Vim becomes a tool that can be any shape or colour I want it to be. And I have found that the challenge of sharpening this tool is very satisfying.&lt;/p&gt;

&lt;p&gt;From running the &lt;code&gt;vimtutor&lt;/code&gt; command for the first time ( &lt;em&gt;where you can first learn how to exit the initially weird environment that is Vim&lt;/em&gt; ) to full-on expert in your particular way of working - your &lt;code&gt;.vimrc&lt;/code&gt; can change and grow - getting sharper and sharper. I like to think of the &lt;code&gt;.vimrc&lt;/code&gt; file ( &lt;em&gt;or other dotfiles such as &lt;code&gt;.bashrc&lt;/code&gt;, &lt;code&gt;.zshrc&lt;/code&gt;, &lt;code&gt;.tmux.conf&lt;/code&gt;, &lt;code&gt;.gitconfig&lt;/code&gt;&lt;/em&gt; ) as weirdly creative yet extremely practical canvases on which the growth of a software developer is inadvertently charted. &lt;/p&gt;

&lt;p&gt;Of course, I do not change and experiment with my &lt;code&gt;.vimrc&lt;/code&gt; file in order to "chart growth". I do it because I am seeking to become a more proficient and efficient developer. But, if I were to look back at the previous versions of my dotfiles, I would definitely see growth and increased understanding. An increasing understanding of Vimscript, sure, but also of programming concepts in general. And, most importantly, the various dotfile versions chart an increased understanding of &lt;strong&gt;what works for me&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#everybody-uses-vim-differently" class="anchor"&gt;
  &lt;/a&gt;
  Everybody uses Vim differently.
&lt;/h4&gt;

&lt;p&gt;For example, &lt;a href="https://twitter.com/kelseyhightower"&gt;Kelsey Hightower&lt;/a&gt;, Staff Developer Advocate - Google Cloud Platform, has said publicly that he uses Vim without any plugins whatsoever. I listened to a podcast in which he explained that writing code with a simple Vim setup, without syntax highlighting enabled, helps him to focus on each line. And that sounds cool to me. While foregoing plugins is not something that I feel I want to do, the great thing about Vim is that your configuration ( &lt;em&gt;or lack of configuration&lt;/em&gt; ) is all yours to do with what you want. If you want to code with Vim out of the box without plugins and you feel that helps your work - that is great. 💯&lt;/p&gt;

&lt;p&gt;I have a folder containing &lt;a href="https://github.com/papadavis47/pd47dotfiles"&gt;my dotfiles&lt;/a&gt; under version control for awhile now and this is what I see when I run &lt;code&gt;git log --oneline&lt;/code&gt; on that repo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5dXxD6wI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/db6lm8zncfjmgqpbwxlv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5dXxD6wI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/db6lm8zncfjmgqpbwxlv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each one of the commits represents at least a few things I have learned to make my workflow more efficient.&lt;/p&gt;

&lt;p&gt;For me, change is what my &lt;code&gt;.vimrc&lt;/code&gt; is all about. It is a living document. Experimentation is all.&lt;/p&gt;

&lt;p&gt;Sometimes I work with a vim that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ql8IJAu7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hz82xzoa9n5oqk6mymvu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ql8IJAu7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hz82xzoa9n5oqk6mymvu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And sometimes it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0mHf6v4A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/so7pwkdy7vhixo1vo2ee.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0mHf6v4A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/so7pwkdy7vhixo1vo2ee.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will try a particular plugin for awhile, and if I find it useful, then great - I have made a discovery to help my work. But if I find I do not like it, it is an easy process to uninstall it using Vundle.&lt;/p&gt;

&lt;p&gt;I have learned some very useful things through the book,&lt;br&gt;
&lt;a href="https://learnvimscriptthehardway.stevelosh.com/"&gt;Learn Vimscript the Hard Way&lt;/a&gt; by Steve Losh. There is a free HTML version - or you can purchase a paper copy or an ebook through the website. &lt;/p&gt;

&lt;p&gt;I can not say enough about the wonderful repository,&lt;br&gt;
&lt;a href="https://github.com/akrawchyk/awesome-vim"&gt;Awesome Vim&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I have also proudly ripped off some great stuff from the repository, &lt;a href="https://github.com/amix/vimrc"&gt;The Ultimate vimrc&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Plus, a special mention to the &lt;a href="https://github.com/r00k/dotfiles"&gt;dotfiles&lt;/a&gt; of &lt;a href="https://www.benorenstein.com/"&gt;Ben Orenstein&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, &lt;a href="https://github.com/mhinz/vim-galore"&gt;Vim-Galore&lt;/a&gt; has been an amazing help. Of course, I have never taken from these open source files wholesale. I digested the changes as I went along - a bit at a time.&lt;/p&gt;

&lt;p&gt;The resources above, and many other that can be found by searching Google and GitHub, are plenty for anyone wanting help in making the most awesome walking stick - tailor made for themselves.&lt;/p&gt;

&lt;p&gt;Vim is a tool that actually uses its own programming language - and a fascinating one at that. Vim source code is written in the C language - but Vimscript ( &lt;em&gt;mentioned earlier in this post&lt;/em&gt; ) is what one uses to write plugins and add functionality onto Vim. While I do not use Vimscript in my day to day work beyond customizing my Vim configuration - I quite like the challenge of learning Vimscript and slowly improving my use of it. Eventually, I will use it to write my own plugins for use in my own work. I can then share those plugins with anyone else who might be interested. If that is not a rich piece of software - I do not know what is.&lt;/p&gt;

&lt;p&gt;For more advanced features, I like this video by &lt;a href="https://github.com/lambdalisue"&gt;Alisue Lambda&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/J5BX1FXnKBw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And I like these two by &lt;a href="https://ctoomey.com/"&gt;Chris Toomey&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wlR5gYd6um0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lwD8G1P52Sk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The benefits of writing code with a modular editor take a bit of work and practice to realize - but are well worth the effort.&lt;/p&gt;

&lt;p&gt;The Vim way of editing code can also be achieved and transferred to other editors - such as VS Code ( &lt;em&gt;also incredibly rich software&lt;/em&gt; ) with it's wonderful community and collection of extensions - including a terrific one called &lt;a href="https://github.com/VSCodeVim/Vim"&gt;vscodevim&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Or to Atom - with its lightness and speed and a very well made &lt;a href="https://github.com/t9md/atom-vim-mode-plus"&gt;vim emulation package&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I use VS Code and Atom from time to time - depending on what I am working on. &lt;/p&gt;

&lt;p&gt;Classic Vim, VS Code, or Atom - all three are brilliant open source software. With the Vim key binding plugins available, I can keep consistency between my tools.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note to myself&lt;/strong&gt;: &lt;em&gt;Always be searching the forest floor.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Making your own walking stick is simply a better feeling than buying one. You own the tool in a way that you would not otherwise.&lt;/p&gt;

&lt;p&gt;The biggest lesson I have learned for myself through making my own &lt;em&gt;programming&lt;/em&gt; walking stick?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Continually find what works for me - and go with it&lt;/em&gt; 🤓&lt;/p&gt;

</description>
      <category>vim</category>
      <category>productivity</category>
      <category>beginners</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Running a Small E-Commerce-like Website for Free</title>
      <author>ngavinsir</author>
      <pubDate>Thu, 28 Jan 2021 19:41:39 +0000</pubDate>
      <link>https://dev.to/ngavinsir/running-a-small-e-commerce-like-website-for-free-1cbc</link>
      <guid>https://dev.to/ngavinsir/running-a-small-e-commerce-like-website-for-free-1cbc</guid>
      <description>&lt;p&gt;As an undergraduate student in one of the universities in Indonesia, we are mostly obligated to participate in a community empowerment program, where we are supposed to help the locals by applying our knowledge. Usually, we have to physically be in the community area to take part in this program, but because of the covid pandemic, the program was held online.&lt;/p&gt;

&lt;p&gt;There were several problems that can be solved, so we divided the tasks among multiple people. My team got a task to help the locals to promote their products and villas online. This problem is fascinating to be solved because they had tried to publish their products and villas on mainstream e-commerce platforms, but it’s not easy to comply with all the rules. So there are only a few products that can be promoted on those platforms. After several discussions with the locals and my team, we decided to launch and manage our own website to promote everything about this place.&lt;/p&gt;

&lt;p&gt;Then, we planned everything that we want to display on the website. We want to promote four types of items on the website: local crafts (sculpture, batik, wood crafts, etc.), villas, regional destinations, and vacation packages. We also experimented on the landing page’s design so that it can be attractive and appealing to potential tourists. Additionally, we added a route guide on how to get to the place by any kind of public transports (bus, angkot, motorcycle, commuter rail, etc.). The guide includes the schedule for each public transportation and the fares.&lt;/p&gt;

&lt;p&gt;Initially, we planned to host all the data that needs to be displayed on the website in a relational database (PostgreSQL) and manage the contents through a simple CMS like WordPress or a more modern CMS like Strapi. Since we have to rent a server to host those CMS, we decided to research on the alternatives that can be used for free and without the need to rent a server. After thorough exploration, we found out about git-based CMS, a CMS that utilizes a git server to store all the content information. There are several services that offer a git-based CMS system, but we chose Forestry because we think it has good UI/UX, and it’s more mature than the alternatives. Forestry stores all of the content in a Github repo, so we can have a fully working CMS for free.&lt;/p&gt;

&lt;p&gt;After that, we have to decide what technology we will use for the frontend. It’s really exciting for me to do a small project like this because I can try and validate new cutting-edge technology. Some months before, I discovered a cool talk about web reactivity by Rich Harris, the creator of the Svelte framework (&lt;a href="https://www.youtube.com/watch?v=AdNJ3fydeao"&gt;Rethinking Reactivity&lt;/a&gt;). Well, it’s more of a language than a framework, Rich Harris clarifies more on that &lt;a href="https://gist.github.com/Rich-Harris/0f910048478c2a6505d1c32185b61934"&gt;here&lt;/a&gt;. What makes it different than the other UI framework like React or Vue is that Svelte shifts the work of the runtime in the browser into a compile step that happens when you build your app. So, Svelte apps can come with drastically smaller bundle sizes than the others because there is no overhead for the framework runtime.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/AdNJ3fydeao"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Since we want the website to be easily discoverable by SEO, there are two technologies to choose from: server-side rendered (SSR) website or statically generated website. Then, I stumble upon a relatively new paradigm called Jamstack. Jamstack is a web architecture consisting of a Javascript framework, Static Site Generator, Headless CMS, and Content Delivery Network (CDN). The term was first popularized by Matt Biilmann, the CEO of Netlify. So, we landed on Sapper, a framework based on Svelte; it’s kind of like Next.js to React or Nuxt.js to Vue. Sapper supports two types of build; server-side rendered and statically generated. So, these are the website’s tech stack:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sapper (Static Site Generator)&lt;/li&gt;
&lt;li&gt;Forestry (Headless CMS)&lt;/li&gt;
&lt;li&gt;Vercel (CDN)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We think this is really awesome because we can run a small e-commerce kind of website for free. Every time the admin updates the content through the CMS, Forestry will update the file that stored the specific content, located in the Github repo. Then, Vercel will detect the commit and rebuild the website by respecting all the new updates. This way, the website will be fast to load because it’s statically generated, and potential customers can quickly discover the website through the search engine. We think SEO is critical for marketing, so we care deeply about this and optimize it extensively until it reaches the score of 100 at &lt;a href="https://www.web.dev/measure"&gt;web.dev/measure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I think Sapper is fantastic because it’s based on Svelte and it’s more mature than the alternatives. But there is a catch, it’s still in early development, so it’s not stable yet and not recommended for a big serious project. The one key feature that’s missing is incremental static regeneration, which is available on the Next.js framework. I think it’s essential for a website with a significant number of pages. If there is no incremental static regeneration, you have to rebuild the whole website every time you want to update some content on the website. Imagine, if you have 100k page on your website, it will take forever just to update one page.&lt;/p&gt;

&lt;p&gt;The next thing that needs to be figured out is image storage. There must be at least one image to showcase a product, so this is important for an e-commerce-like website. Then, we discover Cloudinary, which is also promoted by Forestry. It’s incredible because the free plan is very generous. The website barely used 33% of the limit. You can also alter the image’s size on the fly by putting the appropriate setting on the image’s URL.&lt;/p&gt;

&lt;p&gt;I also use Tailwind, a utility-first CSS framework, for the styling part of the website. I already used it before on a previous project, and I’m delighted with the workflow because it’s convenient to use, and it’s really easy to keep the design consistent. It’s created by Adam Wathan and Steve Schoger. They are the author of the Refactoring UI book, which I think is a must-read for every front-end developers because it’s really concise and beautifully written. If you can’t buy the book, you can read a sneak peek of it on this &lt;a href="https://medium.com/refactoring-ui/7-practical-tips-for-cheating-at-design-40c736799886"&gt;medium article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The website: &lt;a href="https://www.bufferzonetanjunglesung.com"&gt;bufferzonetanjunglesung.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to make a random password generator using javascript</title>
      <author>Sadman_Sakib</author>
      <pubDate>Thu, 28 Jan 2021 19:18:37 +0000</pubDate>
      <link>https://dev.to/sadmansakib2234/how-to-make-a-random-password-generator-using-javascript-2bae</link>
      <guid>https://dev.to/sadmansakib2234/how-to-make-a-random-password-generator-using-javascript-2bae</guid>
      <description>&lt;h3&gt;
  &lt;a href="#so-today-we-are-doing-to-build-a-random-password-generator-using-html-css-js-so-lets-start" class="anchor"&gt;
  &lt;/a&gt;
  So today we are doing to build a random password generator using html css js so lets start
&lt;/h3&gt;

&lt;p&gt;At first lets see the folder structure&lt;/p&gt;

&lt;pre&gt;
PASSWORD GENERATOR MINI PROJECT USING HTML CSS &amp;amp; JAVASCRIPT
├───css
├───img
└───js
&lt;/pre&gt;
 

&lt;p&gt;in the project root make an index.html file and make a css file in css folder and a js file in js folder and for copying the password we need an clipboard image download it&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0xgotGy0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t1d2fytkox50hkbh698d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0xgotGy0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t1d2fytkox50hkbh698d.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;open project in the code editor &lt;/p&gt;

&lt;pre&gt;code .&lt;/pre&gt;

&lt;h3&gt;
  &lt;a href="#import-css-and-js-in-the-indexhtml-file" class="anchor"&gt;
  &lt;/a&gt;
  import css and js in the index.html file
&lt;/h3&gt;

&lt;p&gt;now lets start codding.Write the entire html&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gaLLsamh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pncr8n528hyjwu3z0lqd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gaLLsamh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pncr8n528hyjwu3z0lqd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After it we want to code the css so lets start. copy the entire style.css from here&lt;/p&gt;

&lt;pre&gt;
* {
  margin: 0;
  padding: 0;
  font-family: Consolas;
  user-select: none;
}

body {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background: #f8f8f8;
}

.inputBox {
  position: relative;
  width: 450px;
}

.inputBox h2 {
  font-size: 28px;
  color: #333333;
}

.inputBox input {
  position: relative;
  width: 100%;
  height: 60px;
  border: none;
  margin: 15px 0 20px;
  background: transparent;
  outline: none;
  padding: 0 20px;
  font-size: 24px;
  letter-spacing: 4px;
  box-sizing: border-box;
  border-radius: 4px;
  color: #333333;
  box-shadow: -4px -4px 10px rgba(255, 255, 255, 1),
    inset 4px 4px 10px rgba(0, 0, 0, 0.05),
    inset -4px -4px 10px rgba(255, 255, 255, 1),
    4px 4px 10px rgba(0, 0, 0, 0.05);
}

.inputBox input::placeholder {
  letter-spacing: 0px;
}

.inputBox #btn {
  position: relative;
  cursor: pointer;
  color: #fff;
  background-color: #333333;
  font-size: 24px;
  display: inline-block;
  padding: 10px 15px;
  border-radius: 8px;
}

.inputBox #btn:active {
  background-color: #9c27b0;
}

.copy {
  position: absolute;
  top: 58px;
  right: 15px;
  cursor: pointer;
  opacity: 0.2;
  width: 40px;
  height: 40px;
}

.copy:hover {
  opacity: 1;
}

.alertbox {
  position: fixed;
  top: 0;
  left: 0;
  height: 100vh;
  width: 100%;
  background-color: #9c27b0;
  color: #fff;
  align-items: center;
  text-align: center;
  justify-content: center;
  font-size: 4em;
  display: none;
}

.alertbox.active {
  display: flex;
  justify-content: center;
  align-content: center;
}

&lt;/pre&gt;

&lt;p&gt;now lets write the js file open it and start put the js code in&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qYPkd8Hb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cvvhw4ajrwh1wxeivisw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qYPkd8Hb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cvvhw4ajrwh1wxeivisw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;so now we have completed the project. the full code is on github .please follow me on github if you want and thanks for reading good bye...&lt;br&gt;
github: &lt;a href="https://github.com/Sadman-Sakib2234/Random_Password_Generator"&gt;get the code here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Sweet Cards with CSS</title>
      <author>Inee Ader 🐌</author>
      <pubDate>Thu, 28 Jan 2021 19:06:35 +0000</pubDate>
      <link>https://dev.to/ineeader/sweet-css-38am</link>
      <guid>https://dev.to/ineeader/sweet-css-38am</guid>
      <description>&lt;p&gt;Hey all! Today I'm going to give you several simple tips for styling a dashboard page involving multiple "cards". I'm using Rails backend (doesn't matter) and React frontend. &lt;br&gt;
We'll also import a Google font into our App file! &lt;/p&gt;

&lt;p&gt;I have minimal "styling" right now, but I wouldn't even call it styling. This page is the user's dashboard page to display their PLANT collection. &lt;/p&gt;

&lt;p&gt;We're going to make neat containers and cards to hold it all together! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---vDBDkTK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eq1sm4olc4iagch7hpif.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---vDBDkTK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eq1sm4olc4iagch7hpif.png" alt="Screen Shot 2021-01-28 at 9.48.24 AM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#dashboard-div" class="anchor"&gt;
  &lt;/a&gt;
  DASHBOARD div
&lt;/h1&gt;

&lt;p&gt;First, let's make our biggest container: the page itself! Here's the basic structure, you can ignore all the React-y stuff.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;render() {
        return (
            &amp;lt;div className="dashboard"&amp;gt;
                &amp;lt;div&amp;gt;
                    &amp;lt;h2 className="user-name-icon"&amp;gt;&amp;lt;img className="user-dashboard-icon" src={user.icon} /&amp;gt;
                    {this.props.user.username}&amp;lt;/h2&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div className="dashboard-btn-div-top"&amp;gt;
                    &amp;lt;button className="dash-add-plant-btn" &amp;gt;Add Plant&amp;lt;/button&amp;gt;
                    &amp;lt;button className="greenhouse-btn" &amp;gt;Greenhouse&amp;lt;/button&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;PlantContainer 

                /&amp;gt;
                &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
                &amp;lt;div className="dashboard-btn-div-bottom"&amp;gt;
                    &amp;lt;button className="dash-edit-&amp;gt;Edit User&amp;lt;/button&amp;gt;
                    &amp;lt;button className="dash-logout-btn"  &amp;gt;Logout&amp;lt;/button&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        );
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The outermost wrapper has the class of "dashboard". To start, I just want to get the content off the left EDGE of the page...I hate that it's touching. In your CSS file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.dashboard {
     padding: 40px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Padding &lt;strong&gt;pushes in&lt;/strong&gt; content from the border of the element. (Margin &lt;strong&gt;pushes out&lt;/strong&gt; from the border, and border is the actual edge of your element) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qm84GqNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xttf7afojbw8ogxj1fcm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qm84GqNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xttf7afojbw8ogxj1fcm.png" alt="Screen Shot 2021-01-28 at 10.10.19 AM"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#plant-container-div" class="anchor"&gt;
  &lt;/a&gt;
  PLANT CONTAINER div
&lt;/h1&gt;

&lt;p&gt;Ok now let's look at the next container -- the Plant Container component. This one returns a div with class of "plant-container". I want that box to contain all the plants I have in my collection! &lt;/p&gt;

&lt;p&gt;CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.plant-container {
     padding: 20px;
     margin: 20px;
     border: 1px solid black;
     background-color: rgba(255, 255, 255, 0.521);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So I've made a border to outline the container, I've &lt;strong&gt;pushed out&lt;/strong&gt; from the container with margin 20px, and &lt;strong&gt;pushed in&lt;/strong&gt; some padding inside so the content isn't RIGHT on the edge of the container. The background-color is white, with about half the opacity so that it fades out our future background image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hdus2Dkk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ew7rjvo9bb3a6fnzkrc7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hdus2Dkk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ew7rjvo9bb3a6fnzkrc7.png" alt="Screen Shot 2021-01-28 at 10.16.24 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cool, so now we have a box inside of another box. I want the edges of my boxes to be &lt;em&gt;soft&lt;/em&gt;, so I'll add &lt;code&gt;border-radius: 10px;&lt;/code&gt; to soften the edges in &lt;code&gt;.plant-container&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bd1QCz5w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6datyo1gkwxv2twkihvr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bd1QCz5w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6datyo1gkwxv2twkihvr.png" alt="Screen Shot 2021-01-28 at 10.20.34 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#plant-card-div" class="anchor"&gt;
  &lt;/a&gt;
  PLANT CARD div
&lt;/h1&gt;

&lt;p&gt;Nice. Now, let's go another level deeper and get the cards themselves boxed in. My plant cards are being rendered in the Plant Container component, so you won't see it in the above snippet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.plant-card-dashboard {
         border: 1px solid rgb(0, 0, 0);
         border-radius: 10px;
         padding: 15px;
         margin: 10px;
         width: 200px;
         background-color: rgb(255, 255, 255);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So I want the card to &lt;strong&gt;push out&lt;/strong&gt; each other by margin 10px, &lt;strong&gt;pushed inside&lt;/strong&gt; itself with padding 15px, I'm setting a stiff width so they're all the same, outlining with black border, and rounding the edges with border-radius.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OpmgVSw5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bqrzl8tatdsrk3t4nt7i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OpmgVSw5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bqrzl8tatdsrk3t4nt7i.png" alt="Screen Shot 2021-01-28 at 10.25.16 AM"&gt;&lt;/a&gt;&lt;br&gt;
Round boyzzz.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#card-container-div" class="anchor"&gt;
  &lt;/a&gt;
  CARD CONTAINER div
&lt;/h1&gt;

&lt;p&gt;Inside the Plant Container div, I made ANOTHER box with class &lt;code&gt;card-container&lt;/code&gt; to wrap all the cards: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AGYoeHuM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8qswq91hgg1r61bh5nfm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AGYoeHuM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8qswq91hgg1r61bh5nfm.png" alt="Screen Shot 2021-01-28 at 10.27.04 AM"&gt;&lt;/a&gt;&lt;br&gt;
The cards are all stacked on top of each other, and I want them to display side by side. &lt;br&gt;
So we got Dashboard &amp;gt; Plant Container &amp;gt; Card Container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.card-container {
    display: inline-flex;
    flex-wrap: wrap;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The inline flex let's it display side by side, and flex-wrap allows the next card added to go down to the next row in the container. I added a plant to demonstrate: &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ekP3s9W6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fn8oazanjkap5il7s21l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ekP3s9W6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fn8oazanjkap5il7s21l.png" alt="Screen Shot 2021-01-28 at 10.31.32 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I want to add more juicy style...how about a background image? Let's get back up to our &lt;code&gt;.dashboard&lt;/code&gt; class styling and add an image. I have the images locally in my styles directory. &lt;br&gt;
The dashboard styling now looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.dashboard {
    padding: 40px; 
    background: url(./images/zz2.jpg);    
    background-size: contain;
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now she looks like this: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_QqMDoI_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hx3kbz6vdx48f2xpofk0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_QqMDoI_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hx3kbz6vdx48f2xpofk0.png" alt="Screen Shot 2021-01-28 at 10.34.22 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also want to add a BLUR to the Plant Container so it fades the background image a little AND blurs it. It's an expensive effect though, so try not to use it more than once on a page. Add &lt;code&gt;backdrop-filter: blur(5px);&lt;/code&gt; to your &lt;code&gt;.plant-container&lt;/code&gt; group. &lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#plant-image-styling" class="anchor"&gt;
  &lt;/a&gt;
  PLANT IMAGE styling
&lt;/h1&gt;

&lt;p&gt;Let's work on that plant image now...it's a bit SQUARE isn't it? On my plant card, the image class is &lt;code&gt;plant-image-dashboard&lt;/code&gt; and here's how it's styled:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.plant-image-dashboard {
    width: 200px;
    height: 200px;
    object-fit: fill;
    border-radius: 15px;
    border: 1px solid rgb(0, 0, 0);
    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So I set the height and width so it's a square, set the image fit to "fill", added black border, wanted a ROUNDER border than its containers so border-radius to 15px, and added a little box shadow so the image popped out slightly. Now it looks like this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--coRhum0s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2mdzlfrc82razi9dfcew.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--coRhum0s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2mdzlfrc82razi9dfcew.png" alt="Screen Shot 2021-01-28 at 10.41.10 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#google-font-time" class="anchor"&gt;
  &lt;/a&gt;
  GOOGLE FONT TIME
&lt;/h1&gt;

&lt;p&gt;Whew! Almost there. Let's import a Google Font. It's a little more involved for a React app. I liked "Nanum Myeongjo" -- sounds Korean ^_^ &lt;br&gt;
Click on &lt;code&gt;Download Family&lt;/code&gt; and you'll get a little zip file dropped in your downloads.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hSDyWU0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nkmfv5suj5sy6j5s7ws3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hSDyWU0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nkmfv5suj5sy6j5s7ws3.png" alt="Screen Shot 2021-01-28 at 10.43.29 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open that up into a little folder. You'll see a few font .ttf files. I just wanted the "regular" one. Make a folder in your &lt;code&gt;style&lt;/code&gt; directory called &lt;code&gt;fonts&lt;/code&gt; and drag-n-drop the file(s) into your fonts directory. For me, the style folder is inside the &lt;code&gt;src&lt;/code&gt; directory. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qLN94va_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v6w1kfr5fh1gv36o4s2e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qLN94va_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v6w1kfr5fh1gv36o4s2e.png" alt="Screen Shot 2021-01-28 at 10.46.39 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now find the javascript file that loads your App.js. My React App came with &lt;code&gt;bootstrap.js&lt;/code&gt; (even though I'm not using Bootstrap) and that's the one that loads my App.js (which then loads all my other components). &lt;br&gt;
Import your font into your file that loads your App.js like so: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6rX0qNp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4l5ssoc4r0xsta5yhnek.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6rX0qNp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4l5ssoc4r0xsta5yhnek.png" alt="Screen Shot 2021-01-28 at 10.48.33 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;THEN, you can put &lt;code&gt;font-family: 'Nanum Myeongjo', serif;&lt;/code&gt; in your App styling for site-wide font-ing! &lt;br&gt;
Now we got a nicely styled Dashboard page that displays your beloved plant collection. Boom. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hfgObE6M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t0jqujconyny9qe3boah.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hfgObE6M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t0jqujconyny9qe3boah.png" alt="Screen Shot 2021-01-28 at 10.55.18 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this was helpful to anyone just learning CSS. I'm using pure vanilla CSS in this project, no Bootstrap or Bulma, so it's been a challenge to learn it! &lt;/p&gt;

&lt;p&gt;I did a similar thing to my feed page which displays other user's new plants! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6YBoqtuv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z3llhtk2rjtr42i6rao2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6YBoqtuv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z3llhtk2rjtr42i6rao2.png" alt="Screen Shot 2021-01-28 at 11.08.15 AM"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>div</category>
      <category>styling</category>
    </item>
  </channel>
</rss>
