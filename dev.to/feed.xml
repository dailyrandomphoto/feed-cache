<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>My 1st Hacktoberfest!</title>
      <author>Geesilu</author>
      <pubDate>Tue, 05 Oct 2021 22:13:33 +0000</pubDate>
      <link>https://dev.to/geesilu/my-1st-hacktoberfest-lih</link>
      <guid>https://dev.to/geesilu/my-1st-hacktoberfest-lih</guid>
      <description>&lt;p&gt;Hello everyone! I'm Geesilu. I'm new to here. This is my first time of participating Hacktoberfest.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contributions"&gt;
  &lt;/a&gt;
  Contributions
&lt;/h2&gt;

&lt;p&gt;During Hacktoberfest I often look for easy repos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fVTdvdAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tok9t9pyk4fhuwhpdz4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fVTdvdAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tok9t9pyk4fhuwhpdz4.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#happy-coding"&gt;
  &lt;/a&gt;
  Happy Coding! üë®‚Äçüíª
&lt;/h2&gt;

</description>
      <category>hacktoberfest</category>
    </item>
    <item>
      <title>How Android Wallpaper Images Can Threaten Your Privacy</title>
      <author>Savannah Copland üëã</author>
      <pubDate>Tue, 05 Oct 2021 21:33:47 +0000</pubDate>
      <link>https://dev.to/savannahjs/how-android-wallpaper-images-can-threaten-your-privacy-n83</link>
      <guid>https://dev.to/savannahjs/how-android-wallpaper-images-can-threaten-your-privacy-n83</guid>
      <description>&lt;p&gt;Android 12‚Äôs highly anticipated Material You design system features wallpaper-based color theming and advanced customizations powered by color extraction. These UI enhancements allow users to select a wallpaper (i.e., a personal background image) from which an optimal palette of colors is automatically generated and applied to the device‚Äôs look and feel globally.&lt;/p&gt;

&lt;p&gt;Unfortunately, such personalization can carry a high price in compromised privacy. In this article, we‚Äôll demonstrate how Android wallpapers can be used to track users and explore ways to prevent your device from being exploited.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#android-wallpaper-images-vs-user-privacy"&gt;
  &lt;/a&gt;
  Android wallpaper images vs. user privacy
&lt;/h2&gt;

&lt;p&gt;The WallpaperManager class was introduced in 2009 as part of the release of Android 2, API version 5. The class provides methods for interacting with wallpapers, including &lt;a href="https://developer.android.com/reference/android/app/WallpaperManager#getDrawable()"&gt;getDrawable()&lt;/a&gt; for retrieving the current system wallpaper as a drawable resource.&lt;/p&gt;

&lt;p&gt;Using the following code, a drawable resource can be represented as a byte array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;private fun calculateWallpaperBytes(): ByteArray {
   val imageBitmap = wallpaperManager.drawable.toBitmap()
   val stream = ByteArrayOutputStream()
   imageBitmap.compress(Bitmap.CompressFormat.PNG, 100, stream)
   return stream.toByteArray()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Byte arrays can be used to restore original images from Android wallpapers, which are highly likely to contain personal information or details uniquely important to the user. Every app on your device can view and download photos of your family, pets, favorite bands or movies, and anything else you may have set as a wallpaper. Moreover, you couldn‚Äôt prevent them from doing so before Android 8.1.&lt;/p&gt;

&lt;p&gt;As it stands, a large percentage of devices are running Android 8.1 or earlier (almost 44.6% at the time of this writing, per Google Analytics) and still vulnerable to this exploit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-new-color-extraction-method"&gt;
  &lt;/a&gt;
  A new color extraction method
&lt;/h3&gt;

&lt;p&gt;Starting with Android 8.1, the &lt;a href="https://developer.android.com/reference/android/app/WallpaperManager#getDrawable()"&gt;getDrawable()&lt;/a&gt; method requires the use of &lt;a href="https://developer.android.com/reference/android/Manifest.permission#READ_EXTERNAL_STORAGE"&gt;READ_EXTERNAL_STORAGE&lt;/a&gt;, a less insecure but nonetheless risky permission as it enables access to all media on a device (and more privileged data). To compensate for the limited functionality, an easier way to extract colors was also introduced in Android 8.1: &lt;a href="https://developer.android.com/reference/android/app/WallpaperManager#getWallpaperColors(int)"&gt;getWallpaperColors(int which)&lt;/a&gt;,¬† which returns 3 main colors from a wallpaper image.&lt;/p&gt;

&lt;p&gt;Like iOS, Android allows users to determine which specific screens to use wallpaper images, and the integer argument ‚Äúwhich‚Äù sets which exact wallpaper image to use for color extraction. There are two options: the constant values &lt;code&gt;WallpaperManager.FLAG_SYSTEM&lt;/code&gt; or &lt;code&gt;WallpaperManager.FLAG_LOCK&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PSX97cvN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otwuy03uwxyjr6h431cu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PSX97cvN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otwuy03uwxyjr6h431cu.png" alt="Wallpaper settings"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// WallpaperManager.FLAG_LOCK for the the lock screen

val colors = WallpaperManager

.getInstance(context).getWallpaperColors(WallpaperManager.FLAG_SYSTEM)¬†

val primaryColor: Int = colors.primaryColor.toArgb()

val secondaryColor: Int = colors.secondaryColor.toArgb()

val tertiaryColor: Int = colors.tertiaryColor.toArgb()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code illustrates how to extract colors using a &lt;a href="https://developer.android.com/reference/android/content/Context"&gt;context&lt;/a&gt; object with primary, secondary and tertiary colors corresponding to the most popular colors in the picture (primary being the most popular). Note that no special permissions are required to use this new method.&lt;/p&gt;

&lt;p&gt;The following is an example of color extraction using the new method with a real picture:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D3AOVTb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1d7ukoeva75gmwlezsh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D3AOVTb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1d7ukoeva75gmwlezsh.png" alt="Koala color extraction"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The methods may return null in some scenarios (e.g., when custom launchers redefine wallpaper management logic without using the &lt;code&gt;WallpaperManager&lt;/code&gt; class). However, if a wallpaper was set once by &lt;code&gt;WallpaperManager&lt;/code&gt;, the method will return a not-null value.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-science-of-color-extraction"&gt;
  &lt;/a&gt;
  The science of color extraction
&lt;/h3&gt;

&lt;p&gt;Since Android is open source, we can readily determine how the method actually works. According to the &lt;a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/com/android/internal/graphics/palette/VariationalKMeansQuantizer.java;l=31?q=KMeansQua&amp;amp;sq=&amp;amp;ss=android%2Fplatform%2Fsuperproject"&gt;code&lt;/a&gt;, colors are the result of work of Variational &lt;a href="https://en.wikipedia.org/wiki/K-means_clustering"&gt;K-means&lt;/a&gt; quantizer. Every image pixel is represented by a color and every color is a &lt;a href="https://en.wikipedia.org/wiki/Three-dimensional_space"&gt;3-dimensional&lt;/a&gt; point in space (e.g., RGB color space). All pixels form a set in space, and the algorithm performs clustering of the set on K parts with finding K points, which are equidistant from others in the set.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--svm0p30d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hywo70avr8i7ojxe8ie9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--svm0p30d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hywo70avr8i7ojxe8ie9.png" alt="How K-means method works"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Above is a visualization of how the K-means method works, courtesy of &lt;a href="https://vas3k.com/blog/machine_learning/"&gt;vas3k&lt;/a&gt;. This particular case is 3-means in a 2-dimensional space.&lt;/p&gt;

&lt;p&gt;In the case of Android, colors are represented in the &lt;a href="https://en.wikipedia.org/wiki/HSL_and_HSV"&gt;HSL&lt;/a&gt; color space and distance is calculated using classical measures of &lt;a href="https://en.wikipedia.org/wiki/Euclidean_distance"&gt;euclidean distance&lt;/a&gt;. The results are three shades of an image¬† that are¬† equidistant (in the color space) from every pixel of the image.¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-universe-of-combinations"&gt;
  &lt;/a&gt;
  A universe of combinations
&lt;/h3&gt;

&lt;p&gt;This color extraction algorithm is basically a map from the set of all possible images to the RGB color space. The set is infinite and the RGB color space is limited by 2¬≤‚Å¥ combinations. Theoretically, this means every RGB combination is possible. Every color is represented by 32 bits, but only 24 matter. Alpha channels will always be equal to 1 (according to sources), while every component of the colors R, G and B have 256 possible combinations, or 2‚Å∏.¬†&lt;/p&gt;

&lt;p&gt;Since each component is independent, we can directly multiply the number of combinations together. This comes out to: 2‚Å∏ * 2‚Å∏ * 2‚Å∏ = 2¬≤‚Å¥ combinations for every color. We have 3 colors for a image, and 2¬≤‚Å¥ * 2¬≤‚Å¥ * 2¬≤‚Å¥ = 2‚Å∑¬≤ combinations per image.&lt;/p&gt;

&lt;p&gt;The same logic applies to the second wallpaper image, and they can be set up independently of each other. From one wallpaper image we have 72 bits and 144 bits using system wallpaper and lock screen wallpaper ‚Äî 144 bits and 2¬π‚Å¥‚Å¥ combinations. The more combinations possible, the higher probability of generating a unique value suitable for use as an ID. And hence, it‚Äôs likely you can easily be tracked.¬†&lt;/p&gt;

&lt;p&gt;2¬π‚Å¥‚Å¥ = 22,300,745,198,530,623,141,535,718,272,648,361,505,980,416&lt;/p&gt;

&lt;p&gt;How large is this number, exactly? For context, the universe is made up of around 10‚Å∏‚Å∞ atoms. And 2¬π‚Å¥‚Å¥ is approximately equal to 10‚Å¥¬≥. So the squared value of combinations is larger than the number of atoms in the universe! It‚Äôs safe to say that this outnumbers all devices on the Earth, for the foreseeable future.¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-identification-algorithm"&gt;
  &lt;/a&gt;
  The identification algorithm
&lt;/h3&gt;

&lt;p&gt;As you may recall, developers can use byte arrays to restore wallpaper images prior to Android 8.1. After version 8.1, 144 bits can be extracted from wallpaper colors. Both can be used as an ID, but let‚Äôs use them instead as inputs for the SHA-256 hash function (for unification).&lt;/p&gt;

&lt;p&gt;We have an ID that contains 256 bits, is unique across all applications, and only changes when the device wallpaper changes. The code for getting the ID is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;val id = hasher.hash(

¬†¬†¬†if (Build.VERSION.SDK_INT &amp;lt; Build.VERSION_CODES.O_MR1) {

¬†¬†¬†¬†¬†¬†¬†extractWallpaperBytes()

¬†¬†¬†} else extractColorsBytes())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The ID remains the same even after reinstalling the application and only changes when the wallpaper changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#try-it-yourself"&gt;
  &lt;/a&gt;
  Try it yourself
&lt;/h3&gt;

&lt;p&gt;For demonstration purposes, we‚Äôve created an open source application that calculates the ID and checks its uniqueness. You can download the app on &lt;a href="https://play.google.com/store/apps/details?id=com.fingerprintjs.android.wallpaperid&amp;amp;hl=en_US&amp;amp;gl=US"&gt;Google Play&lt;/a&gt; (for Android 5.0 and above, no permissions are required); the source code is &lt;a href="https://github.com/fingerprintjs/android-wallpaper-id"&gt;available on GitHub&lt;/a&gt;.¬†&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the method does not work on custom launchers that redefine logic of wallpaper management without using &lt;code&gt;WallpaperManager&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g8EKvA1V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/khnf286weh7wksfrp625.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g8EKvA1V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/khnf286weh7wksfrp625.png" alt="Open source wallpaper image application"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-prevent-wallpaper-tracking-on-your-android-device"&gt;
  &lt;/a&gt;
  How to prevent wallpaper tracking on your Android device
&lt;/h2&gt;

&lt;p&gt;The following measures can help prevent wallpaper tracking on your Android device:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Never use private or personal images for wallpapers, especially on devices running Android 8.1 and earlier.¬†&lt;/li&gt;
&lt;li&gt;Use a default wallpaper and don‚Äôt change it. By using a custom image, you inadvertently add entropy and uniqueness for distinguishing your device from others.&lt;/li&gt;
&lt;li&gt;Check if your launcher has redefined the logic of the device‚Äôs wallpaper management (you can do this with our demo application).&lt;/li&gt;
&lt;li&gt;Don‚Äôt install suspicious applications.¬†&lt;/li&gt;
&lt;li&gt;Be sure to keep your device operating system continuously updated.&lt;/li&gt;
&lt;li&gt;Use anti-malware software to ensure your installed applications are behaving as expected.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you can see, signals generated from wallpaper color extraction can be used to create a single identifier available to all applications, no additional permissions required. That said, extracting colors from device wallpapers is just one way mobile developers can uniquely profile Android devices, and it‚Äôs not the most dependable at that.&lt;/p&gt;

&lt;p&gt;For some examples of more stable and reliable methods, please view our¬† &lt;a href="https://github.com/fingerprintjs/fingerprint-android"&gt;fingerprint-android&lt;/a&gt; library source code. Google has not restricted these for a number of years now, and it is unlikely that it ever will. At the end of the day, doing so would impact Android‚Äôs efficacy as an advertising platform ‚Äî and for the world‚Äôs largest tech firm, it‚Äôs a constant juggle between balancing these interests with protecting user privacy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-in-touch"&gt;
  &lt;/a&gt;
  Get in touch
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Star, follow, or fork our &lt;a href="https://github.com/fingerprintjs/fingerprint-android"&gt;production-grade library&lt;/a&gt; for Android device fingerprinting&lt;/li&gt;
&lt;li&gt;Email any questions you have to &lt;a href="//mailto:oss@fingerprintJS.com"&gt;oss@fingerprintJS.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Join our team and work on exciting research in device security: &lt;a href="//mailto:work@fingerprintjs.com"&gt;work@fingerprintjs.com&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>android</category>
      <category>security</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Cool Projects to Help You Learn React JS - Part 1</title>
      <author>Gerald</author>
      <pubDate>Tue, 05 Oct 2021 21:18:15 +0000</pubDate>
      <link>https://dev.to/geraldmuvengei06/cool-projects-to-help-you-learn-react-js-part-1-g19</link>
      <guid>https://dev.to/geraldmuvengei06/cool-projects-to-help-you-learn-react-js-part-1-g19</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-react"&gt;
  &lt;/a&gt;
  What is React
&lt;/h3&gt;

&lt;p&gt;React is a declarative and component-based Javascript Library for building web interfaces. Its developed and maintained by  &lt;a href="https://facebook.com"&gt;Facebook&lt;/a&gt;. Although it's grouped with other "Frameworks" like VueJS and Angular, its termed much as a Library and not a framework. &lt;a href="https://reactjs.org/"&gt;Find out more about React on this link&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-this-article"&gt;
  &lt;/a&gt;
  Why this article?
&lt;/h3&gt;

&lt;p&gt;Personally, when I want to learn a new Framework, I go through the documentation to grasp the basic and core 'Hows and Whys', then I start basic applications to practice the concepts I've learned. This has always worked like magic for me. It goes without saying that learning by doing does a lot when it comes to grasping new concepts. I choose this approach since writing code is like a science, its a creative, intuitive and involving, like Math. Hence, learning by doing does it!&lt;/p&gt;

&lt;p&gt;Let's skip the poetry and head first into Interesting Part of this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interesting-react-projects"&gt;
  &lt;/a&gt;
  Interesting React Projects
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-reactclockfaces-aka-reactcf-a-simple-reactjs-clock-with-many-faces"&gt;
  &lt;/a&gt;
  1. ReactClockFaces A.K.A. ReactCF - A Simple React.Js Clock With Many Faces
&lt;/h3&gt;

&lt;p&gt;For this projects you'll learn these skills. The purpose of the project can be to display a Digital Clock that updates itself after every second, just like an actual digital watch. You can have different styles, or rather faces for displaying your digital clock. &lt;code&gt;Hint: Use Javascript's builtin function: setTimeout()&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React Components&lt;/li&gt;
&lt;li&gt;Reusability&lt;/li&gt;
&lt;li&gt;React DOM and Reactivity&lt;/li&gt;
&lt;li&gt;React Hooks: useEffect, useState&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-stockfoto"&gt;
  &lt;/a&gt;
  2. Stockfoto
&lt;/h3&gt;

&lt;p&gt;However you may call it, the main aim of this project is to consume Unsplash Photos API, which is open source and have fun while doing it. &lt;em&gt;Note: Read through &lt;a href="https://unsplash.com/documentation"&gt;Unsplash API Guildlines&lt;/a&gt; to make sure you're not breaking any rules.&lt;/em&gt; This will be a very interesting project!&lt;br&gt;
The api and interesting endpoints&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Random Picture&lt;/li&gt;
&lt;li&gt;Latest pictures&lt;/li&gt;
&lt;li&gt;Search Pictures&lt;/li&gt;
&lt;li&gt;Get One Picture and download picture
#### What you will learn&lt;/li&gt;
&lt;li&gt;React Components&lt;/li&gt;
&lt;li&gt;Reusability&lt;/li&gt;
&lt;li&gt;React DOM and Reactivity&lt;/li&gt;
&lt;li&gt;React Hooks: useEffect, useState&lt;/li&gt;
&lt;li&gt;React fetchAPI&lt;/li&gt;
&lt;li&gt;ES6&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#cool-features-you-could-implement"&gt;
  &lt;/a&gt;
  Cool Features you could implement.
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Lazy loading Images&lt;/li&gt;
&lt;li&gt;Lazy Loading Pagination - Load more images when a user scrolls to the bottom&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'll be happy to see what you create!&lt;/p&gt;

&lt;p&gt;As you wait for Part 2.&lt;br&gt;
Regards&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>unsplash</category>
    </item>
    <item>
      <title>An Overview of the AWS Cloud Adoption Framework | AWS White Paper Summary</title>
      <author>Ahmed Adel</author>
      <pubDate>Tue, 05 Oct 2021 20:57:38 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/an-overview-of-the-aws-cloud-adoption-framework-aws-white-paper-summary-144f</link>
      <guid>https://dev.to/awsmenacommunity/an-overview-of-the-aws-cloud-adoption-framework-aws-white-paper-summary-144f</guid>
      <description>&lt;p&gt;üåü Migrating to the cloud is a process. You don't just snap your fingers and have everything magically hosted in AWS. It takes a lot of effort to get applications migrated to AWS and having a successful cloud migration is something that requires expertise. &lt;/p&gt;

&lt;p&gt;üåü Luckily, many people have had successful cloud migrations in the past, so a lot of the knowledge around how to go about hosting on AWS has been captured and shared. &lt;/p&gt;

&lt;p&gt;üåü AWS CAF organizes guidance into six focus areas. We describe these focus areas as Perspectives.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ffi82Fvs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sp7el1bcx8ekhcqp1j55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ffi82Fvs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sp7el1bcx8ekhcqp1j55.png" alt="Perspectives"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üåü Each AWS CAF Perspective is made up of a set of CAF Capabilities, which is a composite of responsibilities. Each Capability describes ‚Äúwhat‚Äù a stakeholder owns or manages in the cloud adoption journey. Each Capability consists of a set of CAF Skills and Processes that provide structure to identify gaps in your existing skills and processes.&lt;/p&gt;

&lt;p&gt;üåü In General, Business, People, and Governance Perspectives focus on business capabilities, and the Platform, Security, and Operations Perspectives focus on technical capabilities.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-%E2%9E%BD-aws-caf-perspectives-"&gt;
  &lt;/a&gt;
  ___________ ‚ûΩ AWS CAF Perspectives: ___________
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#1business-perspective-value-realization"&gt;
  &lt;/a&gt;
  1-Business Perspective: [Value Realization]
&lt;/h2&gt;

&lt;p&gt;‚û§ Focuses on ensuring that IT is aligned with business needs and that IT investments can be traced to demonstrable business results. &lt;br&gt;
‚û§ Engage stakeholders within the Business Perspective to create a strong business case for cloud adoption and ensure that there is a strong alignment between your organization‚Äôs business strategies and goals and IT strategies and goals. &lt;/p&gt;

&lt;p&gt;‚úÖ &lt;strong&gt;Common roles:&lt;/strong&gt; Business Managers, Finance Managers, Budget Owners, and Strategy Stakeholders.&lt;/p&gt;

&lt;p&gt;‚òû &lt;strong&gt;Capability Descriptions:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Capability&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;IT Finance&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to plan, allocate, and manage the budget for IT expenses given changes introduced with the cloud services consumption model.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;IT Strategy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to leverage IT as a business enabler. Cloud services provide efficiencies that reduce the need to maintain applications, enabling IT to focus on business alignment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Benefits Realization&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to measure the benefits received from their IT investments. This represents Total Cost of Ownership (TCO) or Return on Investment (ROI) calculations coupled with budget management.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Business Risk Management&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to understand the business impact of preventable, strategic, and external risks to the organization. For many, these risks stem from the impact of financial and technology constraints on agility. Organizations find that with a move to the cloud, many of these constraints are reduced or eliminated.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#2people-perspective-roles-and-readiness"&gt;
  &lt;/a&gt;
  2-People Perspective: [Roles and Readiness]
&lt;/h2&gt;

&lt;p&gt;‚û§ Provides guidance for stakeholders responsible for people development, training, and communications. Helps stakeholders understand how to update the staff skills and organizational processes they will use to optimize and maintain their workforce, and ensure competencies are in place at the appropriate time. &lt;/p&gt;

&lt;p&gt;‚úÖ &lt;strong&gt;Common roles:&lt;/strong&gt; Human Resources, Staffing, and People Managers.&lt;/p&gt;

&lt;p&gt;‚òû &lt;strong&gt;Capability Descriptions:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Capability&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Resource Management&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to project personnel needs and to attract and hire the talent necessary to support the organization‚Äôs goals.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Incentive Management&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to ensure that workers receive competitive compensation and benefits for the value they bring to your organization.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Career Management&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to ensure the personal fulfillment of your employees, their career opportunities, and their financial security&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Training Management&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to ensure employees have the knowledge and skills necessary to perform their roles and comply with organizational policies and requirements.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Organizational Change Management&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to manage the effects and impacts of business, structural, and cultural change introduced with cloud adoption.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#3governance-perspective-prioritization-and-control"&gt;
  &lt;/a&gt;
  3-Governance Perspective: [Prioritization and Control
&lt;/h2&gt;

&lt;p&gt;‚û§ Provides guidance for stakeholders responsible for supporting business processes with technology. Helps stakeholders understand how to update the staff skills and organizational processes that are necessary to ensure business governance in the cloud and manage and measure cloud investments to evaluate their business outcomes. &lt;/p&gt;

&lt;p&gt;‚úÖ &lt;strong&gt;Common roles:&lt;/strong&gt;CIO, Program Managers, Project Managers, Enterprise Architects, Business Analysts, and Portfolio Managers.&lt;/p&gt;

&lt;p&gt;‚òû &lt;strong&gt;Capability Descriptions:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Capability&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Portfolio Management&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to manage and prioritize IT investments, programs, and projects in alignment with your organization‚Äôs business goals.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Program and Project Management&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to manage one or several related projects to improve organizational performance and complete the projects on time and on budget.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Business Performance Measurement&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to measure and optimize processes in support of your organization‚Äôs goals&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;License Management&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Defines your organization‚Äôs capability to procure, distribute, and manage the licenses needed for IT systems, services, and software. The cloud consumption model requires that teams develop new skills for procurement and license management and new processes for evaluating license needs.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#4platform-perspective-applications-and-infrastructure"&gt;
  &lt;/a&gt;
  4-Platform Perspective: [Applications and Infrastructure
&lt;/h2&gt;

&lt;p&gt;‚û§ Helps stakeholders understand how to update the staff skills and organizational processes that are necessary to deliver and optimize cloud solutions and services&lt;/p&gt;

&lt;p&gt;‚úÖ &lt;strong&gt;Common roles:&lt;/strong&gt; CTO, IT Managers, and Solution Architects&lt;/p&gt;

&lt;p&gt;‚òû &lt;strong&gt;Capability Descriptions:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Capability&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Compute Provisioning&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to provide processing and memory in support of enterprise applications. The skills and processes necessary to provision cloud services are very different from the skills and processes needed to provision physical hardware and manage data center facilities.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Network Provisioning&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to provide computing networks to support enterprise applications&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Storage Provisioning&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to provide storage in support of enterprise applications&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Database Provisioning&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to provide database and database management systems in support of enterprise applications&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Systems and Solution Architecture&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to define and describe the design of a system and to create architecture standards for the organization&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Application Development&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to customize or develop applications to support your organization‚Äôs business goals. New skills and processes for Continuous Integration and Continuous Deployment (CI/CD) are a critical part of designing applications that take advantage of cloud services and the agility promised by cloud computing.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#5security-perspective-risk-and-compliance"&gt;
  &lt;/a&gt;
  5-Security Perspective: [Risk and Compliance]
&lt;/h2&gt;

&lt;p&gt;‚û§  Helps stakeholders understand how to update the staff skills and organizational processes that are necessary to ensure that the architecture deployed in the cloud aligns to the organization‚Äôs security control requirements, resiliency, and compliance requirements. &lt;/p&gt;

&lt;p&gt;‚úÖ &lt;strong&gt;Common roles:&lt;/strong&gt; CISO, IT Security Managers, and IT Security Analysts.&lt;/p&gt;

&lt;p&gt;‚òû &lt;strong&gt;Capability Descriptions:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Capability&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Identity and Access Management&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on capability to create multiple access control mechanisms and manage the permissions for each of these within your AWS Account. Privileges must be granted before your user community can provision or orchestrate resources.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Detective Control&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on capability for native logging as well as services that you can leverage to provide greater visibility near to real time for occurrences in the AWS environment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Infrastructure Security&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Your AWS environment can be defined and adjusted to evolve with your workload and business requirements. This capability provides the opportunity to shape your AWS security controls in an agile fashion; automating your ability to build, deploy, and operate your security infrastructure&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Data Protection&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on capability to main visibility and control over data, and how it is accessed and used in the organization.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Incident Response&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to respond, manage, reduce harm, and restore operations during and after a security incident&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#6operations-perspective-manage-and-scale"&gt;
  &lt;/a&gt;
  6-Operations Perspective: [Manage and Scale]
&lt;/h2&gt;

&lt;p&gt;‚û§ Helps stakeholders understand how to update the staff skills and organizational processes that are necessary to ensure system health and reliability during the move of operations to the cloud and then to operate using agile, ongoing, cloud computing best practices. &lt;/p&gt;

&lt;p&gt;‚úÖ &lt;strong&gt;Common roles:&lt;/strong&gt; IT Operations Managers and IT Support Managers.&lt;/p&gt;

&lt;p&gt;‚òû &lt;strong&gt;Capability Descriptions:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Capability&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Service Monitoring&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to detect and respond to issues with the health of IT services and enterprise applications.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Application Performance Monitoring&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to ensure application performance meets its defined requirements&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Resource Inventory Management&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on capability to align your organization‚Äôs assets in a way that provides the best, most cost-efficient service&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Release Management/Change Management&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to manage, plan, and schedule changes to the IT environment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Reporting and Analytics&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to ensure compliance with your organization‚Äôs reporting policies and to ensure ongoing analysis and reporting of performance against key KPIs such as service-level agreements (SLAs) and operational-level agreements (OLAs).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Business Continuity/Disaster Recovery (BC/DR)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to operate in the event of a significant failure of IT services and the capability to recover from those failures within the time parameters defined by your organization.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;IT Service Catalog&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Focuses on organization‚Äôs capability to select, maintain, advertise, and deliver an SLA or set of IT services&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;p&gt;References:&lt;br&gt;
&lt;a href="https://d1.awsstatic.com/whitepapers/aws_cloud_adoption_framework.pdf?did=wp_card&amp;amp;trk=wp_card"&gt;Original paper&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>devops</category>
      <category>agile</category>
    </item>
    <item>
      <title>Node.js &amp; Deno Comparison</title>
      <author>Shreyansh sheth</author>
      <pubDate>Tue, 05 Oct 2021 20:55:53 +0000</pubDate>
      <link>https://dev.to/shreyanshsheth/node-js-deno-comparison-1jhe</link>
      <guid>https://dev.to/shreyanshsheth/node-js-deno-comparison-1jhe</guid>
      <description>&lt;h2&gt;
  &lt;a href="#so-what-is-deno"&gt;
  &lt;/a&gt;
  So what is Deno?
&lt;/h2&gt;

&lt;p&gt;Deno is JavaScript , typescript runtime like node.js but it can run typescript natively and has so many new features related to security and module delivery.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-compare-to-nodejs"&gt;
  &lt;/a&gt;
  Why compare to node.js?
&lt;/h2&gt;

&lt;p&gt;At it‚Äôs core Deno is same as node and they both uses V8 engine for javascript execution and also their creator &lt;a href="https://tinyclouds.org/"&gt;Ryan Dhal&lt;/a&gt; is same but they are completely different how you manage your dependencies and also files.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-you-should-use"&gt;
  &lt;/a&gt;
  Why You Should Use.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#why-you-should-use-deno"&gt;
  &lt;/a&gt;
  Why you should use Deno?
&lt;/h3&gt;

&lt;p&gt;Deno has future because of it‚Äôs growing community and also it has so many features that node is lacking and also it is so much secure and better run time than node.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-you-should-use-node"&gt;
  &lt;/a&gt;
  Why you should use node?
&lt;/h3&gt;

&lt;p&gt;Although Deno is future proof but node has so much bigger community than any other platform and also if you find yourself stuck you can easily find solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-that-are-changed-with-deno"&gt;
  &lt;/a&gt;
  Things that are changed with Deno.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Have to give &lt;a href="https://deno.land/manual/runtime/permission_apis"&gt;permission&lt;/a&gt; for accessing files read and write , net , hrtime , etc.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://deno.land/manual/linking_to_external_code"&gt;Importing modules&lt;/a&gt; is completely change and now you can import from url and file sitting on CDN&lt;/li&gt;
&lt;li&gt;No-Package Manager / No-Modules Folder. All the modules fetch from URL cache under Deno and you don‚Äôt need to worry about that&lt;/li&gt;
&lt;li&gt;Don‚Äôt worry about different setup for typescript it‚Äôs just works out of the box.&lt;/li&gt;
&lt;li&gt;Deno has different built in APIs than node because all of async calls end up in some sort of promise.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Deno is the future, but node is current the king for JavaScript development thanks to massive size of community and millions of open source package.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>deno</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Integrating Cryptocurrency as a Payment Option: Javascript</title>
      <author>Omolade Ekpeni</author>
      <pubDate>Tue, 05 Oct 2021 20:52:32 +0000</pubDate>
      <link>https://dev.to/omolade11/integrating-cryptocurrency-as-a-payment-option-javascript-1jad</link>
      <guid>https://dev.to/omolade11/integrating-cryptocurrency-as-a-payment-option-javascript-1jad</guid>
      <description>&lt;p&gt;Considering the extent to which cryptocurrency as a medium of payment has evolved, Soon enough your employers will start requesting to integrate multi-currency as a payment option in their platforms or they already did üòè. In this article, &lt;a class="mentioned-user" href="https://dev.to/tkings"&gt;@tkings&lt;/a&gt;
 and I will be sharing a great solution that works for implementing cryptocurrency payment on javascript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M4bzMt8Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kf457gzh6p8mjjxyq2bq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M4bzMt8Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kf457gzh6p8mjjxyq2bq.jpeg" alt="Payment Process Flowchart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The diagram above shows the flow of how the implementation will serve the merchant and customer¬†. The steps are outlined in the &lt;a href="https://dev.to/omolade11/integrating-cryptocurrency-as-a-payment-option-html-352i"&gt;previous article&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://coinforbarter.com"&gt;CoinForBarter&lt;/a&gt; gives developers a seamless experience, and they support 11 currencies across multiple chains for customers. To proceed, you will need to &lt;a href="https://dashboard.coinforbarter.com/login"&gt;sign up&lt;/a&gt; with them and &lt;a href="https://dashboard.coinforbarter.com/settings/api"&gt;generate an API KEY&lt;/a&gt; from &lt;a href="https://coinforbarter.com"&gt;CoinForBarter&lt;/a&gt;. &lt;a href="https://coinforbarter.com"&gt;CoinForBarter&lt;/a&gt; like Flutterwave or Stripe provides an implementation method for JavaScript.&lt;/p&gt;

&lt;p&gt;An example of how you can implement cryptocurrency in your javascript is below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form&amp;gt;
&amp;lt;script src="https://checkout.coinforbarter.com/v1/script.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;button type="button" onClick="makePayment()"&amp;gt;Pay Now&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;script&amp;gt;
        function makePayment() {
            CoinForBarterCheckout({
                publicKey: "xxxxxxxxxxxxxxxxxxxxxxx",
                txRef: "RX1",
                amount: 10,
                currency: "BTC",
                redirectUrl: "http://example.com",
                currencies: [], //accept all currencies if you leave it empty
                meta: {
                    consumer_id: 23,
                },
                customer: "example@gmail.com",
                customerPhoneNumber: "+234xxxxxx",
                customerFullName: "John Doe",
                customizations: {
                    title: "My store",
                    description: "Payment for items in cart",
                    logo: "https://assets.example.com/logo.png",
                },
                onError: (data) =&amp;gt; {
                    console.log(data);
                    alert(data.message)
                },
                onSuccess: (data) =&amp;gt; {
                    console.log(data);
                }
            });
        }
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is an &lt;a href="https://github.com/coinforbarter/examples/tree/main/inline-implementation/php"&gt;example implementation for php&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#input-names-and-description"&gt;
  &lt;/a&gt;
  Input Names and Description
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;publicKey&lt;/strong&gt;: You can get your publicKey from your CoinForBarter dashboard. It helps identify your transaction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;customer&lt;/strong&gt;: The email address of the customer to make that payment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;customerPhoneNumber&lt;/strong&gt;: This is the phone number of the customer. It is an optional field.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;customerFullName&lt;/strong&gt;: This is the full name of the customer. It is an optional field.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;txRef&lt;/strong&gt;: This is a random string to help you remember this transaction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;amount&lt;/strong&gt;: The amount to charge your customer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;currency&lt;/strong&gt;: The currency that you have set the amount in.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;customizations&lt;/strong&gt;: An object to display the title and description to be displayed on the payment page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;redirectUrl&lt;/strong&gt;: A url to redirect the customer to when the transaction ends. This is optional.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;currencies&lt;/strong&gt;: You can have multiple of these fields. It will be a list of the currencies you want to accept for this transaction. It is optional, and if left empty, the customer will pay in any supported currency.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;onError&lt;/strong&gt;: A function to handle the data sent back if transactions fails or is cancelled. If provided, it overrides the redirectUrl.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;onSuccess&lt;/strong&gt;¬†: A function to handle the data sent back if transactions is successful. If provided, it overrides the redirectUrl.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Having inserted a user's public key (Tochukwu's) into the above JavaScript code, the 'Pay Now' button leads to this screen below on your website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YNPzuUKj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ukdq4sx62563527rx4jl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YNPzuUKj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ukdq4sx62563527rx4jl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gQhUWUyB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xqmnz17s3txvhda8tfgv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gQhUWUyB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xqmnz17s3txvhda8tfgv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://coinforbarter.com"&gt;CoinForBarter&lt;/a&gt; has a long list of supported currencies and &lt;a href="https://dashboard.coinforbarter.com/payouts/settings"&gt;helps you get settled in your local bank account automatically&lt;/a&gt;. The list of supported currencies can be viewed in the note section of the &lt;a href="https://dev.to/omolade11/integrating-cryptocurrency-as-a-payment-option-html-352i"&gt;previous article&lt;/a&gt;.&lt;br&gt;
In this article, we learnt how to integrate cryptocurrency as a payment option with Javascript. &lt;a class="mentioned-user" href="https://dev.to/tkings"&gt;@tkings&lt;/a&gt;
 and I wrote it. In the future, we will be writing on implementing it using React, React Native and API. We will appreciate your comments, and if you have any questions, do not hesitate to hit either &lt;a href="https://twitter.com/tkings_"&gt;Kingsley&lt;/a&gt; or &lt;a href="https://twitter.com/OmoladeEkpeni"&gt;me&lt;/a&gt; up on Twitter.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>payment</category>
      <category>cryptocurrency</category>
    </item>
    <item>
      <title>Diffrent Ways To Create A React Application</title>
      <author>Shreyansh sheth</author>
      <pubDate>Tue, 05 Oct 2021 20:50:47 +0000</pubDate>
      <link>https://dev.to/shreyanshsheth/diffrent-ways-to-create-a-react-application-55a5</link>
      <guid>https://dev.to/shreyanshsheth/diffrent-ways-to-create-a-react-application-55a5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-createreactapp"&gt;
  &lt;/a&gt;
  1. Create-React-App
&lt;/h2&gt;

&lt;p&gt;Provide a Simple Environment With All The Things Already Setup For You And You Just Have To Write Code.&lt;/p&gt;

&lt;p&gt;Create React App doesn‚Äôt handle backend logic or databases; it just creates a frontend build pipeline, so you can use it with any backend you want. Under the hood, it uses Babel and webpack, but you don‚Äôt need to know anything about them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://create-react-app.dev/"&gt;&lt;strong&gt;CRA Docs&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;create new app with create-react-app&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app appName
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-vite"&gt;
  &lt;/a&gt;
  2. Vite
&lt;/h2&gt;

&lt;p&gt;Same As Create-React-App It Provide All Configuration Out Of The Box. Also, It Supports SSR &amp;amp; SSG.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vitejs.dev/"&gt;&lt;strong&gt;Vite Docs&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To Create Vite App&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init vite@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-nextjs"&gt;
  &lt;/a&gt;
  3. Next.js
&lt;/h2&gt;

&lt;p&gt;Currently The Best Tool To Create SSR(server-site-rendered) &amp;amp; SSG(static-site-generation) For React. It Has Inbuilt Optimization That Makes Your App Run So Much Faster &amp;amp; Also If You Want To Add Serverless Function Next.js Also Provides That.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextjs.org/"&gt;&lt;strong&gt;Next.js Docs&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To Create Next.js Application&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-gatsby"&gt;
  &lt;/a&gt;
  4. Gatsby
&lt;/h2&gt;

&lt;p&gt;Gatsby Does SSG And It Has Huge Plugin System To Support Gatsby Compile Your React Code To HTML-CSS So User Don't Have To Wait For Javascript And React To Load&lt;br&gt;
&lt;a href="https://www.gatsbyjs.com/"&gt;&lt;strong&gt;Gatsby Docs&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To Create Gatsby App&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init gatsby
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-razzle"&gt;
  &lt;/a&gt;
  5. Razzle
&lt;/h2&gt;

&lt;p&gt;It Is Serverside Rendering Framework As Well And This Provide Much More Flexibility.&lt;br&gt;
&lt;a href="https://razzlejs.org/"&gt;&lt;strong&gt;Razzle Docs&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To Create Razzle App&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g create-razzle-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-raw-ltscriptgt-endraw-tags"&gt;
  &lt;/a&gt;
  6. &lt;code&gt;&amp;lt;Script&amp;gt;&lt;/code&gt; Tags
&lt;/h2&gt;

&lt;p&gt;You Can Use Script Tags For React And After Importing That Your Code May Look Like This.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;liked&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Like&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(&lt;strong&gt;React Docs&lt;/strong&gt;)(&lt;a href="https://reactjs.org/docs/add-react-to-a-website.html"&gt;https://reactjs.org/docs/add-react-to-a-website.html&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I Covered Major Ways To Build React App But You Can Setup Your Own System Like These.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>30DAYS OF PYTHON</title>
      <author>Phylis Jepchumba</author>
      <pubDate>Tue, 05 Oct 2021 20:34:26 +0000</pubDate>
      <link>https://dev.to/phylis/30days-of-python-laj</link>
      <guid>https://dev.to/phylis/30days-of-python-laj</guid>
      <description>&lt;p&gt;Day 1 of the 30 Days Of Python.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What python is.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python programming paradigms: Imperative, Functional, Procedural, Object-oriented paradigms&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Representing data using python data types: Booleans, strings ,lists, tuples, sets, dictionaries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Applications of Python in Software development and DevOps engineering automation, data science and machine learning.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PEP8 Rules &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python is an interpreted ,high-level ,general-purpose programming language used in web development, data science and creating software prototypes.&lt;/p&gt;

&lt;p&gt;Python Paradigms.&lt;br&gt;
Programming paradigms is a style or concept by which the methodology of a programming language adheres to.Python supports four programming paradigms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Imperative&lt;/strong&gt;-Python fully implements this paradigm. It uses statements that change a program state and focuses on &lt;strong&gt;how to solve&lt;/strong&gt;.Data structures implement the use of this paradigm.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Functional&lt;/strong&gt;- It is also known as declarative paradigm It treats every statement as a mathematical equation.&lt;br&gt;
in python, lambda and recursion are approaches used to implement functional programming paradigm.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Procedural&lt;/strong&gt;- in this paradigm, computational tasks are treated as step by step iteration and common task grouped as functions.&lt;br&gt;
In python, procedural paradigm favors iterations, selection, sequencing and modularization.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Object-oriented&lt;/strong&gt;- a programming paradigm that relies on concepts of classes and objects and focuses on writing reusable code. Python has object oriented features as  methods, inheritance encapsulation and polymorphism.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;
  &lt;a href="#applications-of-python"&gt;
  &lt;/a&gt;
  Applications of Python.
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Building desktop applications, including GUI applications, CLI tools, and even games&lt;/li&gt;
&lt;li&gt;Building web and Internet applications- python offers frameworks such as Django and microframeworks such as flask for web developemnt.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Performing DevOps tasks- Python enables DevOps professionals to build, test, deploy, visualize and monitor the DevOps lifecycle with improved, simple custom utilities.DevOps tools such as Ansible is written in python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Education-Python is a superb language for teaching programming, both at the introductory level and in more advanced courses.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;
  &lt;a href="#representing-data-using-python-data-types"&gt;
  &lt;/a&gt;
  Representing data using python data types.
&lt;/h6&gt;

&lt;p&gt;Python has a handful of built-in data types, such as numbers (integers, floats, complex numbers), Booleans, strings, lists, tuples, dictionaries, and sets.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#numeric-data-type"&gt;
  &lt;/a&gt;
  Numeric data type.
&lt;/h6&gt;

&lt;p&gt;They represent the data that has a numeric value and can belong to three different numerical types:&lt;br&gt;
Integers: Consists of positive or negative whole numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Floats:Are true numbers with floating-point representation specified by a decimal point.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;12.5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Complex numbers: Are numbers with a real part and an imaginary part.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.8j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;4.5j&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#string-datatype"&gt;
  &lt;/a&gt;
  String Datatype.
&lt;/h6&gt;

&lt;p&gt;Strings are pieces of text or sequences of characters that you can define using single, double, or triple quotes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Use single quotes
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Hello there!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;'Hello there!'&lt;/span&gt;
&lt;span class="c1"&gt;#Use double quotes
&lt;/span&gt;&lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Good Evening!"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;'Good Evning!'&lt;/span&gt;
&lt;span class="c1"&gt;# Use triple quotes
&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"""30 Days of Python Challenge!"""&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;'30 Days of Python Challenge!'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;String data type can be used for Concatenation, Slicing, and Repetition.&lt;br&gt;
Concatenation-Joining two or more strings together.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"My name is"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"Korir"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#output
&lt;/span&gt;&lt;span class="s"&gt;'My name is Korir'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Repetition-It is repeating a sequence of instructions a certain number of times.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'phy'&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;phyphyphyphyphy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Slicing- used extract different parts of a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;String1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Python"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#list-data-type"&gt;
  &lt;/a&gt;
  List Data Type.
&lt;/h6&gt;

&lt;p&gt;Lists are used to store multiple items in a single variables.&lt;br&gt;
Lists are defined in Python by enclosing a comma-separated sequence of objects in square brackets ([]), as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Characteristics of Python Lists.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lists are ordered.&lt;/li&gt;
&lt;li&gt;Lists can contain any arbitrary objects.&lt;/li&gt;
&lt;li&gt;List elements can be accessed by index.&lt;/li&gt;
&lt;li&gt;Lists can be nested to arbitrary depth.&lt;/li&gt;
&lt;li&gt;Lists are mutable.&lt;/li&gt;
&lt;li&gt;Lists are dynamic.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#tuples-data-type"&gt;
  &lt;/a&gt;
  Tuples Data type
&lt;/h6&gt;

&lt;p&gt;Tuples are identical to lists in all respects, except for the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tuples are defined by enclosing the elements in parentheses (()) instead of square brackets ([]).&lt;/li&gt;
&lt;li&gt;Tuples are immutable hence cannot be modified&lt;/li&gt;
&lt;li&gt;Execution is faster when manipulating a tuple Here is an example of a tuple:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;tuple1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tuple1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#dictionaries-data-type"&gt;
  &lt;/a&gt;
  Dictionaries Data type
&lt;/h6&gt;

&lt;p&gt;Dictionary in python is an ordered collection, used to store data values.&lt;br&gt;
You can define a dictionary by enclosing a comma-separated list of key-value pairs in curly braces ({}). A colon (:) separates each key from its associated value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;new_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"firstname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Korir"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"lastname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Mary"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"DOB"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"lastname"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"Mary"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#set-data-type"&gt;
  &lt;/a&gt;
  Set Data Type.
&lt;/h6&gt;

&lt;p&gt;used to store multiple items in a single variable.&lt;br&gt;
Every set element is unique and must be immutable.&lt;br&gt;
Are created by placing all the items inside curly braces {}, separated by comma, or by using the built-in set() function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;new_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Resources&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(&lt;a href="https://dev.to/phylis/python-101-introduction-to-python-2eh4"&gt;https://dev.to/phylis/python-101-introduction-to-python-2eh4&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;(&lt;a href="https://www.pythontutorial.net/"&gt;https://www.pythontutorial.net/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;(&lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;https://www.python.org/dev/peps/pep-0008/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;(&lt;a href="https://www.analyticsvidhya.com/blog/2021/05/introduction-to-"&gt;https://www.analyticsvidhya.com/blog/2021/05/introduction-to-&lt;/a&gt;
python-programming-beginners-guide/)&lt;/li&gt;
&lt;li&gt;(&lt;a href="https://dev.to/grayhat/python-101-introduction-to-python-3kg5"&gt;https://dev.to/grayhat/python-101-introduction-to-python-3kg5&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>datascience</category>
      <category>100daysofcode</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Getting started with Playwright E2E testing</title>
      <author>Giannis Koutsaftakis</author>
      <pubDate>Tue, 05 Oct 2021 20:22:58 +0000</pubDate>
      <link>https://dev.to/kouts/getting-started-with-playwright-e2e-testing-mfd</link>
      <guid>https://dev.to/kouts/getting-started-with-playwright-e2e-testing-mfd</guid>
      <description>&lt;p&gt;&lt;a href="https://playwright.dev"&gt;Playwright&lt;/a&gt; is a cross-browser web automation framework by Microsoft. It is also a powerful E2E testing tool with its integrated test runner &lt;code&gt;Playwright Test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some of the highlight features of Playwright:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for 3 browser engines (Chromium, Firefox and WebKit)&lt;/li&gt;
&lt;li&gt;Write tests in &lt;strong&gt;JavaScript&lt;/strong&gt; &amp;amp; TypeScript, Python, .NET and, Java&lt;/li&gt;
&lt;li&gt;Runs tests in parallel using worker processes that run at the same time&lt;/li&gt;
&lt;li&gt;Support for screenshots and videos snapshots taking&lt;/li&gt;
&lt;li&gt;Provides a great set of debugging tools&lt;/li&gt;
&lt;li&gt;Wide range of element selectors (CSS, text, X-path and more)&lt;/li&gt;
&lt;li&gt;Intercept network activity for stubbing and mocking network requests (e.g API calls)&lt;/li&gt;
&lt;li&gt;CLI tool to Record user interactions and generate JavaScript code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;more...&lt;/p&gt;

&lt;p&gt;In this post we' re going to implement two simple E2E test flows for pages that require authentication and look at how we can reuse the login state so that we don't have to repeat the same code across our tests. &lt;/p&gt;

&lt;p&gt;We're going to use &lt;strong&gt;JavaScript&lt;/strong&gt; as our language of choice and the beautiful &lt;a href="https://pixinvent.com/demo/vuexy-vuejs-admin-dashboard-template/landing/"&gt;Vuexy&lt;/a&gt; admin theme as an &lt;em&gt;example&lt;/em&gt; domain for testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's start!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-dependencies"&gt;
  &lt;/a&gt;
  Install dependencies
&lt;/h2&gt;

&lt;p&gt;Playwright and friends&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# install playwright and its test runner&lt;/span&gt;
npm i &lt;span class="nt"&gt;-D&lt;/span&gt; @playwright/test

&lt;span class="c"&gt;# install browser engines - Chromium, Firefox, and Webkit&lt;/span&gt;
npx playwright &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're also going to need the &lt;code&gt;dotenv&lt;/code&gt; package in order to load the login credentials as environment variables from a &lt;code&gt;.env&lt;/code&gt; file into our test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-D&lt;/span&gt; dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add some useful commands into the &lt;code&gt;scripts&lt;/code&gt; section of our project's &lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npx playwright test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test-debug"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"PWDEBUG=1 npx playwright test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test-debug-windows"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"set PWDEBUG=1 &amp;amp;&amp;amp; npx playwright test"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;test&lt;/code&gt; runs the tests&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;test-debug&lt;/code&gt; runs the tests in &lt;strong&gt;debug mode&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;test-debug-windows&lt;/code&gt; runs the tests in &lt;strong&gt;debug mode&lt;/strong&gt; on Windows&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#configure"&gt;
  &lt;/a&gt;
  Configure
&lt;/h2&gt;

&lt;p&gt;Playwright uses a global configuration file to specify common settings for each test.&lt;br&gt;
Create &lt;code&gt;playwright.config.js&lt;/code&gt; in your project's root with the contents below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;globalSetup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./tests/global-setup.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://pixinvent.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headless&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;viewport&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1280&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;720&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;ignoreHTTPSErrors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;screenshot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;only-on-failure&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are some commonly used options for various scenarios.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;baseURL&lt;/code&gt; Define a common Base URL, this allows us to navigate by using just the path inside our tests. In our example we set it as &lt;code&gt;https://pixinvent.com&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;globalSetup&lt;/code&gt; This file will be required and run before all the tests. We'll use it to setup our login step before every test.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;headless&lt;/code&gt; Playwright runs tests in headless mode by default, change this to &lt;code&gt;false&lt;/code&gt; if you want to view the tests in a "live" browser instance.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;viewport&lt;/code&gt; Controls the size of the viewport for the tests.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ignoreHTTPSErrors&lt;/code&gt; Whether to ignore HTTPS errors during navigation.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;screenshot&lt;/code&gt; Have a screenshot taken when a test fails.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;timeout&lt;/code&gt; Time in milliseconds given to each test.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a &lt;code&gt;.env&lt;/code&gt; file in the project's root that will hold our login credentials.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;LOGIN_USERNAME=admin@demo.com
LOGIN_PASSWORD=admin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll also need to insert the &lt;code&gt;.env&lt;/code&gt; and &lt;code&gt;tests/state.json&lt;/code&gt; files to our project's &lt;code&gt;.gitignore&lt;/code&gt; file. The &lt;code&gt;tests/state.json&lt;/code&gt; will be used to store the authentication state when our tests run, so we don't want that file to be tracked by Git.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.gitignore&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# env file&lt;/span&gt;
.env

&lt;span class="c"&gt;# Login state file&lt;/span&gt;
tests/state.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-the-tests"&gt;
  &lt;/a&gt;
  Create the tests
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;tests&lt;/code&gt; directory will contain our tests and the &lt;code&gt;globalSetup&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tests/globalSetup.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../playwright.config&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;chromium&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@playwright/test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;chromium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;baseURL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/demo/vuexy-vuejs-laravel-admin-template/demo-1/login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input[type="text"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LOGIN_USERNAME&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input[type="password"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LOGIN_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button:has-text("Sign in")&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;storageState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tests/state.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Playwright uses the &lt;code&gt;globalSetup.js&lt;/code&gt; file to set things up once, before running all tests. In our example we're using it to visit the login page, fill-in the username and password, click on the "Sign in" button and finally, save the authentication state to a &lt;code&gt;state.json&lt;/code&gt; file that is going to be used from inside our tests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's add some sample tests&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Playwright Test uses the &lt;a href="https://jestjs.io/docs/expect"&gt;expect&lt;/a&gt; library for test assertions, if you have used &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt; you will find the syntax familiar.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tests/dashboard.spec.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@playwright/test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;storageState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tests/state.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dashboard&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/demo/vuexy-vuejs-laravel-admin-template/demo-1/dashboard/ecommerce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.card.card-congratulation-medal p.card-text.font-small-3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toContainText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You have won gold medal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this test we' re visiting the Dashboard page and we're checking if the medal card contains the text "You have won gold medal".&lt;br&gt;
Playwright provides many ways to &lt;a href="https://playwright.dev/docs/selectors"&gt;select elements&lt;/a&gt;, in our case we're using CSS selectors to find the card element in the page. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;tests/analytics.spec.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@playwright/test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;storageState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tests/state.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;analytics&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://pixinvent.com/demo/vuexy-vuejs-laravel-admin-template/demo-1/dashboard/analytics&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text=Add Record&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;h4.invoice-title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toContainText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Invoice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our second test we visit the Analytics, click on the "Add Record" button and the check if the text "Invoice" appears inside a &lt;code&gt;h4&lt;/code&gt; element on the next page.&lt;br&gt;
Notice that we don't have to write any specific method call for navigation, Playwright auto-waits for the next page.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#run-the-tests"&gt;
  &lt;/a&gt;
  Run the tests
&lt;/h2&gt;

&lt;p&gt;In order to tun our tests we can use the commands we added in our &lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--61ZV5dHb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsfzn8p3j3j9pnzkzche.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--61ZV5dHb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsfzn8p3j3j9pnzkzche.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can also run the tests in &lt;a href="https://playwright.dev/docs/debug#run-in-debug-mode"&gt;debug mode&lt;/a&gt;. This will open up the browsers in headed mode and also start the &lt;a href="https://playwright.dev/docs/debug#playwright-inspector"&gt;Playwright Inspector&lt;/a&gt;. Useful when we want to troubleshoot our tests scripts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# For Linux and MacOS&lt;/span&gt;
npm run test-debug

&lt;span class="c"&gt;# For Windows&lt;/span&gt;
npm run test-debug-windows
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#useful-commands"&gt;
  &lt;/a&gt;
  Useful commands
&lt;/h2&gt;

&lt;p&gt;Here's a list of commands that can be useful when writing and running/debugging our test scripts&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Run a single test&lt;/span&gt;
npx playwright &lt;span class="nb"&gt;test &lt;/span&gt;testName

&lt;span class="c"&gt;# Run in headed mode&lt;/span&gt;
npx playwright &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="nt"&gt;--headed&lt;/span&gt;

&lt;span class="c"&gt;# Run tests using a specified browser&lt;/span&gt;
npx playwright &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="nt"&gt;--browser&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;firefox

&lt;span class="c"&gt;# Run tests using all three browsers&lt;/span&gt;
npx playwright &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="nt"&gt;--browser&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;That's all&lt;/strong&gt;&lt;br&gt;
Thanks for reading and have fun testing with Playwright!&lt;/p&gt;

</description>
      <category>testing</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Enhance your code examples with links to reference docs</title>
      <author>Felix Hild√©n</author>
      <pubDate>Tue, 05 Oct 2021 20:17:13 +0000</pubDate>
      <link>https://dev.to/felixhilden/enhance-your-code-examples-with-links-to-reference-docs-485k</link>
      <guid>https://dev.to/felixhilden/enhance-your-code-examples-with-links-to-reference-docs-485k</guid>
      <description>&lt;p&gt;&lt;a href="https://www.flickr.com/photos/91545223@N00/9250743991"&gt;"Like the Sphinx"&lt;/a&gt; by Benson Kua is licensed with &lt;a href="https://creativecommons.org/licenses/by-sa/2.0/"&gt;CC BY-SA 2.0&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-it-not-everywhere"&gt;
  &lt;/a&gt;
  Why is it not everywhere?
&lt;/h2&gt;

&lt;p&gt;Some time ago when browsing Matplotlib's &lt;a href="https://matplotlib.org/stable/gallery/lines_bars_and_markers/simple_plot.html"&gt;documentation&lt;/a&gt;, I was awestruck: I could click their code examples to get taken to the reference documentation of whatever class or function was used. What a great feature! It makes navigating documentation much easier.&lt;/p&gt;

&lt;p&gt;So I tried to track down where those links were inserted. Turns out it was an extension called Sphinx-Gallery, which converts Python files to RST while capturing the script output. Awesome! But it didn't work for ordinary RST documentation, and it executes the code - two assumptions I didn't want to make with my own documentation. After searching around and slowly realising that it really did not exist, I set out to create a tool of my own! Enter &lt;a href="https://sphinx-codeautolink.readthedocs.io/en/latest/"&gt;sphinx-codeautolink&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-it-does"&gt;
  &lt;/a&gt;
  What it does
&lt;/h2&gt;

&lt;p&gt;As advertised, it matches code example contents to definitions documented elsewhere with Sphinx:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HBIEgslE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2c2ow1oywdkn75fntdi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HBIEgslE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2c2ow1oywdkn75fntdi.png" alt="links example"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Clicking the link would take you to &lt;code&gt;numpy.linspace&lt;/code&gt;'s documentation. Other key features include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Backreference tables: a table of examples where a particular definition is used&lt;/li&gt;
&lt;li&gt;Autodoc integration: insert backreference tables to all definitions documented with autodoc&lt;/li&gt;
&lt;li&gt;Intersphinx integration: as seen in the image above, linking to docs of external libraries is super simple&lt;/li&gt;
&lt;li&gt;Python console example support (&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; prefixed code)&lt;/li&gt;
&lt;li&gt;Invisible imports, example concatenation, simple type hint resolving and more!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-it"&gt;
  &lt;/a&gt;
  How to use it
&lt;/h2&gt;

&lt;p&gt;Easy. I wanted to make it work out of the box for most documentation, so if your examples are valid Python you're most likely already there. I had to add some import statements to my examples. Other than that, it's only a matter of installing the package and adding it to the list of Sphinx extensions!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;sphinx-codeautolink
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# conf.py
&lt;/span&gt;&lt;span class="n"&gt;extensions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;...,&lt;/span&gt;
    &lt;span class="s"&gt;"sphinx_codeautolink"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;a href="https://sphinx-codeautolink.readthedocs.io/en/latest/examples.html"&gt;examples&lt;/a&gt; have a more comprehensive explanation of all the use cases and RST syntax.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;The principle is quite simple: all code blocks are parsed and the names contained in them are traced back to definitions documented with Sphinx elsewhere in the documentation. Sphinx does its thing and after the HTML is written, links are injected to the correct places.&lt;/p&gt;

&lt;p&gt;Naturally I made a few assumptions, some different than the folks at Sphinx-Gallery: it is only usable with HTML documentation and I had to cut some corners with the parsing implementation. I didn't aim to emulate the Python runtime, just provide a correct result for the 99 % case. None of the shortcomings should cause problems with reasonable example code. But Sphinx-Gallery does perform better in some situations. For example where we'd have to analyse complex type hints, Sphinx-Gallery can simply look at the variable's type.&lt;/p&gt;

&lt;p&gt;I've poured my last month on this and really enjoyed the deep dive into Sphinx and docutils. I hope you'll get some use out of it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://sphinx-codeautolink.readthedocs.io/en/latest/"&gt;Documentation&lt;/a&gt;, &lt;a href="https://pypi.org/project/sphinx-codeautolink/"&gt;PyPI&lt;/a&gt;, &lt;a href="https://github.com/felix-hilden/sphinx-codeautolink"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>documentation</category>
      <category>sphinx</category>
    </item>
    <item>
      <title>A cap of tea</title>
      <author>Pato Z</author>
      <pubDate>Tue, 05 Oct 2021 19:56:13 +0000</pubDate>
      <link>https://dev.to/pzavolinsky/a-cap-of-tea-2io5</link>
      <guid>https://dev.to/pzavolinsky/a-cap-of-tea-2io5</guid>
      <description>&lt;p&gt;&lt;em&gt;A story about distributed systems, hype-driven design and the &lt;a href="https://en.wikipedia.org/wiki/Socratic_method"&gt;Socratic hardships&lt;/a&gt; of friendship&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fancy-some-tea"&gt;
  &lt;/a&gt;
  Fancy some tea?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Me: Hey, fancy some tea?&lt;/li&gt;
&lt;li&gt;You: Sure, I'm always up for some tea!&lt;/li&gt;
&lt;li&gt;Me: Cool, let's share a cap of tea&lt;/li&gt;
&lt;li&gt;You: You mean a &lt;em&gt;cup&lt;/em&gt; of tea right?&lt;/li&gt;
&lt;li&gt;Me: No no, I'm talking about a &lt;em&gt;cap&lt;/em&gt; of tea, hear me out. If only there was a way for us to pick the right time to meet and share some tea, right? Wonder no more...&lt;/li&gt;
&lt;li&gt;You: [oh, no, not another pitch] ...&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-pitch"&gt;
  &lt;/a&gt;
  The pitch
&lt;/h2&gt;

&lt;p&gt;"What is more powerful than the synergy of tea? Can we leverage the power of time to accelerate and optimize the engagement of the face time tea experience? Surely we can level up the tea experience to the next gen, to a rockstar, uber viral, vision.", I blurt.&lt;/p&gt;

&lt;p&gt;"Wow, what a load of nonsense", you think, you feel a lot dumber just by having heard all that stuff. Those brain cells are not coming back.&lt;/p&gt;

&lt;p&gt;An idea pops in to your head [Patent pending]: "The BS compressor". A lossy compression algorithm capable of boiling down all that nonsense into a simple "make tea better" or something. You start honing your time warping skills to see if you can start piping your live meetings through the BS compressor and gain precious hours of your life back.&lt;/p&gt;

&lt;p&gt;You keep daydreaming of a better world with less fuzz and start thinking that maybe the problem with the world is that we are using the &lt;a href="https://www.sansbullshitsans.com/"&gt;wrong font&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;"Hey, are you with me?", I say while poking you in the arm.&lt;/p&gt;

&lt;p&gt;"Sure, let's get this over with"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-product"&gt;
  &lt;/a&gt;
  The product
&lt;/h2&gt;

&lt;p&gt;"...as I was saying, we'll have this multi-tiered microservice architecture, where the service mesh communicates via an event bus ripe for enrichment..."&lt;/p&gt;

&lt;p&gt;"Wait a minute, what does this product &lt;em&gt;do&lt;/em&gt;?"&lt;/p&gt;

&lt;p&gt;"What do you mean? The services, the bus, the replicas, the protocols, the consensus...", I trail off, confused. A small tear runs through my cheek.&lt;/p&gt;

&lt;p&gt;"You mentioned tea?"&lt;/p&gt;

&lt;p&gt;"Right tea. There's tea in there somewhere, but did I tell you about the orchestrator?"&lt;/p&gt;

&lt;p&gt;You can feel the pressure building inside your head. The &lt;a href="https://en.wikipedia.org/wiki/User-centered_design"&gt;user-centered&lt;/a&gt; designer in you wants to scream in rage. After some effort you manage to compose yourself.&lt;/p&gt;

&lt;p&gt;"But what about the user experience? What is this product &lt;em&gt;for&lt;/em&gt;? Why would &lt;em&gt;I&lt;/em&gt; use it?" you manage to say while swallowing sadness.&lt;/p&gt;

&lt;p&gt;"Nah, don't worry about that. You know what's the best way to spice a depressing &lt;a href="https://en.wikipedia.org/wiki/Net_promoter_score"&gt;NPS&lt;/a&gt;, to cheer up a sad Kano (no, not the &lt;a href="https://en.wikipedia.org/wiki/Kano_(Mortal_Kombat)"&gt;violent cyborg&lt;/a&gt;, the &lt;a href="https://en.wikipedia.org/wiki/Kano_model"&gt;other one&lt;/a&gt;)? You're right, a beefy architecture diagram. An 8pt Courier New thing of beauty depicting in excruciating detail every little aspect of your architecture! Users love that stuff"&lt;/p&gt;

&lt;p&gt;"Sure, whatever, what makes this idea so unique?"&lt;/p&gt;

&lt;p&gt;"I'm glad you asked!"&lt;/p&gt;

&lt;p&gt;"I bet you are"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-impossible-trifecta"&gt;
  &lt;/a&gt;
  The impossible trifecta
&lt;/h2&gt;

&lt;p&gt;"Unlike previous unsuccessful attempts my idea captures the three fundamental properties of the best tea..."&lt;/p&gt;

&lt;p&gt;"Color, aroma and flavor?"&lt;/p&gt;

&lt;p&gt;"Wrong, you coffee-drinking muggle: consistency, availability and partition-tolerance"&lt;/p&gt;

&lt;p&gt;"That's some powerful tea you're brewing" you say rolling your eyes.&lt;/p&gt;

&lt;p&gt;"I sure am, let me tell you all about these wonderful properties" I reply completely immune to sarcasm.&lt;/p&gt;

&lt;p&gt;"I can't wait"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parsley-and-wood-chippings"&gt;
  &lt;/a&gt;
  Parsley and wood chippings
&lt;/h2&gt;

&lt;p&gt;"When you've been in the tea industry for as long as I have, you know that that fancy green chai is &lt;em&gt;expensive&lt;/em&gt;. No one in their right mind would serve that to customers.&lt;/p&gt;

&lt;p&gt;Instead we just brew the chai with parsley or, in dire times, with wood chippings and green food coloring.&lt;/p&gt;

&lt;p&gt;But what if two customers approach the counter at the same time and order a green chai? It'd be very bad for business if one of them would get the parsley chai while the other gets the wood chipping chai. That's just &lt;em&gt;wrong&lt;/em&gt;"&lt;/p&gt;

&lt;p&gt;"&lt;em&gt;That&lt;/em&gt;'s what's wrong?" you ask, making a mental note of never &lt;em&gt;ever&lt;/em&gt; drinking my tea. "Anyway, I thought we were talking of a computer system, all that microservice stuff and all, but now it looks like you are opening a tea shop..."&lt;/p&gt;

&lt;p&gt;"Pivot or die, my friend, pivot-or-die"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-guy-named-chad"&gt;
  &lt;/a&gt;
  A guy named Chad
&lt;/h2&gt;

&lt;p&gt;"How can you make sure every server knows which chai recipe to use at any given time?" you ask.&lt;/p&gt;

&lt;p&gt;"Piece of cake, we just have a single server. That guy really loves his tea. He works 24/7 non-stop. When he's feeling drowsy he just takes one on the house. No one knows his name or where he came from so we just call him Chad.&lt;/p&gt;

&lt;p&gt;Whenever we need to change the chai recipe we just tell Chad: hey Chad, we're running low on the good stuff, stop brewing parsley and switch to wood chippings. Sure thing, boss!"&lt;/p&gt;

&lt;p&gt;Not knowing where to begin to express all the kinds of wrong here, you just opt to stay away from it and just ask: "So your solution to the &lt;a href="https://en.wikipedia.org/wiki/Consistency_model"&gt;consistency problem&lt;/a&gt; is having a single Chad?"&lt;/p&gt;

&lt;p&gt;"Clearly, single Chad, zero fuzz"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ouroboros-queue"&gt;
  &lt;/a&gt;
  Ouroboros' queue
&lt;/h2&gt;

&lt;p&gt;"But wait, what happens if it's rush hour and lots of customers want their tea at the same time? Or, even worse if Chad collapses under the pressure." you are truly concerned now.&lt;/p&gt;

&lt;p&gt;"Nah, that Chad has the immune system of a horse with a self-patching kernel. He can take it, but just in case, we are hiring a bunch of other servers, so that in case he's out or something we can still serve our customers"&lt;/p&gt;

&lt;p&gt;Now that's more like it, multiple servers, some redundancy, higher resiliency to Chad nonsense, but you clearly see where things are going, so you ask: "But if you hire multiple servers how can you make sure they all follow the same chai recipe?"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-army-of-chads"&gt;
  &lt;/a&gt;
  An army of Chads
&lt;/h2&gt;

&lt;p&gt;"Oh, you're gonna love this! We hired a bunch of servers. They all have colorful back stories, interesting personalities and unique network addresses, but to keep things simple I just call them all Chad.&lt;/p&gt;

&lt;p&gt;Even better, they all have fancy Bluetooth ear pieces that keep them communicated at all times, so I can scream 'Chad, wood chipping time!' in the mic and all of them answer in unison: 'Sure thing, boss!', It's beautiful, I tell you"&lt;/p&gt;

&lt;p&gt;"OK, let me get this straight: your approach to &lt;a href="https://en.wikipedia.org/wiki/Availability"&gt;availabilty&lt;/a&gt; is hiring a bunch of random people, calling them all 'Chad' and relying on some Bluetooth dongles to transmit the stuff you bark over the microphone?"&lt;/p&gt;

&lt;p&gt;"Right you are"&lt;/p&gt;

&lt;p&gt;At this point you are tempted to ask "how do the Chads make sure all of them use the same recipe?" but you know me all too well to fall down this &lt;a href="https://en.wikipedia.org/wiki/Consensus_(computer_science)"&gt;consensus&lt;/a&gt; rabbit hole.&lt;/p&gt;

&lt;p&gt;So instead you ask your original question again: "But wait, you told me your &lt;em&gt;consistency&lt;/em&gt; strategy was 'Single Chad, zero fuzz', but to have proper &lt;em&gt;availability&lt;/em&gt; you now hired an 'Army of Chads', so what happens now?"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ac-dc"&gt;
  &lt;/a&gt;
  AC / DC
&lt;/h2&gt;

&lt;p&gt;"Worry not, that was before, now that my Chads have their Bluetooth pieces the sky is the limit. Bluetooth is flawless, you know"&lt;/p&gt;

&lt;p&gt;"Right, flawless...", you say with more eye rolling. Now that you think about it, your last expression of sarcasm seems like a lifetime ago. "Didn't you mention partition tolerance?"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#denial-as-an-architectural-pattern"&gt;
  &lt;/a&gt;
  Denial as an architectural pattern
&lt;/h2&gt;

&lt;p&gt;"Yeah, partition tolerance, that is &lt;em&gt;so overrated&lt;/em&gt;"&lt;/p&gt;

&lt;p&gt;"Wait, what?!"&lt;/p&gt;

&lt;p&gt;"To be honest, I don't believe in it"&lt;/p&gt;

&lt;p&gt;"Hold on, you don't &lt;em&gt;believe&lt;/em&gt; in network parti..." you trail off. At this point in our friendship you can spot a tangent from miles away so instead you try a more delicate approach.&lt;/p&gt;

&lt;p&gt;"Let's say that a Chad runs out of juice on his Bluetooth dongle, or maybe walks in front of a microwave or something, what happens then?"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-rock-and-a-hard-place"&gt;
  &lt;/a&gt;
  A rock and a hard place
&lt;/h2&gt;

&lt;p&gt;"Hmm, let me think about it... well clearly we'd like to avoid that whole parsley/wood chipping debacle, so that Chad should stop serving tea until he can get his dongle in working condition..."&lt;/p&gt;

&lt;p&gt;"Yeah, that looks like a very &lt;em&gt;consistent&lt;/em&gt; approach, but what about all the angry customers queuing in front of your broken Chad?"&lt;/p&gt;

&lt;p&gt;"Hmm, you're right, perhaps a better approach would be for that Chad to keep using the last known chai recipe, that way we can keep serving customers and everyone is happy..."&lt;/p&gt;

&lt;p&gt;"Ah, the &lt;em&gt;available&lt;/em&gt; approach, I like it. Although theoretically you could be serving two different types of chai at any given moment"&lt;/p&gt;

&lt;p&gt;You can see my face in slow-mo as it dawns on me "so you're saying that because I went for that crappy Bluetooth stuff, that now I must decide between angry tea-less customers and the parsley/wood chipping debacle?"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-crux-of-cap"&gt;
  &lt;/a&gt;
  The crux of CAP
&lt;/h2&gt;

&lt;p&gt;Frankly you are surprised it took me so long to see the writing on the walls.&lt;/p&gt;

&lt;p&gt;Network partitions are unavoidable whether because your Bluetooth ran out of battery, because the mailman was being chased by your neighbor's dog and dropped your letter, because you moved to too far from your wifi access point or because of a faulty network card.&lt;/p&gt;

&lt;p&gt;And, when network partitions &lt;em&gt;do&lt;/em&gt; occur, you are left with a tough choice: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Drop &lt;em&gt;availability&lt;/em&gt; in favor of &lt;em&gt;consistency&lt;/em&gt; and &lt;em&gt;partition tolerance&lt;/em&gt; (what's usually called a &lt;code&gt;CP&lt;/code&gt; system) leaving you with a bunch of angry tea-less customers.&lt;/li&gt;
&lt;li&gt;Drop the &lt;a href="https://en.wikipedia.org/wiki/Strong_consistency"&gt;strong consistency&lt;/a&gt; guarantee leaving you with a system that's both &lt;em&gt;available&lt;/em&gt; and &lt;em&gt;partition tolerant&lt;/em&gt; (i.e. an &lt;code&gt;AP&lt;/code&gt; system) but serves all kinds of weird chai.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the end you feel bad to see me so heartbroken so you give me some kind words of comfort:&lt;/p&gt;

&lt;p&gt;"Hey, don't worry, it's not so bad, I'm sure 'A &lt;a href="https://en.wikipedia.org/wiki/CAP_theorem"&gt;CAP&lt;/a&gt; of tea' will be a big success, you just need to replace that Bluetooth crap with something more reliable, like carrier pigeons"&lt;/p&gt;

</description>
      <category>distributedsystems</category>
      <category>tea</category>
    </item>
    <item>
      <title>React Custom Hooks: useBoolean</title>
      <author>Ludal üöÄ</author>
      <pubDate>Tue, 05 Oct 2021 19:18:39 +0000</pubDate>
      <link>https://dev.to/iamludal/react-custom-hooks-useboolean-3m6c</link>
      <guid>https://dev.to/iamludal/react-custom-hooks-useboolean-3m6c</guid>
      <description>&lt;p&gt;React hooks initially allow you to "hook into" React state and lifecycle features, like we used to do with the &lt;code&gt;componentDidMount&lt;/code&gt; or &lt;code&gt;componentWillUnmount&lt;/code&gt; methods when using class based components. What we'll discover in this article is that we can implement our own custom hooks, using the few primitives hooks React provides us, like &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt;. This way, you can drastically reduce the cognitive complexity of your components, by moving away some logic into functions that you will be able to reuse anywhere in the other components of your React applications. Your code will look cleaner, and you're following the Single Responsibility Principle (SRP), which states that each class or function (or, in our case, component) should have responsibility over a single part of a program's functionality, and it should encapsulate that part.&lt;/p&gt;

&lt;p&gt;Enough talk, let's get to work and implement our first custom hook: &lt;code&gt;useBoolean&lt;/code&gt;! üòé&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;First of all, why are we going to implement such a hook? Let's have a look a this simple component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Spoil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showSpoil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowSpoil&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"spoil"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setShowSpoil&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showSpoil&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hide&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Show&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showSpoil&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"spoil-content"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The component receives a &lt;code&gt;content&lt;/code&gt; prop, that only appears once the button gets clicked to show the spoil. Of course, clicking the button again will hide it back, and so on.&lt;/p&gt;

&lt;p&gt;Here, the component is so simple that it is very easy to read, but we could improve its readability by extracting the button &lt;code&gt;onClick&lt;/code&gt; listener to a separate function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Spoil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showSpoil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowSpoil&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setShowSpoil&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"spoil"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showSpoil&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hide&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Show&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showSpoil&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"spoil-content"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's better. We've simplified the return value of our function, but we've added a new line between the state initialization and the return statement. Of course this is not a major problem in our case, but when dealing with more complex components, this can lead to redundant functions declarations.&lt;/p&gt;

&lt;p&gt;In fact, our component could be further simplified if we had a &lt;code&gt;useBoolean&lt;/code&gt; hook, that we would use like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Spoil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showSpoil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowSpoil&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useBoolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"spoil"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setShowSpoil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showSpoil&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hide&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Show&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showSpoil&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"spoil-content"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See? We didn't add any extra function, and the &lt;code&gt;onClick&lt;/code&gt; listener is easier to read. Now, let's move into the implement of this simple hook, shall we? üòé&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;First, we define a function in which we can use the &lt;code&gt;useState&lt;/code&gt; hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useBoolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;‚ö†Ô∏è Be careful: you'll only be able to use the &lt;code&gt;useBoolean&lt;/code&gt; function (or should I say hook) in React components, as it uses the &lt;code&gt;useState&lt;/code&gt; hook.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So far, we've just created an alias for the &lt;code&gt;useState&lt;/code&gt; hook. &lt;/p&gt;

&lt;p&gt;Not very useful...üòÖ&lt;/p&gt;

&lt;p&gt;The interesting part comes now: instead of having the &lt;code&gt;setValue&lt;/code&gt; function in the return array, we will use an object that will contain 3 methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;toggle()&lt;/code&gt; to toggle the value&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;on()&lt;/code&gt; to set the value  to &lt;code&gt;true&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;off()&lt;/code&gt; to set the value to &lt;code&gt;false&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our hook now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useBoolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldValue&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;off&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here it is, you've just created your first custom hook, congratulations! ü•≥&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Articles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setArticles&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useBoolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useBoolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setArticles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setIsError&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;‚ö†Ô∏è Be careful: you can't use &lt;code&gt;setIsLoading(true)&lt;/code&gt; as we don't export a function anymore but an object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thanks for reading me. I hope you enjoyed this article, and if that's the case, don't hesitate to have a look at my other ones. Also, feel free to post some comments if you have any questions, or if you just want to say "hi". üòé&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#next-hook-raw-usecounter-endraw-"&gt;
  &lt;/a&gt;
  Next hook: &lt;code&gt;useCounter&lt;/code&gt;
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/docs/hooks-overview.html"&gt;https://reactjs.org/docs/hooks-overview.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Single-responsibility_principle"&gt;https://en.wikipedia.org/wiki/Single-responsibility_principle&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
