<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Solution: Powerful Integers</title>
      <author>seanpgallivan</author>
      <pubDate>Fri, 30 Apr 2021 08:05:23 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-powerful-integers-1o2p</link>
      <guid>https://dev.to/seanpgallivan/solution-powerful-integers-1o2p</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/powerful-integers/discuss/1183595"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-970-medium-powerful-integers"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/powerful-integers/"&gt;Leetcode Problem #970 (&lt;em&gt;Medium&lt;/em&gt;): Powerful Integers&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given three integers &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;bound&lt;/code&gt;, &lt;em&gt;return a list of all the &lt;strong&gt;powerful integers&lt;/strong&gt; that have a value less than or equal to &lt;code&gt;bound&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;An integer is &lt;strong&gt;powerful&lt;/strong&gt; if it can be represented as &lt;code&gt;xi + yj&lt;/code&gt; for some integers &lt;code&gt;i &amp;gt;= 0&lt;/code&gt; and &lt;code&gt;j &amp;gt;= 0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You may return the answer in any order. In your answer, each value should occur &lt;strong&gt;at most once&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;x = 2, y = 3, bound = 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[2,3,4,5,7,9,10]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;2 = 20 + 30&lt;br&gt;3 = 21 + 30&lt;br&gt;4 = 20 + 31&lt;br&gt;5 = 21 + 31&lt;br&gt;7 = 22 + 31&lt;br&gt;9 = 23 + 30&lt;br&gt;10 = 20 + 32&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;x = 3, y = 5, bound = 15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[2,4,6,8,10,14]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= x, y &amp;lt;= 100&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= bound &amp;lt;= 10^6&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This problem is a pretty straightforward one. Since we need to return all powerful integers and not just a count of them, there aren't many shortcuts we can take; we'll have to actually come up with the solution iteratively with nested loops.&lt;/p&gt;

&lt;p&gt;First, we can use a &lt;strong&gt;set&lt;/strong&gt; structure (&lt;strong&gt;ans&lt;/strong&gt;) to prevent duplicate answers. Then we can have our nested loops increment the power of the &lt;strong&gt;x&lt;/strong&gt; and &lt;strong&gt;y&lt;/strong&gt; values while adding the appropriate results to our set.&lt;/p&gt;

&lt;p&gt;One somewhat tricky situation occurs when one or more of the values is a &lt;strong&gt;1&lt;/strong&gt;, as that power will continue to be &lt;strong&gt;1&lt;/strong&gt; forever, regardless of the exponent. To deal with that, we can force each nested loop to &lt;strong&gt;break&lt;/strong&gt; after the first iteration if its original value was a &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once we've iterated over all possible combinations, we can convert &lt;strong&gt;ans&lt;/strong&gt; to an array and &lt;strong&gt;return&lt;/strong&gt; it.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;There are only minor differences in the code of each language.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;powerfulIntegers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bound&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;bound&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;bound&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;yj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;powerfulIntegers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;yj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;
                &lt;span class="n"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;powerfulIntegers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HashSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;yj&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;powerfulIntegers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;yj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>How many unfinished projects do you have?</title>
      <author>Madza</author>
      <pubDate>Fri, 30 Apr 2021 07:49:41 +0000</pubDate>
      <link>https://dev.to/madza/how-many-unfinished-projects-do-you-have-56fg</link>
      <guid>https://dev.to/madza/how-many-unfinished-projects-do-you-have-56fg</guid>
      <description>&lt;p&gt;Could you estimate how many projects are you normally working on simultaneously? Are you the type of person who works on a "start-to-finish" basis or do you like to switch between the projects in the making?&lt;/p&gt;

&lt;p&gt;For example, I usually keep around like 10 projects. Out of those 2-3 are normally larger scale projects and 5-7 are for learning/testing purposes.&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>productivity</category>
      <category>coding</category>
    </item>
    <item>
      <title>✔||🤢 Commit or Vomit | function currying 🍛</title>
      <author> 🐤🥇 Jasper de Jager</author>
      <pubDate>Fri, 30 Apr 2021 07:48:14 +0000</pubDate>
      <link>https://dev.to/jmdejager/commit-or-vomit-function-currying-4m17</link>
      <guid>https://dev.to/jmdejager/commit-or-vomit-function-currying-4m17</guid>
      <description>&lt;h1&gt;
  &lt;a href="#function-currying"&gt;
  &lt;/a&gt;
  Function currying
&lt;/h1&gt;

&lt;p&gt;Hard to put vomit and curry together in a title, but I had to ask 😁&lt;br&gt;&lt;br&gt;
I see this posted a lot on dev.to, function currying, but I find it not that readable myself TBH. What do you think? &lt;br&gt;
And please tell me why 😊&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#function-currying-%E2%9C%94"&gt;
  &lt;/a&gt;
  function currying  ✔||🤢?
&lt;/h4&gt;

&lt;p&gt;❤: Commit (I'd commit something like this)&lt;br&gt;
🏷: Vomit (we all know unicorns don't vomit)&lt;br&gt;
🦄: Like your post please continue this series!&lt;/p&gt;

&lt;p&gt;Let's vote! 😊&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@ninjason?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Jason Leung&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/curry?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javacript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Improve your unit tests with AssertJ</title>
      <author>Pavel Polívka</author>
      <pubDate>Fri, 30 Apr 2021 07:32:19 +0000</pubDate>
      <link>https://dev.to/pavel_polivka/improve-your-unit-tests-with-assertj-35m2</link>
      <guid>https://dev.to/pavel_polivka/improve-your-unit-tests-with-assertj-35m2</guid>
      <description>&lt;p&gt;You are probably writing unit tests, if not you probably should. Over the years of my career, I did a lot of workshops, speaks, etc about how to write those correctly. One of the points I always make is to have understandable outputs of those tests. Nothing is worst than failing a unit test with a message like&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;Failed. True != False&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
 what are you supposed to do with that? With standard assertions functions provided by all testing frameworks, you can improve this a bit by using correct functions, providing additional messages, etc... It's not perfect and it sometimes is a lot of work. &lt;/p&gt;

&lt;p&gt;Here comes &lt;a href="https://assertj.github.io/doc/"&gt;AssertJ&lt;/a&gt;. It's a simple library designed to improve your assertions. I would consider it essential for my testing needs. It provides a vast variety of assertions, state of the art error messages. Also, it improves code readability, it's super simple to understand what you want to assert. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;AssertJ is available on Maven central so installation is as simple as adding a test dependency.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.assertj&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;assertj-core&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.19.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class="nt"&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;In this article, I will go over few examples of how awesome AssertJ is. These examples will be done in JUnit5 with the following structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DtoComparisonTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

 &lt;span class="nd"&gt;@Test&lt;/span&gt;
 &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testComparison&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;TestedDto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;TestedNestedDto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
 &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;TestedDto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;TestedNestedDto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

 &lt;span class="nc"&gt;Assertions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;isEqualTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;

 &lt;span class="nd"&gt;@Data&lt;/span&gt;
 &lt;span class="nd"&gt;@AllArgsConstructor&lt;/span&gt;
 &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestedDto&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

 &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;firstString&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;secondString&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="nc"&gt;TestedNestedDto&lt;/span&gt; &lt;span class="n"&gt;nested&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;

 &lt;span class="nd"&gt;@Data&lt;/span&gt;
 &lt;span class="nd"&gt;@AllArgsConstructor&lt;/span&gt;
 &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestedNestedDto&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;firstInt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;secondInt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This example compares the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; objects and prints the following error messages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;org.opentest4j.AssertionFailedError: 
Expecting:
 &amp;lt;DtoComparisonTest.TestedDto(firstString=a, secondString=c, nested=DtoComparisonTest.TestedNestedDto(firstInt=1, secondInt=2))&amp;gt;
to be equal to:
 &amp;lt;DtoComparisonTest.TestedDto(firstString=a, secondString=b, nested=DtoComparisonTest.TestedNestedDto(firstInt=1, secondInt=3))&amp;gt;
but was not.
Expected :DtoComparisonTest.TestedDto(firstString=a, secondString=b, nested=DtoComparisonTest.TestedNestedDto(firstInt=1, secondInt=3))
Actual :DtoComparisonTest.TestedDto(firstString=a, secondString=c, nested=DtoComparisonTest.TestedNestedDto(firstInt=1, secondInt=2))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How awesome is that? &lt;/p&gt;

&lt;p&gt;It has a lot of built-in assertions for String. Let's see some examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt; &lt;span class="nd"&gt;@Test&lt;/span&gt;
 &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testComparison&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

 &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;TestedDto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Dragon"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Goblin"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;TestedNestedDto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

 &lt;span class="nc"&gt;Assertions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFirstString&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
 &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startsWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"D"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;endsWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"n"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isLowerCase&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;java.lang.AssertionError: 
Expecting &amp;lt;"Dragon"&amp;gt; to be a lowercase
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Imagine doing this and having the same output with normal assertions. &lt;/p&gt;

&lt;p&gt;It also has tons of built-ins for collections.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt; &lt;span class="nd"&gt;@Test&lt;/span&gt;
 &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testComparison&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

 &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;TestedDto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;TestedNestedDto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
 &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;TestedDto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"d"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;TestedNestedDto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
 &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

 &lt;span class="nc"&gt;Assertions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertThat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasSize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;allMatch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tested&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tested&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getNested&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getFirstInt&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;anyMatch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tested&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tested&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSecondString&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
 &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;containsNull&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Prints this error message&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;java.lang.AssertionError: 
Expecting:
 &amp;lt;[DtoComparisonTest.TestedDto(firstString=a, secondString=b, nested=DtoComparisonTest.TestedNestedDto(firstInt=1, secondInt=2)),
 DtoComparisonTest.TestedDto(firstString=c, secondString=d, nested=DtoComparisonTest.TestedNestedDto(firstInt=1, secondInt=2))]&amp;gt;
to contain a &amp;lt;null&amp;gt; element
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am pretty much in love with this library. It's super simple to start with and improves your tests so much. I recommend you to start using it today (also dive into their documentation, there is so much more to AssertJ). &lt;/p&gt;

&lt;p&gt;... &lt;/p&gt;

&lt;p&gt;For more tips like this, you can follow me on &lt;a href="https://twitter.com/pavel_polivka"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>java</category>
      <category>testing</category>
    </item>
    <item>
      <title>How do you deal with unproductive days?</title>
      <author>Madza</author>
      <pubDate>Fri, 30 Apr 2021 07:25:49 +0000</pubDate>
      <link>https://dev.to/madza/what-do-you-do-on-less-productive-days-1j6</link>
      <guid>https://dev.to/madza/what-do-you-do-on-less-productive-days-1j6</guid>
      <description>&lt;p&gt;We all have unproductive days. For content creators, this state is often referred to as 'the writer's block' or 'the wall'.&lt;/p&gt;

&lt;p&gt;How do you fill up these days?&lt;br&gt;
Do you take the day off from content creation or coding (if possible) or do you still have some tasks you like to do?&lt;/p&gt;

&lt;p&gt;For example, I try to relax the mind as much as possible (usually longer activities outside, sports).&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>productivity</category>
      <category>writing</category>
      <category>coding</category>
    </item>
    <item>
      <title>27 Bootstrap Cards</title>
      <author>MD Bootstrap</author>
      <pubDate>Fri, 30 Apr 2021 06:50:55 +0000</pubDate>
      <link>https://dev.to/mdbootstrap/27-bootstrap-cards-3j9d</link>
      <guid>https://dev.to/mdbootstrap/27-bootstrap-cards-3j9d</guid>
      <description>&lt;p&gt;A stunning collection of cards built with the newest Bootstrap 5. Weather cards, cards with charts, animated cards &amp;amp; many more. All of them are responsive and compatible with the newest Bootstrap 5.&lt;/p&gt;

&lt;p&gt;If you want to learn more about the construction of the cards and get to know the basic and advanced usage of this component - read &lt;a href="https://mdbootstrap.com/docs/standard/components/cards/"&gt;📄 Cards documentation&lt;/a&gt; &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#minimalist-statistics-cards"&gt;
  &lt;/a&gt;
  Minimalist statistics cards
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mdbootstrap.com/snippets/standard/mdbootstrap/2898120?view=side"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1JS0HbmX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mdbcdn.b-cdn.net/wp-content/themes/mdbootstrap4/content-gh/en/_mdb5/standard/web/docs/components/cards/examples/assets/1.jpg" alt="Minimalist statistics cards"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#statistics-with-subtitle"&gt;
  &lt;/a&gt;
  Statistics with subtitle
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mdbootstrap.com/snippets/standard/mdbootstrap/2898141?view=side"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftj9dhuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mdbcdn.b-cdn.net/wp-content/themes/mdbootstrap4/content-gh/en/_mdb5/standard/web/docs/components/cards/examples/assets/2.jpg" alt="Statistics with subtitle"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#card-with-a-quote"&gt;
  &lt;/a&gt;
  Card with a quote
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mdbootstrap.com/snippets/standard/mdbootstrap/2898144?view=side"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--73Rmc1CD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mdbcdn.b-cdn.net/wp-content/themes/mdbootstrap4/content-gh/en/_mdb5/standard/web/docs/components/cards/examples/assets/3.jpg" alt="Card with a quote"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#promoting-card"&gt;
  &lt;/a&gt;
  Promoting card
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mdbootstrap.com/snippets/standard/mdbootstrap/2898159?view=side"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4CG-DxbJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mdbcdn.b-cdn.net/wp-content/themes/mdbootstrap4/content-gh/en/_mdb5/standard/web/docs/components/cards/examples/assets/4.jpg" alt="Promoting card"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#weather-card"&gt;
  &lt;/a&gt;
  Weather card
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mdbootstrap.com/snippets/standard/mdbootstrap/2898164?view=side"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J-ZRe-gh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mdbcdn.b-cdn.net/wp-content/themes/mdbootstrap4/content-gh/en/_mdb5/standard/web/docs/components/cards/examples/assets/5.jpg" alt="Weather card"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#map-card"&gt;
  &lt;/a&gt;
  Map card
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mdbootstrap.com/snippets/standard/mdbootstrap/2898271?view=side"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t9oMB-zr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mdbcdn.b-cdn.net/wp-content/themes/mdbootstrap4/content-gh/en/_mdb5/standard/web/docs/components/cards/examples/assets/8.jpg" alt="Map card"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#calendar-card"&gt;
  &lt;/a&gt;
  Calendar card
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mdbootstrap.com/snippets/standard/mdbootstrap/2898281?view=side"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Czj8WWm1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mdbcdn.b-cdn.net/wp-content/themes/mdbootstrap4/content-gh/en/_mdb5/standard/web/docs/components/cards/examples/assets/9.jpg" alt="Calendar card"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#panels-card"&gt;
  &lt;/a&gt;
  Panels card
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mdbootstrap.com/snippets/standard/mdbootstrap/2898303?view=side"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2dH9G7Hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mdbcdn.b-cdn.net/wp-content/themes/mdbootstrap4/content-gh/en/_mdb5/standard/web/docs/components/cards/examples/assets/10.jpg" alt="Panels card"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#testimonial-card"&gt;
  &lt;/a&gt;
  Testimonial card
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mdbootstrap.com/snippets/standard/mdbootstrap/2898316?view=side"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUmamZcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mdbcdn.b-cdn.net/wp-content/themes/mdbootstrap4/content-gh/en/_mdb5/standard/web/docs/components/cards/examples/assets/12.jpg" alt="Testimonial card"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#form-card"&gt;
  &lt;/a&gt;
  Form card
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mdbootstrap.com/snippets/standard/mdbootstrap/2898319?view=side"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZWc34GDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mdbcdn.b-cdn.net/wp-content/themes/mdbootstrap4/content-gh/en/_mdb5/standard/web/docs/components/cards/examples/assets/13.jpg" alt="Form card"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#booking-card"&gt;
  &lt;/a&gt;
  Booking card
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mdbootstrap.com/snippets/standard/mdbootstrap/2898188?view=side"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--np_lRcea--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mdbcdn.b-cdn.net/wp-content/themes/mdbootstrap4/content-gh/en/_mdb5/standard/web/docs/components/cards/examples/assets/6.jpg" alt="Booking card"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#chart-card"&gt;
  &lt;/a&gt;
  Chart card
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mdbootstrap.com/snippets/standard/mdbootstrap/2898195?view=side"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aJ81l_up--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mdbcdn.b-cdn.net/wp-content/themes/mdbootstrap4/content-gh/en/_mdb5/standard/web/docs/components/cards/examples/assets/7.jpg" alt="Chart card"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#cards-with-chips"&gt;
  &lt;/a&gt;
  Cards with chips
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mdbootstrap.com/snippets/standard/mdbootstrap/2898306?view=side"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r_-2R0ks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mdbcdn.b-cdn.net/wp-content/themes/mdbootstrap4/content-gh/en/_mdb5/standard/web/docs/components/cards/examples/assets/11.jpg" alt="Cards with chips"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>bootstrap</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Oracle Cheat Sheet</title>
      <author>Neha Soni</author>
      <pubDate>Fri, 30 Apr 2021 06:29:19 +0000</pubDate>
      <link>https://dev.to/nehasoni__/oracle-cheat-sheet-5fg7</link>
      <guid>https://dev.to/nehasoni__/oracle-cheat-sheet-5fg7</guid>
      <description>&lt;p&gt;Hello everyone! In this blog, we will learn the most common-used commands of the Oracle database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-oracle-database"&gt;
  &lt;/a&gt;
  What is Oracle database?
&lt;/h2&gt;

&lt;p&gt;Oracle Database allows you to quickly and safely create, maintain and retrieve data. It is a relational database system developed by Oracle Corporation in 1980. It is cross-platform i.e it can run on various hardware across operating systems. It has its networking stack that allows applications from different platforms to communicate. It is a relational database in which data is accessed by users through query language called SQL.Oracle database has several structural features like Logical data structure, Memory caching, Backup and recovery, Clustering, etc. that make it popular.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;em&gt;To know more about Oracle database  &lt;a href="https://www.oracletutorial.com/getting-started/what-is-oracle-database/"&gt;Click Here&lt;/a&gt;&lt;/em&gt; &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-queries"&gt;
  &lt;/a&gt;
  Basic queries:-
&lt;/h2&gt;

&lt;p&gt;1.) &lt;strong&gt;CREATE TABLE - The create table statement is used to create a new table in the database.&lt;/strong&gt; &lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Syntax:-&lt;/em&gt; &lt;code&gt;CREATE TABLE table_name(col1_name data_type,col2_name data_type,..,colN_name data_type); &lt;br&gt;
&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;2.) &lt;strong&gt;SELECT - The select statement is used to fetch records from database.&lt;/strong&gt; &lt;br&gt;&lt;br&gt;
&lt;em&gt;Syntax:-&lt;/em&gt; &lt;code&gt;SELECT * FROM table_name;&lt;/code&gt;&lt;br&gt;
 &lt;br&gt;&lt;/p&gt;

&lt;p&gt;3.) &lt;strong&gt;INSERT - The insert statement is used to insert records into table.&lt;/strong&gt; &lt;br&gt;&lt;br&gt;
&lt;em&gt;Syntax:-&lt;/em&gt; &lt;code&gt;INSERT into table_name values(value1, value2,.., valuen);&lt;/code&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;4.) &lt;strong&gt;UPDATE - The update statement is used to update records of a table.&lt;/strong&gt; &lt;br&gt;&lt;br&gt;
&lt;em&gt;Syntax:-&lt;/em&gt; &lt;code&gt;UPDATE table_name set col1_name="exp1", col2_name="exp2" WHERE [condition]&lt;/code&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;5.)&lt;strong&gt;WHERE - The where statement is used to filter the records of a table.&lt;/strong&gt; &lt;br&gt;&lt;br&gt;
&lt;em&gt;Syntax:-&lt;/em&gt;&lt;code&gt;SELECT * FROM table_name where col_name=value;&lt;/code&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;6.)&lt;strong&gt;DELETE - The delete statement is used to delete the records of a table from database.&lt;/strong&gt; &lt;br&gt;&lt;br&gt;
&lt;em&gt;Syntax:-&lt;/em&gt;&lt;code&gt;DELETE FROM table_name WHERE col_name=value;&lt;/code&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;7.)&lt;strong&gt;TRUNCATE - The truncate statement is used to remove records of a table.&lt;/strong&gt; &lt;br&gt;&lt;br&gt;
&lt;em&gt;Syntax:-&lt;/em&gt;&lt;code&gt;TRUNCATE table table_name;&lt;/code&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;8.)&lt;strong&gt;DROP - The truncate statement is used to drop a table.&lt;/strong&gt; &lt;br&gt;&lt;br&gt;
&lt;em&gt;Syntax:-&lt;/em&gt;&lt;code&gt;DROP table table_name;&lt;/code&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;9.)&lt;strong&gt;DISTINCT - The Distinct clause is used to remove the duplicate records from the result set.&lt;/strong&gt; &lt;br&gt;&lt;br&gt;
&lt;em&gt;Syntax:-&lt;/em&gt;&lt;code&gt;SELECT DISTINCT expression FROM table_name WHERE [condition];&lt;/code&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;10.)&lt;strong&gt;GROUP BY - The Group By clause is used with SELECT statement to collect data from multiple records and group the results by one or more columns.&lt;/strong&gt; &lt;br&gt;&lt;br&gt;
&lt;em&gt;Syntax:-&lt;/em&gt;&lt;code&gt;SELECT col_name FROM table_name WHERE condition GROUP BY col_name(s);&lt;/code&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;11.)&lt;strong&gt;ORDER BY - The Order By clause is used to sort the records in result set&lt;/strong&gt; &lt;br&gt;&lt;br&gt;
&lt;em&gt;Syntax:-&lt;/em&gt;&lt;code&gt;SELECT * FROM table_name WHERE condition ORDER BY expression [ASC|DESC];&lt;/code&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;12.)&lt;strong&gt;VIEW - It is basically a virtual table which is stored in Oracle data dictionary.&lt;/strong&gt; &lt;br&gt;&lt;br&gt;
&lt;em&gt;Syntax:-&lt;/em&gt;&lt;code&gt;CREATE VIEW view_name AS SELECT col_1,col_2...col_n FROM table_name WHERE [condition];&lt;/code&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;13.)&lt;strong&gt;UNION - The UNION operator is used to combine the result sets of two or more Oracle SELECT statements.&lt;/strong&gt; &lt;br&gt;&lt;br&gt;
&lt;em&gt;Syntax:-&lt;/em&gt;&lt;code&gt;SELECT exp_1,..exp_n FROM table_1 WHERE condition UNION SELECT exp_1,..exp_n FROM table_2 WHERE condition;&lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Note:-&lt;/strong&gt;Each SELECT statement within the UNION operator must have the same number of fields in the result sets with similar data types&lt;/p&gt;

&lt;p&gt;14.)&lt;strong&gt;INTERSECT - The INTERSECT operator is used to pick the common records from compound SELECT queries.&lt;/strong&gt; &lt;br&gt;&lt;br&gt;
&lt;em&gt;Syntax:-&lt;/em&gt;&lt;code&gt;SELECT exp_1,..exp_n FROM table_1 WHERE condition INTERSECT SELECT exp_1,..exp_n FROM table_2 WHERE condition;&lt;/code&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#oracle-joins"&gt;
  &lt;/a&gt;
  Oracle Joins:-
&lt;/h2&gt;

&lt;p&gt;Join statement is used to combine data or rows from two or more tables based on a common field between them.Different types of Joins are:&lt;/p&gt;

&lt;p&gt;1.)&lt;strong&gt;INNER JOIN - The INNER JOIN returns all rows from multiple tables where the join condition is met.&lt;/strong&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mJXeOvFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611739402565/C5Wg-q-3X.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mJXeOvFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611739402565/C5Wg-q-3X.png" alt="innerjoin.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Syntax:-&lt;/em&gt;&lt;code&gt;SELECT col_1,..col_n  from table_1 INNER JOIN ON table_1.col = table2.col&lt;/code&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;2.)&lt;strong&gt;LEFT OUTER JOIN - The LEFT OUTER JOIN returns all the rows of the table on the left side of the join and matching rows for the table on the right side of join.&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z9fuaGxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611739820085/6KKLx0J0e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z9fuaGxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611739820085/6KKLx0J0e.png" alt="leftjoin.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Syntax:-&lt;/em&gt;&lt;code&gt;SELECT table1.col1, table1.col2, table2.col1,… FROM table1 LEFT JOIN table2 ON condition;&lt;/code&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;3.)&lt;strong&gt;RIGHT OUTER JOIN - The RIGHT OUTER JOIN returns all the rows of the table on the right side of the join and matching rows for the table on the left side of join.&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7zLjLSXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611739900303/lX6mu-yL2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7zLjLSXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611739900303/lX6mu-yL2.png" alt="right-outer.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Syntax:-&lt;/em&gt;&lt;code&gt;SELECT table1.col1, table1.col2, table2.col1,… FROM table1 RIGHT JOIN table2 ON condition;&lt;/code&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;4.)*&lt;em&gt;FULL OUTER JOIN - The FULL OUTER JOIN returns all rows from the left-hand table and right-hand table. *&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fz5cyjx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611740196328/vcVOxBYhF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fz5cyjx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611740196328/vcVOxBYhF.png" alt="fulljoin.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Syntax:-&lt;/em&gt;&lt;code&gt;SELECT table1.col1, table1.col2, table2.col1,… FROM table1 FULL JOIN table2 ON condition;&lt;/code&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;5.)&lt;strong&gt;SEMI JOINS - A semi-join between two tables returns one copy of each row in first table where one or more matches are found in the second table.&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Syntax:-&lt;/em&gt;&lt;code&gt;SELECT col1, col2 FROM table1 WHERE id IN (SELECT table1_id FROM table2 WHERE condition)&lt;/code&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sql-keys"&gt;
  &lt;/a&gt;
  SQL KEYS:-
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;KEYS&lt;/strong&gt; in the database helps you to identify a tuple(row) in a relation(table).&lt;br&gt;
It allows you to establish a relationship between tables and also identify the relationships between tables. There are no. of keys in database like **super key, primary key, foreign key, composite key, unique key, alternate key, etc.&lt;/p&gt;

&lt;p&gt;1.)&lt;strong&gt;PRIMARY KEY - A column of a table is said to be a primary key if it uniquely identifies each row in that table.&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Syntax:-&lt;/em&gt;&lt;code&gt;CREATE TABLE table_name(column1 datatype CONSTRAINT constraint_name PRIMARY KEY, column2 datatype [ NULL | NOT NULL ],...);&lt;/code&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Note:-&lt;/strong&gt; None of the fields that are part of the primary key can contain a NULL value.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;2.)*&lt;em&gt;FOREIGN KEY - A foreign key is a column that is used to link two tables together.&lt;br&gt;
*&lt;/em&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Syntax:-&lt;/em&gt;&lt;code&gt;CREATE TABLE table_name(col1 datatype null/not null,col2 datatype null/not null,... CONSTRAINT fkey_column FOREIGN KEY (col1, col2, ...col_n)&lt;br&gt;
    REFERENCES parent_table (col1, col2, ... col_n)&lt;br&gt;
);&lt;/code&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;3.)&lt;strong&gt;COMPOSITE KEY - It is the combination of two or more columns in a table that can be used to uniquely identify each row in the table.&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Syntax:-&lt;/em&gt;&lt;code&gt;CREATE TABLE table_name(col_1 datatype_1, col datatype_2,...  &lt;br&gt;
PRIMARY KEY (col_1, col_2, ...));&lt;/code&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;4.)&lt;strong&gt;UNIQUE KEY -It is a set of one or more than one column of a table that uniquely identifies a record in a database table.&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Syntax:-&lt;/em&gt;&lt;code&gt;CREATE TABLE table_name(col_1 datatype_1 NOT NULL UNIQUE, col_2 datatype_2,...col_n datatype_n);&lt;/code&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading 😃
&lt;/h3&gt;

&lt;p&gt;I would ❤ to connect with you at  &lt;a href="https://twitter.com/nehasoni__"&gt;Twitter&lt;/a&gt;  |  &lt;a href="https://www.linkedin.com/in/neha-soni-70a6231b1/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/nehasoni05"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Share your queries in the comments section.&lt;/p&gt;

</description>
      <category>database</category>
      <category>sql</category>
      <category>beginners</category>
    </item>
    <item>
      <title>All you need to Know About Berry React</title>
      <author>Rakesh S Nakrani</author>
      <pubDate>Fri, 30 Apr 2021 06:22:04 +0000</pubDate>
      <link>https://dev.to/rakesh_nakrani/all-you-need-to-know-about-berry-react-li6</link>
      <guid>https://dev.to/rakesh_nakrani/all-you-need-to-know-about-berry-react-li6</guid>
      <description>&lt;p&gt;In my previous blog, I introduced my upcoming product &lt;a href="https://berrydashboard.io"&gt;Berry&lt;/a&gt; - The react admin dashboard template. If you don't know what is Berry, Please look into this &lt;a href="https://dev.to/rakesh_nakrani/introducing-berry-react-material-design-admin-template-27dk"&gt;article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post, I am going to provide everything about Berry - The React-based Material Admin Template. This blog will cover the following topics.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What makes Berry different from others?

&lt;ul&gt;
&lt;li&gt;Design&lt;/li&gt;
&lt;li&gt;Flexibility&lt;/li&gt;
&lt;li&gt;Technology stack&lt;/li&gt;
&lt;li&gt;Pages&lt;/li&gt;
&lt;li&gt;Package Includes&lt;/li&gt;
&lt;li&gt;Compatibility&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Our Continuous Involvement in customer satisfaction&lt;/li&gt;
&lt;li&gt;Future planning &amp;amp; roadmap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me explain all the above points in detail.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-makes-berry-different-from-others"&gt;
  &lt;/a&gt;
  What makes Berry different from others?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pVpI8jtg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bt9gt0irjh4otflozuhi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pVpI8jtg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bt9gt0irjh4otflozuhi.jpg" alt="berry react dashboard template"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At First glance, minimal &lt;strong&gt;Design&lt;/strong&gt; makes Berry an Identical React backend template. Our focus is not just to achieve a simplistic design but it also provides a great User Experience and Berry will prove it. There are numerous features that make Berry one of the best, most powerful react admin templates available.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#design"&gt;
  &lt;/a&gt;
  Design
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Light / Dark Layouts&lt;/li&gt;
&lt;li&gt;LTR / RTL (Right-to-Left) Layouts&lt;/li&gt;
&lt;li&gt;Live customization of Font Family&lt;/li&gt;
&lt;li&gt;Use Eye-catchy warm color palette.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#flexibility"&gt;
  &lt;/a&gt;
  Flexibility
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Easy &amp;amp; consistent folder structure&lt;/li&gt;
&lt;li&gt;Prettier and well-Commented code style&lt;/li&gt;
&lt;li&gt;Organized code structure&lt;/li&gt;
&lt;li&gt;The hassle-free setup process and convenient helper guide&lt;/li&gt;
&lt;li&gt;Easy to implement components and pages&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#technology-stack"&gt;
  &lt;/a&gt;
  Technology Stack
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Built with &lt;a href="https://github.com/mui-org/material-ui"&gt;Material-UI&lt;/a&gt; v5 components library&lt;/li&gt;
&lt;li&gt;Authentication Methods - Auth0, Firebase, JWT&lt;/li&gt;
&lt;li&gt;Built with React Hooks API&lt;/li&gt;
&lt;li&gt;Redux &amp;amp; React Context API for State Management&lt;/li&gt;
&lt;li&gt;React Router for Navigation Routing&lt;/li&gt;
&lt;li&gt;Axios to Mock APIs&lt;/li&gt;
&lt;li&gt;Support of react-script&lt;/li&gt;
&lt;li&gt;Code Splitting&lt;/li&gt;
&lt;li&gt;CSS-in-JS where CSS is composed using JavaScript instead of defined in external files&lt;/li&gt;
&lt;li&gt;Multi-Language Support&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#pages"&gt;
  &lt;/a&gt;
  Pages
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;100+ Ready to use pages&lt;/li&gt;
&lt;li&gt;5+ Working Apps like Mail, Chat, User Management, Contact, Calendar, and more to come soon.&lt;/li&gt;
&lt;li&gt;Vertical page Layout with unlimited Menu level support.&lt;/li&gt;
&lt;li&gt;Menu Header with creative yet useful Notification &amp;amp; User Dialog options.&lt;/li&gt;
&lt;li&gt;Live Customizer with support of font selection, Layout switcher, Border radius and Button shadow enables/disable options.&lt;/li&gt;
&lt;li&gt;2 Dashboards with Footer features.&lt;/li&gt;
&lt;li&gt;50+ Useful Data, Statistics, and Chart Widgets.&lt;/li&gt;
&lt;li&gt;Contact cards Grid &amp;amp; List variants.&lt;/li&gt;
&lt;li&gt;10+ Important Form Plugins like Masking, Editor, Autocomplete, Clipboard, etc...&lt;/li&gt;
&lt;li&gt;Table variants like Simple table, Data table, Enhanced table with search, filter, pagination support.&lt;/li&gt;
&lt;li&gt;3 Variants of Authentication pages like login, register, forget &amp;amp; reset the password, OTP verification.&lt;/li&gt;
&lt;li&gt;Maintenance Pages like Error, coming soon (2), under construction.&lt;/li&gt;
&lt;li&gt;Utility pages like Typography, Color, Shadows, Icons (i.e. 2000+ Material Icons, Tabler Icons)&lt;/li&gt;
&lt;li&gt;Landing Page&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#package-includes"&gt;
  &lt;/a&gt;
  Package Includes
&lt;/h4&gt;

&lt;p&gt;The final download package includes the following directory.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Full &amp;amp; Skeleton (Quick start) package.&lt;/li&gt;
&lt;li&gt;Separate JavaScript &amp;amp; TypeScript package.&lt;/li&gt;
&lt;li&gt;Figma Design Resource File.&lt;/li&gt;
&lt;li&gt;Documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#compatibility"&gt;
  &lt;/a&gt;
  Compatibility
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EhmWh2Iz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d6k5zlf6mroutki77zf2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EhmWh2Iz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d6k5zlf6mroutki77zf2.jpg" alt="berry material react admin template"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have tested the Berry in the following environment.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Browser compatibility - Chrome, Mozilla, Edge, Safari (macOS), Opera&lt;/li&gt;
&lt;li&gt;Design Tested on Retina Displays, Laptop media, and responsive media like Tablet / iPad and Mobile devices.&lt;/li&gt;
&lt;li&gt;Page speed test made using Google Page Speed, GT Metrix tools.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#our-continuous-involvement-in-customer-satisfaction"&gt;
  &lt;/a&gt;
  Our Continuous Involvement in customer satisfaction
&lt;/h3&gt;

&lt;p&gt;Customers always wanted a product that gives them satisfaction in terms of usability, support, and easy-to-find query solutions. To achieve that we have a plan for continuous involvement in Berry. From our past experience, we found that manage the following things makes a good impact on customers that helps them quickly find solutions in the very first step without writing a ticket to us. us.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Knowledge Base&lt;/li&gt;
&lt;li&gt;Video Tutorials&lt;/li&gt;
&lt;li&gt;Quick FAQs&lt;/li&gt;
&lt;li&gt;A Support System with minimum turnaround time query resolution
Act upon Customer Feedback queries&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#future-planning-amp-road-map"&gt;
  &lt;/a&gt;
  Future Planning &amp;amp; Road Map
&lt;/h3&gt;

&lt;p&gt;We consider Berry react dashboard as a long run project. We shake our hand with ongoing trends, by doing our continuous involvement in our users' needs &amp;amp; their problem statement. So we will work based upon it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-we-are-considering-next"&gt;
  &lt;/a&gt;
  What we are considering next?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;More App Pages like E-commerce, File Manager, Sass.&lt;/li&gt;
&lt;li&gt;Conceptual Analytic, Sass, E-commerce Dashboards.&lt;/li&gt;
&lt;li&gt;Rich set of Widgets for Statistics, Data, Charts.&lt;/li&gt;
&lt;li&gt;More Page Layouts - Horizontal, Collapse.&lt;/li&gt;
&lt;li&gt;Considering Form pages like Form Wizard, Multi-Column Forms, Form Validations.&lt;/li&gt;
&lt;li&gt;Considering Form Plugins like Form Mega Options, MaxLength, Multi-Select, Select2, noUISlider, Form Repeater, Auto resize Textarea, MarkDown Editor, File Upload.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#summer-up"&gt;
  &lt;/a&gt;
  Summer up
&lt;/h3&gt;

&lt;p&gt;Hope you enjoy this detailed post. I try to cover up the many things about our Berry Project which make sense upon Technology aspects and our future plan for The Berry Material UI admin template. I will regularly make a post on Berry, so you can better know it. Stay tuned and stay safe.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#follow-us"&gt;
  &lt;/a&gt;
  Follow us
&lt;/h3&gt;

&lt;p&gt;Follow &amp;amp; receive updates about Berry's Progress. Soon we will launch Berry Open source and premium version.&lt;/p&gt;

&lt;p&gt;Website - &lt;a href="http://berrydashboard.io"&gt;http://berrydashboard.io&lt;/a&gt;&lt;br&gt;
Blog - &lt;a href="https://blog.berrydashboard.io"&gt;https://blog.berrydashboard.io&lt;/a&gt;&lt;br&gt;
Facebook - &lt;a href="https://www.facebook.com/codedthemes"&gt;https://www.facebook.com/codedthemes&lt;/a&gt;&lt;br&gt;
Twitter - &lt;a href="https://twitter.com/codedthemes"&gt;https://twitter.com/codedthemes&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>startup</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>4 Python functions that make reading easier</title>
      <author>Dev Write Ups</author>
      <pubDate>Fri, 30 Apr 2021 06:09:05 +0000</pubDate>
      <link>https://dev.to/devwriteups/4-python-functions-that-make-reading-easier-dml</link>
      <guid>https://dev.to/devwriteups/4-python-functions-that-make-reading-easier-dml</guid>
      <description>&lt;p&gt;A function in Python is a block of coordinated, reusable code that is utilized to play out a solitary, related activity. Functions gives a better seclusion to your application and a serious level of code reusing.&lt;/p&gt;

&lt;p&gt;In this post we're going to see 4 Functions that make reading Python code easier. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#globals"&gt;
  &lt;/a&gt;
  Globals
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;gloabals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'__name__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'__doc__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As it name implies, the &lt;code&gt;globals()&lt;/code&gt; fucntion will display information of global scope. For example, if we open a Python console and input globals(), a dict including all names and values of variables in global scope will be returned. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#locals"&gt;
  &lt;/a&gt;
  Locals
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;top_developer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; 
   &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'DevWriteUps'&lt;/span&gt;
   &lt;span class="n"&gt;country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Canada'&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="n"&gt;top_developer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# {'name':'DevWriteUps', 'country': 'Canada'}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After understanding the &lt;code&gt;globals()&lt;/code&gt;, &lt;code&gt;locals()&lt;/code&gt; funciton is just a piece of cake. As its name implies, it will return a dict including all local names nad values. By the way, if we call the &lt;code&gt;local()&lt;/code&gt; in &lt;strong&gt;global scope&lt;/strong&gt;, the result is identical to &lt;code&gt;globals()&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vars"&gt;
  &lt;/a&gt;
  Vars
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TopDeveloper&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"DevWriteUps"&lt;/span&gt;
   &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;county&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Canada"&lt;/span&gt;

&lt;span class="n"&gt;me&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TopDeveloper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;me&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# {'name':'DevWriteUps',  'country':  'Canada'}
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;me&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;vars()&lt;/code&gt; function will return the &lt;strong&gt;dict&lt;/strong&gt;, which is a dictionary used to store an object's attributes. Its result is the same as calling the &lt;code&gt;__dict__&lt;/code&gt; directly. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dir"&gt;
  &lt;/a&gt;
  DIR
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TopDeveloper&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"DevWriteUps"&lt;/span&gt;
   &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;county&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Canada"&lt;/span&gt;
&lt;span class="n"&gt;me&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TopDeveloper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;me&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;# ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'age', 'country', 'name']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;dir()&lt;/code&gt; function helps us demonstrate a lis tof names in the corresponding scope. In fact, the dir method calls &lt;code&gt;__dir__()&lt;/code&gt; internally. &lt;/p&gt;




&lt;p&gt;Thank you For Reading🤩 Subscribe to our  &lt;a href="https://www.devintro.com"&gt;newsletter&lt;/a&gt; , we send it occasionally with amazing news, resources and many thing.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top 3 Headless CMS Approach for WordPress</title>
      <author>Santosh Devnath</author>
      <pubDate>Fri, 30 Apr 2021 06:01:44 +0000</pubDate>
      <link>https://dev.to/santosh3700/top-3-headless-cms-approach-for-wordpress-6kb</link>
      <guid>https://dev.to/santosh3700/top-3-headless-cms-approach-for-wordpress-6kb</guid>
      <description>&lt;p&gt;Writing and managing content with WordPress is a fashion of nowadays. The content writer even doesn't need to talk with the developers to make any changes in their content. &lt;/p&gt;

&lt;p&gt;So till now, everything was good and the blogging and news field were happy to write and share the content on the Internet.&lt;/p&gt;

&lt;p&gt;But wait wait wait...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xeoeOSj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2jd1xj0qdoqs5.cloudfront.net/craft/uploads/Blog/2019/pagespeed-insights/insights.png%3Fmtime%3D20190528132114" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xeoeOSj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2jd1xj0qdoqs5.cloudfront.net/craft/uploads/Blog/2019/pagespeed-insights/insights.png%3Fmtime%3D20190528132114" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nothing is constant in this world, and here google comes and says, hey we are going to give high priority to the top fast loading sites. &lt;/p&gt;

&lt;p&gt;Now this becomes very unethical for the content writer because they are masters at writing the content, but how they can increase the site speed?&lt;/p&gt;

&lt;p&gt;Because there are many so other programming language or platform to build the website and speed up the site.&lt;/p&gt;

&lt;p&gt;But the content writer is already satisfied with WordPress to manage their content. So here headless CMS born.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LDI_FQQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yq16mnt2pnypizn0umf9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LDI_FQQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yq16mnt2pnypizn0umf9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ultimate purpose of the headless CMS is to give relaxation to the content writer, and they can do whatever they were doing previously.&lt;/p&gt;

&lt;p&gt;Now it's time for developers, they have to build a separate UI to speed up the site, while the backend will be still on WordPress.&lt;/p&gt;

&lt;p&gt;To creating the front-end there are many options for developers and as an experienced developer, I have my personal 3 best Frameworks. So here is the List&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-frontity"&gt;
  &lt;/a&gt;
  1. Frontity
&lt;/h2&gt;

&lt;p&gt;The best option for WordPress is the Frontity framework. This is specially built for WordPress. And also this is good for content management websites, in my experience, this is not good for complex websites. Because our ultimate purpose is to speed up the site of our blog or news, so we can use this framework. &lt;/p&gt;

&lt;p&gt;Here you can see a demo, where I have created the UI, and the most important thing is that you are going to really surprise with the speed.&lt;br&gt;
Here is the link - &lt;a href="https://baba-cric-frontity.vercel.app/"&gt;https://baba-cric-frontity.vercel.app/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-nextjs"&gt;
  &lt;/a&gt;
  2. NextJS
&lt;/h2&gt;

&lt;p&gt;Another best option is NextJS. Here you can build the content site as well as you can add a lot of complex business logic here. NextJS is a framework for the ReactJS. The special thing about NextJS is it automatically builds the AMP version of your site. But creating the frontend is not as easy with this, you need to understand a lot of concepts like Server Side Rendering, Preload, Async, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-gatsby"&gt;
  &lt;/a&gt;
  3. Gatsby
&lt;/h2&gt;

&lt;p&gt;If you have static content, means you update your content after a few time, then this framework is a very good option. Because Gatsby generates a static version of your website, and if you want to update any content on your site, you have to rebuild the site, and then it will be refreshed. If you want to build a news website, then this is not recommended framework for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So finally here is the conclusion that if you have a blog or news website in WordPress then you can use Frontity, if you have a content site with few complex logics then you can use NextJS, and finally if you have a static content site or you update your content occasionally then you can use Gatsby.&lt;/p&gt;

&lt;p&gt;Anyway, I am always here to help you, even you want to convert your own WordPress site to headless CMS and want to speed up your site, then you can contact me directly, I will really assist you in a very good way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Email - &lt;a href="mailto:santoshdevnath15@gmail.com"&gt;santoshdevnath15@gmail.com&lt;/a&gt;&lt;br&gt;
Whatsapp = Call = Telegram = +91 8077775266&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Having enjoyed this article, then share it with your community. &lt;/p&gt;

&lt;p&gt;And if you want to read my future articles then you can follow me too.&lt;/p&gt;

</description>
      <category>frontity</category>
      <category>react</category>
      <category>nextjs</category>
      <category>wordpress</category>
    </item>
    <item>
      <title>Class for Ajax applications</title>
      <author>alexdodonov</author>
      <pubDate>Fri, 30 Apr 2021 05:20:35 +0000</pubDate>
      <link>https://dev.to/alexdodonov/class-for-ajax-applications-22l0</link>
      <guid>https://dev.to/alexdodonov/class-for-ajax-applications-22l0</guid>
      <description>&lt;h1&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h1&gt;

&lt;p&gt;Let me introduce my small class for creating Ajax based applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/alexdodonov/mezon"&gt;Mezon Framework&lt;/a&gt; provides simple class for creating ajax applications. This class uses all functionality of the &lt;a href="https://github.com/alexdodonov/mezon-application"&gt;Mezon Application Class&lt;/a&gt; also provides usefull functionality:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;automatic creation of the routes '{RouteName}' from methods like 'action{RouteName}';&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alexdodonov/mezon-application#loading-routes-from-config-file"&gt;routes setup from config&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alexdodonov/mezon-application#action-messages"&gt;action messaging&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h1&gt;

&lt;p&gt;Just print in console&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer require mezon/ajax-application
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's all )&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#exception-handling"&gt;
  &lt;/a&gt;
  Exception handling
&lt;/h1&gt;

&lt;p&gt;For better debugging exception handling is performed in a special way. If the ajax request will be failed to process, then on the front end you will get JSON object with fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;code&lt;/em&gt; - code of the occured error;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;message&lt;/em&gt; - textual description of the occured error;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;call_stack&lt;/em&gt; - call stack for the call wich lead to the error.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#finishing-request-processing"&gt;
  &lt;/a&gt;
  Finishing request processing
&lt;/h1&gt;

&lt;p&gt;After finishing request processing you can mark it as successfull:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;ajaxRequestSuccess&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wich will return &lt;code&gt;{"code": 0}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or return any other result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;ajaxRequestResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case $result will be encoded in JSON and outputted.&lt;/p&gt;

&lt;p&gt;Or in case of the error you can call&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;ajaxRequestError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wich will return object &lt;code&gt;{"code": $code, "message": "message"}&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learn-more"&gt;
  &lt;/a&gt;
  Learn more
&lt;/h1&gt;

&lt;p&gt;More information can be found here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/alexdodonov/mezon"&gt;Mezon Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/mezonphp"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#it-will-be-great-if-you-will-contribute-something-to-this-project-documentation-sharing-the-project-in-your-social-media-bug-fixing-refactoring-or-even-submitting-issue-with-question-or-feature-request-thanks-anyway-ill-be-very-glad-if-youll-press-star-button-"&gt;
  &lt;/a&gt;
  It will be great if you will contribute something to this project. Documentation, sharing the project in your social media, bug fixing, refactoring, or even &lt;a href="https://github.com/alexdodonov/mezon-ajax-application/issues"&gt;submitting issue&lt;/a&gt; with question or feature request. Thanks anyway ) I'll be very glad if you'll press "STAR" button )
&lt;/h1&gt;

</description>
      <category>php</category>
      <category>mezon</category>
      <category>ajax</category>
      <category>application</category>
    </item>
    <item>
      <title>Javascript native face detector API</title>
      <author>Chris Bongers</author>
      <pubDate>Fri, 30 Apr 2021 05:14:23 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/javascript-native-face-detector-api-g9e</link>
      <guid>https://dev.to/dailydevtips1/javascript-native-face-detector-api-g9e</guid>
      <description>&lt;p&gt;As we now looked at the &lt;a href="https://daily-dev-tips.com/posts/detecting-barcodes-from-the-webcam/"&gt;barcode detector API&lt;/a&gt;, I want to introduce you to the face detection API.&lt;/p&gt;

&lt;p&gt;Unlike the barcode one, this is not yet publicly available, but we can enable it in Chrome by enabling a flag.&lt;/p&gt;

&lt;p&gt;Open Chrome, and type the following address: &lt;code&gt;chrome://flags&lt;/code&gt;, in there enable the &lt;code&gt;#enable-experimental-web-platform-features&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---kirXdGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619506691206/a6odngNMk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---kirXdGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619506691206/a6odngNMk.png" alt="Enabling experimental web flag"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we should be able to use this face detection as well.&lt;/p&gt;

&lt;p&gt;The end result for today will be to detect faces in a picture, as you can see in the image below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3_J7ABtj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619508585879/vusXmX0lj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3_J7ABtj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619508585879/vusXmX0lj.png" alt="JavaScript face detection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-face-detector-api"&gt;
  &lt;/a&gt;
  Using the Face Detector API
&lt;/h2&gt;

&lt;p&gt;In general use, the face detector is pretty easy.&lt;/p&gt;

&lt;p&gt;We can simply create a new detector like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;faceDetector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FaceDetector&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Pass options:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;faceDetector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FaceDetector&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;maxDetectedFaces&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;fastMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see we can pass an optional argument, where we can limit the number of faces being found.&lt;br&gt;
And we can turn the fast mode on or off.&lt;br&gt;
FastMode on means it will focus on speed over accuracy.&lt;/p&gt;

&lt;p&gt;The next part is to simply call the detect function and pass an image or video source to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;faces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;faceDetector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;faces&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;face&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;face&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Face detection failed:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#making-a-face-detection-demo"&gt;
  &lt;/a&gt;
  Making a face detection demo
&lt;/h2&gt;

&lt;p&gt;Let's create our demo, we will use a fixed image for out the demo, so let's set up an image with some people in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
  &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://images.unsplash.com/photo-1531545514256-b1400bc00f31?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1567&amp;amp;q=80"&lt;/span&gt;
  &lt;span class="na"&gt;crossorigin&lt;/span&gt;
  &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Group of people"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can make a window onload function to wait till everything is loaded.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we simply call the detect function, we will be making this function asynchronous.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;faceDetector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FaceDetector&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;fastMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;faces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;faceDetector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;faces&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;face&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;face&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Face detection failed:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function takes the image we set at hand, and it will call the face detector in fast mode.&lt;/p&gt;

&lt;p&gt;Then we can detect faces on that image and we simply loop through each image.&lt;/p&gt;

&lt;p&gt;A response of an image looks like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;boundingBox: The size and position of the box the face fits&lt;/li&gt;
&lt;li&gt;landmarks: Elements like the eye and mouth of a person&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So in our example, we get four faces, which is correct.&lt;br&gt;
Let's add some boxes over the faces so it's visible what we are looking at!&lt;/p&gt;

&lt;p&gt;First, let's wrap our image in a relative holder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"holder"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
    &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://images.unsplash.com/photo-1531545514256-b1400bc00f31?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1567&amp;amp;q=80"&lt;/span&gt;
    &lt;span class="na"&gt;crossorigin&lt;/span&gt;
    &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Group of people"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can make the holder a relative element, and the image absolutely positioned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#holder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in our detection, we can now grab each face, and get the width, height, top, and left values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;faces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;faceDetector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;faces&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;face&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;face&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;boundingBox&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;faceDiv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;faceDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;face&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;faceDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;faceDiv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then create a new div element, with the className &lt;code&gt;face&lt;/code&gt; and set the styles for this div, we then add it to our holder div.&lt;/p&gt;

&lt;p&gt;Let's quickly add some basic styles for our face div.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.face&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you enabled the flag you should be able to try out the following Codepen.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/JjEzxMX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And that's it we have now done some basic face detection using a native API!&lt;br&gt;
I'll leave it up to you to get the eyes and mouth pinned!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browser-support"&gt;
  &lt;/a&gt;
  Browser support
&lt;/h2&gt;

&lt;p&gt;This API is unfortunately not publicly available, so browser support can't be provided at this stage.&lt;br&gt;
However, is a very cool one to look out for!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
  </channel>
</rss>
