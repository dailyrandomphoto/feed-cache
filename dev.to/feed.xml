<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The Perils of Remote Work</title>
      <author>Adam Nathaniel Davis</author>
      <pubDate>Thu, 03 Dec 2020 05:24:07 +0000</pubDate>
      <link>https://dev.to/bytebodger/the-perils-of-remote-work-365l</link>
      <guid>https://dev.to/bytebodger/the-perils-of-remote-work-365l</guid>
      <description>&lt;p&gt;A good friend of mine asked me to write this post.  Actually... to be more accurate, he asked me to write something about the hesitance of corporations to support remote work - and why they're being so shortsighted when they throw up roadblocks to the remote workforce.  I fear that I'm not gonna write &lt;em&gt;quite&lt;/em&gt; the article he was hoping for.&lt;/p&gt;

&lt;p&gt;To be clear, I've worked remotely during several periods of my life.  Right now, I'm a fulltime, fully-remote employee.  And I absolutely love it.  I hope to never be working in an office again.  I scoff at many of the artificial barriers that keep coders chained to physical desks.&lt;/p&gt;

&lt;p&gt;So why was I tepid about writing this article??  Well... as much as I &lt;em&gt;love&lt;/em&gt; remote work, and as much as I truly believe that far more jobs should offer remote options, I don't quite see it as the panacea that some of my colleagues claim it to be.  &lt;/p&gt;

&lt;p&gt;Working remotely is &lt;strong&gt;&lt;em&gt;friggin awesome&lt;/em&gt;&lt;/strong&gt;!  But it's awesome &lt;em&gt;for me&lt;/em&gt;.  And it's awesome &lt;em&gt;for my current employer&lt;/em&gt;.  But I'd be the first to tell you that it's definitely not "friggin awesome" for every employee - nor for every employer.  Let me explain...&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DH4U-eVP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/02i0ws6sxs081s3jzoxv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DH4U-eVP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/02i0ws6sxs081s3jzoxv.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-mirage" class="anchor"&gt;
  &lt;/a&gt;
  The Mirage
&lt;/h2&gt;

&lt;p&gt;Whether you've worked remotely or not, almost all devs have thought, at one point or another:&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I'm staring at this screen all day.  I could be doing this just as well while sitting in my employer's cubicle, or while sitting in my house in my boxer shorts, or while sitting on a beach in the Cayman Islands.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;And I'd be the first to tell you that you're not &lt;em&gt;wrong&lt;/em&gt;.  But you're not entirely &lt;em&gt;right&lt;/em&gt;, either.  To be clearer, you're not accurately representing &lt;em&gt;all&lt;/em&gt; of the variables in the equation.  &lt;em&gt;Where&lt;/em&gt; you're physically sitting, while you code, is usually a very small factor in your productivity.  Far more important is: &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Where are your coworkers located?
&lt;/li&gt;
&lt;li&gt;How are you communicating with your coworkers?
&lt;/li&gt;
&lt;li&gt;What &lt;em&gt;type&lt;/em&gt; of communicator are you?&lt;/li&gt;
&lt;li&gt;How is your employer accustomed to managing remote workers?&lt;/li&gt;
&lt;li&gt;Be honest with yourself - be &lt;strong&gt;&lt;em&gt;really friggin honest&lt;/em&gt;&lt;/strong&gt;:  Just how well do you work &lt;em&gt;by yourself&lt;/em&gt;??&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;These questions are not trivial.  They can make-or-break your remote gig.  None of these questions are meant to &lt;em&gt;derail&lt;/em&gt; your desire for remote work.  But I want you to think - &lt;em&gt;very carefully&lt;/em&gt; - about these things before you dive blindly into a remote gig.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I've&lt;/em&gt; been on the wrong end of these questions - and I've paid for it by having several remote gigs that were... &lt;em&gt;awful&lt;/em&gt;.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8r3mjhuc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z7n5mvgopxajfx5q4la0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8r3mjhuc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z7n5mvgopxajfx5q4la0.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#everyone-elses-location" class="anchor"&gt;
  &lt;/a&gt;
  Everyone &lt;em&gt;Else's&lt;/em&gt; Location
&lt;/h2&gt;

&lt;p&gt;Although I can't fault anyone who's angling for remote work, you need to think, very carefully, about whether you truly want to be remote - if everyone else in your company is onsite.  There are times, usually based on someone's personal history, when someone can leverage an otherwise-onsite gig into a remote position.  And that's... great?&lt;/p&gt;

&lt;p&gt;But if everyone else in your company is onsite, you need to think very carefully about whether it's a good idea to go remote.  As much as I now adore remote work, I've come to the conclusion that, if everyone else in the company is onsite, you need to be extremely cautious about whether you go remote. &lt;/p&gt;

&lt;p&gt;Too often, we assume the only "obstacle" to remote work is our employer's permission.  But even if your employer wholeheartedly approves your remote status, it can still lead to massive problems if the company, in general, is an "onsite" company, and if the rest of your team members are all onsite.&lt;/p&gt;

&lt;p&gt;A classic warning sign, in this regard, is when you find that meetings are being held without you - meetings of which you were never aware.  I've been in the room when a remote employee says (via speakerphone), "When was this discussed??"  And the manager, without missing a beat, says, "Ohhh... We weren't sure how to reach you yesterday afternoon, but we had an impromptu conversation about it here in the office."&lt;/p&gt;

&lt;p&gt;In fact, I've witnessed this so many times in my career, that I've now formulated one simple rule about remote work:&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If professional/corporate advancement is your goal, you should never work a remote job when most/all of the rest of your team is onsite.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;I don't really &lt;em&gt;like&lt;/em&gt; typing that.  It doesn't feel "fair" to me.  But it's true.  If you're working for a company where everyone &lt;em&gt;else&lt;/em&gt; is onsite, you need to be extremely careful about whether you accept/pursue remote opportunities with them.  And if you still want to fill a remote role - with a primarily &lt;em&gt;onsite&lt;/em&gt; company - you need to be prepared for the real possibility that, at some point, you will essentially be left behind.&lt;/p&gt;

&lt;p&gt;I've also found that remote work is a near-impossibility if I accept a position with a company &lt;em&gt;in my home town&lt;/em&gt;.  Even if I interviewed with the explicit stipulation that I'm to work remotely, that stipulation tends to fly out the window if the employer &lt;em&gt;knows&lt;/em&gt; that I live right there, in town.&lt;/p&gt;

&lt;p&gt;If you live in, say, Chicago, and you deeply desire to work remotely, then for cripe's sake, &lt;em&gt;don't accept a so-called "remote" position with any company with offices in Chicago&lt;/em&gt;.  I know there are exceptions to this.  But those exceptions are... &lt;em&gt;exceptional&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Too many times, I've found that someone talks all high-and-mighty about "remote work" while I'm interviewing.  Then, when I'm hired, they assume that I can absolutely slide into the office on a darn-near-daily basis if they know that I live in town.&lt;/p&gt;

&lt;p&gt;When you're &lt;em&gt;physically&lt;/em&gt; remote, no one assumes that they can schedule an &lt;em&gt;in-person&lt;/em&gt; meeting with you.  But when everyone &lt;em&gt;knows&lt;/em&gt; that you live right here, in the same town, well... they tend to assume that they can also schedule you for onsite meetings.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hMzkjCH8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wwdl7sw7yqmgnnmt0qfh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hMzkjCH8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wwdl7sw7yqmgnnmt0qfh.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#digital-communication-is-communication" class="anchor"&gt;
  &lt;/a&gt;
  Digital Communication &lt;em&gt;Is&lt;/em&gt; Communication
&lt;/h2&gt;

&lt;p&gt;Does your employer have a Slack channel?  (Or a similar chat application?)  Does your company work "well" over email?  Are your coworkers comfortable jumping on Zoom?  (Or a similar video conferencing medium?)  &lt;/p&gt;

&lt;p&gt;These are not throwaway questions.  Even in our modern age, I find that there are some companies that rely &lt;em&gt;heavily&lt;/em&gt; on digital communication.  And others that always seem to fall back on real-time, in-the-flesh, face-to-face.  &lt;/p&gt;

&lt;p&gt;What does this have to do with &lt;em&gt;you&lt;/em&gt;??  &lt;/p&gt;

&lt;p&gt;Well, if your company still relies on that back-slapping, in-yer-face kinda camaraderie, then you need to think very carefully about whether you really wanna be the "remote person" on the team.  &lt;/p&gt;

&lt;p&gt;Set your judgments and emotions aside for a moment.  I'm not asking whether they &lt;em&gt;should&lt;/em&gt; be so dependent on in-the-flesh communications.  I'm asking you whether they &lt;em&gt;are&lt;/em&gt; dependent upon them.  Because, if they &lt;em&gt;are&lt;/em&gt;, then it won't matter where you &lt;em&gt;think&lt;/em&gt; they should be.  All that will matter (for your career), is where they are, right now, as a company.  And if they're stuck in that "old boy" mentality, you could be shooting yourself in the foot by going remote.&lt;/p&gt;

&lt;p&gt;You may be thinking, "Oh, mannn... I &lt;em&gt;hate&lt;/em&gt; Slack."  And I'd &lt;em&gt;agree&lt;/em&gt; with you!!!  And you may be thinking, "Oh, mannn... I &lt;em&gt;hate&lt;/em&gt; Zoom."  And I'd &lt;em&gt;agree&lt;/em&gt; with you!!!  But if you're working remotely, there needs to be &lt;em&gt;some&lt;/em&gt; kinda way to "connect" with your coworkers.  And if you're working remotely, and your company isn't comfortable with any kinda chat/video solution, there's a great chance that you'll find yourself becoming increasingly marginalized as time goes on.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jFOTl7vk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2ri9fb0z0pzqpr2cpkbv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jFOTl7vk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2ri9fb0z0pzqpr2cpkbv.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remote-work-is-not-for-introverts" class="anchor"&gt;
  &lt;/a&gt;
  Remote Work Is &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt; For Introverts
&lt;/h2&gt;

&lt;p&gt;I'm gonna say this again.  Cuz I fear that some of you may have blown a mental gasket with that last headline:&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remote work is &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt; for introverts!!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;On the surface, remote work probably sounds like the ultimate solution for the ultimate introvert.  &lt;em&gt;Right??&lt;/em&gt;  But I'm here to tell you - that is &lt;em&gt;not&lt;/em&gt; the case.  In fact, I believe strongly that introverts have possibly the hardest time dealing with remote work.&lt;/p&gt;

&lt;p&gt;Remote work is a lotta things - but "introverted" isn't one of them.  When employees are remote, they need to behave in distinctly &lt;em&gt;extroverted&lt;/em&gt; ways to foster the proper function for themselves and all around them.  &lt;/p&gt;

&lt;p&gt;Think about this:  If you're alone, on a mountainside, with absolutely no &lt;em&gt;physical&lt;/em&gt; interaction with the "outside world", how do you ensure a meaningful, ongoing &lt;em&gt;collaboration&lt;/em&gt; with your team members??  &lt;/p&gt;

&lt;p&gt;The answer is: through copious communication.  &lt;em&gt;Probably&lt;/em&gt; a lot more communication than you'd need if you were in the same &lt;em&gt;physical&lt;/em&gt; space as your colleagues.  &lt;/p&gt;

&lt;p&gt;Let me put this another way:  How do you maintain a healthy, loving, &lt;em&gt;long-distance&lt;/em&gt; relationship?  Is it by clamming up and &lt;em&gt;limiting&lt;/em&gt; your communication?  Or is it by going out of your way to communicate even &lt;em&gt;more&lt;/em&gt; than you would if you were in the same physical space??&lt;/p&gt;

&lt;p&gt;I'm raising my hand here.  When I'm "nose-down" on code, I'd &lt;em&gt;really&lt;/em&gt; appreciate it if I didn't have to talk &lt;em&gt;with anyone&lt;/em&gt;.  Just leave me the-eff alone.  But that leads to massive, near-immediate problems when you're working remotely.  &lt;/p&gt;

&lt;p&gt;Remote work doesn't cater to the introvert.  IMHO, effective remote work &lt;em&gt;punishes&lt;/em&gt; the introvert.  I truly believe that many introverts thrive in an onsite environment, where they can be &lt;em&gt;physically&lt;/em&gt; present (and thus, available for the occasional "drive by"), but they can hole away in their cubicles.  &lt;/p&gt;

&lt;p&gt;When introverts work remotely, they tend to avoid status updates.  They tend to shun chat and conference calls.  And this leads their managers to wonder... just what in the heck they're doing??  And if you &lt;em&gt;really&lt;/em&gt; wanna set introverts off, give them a long interrogation about what they've been up to.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wvWbsSc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tkz354r42ffmbmyzxgqx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wvWbsSc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tkz354r42ffmbmyzxgqx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#culture-counts" class="anchor"&gt;
  &lt;/a&gt;
  Culture Counts
&lt;/h2&gt;

&lt;p&gt;Whether you're considering a brand new company, or whether you're angling for a new role with your 20-year employer, I want you to think - &lt;em&gt;deeply&lt;/em&gt; - about the particular culture that you're in.  &lt;/p&gt;

&lt;p&gt;Specifically, there are just some companies with an outright &lt;em&gt;hostile&lt;/em&gt; viewpoint toward remote workers. They assume that remote workers are lazy, or trying to "get one over" on the company.  There are some - nay... &lt;em&gt;many&lt;/em&gt; - companies that simply will not view remote workers in a fair light.&lt;/p&gt;

&lt;p&gt;Of course, there are &lt;em&gt;some&lt;/em&gt; companies that understand remote workers.  Some even &lt;em&gt;embrace&lt;/em&gt; them.  But as much as I adore remote work, I'd be the first to tell you that remote work only makes sense if you're with a company that has a nurturing culture.  &lt;/p&gt;

&lt;p&gt;This is particularly difficult for some people to accept.  They get this "dream" in their head that they want to work remotely.  And then, after sufficiently bullying their management chain, they get "approval" to work remotely.  But after weeks or months, they're shocked to find that the arrangement has not turned out to their favor...&lt;/p&gt;

&lt;p&gt;You see, even though I routinely advocate &lt;em&gt;for&lt;/em&gt; remote work, I'd be the first to tell you that you can't &lt;em&gt;force&lt;/em&gt; an onsite-centric employer to suddenly embrace remote work.  It really is a culture thing.  As recently as a few months ago, I've met CEOs of companies who openly professed to &lt;em&gt;hating&lt;/em&gt; remote work.  And you know what???  I'm inclined to &lt;em&gt;believe&lt;/em&gt; them!  If your employer isn't on that "remote train", it might be a waste of time to try to drag them onto it.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oIvnTu_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cxhu14ypd95908r38vuo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oIvnTu_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cxhu14ypd95908r38vuo.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#know-thyself" class="anchor"&gt;
  &lt;/a&gt;
  Know Thyself
&lt;/h2&gt;

&lt;p&gt;This is the biggest part of remote work.  I can't possibly emphasize it enough.  Remote work is incredible... but only if you can be honest with your employer (and yourself).   &lt;/p&gt;

&lt;p&gt;There can be this overriding peer pressure to declare yourself in favor of remote work.  And remote work is &lt;em&gt;awesome&lt;/em&gt; - for those who are suited for it.  But not &lt;em&gt;everyone&lt;/em&gt; is suited for it.  And that's... &lt;strong&gt;&lt;em&gt;OK&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Some people have natural distractions at home: kids, spouse, poor work-from-home environment, etc.  And there's nothing wrong with that - as long as you can be honest about it.&lt;/p&gt;

&lt;p&gt;Some people really &lt;em&gt;need&lt;/em&gt; that structure that comes with a "formal" office environment.  And there's nothing wrong with that - as long as you can be honest about it.&lt;/p&gt;

&lt;p&gt;Some people just have too many distractions in their home environment.  And there's nothing wrong with that - as long as you can be honest about it.&lt;/p&gt;

&lt;p&gt;You see, despite what &lt;em&gt;some people&lt;/em&gt; might espouse, the simple fact is that I don't promote "remote work for &lt;em&gt;everyone&lt;/em&gt;".  Because... I know that remote work is &lt;em&gt;not&lt;/em&gt; for everyone.  &lt;/p&gt;

&lt;p&gt;If remote work &lt;em&gt;is&lt;/em&gt; for you, and your employer just doesn't understand, then I sincerely recommend that you put yourself in the market for a new employer.  But it's silly to assume that remote work would be better for &lt;em&gt;every&lt;/em&gt; one &lt;em&gt;all&lt;/em&gt; the time.  If you care about your career, you should think - very carefully - about the pros and cons.&lt;/p&gt;

</description>
      <category>codequality</category>
      <category>productivity</category>
      <category>career</category>
      <category>webdev</category>
    </item>
    <item>
      <title>11 JavaScript Console Commands Explained</title>
      <author>Josias Aurel</author>
      <pubDate>Thu, 03 Dec 2020 03:20:47 +0000</pubDate>
      <link>https://dev.to/josiasaurel/11-javascript-console-commands-explained-4pi5</link>
      <guid>https://dev.to/josiasaurel/11-javascript-console-commands-explained-4pi5</guid>
      <description>&lt;h1&gt;
  &lt;a href="#these-are-11-useful-javascript-raw-console-endraw-commands-to-know-about" class="anchor"&gt;
  &lt;/a&gt;
  These are 11 useful JavaScript &lt;code&gt;console&lt;/code&gt; commands to know about.
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#1-raw-consolelog-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;console.log()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The first and most common command is the console.log() command. It takes in a message and prints out the result to the console. It can also print JavaScript objects, arrays - all data types in JavaScript. Additionally, it takes care of formatting the output of the result to make it easier to trace.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Hello World&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sam Simon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Banana&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Orange&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F4byXeaI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/NZJHBk3/console-logobj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F4byXeaI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/NZJHBk3/console-logobj.png" alt="console.log objects"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-raw-consoleerror-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;console.error()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The console.log() command is used by developers for most of the things they do - including logging errors to the console. But do you know there is a special console command for that ? It is the &lt;code&gt;console.error()&lt;/code&gt; command. It is very similar to the console.log() command except it wraps what you log in a red error box.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Something is wrong&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b1gaR-cv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/YfnPcZQ/consoleerror.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b1gaR-cv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/YfnPcZQ/consoleerror.png" alt="console.error example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-raw-consoleinfo-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;console.info()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This console command is especial useful to output information to the console. Rather than using console.log(), you will use console.info() to make the information stand out from other console commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You are awesome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DCzqr5wn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/rsTWxbw/consoleinfo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DCzqr5wn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/rsTWxbw/consoleinfo.png" alt="console info example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-raw-consoletable-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  4. &lt;code&gt;console.table()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;When dealing with arrays, you usually like to represent it in an easy to understand structure. The console.table() commands handles that for you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grape&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D09GCpSD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/yB5vbL3/consoletable.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D09GCpSD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/yB5vbL3/consoletable.png" alt="console.table() example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-raw-consoleassert-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  5. &lt;code&gt;console.assert()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This console command writes an error message to the console if an evaluates condition is false.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;It cannot be&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zh5bDs1q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/2sZ49sB/consoleassert.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zh5bDs1q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/2sZ49sB/consoleassert.png" alt="console.assert example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-raw-consoleclear-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  6. &lt;code&gt;console.clear()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This command clears the console for you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//clears the console&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-amp-8-raw-consolegroup-endraw-and-raw-consolegroupend-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  7. &amp;amp; 8. &lt;code&gt;console.group()&lt;/code&gt; and &lt;code&gt;console.groupEnd()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;These two console commands are useful to group stuff together in the console.&lt;/p&gt;

&lt;p&gt;The console.group() is used to start a group. The group will continue until it encounters a console.groupEnd().&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f2ogqk19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/wLpcTqX/consolegroups.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f2ogqk19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/wLpcTqX/consolegroups.png" alt="console group adn groupEnd exampls"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-raw-consolewarn-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  9. &lt;code&gt;console.warn()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Logging warnings in the console should be easy! Thats why the console.warn command exists&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Some warning&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---iR2dgN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/4sSpPFV/consolewarn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---iR2dgN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/4sSpPFV/consolewarn.png" alt="console warn example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-amp-11-raw-consoletime-endraw-and-raw-consoletimeend-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  10. &amp;amp; 11. &lt;code&gt;console.time()&lt;/code&gt; and &lt;code&gt;console.timeEnd()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;There will be times when you will ned to measrue the time taken for an operation to complete. For this situations, you can make use of teh console.time() and console.timeEnd() functions.&lt;br&gt;
You use the console.time() to start a timer and console.timeEnd() to stop the timer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// prints time taken since the timer started&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--82sjd1O---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/JHrvCHF/consoletime.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--82sjd1O---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/JHrvCHF/consoletime.png" alt="console.times example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You have reached the end. If you enjoyed this post, please share.&lt;br&gt;
I encourage you to try ou these console commands to understand them best.&lt;br&gt;
Thanks XD&lt;/p&gt;

&lt;p&gt;This post was originally written on me &lt;a href="https://josiasaurel.tech/post/14js-console-commands-explained"&gt;new blog&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>browser</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Wait, Docker is deprecated in Kubernetes now? What do I do?</title>
      <author>Kohei Ota</author>
      <pubDate>Wed, 02 Dec 2020 20:11:39 +0000</pubDate>
      <link>https://dev.to/inductor/wait-docker-is-deprecated-in-kubernetes-now-what-do-i-do-e4m</link>
      <guid>https://dev.to/inductor/wait-docker-is-deprecated-in-kubernetes-now-what-do-i-do-e4m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  tl;dr
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#for-developers" class="anchor"&gt;
  &lt;/a&gt;
  For developers
&lt;/h3&gt;

&lt;p&gt;Don't panic, Docker containers and images are still alive. It's not that it will change everything.&lt;/p&gt;

&lt;p&gt;Also worth reading:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/blog/2020/12/02/dont-panic-kubernetes-and-docker/"&gt;https://kubernetes.io/blog/2020/12/02/dont-panic-kubernetes-and-docker/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/blog/2020/12/02/dockershim-faq/"&gt;https://kubernetes.io/blog/2020/12/02/dockershim-faq/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-k8s-admins" class="anchor"&gt;
  &lt;/a&gt;
  For K8s admins
&lt;/h3&gt;

&lt;p&gt;Read this carefully and start considering Docker alternatives&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-it-true" class="anchor"&gt;
  &lt;/a&gt;
  Is it true?
&lt;/h2&gt;

&lt;p&gt;Yes, it is true. Docker is now deprecated in Kubernetes.&lt;/p&gt;

&lt;p&gt;Ref. &lt;a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.20.md#deprecation"&gt;https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.20.md#deprecation&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Docker support in the kubelet is now deprecated and will be removed in a future release. The kubelet uses a module called "dockershim" which implements CRI support for Docker and it has seen maintenance issues in the Kubernetes community. We encourage you to evaluate moving to a container runtime that is a full-fledged implementation of CRI (v1alpha1 or v1 compliant) as they become available.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In short, what it means here is that Docker does not &lt;em&gt;support&lt;/em&gt; Kubernetes Runtime API called CRI(Container Runtime Interface) and Kubernetes people have been using a bridge service called "dockershim". It converts Docker API and CRI, but it will no longer be provided from Kubernetes side within a few minor releases.&lt;/p&gt;

&lt;p&gt;Docker in local is a very powerful tool to create dev environment for sure, but in order to understand what's causing this, you need to understand what Docker does in the current Kubernetes architecture.&lt;/p&gt;

&lt;p&gt;Kubernetes is an infra orchestration tool that groups up many different compute resources such as virtual/physical machines and make it look like a huge compute resource for your application to run and share with others. In this architecture, Docker, or a container runtime, is used only to run those applications in an actual host by being scheduled by Kubernetes control plane.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8uPK452T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6hohswt225do6y8c3d7u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8uPK452T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6hohswt225do6y8c3d7u.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Look at the architecture diagram. You can see that each Kubernetes node talks to the control plane. &lt;code&gt;kubelet&lt;/code&gt; on each node fetch metadata and it execs CRI to run create/delete containers on the node.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-why-is-docker-deprecated" class="anchor"&gt;
  &lt;/a&gt;
  But why is Docker deprecated?
&lt;/h2&gt;

&lt;p&gt;Again, Kubernetes only talks in CRI and talking to Docker requires a bridge service. So that's reason 1.&lt;/p&gt;

&lt;p&gt;To explain the next reason, we have to see the Docker architecture a bit. Here's the diagram.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d5Z6xaMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h54wfmf6utvuyih5z0du.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d5Z6xaMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h54wfmf6utvuyih5z0du.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So yeah, Kubernetes actually needs inside of the red area. Docker Network and Volume are not used in Kubernetes.&lt;/p&gt;

&lt;p&gt;Having more features while you never use, itself can be a security risk. The less features you have, the smaller the attack surface becomes.&lt;/p&gt;

&lt;p&gt;So this is where you start considering alternatives. It's called CRI runtimes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cri-runtimes" class="anchor"&gt;
  &lt;/a&gt;
  CRI runtimes
&lt;/h2&gt;

&lt;p&gt;There are two major CRI runtime implementations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#containerd" class="anchor"&gt;
  &lt;/a&gt;
  containerd
&lt;/h3&gt;

&lt;p&gt;If you just want to migrate from Docker, this is the best option as containerd is actually used inside of Docker to do all the "runtime" jobs as you can see in the diagram above. They provides CRI and it's 100% what Docker provides, too.&lt;/p&gt;

&lt;p&gt;containerd is 100% open source so you can see docs on GitHub and even contribute to it too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/containerd/containerd/"&gt;https://github.com/containerd/containerd/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crio" class="anchor"&gt;
  &lt;/a&gt;
  CRI-O
&lt;/h3&gt;

&lt;p&gt;CRI-O is a CRI runtime mainly developed by Red Hat folks. In fact, this runtime is used in Red Hat OpenShift now. Yes, they do not depend on Docker anymore.&lt;/p&gt;

&lt;p&gt;Interestingly, RHEL 7 does not &lt;em&gt;officially&lt;/em&gt; support Docker either. Instead, they provide Podman, Buildah and CRI-O for container environment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cri-o/cri-o"&gt;https://github.com/cri-o/cri-o&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CRI-O's strength in my opinion is its minimalism because it was created to be a "CRI" runtime. While containerd started as a part of Docker trying to be more open source, they are pure CRI runtime so CRI-O does not have anything that CRI does not require.&lt;/p&gt;

&lt;p&gt;It can be more challenging to migrate from Docker to CRI-O because of that, it still provides what you needs to run applications on Kubernetes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#one-more-thing" class="anchor"&gt;
  &lt;/a&gt;
  One more thing...
&lt;/h2&gt;

&lt;p&gt;When we talk about Container Runtimes, we need to be careful &lt;em&gt;which type&lt;/em&gt; of runtime you're talking about. We do have two types of runtimes; CRI runtimes and OCI runtimes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cri-runtimes" class="anchor"&gt;
  &lt;/a&gt;
  CRI runtimes
&lt;/h3&gt;

&lt;p&gt;As I described, CRI is an API that Kubernetes provides to talk to a container runtime in order to create/delete containerised applications.&lt;/p&gt;

&lt;p&gt;They talk in gRPC via IPC as kubelet and the runtime runs on the same host, and a CRI runtime has responsibility for getting request from kubelet and execute OCI container runtime to run a container. Wait, what? Maybe I should explain with a diagram for this one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EPDhjZkM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/98q12ppk63h3gs1p6zc0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EPDhjZkM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/98q12ppk63h3gs1p6zc0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what a CRI runtime does is the following&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get the gRPC request from kubelet&lt;/li&gt;
&lt;li&gt;Create OCI json config following &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/schema/config-schema.json"&gt;the spec&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#oci-runtimes" class="anchor"&gt;
  &lt;/a&gt;
  OCI runtimes
&lt;/h3&gt;

&lt;p&gt;OCI runtimes are responsible for spawning a container using Linux kernel system calls such as cgroups and namespace. You might have heard about &lt;code&gt;runc&lt;/code&gt; or &lt;code&gt;gVisor&lt;/code&gt;. This is what they are.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#appendix1-how-runc-works" class="anchor"&gt;
  &lt;/a&gt;
  appendix1: how runC works
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DpKWt2R9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0zuiw38d4w1x6qxl0e0d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DpKWt2R9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0zuiw38d4w1x6qxl0e0d.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;runC spawns containers after CRI executes the binary by calling Linux system calls. That indicates runC &lt;em&gt;relies on&lt;/em&gt; the kernel that is running on your Linux machine.&lt;/p&gt;

&lt;p&gt;It also implies that if you ever discover runC's vulnerability that makes you take the root privilege of your host, a containerized application &lt;em&gt;can&lt;/em&gt; also do so. A bad hacker could take your host machine's root and boom! Things surely will get bad. This is one of the reasons why you should keep updating your Docker(or any other container runtimes) too, not just your containerized application.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#appendix2-how-gvisor-works" class="anchor"&gt;
  &lt;/a&gt;
  appendix2: how gVisor works
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dk0BWbrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i5w2gmpstmjf3d460n9w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dk0BWbrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i5w2gmpstmjf3d460n9w.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;gVisor is an OCI runtime that were originally created by Google folks. It actually runs on their infrastructure to run their Cloud services such as Google Cloud Run, Google App Engine(2nd gen), and Google Cloud Functions(and even more!)&lt;/p&gt;

&lt;p&gt;What's interesting here is that gVisor has a "guest kernel" layer which means a containerised applications cannot directly touch to the host kernel layer. Even if they &lt;em&gt;think&lt;/em&gt; they do, they only touch the gVisor's guest kernel.&lt;/p&gt;

&lt;p&gt;gVisor's security model is actually very interesting and worth reading &lt;a href="https://gvisor.dev/docs/"&gt;the official doc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Notable differences from runC is as follows.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Performance is worse&lt;/li&gt;
&lt;li&gt;Linux kernel layer is not 100% compatible 

&lt;ul&gt;
&lt;li&gt;Look at &lt;a href="https://gvisor.dev/docs/user_guide/compatibility/"&gt;the compatibility section on official doc&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Not supported by &lt;em&gt;default&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-docker-is-surely-deprecated-so-you-should-start-thinking-to-adopt-a-cri-runtime-such-as-containerd-and-crio" class="anchor"&gt;
  &lt;/a&gt;
  1. Docker is surely deprecated, so you should start thinking to adopt a CRI runtime such as containerd and CRI-O.
&lt;/h3&gt;

&lt;p&gt;a. containerd is Docker compatible where the core components are the same.&lt;br&gt;
b. CRI-O can be a strong option where you want more minimal functionality for Kubernetes&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-know-what-the-difference-of-cri-and-oci-runtime-responsibility-and-scope" class="anchor"&gt;
  &lt;/a&gt;
  2. Know what the difference of CRI and OCI runtime responsibility and scope
&lt;/h3&gt;

&lt;p&gt;Depending on your workload, runC might not be always the best option to use!&lt;/p&gt;

</description>
      <category>docker</category>
      <category>kubernetes</category>
    </item>
    <item>
      <title>GIT - Unorthodox commands I use from time to time</title>
      <author>Sm0ke</author>
      <pubDate>Wed, 02 Dec 2020 19:58:04 +0000</pubDate>
      <link>https://dev.to/sm0ke/git-unorthodox-commands-i-use-from-time-to-time-10fj</link>
      <guid>https://dev.to/sm0ke/git-unorthodox-commands-i-use-from-time-to-time-10fj</guid>
      <description>&lt;p&gt;Hello Coders,&lt;/p&gt;

&lt;p&gt;This article presents a few commands that I use from time to time to cover my programming mistakes or just shortcut things in my GIT repositories. &lt;br&gt;
I must warn beginners (and not only) to double-check the effects using test repositories before applying the mentioned commands on production repositories.&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! &lt;strong&gt;Content provided by &lt;a href="https://appseed.us/?ref=dev"&gt;AppSeed&lt;/a&gt;&lt;/strong&gt; - a platform used by 2k+ developers across the globe.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#git-drop-local-changes" class="anchor"&gt;
  &lt;/a&gt;
  GIT - Drop local changes
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Warn: you might lose valuable work&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git reset &lt;span class="nt"&gt;--hard&lt;/span&gt; origin/master
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#git-reset-to-commit" class="anchor"&gt;
  &lt;/a&gt;
  GIT - Reset to Commit
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Warn: All commits above the used one are lost&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# We assume the Commit hash is '288c168'&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git reset &lt;span class="nt"&gt;--hard&lt;/span&gt; 288c168
&lt;span class="nv"&gt;$ &lt;/span&gt;git push  &lt;span class="nt"&gt;--force&lt;/span&gt; origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#git-print-modified-files" class="anchor"&gt;
  &lt;/a&gt;
  GIT - Print modified files
&lt;/h2&gt;

&lt;p&gt;This command is the safest one and I'm using it a lot to scan for changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# List all changes&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git add &lt;span class="nt"&gt;-A&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Filter the output using grep&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git add &lt;span class="nt"&gt;-A&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s1"&gt;'something'&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#git-ignore-files-permissions-on-diff" class="anchor"&gt;
  &lt;/a&gt;
  GIT - Ignore files permissions on DIFF
&lt;/h2&gt;

&lt;p&gt;This case might occur if the development PC uses Windows and production is on Linux. To extract the relevant changes and ignore the permissions of the files, the below command can be used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Configure GIT to ignore changes on files perms&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git config core.filemode &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#git-update-single-local-file" class="anchor"&gt;
  &lt;/a&gt;
  GIT - Update single (LOCAL) file
&lt;/h2&gt;

&lt;p&gt;Useful when we need to update a single local file with the remote version. The update can be done from any branch - our sample command uses the project &lt;em&gt;master&lt;/em&gt; branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout origin/master &lt;span class="nt"&gt;--&lt;/span&gt; app/some-file.html
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#git-update-forked-project" class="anchor"&gt;
  &lt;/a&gt;
  GIT - Update forked project
&lt;/h2&gt;

&lt;p&gt;This is useful when we want to update a forked project with the latest changes from the parent project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# CD inside the forked project&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;forked-project
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Fetch all branches of remote upstream&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git fetch upstream
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Rewrite your master with upstream’s master using git rebase.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git rebase upstream/master
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Save changes to our forked project&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git push origin master &lt;span class="nt"&gt;--force&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#git-resources" class="anchor"&gt;
  &lt;/a&gt;
  Git resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://git-scm.com/"&gt;GIT&lt;/a&gt; - official website&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dzone.com/articles/top-20-git-commands-with-examples"&gt;Top 20 Git Commands&lt;/a&gt; - with Examples&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Thank you! Btw, my (nick)name is &lt;strong&gt;Sm0ke&lt;/strong&gt; and I'm pretty active also on &lt;a href="https://twitter.com/Sm0keDev"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>git</category>
    </item>
    <item>
      <title>Intro To JavaScript Testing With Mocha: Part 2</title>
      <author>Valerie Foster</author>
      <pubDate>Wed, 02 Dec 2020 19:13:53 +0000</pubDate>
      <link>https://dev.to/fosterv2/intro-to-javascript-testing-with-mocha-part-2-o6n</link>
      <guid>https://dev.to/fosterv2/intro-to-javascript-testing-with-mocha-part-2-o6n</guid>
      <description>&lt;p&gt;In my last blog post I talked about how to get started with writing tests for a JavaScript project using the &lt;a href="https://mochajs.org/"&gt;Mocha&lt;/a&gt; testing library. As I mentioned at the end of that post, this time I will talk about some of the more interesting and less intuitive things you can do when testing with Mocha.&lt;/p&gt;

&lt;p&gt;One interesting thing that Mocha gives you is the hooks &lt;code&gt;before()&lt;/code&gt;, &lt;code&gt;after()&lt;/code&gt;, &lt;code&gt;beforeEach()&lt;/code&gt;, and &lt;code&gt;afterEach()&lt;/code&gt;. You can use these inside a &lt;code&gt;describe&lt;/code&gt; block, and each of them has a different purpose: &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; are only run once, before or after all of your tests in &lt;code&gt;describe&lt;/code&gt;, while &lt;code&gt;beforeEach&lt;/code&gt; and &lt;code&gt;afterEach&lt;/code&gt; are run before or after each test. One way this can come in handy is if you want to run all of your tests on the same piece(s) of data, like an array. You could define an array at the top level of the &lt;code&gt;describe&lt;/code&gt; block, but if your tests do a lot of transformations to the array, you could use the &lt;code&gt;beforeEach&lt;/code&gt; method to reset the array before each new test like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;describe('Array', function () {
  let a

  beforeEach(function () {
    a = ["reset", "the", "array", "to", "be", "the", "same"]
  })

  // all of your tests go here
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Each hook takes a callback function and an optional description string, the same as the &lt;code&gt;it&lt;/code&gt; function. It also doesn’t matter what order you put your hooks or tests in, the hooks will still be run at the time they are intended, and your tests will run in the order you have written them in your file.&lt;/p&gt;

&lt;p&gt;Another useful thing that Mocha gives you is the ability to write tests that don’t run. This may sound silly, but it can be very helpful. Tests that don’t run are called pending tests and there are a few ways to write them. One way is making a test without a callback. The idea of this type of test is that someone should write a test case for it eventually. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;describe('Array', function () {
  describe('#includes()', function () {
    // pending test below
    it('should return false when the value is not present')
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Pending tests will be included in the test results, and marked as pending. A pending test is not considered as passing or failing. When you run your tests, the result will tell you how many pending tests you have, along with the passing and failing ones. The result would look something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gkfZXPKI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t9ix0gh5r7vw1xh7o4ry.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gkfZXPKI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t9ix0gh5r7vw1xh7o4ry.png" alt="A Nyan Cat version of passing and pending tests"&gt;&lt;/a&gt;&lt;br&gt;
Another way that you can make pending tests is by writing tests that are skipped. One reason you would do this is if you wrote out a test, but it doesn’t pass and you don’t know why, or you don’t want to take the time to fix it right now, then you can skip it temporarily. This is better than commenting out the test because, if it you get a pending result every time you run your tests, you won’t forget to come back to it later. Skipped tests work by appending &lt;code&gt;.skip()&lt;/code&gt; to the test functions. A single skipped test will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;describe('#includes()', function () {
  it.skip('should return true when present', function () {
    // this test will not be run
  })

  it('should return false when not present', function () {
    // this test will be run
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Or, to skip an entire suite, you can use the &lt;code&gt;skip&lt;/code&gt; keyword on the &lt;code&gt;describe&lt;/code&gt; function like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;describe.skip('#includes()', function () {
  it('should return true when present', function () {
    // this test will not be run
  })

  it('should return false when not present', function () {
    // neither will this one
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The last place you could use &lt;code&gt;skip&lt;/code&gt; is inside your test function to skip the test at runtime using &lt;code&gt;this.skip()&lt;/code&gt;. If a test requires an environment or configuration that you wouldn’t be able to know about beforehand, using &lt;code&gt;skip&lt;/code&gt; at runtime is the best way to handle the problem. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;it('should only test in the correct environment', function() {
  if (/* check test environment */) {
    // make assertions
  } else {
    this.skip()
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If the environment isn’t right, the result of this test will be pending, and it will essentially abort the test, instead of completely skipping it. The example above is also a best practice, compared to leaving the space in the &lt;code&gt;else&lt;/code&gt; block blank, because a blank test will be reported as passing, and it would be much more useful for us to know the test was aborted.&lt;/p&gt;

&lt;p&gt;Opposite but similar to &lt;code&gt;skip&lt;/code&gt;, you can also append &lt;code&gt;.only()&lt;/code&gt; to &lt;code&gt;it&lt;/code&gt; or &lt;code&gt;describe&lt;/code&gt; to choose to run only one distinct test or test suite. This can be useful if you are working to make one specific test pass and you don’t want to waste time waiting while all the other tests are run. Both &lt;code&gt;only&lt;/code&gt; and &lt;code&gt;skip&lt;/code&gt; can be added to any number of tests you like (but adding them to too many would defeat the purpose). One thing to note: any Hooks you have will still be run.&lt;/p&gt;

&lt;p&gt;One other thing that is necessary to consider when writing anything in JavaScript is how to deal with asynchronous code. Mocha has a few ways to deal with asynchronous code in your tests. One way is by adding an argument to the test callback, usually called &lt;code&gt;done&lt;/code&gt;. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;describe('Tea', function () {
  describe('#save()', function () {
    it('should save without error', function (done) {
      let tea = new Tea('Chai')
      tea.save(done)
    })
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Using &lt;code&gt;done&lt;/code&gt; like this will ensure that Mocha knows it should wait for this function to be called to complete the test. This format will also handle any errors in the &lt;code&gt;save&lt;/code&gt; function. But if the APIs you are testing return promises instead of taking callbacks, rather than using the &lt;code&gt;done()&lt;/code&gt; callback, you can use &lt;a href="https://www.npmjs.com/package/chai-as-promised"&gt;Chai as Promised&lt;/a&gt;, and have something like this in your test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return expect(Promise.resolve({ foo: "bar" }))
                               .to.eventually.have.property("foo")
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The essential piece that Chai as Promised gives you is the &lt;code&gt;eventually&lt;/code&gt; property. It also gives you more than the &lt;code&gt;.have.property()&lt;/code&gt; chains, so you can check for a variety of things. There are more examples of how to use it in their documentation.&lt;/p&gt;

&lt;p&gt;The last thing I will mention is that Mocha has a wide variety of optional flags you can add to the end of your command to run your tests. The flags are all listed in their &lt;a href="https://mochajs.org/#command-line-usage"&gt;documentation&lt;/a&gt;, but I’ll mention a few here. One is &lt;code&gt;--bail&lt;/code&gt;, and it causes the test suite to abort after the first failed test, which is handy if you want to work on fixing one test at a time. There is also the &lt;code&gt;--parallel&lt;/code&gt; flag, which will cause the tests to be run in parallel mode. This mode is designed to help your test suite run faster by making your tests run somewhat at the same time, instead of one after another, which can be very practical and save time if you have a large number of tests to run. There are a few drawbacks to parallel mode though, so make sure you know enough about parallel mode to recognize if it will work for you.&lt;/p&gt;

&lt;p&gt;And this is the end of my introduction to testing with Mocha. There are other JavaScript testing libraries, but Mocha is one that is well used, thoroughly documented, and, as I hope you can tell from my posts, easy enough to work with. Tests are very useful, and I hope my posts have convinced you to consider using Mocha to write tests for your next JavaScript project.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Understanding Time Complexity with the First Puzzle of Advent of Code</title>
      <author>Anniina Sallinen</author>
      <pubDate>Wed, 02 Dec 2020 18:22:32 +0000</pubDate>
      <link>https://dev.to/annisalli/understanding-time-complexity-with-the-first-puzzle-of-advent-of-code-3pbi</link>
      <guid>https://dev.to/annisalli/understanding-time-complexity-with-the-first-puzzle-of-advent-of-code-3pbi</guid>
      <description>&lt;p&gt;First before anything else: ⚠️ &lt;strong&gt;SPOILER ALERT!&lt;/strong&gt; ⚠️ This blog post will discuss possible solutions to the first puzzle of Advent of Code. If you haven't completed it yet, and want to do it before looking into any solutions, don't read this blog post. Also if you're just a beginner in coding and you need to spend a lot of time figuring out how to solve the puzzle, this might get over your head and that's fine. I want to say that it's totally fine not to optimize your solution, since Advent of Code doesn't have any efficiency criteria for solutions.&lt;/p&gt;

&lt;p&gt;This is my first year to participate Advent of Code, and I find it very enjoyable. I have a degree in CS, but since I graduated in 2018, I haven't done any coding puzzles. I solve the puzzles with some brute-force method first, but then I find myself thinking about if there's a more efficient solution. We have a group of people in our community that solve the puzzles, and when I mentioned the time complexity of my solution, someone said they had never thought analyzing the time complexity of their code. That's why I thought I'd write a blog post about big O notation and how to analyze your solution to understand it better. I use the first puzzle of Advent of Code to demonstrate how to analyze the code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-assignment" class="anchor"&gt;
  &lt;/a&gt;
  The assignment
&lt;/h2&gt;

&lt;p&gt;In the first part of the puzzle the assignment is the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Before you leave, the Elves in accounting just need you to fix your expense report (your puzzle input); apparently, something isn't quite adding up.&lt;/p&gt;

&lt;p&gt;Specifically, they need you to find the two entries that sum to 2020 and then multiply those two numbers together.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The second part is the same, but with three numbers, that need to sum to 2020. I focus on the first part only, because I didn't optimize the solution of the second part, and also because it would make this blog post even longer. I used Python to solve the puzzle and will use that in the examples, too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#big-o-notation" class="anchor"&gt;
  &lt;/a&gt;
  Big O notation
&lt;/h2&gt;

&lt;p&gt;So big O notation is used for indicating the time complexity of an algorithm, and more specifically the worst case. It means that for example if you have a list of numbers, and you're searching for number 2 in the list, the worst case is that it's not in the list or it's the last element, and you have to go through the whole list. The time complexity is then O(n), where n is the number of elements in the list.&lt;/p&gt;

&lt;p&gt;Time complexity shouldn't be thought of as the actual duration of the algorithm execution, but rather as &lt;em&gt;how fast the duration grows in relation to input size&lt;/em&gt;. There are multiple classes that are typically used. I've listed some of them in the table and will show examples of them later.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Time complexity&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;td&gt;Constant time complexity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O(log n)&lt;/td&gt;
&lt;td&gt;Logarithmic time complexity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;td&gt;Linear time complexity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O(n log n)&lt;/td&gt;
&lt;td&gt;Log-linear time complexity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O(n^2)&lt;/td&gt;
&lt;td&gt;Quadratic time complexity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O(n^c)&lt;/td&gt;
&lt;td&gt;Polynomial time complexity&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#brute-force-solution" class="anchor"&gt;
  &lt;/a&gt;
  Brute force solution
&lt;/h2&gt;

&lt;p&gt;So the easiest way to solve the puzzle is a brute force solution. As I said earlier, Advent of Code doesn't have any requirements for how efficient your solution is, it just wants an answer, so brute force is a completely valid approach to the problems. I first used the brute force solution to get the answer, and then later optimized my solution, so my first version of the code looked like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_two_numbers_that_sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;desired_sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list_of_expenses&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;expense&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;list_of_expenses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                   &lt;span class="c1"&gt;# Iterating over a list: O(n)
&lt;/span&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;expense_to_compare&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;list_of_expenses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="c1"&gt;# Iterating over a list: O(n)
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;expense&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;expense_to_compare&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2020&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="c1"&gt;# Comparison: O(1)
&lt;/span&gt;                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;expense&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;expense_to_compare&lt;/span&gt;    &lt;span class="c1"&gt;# Multiplication: O(1)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is a very simple solution, and it works. The size of the list is 200, so it's not too slow to be solved like this. Let's get to the analysis of that solution then. &lt;br&gt;
As I wrote as a comment to the code, iterating over a list is an O(n) solution. Because there are two loops, and the second one is inside the first one, they are &lt;strong&gt;multiplied&lt;/strong&gt;. We multiply also the comparison complexity and the multiplication complexity, but since they're both constant, they don't affect the complexity of the solution. Thus the complexity of the solution is n*n = O(n^2). You can test this with a small list (for example of size 5) and calculate how many iterations it takes with that function. Remember to calculate the worst case, which is in this example that there are no two numbers that sum to 2020, and you go over the whole list.&lt;/p&gt;

&lt;p&gt;In the picture below you can see how the number of iterations grows as the size of the list grows. The number of elements in the list is on the x-axis and the number of iterations is on the y-axis.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OnUBWnsY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9qamk57qmfgmqd8t8mj9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OnUBWnsY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9qamk57qmfgmqd8t8mj9.png" alt="Visualization of O(n^2) time complexity"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But since there's an early exit if the two numbers are found, wouldn't it mean that it's better than O(n^2)?&lt;/strong&gt; Unfortunately not. Because big O notation is about the worst case, and the worst case is that either there are no such numbers, or they are the last pair to compare, the time complexity is still the same. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How about if we never look into the same combination once? Wouldn't it make the solution faster?&lt;/strong&gt; Well in practice the solution is faster, but the growth of the duration still remains on the same scale. If you get a pen and paper (which I suggest you have always when you try to solve a puzzle) and simulate the algorithm you notice that if you have a list of five numbers, the number of elements you check is 5 + 4 + 3 + 2 + 1 = 15. When there's 10 elements, the number of elements you check is 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 = 55. The time complexity is roughly O((n^2 + n)/2), but because we ignore the constants, we have only O(n^2 + n) which is essentially the same as O(n^2). In the picture you see a similar growth in the number of iterations when the size of the list grows:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KF3y8gfX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fnpo67s52fxazvgjq5eb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KF3y8gfX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fnpo67s52fxazvgjq5eb.png" alt="Visualization of algorithm when it doesn't look into the same combination twice"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So you see that although the number of iterations is lower, the growth is as fast as with the simple version.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#enhanced-solution" class="anchor"&gt;
  &lt;/a&gt;
  Enhanced solution
&lt;/h2&gt;

&lt;p&gt;So after I had given the correct answer to Advent of Code and got a confirmation that I'd solved it, I started to think about how to optimize it. I came up with an idea that maybe I could sort the list of numbers and then use a binary search to find the number we were looking for. Python has a sorting function as built-in, so I didn't need to implement that myself, but I implemented binary search myself. I first implemented the iterative version of it but later refactored it to be recursive. Here's the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;recursive_binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sublist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first_elem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;desired_sum&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sublist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="n"&gt;beginning&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sublist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;selected_elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;beginning&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;elem_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_elem&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sublist&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;selected_elem&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;elem_sum&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;desired_sum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;first_elem&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sublist&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;selected_elem&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;elem_sum&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;desired_sum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;selected_elem&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;elem_sum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;desired_sum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;beginning&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;selected_elem&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;recursive_binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sublist&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;beginning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;first_elem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;desired_sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_subset_sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expenses_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;desired_sum&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;sortedd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expenses_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Python built in sort algorithm, O(n log n)         
&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sortedd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Iterating over the elements, O(n)
&lt;/span&gt;        &lt;span class="n"&gt;binary_search_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sortedd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;beginning&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_search_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="c1"&gt;# Binary search, O(log n)
&lt;/span&gt;        &lt;span class="n"&gt;return_val&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;recursive_binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_search_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;desired_sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;return_val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now recursion makes the analysis of the algorithm a bit more complex, but as binary search is a commonly known algorithm, we know its time complexity is O(log n). If you are familiar with logarithm, it's easier to understand, but basically with each iteration the size of the list that we need to go through halves, so in total, the number of iterations is log n.&lt;/p&gt;

&lt;p&gt;What is the time complexity of the solution? First, we sort the elements, and it has O(n log n) complexity. Then we iterate over the elements, with time complexity O(n), and inside the loop, we perform the binary search. Let's start with calculating the complete time complexity of the loop. Because binary search is inside the loop, we multiply O(n) with O(log n). It results in O(n log n). Because sorting is not done inside the loop, we can just sum O(n log n) + O(n log n). The total complexity is thus 2 O(n log n), which is essentially the same as O(n log n). Thus the time complexity for the solution is O(n log n). It's good to note that this solution only works when there are two numbers that we need to find, so it doesn't help with part 2 of the puzzle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#optimal-solution" class="anchor"&gt;
  &lt;/a&gt;
  Optimal solution
&lt;/h2&gt;

&lt;p&gt;After making the improvements described above, I went to see how other people had solved it. On Twitter, I saw some vague tweet about using a set data structure, but couldn't wrap my head around it. Then I came here to see if someone had posted their solution and found &lt;a href="https://dev.to/cnille/aoc-2020-day-1-a1k"&gt;Christopher's post&lt;/a&gt;. The solution in the blog post is simple and elegant, and it was more efficient than the sort + binary search solution. You can check the blog post but I also explain it shortly here. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Iterate over the elements&lt;/li&gt;
&lt;li&gt;Subtract the value of the element from 2020 to get the number you want to find&lt;/li&gt;
&lt;li&gt;Insert all other elements into a set&lt;/li&gt;
&lt;li&gt;Check if the set has the number your looking for, return the result of the multiplication&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So this solution is very smart because it uses a set as a data structure. Inserting a new element, removing an existing one, and finding a value in a set has constant O(1) time complexity. This means that only step 1 has larger time complexity, O(n), and all the other steps have time complexity O(1). When we multiply all of these together, we get O(n). &lt;/p&gt;

&lt;p&gt;In the picture below you can see different solutions in a one plot, it might make it easier to understand how large difference there is:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rte0R-jw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n0baxjwff7ddh54zpesh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rte0R-jw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n0baxjwff7ddh54zpesh.png" alt="Plot that has four lines, one for O(n^2) without duplicates, one for O(n^2), one for O(n log n) solution and one for O(n)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;So when you analyze your solutions for Advent of Code or some other puzzle (or even your work!), the most important thing is to remember that big O notation doesn't describe duration, it describes the growth of the number of iterations in relation to the size of an input. In practice, some optimizations might make your code faster, but the growth in relation to the input size doesn't change. When you calculate the complexity, you can define complexity for each row and then either sum them or multiply them, depending on whether they happen in a row or a nested manner. &lt;/p&gt;

&lt;p&gt;If you want to compare your solutions with others, comparing time complexity instead of duration might be a good idea if it doesn't feel too heavy. It's because when you measure duration, the context is important. The duration depends on for example your computer, if you have to same data, if the data is in the same order, the programming language you're using, etc. If you haven't analyzed your solutions and their time complexity before, I think Advent of Code provides nice puzzles to start with!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@markusspiske"&gt;Markus Spiske&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/advent-calendar"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>adventofcode</category>
      <category>timecomplexity</category>
      <category>spoiler</category>
    </item>
    <item>
      <title>GitHub tip of the day: Keep your commit email address private!</title>
      <author>Fahad Imran 👨‍💻</author>
      <pubDate>Wed, 02 Dec 2020 18:14:33 +0000</pubDate>
      <link>https://dev.to/codewithfahad/github-tip-of-the-day-keep-your-commit-email-address-private-2eo2</link>
      <guid>https://dev.to/codewithfahad/github-tip-of-the-day-keep-your-commit-email-address-private-2eo2</guid>
      <description>&lt;p&gt;GitHub is where developers share their code, work on open-source projects, and collaborate with others. 👨‍💻&lt;/p&gt;

&lt;p&gt;It is one of my favorite platforms to share my work and even collaborate on school and real-world projects.&lt;/p&gt;

&lt;p&gt;So, today I'll share a GitHub feature that I don't see many people utilizing. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#viewing-someones-commit-email-address" class="anchor"&gt;
  &lt;/a&gt;
  📸 Viewing someone's commit email address
&lt;/h2&gt;

&lt;p&gt;When you collaborate on GitHub whether it be on your own personal project or on some open-source project, your commit email address is &lt;strong&gt;public&lt;/strong&gt; and is visible to everyone.&lt;/p&gt;

&lt;p&gt;In order to see anyone's email address all you have to do it to open a commit and add &lt;code&gt;.patch&lt;/code&gt; at the end of the URL in the browser and press Enter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AyVy52SW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/51zvhlm2n1hw875k6wrq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AyVy52SW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/51zvhlm2n1hw875k6wrq.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And viola! &lt;/p&gt;

&lt;p&gt;The information associated with the commit will be displayed. This includes the &lt;strong&gt;changes made&lt;/strong&gt; (insertions and deletions), the &lt;strong&gt;username&lt;/strong&gt; of the person who made the commit and yes, the &lt;strong&gt;email address&lt;/strong&gt; associated with their GitHub account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r1tLh3pS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nykse13de1jlf78fzpfv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r1tLh3pS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nykse13de1jlf78fzpfv.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, I have used &lt;code&gt;Brad Traversy's&lt;/code&gt; GitHub account as an email since his email address is already public so showing it will not have any problems (I hope 😅).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-github-provided-raw-noreply-endraw-email" class="anchor"&gt;
  &lt;/a&gt;
  🚀 Using GitHub provided &lt;code&gt;no-reply&lt;/code&gt; email
&lt;/h2&gt;

&lt;p&gt;Now, if you are privacy conscious and don't want your email address to be public and visible to everyone, GitHub provides an option of private email address.&lt;/p&gt;

&lt;p&gt;All you have to go is head over to the settings and navigate to Email section. Then check the &lt;strong&gt;Keep my email address private&lt;/strong&gt; and the &lt;strong&gt;Block command line pushes that expose my email&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YrZMNlI7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hwbu7n5ykbnleng6vjl2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YrZMNlI7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hwbu7n5ykbnleng6vjl2.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once this setting is turned on, GitHub will &lt;strong&gt;remove&lt;/strong&gt; your public email address and use a GitHub issued &lt;code&gt;no-reply&lt;/code&gt; email address as your commit email address. &lt;/p&gt;

&lt;p&gt;Furthermore, you can also tell GitHub to &lt;strong&gt;block&lt;/strong&gt; command line pushes that use your private email address. You can see your no-reply email address in the Emails section. It will typically look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;your_id&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;your_github_username&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;noreply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Since, my username is &lt;code&gt;codewithfahad&lt;/code&gt;, my no-reply email address is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;74595567&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;codewithfahad&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;noreply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configuring-git-to-use-the-raw-noreply-endraw-email-address" class="anchor"&gt;
  &lt;/a&gt;
  💻 Configuring git to use the &lt;code&gt;no-reply&lt;/code&gt; email address
&lt;/h2&gt;

&lt;p&gt;Now all you have to do is to configure git to use the same email address. In order to do this, open &lt;strong&gt;git bash&lt;/strong&gt; on your machine. &lt;/p&gt;

&lt;p&gt;Then use the following command to configure the no-reply email address as your commit email address.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nb"&gt;global&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;your_noreply_email_address&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Verify that your email address has indeed changed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nb"&gt;global&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's it! &lt;/p&gt;

&lt;p&gt;git will now use the same no-reply email address as your commit email. And your personal email address will be &lt;strong&gt;hidden&lt;/strong&gt; from GitHub giving you a boost in privacy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-all-folks" class="anchor"&gt;
  &lt;/a&gt;
  🙏 That's all folks!
&lt;/h2&gt;

&lt;p&gt;This is pretty much it. Just wanted to share this quick tip to hide your email address on GitHub. Feel free to ask any questions in the comment section. I'll be sure to answer then as soon as I can!&lt;/p&gt;

&lt;p&gt;Thanks for reading and happy coding! 😀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-me-around-the-web" class="anchor"&gt;
  &lt;/a&gt;
  🌍 Follow me around the web
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://twitter.com/codewithfahad"&gt;Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codewithfahad.com"&gt;Blog&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/codewithfahad"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>opensource</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Portfolio 2.0</title>
      <author>Lynne</author>
      <pubDate>Wed, 02 Dec 2020 18:01:29 +0000</pubDate>
      <link>https://dev.to/lynnecodes/portfolio-2-0-3236</link>
      <guid>https://dev.to/lynnecodes/portfolio-2-0-3236</guid>
      <description>&lt;p&gt;As I handed in applications to companies and read countless job descriptions, I realized that I really want to be a Frontend UX/UI designer. During my UX/UI research, I became more aware that I can get as creative as I want when developing a site, but it won't mean anything if my site confuses my users. So I took some time to tweak my portfolio quite a bit--making sure users are able to find links and information that they're meant to find. &lt;/p&gt;

&lt;p&gt;Here's some knowledge that I've learned along the way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pretty-doesnt-mean-perfect" class="anchor"&gt;
  &lt;/a&gt;
  Pretty Doesn't Mean Perfect
&lt;/h2&gt;

&lt;p&gt;When I first created my portfolio, I was just having so much fun with CSS and letting my mind run free. I had so many ideas that I wanted to incorporate. It was definitely going to be a fun experience. &lt;/p&gt;

&lt;p&gt;The idea was to have different rooms containing different elements of my portfolio (home, about me, blog, code cards/projects, and contact). I thought it turned out pretty awesome. People were very nice to mention my creative ability. However, I did receive some suggestions to double check the responsiveness on mobile. No doubt, my portfolio was designed to be viewed on a desktop and in landscape. &lt;/p&gt;

&lt;p&gt;Here's my portfolio viewed on a desktop:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cKEDfXdE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/odlwifchkhte8d1qx5t1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cKEDfXdE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/odlwifchkhte8d1qx5t1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here's my original portfolio viewed on my phone:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mCh9uvcb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aaw2p7g0twb9h9efoiek.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mCh9uvcb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aaw2p7g0twb9h9efoiek.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It did not cross my mind that viewing my portfolio in a portrait mode on a mobile device made my portfolio less engaging and actually harder to figure out what I was trying to do design-wise. This is when I decided that design doesn't matter if users cannot figure it out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#responsive-sites-matter" class="anchor"&gt;
  &lt;/a&gt;
  Responsive sites matter
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://gs.statcounter.com/platform-market-share/desktop-mobile-tablet"&gt;Stat Counter&lt;/a&gt; has a pretty awesome tracker for all different kinds of web statistics--including desktop vs. mobile vs. tablet users.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9V43Z6p9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/svd745njup61lq801eqo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9V43Z6p9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/svd745njup61lq801eqo.png" alt="Device Comparison"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;October 2020&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Desktop: 48.88%&lt;/li&gt;
&lt;li&gt;Mobile: 48.62%&lt;/li&gt;
&lt;li&gt;Tablet: 2.5%&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you take a look at the trends (until just recently), desktop usage is more popular than mobile; however, mobile is very close in user comparison. I learned so much from this statistic alone. I have to attack my sites at all angles and all viewpoints. How will it be viewed and if it's accessible and flawless across all playing fields. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keepin-it-simple" class="anchor"&gt;
  &lt;/a&gt;
  Keepin' it Simple
&lt;/h2&gt;

&lt;p&gt;As I mentioned, I wanted to do so much with my site. So many ideas and so many intricate details I wanted to add. There were moving clouds and CSS-built images and I even wanted an animated dog to walk about my rooms. My ambition got the best of me and trying to get my site to respond well to smaller dimensions was a nightmare. &lt;/p&gt;

&lt;p&gt;I'm not saying &lt;em&gt;don't&lt;/em&gt; be ambitious when it comes to creativity, but rather understand the quality of the output for your users. My quality was compromised when I couldn't get my site responsive to mobile. Simple can still be creative and beautiful. As I learn more and grow as a designer, I will add more and more details. For right now, I have to walk before I run. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SbCvvUqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eaahnagysh6g9haoa3tl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SbCvvUqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eaahnagysh6g9haoa3tl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#socmed-is-our-friend" class="anchor"&gt;
  &lt;/a&gt;
  SocMed is Our Friend
&lt;/h2&gt;

&lt;p&gt;If I've learned anything since the first day I started my web dev journey, is that [the right] social media is your best friend. Two main platforms I spend most of my time on are DEV.to and Twitter. &lt;/p&gt;

&lt;p&gt;When announcing my portfolio's launch on DEV.to and Twitter, I've gotten great positive feedback and also great constructive feedback as well. Without the dev community, I wouldn't know how I can improve. I've gotten suggestions from new to experienced devs. I was even able to get some advice from the perspective from individuals on the hiring side--which was extremely helpful. I didn't know how much good social media can do when used right.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#organization-is-key" class="anchor"&gt;
  &lt;/a&gt;
  Organization is Key
&lt;/h2&gt;

&lt;p&gt;I try to stay organized as much as I can, which really helps me write efficient code. Before I start, I organize my thoughts and then I come up with a game plan so I know where to begin--like creating a hierarchical outline for an essay. Because a &lt;code&gt;div&lt;/code&gt; inside of a &lt;code&gt;div&lt;/code&gt; inside of a &lt;code&gt;div&lt;/code&gt; can get exhaustingly confusing sometimes. Laying out where everything goes first really makes things easier to find and follow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#naming-classes-and-ids" class="anchor"&gt;
  &lt;/a&gt;
  Naming Classes and IDs
&lt;/h2&gt;

&lt;p&gt;When choosing a name for my ID and classes the first time around, I felt like I was running out of words. Then I discovered that there's actually a naming convention for code. There's this thing called &lt;a href="https://en.bem.info/methodology/naming-convention/"&gt;BEM entity&lt;/a&gt; that explains the breakdown of naming classes in an organized and useful manner. I say, this is quite useful and has made things easier for me. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#always-room-for-improvement" class="anchor"&gt;
  &lt;/a&gt;
  Always Room for Improvement
&lt;/h2&gt;

&lt;p&gt;After I decided to re-design my portfolio, I found that I'm getting a lot quicker at figuring out what code goes where. I also learned tons of new coding stuff, that I was able to use to make shorter and better code. I've even thought about a fun project! I can totally make several different designs of my portfolio to learn different design and coding techniques. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wishing-for-the-best" class="anchor"&gt;
  &lt;/a&gt;
  Wishing for the Best
&lt;/h2&gt;

&lt;p&gt;It's really been an awesome time learning different things and I can't wait until I'm at the point when I get my first job as a web dev and I can look back at all the ups and downs of my journey. &lt;/p&gt;

&lt;p&gt;Best of luck to everyone trying to make it out there!&lt;/p&gt;

&lt;p&gt;♥ Lynne&lt;/p&gt;

</description>
      <category>portfolio</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>I used Cypress as an Xbox web scraper and I regret nothing</title>
      <author>Anna</author>
      <pubDate>Wed, 02 Dec 2020 17:41:10 +0000</pubDate>
      <link>https://dev.to/annaspies/i-used-cypress-as-an-xbox-web-scraper-and-i-regret-nothing-1bn4</link>
      <guid>https://dev.to/annaspies/i-used-cypress-as-an-xbox-web-scraper-and-i-regret-nothing-1bn4</guid>
      <description>&lt;p&gt;Like many people, I would like to get my hands on the &lt;a href="https://www.xbox.com/en-US/consoles/xbox-series-x"&gt;new Xbox&lt;/a&gt;. And like everyone but the most diligent online shoppers, I have so far failed in my efforts to do so, and have instead been relentlessly greeted by images such as this one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CgTQ5PAv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v6aju8curl42kxqqnct1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CgTQ5PAv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v6aju8curl42kxqqnct1.png" alt="costco"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what does an enterprising/desperate web developer do? Build their own alert system, of course!&lt;/p&gt;

&lt;p&gt;Now, a web scraper is a pretty simple application and generally the ideal use case for this sort of thing. But I wanted to add a visual element to it, to make sure I wasn't getting false positives, and because I tend to prefer user interfaces over bare code (I do work at &lt;a href="https://www.stackery.io/"&gt;Stackery&lt;/a&gt;, after all). Also, I've been playing with the &lt;a href="https://www.cypress.io/"&gt;Cypress&lt;/a&gt; test suite for the past month or so, and absolutely love it for frontend testing, so I've been looking for more ways to implement it in my projects.&lt;/p&gt;

&lt;p&gt;Now, I should say: I'm guessing this is &lt;em&gt;not exactly&lt;/em&gt; the use case the devs at Cypress.io had in mind when they built the browser-based testing library, but as the famous saying goes, "You can invent a hammer, but you can't stop the first user from using it to hit themselves in the head&lt;sup&gt;1&lt;/sup&gt;".&lt;/p&gt;

&lt;p&gt;So without further ado, let's hit ourselves in the proverbial head and get that Xbox!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-get-yourself-a-cypress-account" class="anchor"&gt;
  &lt;/a&gt;
  Setup: get yourself a Cypress account
&lt;/h2&gt;

&lt;p&gt;Cypress has a very neat feature that allows you to view videos from your automated test runs in their web app. In order to do so, you'll need a free developer account:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to the &lt;a href="https://dashboard.cypress.io/signup"&gt;Cypress sign-up page&lt;/a&gt; and create an account&lt;/li&gt;
&lt;li&gt;Once you're in their dashboard, go ahead and create a new project. Name it "Xbox stock scraper", "testing abomination", or whatever you'd like. I generally name my projects the same as my repo, because that's how my brain works&lt;/li&gt;
&lt;li&gt;Now, you'll want to take note of the &lt;code&gt;projectId&lt;/code&gt; as well as the record &lt;code&gt;key&lt;/code&gt;, as you'll need this later&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#create-a-serverless-stack-for-your-scraper" class="anchor"&gt;
  &lt;/a&gt;
  Create a serverless stack for your scraper
&lt;/h2&gt;

&lt;p&gt;Because store inventories changes frequently, we'll want to run our scraper regularly - every hour to start, though it's easy to adjust that up or down as you see fit. Of course, we want to automate these runs, because the whole point is that you have a life and are trying to avoid refreshing web pages on the reg. Is it me, or is this starting to sound like an ideal serverless use case? Not just me? Thought so!&lt;/p&gt;

&lt;p&gt;I originally wanted to run the whole thing in a Lambda, but after an hours-long rabbit-hole, I &lt;a href="https://github.com/cypress-io/cypress/issues/1232"&gt;found out&lt;/a&gt; that's really, really hard, and ultimately not worth it when a &lt;a href="https://aws.amazon.com/codebuild/"&gt;CodeBuild job&lt;/a&gt; will do the trick just fine.&lt;/p&gt;

&lt;p&gt;I'll be using Stackery to build my stack, so these instructions go through that workflow. This part is optional, as you can also do this in the AWS Console, but I like doing things the easy way, and Stackery is serverless on easy mode&lt;sup&gt;2&lt;/sup&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you don't already have one, &lt;a href="https://www.stackery.io/sign-up"&gt;create a free Stackery account&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Navigate to /stacks, and click the &lt;strong&gt;Add a Stack&lt;/strong&gt; dropdown arrow to select &lt;strong&gt;With a new repo&lt;/strong&gt;. Here's what that looks like for me:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4OB-9M8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yzpvxn01byuqmhh4hy52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4OB-9M8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yzpvxn01byuqmhh4hy52.png" alt="xbox-1"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Normally, you'd add resources one by one in the Design Canvas, but as this stack is mainly based on a CodeBuild job and related roles, it's easier to copy-pasta an AWS SAM template like so:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2K0IaX3c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2f9cnlxiovf11vziijhh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2K0IaX3c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2f9cnlxiovf11vziijhh.gif" alt="xbox-compressed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Under &lt;strong&gt;Edit Mode&lt;/strong&gt;, click &lt;strong&gt;Template&lt;/strong&gt;, clear out the existing template, and paste the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;AWSTemplateFormatVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;2010-09-09'&lt;/span&gt;
&lt;span class="na"&gt;Transform&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Serverless-2016-10-31&lt;/span&gt;
&lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;SendMessage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Serverless::Function&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;FunctionName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s"&gt;${AWS::StackName}-SendMessage&lt;/span&gt;
      &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;ResourceName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SendMessage&lt;/span&gt;
      &lt;span class="na"&gt;CodeUri&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/SendMessage&lt;/span&gt;
      &lt;span class="na"&gt;Handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;index.handler&lt;/span&gt;
      &lt;span class="na"&gt;Runtime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nodejs12.x&lt;/span&gt;
      &lt;span class="na"&gt;MemorySize&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3008&lt;/span&gt;
      &lt;span class="na"&gt;Timeout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
      &lt;span class="na"&gt;Tracing&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Active&lt;/span&gt;
      &lt;span class="na"&gt;Policies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;AWSXrayWriteOnlyAccess&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;SNSPublishMessagePolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;TopicName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;XboxAlert.TopicName&lt;/span&gt;
      &lt;span class="na"&gt;Events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;EventRule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;EventBridgeRule&lt;/span&gt;
          &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Pattern&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;aws.codebuild&lt;/span&gt;
              &lt;span class="na"&gt;detail-type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;CodeBuild Build State Change&lt;/span&gt;
              &lt;span class="na"&gt;detail&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;build-status&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;SUCCEEDED&lt;/span&gt;
                  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;FAILED&lt;/span&gt;
                &lt;span class="na"&gt;project-name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;cypress-xbox-scraper&lt;/span&gt;
          &lt;span class="na"&gt;Metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;StackeryName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TriggerMessage&lt;/span&gt;
      &lt;span class="na"&gt;Environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Variables&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;TOPIC_NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;XboxAlert.TopicName&lt;/span&gt;
          &lt;span class="na"&gt;TOPIC_ARN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;XboxAlert&lt;/span&gt;
  &lt;span class="na"&gt;CodeBuildIAMRole&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::IAM::Role&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;AssumeRolePolicyDocument&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2012-10-17&lt;/span&gt;
        &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
          &lt;span class="na"&gt;Principal&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;codebuild.amazonaws.com&lt;/span&gt;
          &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sts:AssumeRole&lt;/span&gt;
      &lt;span class="na"&gt;RoleName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s"&gt;${AWS::StackName}-CodeBuildIAMRole&lt;/span&gt;
      &lt;span class="na"&gt;ManagedPolicyArns&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;arn:aws:iam::aws:policy/AdministratorAccess&lt;/span&gt;
  &lt;span class="na"&gt;CypressScraper&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::CodeBuild::Project&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Artifacts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;NO_ARTIFACTS&lt;/span&gt;
      &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cypress Xbox Scraper&lt;/span&gt;
      &lt;span class="na"&gt;Environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;ComputeType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;BUILD_GENERAL1_SMALL&lt;/span&gt;
        &lt;span class="na"&gt;Image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws/codebuild/standard:2.0&lt;/span&gt;
        &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;LINUX_CONTAINER&lt;/span&gt;
        &lt;span class="na"&gt;PrivilegedMode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cypress-xbox-scraper&lt;/span&gt;
      &lt;span class="na"&gt;ServiceRole&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;CodeBuildIAMRole&lt;/span&gt;
      &lt;span class="na"&gt;Source&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;BuildSpec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;buildspec.yml&lt;/span&gt;
        &lt;span class="na"&gt;Location&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://github.com/&amp;lt;github-user&amp;gt;/&amp;lt;repo-name&amp;gt;.git&lt;/span&gt;
        &lt;span class="na"&gt;SourceIdentifier&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;BUILD_SCRIPTS_SRC&lt;/span&gt;
        &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;GITHUB&lt;/span&gt;
        &lt;span class="na"&gt;Auth&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;OAUTH&lt;/span&gt;
  &lt;span class="na"&gt;CypressScraperTriggerIAMRole&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::IAM::Role&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;AssumeRolePolicyDocument&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2012-10-17&lt;/span&gt;
        &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
          &lt;span class="na"&gt;Principal&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;events.amazonaws.com&lt;/span&gt;
          &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sts:AssumeRole&lt;/span&gt;
      &lt;span class="na"&gt;Policies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;PolicyName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TriggerCypressScraperCodeBuild&lt;/span&gt;
          &lt;span class="na"&gt;PolicyDocument&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2012-10-17&lt;/span&gt;
            &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
                &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;codebuild:StartBuild&lt;/span&gt;
                  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;codebuild:BatchGetBuilds&lt;/span&gt;
                &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;CypressScraper.Arn&lt;/span&gt;
      &lt;span class="na"&gt;RoleName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s"&gt;${AWS::StackName}-CypressScraperTriggerRole&lt;/span&gt;
  &lt;span class="na"&gt;TriggerScraper&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Events::Rule&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;ScheduleExpression&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rate(1 hour)&lt;/span&gt;
      &lt;span class="na"&gt;State&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ENABLED&lt;/span&gt;
      &lt;span class="na"&gt;RoleArn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;CypressScraperTriggerIAMRole.Arn&lt;/span&gt;
      &lt;span class="na"&gt;Targets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Arn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;CypressScraper.Arn&lt;/span&gt;
          &lt;span class="na"&gt;Id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cypress-xbox-scraper&lt;/span&gt;
          &lt;span class="na"&gt;RoleArn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;CypressScraperTriggerIAMRole.Arn&lt;/span&gt;
  &lt;span class="na"&gt;XboxAlert&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::SNS::Topic&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;TopicName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s"&gt;${AWS::StackName}-XboxAlert&lt;/span&gt;
&lt;span class="na"&gt;Parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;StackTagName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Stack Name (injected by Stackery at deployment time)&lt;/span&gt;
  &lt;span class="na"&gt;EnvironmentTagName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Environment Name (injected by Stackery at deployment time)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's break this down a bit. For those new to serverless, this is an &lt;a href="https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html"&gt;AWS SAM&lt;/a&gt; template. While using Stackery means you generally can avoid writing template files, there are a few things worth noting, and one line you'll need to input your own data into.&lt;/p&gt;

&lt;p&gt;We'll start with lines 55-74:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;CypressScraper&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::CodeBuild::Project&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Artifacts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;NO_ARTIFACTS&lt;/span&gt;
      &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cypress Xbox Scraper&lt;/span&gt;
      &lt;span class="na"&gt;Environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;ComputeType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;BUILD_GENERAL1_SMALL&lt;/span&gt;
        &lt;span class="na"&gt;Image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws/codebuild/standard:2.0&lt;/span&gt;
        &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;LINUX_CONTAINER&lt;/span&gt;
        &lt;span class="na"&gt;PrivilegedMode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cypress-xbox-scraper&lt;/span&gt;
      &lt;span class="na"&gt;ServiceRole&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;CodeBuildIAMRole&lt;/span&gt;
      &lt;span class="na"&gt;Source&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;BuildSpec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;buildspec.yml&lt;/span&gt;
        &lt;span class="na"&gt;Location&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://github.com/&amp;lt;github-user&amp;gt;/&amp;lt;repo-name&amp;gt;.git&lt;/span&gt;
        &lt;span class="na"&gt;SourceIdentifier&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;BUILD_SCRIPTS_SRC&lt;/span&gt;
        &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;GITHUB&lt;/span&gt;
        &lt;span class="na"&gt;Auth&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;OAUTH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is the CodeBuild project that will be created to run Cypress in a Linux container in one of AWS's magical server estates. &lt;strong&gt;You'll need to replace line 70 with the Git repo you just created.&lt;/strong&gt; This also means you may need to authenticate your Git provider with AWS, but I'll walk you through that a bit later.&lt;/p&gt;

&lt;p&gt;Line 101 is where you can change the frequency at which messages are sent. Learn more about &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html"&gt;AWS schedule expressions here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, if you switch back to &lt;strong&gt;Visual&lt;/strong&gt; mode, you'll see that several resources were just auto-magically populated from the template:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jDwlusTc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/81secxao3htxksg6kp2r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jDwlusTc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/81secxao3htxksg6kp2r.png" alt="xbox-3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;TriggerScraper&lt;/code&gt;: The CloudWatch event rule that triggers the Cypress CodeBuild job every hour&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;TriggerMessage&lt;/code&gt;: The EventBridge Rule that triggers the &lt;code&gt;SendMessage&lt;/code&gt; function once the CodeBuild job succeeds or fails&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;SendMessage&lt;/code&gt;: The Lambda function that sends a the SNS message if Xboxes are back in stock&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;XboxAlert&lt;/code&gt;: The SNS topic for sending SMS messages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can double-click each resource to see its individual settings.&lt;/p&gt;

&lt;p&gt;Look at that: a whole backend, and you didn't even have to open the AWS Console!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Hit the &lt;strong&gt;Commit...&lt;/strong&gt; button to commit this to your Git repo, then follow the link below the stack name to your new repo URL, clone the stack locally, and open it in your favorite VSCode (or other text editor, if you must)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ujucK_XF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lsj77p3hnxc0rbszwph3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ujucK_XF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lsj77p3hnxc0rbszwph3.png" alt="xbox-2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-the-code" class="anchor"&gt;
  &lt;/a&gt;
  To the code!
&lt;/h2&gt;

&lt;p&gt;As you can see, Stackery created some directories for your function, as well as an AWS SAM template you'll be able to deploy. Thanks, Stackery!&lt;/p&gt;

&lt;p&gt;First we'll want to add Cypress:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;From the root of your repo, run &lt;code&gt;npm install cypress --save&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Once it's installed, run &lt;code&gt;./node_modules/.bin/cypress open&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cypress will create its own directory, with a bunch of example code. You can go ahead and delete &lt;code&gt;cypress/integration/examples&lt;/code&gt; and create &lt;code&gt;cypress/integration/scraper.spec.js&lt;/code&gt;. Here's what will go in there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// xbox-stock-alert/cypress/integration/scraper.spec.js&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Xbox out-of-stock scraper&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Checks to see if Xboxes are out of stock at Microsoft&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.xbox.com/en-us/configure/8WJ714N3RBTL&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Accept-Encoding&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gzip, deflate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keepAlive&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[aria-label="Checkout bundle"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;be.disabled&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's break that down:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Cypress will visit a specific URL - in this case, it's the product page of the Xbox Series X console&lt;/li&gt;
&lt;li&gt;The added headers allow the page to actually load without the dreaded &lt;a href="https://github.com/cypress-io/cypress/issues/943"&gt;ESOCKETTIMEDOUT error&lt;/a&gt; (I found this out the hard way, so you don't have to!)&lt;/li&gt;
&lt;li&gt;Cypress looks for an element with the &lt;code&gt;aria-label&lt;/code&gt; "Checkout bundle" and checks if it's disabled. If it is, the test ends and it is considered successful. If it isn't, the test ends as a failure (but we all know it tried really, really hard)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, why the specific "Checkout bundle" element? Well, if you go to the Xbox page in your browser and inspect it, you'll see that it's actually the checkout button that would be enabled were the Xbox in stock:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nfMXPsSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qfjgva9a4yazrm2gvizy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nfMXPsSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qfjgva9a4yazrm2gvizy.png" alt="Checkout button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-automate-this-sht" class="anchor"&gt;
  &lt;/a&gt;
  Let's automate this sh*t!
&lt;/h2&gt;

&lt;p&gt;Ok, we've got our test, and we've got a chron timer set to run once an hour. Now we need to add the CodeBuild job that actually runs this test. We also need to add code to our &lt;code&gt;SendMessage&lt;/code&gt; function that notifies us if the test failed, meaning the checkout button is enabled and we're one step closer to new Xbox bliss.&lt;/p&gt;

&lt;p&gt;Remember that Cypress &lt;code&gt;projectId&lt;/code&gt; and record &lt;code&gt;key&lt;/code&gt; you noted forever ago? Here's where those come in.&lt;/p&gt;

&lt;p&gt;Create a new file in the root directory called &lt;code&gt;buildspec.yml&lt;/code&gt; and add the following and save&lt;sup&gt;3&lt;/sup&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;
&lt;span class="na"&gt;phases&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;install&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runtime-versions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;nodejs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;npm install &amp;amp;&amp;amp; npm run cypress -- --headless --browser electron --record --key &amp;lt;your-record-key&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Open up &lt;code&gt;cypress.json&lt;/code&gt; and replace it with the following and save:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"baseUrl"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://www.xbox.com/en-us/configure/8WJ714N3RBTL"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"defaultCommandTimeout"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;30000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"chromeWebSecurity"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"projectId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;your-projectId&amp;gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we'll add the function code that sends an alert should the test fail. Open up &lt;code&gt;src/SendMessage/index.js&lt;/code&gt; and replace it with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// xbox-stock-alert/src/SendMessage/index.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AWS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-sdk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AWS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SNS&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;us-west-2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Xbox alert! Click me now: https://www.xbox.com/en-us/configure/8WJ714N3RBTL&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;No Xboxes available, try again later&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Log the event argument for debugging and for use in local development&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="c1"&gt;// If the CodeBuild job was successful, that means Xboxes are not in stock and no message needs to be sent&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;build-status&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SUCCEEDED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;defaultMessage&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;build-status&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FAILED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// If the CodeBuild job failed, that means Xboxes are back in stock!&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sending message: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Create SNS parameters&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cm"&gt;/* required */&lt;/span&gt;
      &lt;span class="na"&gt;TopicArn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TOPIC_ARN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;MessageAttributes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AWS.SNS.SMS.SMSType&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;DataType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;String&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;StringValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Promotional&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AWS.SNS.SMS.SenderID&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;DataType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;String&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;StringValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;XboxAlert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Message sent! Xbox purchase, commence!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sending failed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Oh, and while you're at it, you may want to add &lt;code&gt;node_modules&lt;/code&gt; and &lt;code&gt;package-lock.json&lt;/code&gt; to your &lt;code&gt;.gitignore&lt;/code&gt;, unless polluting Git repos is your thing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time-to-deploy-this-bad-boy" class="anchor"&gt;
  &lt;/a&gt;
  Time to deploy this bad boy
&lt;/h2&gt;

&lt;p&gt;Be sure to git add, commit, and push your changes. When deploying, AWS will need access to your Git provider. &lt;a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-access-tokens.html"&gt;Follow these instructions&lt;/a&gt; to set up access tokens in your account if you've never done that before. (&lt;a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-access-tokens.html"&gt;This doc&lt;/a&gt; might also come in handy for noobs like me).&lt;/p&gt;

&lt;p&gt;If you're using Stackery to deploy, like the smart and also good-looking developer you are, all you need to do is run the following command in the root of your repo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;stackery deploy
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will take a few minutes, during which time you can daydream about how awesome that new Xbox is going to be once it's hooked up to your 4K TV.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3JVwqeD0733JGNb8EB/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3JVwqeD0733JGNb8EB/giphy.gif" alt="waiting gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Done? Ok! Next step: adding your phone number for text alerts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-i-get-your-digits" class="anchor"&gt;
  &lt;/a&gt;
  Can I get your digits?
&lt;/h2&gt;

&lt;p&gt;As I mentioned above, one of the resources created in your stack was the &lt;code&gt;XboxAlert&lt;/code&gt; &lt;a href="https://docs.amazonaws.cn/en_us/sns/latest/dg/welcome.html"&gt;SNS topic&lt;/a&gt;. It was created during the deployment, but right now it's not doing anything. Let's change that.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the AWS Console, and navigate to the SNS Dashboard&lt;/li&gt;
&lt;li&gt;Under &lt;strong&gt;Topics&lt;/strong&gt;, you should see your freshly-minted topic, called something like &lt;code&gt;xbox-stock-alert-&amp;lt;env&amp;gt;-XboxAlert&lt;/code&gt;. Click its name&lt;/li&gt;
&lt;li&gt;Click the big orange &lt;strong&gt;Create subscription&lt;/strong&gt; button&lt;/li&gt;
&lt;li&gt;Fill out the form like so with your mobile number, and click &lt;strong&gt;Create subscription&lt;/strong&gt; again:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--quHb8GEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5xenes9uf47a1si1gvzl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--quHb8GEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5xenes9uf47a1si1gvzl.png" alt="subscription"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll need to verify your phone number if you haven't used it with SNS before, and then you're good to go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-time" class="anchor"&gt;
  &lt;/a&gt;
  Testing time
&lt;/h2&gt;

&lt;p&gt;Still in AWS, you should now be able to open up the CodeBuild console and see a new project in there:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cDlJxkUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lpk1il7y2ooat8snvmd6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cDlJxkUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lpk1il7y2ooat8snvmd6.png" alt="xbox-4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll want to run it manually to make sure everything works before setting and forgetting it, so go ahead and select your project and hit that &lt;strong&gt;Start build&lt;/strong&gt; button. This will take some time as well, but you can tail the CloudWatch logs by clicking the project name and selecting the most recent build run.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vids-or-it-didnt-happen" class="anchor"&gt;
  &lt;/a&gt;
  Vids or it didn't happen
&lt;/h2&gt;

&lt;p&gt;Hopefully, your build was a success (and if it wasn't, &lt;a href="https://twitter.com/annaspies"&gt;hit me up&lt;/a&gt; - I think I hit all the errors while building this out and may be able to help).&lt;/p&gt;

&lt;p&gt;But how can you make sure? Well, you can go back to your project in Cypress.io, and see if there's anything in your latest runs. If all went well, you'll be able to watch a video of the headless browser running your spec!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AD6KOQJI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jpmd746oibjav7pci99z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AD6KOQJI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jpmd746oibjav7pci99z.png" alt="xbox-5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And, should one day that test fail 🤞, you'll get a notification straight to your phone letting you know that Xbox is right there for the taking. Good luck!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#notes" class="anchor"&gt;
  &lt;/a&gt;
  Notes
&lt;/h3&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; I actually just made that up, but I imagine the inventor of the hammer said that at some point.&lt;br&gt;
&lt;sup&gt;2&lt;/sup&gt; I also just made that up, but that doesn't make it any less true.&lt;br&gt;
&lt;sup&gt;3&lt;/sup&gt; A much better way to do this is to use &lt;a href="https://docs.stackery.io/docs/using-stackery/environments#setting-parameter-store-values"&gt;environment parameters&lt;/a&gt; stored in &lt;a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html"&gt;AWS Systems Manager Parameter Store&lt;/a&gt; to store your record key, but for the sake of brevity my example hard-codes the key. &lt;strong&gt;Just make sure your repo is private if you follow my bad example&lt;/strong&gt; 🙏&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#postscript" class="anchor"&gt;
  &lt;/a&gt;
  Postscript
&lt;/h2&gt;

&lt;p&gt;It's possible to extend the scraper spec to add more retailers, though I ran into issues with a few, such as Walmart's bot detector:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LWe6x6NR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nv0c5h4325xi2j7jyhdt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LWe6x6NR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nv0c5h4325xi2j7jyhdt.png" alt="walmart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wasn't able to get these running without errors, but maybe someone else will have more luck and can comment with their solutions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// xbox-stock-alert/cypress/integration/scraper.spec.js&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Xbox out-of-stock scraper - more retailers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Checks to see if Xboxes are out of stock at Best Buy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.bestbuy.com/site/microsoft-xbox-series-x-1tb-console-black/6428324.p?skuId=6428324&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Accept-Encoding&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gzip, deflate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keepAlive&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[data-sku-id="6428324"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;be.disabled&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Checks to see if Xboxes are out of stock at Walmart&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.walmart.com/ip/Xbox-Series-X/443574645&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Accept-Encoding&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gzip, deflate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keepAlive&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.spin-button-children&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Get in-stock alert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Checks to see if Xboxes are out of stock at Costco&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.costco.com/xbox-series-x-1tb-console-with-additional-controller.product.100691493.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Accept-Encoding&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gzip, deflate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keepAlive&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;pageLoadTimeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60000&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.oos-overlay&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>serverless</category>
      <category>cypress</category>
      <category>node</category>
      <category>xbox</category>
    </item>
    <item>
      <title>The Anatomy of package.json</title>
      <author>Laurie</author>
      <pubDate>Wed, 02 Dec 2020 15:54:37 +0000</pubDate>
      <link>https://dev.to/laurieontech/the-anatomy-of-package-json-pi4</link>
      <guid>https://dev.to/laurieontech/the-anatomy-of-package-json-pi4</guid>
      <description>&lt;p&gt;If you work with JavaScript code, you come across a &lt;code&gt;package.json&lt;/code&gt; file in every project. Every time you run &lt;code&gt;npm install&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt; those package managers look through that file and grab the dependencies you need. However, these files are chockfull of valuable information and powerful features, let's dive in!&lt;/p&gt;

&lt;p&gt;We'll work off of this example as a reference point.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"example-package"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"A package that does a thing"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"laurieontech"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"repository"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"git"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://github.com/some-project-here"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"16.8.6"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prettier"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.18.2"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"keywords"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"MIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jest"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"bin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./bin/executable.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#metadata" class="anchor"&gt;
  &lt;/a&gt;
  Metadata
&lt;/h2&gt;

&lt;p&gt;The first few items in a &lt;code&gt;package.json&lt;/code&gt; are descriptive. &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;repository&lt;/code&gt;, and &lt;code&gt;author&lt;/code&gt; (or &lt;code&gt;contributors&lt;/code&gt; if there are multiple) are there to provide context about the project. If you publish the package on npm, that information is available on the package page. &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt; do a bit more.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;name&lt;/code&gt; is a kebab-case package name. This is the name you'll find it under in &lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt;, this is the name you'll use to install the package, etc. If you're used to using packages you're likely familiar with syntax like this &lt;code&gt;"react": "16.8.6"&lt;/code&gt;. This is a name and a version number.&lt;/p&gt;

&lt;p&gt;Most JavaScript projects follow &lt;a href="https://semver.org/"&gt;semver&lt;/a&gt; as a way to intuitively increment the package version. Every time the package is published to npm, the version should increase. Whether the first, last, or middle number increments is based on the significance of the changes and their impact on everyone else.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependencies" class="anchor"&gt;
  &lt;/a&gt;
  Dependencies
&lt;/h2&gt;

&lt;p&gt;Dependencies are a list of runtime packages that your project depends on. They are installed when you run &lt;code&gt;npm install&lt;/code&gt;, or similar.&lt;/p&gt;

&lt;p&gt;Let's talk about &lt;code&gt;"react": "16.8.6"&lt;/code&gt; again. Each dependency is listed as a key-value pair using the name and version of the package. However, there are some extra characters you can add in front of the version.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;~&lt;/code&gt;: if you add a tilde, your package manager will install the version you listed or any newer patch version. E.g. &lt;code&gt;~16.8.6&lt;/code&gt; means you will get the latest version of &lt;code&gt;16.8.x&lt;/code&gt;, but not &lt;code&gt;16.9.0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;^&lt;/code&gt;: If you add a caret your package manager will install the version you listed or any newer patch or minor version, but not a major version. E.g. &lt;code&gt;^16.8.6&lt;/code&gt; means you will get the latest version of &lt;code&gt;16.x.y&lt;/code&gt;, but not &lt;code&gt;17.0.0&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are additional supported characters as well, allowing you to specify &lt;a href="https://docs.npmjs.com/cli/v6/using-npm/semver#ranges"&gt;ranges&lt;/a&gt;. All of these are parsed using the &lt;a href="https://www.npmjs.com/package/semver"&gt;semver package&lt;/a&gt;. This gets a bit confusing, so let me clarify. Semver is a set of guidelines for versioning your packages. Since npm follows it and uses those guidelines as a basis for its package manager, it named the semantic versioning package it uses accordingly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#devdependencies" class="anchor"&gt;
  &lt;/a&gt;
  devDependencies
&lt;/h3&gt;

&lt;p&gt;Slightly different are &lt;code&gt;devDependencies&lt;/code&gt;. These are dependencies that are required for developers working on the package, e.g. testing libraries. However, end users don't need them, so they're included separately. They're included when you run &lt;code&gt;npm install&lt;/code&gt; inside &lt;code&gt;example-package&lt;/code&gt;, but not when you &lt;code&gt;npm install example-package&lt;/code&gt; inside another project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#peerdependencies" class="anchor"&gt;
  &lt;/a&gt;
  peerDependencies
&lt;/h3&gt;

&lt;p&gt;This is yet another type of dependencies. It's mostly there for package authors to prevent conflicts when they're using a package that other dependencies you have are also using. E.g. making sure the package is using the Babel version from your project and not a local one that might not be compatible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keywords" class="anchor"&gt;
  &lt;/a&gt;
  keywords
&lt;/h2&gt;

&lt;p&gt;Keywords are a helper for the npm search function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#license" class="anchor"&gt;
  &lt;/a&gt;
  license
&lt;/h2&gt;

&lt;p&gt;Mandatory "I am not a lawyer" comment here. Licenses are a topic on which there are experts and I am not one of them. The license(s) listed are the terms under which you are permitted to use the project. You can read more on the &lt;a href="https://spdx.org/licenses/"&gt;various licenses&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#main-entry-point" class="anchor"&gt;
  &lt;/a&gt;
  main entry point
&lt;/h2&gt;

&lt;p&gt;This is the file that is referenced when someone imports a package. Given &lt;code&gt;"main": "index.js"&lt;/code&gt;, &lt;code&gt;const example = require("example-package")&lt;/code&gt; will grab the &lt;code&gt;example&lt;/code&gt; export from the &lt;code&gt;index.js&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scripts" class="anchor"&gt;
  &lt;/a&gt;
  scripts
&lt;/h2&gt;

&lt;p&gt;This is where we get into the meat of the file. The scripts section includes more key-value pairs. The key is the name of the command and the value is the command line instructions that run when you call it.&lt;/p&gt;

&lt;p&gt;Let's start with a straightforward example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run jest"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is more of an alias than anything. It allows us to run &lt;code&gt;npm test&lt;/code&gt; in our command line and it will actually run &lt;code&gt;npm run jest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What about something a bit more complex?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint --cache --ext .js,.jsx,.ts,.tsx ."&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This runs eslint against the entire project directory with some specific flags.&lt;/p&gt;

&lt;p&gt;Nothing prevents you from running these scripts yourself. Giving you a shorter command with the correct configuration is just a better experience.&lt;/p&gt;

&lt;p&gt;However, there are some scripts that are meant to build the project so that it can be published and installed in other projects as a package. There are &lt;a href="https://docs.npmjs.com/cli/v6/using-npm/scripts#pre--post-scripts"&gt;special keys&lt;/a&gt; that execute scripts at specified times but we're not going to dive into that here.&lt;/p&gt;

&lt;p&gt;Instead, we're going to look at a couple types of scripts you might see that bundle up a project and prepare it for installation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#babel-example" class="anchor"&gt;
  &lt;/a&gt;
  Babel example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"babel src --out-dir . --ignore &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;**/__tests__&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This first script is using &lt;a href="https://babeljs.io/"&gt;babel&lt;/a&gt;. Using a configuration file in the root of the project, this takes all of the files in the &lt;code&gt;src&lt;/code&gt; directory and compiles them into the root directory. It also includes a flag to ignore the files in &lt;code&gt;src/__tests__&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#microbundle-example" class="anchor"&gt;
  &lt;/a&gt;
  Microbundle example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"microbundle -i src/example.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This script uses &lt;a href="https://github.com/developit/microbundle"&gt;microbundle&lt;/a&gt; to bundle up the project. In this case, we're specifying a &lt;code&gt;src/example.js&lt;/code&gt; as the entry point for building.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-scripts" class="anchor"&gt;
  &lt;/a&gt;
  Running scripts
&lt;/h2&gt;

&lt;p&gt;Scripts are runnable. I mentioned above that &lt;code&gt;npm test&lt;/code&gt; runs &lt;code&gt;npm jest&lt;/code&gt; and it does. However, that's because &lt;code&gt;test&lt;/code&gt; is an alias for &lt;code&gt;npm run test&lt;/code&gt;. There are &lt;a href="https://docs.npmjs.com/cli/v6/commands/npm-run-script#see-also"&gt;a few of these&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For any other custom scripts you specify, a user needs to to run &lt;code&gt;npm run &amp;lt;script&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bin" class="anchor"&gt;
  &lt;/a&gt;
  bin
&lt;/h2&gt;

&lt;p&gt;One more fun thing! In addition to the &lt;code&gt;npm&lt;/code&gt; command, there is now an &lt;code&gt;npx&lt;/code&gt; command. &lt;code&gt;npx&lt;/code&gt; allows you to run commands without installing the package first. 🤯&lt;/p&gt;

&lt;p&gt;Package authors enable this by using the &lt;code&gt;bin&lt;/code&gt; section of the &lt;code&gt;package.json&lt;/code&gt; file. It can be written as a key-value pair or using the below syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"bin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./bin/executable.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this case, the &lt;code&gt;./bin&lt;/code&gt; and extension get stripped and a user can run &lt;code&gt;npx executable&lt;/code&gt;. If you ever decide to write a package that implements this, note that the relative file path is based on the bundled version of the project. This makes sense since it's being executed directly from the published package.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#isnt-there-more" class="anchor"&gt;
  &lt;/a&gt;
  Isn't there more?
&lt;/h2&gt;

&lt;p&gt;Yes, &lt;a href="https://docs.npmjs.com/cli/v6/configuring-npm/package-json"&gt;a lot more&lt;/a&gt; actually. But this is a solid start, so we'll stop here for now.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Drawing Santa Claus in CSS</title>
      <author>Alvaro Montoro</author>
      <pubDate>Wed, 02 Dec 2020 15:06:50 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/drawing-santa-claus-in-css-1daf</link>
      <guid>https://dev.to/alvaromontoro/drawing-santa-claus-in-css-1daf</guid>
      <description>&lt;p&gt;In this article, we will see how to make a responsive cartoon of Santa Claus using HTML and CSS. &lt;a href="https://codepen.io/alvaromontoro/full/gOwYYGJ"&gt;Like this one&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/gOwYYGJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
Our Santa will be slightly different... but better



&lt;p&gt;We will do it step by step, explaining each shape and each decision (or almost of all of them). Because, after all, the image is just a combination of elements with different shapes.&lt;/p&gt;

&lt;p&gt;Let's start by...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-the-canvas" class="anchor"&gt;
  &lt;/a&gt;
  Setting the canvas
&lt;/h2&gt;

&lt;p&gt;By canvas, I don't mean a &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element, but a canvas in which to do our &lt;em&gt;painting&lt;/em&gt;. This will be helpful because we can use it as a reference for our elements once it is set.&lt;/p&gt;

&lt;p&gt;If we use relative units for canvas and content, we will be actually creating a responsive image with CSS. &lt;strong&gt;That's the reason why most of the units used in this drawing are going to be &lt;code&gt;%&lt;/code&gt; or &lt;code&gt;vmin&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As a drawing helper, we can add a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/repeating-linear-gradient()"&gt;&lt;code&gt;repeating-linear-gradient&lt;/code&gt;&lt;/a&gt; to create a background grid which will be useful for positioning elements:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/alvaromontoro/ku4oxb86/1//embedded/result,html,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The canvas must have a relative or absolute position to place the different elements where we want.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the colors, we are going to use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties"&gt;CSS variables&lt;/a&gt;. They will allow us to have consistent colors and will facilitate changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drawing-the-head" class="anchor"&gt;
  &lt;/a&gt;
  Drawing the head
&lt;/h2&gt;

&lt;p&gt;The head will be multiple circles and ellipses: a big circle for the face, smaller circles for the eyes, and ellipses for the cheeks.&lt;/p&gt;

&lt;p&gt;To round objects and make them circular or elliptical, we use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius"&gt;&lt;code&gt;border-radius&lt;/code&gt;&lt;/a&gt; with a value of 50% or higher.&lt;/p&gt;

&lt;p&gt;We could have the eyes and cheeks inside the face, and then their size would be relative to the parent instead of the canvas, but we will keep everything at the canvas level for now.&lt;/p&gt;

&lt;p&gt;We create a circle for the face, another for one eye, and an ellipse for one of the cheeks. Then we use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow"&gt;&lt;code&gt;box-shadow&lt;/code&gt;&lt;/a&gt; to duplicate the second eye and cheek:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/alvaromontoro/ku4oxb86/2//embedded/result,html,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-beard-and-mustache" class="anchor"&gt;
  &lt;/a&gt;
  The beard and mustache
&lt;/h2&gt;

&lt;p&gt;In this section, we will use two basic CSS shapes that are really useful for drawing: the oval and eye shapes for the beard and mustaches, respectively.&lt;/p&gt;

&lt;p&gt;The beard will go behind the head. To achieve the oval shape, we take advantage of &lt;code&gt;border-radius&lt;/code&gt; taking two values separated by &lt;code&gt;/&lt;/code&gt;: one for the horizontal axis and another for the vertical.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: when we say that the box-shadow takes two values, each value can have 1-4 sub-values... which may make it look like there are 8 values. By two values, we mean two sets of up to 4.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The mustaches will go on top of the head. There will be two elements with basically the same styles (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotate()"&gt;just different rotation&lt;/a&gt;) next to each other. The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Adjacent_sibling_combinator"&gt;adjacent sibling combinator (&lt;code&gt;+&lt;/code&gt;)&lt;/a&gt; will go perfect for this.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/alvaromontoro/ku4oxb86/3//embedded/result,html,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Our Santa Claus starts looking like Santa already.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drawing-the-hat" class="anchor"&gt;
  &lt;/a&gt;
  Drawing the hat
&lt;/h2&gt;

&lt;p&gt;The hat is going to be a single element, but it will include two pseudo-elements: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::before"&gt;&lt;code&gt;::before&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::after"&gt;&lt;code&gt;::after&lt;/code&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;This is convenient because their size and position will be relative to the hat, and changing a single component will update all three of them at once. We could have 3 elements (hat, base, and pompom), but this way, we practice pseudo-elements.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Important: &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; must have a &lt;code&gt;content&lt;/code&gt; property or they won't be displayed. It's ok if the value is empty, but it needs to be there.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The hat is a basic square in which one corner (top left) has a border-radius of 100%, creating a nice curvature. The pompom is just a circle. So the trickiest part is the bottom of the hat.&lt;/p&gt;

&lt;p&gt;For the bottom, we are going to use a shape I call a pipe. We draw it by having a square and adding two values for the border-radius: &lt;code&gt;100% / 50%&lt;/code&gt;. This way, the square's top and bottom will be curved while the sides will be flat.&lt;/p&gt;

&lt;p&gt;Once we have that shape, we add an inset box-shadow from the top. Then we'll have that curved bottom. We may need to rotate it a little to adjust it to the head:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/alvaromontoro/ku4oxb86/4//embedded/result,html,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We added a blue-ish background so we can see the bottom of the hat and the pompom.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-body" class="anchor"&gt;
  &lt;/a&gt;
  The body
&lt;/h2&gt;

&lt;p&gt;The body shape is like a bell, which is basically an oval with small bottom corner radii in CSS.&lt;/p&gt;

&lt;p&gt;But that's not the interesting part about the body. We are going to draw the belt and the buttons section using CSS gradients: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/radial-gradient()"&gt;&lt;code&gt;radial-gradient()&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient()"&gt;&lt;code&gt;linear-gradient()&lt;/code&gt;&lt;/a&gt; respectively.&lt;/p&gt;

&lt;p&gt;The buttons section is a simple left-to-right linear gradient using three colors: transparent, then white, and then transparent again. Leaving a small % between the colors to add some "blurry" effect.&lt;/p&gt;

&lt;p&gt;The belt is a bit trickier: it is a circular (radial) gradient, and we'll have to play with the values to position it exactly where we want. It follows a similar transparent-color-transparent pattern as the buttons section:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/alvaromontoro/ku4oxb86/5//embedded/result,html,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;With that, we have the body. But it looks a bit boring. It's time to improve it by...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-details-to-the-body" class="anchor"&gt;
  &lt;/a&gt;
  Adding details to the body
&lt;/h2&gt;

&lt;p&gt;The first detail is going to be the buttons. It is going to be a single rounded element with different shadows. We used a similar technique for the eyes, but instead of horizontally, the shadows will go vertically.&lt;/p&gt;

&lt;p&gt;The belt buckle is just a rectangle! We add golden borders, a little bit of border-radius (we don't want an ellipse). The background will also be gold, but with an inset &lt;code&gt;box-shadow&lt;/code&gt;, we highlight the prong.&lt;/p&gt;

&lt;p&gt;Checking some Santa drawings, many have the bottom of Santa's jacket as white. So we expand the &lt;code&gt;radial-gradient&lt;/code&gt; from the body, so it ends in white instead of transparent:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/alvaromontoro/ku4oxb86/6//embedded/result,html,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As a final step, we added a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path"&gt;&lt;code&gt;clip-path&lt;/code&gt;&lt;/a&gt; to snip the bottom of the buttons section, so it looks like the jacket overlaps. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arms-and-hands" class="anchor"&gt;
  &lt;/a&gt;
  Arms and hands
&lt;/h2&gt;

&lt;p&gt;The arms will be a single element with the same shape as the body: a bell. But this bell is going to be shorter and wider. That way, when we place it behind the body, it will "overflow" on the sides.&lt;/p&gt;

&lt;p&gt;Adding a small vertical gradient from transparent to semi-transparent black, the arms get some color distance from the body. The gradients make it look like a shadow and emphasizes the backward position.&lt;/p&gt;

&lt;p&gt;The hands are a simple circle again. Same routine as the eyes or the buttons. I could have gone for something slightly more complicated (or even an ellipse), but I have to confess I'm terrible at drawing hands... so the circle will do:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/alvaromontoro/ku4oxb86/7//embedded/result,html,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now the top part of our Santa is complete. This would even make a cute element for a website (e.g., animating it up from the bottom of the page.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drawing-the-legs" class="anchor"&gt;
  &lt;/a&gt;
  Drawing the legs
&lt;/h2&gt;

&lt;p&gt;The legs will have two parts: the leg in itself and the boot tip (only the tip, because the boot will be drawn with a linear gradient on the leg itself).&lt;/p&gt;

&lt;p&gt;We draw rectangles for the legs, distance them a little (using the adjacent sibling combinator that we used before for the mustaches), add a red-black gradient to separate pants and boots... and slightly tilt them with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/skew()"&gt;&lt;code&gt;skew()&lt;/code&gt;&lt;/a&gt;, so they don't look too symmetrical.&lt;/p&gt;

&lt;p&gt;Finally, for the boot tip, we use the &lt;code&gt;::after&lt;/code&gt; pseudo-element, rounding the top corners:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/alvaromontoro/ku4oxb86/8//embedded/result,html,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;With this, our Santa is complete... but it looks a bit sad just by itself floating in that gray void. Let's add some scenery.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-the-ground-and-some-snow" class="anchor"&gt;
  &lt;/a&gt;
  Adding the ground and some snow
&lt;/h2&gt;

&lt;p&gt;Let's start with the ground because it is easier. We don't even need a new element! We can use the &lt;code&gt;::before&lt;/code&gt; pseudo-element of the canvas.&lt;/p&gt;

&lt;p&gt;We will make it really big. So big that it will overflow the viewport, and we will need to add &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/overflow"&gt;&lt;code&gt;overflow: hidden&lt;/code&gt;&lt;/a&gt; to the document's &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; to avoid annoying scrollbars.&lt;/p&gt;

&lt;p&gt;Then we will place it at the bottom of the canvas and add a tiny curvature to it (by making it an inverted bell!) And just like that, we have our Santa standing on a hill.&lt;/p&gt;

&lt;p&gt;The snow is also a fairly simple step. We will create it by adding a bunch of radial gradients to the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;, each of them a background image with different sizes (so they seem more irregular).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-image"&gt;&lt;code&gt;background-image&lt;/code&gt;&lt;/a&gt; allows for more than one value as long as they are separated by commas. Same principle applies to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-position"&gt;&lt;code&gt;background-position&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat"&gt;&lt;code&gt;background-repeat&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-size"&gt;&lt;code&gt;background-size&lt;/code&gt;&lt;/a&gt;...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The result looks like this:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/alvaromontoro/ku4oxb86/9//embedded/result,html,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And with that, our drawing is complete. We need to clean up a little, removing the grid that served as guidelines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#animating-the-scene" class="anchor"&gt;
  &lt;/a&gt;
  Animating the scene
&lt;/h2&gt;

&lt;p&gt;We have complete a static drawing... but we can add some &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/animation"&gt;animations&lt;/a&gt; to make it pop up:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Santa could blink as a normal person does&lt;/li&gt;
&lt;li&gt;Moving the mustaches now and then shaking that cold&lt;/li&gt;
&lt;li&gt;It would be a lot cooler if the snow actually fell&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Blinking is a simple animation, making the eye's height from whatever it is to zero and then back. We may need to add a vertical translation for a better experience.&lt;/p&gt;

&lt;p&gt;Moving the mustaches is also a simple animation, but it starts getting "messy" because we need to synchronize both mustaches (remember it is a two-part thing!) Playing with the times and the angles will yield great results.&lt;/p&gt;

&lt;p&gt;As for the snow, we can animate the &lt;code&gt;background-position&lt;/code&gt; to make it look like it's falling. Doing it vertically is easy, but it doesn't look too realistic. Snow zigzags when falling, so we will add that zigzagging to our animation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: the real challenge with animation is timing. If all the animated parts have the same timing functions and last for the same amount of time, the animation looks fake. Mixing things make it look more natural and nicer... Unfortunately, I'm not that great at it. For reference, you can check the work on &lt;a href="https://twitter.com/cobra_winfrey"&gt;Adam Kuhn&lt;/a&gt;, &lt;a href="https://twitter.com/sarah_edo"&gt;Sarah Drasner&lt;/a&gt;, or &lt;a href="https://twitter.com/jh3yy"&gt;Jhey Tompkins&lt;/a&gt;. They are really amazing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With all the animations listed above, our animated cartoon looks nicer:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/alvaromontoro/ku4oxb86/10//embedded/result,html,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It is important to consider the will of the user and disable the animations if they chose so (especially taking into account accessibility). We can do that with the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion"&gt;&lt;code&gt;prefers-reduced-motion&lt;/code&gt; media feature&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;And that's it! We have created an animated scene with Santa Claus and, during this process, we have practiced a lot of CSS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Animations&lt;/li&gt;
&lt;li&gt;Backgrounds&lt;/li&gt;
&lt;li&gt;Border-radius&lt;/li&gt;
&lt;li&gt;Box-shadow&lt;/li&gt;
&lt;li&gt;Combinators&lt;/li&gt;
&lt;li&gt;Gradients&lt;/li&gt;
&lt;li&gt;Overflow&lt;/li&gt;
&lt;li&gt;Positioning&lt;/li&gt;
&lt;li&gt;Pseudo-elements&lt;/li&gt;
&lt;li&gt;Transforms&lt;/li&gt;
&lt;li&gt;Units &amp;amp; colors&lt;/li&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see the code of the final demo on this &lt;a href="https://jsfiddle.net/alvaromontoro/ku4oxb86/10/"&gt;JSFiddle&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A Better Way to Structure React Projects</title>
      <author>Kris Guzman</author>
      <pubDate>Wed, 02 Dec 2020 14:56:13 +0000</pubDate>
      <link>https://dev.to/krisguzman_dev/a-better-way-to-structure-react-projects-96a</link>
      <guid>https://dev.to/krisguzman_dev/a-better-way-to-structure-react-projects-96a</guid>
      <description>&lt;p&gt;&lt;span class="s"&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--34CMQok9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2880/1%2AIxNR_wwKH11YYmZTg7en6Q.jpeg" class="article-body-image-wrapper"&gt;&lt;img alt="Image for post" class="t u v hs aj" src="https://res.cloudinary.com/practicaldev/image/fetch/s--34CMQok9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2880/1%2AIxNR_wwKH11YYmZTg7en6Q.jpeg" width="1440" height="725"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First off, if you don’t know what atomic design is, I’ll give a brief primer below but I suggest you go to &lt;a href="http://atomicdesign.bradfrost.com/chapter-2/"&gt;Brad Frost’s website&lt;/a&gt; and check it out.&lt;/p&gt;

&lt;p&gt;Atomic design is Brad Frost’s methodology for building design systems. The idea is that we can take the basic building blocks of living things and give our UI a hierarchical structure based on it.&lt;/p&gt;

&lt;p&gt;Brad Frost defines five main stages of UI components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Atoms&lt;/li&gt;
&lt;li&gt; Molecules&lt;/li&gt;
&lt;li&gt; Organisms&lt;/li&gt;
&lt;li&gt; Templates&lt;/li&gt;
&lt;li&gt; Pages&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Atoms&lt;/em&gt; are the simplest form of UI, consisting of things like headers, labels, input fields, buttons, etc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Molecules&lt;/em&gt; are a combination of atoms that form more complex pieces of our UI, such as a search field with a submit button.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Organisms&lt;/em&gt; build on top of molecules and orchestrate larger parts of the UI. This can include a list of products, a header, forms, etc. Organisms can even include other organisms.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Templates&lt;/em&gt; are where our pages start to come together, giving context to all of our organisms and molecules by giving them a unified purpose. For example, a template for a contact page will have organisms for headers and forms, and molecules for text fields and navigation bars.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pages&lt;/em&gt;&lt;strong&gt;,&lt;/strong&gt; as the name implies, is our final page with all its content. The difference between pages and templates is that templates don’t provide any content.&lt;/p&gt;

&lt;p&gt;&lt;span class="jm fq gr jn jo jp"&gt;&lt;/span&gt;&lt;span class="jm fq gr jn jo jp"&gt;&lt;/span&gt;&lt;span class="jm fq gr jn jo"&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#goal-of-this-article" class="anchor"&gt;
  &lt;/a&gt;
  Goal of This Article
&lt;/h1&gt;

&lt;p&gt;I want to present a way to apply atomic design in your development workflow with the goal of making your code and project structure more &lt;em&gt;maintainable, scalable, and intuitive.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Additionally, atomic design is a framework that can help bridge the communication gap between development and design. It is important that developers understand it so they speak to designers in a unified language.&lt;/p&gt;

&lt;p&gt;When components are appropriately categorized, teams will be surprised to see how much more intuitive and organized their UI systems feel. Code is more maintainable, updates and refactors are easier, and on-boarding new designers and developers becomes a more efficient process.&lt;/p&gt;

&lt;p&gt;&lt;span class="jm fq gr jn jo jp"&gt;&lt;/span&gt;&lt;span class="jm fq gr jn jo jp"&gt;&lt;/span&gt;&lt;span class="jm fq gr jn jo"&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#common-project-structure" class="anchor"&gt;
  &lt;/a&gt;
  Common Project Structure
&lt;/h1&gt;

&lt;p&gt;Many of you are probably familiar with the folder structure below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dKCoIgQr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/910/1%2ANcbbbaGmiVb5yy69-lpZ3g.png" class="article-body-image-wrapper"&gt;&lt;img alt="Image for post" class="t u v hs aj" src="https://res.cloudinary.com/practicaldev/image/fetch/s--dKCoIgQr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/910/1%2ANcbbbaGmiVb5yy69-lpZ3g.png" width="455" height="674"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The idea here is that we try to keep components as “dumb” and as stateless as possible, while containers orchestrate our components and act as our pages.&lt;/p&gt;

&lt;p&gt;I think we should get rid of this whole “container” vs. “component” concept for the following reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;strong&gt;It’s not scalable.&lt;/strong&gt; We only have two buckets to dump our UI in. What happens when we have 200 components and just two categories? Exactly.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;It’s not intuitive.&lt;/strong&gt; What’s a container, really? Is it a page? Or is it just a stateful component? Where do the two meet?&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;It’s a dev concept, not a design concept.&lt;/strong&gt; How can we efficiently cooperate with designers if we are speaking a different language? Designers aren’t concerned with stateful vs. non-stateful, they are concerned with &lt;em&gt;application and relationships&lt;/em&gt;. How is the component used, and how does it relate to the rest of the UI?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;span class="jm fq gr jn jo jp"&gt;&lt;/span&gt;&lt;span class="jm fq gr jn jo jp"&gt;&lt;/span&gt;&lt;span class="jm fq gr jn jo"&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-better-project-structure" class="anchor"&gt;
  &lt;/a&gt;
  A Better Project Structure
&lt;/h1&gt;

&lt;p&gt;Why don’t we structure our project according to the stages of atomic design?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1hQDjFxs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/972/1%2Ay27rTHhPYP_Pq-IqzXxlTw.png" class="article-body-image-wrapper"&gt;&lt;img alt="Image for post" class="t u v hs aj" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1hQDjFxs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/972/1%2Ay27rTHhPYP_Pq-IqzXxlTw.png" width="486" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice how we put pages outside of our components folder. Intuitively, we don’t put pages in the same category as the other four stages. Pages are the final presentation, not the individual components themselves.&lt;/p&gt;

&lt;p&gt;Also, I typically create a &lt;code&gt;/forms&lt;/code&gt; folder inside the root organisms folder. Forms are super common so it’s a nice way to make your folder structure a bit more granular.&lt;/p&gt;

&lt;p&gt;So, what do we gain here by making this small adjustment? Surprisingly, a lot!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;strong&gt;Unified design and dev language.&lt;/strong&gt; It is much easier to collaborate with your design team now that you are using the same lingo across the board. For my devs using storybook out there, this is even more beneficial.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Scalable folder structure.&lt;/strong&gt; We now have refined categories for our components. It is much easier to keep our UI organized even if we have 200+ components.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Minimal project context needed.&lt;/strong&gt; Normally, a new developer needs to have a good amount of context on a project in order to find components they need. With atomic design, the language and structure are more universal, so it is much easier to say: “Well, a header is an organism, so let me check the organism folder.”&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Cleaner code.&lt;/strong&gt;  How, you ask? Well, atomic design forces you to better understand the relationship between your components. Even if you start with a big, messy, multi-functional component, refactoring is a breeze when you start thinking: “OK, where do I see organisms, molecules, atoms, etc.”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;span class="jm fq gr jn jo jp"&gt;&lt;/span&gt;&lt;span class="jm fq gr jn jo jp"&gt;&lt;/span&gt;&lt;span class="jm fq gr jn jo"&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next" class="anchor"&gt;
  &lt;/a&gt;
  What’s Next?
&lt;/h1&gt;

&lt;p&gt;Congrats, you have a rock-solid folder structure for your next UI project. Is that all?&lt;/p&gt;

&lt;p&gt;Let’s fast-forward a couple of weeks. You have a few atoms, a few molecules, life is good, you’re thinking: “This is working out great! Kris isn’t so dumb after all!”&lt;/p&gt;

&lt;p&gt;But then you hit a roadblock… You are building a complex component and aren’t sure whether it’s an organism or a molecule. Can molecules have state? When does a molecule become an organism? For that matter, where is the line between an organism and a template? A template and a page?&lt;/p&gt;

&lt;p&gt;The lines between stages can get fuzzy in practice, so in part 2, we will take a look into how we can define these lines in a React project.&lt;/p&gt;

&lt;p&gt;That’s all for this part, thanks for reading!&lt;/p&gt;

</description>
      <category>react</category>
      <category>architecture</category>
      <category>design</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
