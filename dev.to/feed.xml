<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Web3 - The Ultimate Guide to Create your own Cryptocurrency Token with Solidity</title>
      <author>Matheus Costa</author>
      <pubDate>Thu, 02 Dec 2021 23:08:23 +0000</pubDate>
      <link>https://dev.to/costamatheus97/web3-the-ultimate-guide-to-create-your-own-cryptocurrency-token-with-solidity-ne9</link>
      <guid>https://dev.to/costamatheus97/web3-the-ultimate-guide-to-create-your-own-cryptocurrency-token-with-solidity-ne9</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Old or new to the crypto world, you have probably already met with some cryptocurrencies. But how about creating one? That's what we're going to do in this tutorial.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#erc20"&gt;
  &lt;/a&gt;
  ERC-20
&lt;/h2&gt;

&lt;p&gt;First, what is ERC-20? Some kind of android? No! Besides the difficult name, it is just a protocol to define what basic structure, rules and functionalities your fungible token (like crypto currencies) must have to properly interact with the world. But good news! You don't have to write it from scratch, because &lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts"&gt;OpenZeppelin&lt;/a&gt; already has a bunch of secure boilerplate smart contracts written and audited by the community developers, so you just have to import it in your code and extend your contract so it inherits the ERC-20 basic properties and methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-basic-properties-and-methods"&gt;
  &lt;/a&gt;
  The basic properties and methods
&lt;/h2&gt;

&lt;p&gt;To properly interact with the world your token needs some basic rules, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name (like Ethereum or Dogecoin)&lt;/li&gt;
&lt;li&gt;Symbol (like ETH for Ethereum)&lt;/li&gt;
&lt;li&gt;Decimals (like 2 for US Dollars and 18 for Ethereum)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And also basic functionalities, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;totalSupply (to indicate the total supply of the token)&lt;/li&gt;
&lt;li&gt;balanceOf (to check the balance of the indicated wallet)&lt;/li&gt;
&lt;li&gt;transfer (to send or receive the token)&lt;/li&gt;
&lt;li&gt;allowance (which allows a 3rd party to move your tokens)&lt;/li&gt;
&lt;li&gt;mint (to mint new tokens)&lt;/li&gt;
&lt;li&gt;burn (to burn tokens)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And a couple more you can check at the &lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol"&gt;OpenZeppelin ERC-20 smart contract&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The code
&lt;/h2&gt;

&lt;p&gt;Let's go to the fun part: coding. For this part, I'm assuming you already have basic Solidity experience. Open your &lt;a href="https://remix.ethereum.org/"&gt;Remix IDE&lt;/a&gt;, create a new file and set your Pragma to the newest available version. Import the ERC-20 smart contract from &lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol"&gt;here&lt;/a&gt; and extend your token smart contract. You should have something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pragma solidity ^0.8.7;

import 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol';

contract CakeCoin is ERC20 {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to add the constructor function, so we can assign values to the &lt;strong&gt;name&lt;/strong&gt; and &lt;strong&gt;symbol&lt;/strong&gt; properties, and also mint some starting tokens on the smart contract creation. You can choose to either mint a specific quantity of your token on the contract creation, with no possibility to mint more than the initial supply, or create a function so you can mint on demand. It depends on your strategy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pragma solidity ^0.8.7;

import 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol';

contract CakeCoin is ERC20 {
    address public owner;

    constructor() ERC20('CakeCoin', 'CAKE') {
        _mint(msg.sender, 100000 * 10 ** 18);
        owner = msg.sender;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we defined our token as CakeCoin, with its symbol being CAKE. We also set some initial coins, defined 18 decimals and registered the owner address, so we can create functions like mint which can only be used by the contract creator. Now let's create the mint function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pragma solidity ^0.8.7;

import 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol';

contract CakeCoin is ERC20 {
    address public owner;

    constructor() ERC20('CakeCoin', 'CAKE') {
        _mint(msg.sender, 100000 * 10 ** 18);
        owner = msg.sender;
    }

    function mint(address to, uint amount) external {
        require(msg.sender == owner, "Only the coin owner can mint more coins");
        _mint(to, amount);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the mint function, the contract owner can mint new tokens and send it to any address. That's it for the basic funcionalities of our token, but you can create any other functionality to interact with it as you want. Sky is the limit :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-the-smart-contract-to-a-local-development-blockchain"&gt;
  &lt;/a&gt;
  Deploying the smart contract to a local development blockchain
&lt;/h2&gt;

&lt;p&gt;To test our smart contract, we can deploy it to a local development blockchain with Remix as the example below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D-avoq-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecyvhk0t6uh04mbk2hna.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D-avoq-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecyvhk0t6uh04mbk2hna.png" alt="Local Development Environment" width="368" height="418"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just set the environment to JavaScript VM (London), choose any test account and click deploy. After that, if your contract doesn't have any errors, you will be able to interact with your smart contract. You can see that we can use not only our functions, but also every function inherited from the ERC-20 smart contract.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AzrQ83az--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhe3d8kwczpidsmrb4ix.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AzrQ83az--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhe3d8kwczpidsmrb4ix.png" alt="Contract Functions" width="302" height="870"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-the-contract-to-the-mainnet"&gt;
  &lt;/a&gt;
  Deploying the contract to the mainnet
&lt;/h2&gt;

&lt;p&gt;We can also deploy our contract in the Ethereum mainnet with Remix, but you'll need MetaMask and some funds to pay for the fees.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SezZy8sk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0ady8xczzszby63tsdi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SezZy8sk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0ady8xczzszby63tsdi.png" alt="Mainnet Environment" width="303" height="429"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the deployment we'll select the Injected Web3 option, which will trigger a MetaMask popup to connect your account. After that, we'll need to pick the correct account and click deploy.&lt;/p&gt;

&lt;p&gt;Thats it folks, hope you enjoyed the tutorial and reach me out if you have any questions!&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Steering your submarine with Elixir, Leex and Yecc (AoC'21, day 2)</title>
      <author>Paweł Świątkowski</author>
      <pubDate>Thu, 02 Dec 2021 22:22:46 +0000</pubDate>
      <link>https://dev.to/katafrakt/steering-your-submarine-with-elixir-leex-and-yecc-aoc21-day-2-d7j</link>
      <guid>https://dev.to/katafrakt/steering-your-submarine-with-elixir-leex-and-yecc-aoc21-day-2-d7j</guid>
      <description>&lt;p&gt;After &lt;a href="https://katafrakt.me/2020/12/02/aoc2-with-parslet/"&gt;solving a Advent of Code challenge&lt;/a&gt; by treating the input as a program last year, I wanted more this year. The opportunity came today and I decided to take it. Instead of Parlet and Ruby, though, I decided to use Elixir/Erlang tooling to get the job done.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;In &lt;a href="https://adventofcode.com/2021/day/2"&gt;the Day 2 this year&lt;/a&gt; you need to pilot your submarine. This is done by a series of commands, such as this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;forward 5
down 5
forward 8
up 3
down 8
forward 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have a command, followed by a number - one pair per line. There are three commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;forward&lt;/code&gt; moves the submarine horizontally by &lt;code&gt;number&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;down&lt;/code&gt; moves it down, &lt;strong&gt;increasing the depth&lt;/strong&gt; we're at&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;up&lt;/code&gt; does exactly the opposite of &lt;code&gt;down&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A series of commands - that's a program! To execute it, we need basically 3 things: a lexer, a parser and an interpreter. Fortunately, Elixir gives us a tooling for first two for free, and the last one is easy. Let's do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#lexer"&gt;
  &lt;/a&gt;
  Lexer
&lt;/h3&gt;

&lt;p&gt;We are going to start with creating a new mix project with &lt;code&gt;mix new submarine_lang&lt;/code&gt;. Our first step will be to create a lexer, which will tokenize the input. This is what I put in &lt;code&gt;src/lexer.xrl&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Definitions.
FORWARD       = (forward)
UP            = (up)
DOWN          = (down)
WHITESPACE    = [\s\t\n]
DIGITS        = [0-9]+

Rules.
{WHITESPACE} : skip_token.
{FORWARD}    : {token, {move, forward}}.
{UP}         : {token, {move, up}}.
{DOWN}       : {token, {move, down}}.
{DIGITS}     : {token, {number, list_to_integer(TokenChars)}}.

Erlang code.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This lexer is not perfect. It could me more strict, for example to not allow two commands in the same line, but it serves its purpose for this task, while at the same time remains relatively simple. We basically have three commands, a number (&lt;code&gt;DIGITS&lt;/code&gt;) and whitespace.&lt;/p&gt;

&lt;p&gt;Let's take our parser for a test drive then, with &lt;code&gt;iex -S mix&lt;/code&gt;. The important thing to remember is that Leex only takes Erlang strings as inputs, so you either have to use single-quoted strings or use &lt;code&gt;to_charlist&lt;/code&gt; method from &lt;code&gt;Elixir.Kernel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here are some examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Interactive Elixir (1.12.2) - press Ctrl+C to exit (type h() ENTER for help)
iex(1)&amp;gt; :lexer.string('forward 5')
{:ok, [move: :forward, number: 5], 1}
iex(2)&amp;gt; :lexer.string('forward 5\ndown 1\ndown 100')
{:ok,
 [move: :forward, number: 5, move: :down, number: 1, move: :down, number: 100],
 3}
iex(3)&amp;gt; :lexer.string('backward 6')                 
{:error, {1, :lexer, {:illegal, 'b'}}, 1}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that since the result is a list of tuples with two elements, &lt;code&gt;iex&lt;/code&gt; displays it as a keyword list (because that's what a keyword list is).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parser"&gt;
  &lt;/a&gt;
  Parser
&lt;/h3&gt;

&lt;p&gt;Since the lexing/tokenizing part is done, we are now going to move on to parser, which will put some basic meaning into our tokens. The parser will reside in &lt;code&gt;src/parser.yrl&lt;/code&gt; and it is really simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Nonterminals command command_list.
Terminals number move.
Rootsymbol command_list.

command      -&amp;gt; move number : {'$1', '$2'}.
command_list -&amp;gt; command : ['$1'].
command_list -&amp;gt; command command_list : ['$1' | '$2'].
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have two terminal symbols, two non-terminal to group them and a non-terminal &lt;code&gt;command_list&lt;/code&gt; should be the root. Let's test it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex(1)&amp;gt; {:ok, tokens, _} = :lexer.string('forward 5\ndown 1\ndown 100')
{:ok,
 [move: :forward, number: 5, move: :down, number: 1, move: :down, number: 100],
 3}
iex(2)&amp;gt; :parser.parse(tokens)
{:ok,
 [
   {{:move, :forward}, {:number, 5}},
   {{:move, :down}, {:number, 1}},
   {{:move, :down}, {:number, 100}}
 ]}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, nice. We have a list of tuples, where each one of them contains two other tuples - a &lt;code&gt;move&lt;/code&gt; command and a &lt;code&gt;number&lt;/code&gt;. With that, we can move on to a very basic interpreter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interpreter"&gt;
  &lt;/a&gt;
  Interpreter
&lt;/h3&gt;

&lt;p&gt;We have the semiotic part done, now let's add some semantic into it. Our interpreter is going to just take a list of commands and apply them one by one, along with some representation of context or state. This is exactly what &lt;code&gt;Enum.reduce&lt;/code&gt; does and so we are going to use it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;SubmarineLang&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;eval_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;
      &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read!&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;to_charlist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:lexer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;when&lt;/span&gt; &lt;span class="n"&gt;is_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;({{&lt;/span&gt;&lt;span class="ss"&gt;:move&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:forward&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;({{&lt;/span&gt;&lt;span class="ss"&gt;:move&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:down&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;({{&lt;/span&gt;&lt;span class="ss"&gt;:move&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:up&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is it. When we run the interpreter, it will go through the commands one by one and adjust the context (a tuple with horizontal position and a depth) accordingly. The result will be such a tuple after applying all the commands. All that's left is to multiply first element by the second.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-second-part"&gt;
  &lt;/a&gt;
  The second part
&lt;/h3&gt;

&lt;p&gt;I'm not going to go into details about second part, but there the meaning of each command changes - now it makes a different modification to the context. Therefore you need to change the interpreter and only the interpreter.&lt;/p&gt;

&lt;p&gt;My complete solution is &lt;a href="https://github.com/katafrakt/advent_of_code_2021/tree/947c28f223d089c5996a3f4ce05cabaa15c9ed69/02"&gt;available on Github&lt;/a&gt;, if you want to take a look.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-reading"&gt;
  &lt;/a&gt;
  Some reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://programmer.help/blogs/erlang-elixir-using-leex-and-yecc-parsing-domain-language-dsl.html"&gt;Erlang/Elixir: Using Leex and Yecc Parsing Domain Language (DSL)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pl-rants.net/posts/leex-yecc-in-elixir/"&gt;Using Leex and Yecc in Elixir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>adventofcode</category>
      <category>elixir</category>
      <category>programming</category>
    </item>
    <item>
      <title>Would you opt to have your consciousness live forever on a computer? Tell us for an upcoming episode of our podcast! 🎧  </title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Thu, 02 Dec 2021 21:50:50 +0000</pubDate>
      <link>https://dev.to/devteam/would-you-want-to-have-your-consciousness-live-forever-on-a-computer-tell-us-for-an-upcoming-episode-of-our-podcast-2je3</link>
      <guid>https://dev.to/devteam/would-you-want-to-have-your-consciousness-live-forever-on-a-computer-tell-us-for-an-upcoming-episode-of-our-podcast-2je3</guid>
      <description>&lt;p&gt;The &lt;a href="//dev.to/devdiscuss"&gt;DevDiscuss Podcast&lt;/a&gt; begins with an interview and ends with commentary from listeners — and we like to feature the &lt;em&gt;actual&lt;/em&gt; voices from our community!&lt;/p&gt;

&lt;p&gt;To inform an upcoming episode of the show, we'd like to know...&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#would-you-optin-to-have-your-consciousness-live-forever-on-a-computer-why-or-why-not"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Would you opt-in to have your consciousness live forever on a computer? Why or why not?&lt;/strong&gt;
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;For your chance to hear your actual comments on an upcoming episode, answer the question above by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Calling our Google Voice at +1 (929)500-1513 and leave a message 📞&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sending a voice memo to &lt;a href="mailto:pod@dev.to"&gt;pod@dev.to&lt;/a&gt; 🎙&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OR, leaving a comment here (we'll read your response aloud for you) 🗣&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please send in your recordings by Wednesday, December 8th at 9 AM, ET (1 PM UTC, 6 AM PT)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#voice-recordings-will-be-given-priority-placement"&gt;
  &lt;/a&gt;
  Voice recordings will be given priority placement 😉
&lt;/h4&gt;

&lt;p&gt;Catch up on recent episodes of the show &lt;a href="https://dev.to/devdiscuss"&gt;here&lt;/a&gt; 👀  &lt;/p&gt;

</description>
      <category>podcast</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Computer Network Concepts - The one and only guide you need</title>
      <author>WEI FENG</author>
      <pubDate>Thu, 02 Dec 2021 21:47:59 +0000</pubDate>
      <link>https://dev.to/weifengnusceg/computer-network-concepts-the-one-and-only-guide-you-need-5d2k</link>
      <guid>https://dev.to/weifengnusceg/computer-network-concepts-the-one-and-only-guide-you-need-5d2k</guid>
      <description>&lt;p&gt;"To become a Web Frontend Developer, we can never survive without Computer network knowledges. Frontend is never solely about Javascript or CSS. We work closely with network protocol and http request daily"&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#c1"&gt;1. Common HTTP request that we will use&lt;/a&gt;&lt;br&gt;
&lt;a href="#c2"&gt;2. Inheritable and non-inheritable properties in CSS&lt;/a&gt;&lt;br&gt;
&lt;a href="#c3"&gt;3. HTTP respond Header &lt;/a&gt;&lt;br&gt;
&lt;a href="#c4"&gt;4. Common HTTP respond status code &lt;/a&gt;&lt;br&gt;
&lt;a href="#c5"&gt;5. Key differences between HTTP=1.0, HTTP=1.1, 2.0 &lt;/a&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
In progress.....&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-common-http-request-that-we-will-use"&gt;
  &lt;/a&gt;
  1. Common HTTP request that we will use &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/tags/ref_httpmethods.asp"&gt;&amp;gt; - What is HTTP? Refer to the W3school for full detail&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Hypertext Transfer Protocol (HTTP) is designed to enable communications between clients and servers.&lt;br&gt;
HTTP works as a request-response protocol between a client and server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Method&lt;/th&gt;
&lt;th&gt;Explaination&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GET:&lt;/td&gt;
&lt;td&gt;GET is used to request data from a specified resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;POST：&lt;/td&gt;
&lt;td&gt;POST is used to send data to a server to create/update a resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PUT：&lt;/td&gt;
&lt;td&gt;PUT is used to send data to a server to create/update a resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE：&lt;/td&gt;
&lt;td&gt;The DELETE method deletes the specified resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HEAD：&lt;/td&gt;
&lt;td&gt;HEAD is almost identical to GET, but without the response body.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OPTIONS：&lt;/td&gt;
&lt;td&gt;The OPTIONS method describes the communication options for the target resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Difference between GET and POST&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QaZjbIQc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pu56k3mu60kjbmsowwgi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QaZjbIQc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pu56k3mu60kjbmsowwgi.png" alt="Image description" width="880" height="972"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-http-request-header"&gt;
  &lt;/a&gt;
  2. HTTP request Header &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/HTTP_header"&gt;Refer to this documentation&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;GET&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="nx"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt; 

&lt;span class="c1"&gt;// Http method, path of the resource, protocol &lt;/span&gt;

&lt;span class="nx"&gt;Host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;developer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mozilla&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;org&lt;/span&gt;

&lt;span class="c1"&gt;// Domain of the current page who sends the request&lt;/span&gt;

&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Agent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Mozilla&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;5.0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Macintosh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;Intel&lt;/span&gt; &lt;span class="nx"&gt;Mac&lt;/span&gt; &lt;span class="nx"&gt;OS&lt;/span&gt; &lt;span class="nx"&gt;X&lt;/span&gt; &lt;span class="mf"&gt;10.9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;rv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;50.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Gecko&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20100101&lt;/span&gt; &lt;span class="nx"&gt;Firefox&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;50.0&lt;/span&gt;

&lt;span class="c1"&gt;// Browser'user Proxy &lt;/span&gt;

&lt;span class="nx"&gt;Accept&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;xhtml&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;

&lt;span class="c1"&gt;//accepted content type for the browser&lt;/span&gt;

&lt;span class="nx"&gt;Accept&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;en&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;US&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;en&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt; 

&lt;span class="c1"&gt;//accept language for the browser&lt;/span&gt;

&lt;span class="nx"&gt;Accept&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Encoding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;gzip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deflate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;br&lt;/span&gt; 

&lt;span class="c1"&gt;//accepted encoding method&lt;/span&gt;

&lt;span class="nx"&gt;Referer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//developer.mozilla.org/testpage.html&lt;/span&gt;

&lt;span class="c1"&gt;//the URL that make the request&lt;/span&gt;

&lt;span class="nx"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;keep&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;alive&lt;/span&gt; 

&lt;span class="c1"&gt;//the connection type between sever and client&lt;/span&gt;

&lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Modified&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Since&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Mon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="nx"&gt;Jul&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt; &lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt; &lt;span class="nx"&gt;GMT&lt;/span&gt;
&lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c561c68d0ba92bbeb8b0fff2a9199f722e3a621a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;Cache&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;//for cache control&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-http-respond-header"&gt;
  &lt;/a&gt;
  3. HTTP respond Header &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="nx"&gt;OK&lt;/span&gt;

&lt;span class="c1"&gt;// HTTP response status codes, short description&lt;/span&gt;

&lt;span class="nx"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Allow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="c1"&gt;// CORS&lt;/span&gt;

&lt;span class="nx"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Keep&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Alive&lt;/span&gt;

&lt;span class="c1"&gt;//connection type&lt;/span&gt;

&lt;span class="nx"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;utf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;

&lt;span class="c1"&gt;// document type&lt;/span&gt;

&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Mon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="nx"&gt;Jul&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="nx"&gt;GMT&lt;/span&gt;

&lt;span class="c1"&gt;//responding time&lt;/span&gt;

&lt;span class="nx"&gt;Etag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c561c68d0ba92bbeb8b0f612a9199f722e3a621a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;Last&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Modified&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Mon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="nx"&gt;Jul&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt; &lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt; &lt;span class="nx"&gt;GMT&lt;/span&gt;
&lt;span class="c1"&gt;//for cache control&lt;/span&gt;

&lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Cookie&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mykey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;myvalue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;expires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;Mon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Jul&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="nx"&gt;GMT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;Max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;31449600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sr"&gt;/; secur&lt;/span&gt;&lt;span class="err"&gt;e
&lt;/span&gt;
&lt;span class="c1"&gt;// set cookie expire time and other related information&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-common-http-respond-status-code"&gt;
  &lt;/a&gt;
  4. Common HTTP respond status code &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#successful_responses"&gt;Refer to this documentation for details&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Successful responses&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 200 OK&lt;/strong&gt;&lt;br&gt;
The request succeeded. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 204 No Content&lt;/strong&gt;&lt;br&gt;
There is no content to send for this request, but the headers may be useful. The user agent may update its cached headers for this resource with the new ones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 206 Partial Content&lt;/strong&gt;&lt;br&gt;
This response code is used when the Range header is sent from the client to request only part of a resource.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redirection messages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 301 Moved Permanently&lt;/strong&gt;&lt;br&gt;
The URL of the requested resource has been changed permanently. The new URL is given in the response.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 304 Not Modified&lt;/strong&gt;&lt;br&gt;
This is used for caching purposes. It tells the client that the response has not been modified, so the client can continue to use the same cached version of the response.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Client error responses&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 400 Bad Request&lt;/strong&gt;&lt;br&gt;
The server could not understand the request due to invalid syntax.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 401 Unauthorized&lt;/strong&gt;&lt;br&gt;
Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 403 Forbidden&lt;/strong&gt;&lt;br&gt;
The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 404 Not Found&lt;/strong&gt;&lt;br&gt;
The server can not find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Server error responses&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 500 Internal Server Error&lt;/strong&gt;&lt;br&gt;
The server has encountered a situation it does not know how to handle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 501 Not Implemented&lt;/strong&gt;&lt;br&gt;
The request method is not supported by the server and cannot be handled. The only methods that servers are required to support (and therefore that must not return this code) are GET and HEAD.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 502 Bad Gateway&lt;/strong&gt;&lt;br&gt;
This error response means that the server, while working as a gateway to get a response needed to handle the request, got an invalid response.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 503 Service Unavailable&lt;/strong&gt;&lt;br&gt;
The server is not ready to handle the request. Common causes are a server that is down for maintenance or that is overloaded.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-key-differences-between-http10-http11-20"&gt;
  &lt;/a&gt;
  5. Key differences between HTTP=1.0, HTTP=1.1, 2.0 &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://programmerall.com/article/6663649849/"&gt;Refer to the full article here&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1. PersistentConnection&lt;/strong&gt;&lt;br&gt;
HTTP 1.0 stipulates that the browser and the server only maintain a short connection. The server immediately disconnects the TCP connection after processing the request.&lt;/p&gt;

&lt;p&gt;HTTP 1.1 supports Persistent Connection, andLong connection is used by default.For HTTP 1.1 long connections, new request headers need to be added to help achieve this. The value of the Connection request header is Keep-Alive, the client informs the server to keep the connection after returning the result of this request; the value of the Connection request header is close When, the client notifies the server to close the connection after returning the result of this request.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.Pipelining&lt;/strong&gt;&lt;br&gt;
　　 Request pipeline (Pipelining) processing, multiple HTTP requests and responses can be transmitted on a TCP connection, reducing the consumption and delay of establishing and closing connections.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.host field:&lt;/strong&gt;&lt;br&gt;
　　 In HTTP1.0, it is believed that each server is bound to a unique IP address. Therefore, the URL in the request message does not convey the hostname. But with the development of virtual host technology, there can be multiple virtual hosts (Multi-homed Web Servers) on a physical server, and they share an IP address. With the host field HTTP1.1 can send request to different host on the same server&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.Bandwidth optimization:&lt;/strong&gt;&lt;br&gt;
　　 In HTTP/1.0, there are some phenomena of wasting bandwidth. For example, the client only needs a part of an object, but the server sends the entire object.&lt;/p&gt;

&lt;p&gt;　　 The range header field is introduced in the request message in HTTP/1.1,It allows to request only certain part of the resource. If the server correspondingly returns the content requested by the object, the response code is 206 (Partial Content), which can prevent the Cache from mistaking the response as a complete object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.Cache:&lt;/strong&gt;&lt;br&gt;
    HTTP/1.1 adds the Cache-Control header field which supports an extensible instruction subset: for example, the max-age instruction supports relative timestamp.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTP 2.0&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.Multiplexing:&lt;/strong&gt;&lt;br&gt;
　　 HTTP 2.0 uses multiplexing technology to process multiple requests concurrently on the same connection, and the number of concurrent requests is several orders of magnitude larger than HTTP 1.1.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.data compression:&lt;/strong&gt;&lt;br&gt;
　　 HTTP 1.1 does not support header data compression, HTTP 2.0 uses HPACK algorithm to compress header data, so that the data volume is smaller and the transmission on the network will be faster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.Server push:&lt;/strong&gt;&lt;br&gt;
　　 When we request data from a web server that supports HTTP2.0, the server will push some resources needed by the client to the client by the way, so that the client will not create a connection again and send a request to the server to obtain it. This method is very suitable for loading static resources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.Binary framing:&lt;/strong&gt;&lt;br&gt;
　　 HTTP/2 adds a binary framing layer between the application layer (HTTP/2) and the transport layer (TCP or UDP).&lt;br&gt;
　　 Without changing the semantics, methods, status codes, URI and header fields of HTTP/1.x, it solves the performance limitations of HTTP 1.1, improves transmission performance, and achieves low latency and high throughput.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>computerscience</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to add Lottie animations to SwiftUI</title>
      <author>Kevin Furjan</author>
      <pubDate>Thu, 02 Dec 2021 21:18:06 +0000</pubDate>
      <link>https://dev.to/kfurjan/how-to-add-lottie-animations-to-swiftui-1j22</link>
      <guid>https://dev.to/kfurjan/how-to-add-lottie-animations-to-swiftui-1j22</guid>
      <description>&lt;p&gt;Using Lottie animations is an easy and popular way to add animations to your app to have that modern look and feel. All sorts of companies use Lottie animations, from startups all the way to the big boys, such as Google, Microsoft, Spotify, and Netflix to name the few.&lt;/p&gt;

&lt;p&gt;Using LottieFiles you have a choice to make your own animations using &lt;a href="https://lottiefiles.com/editor"&gt;Lottie Editor&lt;/a&gt;, buying animations from creators on &lt;a href="https://lottiefiles.com/marketplace"&gt;Lottie Marketplace&lt;/a&gt; or using &lt;a href="https://lottiefiles.com/featured"&gt;Free Animations&lt;/a&gt; to get LottieFile(s) completely free of charge to add them into you project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uikit-and-swiftui-interoperability"&gt;
  &lt;/a&gt;
  UIKit and SwiftUI interoperability
&lt;/h2&gt;

&lt;p&gt;Unfortunately, Lottie animations cannot be added directly to SwiftUI view without some work prior to that. In order to add Lottie animation to SwiftUI, you need to implement &lt;code&gt;UIViewRepresentable&lt;/code&gt; protocol which is a wrapper for a UIKit view that you use to integrate Lottie view into your SwiftUI view hierarchy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-me-the-code"&gt;
  &lt;/a&gt;
  Show me the code
&lt;/h2&gt;

&lt;p&gt;Let's get straight to the point, just make sure you &lt;a href="https://github.com/airbnb/lottie-ios#installing-lottie"&gt;previously installed&lt;/a&gt;  &lt;code&gt;lottie-ios&lt;/code&gt; library using your preferred package manager, whether it is CocoaPods, Carthage or Swift Package Manager.&lt;/p&gt;

&lt;p&gt;Add new file name LottieView and add following contents:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Lottie&lt;/span&gt;
&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;SwiftUI&lt;/span&gt;

&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;LottieView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIViewRepresentable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;animationView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;AnimationView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;makeUIView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIViewRepresentableContext&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;LottieView&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;UIView&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;UIView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;animation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Animation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;named&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contentMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scaleAspectFill&lt;/span&gt;
        &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loopMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;

        &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addSubview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="kt"&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heightAnchor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heightAnchor&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widthAnchor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widthAnchor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;updateUIView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;uiView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIViewType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIViewRepresentableContext&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;LottieView&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All you need to do know is add following code to your SwiftUI view: &lt;code&gt;LottieView(fileName: "your-file-name")&lt;/code&gt; and that's it, you have fully functioning Lottie animation inside SwiftUI view. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-make-it-to-play-or-pause"&gt;
  &lt;/a&gt;
  How do I make it to play or pause
&lt;/h2&gt;

&lt;p&gt;In order to make animation play or pause, a bit more coding is required. It is required to provide &lt;em&gt;Coordinator&lt;/em&gt; to your LottieView. &lt;/p&gt;

&lt;p&gt;What is &lt;em&gt;Coordinator&lt;/em&gt;? Let's see what Apple says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The system doesn’t automatically communicate changes occurring within your view to other parts of your SwiftUI interface. When you want your view to coordinate with other SwiftUI views, you must provide a Coordinator instance to facilitate those interactions. For example, you use a coordinator to forward target-action and delegate messages from your view to any SwiftUI views.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's see updated code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Lottie&lt;/span&gt;
&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;SwiftUI&lt;/span&gt;

&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;LottieView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIViewRepresentable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;isEnabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;animationView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;AnimationView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;makeUIView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIViewRepresentableContext&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;LottieView&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;UIView&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;UIView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;animation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Animation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;named&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contentMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scaleAspectFill&lt;/span&gt;
        &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loopMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;

        &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addSubview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="kt"&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heightAnchor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heightAnchor&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widthAnchor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widthAnchor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;updateUIView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;uiView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIViewType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIViewRepresentableContext&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;LottieView&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;isEnabled&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coordinator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;play&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coordinator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;animationView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Coordinator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;LottieView&lt;/span&gt;

        &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;LottieView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;makeCoordinator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Coordinator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;Coordinator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is it! You can now pass &lt;code&gt;isEnabled&lt;/code&gt; &lt;em&gt;Bool&lt;/em&gt; value to LottieView to make it play or pause.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#one-final-gotcha"&gt;
  &lt;/a&gt;
  One final gotcha
&lt;/h2&gt;

&lt;p&gt;If you are using &lt;a href="https://developer.apple.com/documentation/swiftui/tabview"&gt;TabView&lt;/a&gt; withing your SwiftUI application and you are switching between tabs you will notice that animations won't start playing automatically when you switch back to view with animations.&lt;/p&gt;

&lt;p&gt;All you must do is add &lt;code&gt;animationView.backgroundBehavior = .pauseAndRestore&lt;/code&gt; to &lt;code&gt;makeUIView(context:)&lt;/code&gt; method. Now animations will &lt;em&gt;pause and restore&lt;/em&gt; as the code itself suggests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thank you for reading and I hope this article was useful to you! In conclusion, this article went over how to add Lottie animation(s) to SwiftUI view, make it reactive if needed and how to use Lottie animations with TabView.&lt;/p&gt;




&lt;p&gt;If you like my content and find it useful, please consider following me here on DEV Community. If you are feeling extra generous, please consider &lt;a href="https://buymeacoffee.com/kfurjan"&gt;buying me a coffee&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Connect with me on &lt;a href="https://www.linkedin.com/in/kevin-furjan/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>ios</category>
      <category>swift</category>
      <category>ux</category>
      <category>design</category>
    </item>
    <item>
      <title>Starting with tailwind css from scratch</title>
      <author>Bingeh Afumbom</author>
      <pubDate>Thu, 02 Dec 2021 21:12:14 +0000</pubDate>
      <link>https://dev.to/elabrava20/starting-with-tailwind-css-from-scratch-3hfb</link>
      <guid>https://dev.to/elabrava20/starting-with-tailwind-css-from-scratch-3hfb</guid>
      <description>&lt;p&gt;Starting with a new framework can be really tedious sometimes. Don't get me started about the starter files you have to build. &lt;/p&gt;

&lt;p&gt;In this article, I'll show you how to set up tailwind css easy peasy, without having to dig too much through the internet. We'll start from making sure you have node installed in your computer, easy/awesome terminal tricks, right down to making sure you are set to start using tailwind in your code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-for-node-in-your-computer"&gt;
  &lt;/a&gt;
  Check for node in your computer
&lt;/h2&gt;

&lt;p&gt;Side note: You do not need any knowledge of node to use tailwind. We'll just use it for necessary installations.&lt;/p&gt;

&lt;p&gt;To check if you already have node installed, then run the following command in your terminal.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;node -v&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If node was previously installed, then it should display the current version after you hit enter. If it wasn't, then you'll have to install node. You can get it for whatever OS you are using from &lt;a href="https://nodejs.org/en/"&gt;this website&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What next?
&lt;/h2&gt;

&lt;p&gt;After installing node, check the version again just to be sure. Use the first terminal command above to do so.&lt;/p&gt;

&lt;p&gt;Our node is in place (Let's assume that you installed without much struggle lol), we'll get started by creating project folders. There's a really neat way to do this through the terminal. It's faster, and I personally think it's fun...?&lt;/p&gt;

&lt;p&gt;Start by creating a folder. We'll call it tailwind. In your terminal, type &lt;code&gt;mkdir tailwind&lt;/code&gt; and hit enter. After this folder has been created we have to enter it. Do this by typing &lt;code&gt;cd tailwind&lt;/code&gt; where cd means change directory.&lt;/p&gt;

&lt;p&gt;Then we want to make a project folder in this tailwind folder. We say &lt;code&gt;mkdir project1&lt;/code&gt; again, and then &lt;code&gt;cd project1&lt;/code&gt;. To ensure that these folders are indeed being created, trying finding them on your computer.&lt;/p&gt;

&lt;p&gt;To summarize the commands we've used...&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mkdir tailwind&lt;/code&gt;&lt;br&gt;
&lt;code&gt;cd tailwind&lt;/code&gt;&lt;br&gt;
&lt;code&gt;mkdir project1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;cd project1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The last command on your terminal should be something like this... &lt;/p&gt;

&lt;p&gt;&lt;code&gt;njong@njong-Latitude-E6440:~/tailwind/project1$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Disclaimer: I use Linux, specifically ubuntu as an OS. But the directives are pretty much the same in Windows, so do not worry.&lt;/p&gt;

&lt;p&gt;In order for us to open this folder in vscode directly from the terminal, we add &lt;code&gt;code&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt; like this&lt;/p&gt;

&lt;p&gt;&lt;code&gt;njong@njong-Latitude-E6440:~/tailwind/project1$ code .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The dot is telling the terminal to open the folder project1 in vscode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-we-done-yet"&gt;
  &lt;/a&gt;
  Are we done yet?
&lt;/h2&gt;

&lt;p&gt;Not quite. But almost, I promise. Your IDE should have opened by now, and your workspace should be in the project1 folder. This is where everything gets real.&lt;/p&gt;

&lt;p&gt;Click terminal on vscode access tool bar, and chose new terminal. We want to create a .json file. In your vscode terminal, type,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm init -y&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After pressing enter, you should see a package.json file added to your explorer tab. Open it, and it should look something like this;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eom-i21U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ct89eqkv8wjv6ya81xrv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eom-i21U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ct89eqkv8wjv6ya81xrv.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After creating the package.json file, you actually want to install tailwind. In your terminal, type;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install tailwindcss&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Check your package.json file again, and you'll see that a dependency has been included. Also notice on the explorer tab, a new folder called node_modules has been created. Don't let the contents scare you, as you will rarely ever have to work with this folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---GDVx6c0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y34lpkca8d8qc9g1maob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---GDVx6c0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y34lpkca8d8qc9g1maob.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to fully comprehend tailwind, we'll need to create two more folders. A source folder, and a public folder. The source folder is where we want to keep any other css styles we might need for our project. Between the source and and public folder, we have tailwind. Whenever we change a style in the source folder, tailwind will need to process those changes and output them to a certain file in the public folder. This is what our index.html file will then use. I hope the image below clarifies this paragraph by a bit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I2h3Lx9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0g3f182dl5xp157xl4a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I2h3Lx9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0g3f182dl5xp157xl4a.png" alt="Image description" width="500" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, go ahead and create two folders. Name one &lt;code&gt;src&lt;/code&gt;, and the other one &lt;code&gt;public&lt;/code&gt;. In the src folder, create a file, and name it &lt;code&gt;style.css&lt;/code&gt;. Add the following lines to the styles.css file you just created.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@tailwind base;&lt;br&gt;
@tailwind components;&lt;br&gt;
@tailwind utilities;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will inject the the base, component, and utility styles. Navigate back to your package.json file, and change the test script inside the scripts braces to,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;"build-css":"tailwindcss build src/styles.css -o public/styles.css"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This basically means that when we build in the styles.css file of the src folder, we want to process and output in a certain styles.css folder which will be automatically created in the public folder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#one-step-away"&gt;
  &lt;/a&gt;
  One step away...
&lt;/h2&gt;

&lt;p&gt;We are one step away from finally setting up our tailwind for use. Save the changes you've made to the package.json file, and dive back into your terminal. We need to run this script, and it will install all the tailwind dependencies for us in the styles.css file, which will be created in the public folder. To run a script,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm run (script-name)&lt;/code&gt;. In this case, we type &lt;code&gt;npm run build-css&lt;/code&gt;. Hit enter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qevu-HME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azt4x0wr7jipysiepm8t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qevu-HME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azt4x0wr7jipysiepm8t.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ladies and gentlemen, you have officially set up tailwind for use. As you can see, a styles.css file was created in the public folder and you can now see the utility classes you'll be using, in that file. You can start by working with these utility classes in an index.html file that you will create.&lt;/p&gt;

&lt;p&gt;Remember that if we were to add normal css styling to our src/styles.css, we would need to run the script again, so that it affects our public/styles.css and hence, our index.html.&lt;/p&gt;

&lt;p&gt;If you found this article useful, please share. Feel free to  connect with me on &lt;a href="https://twitter.com/ELabrava20"&gt;twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>css</category>
    </item>
    <item>
      <title>Optimising Code - The Devil Lies In the Details</title>
      <author>Maximilian</author>
      <pubDate>Thu, 02 Dec 2021 20:45:18 +0000</pubDate>
      <link>https://dev.to/librapid/optimising-code-the-devil-lies-in-the-details-4j78</link>
      <guid>https://dev.to/librapid/optimising-code-the-devil-lies-in-the-details-4j78</guid>
      <description>&lt;p&gt;Optimising code for high performance can be exhausting; where can you squeeze that last bit of speed out of your code? How can you be faster than that one piece of code you found online?&lt;/p&gt;

&lt;p&gt;For that, let's take a look at the following example of our &lt;a href="https://github.com/LibRapid/"&gt;Rust crate&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;f64&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;MathVector&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;f64&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;MathVector&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                 &lt;span class="n"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="nf"&gt;.len&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                 &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="nf"&gt;.sqrt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Among other things - like the for loop for example - one thing is the problem. Can you spot it? The answer is: &lt;code&gt;len.sqrt()&lt;/code&gt;. Getting the square root of a number is performance-wise extremely expensive - how should we get rid of it? You might guess, that we could implement something like the infamous "&lt;a href="https://en.wikipedia.org/wiki/Fast_inverse_square_root"&gt;Fast inverse square root&lt;/a&gt;" algorithm from Quake III. This has one problem though: It's inaccurate. And for something like mathematical applications, this is sometimes &lt;strong&gt;very&lt;/strong&gt; unwanted. So we need to solve this in another way.&lt;br&gt;
I got it: Why don't we calculate it only when the value is actually needed? Let's do it!&lt;br&gt;
But firstly, we need to find a value for this field which &lt;em&gt;cannot&lt;/em&gt; be occupied by pure chance. 0 is no candidate, as a vector may have the length 0. But what about a negative length? That sounds good. You are not able to have a negative length of a vector because of the nature of mathematics; the length of a vector is calculated by the sum of the squares of all values, and then taking the square root. As the value of a square root is - by definition - never negative, we can say with confidence that a negative number is ideal. Let's take -1.&lt;br&gt;
Now we need to generate a new getter for the field &lt;code&gt;length&lt;/code&gt;, which only calculates it when actually needed. The code looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;f64&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0f64&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;true&lt;/span&gt;  &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;f64&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0f64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
                  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.values&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                      &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                   &lt;span class="p"&gt;}&lt;/span&gt;
                   &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                 &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;false&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can clearly see, we check if the length is already set using the logic from our thought; if so, we can just return that. If it is -1 (or some other negative value), we just calculate the length, store it and return the newly calculated length.&lt;br&gt;
And that's it! With just a few more lines of code, we removed unneccessary computations by calculating something only when it is needed. Feel inspired to apply that whereever you can!&lt;/p&gt;

</description>
      <category>optimisation</category>
      <category>rust</category>
      <category>mathematics</category>
      <category>maths</category>
    </item>
    <item>
      <title>Jack Dorsey Resigns, Apple Self-Repair, the Threat of Post-Quantum Cryptography, &amp; more on DevNews!</title>
      <author>dev.to staff</author>
      <pubDate>Thu, 02 Dec 2021 20:36:48 +0000</pubDate>
      <link>https://dev.to/devteam/jack-dorsey-resigns-apple-self-repair-the-threat-of-post-quantum-cryptography-more-on-devnews-3pmb</link>
      <guid>https://dev.to/devteam/jack-dorsey-resigns-apple-self-repair-the-threat-of-post-quantum-cryptography-more-on-devnews-3pmb</guid>
      <description>&lt;p&gt;Is our cryptography ready for the quantum leap? We'll talk about that and more in this week's episode of DevNews 👀 &lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devnews/s6-e5-jack-dorsey-resigns-apple-self-repair-and-the-threat-of-post-quantum-cryptography"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S6:E5 - Jack Dorsey Resigns, Apple Self-Repair, and the Threat of Post-Quantum Cryptography&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devnews"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevNews
      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s6-e5-jack-dorsey-resigns-apple-self-repair-and-the-threat-of-post-quantum-cryptography" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s6-e5-jack-dorsey-resigns-apple-self-repair-and-the-threat-of-post-quantum-cryptography" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s6-e5-jack-dorsey-resigns-apple-self-repair-and-the-threat-of-post-quantum-cryptography" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s6-e5-jack-dorsey-resigns-apple-self-repair-and-the-threat-of-post-quantum-cryptography" alt="DevNews" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJPvwj98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XOSCOlKI--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s6-e5-jack-dorsey-resigns-apple-self-repair-and-the-threat-of-post-quantum-cryptography"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devnews/s6-e5-jack-dorsey-resigns-apple-self-repair-and-the-threat-of-post-quantum-cryptography"&gt;
      &lt;img id="episode-profile-image" alt="S6:E5 - Jack Dorsey Resigns, Apple Self-Repair, and the Threat of Post-Quantum Cryptography" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--84VpOv6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3GWkSFQs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Hosts:&lt;/strong&gt; &lt;a class="mentioned-user" href="https://dev.to/saronyitbarek"&gt;@saronyitbarek&lt;/a&gt;
 &amp;amp; &lt;a class="mentioned-user" href="https://dev.to/joshpuetz"&gt;@joshpuetz&lt;/a&gt;
 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Guest:&lt;/strong&gt; &lt;br&gt;
&lt;strong&gt;Dustin Moody&lt;/strong&gt; is a mathematician in the National Institute of Standards and Technology (NIST) Computer Security Division, where he leads the post-quantum cryptography project. He received his Ph.D. from the University of Washington in 2009. His area of research deals with elliptic curves and their applications in cryptography.&lt;/p&gt;

&lt;p&gt;In this episode, we talk about the resignation of Twitter CEO Jack Dorsey, and Apple’s new self-service repair announcement. Then we explore the looming threat of post-quantum cryptography.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devnews"&gt;follow DevNews&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; &lt;em&gt;— or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Quick Listening Links&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s6-e5-jack-dorsey-resigns-apple-self-repair-and/id1525581923?i=1000543753321"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/5Kq4ZoFwK3cuGpvVvha9qF"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cDovL2ZlZWRzLmNvZGVuZXdiaWUub3JnL2Rldm5ld3NfcG9kY2FzdC54bWw/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZuZXdzLzQ1?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjoyr3b-8X0AhUAAAAAHQAAAAAQCg"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stitcher.com/show/devnews/episode/s6-e5-jack-dorsey-resigns-apple-self-repair-and-the-threat-of-post-quantum-cryptography-88713438"&gt;Stitcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devnews-dev-fH8hvsClkWp/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevNews-p1352512/?topicId=168173797"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.herokuapp.com/podcasts/devnews/episodes/234"&gt;DEV Pods website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  &lt;em&gt;Acknowledgements&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;Our Season 6 sponsors: &lt;a href="https://www.hackatom.org/"&gt;Cosmos HackAtom&lt;/a&gt; &amp;amp; &lt;a href="https://www.microsoft.com/en-us/dev-community/Event/Register?eventId=DevNewsPodcast_FI2YKJLHvJdZ&amp;amp;ocid=aid3038582"&gt;Microsoft Azure&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We hope you enjoy the show this week! 📰 &lt;/p&gt;

</description>
      <category>news</category>
      <category>podcast</category>
    </item>
    <item>
      <title>What's your favorite notetaking app?</title>
      <author>Jasterix</author>
      <pubDate>Thu, 02 Dec 2021 20:09:58 +0000</pubDate>
      <link>https://dev.to/jasterix/whats-your-favorite-notetaking-app-6mf</link>
      <guid>https://dev.to/jasterix/whats-your-favorite-notetaking-app-6mf</guid>
      <description>&lt;p&gt;Since starting as a full time SWE, I've found myself using multiple note-taking apps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Notion.&lt;/strong&gt; Mostly use for meeting notes. I love the organization and search features. I love that you can add attendees and other properties. But the tablet app is painful to use with a stylus. And because it's so structured, I'm less likely to add notes that don't fit in a predefined section.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Samsung Notes.&lt;/strong&gt; For daily tasks and reminders. This replaced the Cambridge Quad notebooks I used to buy in bulk. I bought a Samsung tablet, and now I'm stuck. The handwriting recognition is the best of multiple apps I've tried. Unfortunately the people at Samsung make it impossible to access and edit your notes on desktop or the web.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;OneNote.&lt;/strong&gt; Which I've been trying to use because it's there and easy to save random screenshots to. But the lack of basic editing features and plugins sucks. The forced notebook and page structure is also pretty limiting. I hate clicking around to find notes and the view easily feels cluttered.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Random sticky notes.&lt;/strong&gt; For random thoughts, customer service case numbers, git commands to refer back to, etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I would love to use &lt;strong&gt;one&lt;/strong&gt; app that does everything these 4 apps do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Organize my notes into groups and structures that I can easily search and get back to&lt;/li&gt;
&lt;li&gt;Be workable on tablet. I'm not asking for much here. Just let me take notes. Recognize my handwriting and let me edit on desktop or the web.&lt;/li&gt;
&lt;li&gt;Simple interface that doesn't inhibit random notes or reminders I want to jot down.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Someone suggested Obsidian. Never used it before, but would love to get some feedback from those who have. If there's another app that you swear, please let me know!&lt;/p&gt;

&lt;p&gt;Photo by Polina Tankilevitch from Pexels&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>watercooler</category>
      <category>help</category>
      <category>career</category>
    </item>
    <item>
      <title>How to add a notification banner or popup to your website</title>
      <author>Kartik Grewal</author>
      <pubDate>Thu, 02 Dec 2021 20:02:04 +0000</pubDate>
      <link>https://dev.to/canonic/how-to-add-a-notification-banner-or-popup-to-your-website-3kmf</link>
      <guid>https://dev.to/canonic/how-to-add-a-notification-banner-or-popup-to-your-website-3kmf</guid>
      <description>&lt;p&gt;A product's ability to capture the user's attention is crucial, and dynamic prompts/notification is one such efficient way to engage users.✨&lt;/p&gt;

&lt;p&gt;It allows you to communicate with users by directing their attention to the navigation bar and can be used for a variety of purposes, such as for announcing business news, showing off the best features, generating leads, and so on. &lt;/p&gt;

&lt;p&gt;This article will guide you step by step to build your own Dynamic Prompts/Notifications bar. 👩‍💻&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;We used React for the frontend, Canonic for the Part backend.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's begin! 📌&lt;/p&gt;

&lt;p&gt;📝&lt;strong&gt;Step 1: Create-react-app&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lets start with creating a new react project - Use &lt;strong&gt;create-react-app&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app dynamic-notifications
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, to create a basic skeleton, just edit &lt;code&gt;src/App.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app-body"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Dynamic popups and notifications&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;These notifications come from the data stored on your Canonic app&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;✨&lt;strong&gt;Step 2: Add some styling&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once you're done with the basic skeleton, it's time to add some styling to it. To add the styling use - Edit &lt;code&gt;src/App.css&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-font-smoothing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;antialiased&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-moz-osx-font-smoothing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grayscale&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2vmin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.app&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.app-body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#020d57&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.app-body&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2vmin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After completing the steps above, run &lt;code&gt;npm start&lt;/code&gt; and you should have something similar to this👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2OcrY7En--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpud72w91jeab2vq10ij.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2OcrY7En--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpud72w91jeab2vq10ij.png" alt="step2" width="880" height="467"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔔&lt;strong&gt;Step 3: Add the Notification details&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Now it's time to add the notification and some basic styles, add the HTML to &lt;code&gt;src/App.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app-notification"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 🚀 This is a notification &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app-body"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;✨&lt;strong&gt;Step 4: Make it look nice!&lt;/strong&gt;   &lt;/p&gt;

&lt;p&gt;Let's add some styling to app, edit &lt;code&gt;src/App.css&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="nc"&gt;.app-notification&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#4760ff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.app-notification&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once done with the stated steps, this is how it should look: 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--76_mNat4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9bmjjk88jvi9zl9w5mu6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--76_mNat4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9bmjjk88jvi9zl9w5mu6.png" alt="Step 4" width="880" height="467"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👩‍🔧&lt;strong&gt;Step 5: Let's make it dynamic&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's move ahead and make it dynamic.&lt;/p&gt;

&lt;p&gt;Here, we want to show a different popup based on certain criteria. However, if we do it on the front end, the logic can easily be exposed. Thus, let’s rather create an API where the logic is computed on the backend, using Canonic.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.canonic.dev/projects/6176d0597ebc7c002e0bf675/graph?utm_source=dev.to&amp;amp;utm_medium=organic_article&amp;amp;utm_campaign=30daysofcanonic_uc_1&amp;amp;utm_term=step5_clone_this_project&amp;amp;utm_content=day_4"&gt;&lt;strong&gt;Clone this project&lt;/strong&gt;&lt;/a&gt; and head on to the CMS to create a few notifications. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sb-inI-3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d78lwgcphkd8z95ttfvf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sb-inI-3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d78lwgcphkd8z95ttfvf.png" alt="Step 5" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🚀&lt;strong&gt;Step 6: Create custom API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once done, head on to the API section and create an API to return random notifications. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iPgiUC7z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xmjbjw2iv5x9i8i5cgm8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iPgiUC7z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xmjbjw2iv5x9i8i5cgm8.png" alt="Step 6" width="880" height="467"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Put the below code into the code section to return random notifications from the database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getRandom&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7gaa6jdl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47dgaf99963faen2jpz9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7gaa6jdl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47dgaf99963faen2jpz9.png" alt="Step 6" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🧪&lt;strong&gt;Step 7: Let's test it!&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;In order to do the testing, navigate to the Docs section and select the newly created endpoint. Click Open In Playground and hit the play button. The data should now appear.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oWDS2nXK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/av338ntleo86wy86tom9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oWDS2nXK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/av338ntleo86wy86tom9.png" alt="Step 7" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;⚒&lt;strong&gt;Step 8: Time to integrate backend&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can easily integrate it by modifying &lt;code&gt;App.js&lt;/code&gt; so that we fetch the data.&lt;/p&gt;

&lt;p&gt;We'll use Axios to make the API call, install it using  -&lt;code&gt;npm install axios&lt;/code&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Make sure to replace &lt;code&gt;"YOUR_API_URL_HERE"&lt;/code&gt; with the URL for your endpoint. You should be able to get that from the docs section.&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setNotification&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getNotification&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YOUR_API_URL_HERE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;getNotification&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setNotification&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;getNotification&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setNotification&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;notification&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;
        &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app-notification"&lt;/span&gt;
        &lt;span class="na"&gt;dangerouslySetInnerHTML&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;__html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔔&lt;strong&gt;Step 9: Refresh to get random notification&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After the successful implementation of all the above states steps, you will get a random notification each time you refresh.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9F_vv9e0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ms1ojcp0bxr1bxkmnejs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9F_vv9e0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ms1ojcp0bxr1bxkmnejs.png" alt="Step 9" width="880" height="43"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NXqvjUgv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2al8thfcazomyfnxvhpb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NXqvjUgv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2al8thfcazomyfnxvhpb.png" alt="Step 9" width="880" height="32"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#voila"&gt;
  &lt;/a&gt;
  🎉 Voila!
&lt;/h2&gt;

&lt;p&gt;You have successfully made your one dynamic prompt. 💃🕺&lt;/p&gt;

&lt;p&gt;Check out the &lt;strong&gt;live demo&lt;/strong&gt; &lt;a href="https://dynamic-notifications.netlify.app/?utm_source=dev.to&amp;amp;utm_medium=organic_article&amp;amp;utm_campaign=30daysofcanonic_uc_1&amp;amp;utm_term=voila_here&amp;amp;utm_content=day_4"&gt;here&lt;/a&gt; and &lt;strong&gt;sample code on github&lt;/strong&gt; &lt;a href="https://github.com/canonic-dev/canonic-samples#-dynamic-website-popups"&gt;here&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Hope this guide helps you. You can also check out our other guides &lt;a href="https://dev.to/canonic"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Join us on discord to discuss or share with our community. Write to us for any support requests at &lt;a href="//mailto:support@canonic.dev"&gt;support@canonic.dev&lt;/a&gt;. Check out our &lt;a href="https://www.canonic.dev/30-days-of-canonic/?utm_source=dev.to&amp;amp;utm_medium=organic_article&amp;amp;utm_campaign=30daysofcanonic_uc_1&amp;amp;utm_term=conclusion_website&amp;amp;utm_content=day_4"&gt;website&lt;/a&gt; to know more about Canonic.&lt;/p&gt;




</description>
      <category>webdev</category>
      <category>react</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Tired of people missing out on your CSS animations? jQuery is the answer...</title>
      <author>Code_Jedi</author>
      <pubDate>Thu, 02 Dec 2021 19:59:49 +0000</pubDate>
      <link>https://dev.to/code_jedi/tired-of-people-missing-out-on-your-css-animations-jquery-is-the-answer-1dgh</link>
      <guid>https://dev.to/code_jedi/tired-of-people-missing-out-on-your-css-animations-jquery-is-the-answer-1dgh</guid>
      <description>&lt;p&gt;You've probably been there... You've added a cool animation to one of your webpage's elements, but no-one sees it because the element is too far down the page, and by the time people scroll it into view, it's animation has already finished.&lt;br&gt;
This can be easily solved using jQuery!&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Let's take a simple webpage.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;style&amp;gt;
  @keyframes floatin {
    from { margin-left: 80% }
    to { margin-left: 10% }
  }
  h1{
    text-align: center;
  }
  p{
    margin-left: 20%;
    width: 60%;
  }
  .info{
    position: absolute;
    top: 1000px;
    font-size: 25px;
    margin-left: 80%;
  }
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;The top content&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis fringilla id justo ut tincidunt. Nullam in lectus ultrices, pretium velit sit amet, ullamcorper est. Suspendisse mattis ac diam sit amet convallis. Vivamus et sagittis justo. Praesent non commodo leo. Aenean pulvinar erat ac massa fermentum, vel aliquet mi consectetur. Proin et blandit neque, et porttitor tellus. Aliquam sollicitudin vehicula erat eu rutrum. Sed sit amet tortor quis tortor ullamcorper euismod. Donec eu vulputate sapien.
&amp;lt;/p&amp;gt;
&amp;lt;div id="info"&amp;gt;Hello there!&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mattnikonorov/embed/YzxJwLz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As you can see, the animated ".info" element is too far down the webpage, and by the time you read the top content, it's animation would have long finished.&lt;/p&gt;

&lt;p&gt;This can be solved using jQuery. &lt;br&gt;
First, we have to make sure to add the jQuery script tag inside this webpage's head tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's add the following code inside of a script tag to the bottom of the body tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function wait(){
  $h = $(document).height();
  $pos = $(".info").position();
  if($h &amp;gt; $pos.top){
    $(".info").animate({"margin-left": "10%"}, 2000);
  }
}
$(window).scroll(function(){
  wait();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;What does this jQuery code do?&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The "wait()" function first gets how much the user has scrolled down the page.&lt;/li&gt;
&lt;li&gt;It checks if that number is larger than the top position of the ".info" element.&lt;/li&gt;
&lt;li&gt;If it is, that element's "margin-left" property is changed from 80% to 10% in 2000 milliseconds(2 seconds) using jQuery's "animate()" function.&lt;/li&gt;
&lt;li&gt;The "$(window).scroll(function())" then runs the "wait()" function every-time the use scrolls this webpage.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Full code&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;style&amp;gt;
  @keyframes floatin {
    from { margin-left: 80% }
    to { margin-left: 10% }
  }
  h1{
    text-align: center;
  }
  p{
    margin-left: 20%;
    width: 60%;
  }
  .info{
    position: absolute;
    top: 1000px;
    font-size: 25px;
    margin-left: 80%;
  }
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;The top content&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis fringilla id justo ut tincidunt. Nullam in lectus ultrices, pretium velit sit amet, ullamcorper est. Suspendisse mattis ac diam sit amet convallis. Vivamus et sagittis justo. Praesent non commodo leo. Aenean pulvinar erat ac massa fermentum, vel aliquet mi consectetur. Proin et blandit neque, et porttitor tellus. Aliquam sollicitudin vehicula erat eu rutrum. Sed sit amet tortor quis tortor ullamcorper euismod. Donec eu vulputate sapien.
&amp;lt;/p&amp;gt;
&amp;lt;div class="info"&amp;gt;Hello there!&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
function wait(){
  $h = $(document).height();
  $pos = $(".info").position();
  if($h &amp;gt; $pos.top){
    $(".info").animate({"margin-left": "10%"}, 2000);
  }
}
$(window).scroll(function(){
  wait();
});
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mattnikonorov/embed/vYeBBeZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As you can see, the ".info" element is now being animated only when it is scrolled into view.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-multiple-animations"&gt;
  &lt;/a&gt;
  Adding multiple animations
&lt;/h2&gt;

&lt;p&gt;You can also add multiple animations to an element using jQuery. &lt;br&gt;
Let's take the same code, but this time add another animation to the ".info" element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function wait(){
  $h = $(document).height();
  $pos = $(".info").position();
  if($h &amp;gt; $pos.top){
    $(".info").animate({"margin-left": "10%"}, 2000).animate({"font-size": "40px"}, 2000);
  }
}
$(window).scroll(function(){
  wait();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By adding &lt;code&gt;animate()&lt;/code&gt; functions onto each other like shown in this code, you can add animations to an element on top of each other.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mattnikonorov/embed/zYEOWaz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#there-it-is-a-simple-yet-useful-web-development-trick"&gt;
  &lt;/a&gt;
  There it is, a simple yet useful web development trick.
&lt;/h3&gt;

&lt;p&gt;If you're intrigued by jQuery and it's possibilities, I would highly recommend this &lt;a href="https://bit.ly/3IcCvOx"&gt;jQuery course&lt;/a&gt; on &lt;a href="https://bit.ly/3EeDfAi"&gt;educative&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Does José Valim prefer dynamic typing or static typing?</title>
      <author>Adolfo Neto</author>
      <pubDate>Thu, 02 Dec 2021 19:30:24 +0000</pubDate>
      <link>https://dev.to/adolfont/does-jose-valim-prefer-dynamic-typing-or-static-typing-27fg</link>
      <guid>https://dev.to/adolfont/does-jose-valim-prefer-dynamic-typing-or-static-typing-27fg</guid>
      <description>&lt;p&gt;I am a member of &lt;a href="https://elixiremfoco.com/"&gt;&lt;em&gt;Elixir em Foco&lt;/em&gt;&lt;/a&gt;, a podcast about Elixir in Portuguese. We were invited by the organizers of Elixir Brasil 2021 to interview José Valim, the creator of Elixir.&lt;/p&gt;

&lt;p&gt;You can watch the video below, if you understand Portuguese:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QJiLO5G3xJs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I asked a question whose answer I would like to share. I am not a professional transcriber or translator, so take that into account when reading the following answer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adolfo Neto:&lt;/strong&gt; Do ​​you particularly prefer statically typed or dynamically typed languages ? If it were just for taste, not for saying what's better or worse for developers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;José Valim:&lt;/strong&gt; Dynamically typed. I agree a lot with the response from the creators of Erlang. When someone asks "why isn't Erlang statically typed?", a lot of people say it is "because the theory for statically typing everything in Erlang isn't complete yet", which is true, this is one of the points. If we think about types, by definition a type system restricts the amount of software you can write because if you can't prove, using the type system, that a software is correct, even if the code makes sense, if you can't prove, the type system won't accept that software you wrote.&lt;br&gt;
So by definition the type system ends up restricting the developer.&lt;br&gt;
Then people say: "Oh, it's because we couldn't type everything from Erlang".&lt;br&gt;
And they (the creators of Erlang) say no. Robert (Virding) in particular says: "no, it's just that we thought typing wasn't going to solve the problems we had to solve at the time." And here comes the whole Erlang perspective: "Look, there isn't a type system that's going to help you solve problems like 'Oh, what happens if the distributed system's connection goes down, or if something goes down'."&lt;br&gt;
So they said that, instead of thinking at the typing level, they said "look, we want to have a system that is fault tolerant", with that whole idea of ​​fault redundancy. Instead of thinking about typing and trying to catch right away all the problems that can exist, which is impossible in complex systems, they wanted a system that, when a failure happens, the system manages to correct itself. I still think this approach, in general, from a software point of view, it's a more robust approach. Typing can give you that false sense of security that there will be no system errors. But going back a bit, it doesn't mean that I think typing isn't important. It means that I'm with the Erlang people: if you have to choose one of the two, I would choose dynamic typing. But maybe it's best to have both. We don't know yet. Perhaps. But in a choice, which was the question you asked me, I prefer the Erlang choice, I prefer dynamic typing with fault tolerance.&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>typing</category>
      <category>beam</category>
      <category>erlang</category>
    </item>
  </channel>
</rss>
