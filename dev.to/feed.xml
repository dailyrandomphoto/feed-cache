<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>React Native e2e tests and Automatic Deploys (Detox + Fastlane + CircleCI)</title>
      <author>Roberto Junior Amarante Calder√≥n</author>
      <pubDate>Sat, 17 Apr 2021 01:18:17 +0000</pubDate>
      <link>https://dev.to/kyonru/react-native-e2e-tests-and-automatic-deploys-detox-fastlane-circleci-3gkn</link>
      <guid>https://dev.to/kyonru/react-native-e2e-tests-and-automatic-deploys-detox-fastlane-circleci-3gkn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#a-little-bit-of-context-skippable"&gt;
  &lt;/a&gt;
  A little bit of context (skippable)
&lt;/h1&gt;

&lt;p&gt;These past weeks I've been struggling trying to set up a pipeline where for every PR pointing to our staging branch, e2e tests run automatically, and for every PR that gets merged, test flight builds, and google internal beta builds are created. My experience has been... difficult, but it doesn't mean yours should too.&lt;/p&gt;

&lt;p&gt;tl;dr; &lt;code&gt;PAIN&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-do-i-need-for-this"&gt;
  &lt;/a&gt;
  What do I need for this?
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#1-circle-cis-performance-plan"&gt;
  &lt;/a&gt;
  1. Circle CI's &lt;a href="https://circleci.com/pricing/"&gt;performance plan&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Since we are going to use macs for building our apps. If you only need android builds, you can easily achieve this with github actions, see&lt;/code&gt;&lt;a href="https://github.com/Kyonru/just-a-review-app/tree/master/src"&gt;this project for an example&lt;/a&gt; and &lt;a href="https://dev.to/zenika/deploy-react-native-app-on-the-playstore-with-fastlane-and-github-actions-1-2-8l2"&gt;this amazing post&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-apple-connect-account-amp-google-play-console-account"&gt;
  &lt;/a&gt;
  2. Apple connect account &amp;amp; Google play console account.
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;This will be needed for automatic deployments(2nd part).&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-patience"&gt;
  &lt;/a&gt;
  3. Patience
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Trust me, you'll need it. CIs can smell fear.&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-get-this-started"&gt;
  &lt;/a&gt;
  Let's get this started
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#1-add-detox-into-your-react-native-project"&gt;
  &lt;/a&gt;
  1. Add detox into your react native project.
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Please, follow&lt;/code&gt; &lt;a href="https://github.com/wix/Detox/blob/master/docs/Introduction.GettingStarted.md"&gt;this guide&lt;/a&gt; &lt;code&gt;using JEST step by step in order to have it correctly configured in your project. Here is an&lt;/code&gt;&lt;a href="https://gist.github.com/Kyonru/18606e13372273dad994672171ec9945"&gt;example of a .detoxrc.json&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you can run e2e tests locally, you're ready to go for the next step.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-set-up-circleci"&gt;
  &lt;/a&gt;
  2. Set up CircleCI.
&lt;/h3&gt;

&lt;p&gt;If you don't have CircleCI, you can learn how to add it &lt;a href="https://circleci.com/docs/2.0/getting-started/#section=getting-started"&gt;here&lt;/a&gt;.&lt;br&gt;
Don't worry too much about the content on the config.yml, since we are going to completely modify it. &lt;code&gt;:)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;At this point, you should have a folder named &lt;code&gt;.circleci/&lt;/code&gt; with a &lt;code&gt;config.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Let's make magic using &lt;a href="https://circleci.com/orbs/"&gt;orbs&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Add this to your &lt;code&gt;/app/build.gradle&lt;/code&gt; since we are going to use the &lt;a href="https://github.com/react-native-community/react-native-circleci-orb"&gt;react-native-circleci-orb&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight gradle"&gt;&lt;code&gt;&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="nf"&gt;downloadDependencies&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="s1"&gt;'Download all dependencies to the Gradle cache'&lt;/span&gt;
  &lt;span class="n"&gt;doLast&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;configurations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findAll&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;each&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"minReactNative"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;canBeResolved&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;
        &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'\n'&lt;/span&gt;
        &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;files&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#feeling-lucky"&gt;
  &lt;/a&gt;
  Feeling lucky?
&lt;/h3&gt;

&lt;p&gt;React native community example of how to use this orb is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.1&lt;/span&gt;

&lt;span class="na"&gt;orbs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;rn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;react-native-community/react-native@5.1.0&lt;/span&gt;
&lt;span class="c1"&gt;# Custom jobs which are not part of the Orb&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;checkout_code&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;executor&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rn/linux_js&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;checkout&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;persist_to_workspace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
          &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
  &lt;span class="na"&gt;analyse_js&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;executor&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rn/linux_js&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;attach_workspace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;at&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;rn/yarn_install&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run ESLint&lt;/span&gt;
          &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn eslint&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Flow&lt;/span&gt;
          &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn flow&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Jest&lt;/span&gt;
          &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn jest&lt;/span&gt;

&lt;span class="na"&gt;workflows&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# Checkout the code and persist to the Workspace&lt;/span&gt;
      &lt;span class="c1"&gt;# Note: This is a job that is defined above and not part of the Orb&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;checkout_code&lt;/span&gt;

      &lt;span class="c1"&gt;# Analyze the Javascript using ESLint, Flow, and Jest&lt;/span&gt;
      &lt;span class="c1"&gt;# Note: This is a job that is defined above and not part of the Orb&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;analyse_js&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;requires&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;checkout_code&lt;/span&gt;

      &lt;span class="c1"&gt;# Build the Android app in debug mode&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;rn/android_build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build_android_debug&lt;/span&gt;
          &lt;span class="na"&gt;project_path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;android"&lt;/span&gt;
          &lt;span class="na"&gt;build_type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;debug&lt;/span&gt;
          &lt;span class="na"&gt;requires&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;analyse_js&lt;/span&gt;

      &lt;span class="c1"&gt;# Build and test the Android app in release mode&lt;/span&gt;
      &lt;span class="c1"&gt;# Note: We split these into separate jobs because we can build the Android app on a Linux machine and preserve the expensive MacOS executor minutes for when it's required&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;rn/android_build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build_android_release&lt;/span&gt;
          &lt;span class="na"&gt;project_path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;android"&lt;/span&gt;
          &lt;span class="na"&gt;build_type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;release&lt;/span&gt;
          &lt;span class="na"&gt;requires&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;analyse_js&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;rn/android_test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;detox_configuration&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;android.emu.release"&lt;/span&gt;
          &lt;span class="na"&gt;requires&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;build_android_release&lt;/span&gt;

      &lt;span class="c1"&gt;# Build the iOS app in release mode and do not run tests&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;rn/ios_build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build_ios_release&lt;/span&gt;
          &lt;span class="na"&gt;project_path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ios/Example.xcodeproj&lt;/span&gt;
          &lt;span class="na"&gt;device&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;iPhone&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;X"&lt;/span&gt;
          &lt;span class="na"&gt;build_configuration&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Release&lt;/span&gt;
          &lt;span class="na"&gt;scheme&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Example&lt;/span&gt;
          &lt;span class="na"&gt;requires&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;analyse_js&lt;/span&gt;

      &lt;span class="c1"&gt;# Build and test the iOS app in release mode&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;rn/ios_build_and_test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;project_path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;ios/Example.xcodeproj"&lt;/span&gt;
          &lt;span class="na"&gt;device&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;iPhone&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;X"&lt;/span&gt;
          &lt;span class="na"&gt;build_configuration&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Release"&lt;/span&gt;
          &lt;span class="na"&gt;scheme&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Example"&lt;/span&gt;
          &lt;span class="na"&gt;detox_configuration&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;ios.sim.release"&lt;/span&gt;
          &lt;span class="na"&gt;requires&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;analyse_js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But there is a catch, in my experience, it did not work. &lt;a href="https://circleci.com/developer/orbs/orb/react-native-community/react-native#usage-full"&gt;Here are the docs&lt;/a&gt; of every helper function on this orb.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h3&gt;

&lt;p&gt;Welp let's go step by step and create something that works &lt;code&gt;;)&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#orb"&gt;
  &lt;/a&gt;
  Orb
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: 2.1
orbs:
  rn: react-native-community/react-native@5.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that we call it &lt;code&gt;rn&lt;/code&gt;, this name can be whatever you want, and it's just used to specify when a job is coming from the orb. Ex.  &lt;code&gt;rn/yarn_install&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#jobs"&gt;
  &lt;/a&gt;
  Jobs
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#checkoutcode"&gt;
  &lt;/a&gt;
  checkout_code
&lt;/h5&gt;

&lt;p&gt;Check out the code and persist to the Workspace, needed in order to do stuff in the project root.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;checkout_code&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;executor&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rn/linux_js&lt;/span&gt;
    &lt;span class="na"&gt;node_version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;12"&lt;/span&gt;
  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;checkout&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;persist_to_workspace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
        &lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#analysejs"&gt;
  &lt;/a&gt;
  analyse_js
&lt;/h5&gt;

&lt;p&gt;Running jest test on Linux. Note how we use an &lt;a href="https://circleci.com/docs/2.0/executor-types/"&gt;executor&lt;/a&gt; from our orb and define the node_version version for our project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;analyse_js&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;executor&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rn/linux_js&lt;/span&gt;
    &lt;span class="na"&gt;node_version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;12"&lt;/span&gt;
  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;attach_workspace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;at&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;rn/yarn_install&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn test&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run Tests&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#android-e2e"&gt;
  &lt;/a&gt;
  Android e2e
&lt;/h5&gt;

&lt;p&gt;In a perfect world, the example on the docs is all you need. But this is programming, specifically, React native that we're talking about, the example is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;rn/android_build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build_type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;debug&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build_android_debug&lt;/span&gt;
    &lt;span class="na"&gt;project_path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;android&lt;/span&gt;
    &lt;span class="na"&gt;requires&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;analyse_js&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;rn/android_build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build_type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;release&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build_android_release&lt;/span&gt;
    &lt;span class="na"&gt;project_path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;android&lt;/span&gt;
    &lt;span class="na"&gt;requires&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;analyse_js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The main issue with this approach is that rn/android_build builds the app as a normal build and not as a detox build which can lead to weird issues and false-negative e2e tests.&lt;/p&gt;

&lt;p&gt;So... yeah, we have to re-do this step manually, but feel free to try! If it works for you, &lt;a href="https://twitter.com/kyonru_"&gt;shame me on Twitter!&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please read the comments to understand what is going on here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;android_e2e_test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# Using a mac (:&lt;/span&gt;
  &lt;span class="na"&gt;executor&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rn/macos&lt;/span&gt;
  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;attach_workspace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;at&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;rn/setup_macos_executor&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;homebrew_cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;node_version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;12"&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;rn/yarn_install&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# basically because of this https://github.com/react-native-community/react-native-circleci-orb/issues/66&lt;/span&gt;
        &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# For my app and react native in general java8 is needed. The default version on this executor was default to java10 for some reason, so this kinda solve that issue.&lt;/span&gt;
        &lt;span class="c1"&gt;# just installing java, android sdk, and needed tools.&lt;/span&gt;
        &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="s"&gt;java -version&lt;/span&gt;

          &lt;span class="s"&gt;brew tap adoptopenjdk/openjdk&lt;/span&gt;

          &lt;span class="s"&gt;brew install --cask adoptopenjdk/openjdk/adoptopenjdk8&lt;/span&gt;

          &lt;span class="s"&gt;java -version&lt;/span&gt;

          &lt;span class="s"&gt;export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)&lt;/span&gt;

          &lt;span class="s"&gt;mkdir -p ~/.android &amp;amp;&amp;amp; touch ~/.android/repositories.cfg&lt;/span&gt;

          &lt;span class="s"&gt;java -version&lt;/span&gt;

          &lt;span class="s"&gt;yes | sdkmanager "platform-tools" "tools" &amp;gt;/dev/null&lt;/span&gt;

          &lt;span class="s"&gt;yes | sdkmanager "platforms;android-29"&lt;/span&gt;
          &lt;span class="s"&gt;"system-images;android-29;default;x86_64" &amp;gt;/dev/null&lt;/span&gt;

          &lt;span class="s"&gt;yes | sdkmanager "emulator" --channel=3 &amp;gt;/dev/null&lt;/span&gt;

          &lt;span class="s"&gt;yes | sdkmanager "build-tools;29.0.2" &amp;gt;/dev/null&lt;/span&gt;

          &lt;span class="s"&gt;yes | sdkmanager --licenses &amp;gt;/dev/null&lt;/span&gt;

          &lt;span class="s"&gt;yes | sdkmanager --list&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Android Emulator&lt;/span&gt;
        &lt;span class="na"&gt;shell&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/bin/bash -e&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;adb start-server&lt;/span&gt;
          &lt;span class="s"&gt;adb devices&lt;/span&gt;
          &lt;span class="s"&gt;adb kill-server&lt;/span&gt;
          &lt;span class="s"&gt;ls -la ~/.android&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ADB Start Stop&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Note we are using a pixel_xl as the test device, feel free to change it for one better fits your app&lt;/span&gt;
        &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)&lt;/span&gt;
          &lt;span class="s"&gt;avdmanager create avd --force --name Pixel_2_API_29 --package "system-images;android-29;default;x86_64" --tag default --device pixel_xl&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create Android Emulator&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)&lt;/span&gt;
          &lt;span class="s"&gt;$ANDROID_HOME/emulator/emulator @Pixel_2_API_29 -version&lt;/span&gt;
          &lt;span class="s"&gt;$ANDROID_HOME/emulator/emulator @Pixel_2_API_29 -cores 2 -gpu auto&lt;/span&gt;
          &lt;span class="s"&gt;-accel on -memory 2048 -no-audio -no-snapshot -no-boot-anim&lt;/span&gt;
          &lt;span class="s"&gt;-no-window -logcat *:W | grep -i&lt;/span&gt;
          &lt;span class="s"&gt;'ReactNative\|com.reactnativecommunity'&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Start Android Emulator (background)&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="s"&gt;# export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)&lt;/span&gt;

          &lt;span class="s"&gt;export BOOT=""&lt;/span&gt;

          &lt;span class="s"&gt;echo "Waiting for AVD to finish booting"&lt;/span&gt;

          &lt;span class="s"&gt;export PATH=$(dirname $(dirname $(command -v&lt;/span&gt;
          &lt;span class="s"&gt;android)))/platform-tools:$PATH&lt;/span&gt;

          &lt;span class="s"&gt;until [[ "$BOOT" =~ "1" ]]; do&lt;/span&gt;
            &lt;span class="s"&gt;sleep 5&lt;/span&gt;
            &lt;span class="s"&gt;export BOOT=$(adb -e shell getprop sys.boot_completed 2&amp;gt;&amp;amp;1)&lt;/span&gt;
          &lt;span class="s"&gt;done&lt;/span&gt;

          &lt;span class="s"&gt;sleep 15&lt;/span&gt;

          &lt;span class="s"&gt;adb shell settings put global window_animation_scale 0&lt;/span&gt;

          &lt;span class="s"&gt;adb shell settings put global transition_animation_scale 0&lt;/span&gt;

          &lt;span class="s"&gt;adb shell settings put global animator_duration_scale 0&lt;/span&gt;

          &lt;span class="s"&gt;echo "Android Virtual Device is now ready."&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Wait for AVD to be ready&lt;/span&gt;
        &lt;span class="na"&gt;no_output_timeout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;5m&lt;/span&gt;
    &lt;span class="c1"&gt;# Creates the detox build using the orb job&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;rn/detox_build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;configuration&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;android.emu.release"&lt;/span&gt;
    &lt;span class="c1"&gt;# Tests the app, you can use rn/detox_test, but I wanted to take screenshots when test fails so I can have a better idea of why did they fail.&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;-&lt;/span&gt;
          &lt;span class="s"&gt;detox test -c android.emu.release -l warn --headless&lt;/span&gt;
          &lt;span class="s"&gt;--take-screenshots failing --artifacts-location /tmp/detox_artifacts&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Detox Test&lt;/span&gt;
    &lt;span class="c1"&gt;# Save the screenshots as artifacts, you can see then in the artifact tab for the job in CircleCI&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;store_artifacts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/tmp/detox_artifacts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that all of this can be achieved using the &lt;a href="https://circleci.com/developer/orbs/orb/react-native-community/react-native#executors-linux_android"&gt;rn/linux_android&lt;/a&gt; executor.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#ios-e2e"&gt;
  &lt;/a&gt;
  iOS e2e
&lt;/h5&gt;

&lt;p&gt;In a perfect world, the example on the docs is all you need. And it was for me... until it wasn't. Try the following, if that works for you, &lt;a href="https://twitter.com/kyonru_"&gt;shame me on Twitter!&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Build and test the iOS app in release mode&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;rn/ios_build_and_test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;project_path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;ios/Example.xcodeproj"&lt;/span&gt;
    &lt;span class="na"&gt;device&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;iPhone&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;X"&lt;/span&gt;
    &lt;span class="na"&gt;build_configuration&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Release"&lt;/span&gt;
    &lt;span class="na"&gt;scheme&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Example"&lt;/span&gt;
    &lt;span class="na"&gt;detox_configuration&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;ios.sim.release"&lt;/span&gt;
    &lt;span class="na"&gt;requires&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;analyse_js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fortunately, ios is better than android. Yeah, I said it... At least development wise. In order to recreate the ios_build_and_test all we need is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Build and test the iOS app in release mode&lt;/span&gt;
&lt;span class="na"&gt;ios_e2e_test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;executor&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rn/macos&lt;/span&gt;
  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;checkout&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;attach_workspace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;at&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;rn/setup_macos_executor&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;homebrew_cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;node_version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;12"&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;rn/ios_simulator_start&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;device&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;iPhone&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;11"&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;rn/yarn_install&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# basically because of this https://github.com/react-native-community/react-native-circleci-orb/issues/66&lt;/span&gt;
        &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;rn/pod_install&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;pod_install_directory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ios&lt;/span&gt;
    &lt;span class="c1"&gt;# Yep, it doesn't really matter if you don't run detox build for ios, it works like a charm. But if you prefer, you can replace this step with a custom one.&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;rn/ios_build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;build_configuration&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Release"&lt;/span&gt;
        &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
        &lt;span class="na"&gt;derived_data_path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;ios/build"&lt;/span&gt;
        &lt;span class="na"&gt;device&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;iPhone&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;11"&lt;/span&gt;
        &lt;span class="na"&gt;project_path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;ios/example.xcworkspace"&lt;/span&gt;
        &lt;span class="na"&gt;project_type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;workspace&lt;/span&gt;
        &lt;span class="na"&gt;scheme&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;example"&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;-&lt;/span&gt;
          &lt;span class="s"&gt;detox test -c ios.sim.release -l warn --headless --take-screenshots&lt;/span&gt;
          &lt;span class="s"&gt;failing --artifacts-location /tmp/detox_artifacts&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Detox Test&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;store_artifacts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/tmp/detox_artifacts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations! You have e2e tests running in your app! Give yourself a pat in the back and go get a drink, because Fastlane is coming.&lt;/p&gt;

&lt;p&gt;The hardest thing is doing the configurations for your project. Feel free to ask in the comments, but &lt;a href="https://docs.fastlane.tools/"&gt;fastlane documentation&lt;/a&gt; should be enough to get you ready for the next steps.&lt;/p&gt;

&lt;p&gt;Checkout these if you need a place to start:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.fastlane.tools/getting-started/cross-platform/react-native/"&gt;fastlane + react native&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thecodingmachine.github.io/react-native-boilerplate/docs/BetaBuild/"&gt;react native tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.fastlane.tools/actions/match/"&gt;match&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NLPdZXCi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yg9qxd9f0hdy9rqbawa4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NLPdZXCi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yg9qxd9f0hdy9rqbawa4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#fastlane-android"&gt;
  &lt;/a&gt;
  Fastlane android
&lt;/h5&gt;

&lt;p&gt;This is easier than what you already did. :) All we need is to install Fastlane on Linux and run our Fastlane lane.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;fastlane_android_internal&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;executor&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rn/linux_android&lt;/span&gt;
  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;attach_workspace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;at&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;rn/yarn_install&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gem install bundler&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install bundler&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gem install fastlane&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Fastlane&lt;/span&gt;
    &lt;span class="c1"&gt;# Note that my lane is name upload_to_googleplay replaced for yours&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# can be fancier and use working_directory&lt;/span&gt;
        &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cd android &amp;amp;&amp;amp; fastlane upload_to_googleplay&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Upload to google play via Fastlane&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#fastlane-ios"&gt;
  &lt;/a&gt;
  Fastlane ios
&lt;/h5&gt;

&lt;p&gt;I'm pretty sure adding Fastlane to ios was not an easy task. So... Congratulations Shinji! These are basically the same steps but for ios.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# submit app to apple connect testflight&lt;/span&gt;
&lt;span class="na"&gt;fastlane_ios_testflight&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;executor&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rn/macos&lt;/span&gt;
  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;attach_workspace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;at&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;rn/yarn_install&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;working_directory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ios&lt;/span&gt;
        &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pod install&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gem install bundler&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install bundler&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gem install fastlane&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Fastlane&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;working_directory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ios&lt;/span&gt;
        &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;fastlane beta&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Upload to Testflight via Fastlane&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So... tips for Fastlane.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.fastlane.tools/best-practices/continuous-integration/"&gt;Fastlane Docs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/dumazy/upload-to-testflight-with-fastlane-and-2fa-11k8"&gt;2fa for apple connect&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://circleci.com/docs/2.0/ios-codesigning/#basic-configuration-of-ios-projects"&gt;CircleCI Docs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use date for build numbers. (There are other ways to get incremental build numbers, if you want to try them, Can't recommend any since I haven't used any for the ci).

&lt;ul&gt;
&lt;li&gt;android:
in the build.gradle &lt;code&gt;date.getTime() % 100_000_000_000;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;ios:
in fastlane/Fastfile &lt;code&gt;build_number: DateTime.now.strftime("%Y%m%d%H%M")&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#one-more-thing"&gt;
  &lt;/a&gt;
  One more thing
&lt;/h3&gt;

&lt;p&gt;In order to make everything work, we need to create a workflow where we define the order of the steps.&lt;/p&gt;

&lt;p&gt;So... here's a proposal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;workflows&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# name of the workflow&lt;/span&gt;
  &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;checkout_code&lt;/span&gt;
      &lt;span class="c1"&gt;# Do jest tests&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;analyse_js&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;requires&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;checkout_code&lt;/span&gt;
      &lt;span class="c1"&gt;# Build and test the android app in release mode&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;android_e2e_test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;requires&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;analyse_js&lt;/span&gt;
      &lt;span class="c1"&gt;# Build and test the iOS app in release mode&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;ios_e2e_test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;requires&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;analyse_js&lt;/span&gt;
      &lt;span class="c1"&gt;# Release apps to stores for testing&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;fastlane_android_internal&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="c1"&gt;# We only want to deploy to google play when things get merged into the main branch&lt;/span&gt;
          &lt;span class="na"&gt;filters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;only&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;
          &lt;span class="c1"&gt;# Note that e2e need to pass in order to release&lt;/span&gt;
          &lt;span class="na"&gt;requires&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;android_e2e_test&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;fastlane_ios_testflight&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="c1"&gt;# We only want to deploy to google play when things get merged into the main branch&lt;/span&gt;
          &lt;span class="na"&gt;filters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;only&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;
          &lt;span class="c1"&gt;# Note that e2e need to pass in order to release&lt;/span&gt;
          &lt;span class="na"&gt;requires&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ios_e2e_test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If react native, detox, CircleCI and Fastlane decided you can rest today, you should see something like this in your pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZM0f9_Mn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2zd3d3iqezz1r9rlprt9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZM0f9_Mn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2zd3d3iqezz1r9rlprt9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>testing</category>
      <category>fastlane</category>
      <category>circleci</category>
    </item>
    <item>
      <title>How to stream a local file into a real-time video call</title>
      <author>Kimberlee Johnson </author>
      <pubDate>Fri, 16 Apr 2021 21:41:39 +0000</pubDate>
      <link>https://dev.to/trydaily/a-workaround-for-watching-videos-together-on-calls-2hbh</link>
      <guid>https://dev.to/trydaily/a-workaround-for-watching-videos-together-on-calls-2hbh</guid>
      <description>&lt;p&gt;We've joined a lot of video calls over the last year here at Daily. While it‚Äôs easy to chat in real-time with someone on the other side of the world, streaming a video to watch simultaneously as part of that conversation quickly complicates things. We‚Äôve all been in meetings, training sessions, discussion groups, and even catch ups with friends where lags and buggy streams make it impossible to watch a video at the same time. &lt;/p&gt;

&lt;p&gt;With great frustration comes great experimentation, and we‚Äôve come up with a quick hack for streaming local video files during our calls: using the Daily API &lt;a href="https://docs.daily.co/reference#%EF%B8%8F-startscreenshare?utm_source=dev&amp;amp;utm_campaign=stream-local-video"&gt;startScreenShare()&lt;/a&gt; method. &lt;/p&gt;

&lt;p&gt;This tutorial covers our workaround! We‚Äôll go over uploading the local file and creating a stream from it, sharing that stream, and making sure that our hack is working. &lt;/p&gt;

&lt;p&gt;If you‚Äôre looking to implement this feature in your own &lt;a href="https://docs.daily.co/docs/embed-the-daily-prebuilt-ui?utm_source=dev&amp;amp;utm_campaign=stream-local-video"&gt;embedded prebuilt UI&lt;/a&gt; or &lt;a href="https://docs.daily.co/docs/build-a-custom-video-chat-interface#daily-call-object?utm_source=dev&amp;amp;utm_campaign=stream-local-video"&gt;Daily call object&lt;/a&gt; video app, you can add to your own code as we go. Or, if you want to fiddle with a working prototype, download &lt;a href="https://gist.github.com/kimberleejohnson/97ef1f01ea8cb63625cdd588b07003b5?utm_source=dev&amp;amp;utm_campaign=stream-local-video"&gt;our gist&lt;/a&gt; and &lt;a href="https://docs.daily.co/docs/create-and-manage-rooms-with-the-rest-api?utm_source=dev&amp;amp;utm_campaign=stream-local-video"&gt;create a Daily room&lt;/a&gt; if you don‚Äôt have one already. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-we-get-started"&gt;
  &lt;/a&gt;
  Before we get started
&lt;/h2&gt;

&lt;p&gt;We put it in the title and we mean it: this is a hack. It‚Äôs a workaround, not meant for production, but for low stakes, internal use cases. Somebody may or may not have debuted it by sneaking &lt;a href="https://www.youtube.com/watch?v=_Yhyp-_hX2s"&gt;mom‚Äôs spaghetti&lt;/a&gt; into a Daily all hands. &lt;/p&gt;

&lt;p&gt;As with any hack, it also comes with a few caveats:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you‚Äôll be using Chrome, you‚Äôll need to &lt;a href="https://www.lifewire.com/hardware-acceleration-in-chrome-4125122"&gt;disable hardware acceleration&lt;/a&gt; before you share a video stream. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unfortunately, this solution doesn‚Äôt work for streaming video from Safari, because Safari doesn‚Äôt support &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/captureStream"&gt;captureStream()&lt;/a&gt;.  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that, here we go here‚Äôs our shot, feet fail us not. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#upload-the-local-video-file-and-create-a-stream"&gt;
  &lt;/a&gt;
  Upload the local video file and create a stream
&lt;/h2&gt;

&lt;p&gt;We need an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element with three attributes to upload the video: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;id&lt;/code&gt;: so that we can use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById"&gt;&lt;code&gt;document.getElementById&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.w3schools.com/tags/att_input_type.asp"&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt;: to specify that this input field is for a file upload. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.w3schools.com/tags/att_input_accept.asp"&gt;&lt;code&gt;accept&lt;/code&gt;&lt;/a&gt;: to make sure the uploaded file is a video.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"vid-file-picker"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;accept=&lt;/span&gt;&lt;span class="s"&gt;"video/*"&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We add an event listener to the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. On &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event"&gt;&lt;code&gt;'change'&lt;/code&gt;&lt;/a&gt;, we call our function &lt;code&gt;playLocalVideoFile()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;videoInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vid-file-picker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;callObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;videoInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;playLocalVideoFile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;playLocalVideoFile()&lt;/code&gt; creates a video stream from the file using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/captureStream"&gt;captureStream()&lt;/a&gt; or mozCaptureStream() if you‚Äôre using FireFox.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;playLocalVideoFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;videoEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;local-vid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;videoEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canPlayType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cannot play that file&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="nx"&gt;videoEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;videoEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// Mozilla currently prefixes the function name, so we have to check for either&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;videoEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mozCaptureStream&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localVideoStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;videoEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mozCaptureStream&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;videoEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;captureStream&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localVideoStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;videoEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;captureStream&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have the stream, we can share it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#share-the-stream-with-call-participants"&gt;
  &lt;/a&gt;
  Share the stream with call participants
&lt;/h2&gt;

&lt;p&gt;We add a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; to &lt;code&gt;shareVideo()&lt;/code&gt; through the screen share stream.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"shareVideo()"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;share video through screenshare stream&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;shareVideo()&lt;/code&gt; calls the Daily &lt;a href="https://docs.daily.co/reference#%EF%B8%8F-startscreenshare?utm_source=dev&amp;amp;utm_campaign=stream-local-video"&gt;startScreenShare()&lt;/a&gt; method on the &lt;a href="https://docs.daily.co/docs/build-a-custom-video-chat-interface#daily-call-object?utm_source=dev&amp;amp;utm_campaign=stream-local-video"&gt;Daily call object&lt;/a&gt;, passing the &lt;code&gt;localVideoStream&lt;/code&gt; created via &lt;code&gt;playLocalVideo()&lt;/code&gt; as the media stream to be shared:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;shareVideo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;callObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startScreenShare&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;mediaStream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;localVideoStream&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#test-the-stream"&gt;
  &lt;/a&gt;
  Test the stream
&lt;/h2&gt;

&lt;p&gt;Make sure you have a &lt;a href="https://docs.daily.co/docs/create-and-manage-rooms-with-the-rest-api?utm_source=dev&amp;amp;utm_campaign=stream-local-video"&gt;Daily room URL&lt;/a&gt; ready. We hardcoded ours as a &lt;code&gt;const&lt;/code&gt; in our html file because, again, this is a hack. Relatedly, if you‚Äôre using Chrome, don‚Äôt forget to &lt;a href="https://www.lifewire.com/hardware-acceleration-in-chrome-4125122"&gt;disable hardware acceleration&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Next, open the file in your browser. In a new tab, visit your Daily room URL. You should see two participants in the room tab, but just you in the file tab. &lt;/p&gt;

&lt;p&gt;Click "Choose File" and upload the local video of your choice. If you need inspiration for what file to choose, try searching on &lt;a href="https://www.pexels.com/videos/"&gt;Pexels&lt;/a&gt; for puppies (that‚Äôs what I did). Finally, click ‚Äúshare video through screen share stream‚Äù and in the tab with the room URL you should see the video coming through. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VMXYoJXo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/niayloktucxucyxv477i.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VMXYoJXo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/niayloktucxucyxv477i.gif" alt="gif shows video call where video of a puppy plays on the biggest video stream "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#snap-back-to-reality-whats-next"&gt;
  &lt;/a&gt;
  Snap back to reality (what‚Äôs next)
&lt;/h2&gt;

&lt;p&gt;That‚Äôs it! Thanks for reading. We hope this makes sharing videos for everyone to watch on your calls easier. Let us know in the comments!&lt;/p&gt;

&lt;p&gt;And, if you‚Äôre interested in building more apps that are all about sharing and streaming content, our &lt;a href="https://www.daily.co/blog/webinartc-building-a-webinar-app-with-react-and-daily-prebuilt-ui/?utm_source=dev&amp;amp;utm_campaign=stream-local-video"&gt;webinar series&lt;/a&gt; might spark some ideas. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>webrtc</category>
    </item>
    <item>
      <title>React Router  - Route ( WTF Moment )</title>
      <author>Santiago Correa</author>
      <pubDate>Fri, 16 Apr 2021 21:02:54 +0000</pubDate>
      <link>https://dev.to/scorreaui/react-router-route-wtf-moment-3102</link>
      <guid>https://dev.to/scorreaui/react-router-route-wtf-moment-3102</guid>
      <description>&lt;p&gt;Recently I was working on a project which consisted of books, and I realized that my whole web app was mounting and unmounting instead of the components re-rendering. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;More details:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The project consisted of 2 pages.&lt;/p&gt;

&lt;p&gt;Here's a quick wireframe I whipped up:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IQLGMPcX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxgbeeegbjcqi0gwe0l4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IQLGMPcX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxgbeeegbjcqi0gwe0l4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Home&lt;/li&gt;
&lt;li&gt;Search&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I used react-router to create the navigation between pages.&lt;/p&gt;

&lt;p&gt;What I didn't know, until I further read their documentation, is that if you use the prop component in &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; it uses React.createElement to create a new React element from the given component.&lt;/p&gt;

&lt;p&gt;That means if you provide an inline function to the component prop, you would create a new component every render. This results in the existing component unmounting and the new component mounting instead of just updating the existing component. &lt;/p&gt;

&lt;p&gt;This caused undesired behavior which was when I was on the search page and updated the App state it would refresh everything and I would lose the state I had in the Search page. &lt;/p&gt;

&lt;p&gt;Instead, to just make sure the component updates and doesn't mount and unmount when there is an update, &lt;strong&gt;use render&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Route
  path='/'
  exact
  render={() =&amp;gt; ( 
   &amp;lt;Home 
    currentlyReading={this.state.currentlyReading} 
    read={this.state.read}
    wantToRead={this.state.wantToRead}
    updateBookShelf={(book, shelf) =&amp;gt; 
    this.updateBookShelf(book, shelf)} /&amp;gt;
  )}
&amp;gt;&amp;lt;/Route&amp;gt;               
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Route
  path='/'
  exact
  render={() =&amp;gt; ( 
   &amp;lt;Search 
    allBooks={this.state.books}
    updateBookShelf={(book, shelf) =&amp;gt; 
    this.updateBookShelf(book, shelf)} /&amp;gt;
  )}
&amp;gt;&amp;lt;/Route&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Component unmounts and mounts a new component.&lt;/li&gt;
&lt;li&gt;Render updates components, instead of unmounting and mounting.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>lesson</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>New friend</title>
      <author> üê§ü•á Jasper de Jager</author>
      <pubDate>Fri, 16 Apr 2021 21:00:38 +0000</pubDate>
      <link>https://dev.to/jmdejager/random-act-of-kindness-2mi4</link>
      <guid>https://dev.to/jmdejager/random-act-of-kindness-2mi4</guid>
      <description>&lt;p&gt;I came across this post whilst scrolling through my new followers (very rewarding thing to do btw)&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/raeclaude" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xo1CNB26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hKtGmwk1--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/615576/ff77bc5b-0e19-449f-987c-951ff9724bb4.png" alt="raeclaude image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/raeclaude/new-friend-1mei" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;new friend&lt;/h2&gt;
      &lt;h3&gt;lawson peter „Éª Apr 16 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;It triggered meüòä Let's help a comedian out and give this post some love, and perhaps some funny comments üòÖ I'm sure a comedian can appreciate something like that. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>watercooler</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Create a Glowing Loader in CSS and HTML</title>
      <author>Hieu Nguyen</author>
      <pubDate>Fri, 16 Apr 2021 20:52:57 +0000</pubDate>
      <link>https://dev.to/hieussr/create-a-glowing-loader-in-css-and-html-3omd</link>
      <guid>https://dev.to/hieussr/create-a-glowing-loader-in-css-and-html-3omd</guid>
      <description>&lt;p&gt;We want our products to leave a good impression on first-time users. So whenever we build something, we make it possible first, then ask if it can be a little unique. And the glowing loader is one of those attempts.&lt;/p&gt;

&lt;p&gt;Here is Hieu's original version on &lt;a href="https://jsfiddle.net/hieunc229/wyk0qg9L/33/"&gt;jsfiddle (33 changes)&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-your-own-loader-in-html-and-css"&gt;
  &lt;/a&gt;
  Create your own loader in HTML and CSS
&lt;/h2&gt;

&lt;p&gt;The loader design has a container and 3 elements: the background button, glowing spinner, and the logo. While the button and the spinner are all overlay layers (use absolute positioning). &lt;/p&gt;

&lt;p&gt;Let's start with a straigt forward HTML markup as following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"logo-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"spinner"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"background"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"yourlogo.svg"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"28"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#1-the-container"&gt;
  &lt;/a&gt;
  1. The container
&lt;/h3&gt;

&lt;p&gt;The main point of the container is to groups the elements together, and positioning its children &lt;code&gt;logo&lt;/code&gt; in the center. Let's use &lt;code&gt;flex&lt;/code&gt; in this example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.logo-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* align children in the center */&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/* a circle with 60x60 pixels */&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have a plain logo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XKG1IYls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wilson.inverr.com/media/glowing-spinner-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XKG1IYls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wilson.inverr.com/media/glowing-spinner-1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before going into the button background and the spinner. We need to make sure they are overlay layers, by applying absolute positioning as following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.background&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.spinner&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#2-the-button-background"&gt;
  &lt;/a&gt;
  2. The button background
&lt;/h3&gt;

&lt;p&gt;The button background is a circle, with a matte-ish gradient and shadows. Here's one way to do it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* The button background layer */&lt;/span&gt;
&lt;span class="nc"&gt;.background&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#0f1013&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#252730&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt; &lt;span class="m"&gt;-2px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It'll look like this now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EbmgmiUP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wilson.inverr.com/media/glowing-spinner-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EbmgmiUP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wilson.inverr.com/media/glowing-spinner-2.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-bring-logo-to-front"&gt;
  &lt;/a&gt;
  3. Bring logo to front
&lt;/h3&gt;

&lt;p&gt;In case you can't see your logo, you will need to use &lt;code&gt;z-index&lt;/code&gt; to bring the &lt;code&gt;logo&lt;/code&gt; on top. Simple as the following CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.logo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#4-glowing-spinner"&gt;
  &lt;/a&gt;
  4. Glowing spinner
&lt;/h3&gt;

&lt;p&gt;Glowing spinner layer use a &lt;code&gt;top-border&lt;/code&gt; attribute, with shadow to add the glowing effect. It can be done as following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.spinner&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#ae34db&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/* glowing with shadow (30% of #ae34db) */&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;#ae34db4&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/* add spin animation */&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;spin&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add the animation keyframes. It's basically a keyframe that rotate the light spinner in a 360 degree circle&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;spin&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;360deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see a glowing spinner with your logo inside. Here is our final result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yzr9qd1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://wilson.inverr.com/media/glowing-spinner-3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yzr9qd1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://wilson.inverr.com/media/glowing-spinner-3.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can play with the &lt;code&gt;spin&lt;/code&gt; keyframe to change the glowing colors, or spread the shadow more to make it like a siren light.&lt;/p&gt;




&lt;p&gt;Now you know how to create a glowing loader. It contains a matte-ish gradient background, with a glowing spinner. You can check out the final result &lt;a href="https://jsfiddle.net/m52jdu3e/"&gt;on jsfiddle&lt;/a&gt;;&lt;/p&gt;

&lt;p&gt;Let us know &lt;a href="https://inverr.com/contact"&gt;what you think&lt;/a&gt; and thanks for the support.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>animate</category>
      <category>loader</category>
    </item>
    <item>
      <title>Top 5 DEV Comments of the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 16 Apr 2021 20:07:18 +0000</pubDate>
      <link>https://dev.to/devteam/top-5-dev-comments-of-the-past-week-4jpb</link>
      <guid>https://dev.to/devteam/top-5-dev-comments-of-the-past-week-4jpb</guid>
      <description>&lt;p&gt;This is a weekly roundup of awesome DEV comments that you may have missed.  You are welcome and encouraged to boost posts and comments yourself using the &lt;strong&gt;&lt;a href="https://dev.to/t/bestofdev"&gt;#bestofdev&lt;/a&gt;&lt;/strong&gt; tag.&lt;/p&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/technoglot"&gt;@technoglot&lt;/a&gt;
 had some &lt;a href="https://dev.to/devteam/what-was-your-win-this-week-1jd5"&gt;amazing wins&lt;/a&gt; this week! Keep the good work coming!&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/technoglot"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--t1s7673F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--dh0H24sF--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/430182/bd897f8a-247e-44b6-bac8-db79fbe1a55b.jpeg" alt="technoglot profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/technoglot"&gt;
        &lt;span class="comment-username"&gt;Amelia Vieira Rosado&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/technoglot/comment/1d9ce" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr  9
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;Let's see...This week was great for me! &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I made progress on a small game I'm working on (college stuffs) üïπ&lt;/li&gt;
&lt;li&gt;I got my 4 week streak shiny badge. Consistency for the win! üòÅ&lt;/li&gt;
&lt;li&gt;My posts on productivity did really well too üòä (Feel free to check them out, no pressure)&lt;/li&gt;
&lt;/ul&gt;


    &lt;/div&gt;
&lt;/div&gt;
 

&lt;p&gt;Take a look at this &lt;a href="https://dev.to/alvaromontoro/bezos-calculator-4b7h"&gt;brilliant yet sobering calculator&lt;/a&gt; and you'll see what &lt;a class="mentioned-user" href="https://dev.to/crfries"&gt;@crfries&lt;/a&gt;
 means. &lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/crfries"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--lmiwuuwb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--o_7lsoTK--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/519865/10f72ebb-4176-45be-82ad-8d2cf7b92b50.png" alt="crfries profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/crfries"&gt;
        &lt;span class="comment-username"&gt;crfries&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/crfries/comment/1dcbk" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr 13
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;This is amazing and depressing at the same time. &lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Sometimes, all we need is a little advice from others to get our &lt;a href="https://dev.to/crfries/portfolio-advice-4m1o"&gt;portfolios in shape&lt;/a&gt;. This is a helpful adjustment, &lt;a class="mentioned-user" href="https://dev.to/peterlunch"&gt;@peterlunch&lt;/a&gt;
.&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/peterlunch"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--GPZ-yvdb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--thyPdIOK--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/358832/da87fb8f-ff37-491a-b1a6-54bef42f0eb7.jpeg" alt="peterlunch profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/peterlunch"&gt;
        &lt;span class="comment-username"&gt;Peter&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/peterlunch/comment/1dblb" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr 12
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;On your intro you say - "I am currently seeking a position at a company to grow and expand my abilities."&lt;/p&gt;

&lt;p&gt;I'd personally adjust to "I am currently seeking a position at a company where I can contribute with my x, y, z skills while I learn and grow from other developers."&lt;/p&gt;

&lt;p&gt;It's always good to say explicitly what you are offering the organization.  &lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Choosing your &lt;a href="https://dev.to/bobbyiliev/what-is-your-linux-distribution-of-choice-and-why-2ijf"&gt;Linux distribution&lt;/a&gt; can be a tricky decision to make. Thanks for stating your case and making that choice easier, &lt;a class="mentioned-user" href="https://dev.to/cmuralisree"&gt;@cmuralisree&lt;/a&gt;
.&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/cmuralisree"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--V6ek2QQR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jyGkl1dJ--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/554716/b30ee849-0d7c-4245-9b00-1c585cb101db.jpg" alt="cmuralisree profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/cmuralisree"&gt;
        &lt;span class="comment-username"&gt;Chittoji Murali Sree Krishna&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/cmuralisree/comment/1d88k" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr  8
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;h1&gt;
  &lt;a href="#i-use-vanilla-arch"&gt;
  &lt;/a&gt;
  I use Vanilla arch
&lt;/h1&gt;

&lt;p&gt;I love it, bcz&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It's extremely lightweight,&lt;/li&gt;
&lt;li&gt;You are building your own system, so it will be solid stable&lt;/li&gt;
&lt;li&gt;Pacman and AUR,&lt;/li&gt;
&lt;li&gt;Availability of software&lt;/li&gt;
&lt;li&gt;Infamous archwiki,&lt;/li&gt;
&lt;/ol&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;In so many ways, &lt;a href="https://dev.to/jordienr/4-books-that-are-not-about-computers-that-made-me-a-good-software-developer-2hac"&gt;reading can make you a better Software Developer&lt;/a&gt;, and these suggestions are heading to the top of the list, for sure. Thanks for choosing our next reads, &lt;a class="mentioned-user" href="https://dev.to/eljayadobe"&gt;@eljayadobe&lt;/a&gt;
!&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/eljayadobe"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dyh0m08q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--J6Pjmr4x--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/16481/7c9b8fa1-9004-4b63-94e9-c282f821bf24.png" alt="eljayadobe profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/eljayadobe"&gt;
        &lt;span class="comment-username"&gt;Eljay-Adobe&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/eljayadobe/comment/1db4l" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr 11
  &lt;/time&gt;

    ‚Ä¢ Edited
    &lt;span class="hidden m:inline-block"&gt;
      on &lt;time&gt;
      Apr 11&lt;/time&gt;
    &lt;/span&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;I wasn't even aware of any of those books.  They're on my book queue now!&lt;/p&gt;

&lt;p&gt;Here's my four non-computer books that I have helped my programming:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;The Goal&lt;/strong&gt; by Eliyahu M. Goldratt&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The Design of Everyday Things&lt;/strong&gt; by Don Norman&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Advanced Dungeons &amp;amp; Dragons&lt;/strong&gt; (1st edition) by Gary Gygax, et al&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;To Do Doing Done&lt;/strong&gt; by Snead &amp;amp; Wycoff&lt;/li&gt;
&lt;/ul&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;See you next week for more great comments ‚úå&lt;/p&gt;

</description>
      <category>bestofdev</category>
    </item>
    <item>
      <title>Apple API schemas for code generation and more</title>
      <author>Jeff Lindsay</author>
      <pubDate>Fri, 16 Apr 2021 20:03:26 +0000</pubDate>
      <link>https://dev.to/progrium/apple-api-schemas-for-code-generation-and-more-1phj</link>
      <guid>https://dev.to/progrium/apple-api-schemas-for-code-generation-and-more-1phj</guid>
      <description>&lt;p&gt;Schemas are pretty dope. My appreciation for API schemas as a toolmaker comes from a desire to build tools that can integrate with many systems, and open new avenues for people to use APIs.&lt;/p&gt;

&lt;p&gt;For most, the use case that comes to mind for API schemas is generating documentation. Translating a machine-readable schema into a human friendly representation is a scalable, automated way to maintain solid reference documentation. Although many systems exist to generate documentation directly from code, having an intermediary representation is useful for other use cases.&lt;/p&gt;

&lt;p&gt;Code generation is the other big one. It's common for companies like Google and Amazon to generate client libraries across languages for their many web APIs. Even some libraries for GitHub's API are generated because their API has gotten so big it would be untenable otherwise. This is particularly important in the open source community where maintainer time is a scarce resource. Schemas save a lot of time, but it's still pretty uncommon to find a schema for any given web API.&lt;/p&gt;

&lt;p&gt;Even less common are schemas for non-web APIs. In 2016, &lt;a href="https://www.electronjs.org/blog/api-docs-json-schema"&gt;Electron started releasing a JSON schema&lt;/a&gt; of all their APIs that allowed me to build a bridge to use Electron APIs from Go. I had that prototype in mind when I started the &lt;a href="https://github.com/progrium/macdriver"&gt;macdriver&lt;/a&gt; project that was released a couple months ago. Right now we're manually wrapping Apple framework classes with Go types so you can write native Apple platform applications that look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zaZWgHJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qspum8s6zvhbnzvw3le.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zaZWgHJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qspum8s6zvhbnzvw3le.png" alt="macdriver example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These kinds of bindings used to be more supported by Apple as evidenced by bridgesupport files, which were XML schemas of their APIs. However, they aren't very well supported any longer. Moreover, bridgesupport files were more like headers and didn't provide much in the form of documentation. &lt;/p&gt;

&lt;p&gt;So if we wanted to generate the APIs in macdriver, we could parse Objective-C headers, or maybe try to use what's available in bridgesupport files. But we'd also like to generate human readable descriptions and ideally link to official docs. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If schemas are used to generate documentation, there's no reason you can't generate schemas from documentation.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So I built a tool that could parse Apple documentation into schemas. Since their docs also have the declarations for everything, we don't even need to use header files. The result is a nice JSON document describing their classes and other entities like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zR7S6AMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0328ykp728ydnutra7r6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zR7S6AMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0328ykp728ydnutra7r6.png" alt="macschema output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From this we can start to automate the generation of wrapper types in macdriver, but as a standalone toolchain, the schemas it produces can be used to write bindings in languages other than Go as well. &lt;/p&gt;

&lt;p&gt;Schemas like this can also be used in developer tooling for all sorts of things like autocompletion, or help create visual programming interfaces. &lt;/p&gt;

&lt;p&gt;Today most "no-code" tools need to support integrations to stay competitive, but they're all writing and maintaining their own integrations. In fact, every application with user programmable integrations can benefit from schemas like this. So I'd like to see more.&lt;/p&gt;

&lt;p&gt;If this is interesting, take a look at the tool I built, &lt;a href="https://github.com/progrium/macschema"&gt;macschema&lt;/a&gt;, which is open source on GitHub. Right now it's just the toolchain, but in theory we could generate schemas for all of Apple's APIs and put them in a repo in such a way that can be updated by a combination of macschema and user contributed patches. I'll let somebody else do that though. &lt;/p&gt;

&lt;p&gt;Thanks for reading, think about schemas more, and consider &lt;a href="https://github.com/sponsors/progrium"&gt;sponsoring my work&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>showdev</category>
      <category>go</category>
    </item>
    <item>
      <title>When to use Svelte vs SvelteKit vs Sapper?</title>
      <author>Dana Woodman</author>
      <pubDate>Fri, 16 Apr 2021 19:38:40 +0000</pubDate>
      <link>https://dev.to/danawoodman/when-to-use-svelte-vs-sveltetkit-vs-sapper-4o6a</link>
      <guid>https://dev.to/danawoodman/when-to-use-svelte-vs-sveltetkit-vs-sapper-4o6a</guid>
      <description>&lt;p&gt;Confused as to when you should use Svelte vs SvelteKit vs Sapper? Hopefully I can help you get a little more clarity with this short guide. Let's go! üëá&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#use-svelte-if"&gt;
  &lt;/a&gt;
  Use Svelte if...
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;You don't need/want SSR (Server Side Rendering)&lt;/li&gt;
&lt;li&gt;You want to render a component into an existing page&lt;/li&gt;
&lt;li&gt;You want to output things like a vanilla component, a WebComponent or a React component adapter&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#use-sveltekit-if"&gt;
  &lt;/a&gt;
  Use SvelteKit if...
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;You're ok with Beta software and living on the bleeding edge&lt;/li&gt;
&lt;li&gt;You want SSR like Next.js/Nuxt.js&lt;/li&gt;
&lt;li&gt;You want to have a backend API as part of your project&lt;/li&gt;
&lt;li&gt;You want your app to work in a Serverless environment (e.g. Vercel/Netlify)&lt;/li&gt;
&lt;li&gt;You want super fast hot reloading in development (via Vite) &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that SvelteKit supports static rendering with &lt;a href="https://www.npmjs.com/package/@sveltejs/adapter-static"&gt;adapter-static&lt;/a&gt; which you can use to render a static site with built in routing in case you don't want/need any API/SSR.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#use-sapper-if"&gt;
  &lt;/a&gt;
  Use Sapper if...
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;You don't want to use Beta software and don't want to deal with the potential roadblocks of Beta software&lt;/li&gt;
&lt;li&gt;You want/need access directly to Express/Polka&lt;/li&gt;
&lt;li&gt;You're ok using a product that will no longer be maintained (SvelteKit will replace Sapper)&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#scenarios"&gt;
  &lt;/a&gt;
  Scenarios
&lt;/h1&gt;

&lt;p&gt;Still not sure what to use? Maybe these scenarios will help you decide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;"I'm building a brand new web app (with backend/API)"&lt;/em&gt;: &lt;strong&gt;Use SvelteKit&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;"I want to build an SPA (Single Page App) and I have a pre-existing backend and don't need SSR"&lt;/em&gt;: &lt;strong&gt;Use Svelte&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;"I want to use Svelte in an existing web app"&lt;/em&gt;: &lt;strong&gt;Use Svelte&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;"I'm cautious of new things but want SSR/routing"&lt;/em&gt;: &lt;strong&gt;Use Sapper&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;"I'm building a rocket ship üöÄ"&lt;/em&gt;: &lt;strong&gt;Use something else&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Note that if you end up using Sapper, you can always &lt;a href="https://kit.svelte.dev/migrating"&gt;migrate to SvelteKit later&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See any reasons missing from the above list? Drop them in the comments below üí¨&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Follow me on &lt;a href="https://dev.to/danawoodman"&gt;Dev.to&lt;/a&gt;, &lt;a href="https://twitter.com/DanaWoodman"&gt;Twitter&lt;/a&gt; and &lt;a href="https://github.com/danawoodman"&gt;Github&lt;/a&gt; for more web dev and startup related content&lt;/em&gt; ü§ì&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>sveltekit</category>
      <category>sapper</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The JavaScript console cheat sheet</title>
      <author>mrwolferinc</author>
      <pubDate>Fri, 16 Apr 2021 19:32:40 +0000</pubDate>
      <link>https://dev.to/mrwolferinc/the-javascript-console-cheat-sheet-4o76</link>
      <guid>https://dev.to/mrwolferinc/the-javascript-console-cheat-sheet-4o76</guid>
      <description>&lt;p&gt;This cheat sheet provides a quick overview of all the methods of the JavaScript &lt;code&gt;console&lt;/code&gt; object. Please note that non-standard methods are not documented.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#basic-methods"&gt;
  &lt;/a&gt;
  Basic methods
&lt;/h1&gt;

&lt;p&gt;This section provides information on the basic methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consoleclear-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.clear&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Clears the console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;p&gt;None&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-raw-consoledebug-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.debug&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Outputs a message to the web console at the "debug" log level.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;  &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;objN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;subst1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;substN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-obj1-endraw-raw-objn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;obj1&lt;/code&gt; ... &lt;code&gt;objN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-msg-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;msg&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A JavaScript string containing zero or more substitution strings.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-subst1-endraw-raw-substn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;subst1&lt;/code&gt; ... &lt;code&gt;substN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;JavaScript objects with which to replace substitution strings within msg. This gives you additional control over the format of the output.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Debug&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-consoleerror-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.error&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Outputs an error message to the web console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;  &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;objN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;subst1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;substN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-obj1-endraw-raw-objn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;obj1&lt;/code&gt; ... &lt;code&gt;objN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-msg-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;msg&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A JavaScript string containing zero or more substitution strings.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-subst1-endraw-raw-substn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;subst1&lt;/code&gt; ... &lt;code&gt;substN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;JavaScript objects with which to replace substitution strings within msg. This gives you additional control over the format of the output.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-consoleinfo-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.info&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Outputs an informational message to the web console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;  &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;objN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;subst1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;substN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-obj1-endraw-raw-objn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;obj1&lt;/code&gt; ... &lt;code&gt;objN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-msg-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;msg&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A JavaScript string containing zero or more substitution strings.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-subst1-endraw-raw-substn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;subst1&lt;/code&gt; ... &lt;code&gt;substN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;JavaScript objects with which to replace substitution strings within msg. This gives you additional control over the format of the output.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Information&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-consolelog-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.log&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Outputs a message to the web console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;  &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;objN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;subst1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;substN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-obj1-endraw-raw-objn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;obj1&lt;/code&gt; ... &lt;code&gt;objN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-msg-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;msg&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A JavaScript string containing zero or more substitution strings.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-subst1-endraw-raw-substn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;subst1&lt;/code&gt; ... &lt;code&gt;substN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;JavaScript objects with which to replace substitution strings within msg. This gives you additional control over the format of the output.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-consolewarn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.warn&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Outputs a warning message to the web console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;  &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;objN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;subst1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;substN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-obj1-endraw-raw-objn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;obj1&lt;/code&gt; ... &lt;code&gt;objN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-msg-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;msg&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A JavaScript string containing zero or more substitution strings.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-subst1-endraw-raw-substn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;subst1&lt;/code&gt; ... &lt;code&gt;substN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;JavaScript objects with which to replace substitution strings within msg. This gives you additional control over the format of the output.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Warning&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#advanced-methods"&gt;
  &lt;/a&gt;
  Advanced methods
&lt;/h1&gt;

&lt;p&gt;This section provides information on the advanced methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consoleassert-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.assert&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Writes an error message to the web console if the assertion is false.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;assertion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;  &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;objN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;assertion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;subst1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...,&lt;/span&gt;  &lt;span class="nx"&gt;substN&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-assertion-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;assertion&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Any boolean expression. If the assertion is false, the message is written to the console.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-obj1-endraw-raw-objn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;obj1&lt;/code&gt; ... &lt;code&gt;objN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-msg-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;msg&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A JavaScript string containing zero or more substitution strings.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-subst1-endraw-raw-substn-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;subst1&lt;/code&gt; ... &lt;code&gt;substN&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;JavaScript objects with which to replace substitution strings within msg. This gives you additional control over the format of the output.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The number &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; is even&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;errorMessage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The number &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; is not even&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-consolecount-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.count&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Logs the number of times that this particular call to &lt;code&gt;count()&lt;/code&gt; was called.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-label-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;label&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A JavaScript string. If supplied, this method outputs the number of times it has been called with that label. If omitted, &lt;code&gt;count()&lt;/code&gt; behaves as though it was called with the "default" label.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hi &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bob&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-consolecountreset-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.countReset&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Resets the counter used with &lt;code&gt;console.count()&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;countReset&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-label-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;label&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A JavaScript string. If supplied, this method resets the count for that label to 0. If omitted, &lt;code&gt;countReset()&lt;/code&gt; resets the default counter to 0.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hi &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bob&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;countReset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bob&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-consoledir-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.dir&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Displays an interactive list of the properties of a specific JavaScript object.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-object-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;object&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A JavaScript object whose properties should be output.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-consoledirxml-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.dirxml&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Displays an interactive tree of the descendant elements of the specified XML/HTML element. If it is not possible to display as an element the JavaScript Object view is shown instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dirxml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-object-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;object&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A JavaScript object whose properties should be output.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-raw-consolegroup-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.group&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Creates a new inline group in the web console log. This indents following console messages by an additional level until &lt;code&gt;console.groupEnd()&lt;/code&gt; is called.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-label-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;label&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Label for the group. This does not work with &lt;code&gt;console.groupEnd&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is the outer level&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Level 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Level 3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;More of level 3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Back to level 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Back to the outer level&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-consolegroupcollapsed-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.groupCollapsed&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Creates a new inline group in the web console. Unlike &lt;code&gt;console.group()&lt;/code&gt;, the new group is created collapsed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupCollapsed&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-label-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;label&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Label for the group.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-raw-consolegroupend-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.groupEnd&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Exits the current inline group in the web console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;p&gt;None&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-raw-consoletable-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.table&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Displays tabular data as a table.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-data-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;data&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;The data to display. This must be either an array or an object.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-columns-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;columns&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;An array containing the names of columns to include in the output.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// An object&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// An array&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Apples&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Oranges&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bananas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="c1"&gt;// An array of objects&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;city1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;New York&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;New York&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;city2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Chicago&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Illinois&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;city3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Los Angeles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;California&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;city1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;city2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;city3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-consoletime-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.time&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Starts a timer that you can use to track how long an operation takes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-label-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;label&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;The name to give the new timer. This will identify the timer; use the same name when calling &lt;code&gt;console.timeEnd()&lt;/code&gt; to stop the timer and get the time output to the console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;answer time&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Click to continue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;answer time&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Do a bunch of other stuff...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;answer time&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#-raw-consoletimeend-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.timeEnd&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Stops a timer that was previously started by calling &lt;code&gt;console.time()&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-label-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;label&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;The name of the timer to stop. Once stopped, the elapsed time is automatically outputted to the web console.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-raw-consoletimelog-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.timeLog&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Logs the current value of a timer that was previously started by calling &lt;code&gt;console.time()&lt;/code&gt; to the console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-label-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;label&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;The name of the timer to log to the console.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-raw-consoletrace-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.trace&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Outputs a stack trace to the web console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-any-data-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;...any, ...data&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Zero or more objects to be output to console along with the trace. These are assembled and formatted the same way they would be if passed to the &lt;code&gt;console.log()&lt;/code&gt; method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>console</category>
      <category>cheatsheet</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Self-care strategies for (slightly!) less social media scrolling during covid</title>
      <author>Noƒçnica Fee</author>
      <pubDate>Fri, 16 Apr 2021 19:19:04 +0000</pubDate>
      <link>https://dev.to/rudderstack/self-care-strategies-for-slightly-less-social-media-scrolling-during-covid-4o8b</link>
      <guid>https://dev.to/rudderstack/self-care-strategies-for-slightly-less-social-media-scrolling-during-covid-4o8b</guid>
      <description>&lt;p&gt;&lt;em&gt;cover by &lt;a href="https://commons.wikimedia.org/w/index.php?curid=83165549"&gt;Michal Klajban - Own work, CC BY-SA 4.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can work out more, read more, cook more, and do any other 'self-care' to not be on screens, yet it's still surprisingly hard to not constantly log into social media like checking a baby breathing. At least, this is extremely the case for myself. It's easy for me to notice in others addictive social media posting patterns, but it's much harder to notice my own kinds of madness! But since shaming doesn't particularly work (and honestly, we deserve to be kinder to ourselves about our social media screentime given that we're all surviving an uprecedented pandemic in isolation), what's a better way to positively reframe this as to figure out the root of the problem and then care for our true needs?&lt;/p&gt;

&lt;p&gt;Anyone who is 'too online' is really just craving connection to something rewarding. And this isn't at all an unreasonable or bad thing in the first place, particularly in a time where social distancing saves lives! Our whole lives have been upended and we still no longer have access to the offline activities and social life we once had before. Therefore, it's imperative to incorporate small, gentle ways to spend less time staring at screens, and more time doing activities that retain a similar 'validation loop' and social availability that social media offers. Here's a few ways that help mitigate the chronic disconnect that leads to endless scrolling:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Changing your twitter account to private, or having locked/private social media, is especially helpful as to finally retrain your mind to use social media not as a tool for branding or virality but just to keep up with your favorite people who are just sharing parts of their everyday lives. It's a wonderful change to finally get to know people on more intimate and human level instead of just follow and keep up with those who write content for clicks!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Similarly to the first tip, hanging out on instagram live streams or twitch channels is a great way to still be on social media but not have to feel the compulsion to 'perform' yet you get to watch the stream hosts and chat with their community in real time. It's a much different social media energy than twitter or facebook and is much more similar in experience as listening to podcasts, except with the added fun of live interaction and getting to comment on the stream.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hobbies that require using both hands, especially involving crafts, such as cooking, doing a puzzle, or woodworking, are game-changingly helpful soothers. Drawing especially has been a rewarding hobby for me to personally get back into; the joy of seeing my own artistic improvement on an immediate basis, via practicing in a sketchbook and filling up more and more pages every day, allows for a sense of ensuring a 'validation loop' reward for putting in the work, which has significantly helped me not feel a need to scroll endlessly on social media. As humans, we all love to see something we create or build grow a little bit every day with our own efforts - through daily creative rituals that relax or excite us, that ideally involves both hands to do, we can manage our chronic disconnect in an emotionally soothing and rewarding manner.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Remember, you don't need to do a hardcore 'digital detox' and refrain cold turkey from all social media! It's unrealistic to uninstall all your apps, stop checking your email, and refrain from socializing and keeping up with others entirely. Being online is a much more normal part of daily life now - with a set of planned strategies to make the best use of your energy, you will find yourself able to recuperate during social isolation better and better.&lt;/p&gt;

</description>
      <category>selfcare</category>
      <category>discuss</category>
      <category>worklife</category>
    </item>
    <item>
      <title>Trabajar en equipo </title>
      <author>Arturo Gamboa</author>
      <pubDate>Fri, 16 Apr 2021 19:13:07 +0000</pubDate>
      <link>https://dev.to/theriusblackers/trabajar-en-equipo-2e9k</link>
      <guid>https://dev.to/theriusblackers/trabajar-en-equipo-2e9k</guid>
      <description>&lt;h1&gt;
  &lt;a href="#bienvenida"&gt;
  &lt;/a&gt;
  Bienvenida
&lt;/h1&gt;

&lt;p&gt;¬°Hi devs! Hoy les traigo un post, el cu√°l es sobre mi experiencia en el campo laboral en equipo. Llev√© mis rega√±os,  sent√≠ frustraci√≥n muchas veces, y durante un buen tiempo pens√© que no pod√≠a hacerlo... As√≠ que, ¬° Vamos all√°!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#todo-tiene-un-comienzo"&gt;
  &lt;/a&gt;
  todo tiene un comienzo
&lt;/h2&gt;

&lt;p&gt;Cuando entr√© en el grupo de desarrolladores web, sent√≠ que era el que sab√≠a menos. La verdad cuando entr√© pens√© que iba a echarlo todo a perder  (nunca tuve un autoestima muy alta que digamos). Cuando el l√≠der del proyecto me dijo para entrar, fue de una manera bastante graciosa,  yo le dije que me gustar√≠a participar en alg√∫n proyecto,  y casualmente ten√≠a uno, pero yo lo dec√≠a a la larga, as√≠ como cuando aprendiera a hackear con css (recalco que es imposible), y nunca me pas√≥ por la cabeza que √©l tuviera un proyecto. Acept√© sin titubeos, aunque  por dentro no quer√≠a,  me dije que bueno, ya metiste la pata por as√≠ decirlo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dentro-del-equipo"&gt;
  &lt;/a&gt;
  dentro del equipo
&lt;/h2&gt;

&lt;p&gt;Yo nunca hab√≠a hecho un trabajo como desarrollador web en equipo, mucho menos v√≠a Internet, ni sab√≠a que era kanban  (la metodolog√≠a que usamos), sonaba como una cosa super extra√±a y lejana. Para trabajos en equipo se necesita un control de versiones,y ellos optaron por git y github; as√≠ que aprend√≠ git y github, luego a repasar html y css, cuando me un√≠ al grupo, me dijeron que necesitaba aprender Figma, sonaba como aprender a volar en ese entonces, luego que no se usar√≠a frameworks  ( pensaba que unos cuantos kybites de bootstrap me salvar√≠an del desastre, mala jugada), me qued√© como, &lt;em&gt;creo que no oportunidad de triunfar&lt;/em&gt; y luego vi el dise√±o, parec√≠an los planos de Zuckerberg para Facebook, una pasada.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#empezando-a-codear"&gt;
  &lt;/a&gt;
  empezando a codear
&lt;/h2&gt;

&lt;p&gt;Cuando empec√© a echar c√≥digo, unas semanas despu√©s por contra tiempos, me d√≠ cuenta que no era tan dif√≠cil el dise√±o, pero de pronto un problema.  A m√≠ me tocaba hacer un formulario en html  y estilizarlo, hasta ese entonces no hab√≠a hecho un form porque no me era necesario, pero lo encontr√© algo dif√≠cil al principio. Luego lo termin√© y lo mand√© con PR, el l√≠der lo rechaz√≥ porque era m√°s avanzado que yo y sab√≠a una mejor soluci√≥n. Luego lo arregl√© un poco y qued√≥ bien.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lo-que-aprend%C3%AD"&gt;
  &lt;/a&gt;
  lo que aprend√≠
&lt;/h2&gt;

&lt;p&gt;Fue una experiencia bastante grata, aprend√≠ un mont√≥ y consegu√≠ amigos que me han ayudado desde entonces, me di cuenta que realmente no era tan malo en el dise√±o web, la verdad, cuando empec√© no cre√≠ que podr√≠a ir m√°s all√° de html, pensaba que s√≥lo Albert Einstein y Elon Musk podr√≠an entender y hacer cosas √∫tiles y sorprendentes, aprend√≠ lo hermoso de trabajar en equipo, y sobre todo, aprend√≠ que &lt;strong&gt;ense√±ar es la mejor manera de aprender&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#palabras-finales"&gt;
  &lt;/a&gt;
  palabras finales
&lt;/h2&gt;

&lt;p&gt;As√≠ que, si crees que &lt;em&gt;no tienes madera para la programaci√≥n&lt;/em&gt; seguramente est√°s equivocado, puede ser que s√≠, no sea lo tuyo, pero tambi√©n puede ser que llegues a ser un gran dev, mi recomendaci√≥n, &lt;strong&gt;para estar parado, primero tienes que estar en el suelo, no te rindas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Eso es todo devs, espero que les haya gustado, ¬°goodbye devs!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>kanban</category>
    </item>
    <item>
      <title>My first git alias</title>
      <author>Jamund Ferguson</author>
      <pubDate>Fri, 16 Apr 2021 19:04:50 +0000</pubDate>
      <link>https://dev.to/xjamundx/my-first-git-alias-4ldh</link>
      <guid>https://dev.to/xjamundx/my-first-git-alias-4ldh</guid>
      <description>&lt;p&gt;At work I'm often jumping back and forth between various branches and pull requests and I sometimes find myself struggling to remember the name of a recent branch I need to use.&lt;/p&gt;

&lt;p&gt;For years I've used &lt;code&gt;git reflog&lt;/code&gt; as a short-cut to look at my git history and identify my recent work. It works okay, but it's very hard to make sense of:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bj3aQpSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by2umf5k9jqztnpil2ym.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bj3aQpSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by2umf5k9jqztnpil2ym.png" alt="git reflog output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other times I try to use &lt;code&gt;git branch&lt;/code&gt;, but that doesn't give you much context about anything and of course it can be easy to drown in the large number of branches:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~/d/n/webapp (typescript ‚úî) git branch
  add-cognito-auth
  doritos
  eslint-prettier
  main
* typescript
  updated-husky
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Recently I got frustrated by this and decided to find a solution and stumbled on this stackoverflow question, &lt;a href="https://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit"&gt;How can I get a list of git branches ordered by most recent commit?&lt;/a&gt;, which taught me two really useful techniques.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;You can sort branches by commit date&lt;/strong&gt; using &lt;code&gt;git branch --sort=-committerdate&lt;/code&gt; which is great in an of itself (watch out for the &lt;code&gt;-&lt;/code&gt; after &lt;code&gt;sort=&lt;/code&gt; which puts the most recent branches first)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;You can enhance this output a bit&lt;/strong&gt; using this wild syntax &lt;code&gt;git branch --sort=-committerdate --format='%(HEAD)%(color:yellow)%(refname:short) | %(color:bold green)%(committerdate:relative) | %(color:blue)%(subject)%(color:reset)' --color=always&lt;/code&gt; which I'm never going to remember.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Which led me to create my first git alias after over 12 years of using it. Here's how I did it and here's what it looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global alias.branches "branch --sort=-committerdate --format='%(HEAD)%(color:yellow)%(refname:short) | %(color:bold green)%(committerdate:relative) | %(color:blue)%(subject)%(color:reset)' --color=always"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That command added this to the boottom of my &lt;code&gt;~/.gitconfig&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[alias]
        branches = branch --sort=-committerdate --format='%(HEAD)%(color:yellow)
%(refname:short) | %(color:bold green)%(committerdate:relative) | %(color:blue)%(subject)%(color:reset)' --color=always
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when I type &lt;code&gt;git branches&lt;/code&gt; I see this lovely output:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IF8hRmrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ua9191j2s8wlcq8rc61k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IF8hRmrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ua9191j2s8wlcq8rc61k.png" alt="nicely formatted git branch list"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Git isn't always the easiest to use, but this alias has made it just a little bit better, for me anyway. What kind of aliases do you use?&lt;/p&gt;

</description>
      <category>github</category>
      <category>linux</category>
    </item>
  </channel>
</rss>
