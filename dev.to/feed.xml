<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>EsoList submission</title>
      <author>JavaCode7</author>
      <pubDate>Mon, 10 May 2021 14:26:12 +0000</pubDate>
      <link>https://dev.to/javacode7/esolist-submission-40jm</link>
      <guid>https://dev.to/javacode7/esolist-submission-40jm</guid>
      <description>&lt;p&gt;This is the submission page for the EsoList.&lt;/p&gt;

</description>
      <category>esoteric</category>
      <category>esolang</category>
    </item>
    <item>
      <title>About the EsoList</title>
      <author>JavaCode7</author>
      <pubDate>Mon, 10 May 2021 14:25:06 +0000</pubDate>
      <link>https://dev.to/javacode7/about-the-esolist-31i5</link>
      <guid>https://dev.to/javacode7/about-the-esolist-31i5</guid>
      <description>&lt;p&gt;I am opening an article to celebrate esoteric languages. It is called the EsoList. It is going to contain esoteric languages for you to comment on and discuss. You can submit an esolang (provided it is on github and has a dev.to article) to the list by simply commenting on the &lt;a href="https://dev.to/javacode7/esolist-submission-40jm"&gt;EsoList Submission article&lt;/a&gt; with the name of your esolang, its dev article and its github page as well as a short description (you may also include any other information).&lt;/p&gt;

</description>
      <category>esolang</category>
      <category>esoteric</category>
    </item>
    <item>
      <title>Generate QR Code In Javascript</title>
      <author>Bibek</author>
      <pubDate>Mon, 10 May 2021 14:05:24 +0000</pubDate>
      <link>https://dev.to/bibekkakati/generate-qr-code-in-javascript-2o67</link>
      <guid>https://dev.to/bibekkakati/generate-qr-code-in-javascript-2o67</guid>
      <description>&lt;p&gt;Hello everyone üëã, this is going to be a very short article where I will show how can we generate a QR Code for any content in JavaScript.&lt;/p&gt;

&lt;p&gt;Obviously, I am not going to implement everything from scratch and why should one do that when we have a plethora of useful libraries in JavaScript.&lt;/p&gt;

&lt;p&gt;I came across this awesome lightweight library or you can say a simple script &lt;a href="https://github.com/davidshimjs/qrcodejs"&gt;qrcodejs&lt;/a&gt;. It is very easy to use and is reliable too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Download this zip file: &lt;a href="https://github.com/davidshimjs/qrcodejs/zipball/master"&gt;qrcodejs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extract it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now you can use the &lt;code&gt;qrcode.js&lt;/code&gt; and &lt;code&gt;qrcode.min.js&lt;/code&gt; file in your project.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;Include the &lt;code&gt;qrcode.js&lt;/code&gt; file in your HTML file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;...
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./qrcode.js"&lt;/span&gt; &lt;span class="na"&gt;defer&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Give an &lt;code&gt;id&lt;/code&gt; to the &lt;code&gt;div&lt;/code&gt; where you want to show the generated QR Code. Here I have used &lt;code&gt;"qrcode"&lt;/code&gt; as my &lt;code&gt;id&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;...
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"qrcode"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will create an object from the &lt;code&gt;QRCode&lt;/code&gt; function. Need to pass the &lt;code&gt;id&lt;/code&gt; of the output &lt;code&gt;div&lt;/code&gt; which is &lt;code&gt;"qrcode"&lt;/code&gt; in this case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;QR_CODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QRCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;qrcode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;colorDark&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#000000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;colorLight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffffff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;correctLevel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;QRCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CorrectLevel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;H&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;correctLevel&lt;/code&gt;: &lt;code&gt;L&lt;/code&gt; for low, &lt;code&gt;M&lt;/code&gt; for medium, &lt;code&gt;H&lt;/code&gt; for high.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Generate QRCode by calling the &lt;code&gt;makeCode&lt;/code&gt; method of the QRCode object, which expects the &lt;code&gt;data&lt;/code&gt; as its argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;QR_CODE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://buymeacoffee.com/bibekkakati&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;It will automatically insert the generated QRCode in the &lt;code&gt;div&lt;/code&gt; whose &lt;code&gt;id&lt;/code&gt; has been provided while creating the QRCode object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example‚ú®
&lt;/h3&gt;

&lt;p&gt;Check out the GitHub &lt;a href="https://github.com/bibekkakati/qr-gen"&gt;Repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Try it out here: &lt;a href="https://bibekkakati.github.io/qr-gen/"&gt;Live&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yZLqZgrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajtycj7dkf5g364isx0i.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yZLqZgrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajtycj7dkf5g364isx0i.jpeg" alt="Demo Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Screenshot is taken from Google Lens while scanning.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Enjoyed? Give it a thumbs-up üëç&lt;/p&gt;

&lt;p&gt;Thank you for reading | Feel free to &lt;a href="https://bibekkakati.me"&gt;connect&lt;/a&gt; üëã&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Originally published on &lt;a href="https://blog.bibekkakati.me/generate-qr-code-in-javascript"&gt;blog.bibekkakati.me&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/bibekkakati"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7pOmeWpX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dbibekkakati%26button_colour%3DFFDD00%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3Dffffff"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
      <category>design</category>
    </item>
    <item>
      <title>Linux Commands Cheat Sheet
</title>
      <author>CodeSnail üêå</author>
      <pubDate>Mon, 10 May 2021 14:02:46 +0000</pubDate>
      <link>https://dev.to/soniarpit/linux-commands-cheat-sheet-150c</link>
      <guid>https://dev.to/soniarpit/linux-commands-cheat-sheet-150c</guid>
      <description>&lt;p&gt;This commands helps you anytime&lt;/p&gt;

&lt;h2 id="0-basic-linux-commands"&gt;Basic Linux commands&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Lists all files and directories in the present working directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ls-R&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Lists files in sub-directories as well&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ls-a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Lists hidden files as well&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ls-al&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Lists files and directories with detailed information like permissions,size, owner, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cd or cd ~&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Navigate to HOME directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cd ..&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Move one level up&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;To change to a particular directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cd /&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Move to the root directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cat &amp;gt; filename&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Creates a new file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cat filename&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Displays the file content&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cat file1 file2 &amp;gt; file3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Joins two files (file1, file2) and stores the output in a new file (file3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mv file "new file path"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Moves the files to the new location&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mv filename new_file_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Renames the file to a new filename&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sudo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Allows regular users to run programs with the security privileges of the superuser or root&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rm filename&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Deletes a file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;man&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Gives help information on a command&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;history&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Gives a list of all past commands typed in the current terminal session&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Clears the terminal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mkdir directoryname&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Creates a new directory in the present working directory or a at the specified path&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rmdir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Deletes a directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Renames a directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pr -x&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Divides the file into x columns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pr -h&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Assigns a header to the file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pr -n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Denotes the file with Line Numbers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lp -nc , lpr c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Prints ‚Äúc‚Äù copies of the File&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lp-d lp-P&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Specifies name of the printer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;apt-get&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Command used to install and update packages&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;mail -s 'subject' -c 'cc-address' &lt;/code&gt;¬†&lt;code&gt; -b 'bcc-address' 'to-address'&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Command to send email&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mail -s "Subject" to-address &amp;lt; Filename&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Command to send email with attachment&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="1-file-permission-commands"&gt;File Permission commands&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ls-l&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;to show file type and access permission&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;r&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;read permission&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;write permission&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;execute permission&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;no permission&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Chown user&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;For changing the ownership of a file/directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Chown user:group filename&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;change the user as well as group for a file or directory&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="2-environment-variables-command"&gt;Environment Variables command&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;echo $VARIABLE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;To display value of a variable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;env&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Displays all environment variables&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;VARIABLE_NAME= variable_value&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Create a new variable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Unset&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Remove a variable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;export Variable=value&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;To set value of an environment variable&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Read more: &lt;a href="https://www.codesnail.com/linux-commands-cheat-sheet/"&gt;Linux commands cheat sheet&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>cheatsheet</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Learn How to Convert: Text to Handwriting, Handwriting to Text, Text to Speech &amp; Speech to Text</title>
      <author>Konchada Sai Ansul</author>
      <pubDate>Mon, 10 May 2021 13:28:59 +0000</pubDate>
      <link>https://dev.to/saiansulsblog/learn-how-to-convert-text-to-handwriting-handwriting-to-text-text-to-speech-speech-to-text-1pk9</link>
      <guid>https://dev.to/saiansulsblog/learn-how-to-convert-text-to-handwriting-handwriting-to-text-text-to-speech-speech-to-text-1pk9</guid>
      <description>&lt;p&gt;Hello Guys, Welcome back to another post of Sai Ansul's Blog. In this blog we are gonna learn &lt;br&gt;
How to Convert: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Text to Handwriting,&lt;/li&gt;
&lt;li&gt;Handwriting to Text, &lt;/li&gt;
&lt;li&gt;Text to Speech ,&lt;/li&gt;
&lt;li&gt;Speech to Text.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let's start, &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-text-to-handwriting"&gt;
  &lt;/a&gt;
  1. Text to Handwriting
&lt;/h2&gt;

&lt;p&gt;Since in this pandemic period we students has got plenty of assignments to be done. isn't it?&lt;br&gt;
So, I have got you a very easy and interesting way to submit those assignments in just seconds.&lt;br&gt;
Wanna know how?&lt;/p&gt;

&lt;p&gt;So firstly open this &lt;a href="https://saurabhdaware.github.io/text-to-handwriting/#how-to-add-handwriting"&gt;link&lt;/a&gt; . &lt;br&gt;&lt;br&gt;
After you open it you will see a interface like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dsjlF3zk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616158822277/lHK0HENbU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dsjlF3zk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616158822277/lHK0HENbU.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Where you can replace the text of the input image with yours and see the magic.&lt;br&gt;&lt;br&gt;
There are some customizations also available over there like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Handwriting font&lt;/li&gt;
&lt;li&gt;Font size&lt;/li&gt;
&lt;li&gt;Ink color&lt;/li&gt;
&lt;li&gt;Effects&lt;/li&gt;
&lt;li&gt;Resolution&lt;/li&gt;
&lt;li&gt;Spacing options &lt;/li&gt;
&lt;li&gt;Margin options &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And after customizing you need to click on &lt;strong&gt;Generate Image&lt;/strong&gt; , the image will be generated and then you can download the image and use it. You can also generate multiple images at a time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ft0K65xp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616159473575/3TKPWysvm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ft0K65xp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616159473575/3TKPWysvm.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-handwriting-to-text"&gt;
  &lt;/a&gt;
  2. Handwriting to Text
&lt;/h2&gt;

&lt;p&gt;This conversion is popularly known as OCR- Optical Character Recognition.&lt;/p&gt;

&lt;p&gt;There are many sites and apps this feature is available to extract the text in many languages.&lt;br&gt;
This feature is also available in many document scanners.&lt;/p&gt;

&lt;p&gt;The best 5 online sites that I like the most for OCR are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.onlineocr.net/"&gt;OnlineOCR.&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://convertio.co/ocr/"&gt;Convertio&lt;/a&gt; .&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.newocr.com/"&gt;NewOCR.&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://finereaderonline.com/en-us"&gt;ABBYY FineReader Online.&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.i2ocr.com/"&gt;i2OCR.&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The document scanners that has OCR are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://play.google.com/store/apps/details?id=com.cv.docscanner"&gt;Doc Scanner &lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://play.google.com/store/apps/details?id=in.insomniactech.proscanner"&gt;Cam Scanner Indian&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://play.google.com/store/apps/details?id=com.adobe.scan.android"&gt;Adobe Scan&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TJRUQfg---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616162740694/RGRTjx6Ry.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TJRUQfg---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616162740694/RGRTjx6Ry.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can upload the document and select the language that document's text has.&lt;/p&gt;

&lt;p&gt;And the magic happens after the conversion is completed, the document which will be generated and you will be select the text and use anywhere. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-text-to-speech"&gt;
  &lt;/a&gt;
  3. Text to Speech
&lt;/h2&gt;

&lt;p&gt;This conversion is known as TTS- Text to Speech Synthesizer.&lt;/p&gt;

&lt;p&gt;This feature is also available in adobe pdf viewer also&lt;/p&gt;

&lt;p&gt;The top 3 online sites for these are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="http://www.cross-plus-a.com/balabolka.htm"&gt;Balabolka&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.naturalreaders.com/"&gt;Natural reader online reader&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://cloud.google.com/text-to-speech"&gt;Google Cloud Text-to-Speech&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MoUTdHFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616164322882/f4ALQmESp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MoUTdHFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616164322882/f4ALQmESp.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the image you can upload files with various extensions and it will convert to mp3 audio file which you can download and hear anywhere.&lt;/p&gt;

&lt;p&gt;If you have noticed some time ago  &lt;a href="https://hashnode.com/"&gt;Hashnode&lt;/a&gt;  has also launched a feature named audio blog that also use the technology.&lt;/p&gt;

&lt;p&gt;This also has many customizations like in voices, speed and many more.&lt;/p&gt;

&lt;p&gt;Go check it out&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-speech-to-text"&gt;
  &lt;/a&gt;
  4. Speech to Text
&lt;/h2&gt;

&lt;p&gt;Speech to text conversion is the process of converting spoken words into written texts.&lt;/p&gt;

&lt;p&gt;Rather than typing long documents and making your hands pain  you just need to read out it once.&lt;/p&gt;

&lt;p&gt;This process is also often called speech recognition.&lt;/p&gt;

&lt;p&gt;The top 3 online sites for these are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://www.google.com/docs/about/"&gt;Google Docs Voice Typing.&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.nuance.com/dragon.html"&gt; Dragon Professional Individual. &lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.brainasoft.com/braina/speech-to-text.html"&gt;Braina Pro&lt;/a&gt; .&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r4aLin8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616165744202/jBr2odDDn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r4aLin8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616165744202/jBr2odDDn.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the conversion the txt file will be generated and you can use it anywhere.&lt;/p&gt;

&lt;p&gt;This is it for today guys. If you liked this blog and want to support my efforts, do share it with as many friends as possible. And feel free to drop in suggestions for improvements.&lt;/p&gt;

&lt;p&gt;If you liked this blog and want to support my efforts, do share it with as many friends as possible. And feel free to drop in suggestions for improvements.&lt;/p&gt;

</description>
      <category>beginners</category>
    </item>
    <item>
      <title>Basics of Java #12</title>
      <author>Chathu Rashmini</author>
      <pubDate>Mon, 10 May 2021 13:04:52 +0000</pubDate>
      <link>https://dev.to/chathurashmini/basics-of-java-12-4gnc</link>
      <guid>https://dev.to/chathurashmini/basics-of-java-12-4gnc</guid>
      <description>&lt;p&gt;This article is on switch statements and loops.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#switch-statement"&gt;
  &lt;/a&gt;
  Switch statement
&lt;/h1&gt;

&lt;p&gt;Assume you have built a website and a user is trying to log into it. You are asking the user to enter his email. Then you are checking whether that email is stored in your database and if so you are fetching his user role (admin, blog writer, reader). If mail is not found the user is a guest. After that you want to print this user roles. To implement this you can easily use switch statements.&lt;br&gt;
Look at the code block given below (Assume you have already fetched the user role from the database into a String variable named &lt;code&gt;userole&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userRole&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"admin"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi you are an admin"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"blog writer"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi you are a blog writer"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"reader"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi you are a reader"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi you are a guest. Please register to log in."&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In here the first case checks whether the value of the &lt;code&gt;userRole&lt;/code&gt; is 'admin'. If so it will print "Hi you are an admin". You can see that I have added &lt;code&gt;break&lt;/code&gt; after the print statement. What &lt;code&gt;break&lt;/code&gt; does is that going out of the switch statements. Which means once a particular case is achieved, no other cases will be evaluated. You will simply go out of the switch block. Same process goes to the cases 'blog writer' and 'reader'.&lt;br&gt;
Next comes the case where you were unable to find the email in the database. Therefore that email does not have a &lt;code&gt;userRole&lt;/code&gt; yet. SO by &lt;code&gt;default&lt;/code&gt; the last case will print the 'guest' statement. There we have not used &lt;code&gt;break&lt;/code&gt;. This is because, &lt;code&gt;default&lt;/code&gt; is the last case in the switch block. So it will automatically go out of the switch block. No &lt;code&gt;break&lt;/code&gt; statement is required here. This might be a bit messy to understand but once you get used to it applying switch statements will become handy.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  Loops
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#for-loop"&gt;
  &lt;/a&gt;
  for Loop
&lt;/h2&gt;

&lt;p&gt;Think that you want to print numbers from 1 to 5. Then you will think that you have to write &lt;code&gt;pritln()&lt;/code&gt; line 5 times. But what if you have an opportunity to write just one &lt;code&gt;println()&lt;/code&gt; and iterate it 5 times? Sounds great right. Let's see how we can do that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's evaluate the code. We have use iterations here by using a 'for loop'. As you can see I have declared a variable &lt;code&gt;i&lt;/code&gt; inside the parenthesis of the &lt;code&gt;for()&lt;/code&gt;. After that we have give the range for 'i'. Here we want to print numbers from 1 to 5. Therefore &lt;code&gt;i&lt;/code&gt; has to be iterated from 1 to 5. So I have mentioned as &lt;code&gt;i = 1&lt;/code&gt; and after a semi colon (;) I have stated that &lt;code&gt;i &amp;lt;= 5&lt;/code&gt;. This means &lt;code&gt;i&lt;/code&gt; goes from 1 to 5. You also can write it as &lt;code&gt;for (int i = 1; i &amp;lt; 6; i++)&lt;/code&gt;. Here also you can get same output. Inside 'for()' loop you have to write the code lines that has to be executed. Here since we are only writing a single code line, we need not to use curly braces.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For loops are used in situations where the number of the iterations are known before hand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h3&gt;

&lt;p&gt;Given an array, books = {"Twilight", "New moon", "Eclipse", "Breaking dawn", "Safe Heaven", "Kite Runner", "Hunger Games"} print all its elements using a for loop.&lt;/p&gt;

&lt;p&gt;How did you code the above task? Let me guess. I assume that, you entered a range in a for loop like (int i=0; i&amp;lt;7; i++) and print the elements by calling the index. However, there is an easier way of doing the same task. Check out this code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Twilight"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"New moon"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Eclipse"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Breaking dawn"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Safe Heaven"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Kite Runner"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Hunger Games"&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the string &lt;code&gt;book&lt;/code&gt; in the parenthesis refers to a single element in the array &lt;code&gt;books&lt;/code&gt;. Therefore, this will print all the elements in the &lt;code&gt;books&lt;/code&gt; array accurately. The negative side of this method is that you can only iterate from beginning to the end. Like you cannot get the output as Hunger Games, Kite Runner, ... Twilight (from right to left) order. And also since you do not have access to index, you won't be able to know the index value of a particular element when you use this method.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#while-loop"&gt;
  &lt;/a&gt;
  While Loop
&lt;/h1&gt;

&lt;p&gt;What if you do not know the number of the iterations beforehand? Then you can use 'while loop'. Check the below code;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code we first declared an integer variable &lt;code&gt;i&lt;/code&gt; and initialized it into zero. The code line &lt;code&gt;while(i&amp;lt;10)&lt;/code&gt; ensures that the value of &lt;code&gt;i&lt;/code&gt; is always less than 10. Which means the code inside the &lt;code&gt;while()&lt;/code&gt; loop will only execute if the &lt;code&gt;i&lt;/code&gt; is less than 10. Then we print &lt;code&gt;i&lt;/code&gt; and increment it by one.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While loops can be used in conditions where you does not know the number of iterations beforehand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Assume in a case where you want user to add subject names, but you do not know number of subjects that are available. What can you do in such a scenario? You have to use a 'while loop' as you do not know the number of iterations here. You can ask the user to enter some word like 'quit' or 'finish', if he has entered all the subjects. Then you can make the loop run only when the input word is not equal to the termination word. Go through the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;userInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"quit"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Subject: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userInput&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextLine&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;toLowerCase&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;subjectCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Number of subjects = "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;subjectCount&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In above code we have taken user input as a &lt;code&gt;Scanner&lt;/code&gt; class object, and then has read the line and has stored into the string &lt;code&gt;input&lt;/code&gt;. Here you can see that I have used the method &lt;code&gt;toLowerCase()&lt;/code&gt;. Why do we need that? Look at the condition inside the parenthesis of the while loop. What it means that the value stored in &lt;code&gt;input&lt;/code&gt; string &lt;em&gt;cannot&lt;/em&gt; be equal to 'quit'. All the letters in 'quit' is in lowercase. Therefore, if user entered like 'Quit' or 'QUIT' the loop will not terminate. So to avoid those disconcerts we have to convert the user input into lowercase.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-while-loops"&gt;
  &lt;/a&gt;
  do while loops
&lt;/h2&gt;

&lt;p&gt;There is only one deference in 'do-while' loop when compared to 'while' loops. In while loop, statements will execute if and only if the condition given in the loop is true. But in 'do-while' loops statements gets executed once before checking the conditions given for the loop. Check the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, first &lt;code&gt;println()&lt;/code&gt; method gets executed and print '0'. After that it will increment it value to 1. Then only the condition in while loop is taken under consideration. Because of this we can say that 'do-while' loops will definitely execute 'at least' only once.&lt;/p&gt;

&lt;p&gt;And with that we can wrap up this article :)&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Who can offer welcome?</title>
      <author>lussati santos</author>
      <pubDate>Mon, 10 May 2021 12:59:06 +0000</pubDate>
      <link>https://dev.to/lussatisantos/who-can-offer-welcome-5gho</link>
      <guid>https://dev.to/lussatisantos/who-can-offer-welcome-5gho</guid>
      <description></description>
    </item>
    <item>
      <title>Making Hotwire play nice with ViewComponent</title>
      <author>Kudakwashe Paradzayi</author>
      <pubDate>Mon, 10 May 2021 12:51:04 +0000</pubDate>
      <link>https://dev.to/kudapara/making-hotwire-play-nice-with-viewcomponent-51lf</link>
      <guid>https://dev.to/kudapara/making-hotwire-play-nice-with-viewcomponent-51lf</guid>
      <description>&lt;p&gt;Have you ever wondered if you could use &lt;a href="//hotwire.dev"&gt;hotwire&lt;/a&gt; with &lt;a href="https://github.com/github/view_component"&gt;&lt;code&gt;view_component&lt;/code&gt;&lt;/a&gt; instead of partials. If you have, maybe tried and failed, welcome here.&lt;/p&gt;

&lt;p&gt;By default &lt;a href="https://hotwire.dev"&gt;hotwire&lt;/a&gt; is made to work with partials, which is the built in way to extract 'components' in the context of rails based apps. In a certain application I was building I have used &lt;a href="https://github.com/github/view_component"&gt;&lt;code&gt;view_component&lt;/code&gt; (inspired by react)&lt;/a&gt; in place of partials because it is a framework for building reusable, testable &amp;amp; encapsulated view components in Ruby on Rails.&lt;/p&gt;

&lt;p&gt;It was all fun and games until I wanted to make &lt;a href="https://hotwire.dev"&gt;hotwire&lt;/a&gt; to work with the view components I had made.&lt;/p&gt;

&lt;p&gt;We will use an e-commerce application as an example to demonstrate the problem at hand.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LJ7ASqJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620650508471/XwXipgBgf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LJ7ASqJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620650508471/XwXipgBgf.gif" alt="freshstore-gif.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NB: no JavaScript was used in making this interactive, except for displaying the loading spinners&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hotwire uses websockets to broadcast changes to all clients listening, and this is very fast considering websockets maintain a persistent open connection with the client and the changes feel almost instantaneous. In this example when a user adds a product to cart, &lt;a href="https://hotwire.dev"&gt;hotwire&lt;/a&gt; will broadcast the new product component and it will be replaced on the frontend, smooth as an SPA, with minimum javascript.&lt;/p&gt;

&lt;p&gt;When a product is added to cart, we want to show it change on the UI, unlike a traditional API request which returns JSON, hotwire returns html, in the form of turbo streams. When the response arrives it will only change the specific section in the page that has a turbo frame that matches a specific id.&lt;/p&gt;

&lt;p&gt;Using view components in this context would also help reduce the response's payload to only contain that section that has to be replaced. However view components and turbo streams dont play nice together so I googled around for a quick solution and found &lt;a href="https://discuss.hotwire.dev/t/viewcomponents-not-rendering-with-rails-stream-helper/1813/2"&gt;this answer&lt;/a&gt; on the hotwire forum. I then used that answer to successfully render a ViewComponent in the response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# app/controller/carts_controller.rb

class CartsController &amp;lt; ApplicationController
  def update
    product = Product.find(cart_params[:product_id])
    line_item = CartUpdateService.call(@product, cart_params[:quantity])
    product_component = ProductComponent.new(
      product: product,
      quantity_in_cart: @line_item.quantity
    )

    respond_to do |format|
      format.turbo_stream {
        stream = turbo_stream.replace product do
           view_context.render(product_component)
        end

        render turbo_stream: stream

        head :ok
      }
    end
end

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This was a good solution until I realised that you can only render a stream once, so this crumbled when I wanted to broadcast changes to other areas of the application, like adding &lt;code&gt;line_items&lt;/code&gt; to the cart in the UI, updating cart count, etc. This is because, by design turbo broadcasts are meant to be initiated in the model, which I sort of thought as a code smell because not only was the model responsible for data persistence, validations and business logic, it was also responsible for the way the UI worked. We all strive for &lt;a href="https://thoughtbot.com/blog/skinny-controllers-skinny-models"&gt;skinny models&lt;/a&gt;, don't we.&lt;/p&gt;

&lt;p&gt;This was how it was before, when using partials&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# app/models/line_item.rb
class LineItem &amp;lt; ApplicationRecord
  ...

  after_create_commit :broadcast_prepend_line_item, if: :current_user_present?

  private def broadcast_prepend_line_item
    broadcast_prepend_to "#{Current.user.id}:line_items", partial: 'line_items/line_item', locals: { line_item: self, store: self.order.store }
  end
  ...
end

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And as far as I had researched there was no way to use View Component instead of partials to broadcast these updates.&lt;/p&gt;

&lt;p&gt;So I went and dug into the &lt;a href="https://github.com/hotwired/turbo-rails"&gt;hotwire source code&lt;/a&gt; to look for clues whether it was possible or not.&lt;/p&gt;

&lt;p&gt;After series of iterations I came up with the concept of &lt;code&gt;LiveComponent&lt;/code&gt;, a class that would inherit from &lt;code&gt;ViewComponent::Base&lt;/code&gt; but also include hotwire modules to allow broadcasts and streams. Here is the complete code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# app/components/live_component.rb

class LiveComponent &amp;lt; ViewComponent::Base
  include Turbo::FramesHelper, Turbo::Streams::StreamName, Turbo::Streams::Broadcasts

  attr_reader :streamable, :target

  def initialize(view_context: nil, **args)
    @view_context = view_context
  end

  def broadcast_replace
    return unless @view_context.present?

    broadcast_replace_later_to(
      streamable,
      target: target,
      content: @view_context.render(self)
    )
  end

  def broadcast_prepend
    return unless @view_context.present?

    broadcast_prepend_to(
      streamable,
      target: broadcast_target_default,
      content: @view_context.render(self)
    )
  end

  def broadcast_remove
    return unless @view_context.present?

    broadcast_remove_to(
      streamable,
      target: target
    )
  end

  private def broadcast_target_default
    target.class.model_name.plural
  end
end

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is exactly a ViewComponent with some live extras baked in. Continuing with out illustration of broadcasting changes to the line_items in the cart, we would implement it as a live component like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# app/components/live_line_item_component.rb

class LiveLineItemComponent &amp;lt; LiveComponent
  def initialize(view_context: nil, line_item:, current_user:)
    @line_item = line_item

    # these will be used by LiveComponent to identify
    # the stream channel and the targeted frame-tag on the UI
    @streamable = "#{current_user.id}:line_items"
    @target = @line_item

    super
  end

  def render?
    @line_item.quantity &amp;gt; 0
  end
end

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in the html templates you can then define&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;%= turbo_frame_tag dom_id(@line_item) do %&amp;gt;
   &amp;lt;!-- line item html logic --&amp;gt;
&amp;lt;% end %&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in &lt;code&gt;cart_controller.rb&lt;/code&gt; when you add to cart you can then use the live component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    respond_to do |format|
      format.turbo_stream {
        live_line_item_component = LiveLineItemComponent.new(view_context: view_context, line_item: @line_item, current_user: Current.user)
        if @line_item.destroyed?
          live_line_item_component.broadcast_remove
        elsif @line_item.quantity == 1 &amp;amp;&amp;amp; @line_item.updated_at == @line_item.created_at
          live_line_item_component.broadcast_prepend
        else
          live_line_item_component.broadcast_replace
        end

        ...
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I know the code is a little bit 'dirty' and I'm sure some of you smart people will find ways to improve on it.&lt;/p&gt;

&lt;p&gt;It was a fun little exploration and I am happy it worked out.&lt;/p&gt;

&lt;p&gt;Cheers ü•Ç&lt;/p&gt;

</description>
      <category>rails</category>
    </item>
    <item>
      <title>PHP vs Javascript - What should you choose?</title>
      <author>hrishikesh1990</author>
      <pubDate>Mon, 10 May 2021 12:43:23 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/php-vs-javascript-what-should-you-choose-5ob</link>
      <guid>https://dev.to/hrishikesh1990/php-vs-javascript-what-should-you-choose-5ob</guid>
      <description>&lt;p&gt;In this short tutorial, we take a closer look at a controversial topic that is PHP vs JavaScript. We look at their pros and cons and weigh them against each other. &lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at Flexiple, to write short curated tutorials around often used or interesting concepts. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;PHP vs JavaScript: An Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#javascript"&gt;JavaScript - Pros and Cons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#PHP"&gt;PHP - Pros and Cons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#thoughts"&gt;Closing thoughts - PHP vs JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#php-vs-javascript-an-overview"&gt;
  &lt;/a&gt;
  PHP vs JavaScript: An Overview&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Most blogs under this topic would mention that comparing PHP and JavaScripts are like comparing apples and oranges. However, the rationale supporting this is - PHP is used on the server-side, whereas JavaScript is primarily used on the client-side. Although javascript is largely used on the client-side, the development of NodeJS (A backend framework) has made javascript a full-stack programming language.&lt;/p&gt;

&lt;p&gt;Even though this does not level the playing field it does beg the question of whether a developer should choose - JavaScript/ PHP or developer the entire website using Javascript. And this blog is aimed towards answering this question.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-pros-and-cons"&gt;
  &lt;/a&gt;
  JavaScript - Pros and Cons&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;JavaScript has been around for ages since 1995, this has not only allowed the creators to refine the language but has also helped grow a large community of active users. In turn, resulting in a plethora of well-documented tutorials and troubleshooting methods readily available on the internet.&lt;/p&gt;

&lt;p&gt;JavaScript as a language was developed to create dynamic and interactive websites improving the user experience. Catering to the client-side it was built to have minimal server interaction, reducing the load on the server. And because of this high-performance Javascript is often used on one-page websites and streaming platforms. The pros of Javascript don't stop here, the introduction of frameworks such as ReactJS, AngularJS, VueJS, NodeJS, etc has made it an extensible language. And with each framework offering different functionality and performance developers are quick to adopt them.&lt;/p&gt;

&lt;p&gt;This leads us to our first con, given its vast usage the learning curve can be quite intimidating, and with each framework offering a different syntax it would require significant dedication and practice to master them. However, the returns on doing so are quite significant and in case you are looking to enter mobile development, javascript is the way forward. Another major con when it comes to using Javascript is security. With the source code easily visible to anyone, it has become a major concern. There are ways for you to enhance security but these methods would require additional effort.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#php-pros-and-cons"&gt;
  &lt;/a&gt;
  PHP - Pros and Cons &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;PHP is a general-purpose language that has also been around since 1995. Similar to Javascript, PHP also has a large active community and was built to suit web development. And since PHP has always cantered to backend development it has a rich library and support to more features and much better security than javascript&lt;/p&gt;

&lt;p&gt;Areas, where PHP stands out, are its seamless performance with Content Management Systems like Word press, Drupal, etc. This is why PHP is commonly used in blogs, Media, and E-commerce websites.  Another pro is its compatibility with serves like SQL, MariaDB, Postgresql, etc. The only con I have faced while using PHP has been its performance - Unlike Javascript, PHP is synchronous and this makes it lose out on speed and performance. &lt;/p&gt;

&lt;p&gt;When it comes to the learning curve, PHP is significantly easier. Tasks such as setting up a server are quite simple, and the frameworks as well can be easily learned without many prerequisites. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#closing-thoughts-php-vs-javascript"&gt;
  &lt;/a&gt;
  Closing thoughts - PHP vs JavaScript&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you have reached it this far you must be aware of the pros and cons of each language. And it must be quite evident that choosing between the two would boil to the use-case and the developers' knowledge of the languages. My personal choice would be to chose JavaScript/ PHP while working on complicated websites as this would allow you to get the best of both halves. A few famous websites that utilize this are - Wikipedia, Facebook, Yahoo, etc. &lt;/p&gt;

&lt;p&gt;However, if you are competent in Javascript and looking to build a smaller one-page or streaming website - hands down javascript all the way.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>php</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Tools for learning Perl context</title>
      <author>kobaken</author>
      <pubDate>Mon, 10 May 2021 12:41:40 +0000</pubDate>
      <link>https://dev.to/kfly8/tools-for-learning-perl-context-5ej3</link>
      <guid>https://dev.to/kfly8/tools-for-learning-perl-context-5ej3</guid>
      <description>&lt;p&gt;There are times when I am confused by the context of Perl. I wrote a tool to reduce this confusion.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/kfly8"&gt;
        kfly8
      &lt;/a&gt; / &lt;a href="https://github.com/kfly8/p5-Contextual-Diag"&gt;
        p5-Contextual-Diag
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      diagnose contexts
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h1&gt;

&lt;p&gt;If you plug in the &lt;code&gt;contextual_diag&lt;/code&gt; subroutine where you want to know Perl context, it will alert you to the context. &lt;/p&gt;

&lt;p&gt;The following code explores the context when evaluating the value of a hash reference:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Contextual::&lt;/span&gt;&lt;span class="nv"&gt;Diag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Here...&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;# Do this...&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;contextual_diag&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;# Then this happens!&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; wanted LIST context&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#inside-contextualdiag"&gt;
  &lt;/a&gt;
  Inside Contextual::Diag
&lt;/h1&gt;

&lt;p&gt;In Contextual::Diag, the first step is to use &lt;code&gt;wantarray&lt;/code&gt; to separate contexts into SCALAR, LIST, and VOID. Then, in the case of SCALAR context, the return value is wrapped in an object, and overload is used to hook into string evaluation, numeric evaluation, and array dereferencing. Only in the case of object reference, overload is not enough to hook, so AUTOLOAD is used. I got this idea from Professor Damian's Contextual::Return.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#list-of-diagnoses"&gt;
  &lt;/a&gt;
  List of diagnoses
&lt;/h1&gt;

&lt;p&gt;Contextual::Diag has a total of 11 different diagnoses:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1. SCALAR context
   - CASE: Scalar value
      - BOOL e.g. `if ($value)`
      - NUM e.g. `$value + 1`
      - STR e.g. `$value . "hello"`
   - CASE:  Scalar reference
      - SCALARREF e.g. `$$value`
      - ARRAYREF e.g. `$value-&amp;gt;[0]`
      - HASHREF e.g. `$value-&amp;gt;{key}`
      - CODEREF e.g. `$value-&amp;gt;()`
      - GLOBREF e.g. `*{$value}-&amp;gt;{CODE}`
      - OBJREF e.g. `$value-&amp;gt;hello()`
2. LIST context
3. VOID context
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I wrote Contextual::Diag to make it easier to understand Perl context.&lt;/p&gt;

&lt;p&gt;You can use it if you like!&lt;/p&gt;

</description>
      <category>perl</category>
    </item>
    <item>
      <title>17 - Bridge</title>
      <author>Mangirdas Kazlauskas üöÄ</author>
      <pubDate>Mon, 10 May 2021 12:37:29 +0000</pubDate>
      <link>https://dev.to/mkobuolys/17-bridge-4hbl</link>
      <guid>https://dev.to/mkobuolys/17-bridge-4hbl</guid>
      <description>&lt;p&gt;In the last article, I have analysed a structural design pattern that provides a way of changing the skin of an object without changing its guts ‚Äî Decorator. In this article, I would like to analyse and implement another structural design pattern that tends to be relatively difficult to understand compared to the other design patterns, but at the same time is practical and useful ‚Äî it is Bridge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What is the Bridge design pattern?&lt;/li&gt;
&lt;li&gt;Analysis&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;li&gt;Your Contribution&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-bridge-design-pattern"&gt;
  &lt;/a&gt;
  What is the Bridge design pattern?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4j1xCIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9sdbdensbx2pn9b4hwu4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4j1xCIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9sdbdensbx2pn9b4hwu4.jpeg" alt="Dog Jumping Over A Bridge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bridge&lt;/strong&gt;, also known as &lt;strong&gt;Handle/Body&lt;/strong&gt;, belongs to the category of structural design patterns. The intention of this design pattern is described in the &lt;a href="https://en.wikipedia.org/wiki/Design_Patterns"&gt;GoF book&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Decouple an abstraction from its implementation so that the two can vary independently.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The usual way for an abstraction to have one of several possible implementations is to use inheritance ‚Äî an abstraction defines the interface while concrete subclasses implement it in different ways. However, this approach is not very flexible since it binds the implementation to abstraction at compile-time and makes it impossible to change the implementation at run-time. What if we want the implementation to be selected and exchanged at run-time?&lt;/p&gt;

&lt;p&gt;The Bridge design pattern separates an abstraction from its implementation so that the two can vary independently from each other. In this case, the abstraction uses another abstraction as its implementation instead of using the implementation directly. This relationship between an abstraction and its implementation (well, another abstraction, to be more specific) is called a &lt;em&gt;bridge ‚Äî it bridges the abstraction and its implementation, letting them vary independently&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If the &lt;em&gt;Abstraction&lt;/em&gt; and &lt;em&gt;Implementation&lt;/em&gt; terms sound too academic to you, imagine this: abstraction (or interface) is just a high-level layer for some particular entity. This layer is just an interface that is not supposed to do any real work on its own ‚Äî it should delegate the work to the implementation layer. A good example of this is a GUI (graphical user interface) and OS (operating system). GUI is just a top-level layer for the user to communicate with the operating system, but it does not do any real work by itself ‚Äî it just passes user commands (events) to the platform. And what is important about this, both GUI and OS could be extended separately from each other, e.g. a desktop application could have different views/panels/dashboards and at the same time support several APIs (could be run on Windows, Linux and macOS) ‚Äî these two parts could vary independently. Sounds like a Bridge design pattern, right?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#analysis"&gt;
  &lt;/a&gt;
  Analysis
&lt;/h2&gt;

&lt;p&gt;The general structure of the Bridge design pattern looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j9K3CyPo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7i3azdqkfri2vesba6u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j9K3CyPo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7i3azdqkfri2vesba6u.png" alt="Bridge Class Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Abstraction&lt;/em&gt; ‚Äî defines an interface for the abstraction and maintains a reference to an object of type &lt;em&gt;Implementation&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Refined abstraction&lt;/em&gt; ‚Äî implements the &lt;em&gt;Abstraction&lt;/em&gt; interface and provides different variants of control logic;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Implementation&lt;/em&gt; ‚Äî defines an interface for the implementation classes. An &lt;em&gt;Abstraction&lt;/em&gt; can only communicate with an &lt;em&gt;Implementation&lt;/em&gt; object via methods that are declared there;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Concrete implementations&lt;/em&gt; ‚Äî implement the &lt;em&gt;Implementation&lt;/em&gt; interface and contain platform-specific code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#applicability"&gt;
  &lt;/a&gt;
  Applicability
&lt;/h3&gt;

&lt;p&gt;The Bridge design pattern should be used when you want to divide a monolithic class with several functionality variants. In this case, the pattern allows splitting the class into several class hierarchies which could be changed independently ‚Äî it simplifies code maintenance, smaller classes minimizes the risk of breaking existing code. A good example of this approach is when you want to use several different approaches in the persistence layer e.g. both database and file system persistence.&lt;/p&gt;

&lt;p&gt;The bridge design pattern should also be used when both the abstractions and their implementations should be extensible by subclassing ‚Äî the pattern allows combining different abstractions and implementation and extending them independently.&lt;/p&gt;

&lt;p&gt;Finally, the bridge design pattern is a lifesaver when you need to be able to switch implementations at run-time. The pattern lets you replace the implementation object inside the abstraction ‚Äî you can inject it via the constructor or just assign it as a new value to a field/property.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KxzazD4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j74tn1j5byunyxig11pt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KxzazD4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j74tn1j5byunyxig11pt.gif" alt="Let's Get To Work"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will implement the persistence layer for our example using the Bridge design pattern for the implementation part.&lt;/p&gt;

&lt;p&gt;Let‚Äôs say your application uses the external SQL database (not the local SQLite option in your device, but the cloud one). Everything is fine until the wild connection problems appear. In this case, there are two options: you are not allowing users to use the application and provide a funny &lt;em&gt;connection lost&lt;/em&gt; screen or you can store the data in some kind of local storage and synchronise the data later when the connection is up again. Obviously, the second approach is more user friendly, but how to implement it?&lt;/p&gt;

&lt;p&gt;In the persistence layer, there are multiple repositories for each entity type. The repositories share a common interface ‚Äî that is our abstraction. If you want to change the storage type (to use the local or cloud one) at run-time, these repositories could not reference the specific implementation of the storage, they should use some kind of abstraction shared between different types of storages. Well, we can build another abstraction (interface) on top of that which is then implemented by the specific storages. Now we connect our repositories‚Äô abstraction with the storages‚Äô interface ‚Äî &lt;em&gt;voil√†&lt;/em&gt;, that is how the Bridge design pattern is introduced into our application! Let‚Äôs check the class diagram first and then investigate some implementation details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#class-diagram"&gt;
  &lt;/a&gt;
  Class diagram
&lt;/h3&gt;

&lt;p&gt;The class diagram below shows the implementation of the Bridge design pattern:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lKBZOOce--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fab7658k8xok7xkmv1ti.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lKBZOOce--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fab7658k8xok7xkmv1ti.png" alt="Bridge Implementation Class Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;EntityBase&lt;/em&gt; is an abstract class that is used as a base class for all the entity classes. The class contains an id property and a named constructor &lt;em&gt;EntityBase.fromJson&lt;/em&gt; to map the JSON object to the class field.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Customer&lt;/em&gt; and &lt;em&gt;Order&lt;/em&gt; are concrete entities that extend the abstract class &lt;em&gt;EntityBase&lt;/em&gt;. &lt;em&gt;Customer&lt;/em&gt; class contains &lt;em&gt;name&lt;/em&gt; and &lt;em&gt;email&lt;/em&gt; properties, &lt;em&gt;Customer.fromJson&lt;/em&gt; named constructor to map the JSON object to class fields and a &lt;em&gt;toJson()&lt;/em&gt; method to map class fields to the corresponding JSON map object. &lt;em&gt;Order&lt;/em&gt; class contain &lt;em&gt;dishes&lt;/em&gt; (a list of dishes of that order) and &lt;em&gt;total&lt;/em&gt; fields, a named constructor &lt;em&gt;Order.fromJson&lt;/em&gt; and a &lt;em&gt;toJson()&lt;/em&gt; method respectively.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;IRepository&lt;/em&gt; is an abstract class that is used as an interface for the repositories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;getAll()&lt;/em&gt; ‚Äî returns all records from the repository;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;save()&lt;/em&gt; ‚Äî saves an entity of type &lt;em&gt;EntityBase&lt;/em&gt; in the repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;CustomersRepository&lt;/em&gt; and &lt;em&gt;OrdersRepository&lt;/em&gt; are concrete repository classes that extend the abstract class &lt;em&gt;IRepository&lt;/em&gt; and implement its abstract methods. Also, these classes contain a storage property of type &lt;em&gt;IStorage&lt;/em&gt; which is injected into the repository via the constructor.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;IStorage&lt;/em&gt; is an abstract class that is used as an interface for the storages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;getTitle()&lt;/em&gt; ‚Äî returns the title of the storage. The method is used in UI;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;fetchAll()&lt;/em&gt; ‚Äî returns all the records of type &lt;em&gt;T&lt;/em&gt; from the storage;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;store()&lt;/em&gt; ‚Äî stores a record of type &lt;em&gt;T&lt;/em&gt; in the storage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;FileStorage&lt;/em&gt; and &lt;em&gt;SqlStorage&lt;/em&gt; are concrete storage classes that extend the abstract class &lt;em&gt;IStorage&lt;/em&gt; and implement its abstract methods. Additionally, &lt;em&gt;FileStorage&lt;/em&gt; class uses the &lt;em&gt;JsonHelper&lt;/em&gt; class and its static methods to serialise/deserialise JSON objects.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;BridgeExample&lt;/em&gt; initialises and contains both ‚Äî customer and order ‚Äî repositories which are used to retrieve the corresponding data. Additionally, the storage type of these repositories could be changed between the &lt;em&gt;FileStorage&lt;/em&gt; and &lt;em&gt;SqlStorage&lt;/em&gt; separately and at the run-time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#entitybase"&gt;
  &lt;/a&gt;
  EntityBase
&lt;/h3&gt;

&lt;p&gt;An abstract class that stores the &lt;em&gt;id&lt;/em&gt; field and is extended by all of the entity classes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uHpkdfot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ctithg6qsvy4crpji5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uHpkdfot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ctithg6qsvy4crpji5x.png" alt="entity_base.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#customer"&gt;
  &lt;/a&gt;
  Customer
&lt;/h3&gt;

&lt;p&gt;A simple class to store information about the customer: its &lt;em&gt;name&lt;/em&gt; and &lt;em&gt;email&lt;/em&gt;. Also, the constructor generates random values when initialising the &lt;em&gt;Customer&lt;/em&gt; object.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--949Ad3q6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9dfjz15h1obza39kox3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--949Ad3q6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9dfjz15h1obza39kox3.png" alt="customer.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#order"&gt;
  &lt;/a&gt;
  Order
&lt;/h3&gt;

&lt;p&gt;A simple class to store information about the order: a list of &lt;em&gt;dishes&lt;/em&gt; it contains and the &lt;em&gt;total&lt;/em&gt; price of the order. Also, the constructor generates random values when initialising the &lt;em&gt;Order&lt;/em&gt; object.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_c9XPJV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yholfukqsrlthmvc2er2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_c9XPJV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yholfukqsrlthmvc2er2.png" alt="order.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jsonhelper"&gt;
  &lt;/a&gt;
  JsonHelper
&lt;/h3&gt;

&lt;p&gt;A helper classes used by the &lt;em&gt;FileStorage&lt;/em&gt; to serialise objects of type &lt;em&gt;EntityBase&lt;/em&gt; to JSON map objects and deserialise them from the JSON string.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A3bt9LBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mc2ef2h5twh1e82zznsx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A3bt9LBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mc2ef2h5twh1e82zznsx.png" alt="json_helper.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#irepository"&gt;
  &lt;/a&gt;
  IRepository
&lt;/h3&gt;

&lt;p&gt;An interface that defines methods to be implemented by the derived repository classes. Dart language does not support the interface as a class type, so we define an interface by creating an abstract class and providing a method header (name, return type, parameters) without the default implementation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5we_Tk7x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24snqdxdl9n3mijvwrub.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5we_Tk7x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24snqdxdl9n3mijvwrub.png" alt="irepository.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#concrete-repositories"&gt;
  &lt;/a&gt;
  Concrete repositories
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;CustomersRepository&lt;/em&gt; ‚Äî a specific implementation of the &lt;em&gt;IRepository&lt;/em&gt; interface to store customers‚Äô data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h8ZAqBIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tq5dw5ghrwf1rdh849d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h8ZAqBIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tq5dw5ghrwf1rdh849d.png" alt="customers_repository.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;OrdersRepository&lt;/em&gt; ‚Äî a specific implementation of the &lt;em&gt;IRepository&lt;/em&gt; interface to store orders‚Äô data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XHbEyvKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tujw1admp4h9044vuvcb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XHbEyvKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tujw1admp4h9044vuvcb.png" alt="orders_repository.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#istorage"&gt;
  &lt;/a&gt;
  IStorage
&lt;/h3&gt;

&lt;p&gt;An interface that defines methods to be implemented by the derived storage classes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mlheYV94--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ji47bf176e5ngbevbppd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mlheYV94--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ji47bf176e5ngbevbppd.png" alt="istorage.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#concrete-storages"&gt;
  &lt;/a&gt;
  Concrete storages
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;FileStorage&lt;/em&gt; ‚Äî a specific implementation of the &lt;em&gt;IStorage&lt;/em&gt; interface to store an object in the storage as a file ‚Äî this behaviour is mocked by storing an object as a JSON string.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Q6N7rGX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xys6hfc5w7wjmgekqj3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Q6N7rGX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xys6hfc5w7wjmgekqj3.png" alt="file_storage.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;SqlStorage&lt;/em&gt; ‚Äî a specific implementation of the &lt;em&gt;IStorage&lt;/em&gt; interface to store an object in the storage as an entity ‚Äî this behaviour is mocked by using the Map data structure and appending entities of the same type to the list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o-U9-G9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11yrsr8fjzdk3nquvqnn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o-U9-G9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11yrsr8fjzdk3nquvqnn.png" alt="sql_storage.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;First of all, a markdown file is prepared and provided as a pattern‚Äôs description:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--drDgUw8e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5s0zo5wv24ki2byplvpg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--drDgUw8e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5s0zo5wv24ki2byplvpg.gif" alt="Bridge Markdown"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;BridgeExample&lt;/em&gt; contains a list of storages ‚Äî instances of &lt;em&gt;SqlStorage&lt;/em&gt; and &lt;em&gt;FileStorage&lt;/em&gt; classes. Also, it initialises &lt;em&gt;Customer&lt;/em&gt; and &lt;em&gt;Order&lt;/em&gt; repositories. In the repositories the concrete type of storage could be interchanged by triggering the &lt;em&gt;onSelectedCustomerStorageIndexChanged()&lt;/em&gt; for the &lt;em&gt;CustomersRepository&lt;/em&gt; and &lt;em&gt;onSelectedOrderStorageIndexChanged()&lt;/em&gt; for the &lt;em&gt;OrdersRepository&lt;/em&gt; respectively.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BgCJ2a09--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p33o4g2z878df1sf2ovq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BgCJ2a09--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p33o4g2z878df1sf2ovq.png" alt="bridge_example.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The concrete repository does not care about the specific type of storage it uses as long as the storage implements the &lt;em&gt;IStorage&lt;/em&gt; interface and all of its abstract methods. As a result, the abstraction (repository) is separated from the implementor (storage) ‚Äî the concrete implementation of the storage could be changed for the repository at run-time, the repository does not depend on its implementation details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w63AYmAu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qrdp40thnbjlea4addr1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w63AYmAu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qrdp40thnbjlea4addr1.gif" alt="Bridge Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the example, the storage type could be changed for each repository separately and at run-time ‚Äî it would not be possible by using the simple class inheritance approach.&lt;/p&gt;

&lt;p&gt;All of the code changes for the Bridge design pattern and its example implementation could be found &lt;a href="https://github.com/MangirdasKazlauskas/flutter-design-patterns/pull/18"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-contribution"&gt;
  &lt;/a&gt;
  Your Contribution
&lt;/h2&gt;

&lt;p&gt;üíñ or ü¶Ñ this article to show your support and motivate me to write better!&lt;br&gt;
üí¨ Leave a response to this article by providing your insights, comments or wishes for the next topic.&lt;br&gt;
üì¢ Share this article with your friends, colleagues on social media.&lt;br&gt;
‚ûï Follow me on dev.to or any other social media platform.&lt;br&gt;
‚≠ê Star the &lt;a href="https://github.com/mkobuolys/flutter-design-patterns"&gt;Github&lt;/a&gt; repository.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>oop</category>
      <category>programming</category>
    </item>
    <item>
      <title>Why Death Marches Aren't As Bad As They Sound</title>
      <author>Allen Helton</author>
      <pubDate>Mon, 10 May 2021 12:27:39 +0000</pubDate>
      <link>https://dev.to/allenheltondev/why-death-marches-aren-t-as-bad-as-they-sound-3g89</link>
      <guid>https://dev.to/allenheltondev/why-death-marches-aren-t-as-bad-as-they-sound-3g89</guid>
      <description>&lt;p&gt;I recently got out of my first death march. Not the kind where the project was destined for failure, but the prolonged period of overwork kind.&lt;/p&gt;

&lt;p&gt;It went on for about a month, then tapered off and things got back to normal. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;It sucked.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But as a leader, I reflected back at the past month and tried to get a look at the pros and cons. What went well and what could have gone better. I sincerely hope I won't have to do one of those again, but if I do - &lt;em&gt;how can I make it better&lt;/em&gt;? &lt;/p&gt;

&lt;p&gt;I also spent some time figuring out &lt;em&gt;was it worth it&lt;/em&gt;? Were 16 hour days with no no weekends for a month justified by the end result?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Depends who you ask.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you ask senior leadership, it was absolutely worth it. The project was completed on time and we delivered to a happy customer.&lt;/p&gt;

&lt;p&gt;If you ask the managers, it was mostly worth it. Nobody likes driving people that hard. But it did provide some team building opportunities. &lt;/p&gt;

&lt;p&gt;If you ask the developers, you'll get a mixed bag. The devs who enjoy learning every day and jump at growth opportunities saw the light. They are happy with the chance to show off their skills and learn. Other devs... not so much.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-good"&gt;
  &lt;/a&gt;
  The Good
&lt;/h2&gt;

&lt;p&gt;Regardless of your standpoint of &lt;em&gt;was it worth it&lt;/em&gt;, everybody involved can agree there are some big benefits to a death march. Some more surprising than others, as we all realized.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#high-visibility"&gt;
  &lt;/a&gt;
  High Visibility
&lt;/h3&gt;

&lt;p&gt;Our product has never had more attention. Yes, we were under the gun and the attention might not have been 100% positive, but &lt;em&gt;people were using our app&lt;/em&gt;. We were getting constant feedback about existing features, new features, &lt;a href="https://readysetcloud.io/blog/allen.helton/design-to-delight-raising-the-bar-on-software-design-a1eec234188b"&gt;UX questions&lt;/a&gt;, supportability and future features, and everything in between.&lt;/p&gt;

&lt;p&gt;For those of you who specialize in &lt;a href="https://readysetcloud.io/blog/allen.helton/the-greenfield-paradox-why-is-building-a-new-app-so-easy-and-also-so-hard-b3cc58552ab"&gt;greenfield development&lt;/a&gt;, you know how important that is. Without a death march, the team was getting feedback every two weeks in sprint review. But with the death march, it was daily. We were able to &lt;a href="https://readysetcloud.io/blog/allen.helton/itturat-ituratte-iterat-iterate-iterate-65199c4d5d53"&gt;iterate our design&lt;/a&gt; quickly and incorporate feedback faster than ever.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3Fp1K-W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://readysetcloud.s3.amazonaws.com/deathMarch_1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3Fp1K-W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://readysetcloud.s3.amazonaws.com/deathMarch_1.jpg" alt="Photo by [Glen Wheeler](https://unsplash.com/@glenwheeler?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/fast?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText)"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@glenwheeler?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Glen Wheeler&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fast?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#super-speed"&gt;
  &lt;/a&gt;
  Super Speed
&lt;/h3&gt;

&lt;p&gt;We were able to get about 3 months of work done in 1 calendar month. Granted, it took approximately the same amount of hours we would have spent in three months, but our delivery date was what it was. The devs stayed close to the problems at hand day in and day out, never needing to get back up to speed after a weekend.&lt;/p&gt;

&lt;p&gt;Plus with the constant feedback, the iterations we put in place accelerated that development by 10x. An incredible amount of work was done in a relatively short amount of time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clever-new-solutions"&gt;
  &lt;/a&gt;
  Clever New Solutions
&lt;/h3&gt;

&lt;p&gt;When you're that close to an app for such a long period of time, things start clicking. You start coming up with clever solutions to solve problems in ways you might not have realized before.&lt;/p&gt;

&lt;p&gt;You get a better comprehension of your app, learning the ins and outs and the subtle nuances that make it tick (&lt;a href="https://readysetcloud.io/blog/allen.helton/making-the-move-from-contributor-to-solutions-architect"&gt;which is a must-have skill for solution architects&lt;/a&gt;). You start working smarter, not harder. By the time you get out of the death march, your app is months ahead and is more feature-rich than originally intended.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#red-flags"&gt;
  &lt;/a&gt;
  Red Flags
&lt;/h2&gt;

&lt;p&gt;From a project manager perspective, all of those pros I just listed sound pretty great. Cool new features, accelerated timeline, and product hardening are all things a PM (or anyone, really) would want for a new software build.&lt;/p&gt;

&lt;p&gt;But it's called a death march for a reason. The name is ominous because you aren't supposed to do this all the time. Here are some of my key observations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#burnout"&gt;
  &lt;/a&gt;
  Burnout
&lt;/h3&gt;

&lt;p&gt;This is the obvious one. In every racing game I've ever played, you can use NOS to give your car a boost for a short period of time. The car rushes forward faster than everything else around it, but eventually the NOS runs out. You go back to normal speed and can't use it again.&lt;/p&gt;

&lt;p&gt;This is a death march. You can go turbo speed for a short burst, but whether you like it or not the motion is going to slow down back to a normal pace. Developers get burnt out. Managers get burnt out. Analysts get burnt out. &lt;/p&gt;

&lt;p&gt;Keep an eye out for this. The signs vary from person to person, but they will always show up somehow. Whether it's quality of work dropping, becoming snippy with peers, or refusing to do certain tasks, managing burn out should be the top priority for a leader. &lt;/p&gt;

&lt;p&gt;If you start noticing signs of burnout in your developers, give them a day off. It's amazing what a little bit of relief will do mid-march.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U6Cc8PYr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://readysetcloud.s3.amazonaws.com/deathMarch_2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U6Cc8PYr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://readysetcloud.s3.amazonaws.com/deathMarch_2.jpg" alt="Photo by [Dima Pechurin](https://unsplash.com/@pechka?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/door?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText)"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@pechka?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Dima Pechurin&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/door?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#oneway-doors"&gt;
  &lt;/a&gt;
  One-Way Doors
&lt;/h3&gt;

&lt;p&gt;One of the drawbacks of the high visibility and clever solutioning is making snap decisions. People who aren't normally involved with the development of your app might ask you to make a change, and you need to be sure to spend the time and analyze the request.&lt;/p&gt;

&lt;p&gt;Don't just say "yeah we can do it this way" and paint yourself into a corner. You're already closer to the app than you normally are and are able to come up with quick, clever solutions. But just because you &lt;em&gt;could&lt;/em&gt; doesn't always mean you &lt;em&gt;should&lt;/em&gt;. Amazon refers to this as a &lt;a href="https://www.inc.com/jeff-haden/amazon-founder-jeff-bezos-this-is-how-successful-people-make-such-smart-decisions.html"&gt;one-way door&lt;/a&gt;. It is a decision that once you make it, you can't get out of it.&lt;/p&gt;

&lt;p&gt;Remember, you're building a product. You must make sure not to make a decision that could hurt future development once you're out of the death march.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#worklife-balance"&gt;
  &lt;/a&gt;
  Work/Life Balance
&lt;/h3&gt;

&lt;p&gt;This one is difficult to manage as a leader. There are some people that just love working. They get up, go to work and when they are done, go to sleep. Rinse and repeat. You must make sure that people are taking time for themselves and for their families. &lt;/p&gt;

&lt;p&gt;This is a little different than burnout. Work/life balance focuses on relationships, while burnout focuses on the self. It's extremely important that the developers on a death march try to maintain some sort of consistency with their loved ones. Working 80+ hours a week is difficult on anyone, but it's also difficult on their family as well.&lt;/p&gt;

&lt;p&gt;It doesn't have to be much, but make sure every now and then you check in on your people and ask them how they're doing. Give them an opportunity to go out with friends or go on a date night. You will be rewarded with renewed vigor and willingness to continue the march.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#analysis-paralysis"&gt;
  &lt;/a&gt;
  Analysis Paralysis
&lt;/h3&gt;

&lt;p&gt;On the opposite side of &lt;em&gt;clever new solutions&lt;/em&gt; comes the dreaded &lt;em&gt;analysis paralysis&lt;/em&gt;. Simply put, this means that &lt;a href="https://readysetcloud.io/blog/allen.helton/stop-overthinking-your-complex-solutions-and-start-building-simple-ones-712400ea8385"&gt;you are overthinking solutions&lt;/a&gt; and you don't make progress because you can't decide what to do.&lt;/p&gt;

&lt;p&gt;Sometimes when you've been at it consistently for so long your judgment gets cloudy. Things don't seem as clear at they did before. You get tunnel vision. &lt;/p&gt;

&lt;p&gt;Step 1 for &lt;a href="https://readysetcloud.io/blog/allen.helton/making-the-move-from-contributor-to-solutions-architect"&gt;becoming a strong solutions architect&lt;/a&gt; is to take a step back. Look at your app as a system and see how the moving parts work with each other. When you get tunnel vision, you don't do that. You focus on one area and make a decision that may or may not be correct.&lt;/p&gt;

&lt;p&gt;The name of the game with death marches is speed. And getting hung up on designs that should only take a couple of hours is not how you see yourself to the end of one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;To a business, a death march can be a wonderful thing. You accelerate timelines, come up with new solutions to better the product, and establish trust with your customers. &lt;/p&gt;

&lt;p&gt;It has serious drawbacks though. Overwork can do some real harm to your employees. Everybody feels it too, not just developers. Managers, QA, BA, professional services, tech writers, everyone involved with software is suddenly hit with a huge wave of work. &lt;/p&gt;

&lt;p&gt;As a leader, you must maintain a strict focus on your people. Push them hard, but not past the breaking point. Everyone shows signs of stress differently, and it's your job to identify it and remediate it.&lt;/p&gt;

&lt;p&gt;Death marches are a necessary evil at times. Use them sparingly because at the end of the day, the most important part of your company is the people, not the software.&lt;/p&gt;

</description>
      <category>leadership</category>
      <category>career</category>
      <category>appdev</category>
    </item>
  </channel>
</rss>
