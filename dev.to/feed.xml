<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Level Up as a Software Engineer | AWS Community Builders Program</title>
      <author>Brian H. Hough</author>
      <pubDate>Tue, 31 Aug 2021 18:14:28 +0000</pubDate>
      <link>https://dev.to/brianhhough/how-to-level-up-as-a-software-engineer-aws-community-builders-program-55g4</link>
      <guid>https://dev.to/brianhhough/how-to-level-up-as-a-software-engineer-aws-community-builders-program-55g4</guid>
      <description>&lt;p&gt;Wondering what you can do to level up as a software engineer, developer or programmer this year? üë®‚Äçüíªüí≠ &lt;/p&gt;

&lt;p&gt;In this episode of the &lt;a href="https://youtu.be/hFvGrvCpEsg"&gt;Tech Stack Playbook&lt;/a&gt;, I'm diving into the program that has single-handedly helped me the most in my tech career thus far: the AWS Community Builders Program. Today's episode focuses on AWS, the community, the core benefits of the program, and how it has helped me level up as a software engineer and developer this year.&lt;/p&gt;

&lt;p&gt;üìù Quick plug: Applications close on August 30, 2021, so please reach out if you have any questions about the program and be sure to apply by the deadline here: &lt;a href="https://amazonmr.au1.qualtrics.com/jfe/form/SV_dajuY7uPsH3NSTk"&gt;https://amazonmr.au1.qualtrics.com/jfe/form/SV_dajuY7uPsH3NSTk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here‚Äôs a glance at what you‚Äôll learn in this episode:&lt;/p&gt;

&lt;p&gt;Time stamps:&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=hFvGrvCpEsg&amp;amp;t=0s"&gt;00:00&lt;/a&gt; How the AWS Community Builders Program has helped me level up&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=hFvGrvCpEsg&amp;amp;t=43s"&gt;00:43&lt;/a&gt; Benefit #1: Being a Part of a Vibrant Community&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=hFvGrvCpEsg&amp;amp;t=215s"&gt;03:35&lt;/a&gt; Benefit #2: Being Surrounded by Constant Education and Learning&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=hFvGrvCpEsg&amp;amp;t=306s"&gt;05:06&lt;/a&gt; Benefit #3: An Immense Amount of Resources and Tools&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=hFvGrvCpEsg&amp;amp;t=383s"&gt;06:23&lt;/a&gt; Benefit #4: Get Connected to Conferences, Events, and Workshops&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=hFvGrvCpEsg&amp;amp;t=420s"&gt;07:00&lt;/a&gt; Why constant learning is key &amp;amp; how community/mentors can help&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=hFvGrvCpEsg&amp;amp;t=575s"&gt;09:35&lt;/a&gt; Reflecting on the past year of growth and development in software engineering&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hFvGrvCpEsg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-benefits-of-the-aws-community-builders-program-for-developers"&gt;
  &lt;/a&gt;
  üë®‚Äçüíª What are the Benefits of the AWS Community Builder's Program for Developers?
&lt;/h2&gt;

&lt;p&gt;The benefits of the AWS Community Builders program knows no bounds because it‚Äôs a truly priceless program. In the beginning, you will get a welcome kit which has some amazing AWS swag like hats, water bottles, desktop accessories, $500 of AWS credits, and way more goodies and benefits. But, there are several core aspects of the program that can be so instrumental to fellow programmers, developers, and people in tech. From exclusive webinars and events, to a global Slack channel of developers, programmers, software engineers, developer advocates, CTOs, executives, and everyone in between, there is so much value packed into this program for all involved.&lt;/p&gt;

&lt;p&gt;So what are the key highlights from this program? I'll walk through for key benefits of the program and explain why this program has been so valuable to me.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#benefit-1-being-a-part-of-a-vibrant-community"&gt;
  &lt;/a&gt;
  üë®‚Äçüíª BENEFIT #1: Being a Part of a Vibrant Community
&lt;/h2&gt;

&lt;p&gt;When you are starting out in your developer journey, whether at the executive or technical levels, whether you are a freelancer or employed by a software company, you always need to think about your community.&lt;/p&gt;

&lt;p&gt;Who are the people you surround yourself? Who do you turn to and talk to when you have questions or comments about tech, your job, your career etc.?&lt;/p&gt;

&lt;p&gt;During the COVID-19 pandemic and even beforehand, I was constantly thinking about how I can build my network of friends, colleagues, mentors, and guides in technology. As a self-taught programmer, I have done bootcamps and courses and programs, but I don‚Äôt have a degree in computer science, so I needed to surround myself with people who went down similar paths and different paths to learn what set them up for success.&lt;/p&gt;

&lt;p&gt;And joining a highly-engaged and inspiring community of software engineers and developers from around the world building on the same tools and frameworks is one of the best ways to accomplish this. It all goes back to joining a community. The AWS Community Builders program is full of some of the most selfless, smart, caring, and supportive people I have ever met. People who go out of their way to answer questions, help people when they have questions, and work on helping the rest of the community level up as well. AWS leaders, AWS Heroes, experts in tech, and senior leaders of the industry are all a part of this program along with early career and young software engineers like me. The community is so rich with so many different types of technology people, all sharing a passion for serverless frameworks, cloud-based software, and of course, AWS! &lt;/p&gt;

&lt;p&gt;If you are looking for a highly engaged and active family of developers and programmers who constantly will push you to be better, smarter, faster, and stronger than you were the day before, look no further than the AWS Community Builders Program, especially to be around people who inspire you to constantly level up.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#benefit-2-being-surrounded-by-constant-education-and-learning"&gt;
  &lt;/a&gt;
  üë®‚Äçüíª BENEFIT #2: Being Surrounded by Constant Education and Learning
&lt;/h2&gt;

&lt;p&gt;How are you constantly thinking about how you will level up as a developer or programmer? Are you learning new things or just doing the same-old-same-old.&lt;/p&gt;

&lt;p&gt;The AWS staff puts on incredible exclusive events, workshops, talks, and meetings on cutting-edge serverless tools like SageMaker and Hugging Face for artificial intelligence and machine learning (AI &amp;amp; ML), database best practices like DynamoDB or Neptune, messaging services like SNS and SES and PinPoint, as well as networking and compute services like EC2, VPC, etc. &lt;/p&gt;

&lt;p&gt;There is so much high level content that exists on the Internet, and it can leave you wondering‚Ä¶so how does this tech actually work? If I wanted to actually use these tools, what do I need to do? Well thanks to the these exclusive events and workshops, you get to have leading technology experts, AWS staff, and tech visionaries walk you through implementation, code, walkthroughs, and more. You get architecture diagrams, roadmaps, how-to-guides, and a plethora of resources.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#benefit-3-an-immense-amount-of-resources-and-tools"&gt;
  &lt;/a&gt;
  üë®‚Äçüíª BENEFIT #3:  An Immense Amount of Resources and Tools
&lt;/h2&gt;

&lt;p&gt;The third biggest benefit that I think makes the AWS Community Builders Program so valuable is the resources and tools Community Builders have at their disposal. I‚Äôve benefited a lot from having a subscription to Cloud Academy and having access to classes and guides and lessons.&lt;/p&gt;

&lt;p&gt;By going through classes and education online, on-demand, and on the topics you are most curious on, this makes it so easy to get the skills you need for your job, for your passion project, and for your company. Online education is only going to increase in importance and value in the months and years to come, and especially during these remote months, being able to attend virtual classes and webinars right from your computer makes it that much easier to upskill and level up.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#benefit-4-get-connected-to-conferences-events-and-workshops"&gt;
  &lt;/a&gt;
  üë®‚Äçüíª BENEFIT #4:  Get Connected to Conferences, Events, and Workshops
&lt;/h2&gt;

&lt;p&gt;The fourth largest benefit has to be the connection to conferences, events, and workshops. Being able to jump into a conference session or be invited to a Brown Bag lunch workshop on a certain AWS or serverless tool‚Ä¶.and also be invited to speak at events like this‚Ä¶has such an immense amount of value for anyone looking to get more presentation and conference experience under their belt.&lt;/p&gt;

&lt;p&gt;As a young professional, opportunities like this can be difficult to come by, so having people that can put you in touch with event organizers and leaders can make all the difference for sharing the insights you‚Äôre learning on the job, in your side projects, or generally sharing insights based on what you are working on.&lt;/p&gt;

&lt;p&gt;One of the opportunities I was able to earn was giving a 2 hour master class on the &lt;a href="https://datasaturdays.com/2021-09-04-datasaturday0014/"&gt;9 AWS Serverless Databases all Programmers and Software Engineers Should Know&lt;/a&gt;. Additionally, this upcoming Saturday, my talk on AWS Serverless Databases was accepted for &lt;a href="https://datasaturdays.com/2021-09-04-datasaturday0014/"&gt;Data Saturday Oslo&lt;/a&gt;, which I am super excited about. &lt;/p&gt;

&lt;p&gt;Not only do you get amazing experience by presenting technology to global audiences, but you also get to inspire and empower other developers to learn new tools, solutions, strategies, and methodologies. By bringing people into the fold of cutting-edge technology, you never know who you might empower in the ‚Äúvirtual stands.‚Äù Or in the audience, there might be someone who goes on to implement what you talked about or builds a solution that has a large impact on the world. The possibilities are truly limitless and you never know what your talk might do to impact people and get people started in their serverless, full-stack, and AWS journeys. &lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-become-an-aws-community-builder"&gt;
  &lt;/a&gt;
  üë®‚Äçüíª How to Become an AWS Community Builder?
&lt;/h2&gt;

&lt;p&gt;If this interests you and you want join this incredible program and community, I highly recommend that you apply! The deadline is August 30th, so make sure to apply via the application link here: &lt;a href="https://amazonmr.au1.qualtrics.com/jfe/form/SV_dajuY7uPsH3NSTk"&gt;https://amazonmr.au1.qualtrics.com/jfe/form/SV_dajuY7uPsH3NSTk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any questions about the application process, please reach out over social media or drop a comment below and I will respond!&lt;/p&gt;

&lt;p&gt;Check out the full recording below:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hFvGrvCpEsg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let me know if you found this post helpful! And if you haven't yet, make sure to check out these free resources below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Follow my Instagram for more: &lt;a href="https://instagram.com/brianhhough"&gt;@BrianHHough&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Watch my latest &lt;a href="https://youtube.com/brianhhough"&gt;YouTube video for more&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Listen to my Podcast on &lt;a href="https://youtube.com/brianhhough"&gt;Apple Podcasts&lt;/a&gt; and &lt;a href="https://youtube.com/brianhhough"&gt;Spotify&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Join my FREE &lt;a href="https://facebook.com/groups/techstackplaybook"&gt;Tech Stack Playbook Facebook Group&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's digitize the world together! üöÄ&lt;/p&gt;

&lt;p&gt;-- Brian&lt;/p&gt;

</description>
      <category>aws</category>
      <category>javascript</category>
      <category>react</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 31 Aug 2021 18:04:47 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-42d7</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-42d7</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sorting-through-the-chaos"&gt;
  &lt;/a&gt;
  Sorting through the Chaos
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/thenjdevopsguy"&gt;@thenjdevopsguy&lt;/a&gt;
 explains why we need chaos engineering ‚Äî and how can make sense of it üí° &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenjdevopsguy" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bowlfvP---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--dtdzRPNS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/332370/ac9865d6-3a6f-41f6-a661-b217c9e54873.png" alt="thenjdevopsguy"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenjdevopsguy/three-tips-to-understand-chaos-engineering-1eoc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Three Tips To Understand Chaos Engineering&lt;/h2&gt;
      &lt;h3&gt;Mike Levan „Éª Aug 24 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#chaosengineer&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sre&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloudnative&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#all-about-transfer-learning"&gt;
  &lt;/a&gt;
  All about transfer learning
&lt;/h2&gt;

&lt;p&gt;Transfer learning can save you a lot of time when developing a machine learning model from scratch. &lt;a class="mentioned-user" href="https://dev.to/flippedcoding"&gt;@flippedcoding&lt;/a&gt;
 explains. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/flippedcoding" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UWt-uaTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--D-VsiVuP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/77973/be223e4c-dc34-43da-a894-10be8f272316.jpg" alt="flippedcoding"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/flippedcoding/using-experiments-for-transfer-learning-a8f" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Using Experiments for Transfer Learning&lt;/h2&gt;
      &lt;h3&gt;Milecia „Éª Aug 26 „Éª 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#machinelearning&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#datascience&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#your-check-engine-light-is-on"&gt;
  &lt;/a&gt;
  Your "check engine" light is on
&lt;/h2&gt;

&lt;p&gt;As &lt;a class="mentioned-user" href="https://dev.to/dinamlev"&gt;@dinamlev&lt;/a&gt;
 writes, "it's critical to write de-coupled, repeatable tests that provide important, meaningful signals." You'll get a primer on how to do just that in this post. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/dinamlev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uHAi6Abu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--S-P6cTPl--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/692709/dd43737c-a210-4818-85d5-5dd51b62ea04.jpg" alt="dinamlev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dinamlev/your-check-engine-light-is-on-how-to-write-good-software-tests-e05" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to write good software tests&lt;/h2&gt;
      &lt;h3&gt;Dina Levitan „Éª Aug 27 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#testing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codequality&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#where-nostalgia-meets-software"&gt;
  &lt;/a&gt;
  Where nostalgia meets software
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/christinecdev"&gt;@christinecdev&lt;/a&gt;
's tutorial aims to help you get started with Local Storage and further your React skills ‚Äî with some added Pok√©mon flair üòé &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/christinecdev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yoPGmWOq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--16HSizq8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/688776/8a509ea6-303e-4131-8911-607a4ba0f42f.jpeg" alt="christinecdev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/christinecdev/let-s-make-a-pokemon-themed-note-keeping-app-in-react-2afg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Let's Make a Pok√©mon Themed Note Keeping App in React!&lt;/h2&gt;
      &lt;h3&gt;Christine Coomans „Éª Aug 29 „Éª 17 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#great-web-design-from-accessibilty-to-z"&gt;
  &lt;/a&gt;
  Great web design from A(ccessibilty) to Z
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/imiahazel"&gt;@imiahazel&lt;/a&gt;
 has provided some design guidelines that will place your website thousands of steps aheads of the pack.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/imiahazel" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ESBKwXwD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ICB5QvkY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/680015/de81baf3-f7c7-45d7-bb7b-c0a6c74d4fed.jpeg" alt="imiahazel"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/imiahazel/8-fundamental-principles-of-effective-web-design-196l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;8 Fundamental Principles of Effective Web Design&lt;/h2&gt;
      &lt;h3&gt;Imia Hazel „Éª Aug 24 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdesign&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ux&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#web3-is-changing-the-game"&gt;
  &lt;/a&gt;
  Web3 is changing the game
&lt;/h2&gt;

&lt;p&gt;There's a lot of misguided and downright spammy Web3/cryptocurrency content out there. &lt;a class="mentioned-user" href="https://dev.to/dabit3"&gt;@dabit3&lt;/a&gt;
 has advice you can trust. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/dabit3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gYALFAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--YawV5F9h--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/126437/41231eb2-054b-4417-bc35-814e491a2d5d.jpeg" alt="dabit3"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dabit3/the-new-creator-economy-daos-community-ownership-and-cryptoeconomics-lnl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The New Creator Economy - DAOs, Community Ownership, and Cryptoeconomics&lt;/h2&gt;
      &lt;h3&gt;Nader Dabit „Éª Aug 26 „Éª 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#blockchain&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ethereum&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#knowing-and-nailing-the-expectations-of-your-role"&gt;
  &lt;/a&gt;
  Knowing and nailing the expectations of your role
&lt;/h2&gt;

&lt;p&gt;In this article, &lt;a class="mentioned-user" href="https://dev.to/eisabai"&gt;@eisabai&lt;/a&gt;
 offers answers to many of the early-career software development questions that you wanted to ask your new colleagues but were too afraid to.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/eisabai" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tZlkZHg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zrRM4rpM--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/477004/e7c8b243-802a-4e3d-a7da-146e9c2e3fea.jpg" alt="eisabai"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/eisabai/your-first-30-days-as-a-software-developer-at-a-tech-company-273e" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Your First 30 Days as a Software Developer at a Tech Company&lt;/h2&gt;
      &lt;h3&gt;Isabel Nyo „Éª Aug 24 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#advice&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Data Types JS {Day -18}</title>
      <author>Al Siam</author>
      <pubDate>Tue, 31 Aug 2021 17:57:24 +0000</pubDate>
      <link>https://dev.to/alsiamworld/data-types-js-day-18-2hlp</link>
      <guid>https://dev.to/alsiamworld/data-types-js-day-18-2hlp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day-18-"&gt;
  &lt;/a&gt;
  100daysofcode { Day -18 }
&lt;/h1&gt;

&lt;p&gt;Today I learned some important things about JavaScript.&lt;/p&gt;

&lt;p&gt;There are two types of data: primitive data and non-primitive data.&lt;br&gt;
Primitive data type:&lt;br&gt;
=&amp;gt; Number, string, boolean, undefined, null, symbol&lt;br&gt;
Non-primitive data types:&lt;br&gt;
=&amp;gt; Objects and arrays&lt;/p&gt;

&lt;p&gt;Also learned the difference between == and ===, the difference between block scope and global scope, also learned the difference between null and undefined.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ESAgitV0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cezht4t3p5x0ixq5ejfr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ESAgitV0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cezht4t3p5x0ixq5ejfr.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#javascript-programming-codinglife-devcommunity"&gt;
  &lt;/a&gt;
  javascript #programming #codinglife #devcommunity
&lt;/h1&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Unit testing a react component which uses context API</title>
      <author>Vignesh Pugazhendhi</author>
      <pubDate>Tue, 31 Aug 2021 17:55:39 +0000</pubDate>
      <link>https://dev.to/vignesh_pugaz/unit-testing-a-react-component-which-uses-context-api-3nen</link>
      <guid>https://dev.to/vignesh_pugaz/unit-testing-a-react-component-which-uses-context-api-3nen</guid>
      <description>&lt;h1&gt;
  &lt;a href="#unit-testing"&gt;
  &lt;/a&gt;
  Unit Testing
&lt;/h1&gt;

&lt;p&gt;In programming, unit testing is the method to test a single unit of code. A single unit of code may be one or more program modules combined together or the smallest unit of working code that cannot be divided further, by doing so the unit on the whole is not functional as expected.If you are familiar with reactjs testing libraries like jest and enzyme, jasmine or react-testing-library, you must have tested individual components on the top level by shallow rendering. Shallow rendering renders a particular component without rendering it's children for it to be tested.Here we will be learning how to unit test a react component using context API with the help of enzyme testing utility.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#enzyme"&gt;
  &lt;/a&gt;
  Enzyme
&lt;/h1&gt;

&lt;p&gt;Enzyme is not a testing library.It is more of a testing utility which lets you manipulate,traverse,interact with the DOM elements. Enzyme can be used with jest or karma or mocha depending upon the need.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#context-api"&gt;
  &lt;/a&gt;
  Context API
&lt;/h1&gt;

&lt;p&gt;Context API by reactjs provides a way to pass down the data to the components without having to actually pass the data as props at each level. For example, consider component A having 3 nested children B,C and D.If A has to pass some values to D,instead of prop drilling the values, one can wrap the component D as a consumer of the context and A as a provider.&lt;br&gt;
Context API might sound similar to react-redux architecture but it is completely different from it.&lt;br&gt;
For those who do not have an experience working with context API, you can go through the reactjs documentation for better understanding&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;unit testing context api&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Consider the following piece of code to setup a context:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';

export default React.createContext("en")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's call this file languageContext.js. Now since the context is now defined, we can wrap our root component as the provider.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useEffect, useState } from "react";
import "./App.css";
import GuessedWord from "./GuessedWord/GuessedWord";
import LanguagePicker from "./GuessedWord/LanguagePicker";
import languageContext from "./languageContext";

/**
 * @function reducer to update state automatically when dispatch is called
 * @param state {object} previous state
 * @param action {object} type and payload properties
 * @return {object} new state
 */

const reducer = (state, action) =&amp;gt; {
  switch (action.type) {
    case "setSecretWord":
      return { ...state, secretWord: action.payload };
    case "setLanguage":
      return { ...state, language: action.payload };
    default:
      throw new Error(`Invalid action type ${action.type}`);
  }
};

function App(props) {
  //const [secretWord,setSecretWord]=useState('');

  const [state, dispatch] = React.useReducer(reducer, {
    secretWord: "",
    language: "en",
  });

  const success = false;
  const guessedWords = [];

  const setSecretWord = (secretWord) =&amp;gt; {
    dispatch({ type: "setSecretWord", payload: secretWord });
  };

  const setLanguage = (lang) =&amp;gt; {
    dispatch({ type: "setLanguage", payload: lang });
  };

  useEffect(() =&amp;gt; {
    getSecretWord(setSecretWord);
  }, []);

  let content;
  if (!state.secretWord.length) content = &amp;lt;div data-test="spinner" /&amp;gt;;
  else
    content = (
      &amp;lt;&amp;gt;
        &amp;lt;h1&amp;gt;Jotto&amp;lt;/h1&amp;gt;
        &amp;lt;languageContext.Provider value={state.language}&amp;gt;
          &amp;lt;LanguagePicker setLanguage={setLanguage} /&amp;gt;
          &amp;lt;GuessedWord guessedWords={guessedWords} /&amp;gt;
        &amp;lt;/languageContext.Provider&amp;gt;
      &amp;lt;/&amp;gt;
    );

  return &amp;lt;div data-test="component-app"&amp;gt;{content}&amp;lt;/div&amp;gt;;
}

export default App;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The LanguagePicker component is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import propTypes from "prop-types";

function LanguagePicker({setLanguage}) {
  const languages = [
    { code: "en", symbol: "üá∫üá∏" },
    { code: "ar", symbol: "üá¶üá™" },
  ];
  const languageIcons = languages.map((lang) =&amp;gt; {
    return (
      &amp;lt;span
        key={lang.code}
        data-test="language-icon"
        onClick={() =&amp;gt; setLanguage(lang.code)}
      &amp;gt;
        {lang.symbol}
      &amp;lt;/span&amp;gt;
    );
  });
  return &amp;lt;div data-test="component-language-picker"&amp;gt;{languageIcons}&amp;lt;/div&amp;gt;;
}

LanguagePicker.propTypes = {
  setLanguage: propTypes.func.isRequired,
};

export default LanguagePicker;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The LanguagePicker component allows us to select a language of preference which we store in a local state of our root-level component. We wrap the App.js,our root-level-component as a Context Provider. This is done so that the root-level component acts a data provider to the child components. We pass the data as a "value" prop. So each of the child components now has access to this value prop as each of them act as a consumer.&lt;/p&gt;

&lt;p&gt;The GuessedWords component is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import PropTypes from "prop-types";

//services and helpers
import languageContext from "../context/languageContext";
import {getStringsByLanguage} from './strings';

function GuessedWord({ guessedWords }) {
  const language=React.useContext(languageContext);
  if (!guessedWords.length)
    return (
      &amp;lt;div data-test="guessed-word-component"&amp;gt;
        &amp;lt;span data-test="instructions"&amp;gt;{getStringsByLanguage(language,"guessPrompt")}&amp;lt;/span&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  return (
    &amp;lt;div data-test="guessed-word-component"&amp;gt;
      &amp;lt;table data-test="table"&amp;gt;
        &amp;lt;thead&amp;gt;
          &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;GuessedWord&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Match Count&amp;lt;/th&amp;gt;
          &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;
        &amp;lt;tbody&amp;gt;
          {guessedWords.map((guess, index) =&amp;gt; (
            &amp;lt;tr key={index} data-test="rows"&amp;gt;
              &amp;lt;th&amp;gt;{guess.guessedWord}&amp;lt;/th&amp;gt;
              &amp;lt;th&amp;gt;{guess.match}&amp;lt;/th&amp;gt;
            &amp;lt;/tr&amp;gt;
          ))}
        &amp;lt;/tbody&amp;gt;
      &amp;lt;/table&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

GuessedWord.propTypes = {
  guessedWords: PropTypes.arrayOf(
    PropTypes.shape({
      guessedWord: PropTypes.string.isRequired,
      match: PropTypes.number.isRequired,
    })
  ).isRequired,
};

export default GuessedWord;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We make use of React.useContext() hook to access the "value" prop of the parent component's provider wrapper. We pass the languageContext as an argument to the hook.&lt;br&gt;
The function getStringsByLanguage returns the localized string based on the language chosen. Now our task is to unit test this component. We test two scenarios here. If the language chosen is "en", we will return "Try to guess the secret word". If the language chosen is "ar" , we return "ÿ≠ÿßŸàŸÑ ÿ™ÿÆŸÖŸäŸÜ ÿßŸÑŸÉŸÑŸÖÿ© ÿßŸÑÿ≥ÿ±Ÿäÿ©". The code for the unit test file is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { shallow } from "enzyme";
import checkPropTypes from "check-prop-types";
import GuessedWord from "./GuessedWord";


const defaultProps = {
  guessedWords: [{ guessedWord: "train", match: 3 }],
};

const setup = (props = defaultProps) =&amp;gt; {
  return shallow(&amp;lt;GuessedWord {...props} /&amp;gt;);
};
describe("language picker scenarios", () =&amp;gt; {
  test("should prompt the guess instruction in english", () =&amp;gt; {
    const wrapper = setup({ guessedWords: [] });
    const guessInstruction = wrapper.find(`[data-test="instructions"]`);
    expect(guessInstruction.text()).toBe("Try to guess the secret word");
  });
  test("should prompt the guess instruction in arabic", () =&amp;gt; {
    const originalUseContext = React.useContext;
    const mockReactUseContext = jest.fn().mockReturnValue("ar");
    React.useContext = mockReactUseContext;
    const wrapper = setup({ guessedWords: [] });
    const guessInstruction =  wrapper.find(`[data-test="instructions"]`);
expect(guessInstruction.text()).toBe("ÿ≠ÿßŸàŸÑ ÿ™ÿÆŸÖŸäŸÜ ÿßŸÑŸÉŸÑŸÖÿ© ÿßŸÑÿ≥ÿ±Ÿäÿ©");
React.useContext=originalUseContext;
  });
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We shallow render the GuessedWords component. We know that the default language is "en" in the context provider.So the first test case should be obvious to you. In the second test case, we mock the original React.useContext() hook and we set the language as "ar"; Now since the language is set to arabic and the GuessedWords component is shallow rendered, our assertion should be the text displayed in arabic.It is always a good practice to mock your functions or hooks in your component and restore them after each assertion.This is done so that the original definition of your function or hook is restored for all other test cases in your test suite which are using them.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>testing</category>
    </item>
    <item>
      <title>Getting Started with GitHub Codespaces from a Serverless Perspective</title>
      <author>Ken Collins</author>
      <pubDate>Tue, 31 Aug 2021 17:22:44 +0000</pubDate>
      <link>https://dev.to/aws-heroes/getting-started-with-github-codespaces-from-a-serverless-perspective-171k</link>
      <guid>https://dev.to/aws-heroes/getting-started-with-github-codespaces-from-a-serverless-perspective-171k</guid>
      <description>&lt;p&gt;If you are into Serverless and AWS Lambda, you may already know that the &lt;a href="https://aws.amazon.com/serverless/sam/"&gt;AWS Serverless Application Model (SAM)&lt;/a&gt; CLI makes it easy to leverage their Docker &lt;a href="https://github.com/aws/aws-sam-build-images"&gt;build images&lt;/a&gt; as development containers. We do exactly this for our &lt;a href="https://lamby.custominktech.com/"&gt;Rails &amp;amp; Lambda&lt;/a&gt; projects.&lt;/p&gt;

&lt;p&gt;Leveraging Docker with SAM ensures we have a Linux environment and versioned dependencies that closely mimic the Lambda Runtime or Container being shipped. The use and &lt;a href="https://dev.to/quinncuatro/the-promise-of-docker-containers-57fd"&gt;The Promise of Docker&lt;/a&gt; to sovle these problems is nothing new... but something else is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-rise-of-ephemeral-dev-environments"&gt;
  &lt;/a&gt;
  ‚ú® The Rise of Ephemeral Dev Environments
&lt;/h2&gt;

&lt;p&gt;A few weeks ago GitHub's engineering team released an &lt;a href="https://github.blog/2021-08-11-githubs-engineering-team-moved-codespaces/"&gt;in-depth article&lt;/a&gt; announcing their internal usage of the now generally available &lt;a href="https://github.com/features/codespaces"&gt;GitHub Codespaces&lt;/a&gt;. Since Custom Ink shares many of the same problems described in this post, I was curious if our Lambda projects could easily leverage Codespaces. But what is this new tool? Where did it come from? And what is this &lt;code&gt;devcontainer.json&lt;/code&gt; file?&lt;/p&gt;

&lt;p&gt;As best I can tell this all started in May of 2019 when the VS Code team first mentioned their &lt;a href="https://code.visualstudio.com/blogs/2019/05/02/remote-development"&gt;remote development extensions&lt;/a&gt;. About a year later this content was rolled up into the &lt;a href="https://code.visualstudio.com/docs/remote/remote-overview"&gt;VS Code Remote Development&lt;/a&gt; guides we have today.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9JToGH-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21j55qowytmm548xtrgz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9JToGH-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21j55qowytmm548xtrgz.png" alt="VS Code Remote Development Architecture Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Prior to Codespaces, we have had a clear leader in the automated development environment space with &lt;a href="https://www.gitpod.io"&gt;Gitpod&lt;/a&gt;. It was even featured in a January 2021 episode of &lt;a href="https://www.youtube.com/watch?v=rjDDAFHEYEc&amp;amp;list=PLehXSATXjcQFHpz-HAO8YOC6EqFScEz27"&gt;Containers from the Couch&lt;/a&gt;. Gitpod leverages the same technology built into VS Code for remote development.&lt;/p&gt;

&lt;p&gt;However, sometimes slow and steady wins the race. If this were ever true for GitHub-based projects, I think we have a huge winner with GitHub Codespaces. Keep reading below on how your company (or you) could get started. I will even cover how well Codespaces has worked for our Lambda projects that use an existing Docker in Docker development pattern.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-settings"&gt;
  &lt;/a&gt;
  ‚öôÔ∏è GitHub Settings
&lt;/h2&gt;

&lt;p&gt;GitHub Codespaces is ONLY available now for GitHub Teams &amp;amp; Enterprise Cloud plans. It is not yet available for public repositories. If you are an administrator of such an account, here are a few things I did &lt;a href="https://docs.github.com/en/codespaces/managing-codespaces-for-your-organization"&gt;at the organization level&lt;/a&gt; to get started experimenting.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.github.com/en/codespaces/managing-codespaces-for-your-organization/enabling-codespaces-for-your-organization#setting-a-spending-limit"&gt;Enable Codespaces&lt;/a&gt;: This can also be disabled completely or enabled for select users.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.github.com/en/codespaces/managing-codespaces-for-your-organization/managing-repository-access-for-your-organizations-codespaces"&gt;Repository Access&lt;/a&gt;: You can even limit repositories that are able to use Codespaces. If your GitHub account leverages permissions &amp;amp; teams, remember, Codespaces (via the generated &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; will not grant anyone elevated permissions to other repositories.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.github.com/en/billing/managing-billing-for-github-codespaces/managing-spending-limits-for-codespaces"&gt;Manage Spending Limits&lt;/a&gt;: It would have been neat to see a way to limit which VMs (vCPU/Memory) options could have been used here.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.github.com/en/codespaces/managing-codespaces-for-your-organization/managing-encrypted-secrets-for-your-repository-and-organization-for-codespaces#adding-secrets-for-an-organization"&gt;Organizational Secrets&lt;/a&gt;: Create any secrets your organization needs to enable individuals to work. Remember, Codespaces secrets can be set at the repository or even user level too. Pick the one(s) that work the best for y'all.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#developer-tips"&gt;
  &lt;/a&gt;
  üî∞ Developer Tips
&lt;/h2&gt;

&lt;p&gt;It could go without saying but getting good at Codespaces for most may mean getting good at VS Code. Technically you could bring your own editor like Vim or Emacs. But trust me, as a recent Sublime Text convert, switching to VS Code is worth it. Make sure to take the time to Google, learn, and in some cases &lt;a href="https://github.com/Microsoft/vscode-sublime-keybindings"&gt;install packages&lt;/a&gt; that make the transition easier.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dotfiles-amp-settings"&gt;
  &lt;/a&gt;
  Dotfiles &amp;amp; Settings
&lt;/h3&gt;

&lt;p&gt;Remote development needs to feel local! Everything that makes your editor &amp;amp; terminal productive needs to be available to you. As described in the &lt;a href="https://docs.github.com/en/codespaces/customizing-your-codespace/personalizing-codespaces-for-your-account"&gt;Personalizing Codespaces&lt;/a&gt; guide setting up your Dotfiles was high on my list.&lt;/p&gt;

&lt;p&gt;For years I have maintained a personal Zshkit which had a ton of personal functions and aliases. When moving to Codespaces, I took the time to clean them up and create a &lt;code&gt;github.com/metaskills/dotfiles&lt;/code&gt; repository, cloned it locally and hooked it up to my ZSH (default shell on Mac) &lt;code&gt;~/.zshrc&lt;/code&gt; file. Codespaces will automatically clone this repo when creating a Codespace and install it by running the &lt;code&gt;install.sh&lt;/code&gt; script. Here is mine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$CODESPACES&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"true"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"source /workspaces/.codespaces/.persistedshare/dotfiles/rc"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.zshrc
  &lt;span class="nb"&gt;sudo &lt;/span&gt;chsh &lt;span class="nt"&gt;-s&lt;/span&gt; /usr/bin/zsh
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can leverage the &lt;code&gt;CODESPACES&lt;/code&gt; environment variable to do any customization per environment. Also, do not forget to use &lt;a href="https://code.visualstudio.com/docs/editor/settings-sync"&gt;Settings Sync&lt;/a&gt;. I think this is only needed if you use VS Code's web-based editor. More on that topic later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#your-codespaces-settings"&gt;
  &lt;/a&gt;
  Your Codespaces Settings
&lt;/h3&gt;

&lt;p&gt;You can &lt;a href="https://docs.github.com/en/codespaces/managing-your-codespaces"&gt;Manage Your Codespaces&lt;/a&gt; settings at somewhat the same level as the organization. Here are a few settings I did.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Access &amp;amp; Security&lt;/strong&gt;: Set this to "All repositories". Your needs may vary.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Editor Preference&lt;/strong&gt;: Set to "Visual Studio Code" vs for web. Ensures the &lt;code&gt;[&amp;lt;&amp;gt; Code]&lt;/code&gt; button on repos opens VS Code on my Mac and avoids the need to click redirect in the browser.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Region&lt;/strong&gt;: I set this manually to &lt;code&gt;EastUs&lt;/code&gt; but I suspect I had no reason to do so.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Added Secrets&lt;/strong&gt;: Read below on using SSH with Ruby Bundler or NPM packages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#codespaces-extension"&gt;
  &lt;/a&gt;
  Codespaces Extension
&lt;/h3&gt;

&lt;p&gt;Install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=GitHub.codespaces"&gt;GitHub Codespaces&lt;/a&gt; for VS Code. I think this is done for you automatically if you are using the web-based editor. Installing it on your host machine's VS Code will mean you can use Codespaces without ever browsing to GitHub.com and clicking on a &lt;code&gt;[&amp;lt;&amp;gt; Code]&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pCXFXuQM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d97miz9543w1h22fdp0v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCXFXuQM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d97miz9543w1h22fdp0v.png" alt="The Codespaces Command Pallet in VS Code provided by the Codespaces Extension"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-integrated-terminal"&gt;
  &lt;/a&gt;
  The Integrated Terminal
&lt;/h3&gt;

&lt;p&gt;Assuming you have setup your Dotfiles, VS Code's &lt;a href="https://code.visualstudio.com/docs/editor/integrated-terminal"&gt;integrated terminal&lt;/a&gt; should feel familiar by mirroring your host machine's prompt, aliases, and more. If your default shell is ZSH, you may need to do a few things to help Codespaces to use ZSH by default vs Bash. Here are my settings for the integrated terminal now. Mind you, there was (maybe still is) &lt;a href="https://github.community/t/integrated-terminal-setting-not-respected/145625"&gt;a bug&lt;/a&gt; in VS Code where ZSH would not be respected. I have noticed in some cases Bash is used but it is easy to launch a new profile with ZSH if that happens.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;"terminal.integrated.fontSize"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"terminal.integrated.defaultProfile.osx"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"zsh"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"terminal.integrated.defaultProfile.linux"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"zsh"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using &lt;code&gt;Command+K&lt;/code&gt; to clear the terminal's buffer is second nature to most. By default this key binding will not reach the integrated terminal. You can edit your Keyboard Shortcuts JSON file to solve for that. Below is a screen capture of the magic little button you have to press to edit that raw JSON file. Use the following snippet to fix this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t4jEsdyF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4a77pqc3bk7zpymyzka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t4jEsdyF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4a77pqc3bk7zpymyzka.png" alt="Super Hidden Keyboard Shortcuts JSON Edit Button"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cmd+k"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"workbench.action.terminal.clear"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"when"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"terminalFocus"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Terminal visibility and placement. When working on my laptop's smaller screen, I learned that you can use &lt;code&gt;Control+~&lt;/code&gt; to toggle the visibility of the integrated terminal. However, when working at my desk and larger screen, I really want the integrated terminal to be to the right of my editor. Thanks to this &lt;a href="https://stackoverflow.com/questions/41874426/how-do-i-move-the-panel-in-visual-studio-code-to-the-right-side"&gt;this Stack Overflow&lt;/a&gt; here are convoluted steps to make this happen. Hopefully one day they will make this easier. üòÖ&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;At the right top of the integrated terminal, click the &lt;code&gt;+&lt;/code&gt; sign to open a 2nd terminal.&lt;/li&gt;
&lt;li&gt;Within the panel to the right, right click any of the two profiles, select &lt;code&gt;Move into Editor Area&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Close the bottom integrated terminal with the &lt;code&gt;x&lt;/code&gt; button.&lt;/li&gt;
&lt;li&gt;Focus the editor tab at the top moved from step 2, click the &lt;code&gt;[|]&lt;/code&gt; split editor button.&lt;/li&gt;
&lt;li&gt;Close the shell tab on the left side of the screen.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#fun-highlights"&gt;
  &lt;/a&gt;
  üéâ Fun Highlights
&lt;/h2&gt;

&lt;p&gt;Here are a few things I was pleasantly surprised with Codespaces' DX and how it works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When learning Codespaces or working on uncommitted code, you may have to rebuild your development container. Codespaces automatically maintains your present working directory, open files, etc when doing this. Amazing!&lt;/li&gt;
&lt;li&gt;You can see all your Codespaces on GitHub by navigating to &lt;a href="https://github.com/codespaces"&gt;https://github.com/codespaces&lt;/a&gt;. However, I typically use VS Code's &lt;a href="https://marketplace.visualstudio.com/items?itemName=GitHub.codespaces"&gt;extension&lt;/a&gt; to navigate, open, and disconnect.&lt;/li&gt;
&lt;li&gt;Leveraging the &lt;code&gt;CODESPACES&lt;/code&gt; environment variable set to &lt;code&gt;true&lt;/code&gt; is an easy way to integrate your existing tooling into Codespaces allowing your teams to support multiple ways to bootstrap your applications.&lt;/li&gt;
&lt;li&gt;Forwarded ports are automatically detected via the integrated terminal's STDOUT. For example, a &lt;code&gt;.bin/rails server&lt;/code&gt; will ouput whatever host/port you are using and Codespaces will see it. If needed you can use the &lt;code&gt;forwardPorts&lt;/code&gt; config for &lt;code&gt;devcontainer.json&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#difficult-lessons"&gt;
  &lt;/a&gt;
  ‚ö†Ô∏è Difficult Lessons
&lt;/h2&gt;

&lt;p&gt;Some hard lessons learned when dipping into the deep end of using GitHub Codespaces. If you have any to share, please drop some comments below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#private-packages-amp-ssh"&gt;
  &lt;/a&gt;
  Private Packages &amp;amp; SSH
&lt;/h3&gt;

&lt;p&gt;GitHub does a great job at providing your Codespace with a short lived &lt;code&gt;GITHUB_TOKEN&lt;/code&gt;. Most package managers including NPM and Bundler can leverage this. However, if your organization has standardized on SSH setting up your projects could be a problem.&lt;/p&gt;

&lt;p&gt;Thankfully when I reached out on Twitter, Jonathan Carter on the Codespaces team, &lt;a href="https://twitter.com/LostInTangent/status/1427053387007225861"&gt;seemed to suggest&lt;/a&gt; they may be working on a native SSH integration one day. Till then, here is the solution I came up with. This process address some sequencing issues around &lt;code&gt;devcontainer.json&lt;/code&gt;'s &lt;a href="https://code.visualstudio.com/docs/remote/devcontainerjson-reference#_lifecycle-scripts"&gt;Lifecycle Scripts&lt;/a&gt; and when your Dotfiles are installed. Credit to VS Codes &lt;a href="https://code.visualstudio.com/docs/remote/containers#_using-ssh-keys"&gt;Using SSH Keys&lt;/a&gt; guide. Also, some things here are pulled directly from the &lt;a href="https://github.com/webfactory/ssh-agent"&gt;GitHub Action&lt;/a&gt; to setup SSH. Again, thanks to Johnathan Carter for the ideas.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a personal Codespace secret called &lt;code&gt;PERSONAL_SSH_KEY&lt;/code&gt; by visiting this page &lt;a href="https://github.com/settings/codespaces/secrets/new"&gt;https://github.com/settings/codespaces/secrets/new&lt;/a&gt; and adding your private key, typically found in the &lt;code&gt;~/.ssh/id_rsa&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Add this snippet to your &lt;code&gt;postCreate&lt;/code&gt; script. It ensures GitHub is in the known hosts for SSH.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Adding GitHub.com keys to ~/.ssh/known_hosts"&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.ssh/known_hosts
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;github.com ssh-dss AAAAB3NzaC1kc3MAAACBANGFW2P9xlGU3zWrymJgI/lKo//ZW2WfVtmbsUZJ5uyKArtlQOT2+WRhcg4979aFxgKdcsqAYW3/LS1T2km3jYW/vr4Uzn+dXWODVk5VlUiZ1HFOHf6s6ITcZvjvdbp6ZbpM+DuJT7Bw+h5Fx8Qt8I16oCZYmAPJRtu46o9C2zk1AAAAFQC4gdFGcSbp5Gr0Wd5Ay/jtcldMewAAAIATTgn4sY4Nem/FQE+XJlyUQptPWMem5fwOcWtSXiTKaaN0lkk2p2snz+EJvAGXGq9dTSWHyLJSM2W6ZdQDqWJ1k+cL8CARAqL+UMwF84CR0m3hj+wtVGD/J4G5kW2DBAf4/bqzP4469lT+dF2FRQ2L9JKXrCWcnhMtJUvua8dvnwAAAIB6C4nQfAA7x8oLta6tT+oCk2WQcydNsyugE8vLrHlogoWEicla6cWPk7oXSspbzUcfkjN3Qa6e74PhRkc7JdSdAlFzU3m7LMkXo1MHgkqNX8glxWNVqBSc0YRdbFdTkL0C6gtpklilhvuHQCdbgB3LBAikcRkDp+FCVkUgPC/7Rw==&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.ssh/known_hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Add this snippet to your Dotfiles. It will ensure the proper SSH agent is started, if not already, and that the key environment variables are set.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$CODESPACES&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"true"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
  if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-z&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$SSH_AUTH_SOCK&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nv"&gt;RUNNING_AGENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;ps &lt;span class="nt"&gt;-ax&lt;/span&gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s1"&gt;'ssh-agent -s'&lt;/span&gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; | &lt;span class="nb"&gt;wc&lt;/span&gt; &lt;span class="nt"&gt;-l&lt;/span&gt; | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'[:space:]'&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$RUNNING_AGENT&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"0"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
      &lt;span class="c"&gt;# Launch a new instance of the agent&lt;/span&gt;
      ssh-agent &lt;span class="nt"&gt;-s&lt;/span&gt; &amp;amp;&amp;gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.ssh/ssh-agent
    &lt;span class="k"&gt;fi
    &lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.ssh/ssh-agent&lt;span class="sb"&gt;`&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;
  &lt;span class="c"&gt;# Add my SSH key.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PERSONAL_SSH_KEY&lt;/span&gt;&lt;span class="p"&gt;+1&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;ssh-add - &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PERSONAL_SSH_KEY&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;fi
fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to see this all come together with our Docker in Docker Lambda patterns, please read the &lt;a href="https://dev.to/aws-heroes/serverless-docker-patterns-4g1p"&gt;Serverless Docker Patterns&lt;/a&gt; article in this series where we describe how to use the &lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt; in a cross platform way for Mac &amp;amp; Linux.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-cli"&gt;
  &lt;/a&gt;
  AWS CLI
&lt;/h3&gt;

&lt;p&gt;For our Lambda projects we use Docker in Docker patterns where both the AWS &amp;amp; SAM CLIs are pre-installed on the development image. However, you may need the AWS CLI installed on the developer's host machine too. In this case, Codespaces. Here is a short snippet that you can use in your &lt;code&gt;postCreate&lt;/code&gt; script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Installing AWS CLI"&lt;/span&gt;
&lt;span class="nb"&gt;pushd&lt;/span&gt; /tmp
curl &lt;span class="s2"&gt;"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; &lt;span class="s2"&gt;"awscliv2.zip"&lt;/span&gt;
unzip &lt;span class="nt"&gt;-qq&lt;/span&gt; awscliv2.zip
&lt;span class="nb"&gt;sudo&lt;/span&gt; ./aws/install
&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; awscliv2.zip ./aws
&lt;span class="nb"&gt;popd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#docker-in-docker"&gt;
  &lt;/a&gt;
  Docker in Docker
&lt;/h3&gt;

&lt;p&gt;I've said this before but cross platform Docker in Docker is really hard. This series aims to talk about most of them, but one I learned the hard way is that sometimes the pain comes from the ones you love... in this case AWS SAM. The team is doing some amazing work but I ran into a few issues where Docker in Docker patterns have broken down. Read here for details.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aws/aws-sam-cli/issues/2837#issuecomment-845487064"&gt;No Response from Invoke Container for Lambda Inside docker-compose #2837&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aws/aws-sam-cli/issues/2837#issuecomment-845487064"&gt;Watch Option for SAM Build Command #921&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#full-lamby-example"&gt;
  &lt;/a&gt;
  üöÇ Full Lamby Example
&lt;/h2&gt;

&lt;p&gt;Assuming the other patterns were in place like various &lt;code&gt;postCreate&lt;/code&gt; hooks for SSH, using GitHub Codespaces with your already Docker'ized project is super easy. Here is a complete &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; file for one of our projects. Again, see the &lt;a href="https://dev.to/aws-heroes/serverless-docker-patterns-4g1p"&gt;Serverless Docker Patterns&lt;/a&gt; related post on how we are using &lt;code&gt;COMPOSE_FILE&lt;/code&gt; for Mac filesystem performance and why it would be needed here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"my-application"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"forwardPorts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4020&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"remoteEnv"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"COMPOSE_FILE"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"docker-compose.yml"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"postCreateCommand"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./.devcontainer/postCreate"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In fact, none of this would be needed for a starter application! Give it a try. Go through our &lt;a href="https://lamby.custominktech.com/docs/quick_start"&gt;Lamby Quick Start&lt;/a&gt; guide, commit your project to GitHub... and give Codespaces a try!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#security-questions"&gt;
  &lt;/a&gt;
  üîê Security Questions
&lt;/h2&gt;

&lt;p&gt;The Codespaces team was kind enough to write their own &lt;a href="https://docs.github.com/en/codespaces/codespaces-reference/security-in-codespaces"&gt;Security in Codespaces&lt;/a&gt; documentation. I'll highlight their introduction below:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Codespaces is designed to be security hardened by default. Consequently, you will need to ensure that your software development practices do not risk reducing the security posture of your codespace.&lt;/p&gt;

&lt;p&gt;This guide describes the way Codespaces keeps your development environment secure and provides some of the good practices that will help maintain your security as you work. As with any development tool, remember that you should only open and work within repositories you know and trust.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Good stuff! Security is a shared responsibility and it appears GitHub is doing their part. Please read over the full documentation for more information, but here are a few things I paid special attention to.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.github.com/en/codespaces/managing-codespaces-for-your-organization/reviewing-your-organizations-audit-logs-for-codespaces"&gt;Audit Logs&lt;/a&gt;: Are generated and can be queried.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.github.com/en/codespaces/managing-codespaces-for-your-organization/managing-encrypted-secrets-for-your-repository-and-organization-for-codespaces"&gt;Organization &amp;amp; User Secrets&lt;/a&gt;: Built on the &lt;a href="https://libsodium.gitbook.io/doc/public-key_cryptography/sealed_boxes"&gt;same technology&lt;/a&gt; GitHub draws a line between GitHub standard org/user secrets with the Codespace ones. Again, they can be set at the organization, repository, or user. Providing an immense amount of control and security layers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.github.com/en/codespaces/customizing-your-codespace/personalizing-codespaces-for-your-account#dotfiles"&gt;Dotfiles&lt;/a&gt;: Remind users that these are public repositories! Tho possible to encrypt secrets, I personally recommend keeping them basic to aliases and functions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.github.com/en/codespaces/codespaces-reference/security-in-codespaces#isolated-networking"&gt;Secure Networking&lt;/a&gt;: Authenticated via GitHub via temporary tokens. Forwarding ports for web servers is done securely over the network between the host. Nothing is public by default.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-coming"&gt;
  &lt;/a&gt;
  üîÆ What is Coming?
&lt;/h2&gt;

&lt;p&gt;As mentioned above, I would love to see a native SSH solution. For now, the workarounds are minimal and feel secure with GitHub Secrets and Codespaces integration.&lt;/p&gt;

&lt;p&gt;In their introductory &lt;a href="https://github.blog/2021-08-11-githubs-engineering-team-moved-codespaces/"&gt;blog article&lt;/a&gt;, the GitHub team put a lot of emphasis on prebuilds ensuring that each Codespaces development environment was super fast to setup. This was critical for their team and as of now Gitpod is making a clear distinction this is a &lt;a href="https://www.gitpod.io/gitpod-vs-github-codespaces"&gt;key differentiator&lt;/a&gt; for them. I suspect prebuilds are coming soon. ü§î&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  üìö Resources
&lt;/h2&gt;

&lt;p&gt;Thanks so much for reading! I would love to hear if you found this article helpful or what your organization may be doing with GitHub Codespaces. üíï&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.github.com/en/codespaces"&gt;GitHub Codespaces&lt;/a&gt; - Blazing fast cloud
developer environments with Visual Studio Code backed by high performance VMs that start in seconds.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.blog/2021-08-11-githubs-engineering-team-moved-codespaces/"&gt;GitHub‚Äôs Engineering Team has moved to Codespaces&lt;/a&gt; - Great description of the business needs for easy development environments. Common for most orgs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://lamby.custominktech.com/docs/quick_start"&gt;Getting Started with Rails on Lambda&lt;/a&gt; - An quick start guide using Docker for development with GitHub &amp;amp; Codespaces.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://code.visualstudio.com/docs/remote/remote-overview"&gt;VS Code Remote Development&lt;/a&gt; - The architecture behind GitHub Codespaces.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.gitpod.io"&gt;Gitpod&lt;/a&gt; - Spin up fresh, automated dev environments
for each task, in the cloud, in seconds.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.gitpod.io/blog/ephemeral-dev-envs"&gt;DevX Digest: The Rise of Ephemeral Developer Environments&lt;/a&gt; - Great post by &lt;a href="https://twitter.com/paulienuh"&gt;Pauline P. Narvas&lt;/a&gt; on where cloud-based dev environments are headed.&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Django React Boilerplate - With Free Samples</title>
      <author>Sm0ke</author>
      <pubDate>Tue, 31 Aug 2021 17:08:02 +0000</pubDate>
      <link>https://dev.to/sm0ke/django-react-boilerplate-with-free-samples-6n8</link>
      <guid>https://dev.to/sm0ke/django-react-boilerplate-with-free-samples-6n8</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This article explains how to bundle together &lt;strong&gt;&lt;a href="https://blog.appseed.us/django-react-boilerplate/"&gt;Django and React&lt;/a&gt;&lt;/strong&gt; and code a full-stack &lt;strong&gt;boilerplate&lt;/strong&gt; that can be reused over multiple projects. For newcomers, &lt;strong&gt;Django&lt;/strong&gt; is a leading Python Framework used for backend development, and &lt;strong&gt;React&lt;/strong&gt; is the most popular JS library used to code user interfaces backed by Facebook. To make this article more useful, a shortlist with open-source full-stack starters is provided.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;Section #1: The &lt;strong&gt;general view&lt;/strong&gt; of the project&lt;/li&gt;
&lt;li&gt;Section #2: &lt;strong&gt;Django&lt;/strong&gt; - Short presentation&lt;/li&gt;
&lt;li&gt;Section #3: &lt;strong&gt;What is React&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Section #4: Set up &lt;strong&gt;Django API Backend&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Section #5: &lt;strong&gt;Test the Django API&lt;/strong&gt; using POSTMAN&lt;/li&gt;
&lt;li&gt;Section #6: &lt;strong&gt;Code React UI&lt;/strong&gt; to communicate with Django&lt;/li&gt;
&lt;li&gt;Section #7: &lt;strong&gt;Compile the samples&lt;/strong&gt; (backend and frontend)&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Note: All article resources are available for download from Github. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The React dashboard is configured to work with a simple Django API Server. For &lt;a href="https://appseed.us/support"&gt;support&lt;/a&gt; feel free to drop any question you might have on &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/api-server-django"&gt;Django API Server&lt;/a&gt; - open-source project (MIT License)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/react-berry-dashboard"&gt;React Berry Dashboard&lt;/a&gt; - compatible React Dashboard&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#1-project-overview"&gt;
  &lt;/a&gt;
  1# - Project Overview
&lt;/h2&gt;

&lt;p&gt;Web development has been evolved a lot in the last few years and we can code the same features using different combinations and patterns. For instance, if our goal is to build a simple one-page website we can use Wix, Gatsby, Next, Eleventy (11ty), or the old-school Php bundled with jQuery.  The possibilities are infinite and the final stack depends on many factors: the technologies we know, project budget, and the will to learn something new.  In this article, we will focus on a modern stack that uses Django as the backend technology and a simple UI powered by React.  &lt;/p&gt;

&lt;p&gt;The product will use a "two-tier" architecture where the React Frontend communicates with the backend via a simple API powered by Django.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How It Works&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Django API exposes a simple authentication interface&lt;/li&gt;
&lt;li&gt;React UI is started and loaded by the browser&lt;/li&gt;
&lt;li&gt;The UI initiate the login at startup and authenticate the user&lt;/li&gt;
&lt;li&gt;The server gets the user credentials and allows the login&lt;/li&gt;
&lt;li&gt;React gets back the server response&lt;/li&gt;
&lt;li&gt;The user can access the private pages of the React UI
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The complete this tutorial the workstation must have installed a few tools and libraries used to edit and compile this basic boilerplate. Let's start with the mandatory ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Node JS&lt;/strong&gt; - used by React UI&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Python v3&lt;/strong&gt; - the language used by Django&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;GIT&lt;/strong&gt; - command-line versioning tool
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PIP&lt;/strong&gt; - the official package manager shipped by Python3&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;NPM&lt;/strong&gt; - a package manager for Javascript&lt;/li&gt;
&lt;li&gt;(optional) &lt;strong&gt;Yarn&lt;/strong&gt; - a faster alternative to NPM&lt;/li&gt;
&lt;li&gt;(optional) &lt;strong&gt;VsCode&lt;/strong&gt; or Atom - modern code editors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The ability to work using the system console might be a plus in this process.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-what-is-django"&gt;
  &lt;/a&gt;
  2# - &lt;a href="https://docs.appseed.us/content/what-is/django"&gt;What is Django&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Django is a modern web framework that comes with the "batteries-included" concept which means it provides modules and libraries for many common features required in modern web development:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Session-based authentication&lt;/li&gt;
&lt;li&gt;Abstract Database access via a powerful ORM&lt;/li&gt;
&lt;li&gt;Built-in security patterns&lt;/li&gt;
&lt;li&gt;Helpers: forms, models, and data validation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Django can be installed in many ways and the most recommended way is to use PIP, the official Python package manager. Here is the complete list with commands:&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Create a virtual environment&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Create the environment&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt; 
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Activate the virtual environment&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Install the latest Django version&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;Django
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Build a basic Django project&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;hellodjango 
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;hellodjango 
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;django-admin startproject config &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #4&lt;/strong&gt; - Start the project&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py runserver 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If all goes well, we should see the default Django splash screen when accessing &lt;code&gt;http://localhost:8000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r1-33EAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/edlotaw3bkl75gnbg4j6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r1-33EAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/edlotaw3bkl75gnbg4j6.png" alt="Django - Default Starter Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-what-is-react"&gt;
  &lt;/a&gt;
  3# - &lt;a href="https://docs.appseed.us/content/what-is/react"&gt;What is React&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;React is an open-source front-end JavaScript library for building user interfaces or UI components. It is maintained by Facebook and a community of individual developers and companies. React can be used as a base in the development of single-page or mobile applications.&lt;/p&gt;

&lt;p&gt;Another important fact is the proven popularity: in 2021 the stats shows that React is used as the primary technology in frontend development superseding other frameworks like Vue, Angular or Svelte. For more information about this amazing library feel free to access:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://reactjs.org/"&gt;React JS&lt;/a&gt; - official website&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://reactjs.org/docs/getting-started.html"&gt;React JS&lt;/a&gt; - documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By following the official React tutorial, we can scaffold a project skeleton with just a few commands typed in the terminal.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Install create-react-app (CRA) tool&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; create-react-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Create the React app skeleton&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npx create-react-app reactapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Install React Dependencies&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm run start
// OR 
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn start 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command should open automatically the browser window with the React default page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C9owXl7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odwaork94c62sk3gcokj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C9owXl7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odwaork94c62sk3gcokj.png" alt="React App - The Default Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-code-the-django-api-backend"&gt;
  &lt;/a&gt;
  4# - Code the &lt;a href="https://github.com/app-generator/api-server-django"&gt;Django API&lt;/a&gt; backend
&lt;/h2&gt;

&lt;p&gt;Being such a mature framework with its first release in 2003, Django is known as a complete, &lt;code&gt;batteries-included&lt;/code&gt; library. To serve successfully the React interface, our simple Django server will implement a simple authentication service using &lt;code&gt;JWT web tokens&lt;/code&gt; that exposes a few basic methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/api/users/register&lt;/code&gt;: create a new user&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/api/users/login&lt;/code&gt;: authenticate an existing user&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/api/users/logout&lt;/code&gt;: delete the associated JWT token&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/api/users/edit&lt;/code&gt; - edit the information associated with a registered user&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To keep things simple as possible, the backend server will use the default SQLite persistence and &lt;a href="https://www.django-rest-framework.org/"&gt;Django REST Framework&lt;/a&gt; (DRF) for the API nodes.  &lt;/p&gt;

&lt;p&gt;Inside the previously created project, let's create a new Django application called "API":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;hellodjango
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py startapp app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;startapp&lt;/code&gt; command should create a new directory &lt;code&gt;api&lt;/code&gt; with this structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;api/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creating an API interface to manage transactions usually go this way :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating the model&lt;/li&gt;
&lt;li&gt;Creating the serializer&lt;/li&gt;
&lt;li&gt;Write the views or the viewsets&lt;/li&gt;
&lt;li&gt;Register the viewsets by creating routes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a simple User Model definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AbstractBaseUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PermissionsMixin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EmailField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;is_active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BooleanField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Create the serializer&lt;/strong&gt; for the User model&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A serializer allows us to convert complex Django complex data structures such as querysets or model instances in Python native objects that can be easily converted JSON/XML format, but a serializer also serializes JSON/XML to native Python.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelSerializer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serializers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;
        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;read_only_field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Code the viewsets&lt;/strong&gt; - The code will provided only for Login method (the full code is available at the end of the article)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The routes for the API interface should look like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/api/users/register&lt;/code&gt;: create a new user&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/api/users/login&lt;/code&gt;: authenticate an existing user&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/api/users/logout&lt;/code&gt;: delete the associated JWT token&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/api/users/edit&lt;/code&gt; - edit the information of a registered user&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The ViewSet class comes with built-in actions like &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;retrieve&lt;/code&gt;, &lt;code&gt;create&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;destroy&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;api.authentication.serializers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LoginSerializer&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoginViewSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;viewsets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GenericViewSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mixins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateModelMixin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;permission_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AllowAny&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
    &lt;span class="n"&gt;serializer_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LoginSerializer&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_serializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raise_exception&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validated_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_200_OK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Register the viewsets&lt;/code&gt; - aka routes&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;routers&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;api.user.viewsets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UserViewSet&lt;/span&gt;

&lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;routers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SimpleRouter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trailing_slash&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;"edit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UserViewSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"user-edit"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;"register"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RegisterViewSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"register"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;"login"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LoginViewSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"login"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;"checkSession"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ActiveSessionViewSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"check-session"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;"logout"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LogoutViewSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"logout"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note for Beginners&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The above section aims to suggest the concept without providing the full implementation. Curious minds can analyze the whole project, published on Github. For questions, feel free to ask for support in &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt;.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/api-server-django"&gt;Django REST API&lt;/a&gt; - source code published on Github&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CxWiue_h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2agyrm6al1k4xnykk43.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CxWiue_h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2agyrm6al1k4xnykk43.png" alt="Django API Server - Cover Image."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-test-django-api-using-postman"&gt;
  &lt;/a&gt;
  5# - Test Django API using POSTMAN
&lt;/h2&gt;

&lt;p&gt;Once our API is up and running we can use POSTMAN, a popular free tool to test the backend code. We assume the Django API server is started on port 5000 and the registration method is fully coded and functional.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Postman - Create a new collection and request with properties&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Request: POST over &lt;code&gt;http://localhost:5000/api/users/register&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Header Content-type: &lt;code&gt;application-json&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Body data: &lt;code&gt;user/password&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_5RF75kS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mngrufuhctnul7b7lo1k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_5RF75kS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mngrufuhctnul7b7lo1k.png" alt="Django API POSTMAN - Registration Header"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;The &lt;strong&gt;Body Content&lt;/strong&gt; specifies the credentials for the new user.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DWybyYIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g2rjccwf3wls6r72xcix.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DWybyYIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g2rjccwf3wls6r72xcix.png" alt="Django API POSTMAN - Registration Body"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;The Registration API Response&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6KIIqE_r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qyfu1d4f0wg8d8es9u2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6KIIqE_r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qyfu1d4f0wg8d8es9u2.png" alt="Django API POSTMAN - Registration Response."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, the user is created in the database and we can authenticate and move on with our full-stack project.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#6-code-react-ui"&gt;
  &lt;/a&gt;
  6# - Code React UI
&lt;/h2&gt;

&lt;p&gt;The React part of this tutorial is coded on top of an open-source project cloned from Github, &lt;strong&gt;React Berry Dashboard&lt;/strong&gt;, a Material-UI template provided by &lt;code&gt;CodedThemes&lt;/code&gt;. The initial project, basically a lifeless React template, will be improved with a few simple features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Usable authentication flow compatible with the Django API&lt;/li&gt;
&lt;li&gt;Actions: Login, Logout, and Register&lt;/li&gt;
&lt;li&gt;Guest users are redirected to the login page&lt;/li&gt;
&lt;li&gt;Private pages are visible only to the authenticated users.&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;React Berry - Clone the template sources from the &lt;a href="https://github.com/codedthemes/berry-free-react-admin-template"&gt;public repository&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/codedthemes/berry-free-react-admin-template.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;berry-free-react-admin-template
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Install Dependencies - via NPM or Yarn&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm i
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;React Datta Able&lt;/strong&gt; - Start project in development mode&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm run start
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VkNG9TXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/evref1zmyrjo3uwpcg13.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VkNG9TXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/evref1zmyrjo3uwpcg13.png" alt="React Template - Berry Dashboard."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;To code the new features the project dependencies should be updated with a few useful libraries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://formik.org/"&gt;Formik&lt;/a&gt; - used to enhance and manage the registration forms&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://axios-http.com/"&gt;Axios&lt;/a&gt; - used to manage the communication with Django API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the new dependencies are properly installed, we can proceed further with the code.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Project configuration - URL of the backend API&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The application will use a common set of variables imported in different places like login, logout, etc. To make our life easier, it might be a good idea to define all variables in a single file: &lt;code&gt;src/config.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;defaultPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/dashboard/default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt; 
    &lt;span class="na"&gt;API_SERVER&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:5000/api/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;magic&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The most important value is saved by the &lt;code&gt;API_SERVER&lt;/code&gt; variable, basically the address of our Flask API. When the project goes into production, this address should be updated accordingly with the address of the public API.&lt;/p&gt;

&lt;p&gt;Because we want to redirect the guest users to authenticate a Guard Component is provided to check the authentication context for each client request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Redirect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BASE_URL&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../config/constant&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GuestGuard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Redirect&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;BASE_URL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fragment&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/React.Fragment&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;GuestGuard&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to declare a global &lt;code&gt;store&lt;/code&gt; where the user's state is saved. The &lt;code&gt;redux-store&lt;/code&gt; provides this information in a simple way using a few variables and objects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isInitialized&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accountReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="na"&gt;ACCOUNT_INITIALIZE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;isInitialized&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;user&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="na"&gt;LOGIN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;user&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="na"&gt;LOGOUT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The variables associated with the current user should be updated based on the actions performed in the session:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Guest access: the session user is Null and &lt;code&gt;isLoggedIn&lt;/code&gt; state is false&lt;/li&gt;
&lt;li&gt;Login: the user is successfully authenticated by the backend and. Of course, &lt;code&gt;isLoggedIn&lt;/code&gt; state becomes true&lt;/li&gt;
&lt;li&gt;Logout: all session data is deleted and &lt;code&gt;isLoggedIn&lt;/code&gt; becomes false again&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, the React UI can be used to register and authenticate users.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#7-compile-the-free-samples"&gt;
  &lt;/a&gt;
  7# - Compile the Free Samples
&lt;/h2&gt;

&lt;p&gt;All the above code is already provided on Github in two separate projects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/api-server-django"&gt;Django API Server&lt;/a&gt; - open-source project (MIT License)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/react-berry-dashboard"&gt;React Berry Dashboard&lt;/a&gt; - compatible React Dashboard&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Compile the &lt;strong&gt;Django API Server&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/api-server-django.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;api-server-django
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nt"&gt;-p&lt;/span&gt; python3 venv
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source &lt;/span&gt;venv/bin/activate
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py migrate
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py runserver 5000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, we can use POSTMAN to test the authentication interface as described in the product documentation: &lt;a href="https://docs.appseed.us/boilerplate-code/api-unified-definition"&gt;Unified API Interface&lt;/a&gt;.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Compile the &lt;a href="https://github.com/app-generator/react-berry-dashboard"&gt;React Template&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/react-berry-dashboard.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;react-berry-dashboard
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm i
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm run start 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, with the front end and backend up &amp;amp; running we can start using this open-source React UI powered by a simple Django API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bk8tTW04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owhsbl0jh5bm9rm71gay.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bk8tTW04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owhsbl0jh5bm9rm71gay.png" alt="Django React Boilerplate - Login Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;During this long post we've tried to cover the basic concepts of a full-stack &lt;strong&gt;boilerplate built with React and Django&lt;/strong&gt;. For more resources, please access:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;More &lt;a href="https://appseed.us/apps/react"&gt;React Apps&lt;/a&gt; - index provided by &lt;a href="https://appseed.us/"&gt;AppSeed&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Open-source Dashboards&lt;/a&gt; - crafted in Flask and Django&lt;/li&gt;
&lt;li&gt;Free &lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; - a curated list published here on Dev.to &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>django</category>
      <category>webdev</category>
      <category>appseed</category>
    </item>
    <item>
      <title>Django - How to keep secrets safe with python-dotenv</title>
      <author>Hannah</author>
      <pubDate>Tue, 31 Aug 2021 16:54:27 +0000</pubDate>
      <link>https://dev.to/earthcomfy/django-how-to-keep-secrets-safe-with-python-dotenv-5811</link>
      <guid>https://dev.to/earthcomfy/django-how-to-keep-secrets-safe-with-python-dotenv-5811</guid>
      <description>&lt;p&gt;Often when working on a django project, we have some secret keys, OAuth keys and other critical information that needs to be kept safe and private. By no means should you expose such kind of keys because it makes your system vulnerable to security attacks.&lt;/p&gt;

&lt;p&gt;Today, we are going to see how we can use &lt;strong&gt;python-dotenv&lt;/strong&gt; to keep such kind of information hidden. As we can read from the &lt;a href="https://pypi.org/project/python-dotenv/"&gt;docs&lt;/a&gt;, basically what &lt;strong&gt;python-dotenv&lt;/strong&gt; does is read key-value pairs from a .env file and set them as environment variables to be retrieved later.&lt;/p&gt;

&lt;p&gt;First and foremost let's install this module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dotenv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create a &lt;em&gt;.env&lt;/em&gt; file in the root directory of our project. This is where we will put key value pairs of all the environment variables required by our application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#okay-what-should-we-put-in-the-env-file"&gt;
  &lt;/a&gt;
  Okay, what should we put in the &lt;em&gt;.env&lt;/em&gt; file?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href="https://docs.djangoproject.com/en/dev/ref/settings/#secret-key%5B"&gt;secret key&lt;/a&gt; that comes with every django project - This needs to be kept private because it's the crucial part of security in django. &lt;/li&gt;
&lt;li&gt;Social auth configs for Github&lt;/li&gt;
&lt;li&gt;Social auth configs for Google or any other OAuth keys.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.env&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SECRET_KEY = 'YOUR SECRET KEY'

GITHUB_KEY = 'YOUR GITHUB KEY'
GITHUB_SECRET = 'YOUR GITHUB SECRET KEY'

GOOGLE_KEY = 'YOUR GOOGLE KEY'
GOOGLE_SECRET = 'YOUR GOOGLE SECRET KEY'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Pull these configs from .env and load them in the settings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;settings.py&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;
&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# loads the configs from .env
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now instead of exposing our secret keys and OAuth keys in the settings, let's retrieve them through their key names as follows.&lt;/p&gt;

&lt;p&gt;settings.py&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# SECURITY WARNING: keep the secret key used in production secret!
&lt;/span&gt;&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'SECRET_KEY'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# social auth configs for github
&lt;/span&gt;&lt;span class="n"&gt;SOCIAL_AUTH_GITHUB_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'GITHUB_KEY'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;SOCIAL_AUTH_GITHUB_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'GITHUB_SECRET'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# social auth configs for google
&lt;/span&gt;&lt;span class="n"&gt;SOCIAL_AUTH_GOOGLE_OAUTH2_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'GOOGLE_KEY'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'GOOGLE_SECRET'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it, with these simple steps we are able to make our app more secure. &lt;/p&gt;

&lt;p&gt;Thanks for your time. You can find the finished app in &lt;a href="https://github.com/earthcomfy/Django-registration-and-login-system"&gt;github&lt;/a&gt;. See you next time with another part of the series.&lt;/p&gt;

&lt;p&gt;Any comments and suggestions are welcome.&lt;/p&gt;

</description>
      <category>python</category>
      <category>django</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Creating a chrome extension using React &amp; Typescript üöÄ</title>
      <author>KaRthick</author>
      <pubDate>Tue, 31 Aug 2021 16:30:40 +0000</pubDate>
      <link>https://dev.to/karthick3018/creating-a-chrome-extension-using-react-typescript-317b</link>
      <guid>https://dev.to/karthick3018/creating-a-chrome-extension-using-react-typescript-317b</guid>
      <description>&lt;p&gt;Creating a chrome extension is a check box I didn't check for a long , thought it would be much tougher and need to know much things. But trust me it's way simple than I thought. &lt;/p&gt;

&lt;p&gt;A framework or library knowledge that you're working on is more than enough to make a chrome extension. Here I've used react and typescript.&lt;/p&gt;

&lt;p&gt;This chrome extension is the thing I've been needed for a while , so I thought of solving my issue with a extension.&lt;/p&gt;

&lt;p&gt;There are few things that are extension specific , basic knowledge of these things are required to build an extension. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#aspects-of-chrome-extension"&gt;
  &lt;/a&gt;
  Aspects of Chrome Extension
&lt;/h1&gt;

&lt;p&gt;There are 4 major aspects while building the chrome extension &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#popup-ui"&gt;
  &lt;/a&gt;
  Popup UI
&lt;/h2&gt;

&lt;p&gt;This is the thing that renders the root file when you click on the extension icon in the browser . Any UI related change for the popup can be added here . &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background-script"&gt;
  &lt;/a&gt;
  Background script
&lt;/h2&gt;

&lt;p&gt;As like the name this script will be running and listening in the background. It can be used as a place to include the listening events which you might need. Like you can listen an event during the extension icon click on the browser . In my case I need to have the same icon click listener that I've mentioned. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DOqNDmkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kr65dk5qzwsmc41tl6gh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DOqNDmkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kr65dk5qzwsmc41tl6gh.png" alt="listener"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This can also used for state management thing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#content-script"&gt;
  &lt;/a&gt;
  Content Script
&lt;/h2&gt;

&lt;p&gt;This will be executed in the body of the extension. You can inject a function or listner in this file to work when the extension is alive . In this extension I've added a listner event to listen the event emitted from the background script . Also to create an iframe in the body of the extension. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LkYTJoy2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbcvcb6gwp8klt84ag5v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LkYTJoy2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbcvcb6gwp8klt84ag5v.png" alt="Content Script"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#options-ui"&gt;
  &lt;/a&gt;
  Options UI
&lt;/h2&gt;

&lt;p&gt;Renders the stuff when you right click on the icon and click options. You can use it like a settings or admin panel sort of things for the extension . &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#manifest-json"&gt;
  &lt;/a&gt;
  Manifest json
&lt;/h1&gt;

&lt;p&gt;This is the first file you need to create for an extension but I thought this will make sense explaing it after the above four , because all the above four needs to be configured here to make them work. Like the other manifest files does this also has the details of icon, app name , description etc. Specially here it has some additional access like adding background file , handling browser actions , content scripts .&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--njf66Pyh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpdgfvajlihub97t1l9z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--njf66Pyh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpdgfvajlihub97t1l9z.png" alt="Manifest"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-it-in-react"&gt;
  &lt;/a&gt;
  Making it in react
&lt;/h2&gt;

&lt;p&gt;You can make start doing the extension buy initiating the CRA itself , but I found this super awesome boiler plate which supports react with and without typescript .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/VasilyShelkov/create-react-extension"&gt;https://github.com/VasilyShelkov/create-react-extension&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's same as like building an app using react , you can install third party packages , connect to a database using an api call. Only things is you need to slightly play with the 4 things that I've mentioned above. &lt;/p&gt;

&lt;p&gt;Also check this offical link for plain javascript . &lt;a href="https://developer.chrome.com/docs/extensions/mv3/getstarted/"&gt;https://developer.chrome.com/docs/extensions/mv3/getstarted/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#about-my-extension-blogshelper"&gt;
  &lt;/a&gt;
  About my extension : blogs-helper
&lt;/h1&gt;

&lt;p&gt;The Problem statement I took was simple and weird , not sure how many of them faced it but to be honest I faced a lot.&lt;/p&gt;

&lt;p&gt;While reading the technical blogs there will be a code snipet at the starting of the blog which will be referenced and explained till the bottom of the blogs. As we go on scrolling the page the actual code snipet which is referenced will be hidden in the viewport.&lt;/p&gt;

&lt;p&gt;Now while reading the explanation I've forgot the actual code snipet.&lt;/p&gt;

&lt;p&gt;....What is this blog explaining ü§î ....&lt;/p&gt;

&lt;p&gt;So to overcome that I've used multiple window one for the code snipet and other one is for the explanation . This is not the perfect way right ? Why not stickys ? Not sure how to use without minimizing the browser. So to overcome that I've made Blogs helper.&lt;/p&gt;

&lt;p&gt;This is how it looks! , hanging at the right side you can drag it down and expand.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ROTyWNNe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fo16b5elh8204dcspuga.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ROTyWNNe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fo16b5elh8204dcspuga.png" alt="blog helper"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's in the initial version PR's are most welcomed üöÄ. Share your thoughts and ideas.&lt;/p&gt;

&lt;p&gt;Get the extension &lt;a href="https://karthick3018.github.io/blogs-helper/"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Fork it in &lt;a href="https://github.com/karthick3018/blogs-helper"&gt;github&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;check my dev projects on&lt;/em&gt; &lt;a href="https://github.com/karthick3018"&gt;github&lt;/a&gt;&lt;br&gt;
 &lt;em&gt;Follow me on&lt;/em&gt; &lt;a href="https://twitter.com/Karthick_R_30"&gt;twitter&lt;/a&gt;&lt;br&gt;
&lt;em&gt;connect with me on&lt;/em&gt; &lt;a href="https://www.linkedin.com/in/karthick-raja-dev/"&gt;linkedIn&lt;/a&gt;&lt;br&gt;
&lt;em&gt;check my styles on&lt;/em&gt; &lt;a href="https://codepen.io/karthick30"&gt;codepen&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Thanks for your time&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Happy coding ! Keep Sharing&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Stay Safe&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Is your microservice architecture just a monolith wearing a bunch of smaller trench coats?</title>
      <author>Noƒçnica Fee</author>
      <pubDate>Tue, 31 Aug 2021 16:20:32 +0000</pubDate>
      <link>https://dev.to/run-x/is-your-microservice-architecture-just-a-monolith-wearing-a-bunch-of-smaller-trench-coats-1ig5</link>
      <guid>https://dev.to/run-x/is-your-microservice-architecture-just-a-monolith-wearing-a-bunch-of-smaller-trench-coats-1ig5</guid>
      <description>&lt;p&gt;&lt;em&gt;Image by Frycenty, shared via &lt;a href="https://creativecommons.org/licenses/by-sa/4.0/legalcode"&gt;Attribution-ShareAlike 4.0 International&lt;/a&gt;.&lt;/em&gt;&lt;br&gt;
If you‚Äôre migrating to a microservice architecture, it‚Äôs possible you‚Äôll run into this issue: your services are all going down at the same time, which you were promised wouldn‚Äôt happen if you moved away from a monolith model. Why is this happening? Where are the benefits of the microservice model that you were promised? It‚Äôs worth examining whether your microservices are actually as siloed as you think that they are.&lt;/p&gt;

&lt;p&gt;First, some background. The key difference between a monolith and microservices is that the monolith model creates a cohesive single programming ecosystem that has everything it it that you need to run your whole setup. So if you‚Äôre designing a web store, your product search function is dependent on your inventory system, which is dependent on your pricing and billing system. The benefit of the monolith model, of course, is that it‚Äôs simpler to build and test. You just run the program, and see if everything works. However, &lt;a href="https://articles.microservices.com/monolithic-vs-microservices-architecture-5c4848858f59"&gt;if you change one thing in that chain, it affects everything else&lt;/a&gt;. DevOps aims to get away from the monolith model because it means that in order to launch, your product needs to be flawless, or as close to flawless as it‚Äôs ever going to get. In a monolith, updates are a pain because of interdependency--you have to redeploy the whole application with every update and then see if it works, rather than constantly iterating on specific services. And if you want to adopt a new technology or framework, you have to do it across the whole application: effectively a whole new version, when really you just wanted to update one function.&lt;/p&gt;

&lt;p&gt;A microservice model aims to decouple a product‚Äôs functions from one another so that they can run independently and be managed separately. You could, in this model, take your billing software offline for an hour or two without disrupting your whole operation, or even have a version of your billing software running on some of your servers while you test out the new billing program on others. This is what allows &lt;a href="https://resources.github.com/ci-cd/"&gt;CI/CD&lt;/a&gt; to happen.&lt;/p&gt;

&lt;p&gt;But you might notice that if implemented incorrectly, your microservice model has all of the redundancy of microservices and all of the interdependency of a monolith--meaning that effectively you just spent a bunch of extra time developing separate services that still crash when everything else crashes. What gives? &lt;/p&gt;

&lt;p&gt;The answer may be in your coupling. A loosely coupled chain of microservices is not interdependent, and should ‚Äúknow‚Äù as little about the other services in the chain as possible--i.e., your billing service should not be dependent on anything happening in your search function to work, although it may need to receive input from your purchasing service.  As &lt;a href="https://www.yusufdagtekin.com/2020/07/the-importance-of-loose-coupling-in-microservice-architecture/"&gt;Yusuf Dagtekin&lt;/a&gt; points out, ‚ÄúWhen microservices are not split in the right way, this creates tightly coupled microservices that will have all the disadvantages of a monolith and all the complexities of microservices, aka a distributed monolith.‚Äù He points out that a frequent source of tight coupling is any requirement for synchronous communication between services--that, effectively, makes everything you do dependent on the slowest service in the chain.&lt;/p&gt;

&lt;p&gt;There is a case to be made for specific instances of a &lt;a href="https://www.simplicityitself.io/our_team/2016/03/11/the-minilith-tightly-coupled-microservices.html"&gt;‚Äúminilith‚Äù&lt;/a&gt; as David Dawson calls it--tightly coupling some services that function as a unit. However, he points out that this makes them ‚Äúeffectively version locked‚Äù, reducing some of the benefits of using the microservice model. This might be worth it for a few services within a larger architecture, but if you‚Äôre tightly coupling everything, you might as well make it a monolith.&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>api</category>
      <category>devops</category>
      <category>productivity</category>
    </item>
    <item>
      <title>5 JetBrains plugins to upgrade the built-in Git support to the next level!
</title>
      <author>Thomas Scott</author>
      <pubDate>Tue, 31 Aug 2021 16:09:48 +0000</pubDate>
      <link>https://dev.to/anotherdevuser/5-jetbrains-plugins-to-upgrade-the-builtin-git-support-to-the-next-level-3ojf</link>
      <guid>https://dev.to/anotherdevuser/5-jetbrains-plugins-to-upgrade-the-builtin-git-support-to-the-next-level-3ojf</guid>
      <description>&lt;p&gt;The Git plugin that comes bundled with all JetBrains IDEs is actually quite impressive, it's a full blown Git client in its own right with almost all the features of a standalone client such as SourceTree, Tower or GitKraken but built into the IDE.&lt;/p&gt;

&lt;p&gt;But there are even more features you can enhance your IDE‚Äôs Git support with - allow me to present to you 5 plugins that build on top of Git and supercharge it with cool new superpowers!&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gitlive"&gt;
  &lt;/a&gt;
  &lt;a href="https://plugins.jetbrains.com/plugin/11955-gitlive"&gt;GitLive&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This plugin is for all you team players out there, GitLive makes Git, well, live. &lt;/p&gt;

&lt;p&gt;It adds a tool window where you can see the collaborators from your repository, if they are online, and all their work in progress (branches/issues/PRs they are working on not yet merged in) where you can view diffs of the file changes, all updated in real-time.&lt;/p&gt;

&lt;p&gt;Their flagship feature, instant merge conflict detection, provides early warning of potential merge conflicts. Real-time gutter indicators show ‚Äã‚Äãwhere your teammates have made changes to the file you‚Äôre currently working on, which can be very useful, especially on the bigger projects. &lt;/p&gt;

&lt;p&gt;On top of that, GitLive also supports starting a Code With Me session with a fellow collaborator via a single click (or keyboard shortcut), and for those pesky collaborators that use VS Code there is even cross-IDE codeshare support!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Top reason to try it out:&lt;/strong&gt; &lt;br&gt;
Bring communication and collaboration within your team to the next level!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ynau_nAG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629910035918/aQ5amhEmB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ynau_nAG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629910035918/aQ5amhEmB.png" alt="gitlive.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-machete"&gt;
  &lt;/a&gt;
  &lt;a href="https://plugins.jetbrains.com/plugin/14221-git-machete"&gt;Git Machete&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Producing small PRs is definitely a good practice, but it‚Äôs easy to get lost in multiple branches and stacked PRs. Git Machete is a useful plugin that helps you keep track of all the branches, their relationship with each other and with the remote repository. It also aims at automation of git actions and makes rebase/push/pull hassle-free (just a click on the button!), especially in the situation where there are a lot of branches and PRs. &lt;/p&gt;

&lt;p&gt;This plugin automatically discovers branch layout and creates a tree-shaped graph of branches (in case of any changes or inaccuracies you can also modify it manually in .git/machete text file). The graph provides useful information about the branches: sync to parent status, sync to remote status and custom annotation (there is also an option to toggle the unique commits for branches). &lt;/p&gt;

&lt;p&gt;After right-clicking on a chosen branch in the graph, you can perform git actions like rebase/push/pull on that branch without a need to switch from your current branch, which is very handy!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Top reason to try it out:&lt;/strong&gt; &lt;br&gt;
Organize your Git repository and automate your workflow!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iSVwe-XX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629914236043/CRF0AZ17F.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iSVwe-XX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629914236043/CRF0AZ17F.png" alt="git-machete-2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gittoollbox"&gt;
  &lt;/a&gt;
  &lt;a href="https://plugins.jetbrains.com/plugin/7499-gittoolbox"&gt;GitToollBox&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The plugin adds extra features to the default IntelliJ Git support. With just one glance you can see how many commits is your branch ahead or behind, track uncommitted changes or easily perform branch cleanup. GitToolBox also automatically fetches changes  from the upstream repository, with configurable frequency. &lt;/p&gt;

&lt;p&gt;The biggest perk of using the plugin is the inline blame annotation, as IntelliJ does not come with a similar feature. Git Blame Display will show the author, date and time and commit subject for the current line. Additionally, with the Show Blame Details action, you can get more detailed information, like commit hash or full message. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Top reason to try it out:&lt;/strong&gt; &lt;br&gt;
Extend Git with additional features and benefit from inline blame annotation!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dt4sLTQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629912904524/ZxrbQM2vP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dt4sLTQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629912904524/ZxrbQM2vP.png" alt="git-toolbox.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-branch-cleaner"&gt;
  &lt;/a&gt;
  &lt;a href="https://plugins.jetbrains.com/plugin/10059-git-branch-cleaner"&gt;Git Branch Cleaner&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Simple yet effective plugin, that deletes branches you don‚Äôt need anymore. All the branches without tracking remotes are going to be listed (except the current branch) and checked if they are fully merged to the current branch. Branches that are not merged to HEAD are not selected by default.&lt;/p&gt;

&lt;p&gt;In the newest versions, plugin can be found via searched tools:&lt;br&gt;
Navigate &amp;gt; Search Everywhere &amp;gt; Delete Old Branches instead of  VCS &amp;gt; Git &amp;gt; Delete Old Branches.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Top reason to try it out:&lt;/strong&gt; &lt;br&gt;
Get rid of the clutter and keep your branches organized!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ecXNemk1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629912913724/QK5MQM5Lm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ecXNemk1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629912913724/QK5MQM5Lm.png" alt="git-branch-cleaner.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-bisect-run"&gt;
  &lt;/a&gt;
  &lt;a href="https://plugins.jetbrains.com/plugin/10874-git-bisect-run"&gt;Git Bisect Run&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Git Bisect is one of those Git features that are very handy but can be intimidating. Git Bisect Run is a handy plugin that automates the process and makes troubleshooting much faster. &lt;/p&gt;

&lt;p&gt;The plugin emulates git bisect run behavior. With just a click it will perform Bisect Run and all the appropriate Git commands depending on test invocation results, minimising our manual input. Once the plugin singles out the bad commit, a popup notification will appear in the IDE (as it‚Äôs language agnostic, it works in all JetBrians IDEs). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Top reason to try it out:&lt;/strong&gt; &lt;br&gt;
Makes bug hunting easier than ever by automating the process!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y_WDonVZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630426030910/KSwlSOs4h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y_WDonVZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630426030910/KSwlSOs4h.png" alt="git-bisect-3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;I hope some of the awesome plugins I lined up in this post make working with Git easier and smoother for you. Happy hacking!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>git</category>
      <category>productivity</category>
    </item>
    <item>
      <title>String Manipulation of URLs is an Anti-Pattern.</title>
      <author>Michael D. Stemle, Jr.</author>
      <pubDate>Tue, 31 Aug 2021 16:05:37 +0000</pubDate>
      <link>https://dev.to/manchicken/string-manipulation-of-urls-is-an-anti-pattern-53mg</link>
      <guid>https://dev.to/manchicken/string-manipulation-of-urls-is-an-anti-pattern-53mg</guid>
      <description>&lt;p&gt;Quick note before we get started: this piece is Node-centric in its examples, but this anti-pattern is polyglottal. As with most anti-patterns, this isn't about the syntax, it is about the approach.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-a-url-really"&gt;
  &lt;/a&gt;
  What's a URL, really?
&lt;/h2&gt;

&lt;p&gt;A URL is a useful thing. It tells both humans and users where to find resources on the internet. There's a lot of information packed into a URL, from protocol designations to document anchors, and when we treat it like a string we're steering into danger.&lt;/p&gt;

&lt;p&gt;A URL is a packed value. It contains an awful lot of data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Protocol scheme&lt;/li&gt;
&lt;li&gt;Host name&lt;/li&gt;
&lt;li&gt;Port number&lt;/li&gt;
&lt;li&gt;Path&lt;/li&gt;
&lt;li&gt;File name&lt;/li&gt;
&lt;li&gt;Search parameters (a.k.a. query string parameters)&lt;/li&gt;
&lt;li&gt;Anchor (which can also be used for parameters)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-problem-with-string-manipulation"&gt;
  &lt;/a&gt;
  The Problem with String Manipulation
&lt;/h2&gt;

&lt;p&gt;Based on your specific needs, a URL may contain several reserved characters. Some of these characters include &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;#&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;:&lt;/code&gt;, &lt;code&gt;,&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt;. This is not an exhaustive list. Having these characters in the wrong place within your URL can cause misunderstanding.&lt;/p&gt;

&lt;p&gt;A good implementation should be flexible enough to deal with any reasonable inputs, and capable of failing predictably when inputs are not reasonable. Packed values, like a URL, need to be treated like packed values, and not handled using string manipulation.&lt;/p&gt;


&lt;div class="ltag__replit"&gt;
  &lt;iframe height="550px" src="https://repl.it/@manchicken/url-string-antipattern-before?lite=true"&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;You can see here how the &lt;code&gt;q&lt;/code&gt; is seen as part of the URL, but &lt;code&gt;restrict_sr&lt;/code&gt; is interpreted as another URL parameter parallel to &lt;code&gt;url&lt;/code&gt;. While it &lt;em&gt;may be tempting&lt;/em&gt; to simply use a function to URL-encode this, I would like to encourage you to reconsider. These URL encoding methods aren't great for all of the possible characters that you'd want to put in there, and they're likely to make a bunch of assumptions that aren't going to be true.&lt;/p&gt;


&lt;div class="ltag__replit"&gt;
  &lt;iframe height="550px" src="https://repl.it/@manchicken/url-string-antipattern-before-1?lite=true"&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#a-better-approach"&gt;
  &lt;/a&gt;
  A Better Approach
&lt;/h2&gt;

&lt;p&gt;Here you can see that encoding the URL didn't solve the problem. Let's try a different approach: let's use the URL API.&lt;/p&gt;


&lt;div class="ltag__replit"&gt;
  &lt;iframe height="550px" src="https://repl.it/@manchicken/url-string-antipattern-after?lite=true"&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;By using the URL API here, you can see that the URL which is being used as a parameter is safely tucked away, and you don't have to worry about it being confused.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-does-this-matter"&gt;
  &lt;/a&gt;
  Why does this matter?
&lt;/h2&gt;

&lt;p&gt;The two primary problems caused by the anti-pattern of string manipulation of URLs are those of bugs, and of URL injection vulnerabilities.&lt;/p&gt;

&lt;p&gt;Poorly-encoded URLs make it difficult for web servers and applications to understand the parameters coming to them. If they cannot reliably understand their inputs, there may be unexpected or unwanted behavior.&lt;/p&gt;

&lt;p&gt;URLs which are constructed using predictable string manipulation also pose a very real risk of URL injection. URL injection can lead to SQL injection, NoSQL injection, cross-site scripting (XSS), and a whole host of other security holes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;A URL isn't a string. Much like the packed bit fields of yore, it is a packed value. Don't treat it like a string, treat it like a first-class object or structure. And never write your own URL parsers, &lt;em&gt;every&lt;/em&gt; language has a good URL library that you can use.&lt;/p&gt;

</description>
      <category>antipattern</category>
      <category>url</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Using ES Modules with Fastify</title>
      <author>Oliver Williams</author>
      <pubDate>Tue, 31 Aug 2021 16:04:06 +0000</pubDate>
      <link>https://dev.to/otw/es-modules-in-fastify-349f</link>
      <guid>https://dev.to/otw/es-modules-in-fastify-349f</guid>
      <description>&lt;p&gt;Documentation for Fastify, as well as for all official Fastify plugins, uses the older Node CommonJS module syntax. You can however, make use of ES modules.  &lt;/p&gt;

&lt;p&gt;To use ES modules in Node, you can set &lt;code&gt;"type": "module"&lt;/code&gt; in your package.json. Then, instead of &lt;code&gt;const fastify = require('fastify')({ logger: true })&lt;/code&gt; you can do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Fastify&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Fastify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The same is true for the official plugins:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fastifyFormbody&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify-formbody&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fastifyFormbody&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-dirname-endraw-and-raw-filename-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;__dirname&lt;/code&gt; and &lt;code&gt;__filename&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;One difference between CommonJS modules and ES modules is that &lt;code&gt;__filename&lt;/code&gt;  and &lt;code&gt;__dirname&lt;/code&gt; are &lt;a href="https://nodejs.org/api/esm.html#esm_no_filename_or_dirname"&gt;not available in ES modules&lt;/a&gt;. As the official Node docs suggest, they can be replicated with via &lt;a href="https://nodejs.org/api/esm.html#esm_import_meta_url"&gt;&lt;code&gt;import.meta.url&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fileURLToPath&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;__filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fileURLToPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__filename&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fastifyStatic&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify-static&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fastifyStatic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/public/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>node</category>
      <category>fastify</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
