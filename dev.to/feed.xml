<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is Good Project As Frontend Developer</title>
      <author>Nikhil Bobade </author>
      <pubDate>Tue, 10 Aug 2021 15:03:49 +0000</pubDate>
      <link>https://dev.to/nikhil27b/what-is-good-project-as-frontend-developer-4k9l</link>
      <guid>https://dev.to/nikhil27b/what-is-good-project-as-frontend-developer-4k9l</guid>
      <description>&lt;h4&gt;
  &lt;a href="#what-is-good-project-"&gt;
  &lt;/a&gt;
  What is Good Project :
&lt;/h4&gt;

&lt;p&gt;Hey guys today I talk about the good project in this post. A good project create a important role in your placement or job. &lt;/p&gt;

&lt;p&gt;A Good project is really helpful to improve your programming skills also you learn lot with that types of projects almost your all quarries are solved with good projects.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-bad-practice-"&gt;
  &lt;/a&gt;
  What is bad practice :
&lt;/h4&gt;

&lt;p&gt;A single page website or static website with fixed content  for e.g. Single Page Business Website , Single Page portfolio website or no other use of any rest api in your project.&lt;/p&gt;

&lt;p&gt;also a website builds with drag or drop platform or WordPress website this are all bad project for the your resume.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-good-practice-"&gt;
  &lt;/a&gt;
  What is good practice :
&lt;/h4&gt;

&lt;p&gt;We talk about bad practice but you can fixed that using this projects ideas  :) &lt;/p&gt;

&lt;p&gt;A Social media app , E-commerce App , Messaging app this are all the good projects you can be create your own version with this ideas or clone this website like WhatsApp clone website or Instagram clone website. &lt;/p&gt;

&lt;p&gt;Use apis with your project or also you can be try firebase or mongodb and maps api to your projects that create your project and resume strong.&lt;/p&gt;

&lt;p&gt;If you done this all then follow this step also please host your project makes live to use other also there are many free hosting companies like firebase or Heroku also keep your project open source there are really helpful for other too.d if are you reading till now then please like this post and follow for more.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you ....&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Nodejs Project For Beginners</title>
      <author>Haajayw</author>
      <pubDate>Tue, 10 Aug 2021 14:49:47 +0000</pubDate>
      <link>https://dev.to/haajayw/nodejs-project-for-beginners-18ae</link>
      <guid>https://dev.to/haajayw/nodejs-project-for-beginners-18ae</guid>
      <description>&lt;p&gt;If you have decided to build your career in &lt;span&gt;NodeJS &lt;/span&gt;development, we have gathered a list of &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; for all node enthusiasts to build highly scalable &lt;a href="https://codersera.com/blog/native-apps-vs-web-apps-which-is-best-for-your-business/" rel="noreferrer"&gt;web applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These best &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; will help you gain knowledge about core node concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it’s highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn &lt;em&gt;git&lt;/em&gt; and show your coding expertise to future employers.&lt;/p&gt;
&lt;p id="nodejs-project-ideas-additional-information"&gt;&lt;span&gt;NodeJS&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;NodeJS is a runtime environment that executes Javascript code out of the browser, and it’s commonly used to create back-end. NodeJS is often used with additional frameworks like Express or Nest.js. that can be used in some cases and make the development process much easier and faster. &lt;/p&gt;

&lt;p&gt;Read more: &lt;b&gt;&lt;a href="https://www.codelivly.com/best-nodejs-projects-for-beginners/"&gt;nodejs Project For Beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
      <category>node</category>
    </item>
    <item>
      <title>I'm making a Retro Sci-Fi Series that teaches UI Design (Trailer)</title>
      <author>designcourse</author>
      <pubDate>Tue, 10 Aug 2021 14:46:42 +0000</pubDate>
      <link>https://dev.to/designcourse/i-m-making-a-retro-sci-fi-series-that-teaches-ui-design-trailer-3bj1</link>
      <guid>https://dev.to/designcourse/i-m-making-a-retro-sci-fi-series-that-teaches-ui-design-trailer-3bj1</guid>
      <description>&lt;p&gt;Hey all, I run the &lt;a href="https://youtube.com/designcourse"&gt;DesignCourse&lt;/a&gt; YouTube channel. Over there, I've taught millions of people UI/UX &amp;amp; Frontend dev over the last decade+.&lt;/p&gt;

&lt;p&gt;I've been thinking of ways to make learning more entertaining. Combine that with my other interests (music, snakes/reptiles, 80's aesthetic), and you get '&lt;strong&gt;The Boja&lt;/strong&gt;'. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Boja&lt;/strong&gt; takes place in the year 2082 with a fictional character (Jon Frok) played by myself, who's stationed in an unknown location and tasked with defeating an aggressive alien species by building an advanced user interface. The problem? Frok isn't a designer, &lt;em&gt;he's a soldier&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Over the next 2 years, I plan to release episodes that will teach Jon Frok and my audience the essentials of UI design. Every episode will contain a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learning some topic of UI design&lt;/li&gt;
&lt;li&gt;Retrowave/synthwave music with a guitar solo&lt;/li&gt;
&lt;li&gt;A reptile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out the trailer I just released:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6bvutYtLsqY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I hope people enjoy it. I put a lot of $ and work into this. I almost didn't publish it on YouTube today, because it's so &lt;em&gt;out there&lt;/em&gt; and ridiculous. &lt;/p&gt;

&lt;p&gt;Give me your thoughts!&lt;/p&gt;

</description>
      <category>ui</category>
      <category>design</category>
      <category>tutorials</category>
      <category>ux</category>
    </item>
    <item>
      <title>JavaScript Project For Beginners</title>
      <author>Haajayw</author>
      <pubDate>Tue, 10 Aug 2021 14:42:31 +0000</pubDate>
      <link>https://dev.to/haajayw/javascript-project-for-beginners-4lkd</link>
      <guid>https://dev.to/haajayw/javascript-project-for-beginners-4lkd</guid>
      <description>&lt;p&gt;Are you looking for the best JavaScript projects for beginners?&lt;/p&gt;
&lt;p&gt;If you want to &lt;a href="#"&gt;become a web developer&lt;/a&gt;, you need to start practicing your JavaScript skills as soon as possible. Once you finish your first tutorial or online course, you are ready to start with your first small project.&lt;/p&gt;
&lt;p&gt;However, I know it may sometimes feel difficult to find JavaScript project ideas that match your skills and are fun to build.&lt;/p&gt;
&lt;p&gt;To help you get started, I’ve put together a list of 19 fun Javascript projects you can start building right now.&lt;/p&gt;
&lt;p&gt;I want you to browse through the list and click through to any JavaScript project you find intriguing. If you find a project idea that matches your goals and skill level, start building it right away!&lt;/p&gt;
&lt;p&gt;Each of these projects is open-source, meaning you can use the source code for guided learning as you go.&lt;/p&gt;
&lt;p&gt;Let’s dive right in!&lt;/p&gt;
&lt;p&gt;Check here : &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/the-best-beginner-javascript-projects-for-2021/&amp;amp;ved=2ahUKEwjdsanL16byAhXezzgGHbX_DeEQtwJ6BAgSEAE&amp;amp;usg=AOvVaw16eIeKYPB8xzH6B1hMi2E6&amp;amp;cshid=1628606441193"&gt;Javascript Projects For Beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>CSS3 flexbox in simple way for beginners to Advance. </title>
      <author>menomanabdulla</author>
      <pubDate>Tue, 10 Aug 2021 14:18:58 +0000</pubDate>
      <link>https://dev.to/menomanabdulla/css3-flexbox-in-simple-way-for-beginners-to-advance-408k</link>
      <guid>https://dev.to/menomanabdulla/css3-flexbox-in-simple-way-for-beginners-to-advance-408k</guid>
      <description>&lt;p&gt;Today’s world you can’t survive without flex-box  as a frontend developer whether you are expert or beginner. Flex-box give you extra superiority for managing your content in final layout, also flex-box has huge market demand for building complex web-layouts.&lt;/p&gt;

&lt;p&gt;CSS flexbox will added new weapon in your visual development portfolio. Here I am explained all CSS3 flex-box property in simple way with visual example and copy ready code. So stick till to the end and give your CSS expertise next shape.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://css3-flexbox.netlify.app/"&gt;Here is live examples, you can check it from here.&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/menomanabdulla/all-css3-flex-property"&gt;Here is github, you can see source-code from here.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1display"&gt;
  &lt;/a&gt;
  1.Display:
&lt;/h2&gt;

&lt;p&gt;Display is CSS box-model properties,  it’s primary properties  for next all flex related properties. This defines a flex container, inline or block depending on the giver value. It enables a flex content for all its direct children. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FQVdOmSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5opurevdgxqxo1saz2lt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FQVdOmSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5opurevdgxqxo1saz2lt.png" alt="Display is CSS box-model properties"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2flex-order"&gt;
  &lt;/a&gt;
  2.Flex Order
&lt;/h2&gt;

&lt;p&gt;Flex item maintain default order as a source order.  Order properties can controls order in which they appear in the flex-container.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bmvXtdDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uji28chsf6bk8ps32dfj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bmvXtdDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uji28chsf6bk8ps32dfj.png" alt="Flex item maintain default order"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3flex-direction"&gt;
  &lt;/a&gt;
  3.Flex Direction
&lt;/h2&gt;

&lt;p&gt;Flex-direction defines how flex-box items are ordered within a flex-box container. Value example and use case: &lt;br&gt;
&lt;strong&gt;row:&lt;/strong&gt; Same as text direction&lt;br&gt;
&lt;strong&gt;row-reverse:&lt;/strong&gt;  Alternative to text direction&lt;br&gt;
&lt;strong&gt;column:&lt;/strong&gt; Same as row but top to bottom&lt;br&gt;
&lt;strong&gt;column-reverse:&lt;/strong&gt; Same as row-reverse but top to bottom &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mn8YMskz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9wdemjgziob5pgzr6o0x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mn8YMskz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9wdemjgziob5pgzr6o0x.png" alt="Flex-direction defines how flex-box items are ordered"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4flex-wrap"&gt;
  &lt;/a&gt;
  4.Flex Wrap
&lt;/h2&gt;

&lt;p&gt;For Flex-wrap stick by-default inline, flex-wrap is also flexible like others property. You can change that and allow the items to wrap as needed with its property. Value example and use case:&lt;br&gt;
&lt;strong&gt;nowrap:&lt;/strong&gt; all flexf items will be on one line&lt;br&gt;
&lt;strong&gt;wrap:&lt;/strong&gt; flex items will wrap onto multiple lines, fro&lt;br&gt;
&lt;strong&gt;wrap-reverse:&lt;/strong&gt; flex items will wrap into multiple lines, from bottom to top &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rf52j5H_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quo6i0pxhhqa3frvjxyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rf52j5H_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quo6i0pxhhqa3frvjxyi.png" alt="For Flex-wrap stick by-default inline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5flex-shrink"&gt;
  &lt;/a&gt;
  5.Flex Shrink
&lt;/h2&gt;

&lt;p&gt;Flex-shrink is just opposite of flex grow. It only comes into play if the elements must shrink to fit into their container(when the container is just too small).&lt;br&gt;
By-default every item has flex-shrink of 1 which means it will shrink as the box contracts. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fEpQ3H4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otmijgqjszarhl90oy3w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fEpQ3H4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otmijgqjszarhl90oy3w.png" alt="Flex-shrink is just opposite of flex grow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6flex-flow"&gt;
  &lt;/a&gt;
  6.Flex Flow
&lt;/h2&gt;

&lt;p&gt;CSS This is short-hand for the flex-direction and flex-wrap properties, simultaneously they define flex containers main and cross axis. The default value is row and nowrap.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3dY4fldJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83kqcbf8ku3fxqcbyxmm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3dY4fldJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83kqcbf8ku3fxqcbyxmm.png" alt="CSS This is short-hand for the flex-direction and flex-wrap properties"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7flex-basis"&gt;
  &lt;/a&gt;
  7.Flex Basis
&lt;/h2&gt;

&lt;p&gt;This defines the default size of an element before the remaining space is distributed. It could be a length with unit or keyword like auto, content flex-basis default value is “auto”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yEIf9AuN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/646ems4udq1fcwdmklix.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yEIf9AuN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/646ems4udq1fcwdmklix.png" alt="This defines the default size of an element before the remaining space is distributed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8justify-content"&gt;
  &lt;/a&gt;
  8.Justify Content
&lt;/h2&gt;

&lt;p&gt;This properties define alignment of flex item along with ‘x’ axis or main axis. Justify-content’s default value is “flex-start”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;flex-start:&lt;/strong&gt; item will appear at the starting of the flex-container along with ‘x’ axis.&lt;br&gt;
&lt;strong&gt;flex-end:&lt;/strong&gt; item will appear at the end of the flex-container along with ‘x’ axis. &lt;br&gt;
&lt;strong&gt;space-between:&lt;/strong&gt; items get space between those mainly left and right side when they appear along with ‘x’ axis.&lt;br&gt;
&lt;strong&gt;space-around:&lt;/strong&gt;  items get space combinedly mainly left and right side along with ‘x’ axis.&lt;br&gt;
&lt;strong&gt;center:&lt;/strong&gt; items will align center along with ‘x’ axis.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zhZ5koAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvh8fpxyoj5ppwispyvm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zhZ5koAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvh8fpxyoj5ppwispyvm.png" alt="This properties define alignment of flex item along with ‘x’ axis or main axis."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9flex"&gt;
  &lt;/a&gt;
  9.Flex
&lt;/h2&gt;

&lt;p&gt;Flex properties determine short-hand of flex-grow, flex-shrink and flex-basis combined. The second and third property are optional. The default is ‘0 1 auto’ but if you set it with a single number value it’s like ‘1 0’;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l-a1o8Q5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v079nrvvng1z74yc8t7k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l-a1o8Q5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v079nrvvng1z74yc8t7k.png" alt="Flex properties determine short-hand of flex-grow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10align-items"&gt;
  &lt;/a&gt;
  10.Align Items
&lt;/h2&gt;

&lt;p&gt;Align-items properties defines the default behavior for how flex items are aligned or laid out along with ‘y’ or cross axis.&lt;br&gt;
&lt;strong&gt;flex-start:&lt;/strong&gt; item will appear at the starting of the flex-container along with ‘y’ axis.&lt;br&gt;
&lt;strong&gt;flex-end:&lt;/strong&gt; item will appear at the end of the flex-container along with ‘y’ axis.&lt;br&gt;
&lt;strong&gt;center:&lt;/strong&gt; item will appear at the center point of the flex-container along with ‘y’ axis.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f5gQAUUS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7m8pvhas2ivuhc1d4ip.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f5gQAUUS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7m8pvhas2ivuhc1d4ip.png" alt="Align-items properties defines the default behavior for how flex items are aligned or laid out along with ‘y’ or cross axis."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11align-self"&gt;
  &lt;/a&gt;
  11.Align Self
&lt;/h2&gt;

&lt;p&gt;For This allows the default alignment, to be overridden for individual flex items. We can overridden align-items properties only for any individuals.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x9gw4gU3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/za62sv71yide9feaob37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x9gw4gU3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/za62sv71yide9feaob37.png" alt="For This allows the default alignment, to be overridden for individual flex items."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12align-content"&gt;
  &lt;/a&gt;
  12.Align Content
&lt;/h2&gt;

&lt;p&gt;This property define flex container’s lines within when there is extra space in the ‘y’ axis, similar to how justify-content aligns individuals items within  the man the main-axis.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--djTMNQZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwao7c7ozslqvie2j85g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--djTMNQZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwao7c7ozslqvie2j85g.png" alt="This property define flex container’s lines within when there is extra space in the ‘y’ axis"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On this article I tried to cover all CSS3 flex-box properties with example and also include &lt;a href="https://css3-flexbox.netlify.app/"&gt;live example&lt;/a&gt; with&lt;a href="https://github.com/menomanabdulla/all-css3-flex-property"&gt; github source code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed it, please let me know your words. If you want to deep drive with CSS3 coding guidelines and front-end web development best practices please &lt;a href="https://dev.to/menomanabdulla/15-css3-best-practices-of-for-beginners-to-pro-253d"&gt;check it&lt;/a&gt;. Also you can check my 15 Best practices of HTML5 for beginners for give your markup good shape from &lt;a href="https://dev.to/menomanabdulla/15-html5-best-practices-for-beginners-to-master-47fb"&gt;here&lt;/a&gt;. If you find any errors or mistakes then do let me know. Thanks for this journey  &amp;amp; Happy Coding.&lt;/p&gt;

</description>
      <category>css</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Stay alert</title>
      <author>Rich Harris</author>
      <pubDate>Tue, 10 Aug 2021 14:16:18 +0000</pubDate>
      <link>https://dev.to/richharris/stay-alert-d</link>
      <guid>https://dev.to/richharris/stay-alert-d</guid>
      <description>&lt;p&gt;A short while ago, Chrome broke the web by disabling &lt;code&gt;alert()&lt;/code&gt;, &lt;code&gt;confirm()&lt;/code&gt; and &lt;code&gt;prompt()&lt;/code&gt; dialogs from cross-origin iframes. The justification was that "the current UX is confusing, and has previously led to spoofs where sites pretend the message comes from Chrome or a different website"; removing the feature was deemed preferable to fixing the UX.&lt;/p&gt;

&lt;p&gt;But legitimate uses were affected too. Users of &lt;a href="https://codepen.io/"&gt;CodePen&lt;/a&gt;, the widely-used code-sharing site co-founded by Chris Coyier, &lt;a href="https://css-tricks.com/choice-words-about-the-upcoming-deprecation-of-javascript-dialogs"&gt;suddenly discovered&lt;/a&gt; that they were unable to use these functions in their projects, since CodePen runs your code inside a cross-origin iframe to &lt;a href="https://twitter.com/chriscoyier/status/1420033471376920578"&gt;guard against XSS attacks&lt;/a&gt;. Reports from other sites followed, and in the ensuing chaos the change was &lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1065085#c72"&gt;rolled back until 2022&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hidden in the replies to &lt;a href="https://twitter.com/chriscoyier/status/1420027533005836298"&gt;Coyier's tweet&lt;/a&gt; was a &lt;a href="https://twitter.com/domenic/status/1422647331804037120"&gt;surprising statement&lt;/a&gt; from Domenic Denicola, an engineer on the Chrome team:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It's best that such teaching sites be prepared for the eventual end state where these are removed from the web platform entirely.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Wait, what?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Reading the &lt;a href="https://groups.google.com/a/chromium.org/g/blink-dev/c/hTOXiBj3D6A/m/JtkdpDd1BAAJ"&gt;intent to remove&lt;/a&gt; thread confirms that this is indeed Chrome's stance: blocking dialogs (including &lt;code&gt;onbeforeunload&lt;/code&gt;) were a mistake, and their future removal is a &lt;em&gt;fait accompli&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;After I &lt;a href="https://twitter.com/Rich_Harris/status/1422930436850860033"&gt;tweeted&lt;/a&gt; about the situation last week, my notifications tab became a Boschian hellscape, so I'm hesitant to write this post. But there are several aspects to this story that are too important for us not to talk about. It's not just a story about unloved APIs, it's a story about power, standards design, and who owns the platform — and it makes me afraid for the future of the web.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onramps"&gt;
  &lt;/a&gt;
  Onramps
&lt;/h2&gt;

&lt;p&gt;Facebook's Dan Abramov &lt;a href="https://twitter.com/dan_abramov/status/1422601734153723908"&gt;pointed out&lt;/a&gt; that the changes nuked many programming tutorials. Google's Emily Stark &lt;a href="https://twitter.com/estark37/status/1422645947708760067"&gt;suggested&lt;/a&gt; they should use the &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; element instead. For the moment, we'll gloss over the fact that &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; is sufficiently flawed that Denicola &lt;a href="https://github.com/whatwg/html/pull/4184#issuecomment-440405059"&gt;floated&lt;/a&gt; removing it from the spec — or that &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog#javascript"&gt;MDN's suggested fallback&lt;/a&gt; for browsers that don't support it is none other than &lt;code&gt;alert&lt;/code&gt; — and instead consider what this would look like in real life.&lt;/p&gt;

&lt;p&gt;Often, when I'm teaching people web development, they begin learning JavaScript by building a simple number guessing game along these lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Guess a number between 1 and 100`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Too low! Guess again`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Too high! Guess again`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`That's right! The number was &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's pretty straightforward-looking stuff, but in the space of a few lines of code the students are exposed to many unfamiliar concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data types (strings vs numbers, and converting between them)&lt;/li&gt;
&lt;li&gt;Functions, both built-in and the ones you write yourself&lt;/li&gt;
&lt;li&gt;Loops and if-else statements&lt;/li&gt;
&lt;li&gt;Operators&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's a popular lesson, and even foreshadows future discussions of algorithms (the smartest students soon intuit that they can 'win' by conducting a binary search), but it's hard — easily an hour's worth of material. Imagine now that before they could complete it they were required to learn about the DOM, event handling, and asynchronous programming. Educators gravitated towards blocking dialog APIs &lt;em&gt;for a reason&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/yoavweiss/status/1422655032273641479"&gt;Failing to understand&lt;/a&gt; why these APIs are so valuable in an educational context is inevitable if you &lt;a href="https://twitter.com/ag_dubs/status/1423323533036429315"&gt;don't consider teachers part of your constituency&lt;/a&gt; when designing standards. It's cliché (and only partly accurate) to say that the web used to have better onramps for developers, but there's truth behind the nostalgic grumbling: the web platform's learnability has long been essential to its success. We damage it at our peril.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hidden-signals"&gt;
  &lt;/a&gt;
  Hidden signals
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://docs.google.com/document/d/1RC-pBBvsazYfCNNUSkPqAVpSpNJ96U8trhNkfV0v9fk/edit#heading=h.mqfkui78vo5z"&gt;'primary signal'&lt;/a&gt; Chrome uses to determine whether something can safely be removed from the web platform is the number of page views impacted. A feature appearing on 0.001% of page views is considered 'small but non-trivial' usage. (Cross-origin &lt;code&gt;alert&lt;/code&gt; is at around &lt;a href="https://chromestatus.com/metrics/feature/timeline/popularity/1411"&gt;0.006%&lt;/a&gt;, significantly above this threshold; with same-origin the figure is &lt;a href="https://chromestatus.com/metrics/feature/timeline/popularity/950"&gt;50x higher&lt;/a&gt; still.)&lt;/p&gt;

&lt;p&gt;It's easy to overindex on the things you can quantify, especially if you're Google. But not all things that count as &lt;em&gt;uses&lt;/em&gt; of some feature show up in the data, when the data is predominantly public-facing production websites. Teaching is one such case. There are others.&lt;/p&gt;

&lt;p&gt;For example, I've had several experiences in which a well-placed &lt;code&gt;alert&lt;/code&gt; was the only way to test hypotheses during debugging. In an ideal world we'd all have well-stocked device labs and be able to remotely inspect our code wherever it's running, no matter how imminent the deadline. Reality isn't always so accommodating.&lt;/p&gt;

&lt;p&gt;Even when my code is working as intended — it happens sometimes — I'm likely to reach for &lt;code&gt;alert&lt;/code&gt; before adding complex error handling, if I'm building something for myself or my coworkers and I expect errors to be rare occurrences.&lt;/p&gt;

&lt;p&gt;And security researchers frequently use &lt;code&gt;alert&lt;/code&gt; to demonstrate vulnerabilities. (Yes, in future they could use something less concise and less visible like &lt;code&gt;console.log&lt;/code&gt;, but in the meantime years' worth of literature would instantly fall out of date if &lt;code&gt;alert&lt;/code&gt; vanished.)&lt;/p&gt;

&lt;p&gt;All of these are legitimate uses, but none will affect the metric that determines whether they're important enough to be supported by Chrome. Even when we &lt;em&gt;do&lt;/em&gt; focus solely on production websites, usage doesn't necessarily correlate with importance, as &lt;a href="https://twitter.com/dan_abramov/status/1422943317512364037"&gt;noted by Dan Abramov&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breakage"&gt;
  &lt;/a&gt;
  Breakage
&lt;/h2&gt;

&lt;p&gt;According to Emily Stark, a security expert on the Chrome team, breakage is &lt;a href="https://twitter.com/estark37/status/1422694856544059396"&gt;something that happens often&lt;/a&gt; on the web.&lt;/p&gt;

&lt;p&gt;But if that's true, it's very largely &lt;em&gt;because&lt;/em&gt; of Chrome. For a long time, 'don't break the web' was considered something of a &lt;a href="https://twitter.com/BenLesh/status/1422659445126057989"&gt;prime directive&lt;/a&gt; in standards work. Recall #smooshgate: a proposal to add a &lt;code&gt;flatten&lt;/code&gt; method to &lt;code&gt;Array.prototype&lt;/code&gt; turned out to be a breaking change because an ancient version of MooTools, still in use by a handful of sites, added its own incompatible &lt;code&gt;flatten&lt;/code&gt;. &lt;a href="https://twitter.com/Rich_Harris/status/971753488739954688"&gt;Disappointingly&lt;/a&gt;, some developers argued that breaking the web was acceptable, but TC39 took its backwards compatibility responsibilities seriously and ended up renaming &lt;code&gt;flatten&lt;/code&gt; to &lt;code&gt;flat&lt;/code&gt; instead. Google's Mathias Bynens &lt;a href="https://developers.google.com/web/updates/2018/03/smooshgate"&gt;wrote&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As it turns out, “don’t break the Web” is the number one &lt;a href="https://www.w3.org/TR/html-design-principles/#support-existing-content"&gt;design principle&lt;/a&gt; for HTML, CSS, JavaScript, and any other standard that’s widely used on the Web.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This time around, the approach was rather more cavalier.&lt;/p&gt;

&lt;p&gt;Reasonable people can disagree about the balance of priorities when considering breaking changes, but it's good to be clear-eyed about what 'breakage' means. One of the many anecdotes I heard in the wake of the cross-origin alert changes &lt;a href="https://twitter.com/bigtimebuddy/status/1422953235111825416"&gt;stood out&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I was attempting to delete my recurring payments account from my local waste management's super old-school site. I was bit by the cross-domain confirm() in Chrome 92. I switched to Firefox to complete.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What if Firefox was no longer an option, either because a cash-strapped Mozilla had stopped developing it, or because they had implemented the &lt;a href="https://github.com/whatwg/html/pull/6297"&gt;now standardized&lt;/a&gt; spec changes? We're not talking about the Space Jam website rendering incorrectly, we're talking about people being unable to use &lt;a href="https://twitter.com/NOVALISTIC/status/1423184584686981120"&gt;essential services&lt;/a&gt; on the web. A frequent implication in the discussion last week was that website owners could simply re-engineer their apps to not use blocking dialogs, regardless of the cost of doing so. But many sites are no longer maintained, and they're no less valuable because of it.&lt;/p&gt;

&lt;p&gt;We can't normalise the attitude that collateral damage is the price of progress, even if we accept the premise — which I don't — that removing APIs like &lt;code&gt;alert&lt;/code&gt; represents progress. For all its flaws, the web is generally agreed to be a stable platform, where investments made today will stand the test of time. A world in which websites are treated as inherently transient objects, where APIs we commonly rely on today could be cast aside as unwanted baggage by tomorrow's spec wranglers, is a world in which the web has already lost.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-if-alert-is-good-actually"&gt;
  &lt;/a&gt;
  What if alert is... good, actually?
&lt;/h2&gt;

&lt;p&gt;We're often reminded to use the web's built-in form elements instead of recreating checkboxes and buttons with a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; salad. Not only are they &lt;a href="https://drewdevault.com/2021/06/27/You-cant-capture-the-nuance.html"&gt;more accessible than what you'd likely build yourself&lt;/a&gt;, the visual consistency makes your app easier for users to navigate even if you consider the default appearance 'ugly'.&lt;/p&gt;

&lt;p&gt;Yet when it comes to dialogs, the ugly default is treated as a bug rather than a feature. Why? As Heydon Pickering &lt;a href="https://twitter.com/heydonworks/status/1423565599947513856"&gt;puts it&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Using alert(), prompt(), and confirm() in an MVP is the closest most devs will get to providing accessible dialogs. Chrome removing them just cuts out that step. Devs can go straight onto building their own underperforming, inaccessible dialogs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the bad old days, the behaviour of &lt;code&gt;alert&lt;/code&gt; was somewhat obnoxious — it would focus the tab in question, and prevent you from navigating away. Thanks to &lt;a href="https://docs.google.com/document/d/1wtV5rmLhbf1OZkbg7crtCt6h1mMtig_ctTQt3BLLEIU/edit#heading=h.uivr1mgjyut2"&gt;years of hard work&lt;/a&gt;, that's no longer the case, to the extent that I'd argue &lt;code&gt;alert&lt;/code&gt; is in many cases better than whatever you'd have cobbled together yourself.&lt;/p&gt;

&lt;p&gt;There &lt;em&gt;are&lt;/em&gt; security issues with cross-origin iframes. I remain unconvinced that removal is a better solution than improving the design in a way that makes their provenance clearer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-owns-the-web"&gt;
  &lt;/a&gt;
  Who owns the web?
&lt;/h2&gt;

&lt;p&gt;A common response to last week's kerfuffle was 'use Firefox'. But that's not a solution. Even though the change was proposed by Chromium (the &lt;a href="https://groups.google.com/a/chromium.org/g/blink-dev/c/hTOXiBj3D6A/m/JtkdpDd1BAAJ"&gt;intent to remove&lt;/a&gt; preceded any discussion with other browser vendors), Firefox ultimately supported it. That's all it takes for something to become a 'standard' — support from two vendors, and stated opposition from none.&lt;/p&gt;

&lt;p&gt;Put differently: when it comes to web standards, browsers call the shots exclusively.&lt;/p&gt;

&lt;p&gt;Whenever I've questioned the wisdom of this or that proposal, I've been told I should simply get involved in the standards discussions — they're right there on GitHub! But openness means nothing without the power to effect change, and browsers have all the power. This should strike us as odd — the W3C's &lt;a href="https://www.w3.org/TR/html-design-principles/#priority-of-constituencies"&gt;priority of constituencies&lt;/a&gt; explicitly states that the needs of users and authors (i.e. developers) should be treated as higher priority than those of implementors (i.e. browser vendors), yet the higher priority constituencies are at the mercy of the lower priority ones. (&lt;a href="https://twitter.com/yoavweiss/status/1423380609968353280"&gt;Chrome developers argue&lt;/a&gt; that they are acting in the interests of users in this case, but this &lt;a href="https://twitter.com/mikesherov/status/1423271360357351432"&gt;thread from Mike Sherov&lt;/a&gt; makes a convincing case that this is a fig leaf for the real motivation, which is technical debt.)&lt;/p&gt;

&lt;p&gt;Meanwhile, we don't seem to be learning from the past. If &lt;code&gt;alert&lt;/code&gt; is fair game for removal, then so is every API we add to the platform if the web's future stewards deem it harmful. Given that, you'd think we'd expand the platform's surface area with extreme caution; instead, we're &lt;a href="https://web-confluence.appspot.com/#!/confluence"&gt;adding APIs at breakneck speed&lt;/a&gt;, to the almost-guaranteed detriment of its future stability.&lt;/p&gt;

&lt;p&gt;Given Chrome's near-monopoly control of the browser market, I'm genuinely concerned about what this all means for the future of the web. An ad company shouldn't have this much influence over something that belongs to all of us. I don't know how to fix the standards process so that it's more representative of the diversity of the web's stakeholders, but I'm increasingly convinced that we need to figure it out.&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>How I almost won an NLP competition without knowing any Machine Learning</title>
      <author>Ferdinand Boas</author>
      <pubDate>Tue, 10 Aug 2021 13:51:28 +0000</pubDate>
      <link>https://dev.to/ferdi05/how-i-almost-won-an-nlp-competition-without-knowing-any-machine-learning-24la</link>
      <guid>https://dev.to/ferdi05/how-i-almost-won-an-nlp-competition-without-knowing-any-machine-learning-24la</guid>
      <description>&lt;p&gt;One of the cool things about Machine Learning is that you can see it as a competition. Your models can be evaluated with many performance indicators, and be ranked on various leaderboards. You can compete against other Machine Learning practitioners around the world, and your competitors can be a student in Malaysia or the largest AI lab at Stanford University.&lt;br&gt;
&lt;a href="https://www.kaggle.com/"&gt;Kaggle&lt;/a&gt; started as a platform to host such Machine Learning contests, and it gained a lot of attention from the data science community. The best data scientists exhibit on Kaggle their most sophisticated Machine Learning skills, craft the most elaborated models to reign over these competitions.&lt;br&gt;
Kaggle is now a broader platform, where you can enter these competitions but also learn data science, discuss it, and collaborate with fellow data scientists.&lt;/p&gt;

&lt;p&gt;Most of the Kaggle competitors are Machine Learning practitioners. Many software engineers do not enter these competitions, mostly because &lt;em&gt;they think&lt;/em&gt; that they do not have the needed skill set, tools, or time to be successful in them.&lt;/p&gt;

&lt;p&gt;Machine Learning can be hard to learn and use. It’s a very technical field.&lt;br&gt;
Running a Machine Learning project is complex: you will have to gather and clean data, choose a pre-trained model or train a model that suits your needs, fine-tune it for your curated dataset, and deploy the model in a production environment. You will also need to worry about monitoring, scalability, latency, reliability...&lt;br&gt;
This is usually a resource-intensive process, it takes time, knowledge, compute resources, and money. &lt;em&gt;This does not fit well with the regular activities of a software engineer.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At this stage, I need to point out that I am not a data scientist. &lt;br&gt;
&lt;strong&gt;You may now wonder how I ranked among the best data scientists in a Kaggle Natural Language Processing (NLP) challenge without using any Machine Learning.&lt;/strong&gt;&lt;br&gt;
This blog post explains how I successively leveraged &lt;a href="https://huggingface.co/"&gt;Hugging Face&lt;/a&gt; 🤗 AutoNLP web interface and 🤗 Inference API to achieve this result.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Find all the scripts and assets used in this GitHub repository.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ferdi05"&gt;
        ferdi05
      &lt;/a&gt; / &lt;a href="https://github.com/ferdi05/kaggle-disaster-tweet-competition"&gt;
        kaggle-disaster-tweet-competition
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Participating to a Kaggle competition without coding any Machine Learning
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-kaggle-competition"&gt;
  &lt;/a&gt;
  The Kaggle competition
&lt;/h2&gt;

&lt;p&gt;Entering a Kaggle competition is straightforward. You are asked to perform a task such as &lt;a href="https://en.wikipedia.org/wiki/Sentiment_analysis"&gt;sentiment analysis&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Object_detection"&gt;object detection&lt;/a&gt; that can be solved with Machine Learning. Kaggle provides a  training dataset with examples of the task to achieve. You can use this dataset to train a Machine Learning model. Then you can use this model to perform the same task on a test dataset (also provided by Kaggle). This is your attempt at solving the challenge. Then you will submit your model predictions for this test dataset to Kaggle and they will evaluate it and give you a ranking in the competition that you entered.&lt;/p&gt;

&lt;p&gt;You will find plenty of NLP competitions on the Kaggle website. I participated in the &lt;a href="https://www.kaggle.com/c/nlp-getting-started/"&gt;Natural Language Processing with Disaster Tweets&lt;/a&gt; competition as it is quite recent (7 months when writing this post) and has over 3,000 submissions from other teams.&lt;br&gt;
This competition challenged me to build a Machine Learning model that predicts if a tweet is about a real disaster or not.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kzn3kssE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/900725654928453633/ve6WRjfU_normal.jpg" alt="Charlie Langa profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Charlie Langa
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @charlielanga
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      @marksmaponyane Hey!Sundowns were annihilated in their previous meeting with Celtic.Indeed its an improvement.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:27 PM - 05 Aug 2015
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=629010812728963072" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=629010812728963072" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=629010812728963072" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This tweet is not about a real disaster&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Kaggle provides a &lt;a href="https://github.com/ferdi05/kaggle-disaster-tweet-competition/blob/main/assets/train_original.csv"&gt;training&lt;/a&gt; dataset of around 7,500 tweets (the input object) with their associated label (the desired output value). These labels tell if each tweet is about a disaster (its label is 1) or not (its label is 0). This dataset will be used to train a few Machine Learning models and evaluate them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y7-SS0jh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9hjmvhmrdqlsuvhcaip.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y7-SS0jh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9hjmvhmrdqlsuvhcaip.png" alt="Kaggle training dataset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kaggle also provides a &lt;a href="https://github.com/ferdi05/kaggle-disaster-tweet-competition/blob/main/assets/test.csv"&gt;test&lt;/a&gt; dataset of around 3,200+ tweets without any paired label. We will use the newly created Machine Learning model to predict if they are about a disaster, asking the Machine Learning model to apply labels to each of these tweets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VV_4HD_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0lb2urf4q5ppiiqk6nm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VV_4HD_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0lb2urf4q5ppiiqk6nm.png" alt="Kaggle test dataset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both datasets also contain two other data columns that will not be used: a keyword and the location of the tweet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#autonlp-web-interface-to-the-rescue"&gt;
  &lt;/a&gt;
  🤗 AutoNLP web interface to the rescue
&lt;/h2&gt;

&lt;p&gt;The process of training a Machine Learning model is not straightforward. It requires collecting cleaning and formatting data, selecting a Machine Learning algorithm, playing with the algorithm parameters, training the model, evaluating its performance, and iterating. And this does not guarantee that performances will reach your expectations.&lt;br&gt;
This is a resource-intensive process. Fortunately, I used a web interface to do all the heavy-lifting and save hours of Machine Learning-induced head-scratching.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-autonlp"&gt;
  &lt;/a&gt;
  What is 🤗 AutoNLP?
&lt;/h3&gt;

&lt;p&gt;Leveraging its experience with the most performant architectures of NLP, Hugging Face offers the &lt;a href="https://ui.autonlp.huggingface.co/"&gt;🤗 AutoNLP web interface&lt;/a&gt; to automatically train, evaluate and deploy state-of-the-art NLP models for different tasks. All you need to do is feed it your datasets.&lt;/p&gt;

&lt;p&gt;🤗 AutoNLP uses &lt;a href="https://machinelearningmastery.com/supervised-and-unsupervised-machine-learning-algorithms/"&gt;supervised learning algorithms&lt;/a&gt; to train the candidate Machine Learning models. This means that these models will try to reproduce what they learned from examples that pair an input object and its desired output value. After their training, these models should successfully pair unseen input objects with their correct output values.&lt;/p&gt;

&lt;p&gt;🤗 AutoNLP will train a range of NLP models suitable for the task required by the competition and will use a various set of configurations for each of them. Then each model’s performance will be automatically evaluated. I saved a lot of resources and money by avoiding their computer-intensive training.&lt;br&gt;
Later I selected the most performant model to make predictions for the Kaggle competition.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#training-machine-learning-models-with-data-only"&gt;
  &lt;/a&gt;
  Training Machine Learning models with data only
&lt;/h3&gt;

&lt;p&gt;The competition requires to label each tweet as related to a disaster or not. And binary text classification is one of the tasks achievable with the 🤗 AutoNLP web interface. So I started a new project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OtSwS2Yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7rgczuy00q3v18k2m85.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OtSwS2Yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7rgczuy00q3v18k2m85.png" alt="New AutoNLP project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this competition, Kaggle provides only one training dataset but you need one dataset to train the models (the training dataset) and another one (the validation dataset) to evaluate their performance.&lt;br&gt;
I split the original dataset provided by Kaggle into 2 datasets using a rule of thumb ratio of 80%-20%.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hLSapoFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a2t14e2u2mn4w3tzrbg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hLSapoFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a2t14e2u2mn4w3tzrbg.png" alt="Column mapping"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The columns of both datasets need to be mapped. The &lt;em&gt;text&lt;/em&gt; column is the input object and the &lt;em&gt;target&lt;/em&gt; column is the desired output value. Here the input object is the tweet content, and the output value is its associated label.&lt;/p&gt;

&lt;p&gt;Then the web interface started the training and did its magic.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ePeuynJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d30g1p6jgyvrpv3c7bx7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ePeuynJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d30g1p6jgyvrpv3c7bx7.gif" alt="training models with AutoNLP"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After a few minutes, models were trained, evaluated, and uploaded on the &lt;a href="https://huggingface.co/models"&gt;Hugging Face Hub&lt;/a&gt; (with private visibility). They were ready to serve, still without any Machine Learning instructions, as you will see later.&lt;/p&gt;

&lt;p&gt;For this competition, Kaggle evaluates the performance of the predictions with their &lt;a href="https://en.wikipedia.org/wiki/F-score"&gt;F1 score&lt;/a&gt;. This is an accuracy metric for a machine learning model. So the best model was the one with the highest F1 score.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GlrlWJIN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lklovjp5gkspu5zosrxy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GlrlWJIN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lklovjp5gkspu5zosrxy.png" alt="Model metrics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kaggle sometimes evaluates results with more sophisticated metrics. Conveniently 🤗 AutoNLP web interface automatically uploads every trained model’s file on the Hugging Face Hub with &lt;a href="https://huggingface.co/ferdinand/autonlp-kaggle-competition-6381329"&gt;their associated card&lt;/a&gt;. Each card includes the model metrics (that you may combine according to your need) and code snippets to use the model. And there is even a widget to quickly experiment with the model.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8rrMiKnl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jiw0mde4zsxvnw62y95v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8rrMiKnl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jiw0mde4zsxvnw62y95v.png" alt="Model card"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#solving-the-kaggle-challenge-with-the-inference-api"&gt;
  &lt;/a&gt;
  Solving the Kaggle challenge with the 🤗 Inference API
&lt;/h2&gt;

&lt;p&gt;It is now time to use the most performant model on the test dataset provided by Kaggle.&lt;br&gt;
There are two different ways to use the model:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the data scientist way: deploying the model on a dedicated infrastructure, or on a Machine Learning platform&lt;/li&gt;
&lt;li&gt;the &lt;em&gt;developer-friendly&lt;/em&gt; way of using it: through API calls. This is the one that I will describe here.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#serving-machine-learning-models-with-the-inference-api"&gt;
  &lt;/a&gt;
  Serving Machine Learning models with the 🤗 Inference API
&lt;/h3&gt;

&lt;p&gt;Using Machine Learning models in production is hard, even for Machine Learning engineers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you may have a difficult time handling large and complex models&lt;/li&gt;
&lt;li&gt;your tech architecture can be unoptimized&lt;/li&gt;
&lt;li&gt;your hardware may not meet your requirements
Your model may not have the scalability, reliability or speed performances that you were expecting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I relied on the &lt;a href="https://huggingface.co/inference-api"&gt;🤗 Inference API&lt;/a&gt; to use my model, still without coding any Machine Learning. The API allows to reach up to &lt;a href="https://huggingface.co/blog/accelerated-inference"&gt;100x speedup&lt;/a&gt; compared to deploying my model locally or on a cloud, thanks to many optimization techniques. And the API has built-in scalability which makes it a perfect addition to a software production workflow, while controlling the costs as I will not need any extra infrastructure resources.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#a-few-api-calls-to-solve-the-challenge"&gt;
  &lt;/a&gt;
  A few API calls to solve the challenge
&lt;/h3&gt;

&lt;p&gt;Let’s call the 🤗 Inference API for each row of the test dataset, and write the output value in the submission file.&lt;br&gt;
I could have used the API via regular HTTP calls, but there is an alternate way: the &lt;a href="https://github.com/huggingface/huggingface_hub/"&gt;huggingface_hub library&lt;/a&gt; conveniently offers a wrapper client to handle these requests, and I used it to call the API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;huggingface_hub.inference_api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InferenceApi&lt;/span&gt;

&lt;span class="n"&gt;inference&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InferenceApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ferdinand/autonlp-kaggle-competition-6381329"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;API_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# URL of our model with our API token
&lt;/span&gt;&lt;span class="n"&gt;MODEL_MAX_LENGTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="c1"&gt;# parameter of our model, can be seen in config.json at "max_position_embeddings"
&lt;/span&gt;
&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"assets/test.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Kaggle test data
&lt;/span&gt;&lt;span class="n"&gt;csv_read&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_read&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# skipping the header row
&lt;/span&gt;
&lt;span class="n"&gt;fw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"assets/submission.csv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"UTF8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# our predictions data
&lt;/span&gt;&lt;span class="n"&gt;csv_write&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;csv_write&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'target'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# writing the header row
&lt;/span&gt;
&lt;span class="c1"&gt;#returns a label : about a disaster or not given a tweet content
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet_content&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

   &lt;span class="c1"&gt;# calling the API, payload is the tweet content , possibly truncated to meet our model requirements
&lt;/span&gt;   &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tweet_content&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;MODEL_MAX_LENGTH&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

   &lt;span class="c1"&gt;# Determining which label to return according to the prediction with the highest score
&lt;/span&gt;   &lt;span class="c1"&gt;# example of an API call response: [[{'label': '0', 'score': 0.9159180521965027}, {'label': '1', 'score': 0.08408192545175552}]]
&lt;/span&gt;   &lt;span class="n"&gt;max_score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
   &lt;span class="n"&gt;max_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
   &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dic&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
       &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'label'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
           &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'score'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
           &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;max_score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
               &lt;span class="n"&gt;max_score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;
               &lt;span class="n"&gt;max_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;max_label&lt;/span&gt;


&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# call the API for each row
&lt;/span&gt;
   &lt;span class="c1"&gt;# writing in the submission file the tweet ID and its associated label: about a disaster or not
&lt;/span&gt;   &lt;span class="n"&gt;write_row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])]&lt;/span&gt; &lt;span class="c1"&gt;# row[0] is the tweet ID, row[3] is the tweet content
&lt;/span&gt;   &lt;span class="n"&gt;csv_write&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;write_row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running the 🤗 Inference API on all the input data (it may take a while), I ended up with a file that I submitted to Kaggle for evaluation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QdsHeL6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4wlvodvndhx0evy3kqu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QdsHeL6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4wlvodvndhx0evy3kqu.png" alt="Kaggle evaluation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This model made it to the top 15% of the competitors with a 0.83 mean score!&lt;br&gt;
At first, I was surprised to not rank higher. Unfortunately, the test dataset and its associated label used for this competition are available publicly. So a few clever contestants submitted it and received an approximate 1.00 score, which is not something realistic in a data science problem.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NOmuM7aH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w3nf4fvr6qgxkskm0kw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NOmuM7aH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w3nf4fvr6qgxkskm0kw.png" alt="Kaggle leaderboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Having a second look at the leaderboard, I saw that the best data science teams have a 0.85 score. This is very close to the score that I obtained, and another 🤗AutoNLP test may give better results, depending on how lucky I am with the random variations of each model’s parameters. Given the time and resources invested in solving this challenge, this is almost a win!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-more-with-the-autonlp-python-package"&gt;
  &lt;/a&gt;
  Do more with the AutoNLP Python package
&lt;/h2&gt;

&lt;p&gt;With the 🤗 AutoNLP web interface, the 🤗 Inference API, and a very few lines of code, NLP models were automatically created, deployed, and used to achieve a great ranking in an NLP competition without learning or using any Machine Learning techniques.&lt;/p&gt;

&lt;p&gt;🤗 AutoNLP can also be used as a Python package and can support more Machine Learning tasks than those provided by the web interface - but the interface is quickly catching up. You can use the package to perform tasks like speech recognition and enter even more Kaggle competitions!&lt;/p&gt;

&lt;p&gt;If you want to win a Kaggle competition or to train a model for your business or pleasure, you can get started with AutoNLP &lt;a href="https://huggingface.co/autonlp"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>nlp</category>
      <category>kaggle</category>
      <category>datascience</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>⚛️ Senior React Coding Interview, By A Professional React Developer 👨‍💻</title>
      <author>Better Coding Academy</author>
      <pubDate>Tue, 10 Aug 2021 13:42:35 +0000</pubDate>
      <link>https://dev.to/bettercodingacademy/senior-react-coding-interview-by-a-professional-react-developer-2o6</link>
      <guid>https://dev.to/bettercodingacademy/senior-react-coding-interview-by-a-professional-react-developer-2o6</guid>
      <description>&lt;p&gt;&lt;strong&gt;About Me:&lt;/strong&gt; I've been a professional web developer for just over 10 years now. I'm currently the lead web development instructor at &lt;a href="https://codebetter.com.au"&gt;Better Coding Academy&lt;/a&gt;, and as part of what I do, I post videos on our YouTube channel at &lt;a href="https://www.youtube.com/c/BetterCodingAcademy"&gt;https://www.youtube.com/c/BetterCodingAcademy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Subscribe for awesome web development content!)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Many people have asked for mock coding interviews around React, and this is me delivering on that request! In the following video series I take you through a sample senior React interview question, going through my decisions and thoughts in detail as I attempt to tackle the problem for the first time. I hope you enjoy!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/We3VhD1hQlk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Top 15 best beginner projects ideas for new programmers</title>
      <author>Innocent Coder</author>
      <pubDate>Tue, 10 Aug 2021 13:36:43 +0000</pubDate>
      <link>https://dev.to/innocentcoder/top-15-best-beginner-projects-ideas-for-new-programmers-4n19</link>
      <guid>https://dev.to/innocentcoder/top-15-best-beginner-projects-ideas-for-new-programmers-4n19</guid>
      <description>&lt;p&gt;Here Are the top 15 beginner project ideas that are you must try in your programming career.&lt;/p&gt;

&lt;p&gt;This Post Report From :- &lt;a href="https://websitemakers.xyz/top-15-best-beginner-projects-ideas-for-new-programmers/"&gt;https://websitemakers.xyz/top-15-best-beginner-projects-ideas-for-new-programmers/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you’re first learning to program, there seem to be a lot of things to know. The greatest method to improve your programming skills is to use them to create coding projects. Here are a few greatest programming projects to increase your expertise and make it a good developer, even if you’re a newbie or returning to coding.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#stop-watch"&gt;
  &lt;/a&gt;
  Stop Watch
&lt;/h1&gt;

&lt;p&gt;This Stopwatch project is a simple project developed using JavaScript, CSS, and HTML. This project is interesting. Here, the user can set the timer for doing anything and also stop the timer or reset it. This system helps calculate time in any work.   &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#todo-app"&gt;
  &lt;/a&gt;
  TO-DO App
&lt;/h1&gt;

&lt;p&gt;The To-Do List is a simple project developed using JavaScript, bootstrap, and HTML. This project is interesting. Here, the user can add the number of to-do work details and you can see the details stored in the list form like sticky list notes. Also, the user can delete the list items if he/she wants to remove them.  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#music-player"&gt;
  &lt;/a&gt;
  Music Player
&lt;/h1&gt;

&lt;p&gt;The Music Player is a simple project developed using JavaScript, CSS, and HTML. This project is an interesting project for listening to our self-made songs collection app. The user can play different kinds of music and enjoy the sound of their music. The user can click the forward and backward play buttons to change the songs. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#advanced-calculator"&gt;
  &lt;/a&gt;
  Advanced Calculator
&lt;/h1&gt;

&lt;p&gt;Advanced Calculator is a simple project in HTML5, CSS, and JavaScript. This project is for solving the mathematical calculations of numbers. You can see the basic features of the advanced calculator in this project. Also, there are two modes in this calculator system. So, you can either use the basic mode or advanced mode.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#currency-converter"&gt;
  &lt;/a&gt;
  Currency Converter
&lt;/h1&gt;

&lt;p&gt;The Simple Currency Converter is a simple project developed using HTML, CSS, and JavaScript. This app converts Currency from one unit to another. You can have different options for the currency units on your own. Here, the user has to type themselves for the currency unit while converting.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#simple-chatbot"&gt;
  &lt;/a&gt;
  Simple ChatBot
&lt;/h1&gt;

&lt;p&gt;This automated communication system is developed using Python. The project file contains a python script (bot.py). Talking about this chatbot, it allows the user to provide suitable numbers for age guessing and counting. At last, this chatbot asks you multiple-choice questions. Also, this is a simple cmd-based project which is easy to understand and use.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#typing-speed-test"&gt;
  &lt;/a&gt;
  Typing Speed Test
&lt;/h1&gt;

&lt;p&gt;Typing Speed Tester is a simple project developed using HTML 5, CSS, and JavaScript. This project helps you to improve your Typing speed. This is like a game, a typing test. Here, you have to duplicate the provided text exactly in the field given. The timer starts when you start typing and only stops when you match this text exactly.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ecommerce-app"&gt;
  &lt;/a&gt;
  E-Commerce App
&lt;/h1&gt;

&lt;p&gt;E-commerce in javascript is a simple buy and sell website. The whole programming is in HTML, CSS, and JavaScript. Also, this project uses Firebase as a backend. So to the proper functioning of this project, make sure you have an active internet connection. You can simply use any kind of code editor for this project.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#movie-streaming-app"&gt;
  &lt;/a&gt;
  Movie Streaming App
&lt;/h1&gt;

&lt;p&gt;“Online Movie Streaming” is an online movie show where the users can see the movie free of cost. Nowadays all people want to watch the movie online. All the CDs are not in use. This system will make it easier for users to watch the movie online. This system is designed in PHP and MYSQL.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#chat-app"&gt;
  &lt;/a&gt;
  Chat App
&lt;/h1&gt;

&lt;p&gt;The system is built fully in Django Framework in back-end and HTML, CSS in front-end. It contains a similar user interface as a messenger application where all registered users are listed and you can chat with anyone. Along with the chatting feature, all the recent messages are present on the same screen with a scrollbar where the user can scroll to see any previous messages with any other user. The web-chatting app also has an admin panel from where all the Chats and Users can be managed.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#video-chat"&gt;
  &lt;/a&gt;
  Video Chat
&lt;/h1&gt;

&lt;p&gt;Video calls have become an integral part of today’s communication with over a 175% increase in regular live video usage among millennials in just the last 3 years, according to TokBox. We can see that video chat apps are growing in popularity with incredible speed both for businesses as well as personal use.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#trading-app"&gt;
  &lt;/a&gt;
  Trading App
&lt;/h1&gt;

&lt;p&gt;Stock markets generate massive amounts of data that require a lot of analysis. And that’s where Python helps as well. With the help of this language, Developers can use it to create solutions that identify the best trading strategies and offer actionable, predictive analytical insights into the condition of specific markets. To create software with such capabilities can be used not only Python but Django framework based on Python. For example Quantopian, Quantconnect, Zipline, Bank trader, IBPy, etc&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#youtube-clone"&gt;
  &lt;/a&gt;
  Youtube Clone
&lt;/h1&gt;

&lt;p&gt;Simple Youtube Clone project is in ReactJS, Axios.js, Lodash.js. It uses Youtube API to fetch videos and display them to the users. Here you can search for any videos you want to watch. This mini-project doesn’t have features like the real youtube which contains like and dislikes, comments, subscriptions, etc. This simple ReactJS application only lets you surf videos online, read descriptions and it is pretty responsive. It contains a search bar that displays various results searched by the users. Not only the searched video but also it displays related videos too.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#spotify-clone"&gt;
  &lt;/a&gt;
  Spotify Clone
&lt;/h1&gt;

&lt;p&gt;Today, we will be building a Spotify Clone using ReactJS and get all the required data from the official Spotify Web API. Spotify is a music application where you can listen to your favorite music. It has an inbuilt music player so that you can pause/play, repeat, and adjust the volume of the music.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#facebook-clone"&gt;
  &lt;/a&gt;
  Facebook Clone
&lt;/h1&gt;

&lt;p&gt;Facebook Clone is a Social Networking Script which creates a dynamic Social Networking platform like Facebook. Facebook generates revenue through targeted advertisements based on user profiles. It also generates revenue from different applications which are developed by third-party providers.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Mixing Clean Architecture</title>
      <author>Miroslav Malkin</author>
      <pubDate>Tue, 10 Aug 2021 13:29:43 +0000</pubDate>
      <link>https://dev.to/miros/mixing-clean-architecture-428c</link>
      <guid>https://dev.to/miros/mixing-clean-architecture-428c</guid>
      <description>&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; This article gently introduces the &lt;a href="https://github.com/funbox/clean_mixer"&gt;CleanMixer&lt;/a&gt; tool, which is helpful for visualization and control of elixir project architecture. Throughout this article, CleanMixer is used as a backbone theme for introducing architecture principles, best practices, and their reasons.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt; Most of the theoretical material I will cover uses Robert Martin's excellent book "Clean Architecture".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;First of all, let's introduce a definition of what a component is. Any set of source files can be a component. It is something physical, for example, a namespace (in Elixir, that is a set of files in a separate folder with the same module name prefix for it). It could be an umbrella app; it could be a hex package.&lt;/p&gt;

&lt;p&gt;If we are talking about a component from a logical point of view, a component is an abstraction of some functionality, in other words, some &lt;a href="https://martinfowler.com/bliki/BoundedContext.html"&gt;DDD Bounded Context&lt;/a&gt;, some functional area or ​​business capability. Or it could be a purely technical abstraction — for example, an adapter for accessing Kafka. The relationship between components is physical. The source file of one component should mention the module's name or the source file of another component. It should not be confused with logical coupling, where one component discovers its dependencies only at runtime using Dependency Injection.&lt;/p&gt;

&lt;p&gt;Let's use the &lt;a href="https://github.com/funbox/clean_mixer"&gt;Clean Mixer&lt;/a&gt; tool to visualize the architecture of some imaginary project and see what the picture looks like when the principles are violated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mix clean_mixer.plantuml &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QGxza88Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlrcwdpp1h4ohoe39f13.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QGxza88Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlrcwdpp1h4ohoe39f13.png" alt="Bad architecture example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What are the problems here?&lt;/p&gt;

&lt;p&gt;Firstly, it is unclear which component is the domain or the core of the application. Which component contains the most critical business logic of our application? For what purpose was this service created? &lt;/p&gt;

&lt;p&gt;Secondly, the layers are poorly visible. It is not clear where the Domain Core is, but on the other hand, it is also not clear where all the adapters and infrastructure components are. For example, the Queues component is used by many other components. Is it an important domain object, or is it some small detail of interaction with the outside world? It is unclear.&lt;/p&gt;

&lt;p&gt;As a result, the whole picture looks tangled. Everything is together, and everything depends on each other. It is not clear where the essential parts are. The main reason for this is that there are cyclical dependencies. And cycles in dependencies are a strong indicator of the Stable Dependency Principle violation. We will talk about it very soon. There are often two arrows in the picture. One is red, where the principle is violated, and one is black, where the principle is not violated. &lt;/p&gt;

&lt;p&gt;Another problem is that all the components are specific. Therefore, it is better to depend on abstractions. If one component depends on abstraction, then a clear boundary is drawn between the components. And thanks to this boundary, these components can vastly change independently of each other without any avalanche-like propagation of changes in the system. The Abstractness metric here is minimal for most components, meaning they do not contain interface definitions (elixir behaviours).&lt;/p&gt;

&lt;p&gt;Now the principles &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#principles-of-cohesion"&gt;
  &lt;/a&gt;
  Principles of cohesion
&lt;/h3&gt;

&lt;p&gt;How are the components formed? What are they created from? We will cover two principles here. They are the Common Closure Principle and the Common Reuse Principle.&lt;br&gt;
Common Closure Principle&lt;/p&gt;

&lt;p&gt;Let's start with the Common Closure Principle. It says that files that change for the same reason must reside in the same component. And naturally, the opposite: files that change for different reasons and at different rates should be located in different components.&lt;/p&gt;

&lt;p&gt;These architectural principles are very similar to more widely known SOLID principles but in a more generalized way.  The SOLID counterpart of the Common Closure Principle is, of course, the mighty Single Responsibility Principle.&lt;/p&gt;

&lt;p&gt;This principle follows from the fact that maintainability, that is, the convenience of maintaining a project, is more critical than reusability. When some functionality is in a single place, i.e., in one component, it is naturally more convenient to change it. On the other hand, if functionality is not split into a bunch of small independent pieces, it is more difficult to reuse it. A client should not depend on what he does not use (the Interface Segregation Principle). Maintainability is especially important in the early stages of project development. When to produce a lot of code, and preferably good understandable code, is more important than trying to package this code to be reusable in other hypothetical projects.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#common-reuse-principle"&gt;
  &lt;/a&gt;
  Common Reuse Principle
&lt;/h3&gt;

&lt;p&gt;The next one is the Common Reuse Principle. Files that are used together must be in the same component. Sounds very familiar. Indeed, this architectural principle is a generalization of the SOLID Interface Segregation Principle. It follows from the fact that if a component has good cohesion and implements some logically integral piece of functionality, then its files should have many dependencies among themselves. It is difficult for clients to depend on one file in such a component and not to depend on the others because they need all the functionality implemented by this component. Customers don't want to use a small piece of a large multipurpose component that has everything in the world. You don't have to depend on what you don't need. Files that are loosely related to others should not be in that component. Clients of that component might not want to depend on them.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#principles-of-coupling"&gt;
  &lt;/a&gt;
  Principles of coupling
&lt;/h3&gt;

&lt;p&gt;Now let's talk about coupling principles how the components are related. Very often, arbitrary relations between components indicate that something is wrong with cohesion as well. Relationships between components in this context mean source file dependencies (some code in a source file refers to a module name of another component).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#acyclic-dependency-principle"&gt;
  &lt;/a&gt;
  Acyclic Dependency Principle
&lt;/h3&gt;

&lt;p&gt;The first and the most critical principle is the Acyclic Dependency Principle. It's straightforward. There should be no cycles in the component dependency graph. You can always get rid of cycles. Dependency cycles make components inter dependable and make independent work on different parts of the system more difficult. &lt;/p&gt;

&lt;p&gt;For example, let's say our component is a hex package. The hex package has a version. Suppose we had made changes to package B that forced us to increment its major version. Now we need to update all clients of this package. So we need to update package A. And since we change something in package A, we need to update its version in package C. Because of the circular connections of the three components here, we also need to update the version of package C in package B. So if we make changes to one component, we need to change all components in their cycle. &lt;/p&gt;

&lt;p&gt;All three components physically form one monolithic system. If these components were microservices, it would mean a nasty lock step deployment of all of them at once. In the world of microservices, it is a nightmarish beast of a distributed monolith.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H1oKh97Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u28jt5q2h1x5pr9opd76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H1oKh97Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u28jt5q2h1x5pr9opd76.png" alt="Acyclic Dependency Principle&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#breaking-cycles"&gt;
  &lt;/a&gt;
  Breaking Cycles
&lt;/h3&gt;

&lt;p&gt;How do I break the cycles? There are two approaches here.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#breaking-cycles-with-a-new-component"&gt;
  &lt;/a&gt;
  Breaking Cycles with a new component
&lt;/h4&gt;

&lt;p&gt;One way to do it is to move common code into a new component. Let's imagine we have two components — the component of Happy Doge and the component of Good Doge. But, as we know, all Doges are good happy boys. Therefore, the Happy Doge uses docility of the Good Doge, and the Good Doge uses the happiness of the Happy Doge. We can combine this functionality into a new component of the base Doge and use it from both of these two components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pQ2qYJP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ylripvlvso7zfm9yt1l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pQ2qYJP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ylripvlvso7zfm9yt1l.png" alt="Breaking Cycles with new component"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's a great feeling if while trying to avoid a circular dependency, we suddenly realize that our system is missing some business-related component (the bounded context in DDD).&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#breaking-cycles-with-di"&gt;
  &lt;/a&gt;
  Breaking cycles with DI
&lt;/h4&gt;

&lt;p&gt;The second way to break the loop is to reverse the direction of the dependency. If you have a cyclic graph, then to break it, it is enough to direct one dependency in the opposite direction. How to do it? Let's assume that we have a domain component, and it uses some functionality from the authorization component. But we do not want the domain to be dependent on anything. We want it to be the core of the system. What should we do? Within the domain component, we define an abstract interface and implement it inside the authorization component. It turns out that the domain no longer depends on any functionality in the authorization. Now the authorization component must implement some abstract interface that the domain requires from it. The concrete implementation of the functionality into the domain component is injected at runtime. That is a good old-fashioned dependency injection, which in my opinion, is highly underused in Elixir.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GBbapKCS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6c1ledcgtq58w2komw3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GBbapKCS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6c1ledcgtq58w2komw3.png" alt="Breaking cycles with DI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most straightforward way to implement an interface in Elixir is behaviour. Every time I say interface, you can think about behaviour.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Domain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;UseCases&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;CreateUser&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
   &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="no"&gt;Domain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;User&lt;/span&gt;

   &lt;span class="nv"&gt;@spec&lt;/span&gt; &lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;UserRegistry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_registry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
     &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;user_registry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
       &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
         &lt;span class="c1"&gt;# ...&lt;/span&gt;
       &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
           &lt;span class="c1"&gt;# ...&lt;/span&gt;
       &lt;span class="k"&gt;end&lt;/span&gt;
     &lt;span class="k"&gt;end&lt;/span&gt;
   &lt;span class="k"&gt;end&lt;/span&gt;

   &lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Domain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;UserRegistry&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
     &lt;span class="nv"&gt;@type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;
     &lt;span class="nv"&gt;@callback&lt;/span&gt; &lt;span class="n"&gt;exists?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;end&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;

 &lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;LDAP&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
   &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="no"&gt;Domain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;UserRegistry&lt;/span&gt;
   &lt;span class="nv"&gt;@behaviour&lt;/span&gt; &lt;span class="no"&gt;UserRegistry&lt;/span&gt;

   &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;UserRegistry&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;exists?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;end&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#stable-dependency-principle"&gt;
  &lt;/a&gt;
  Stable Dependency Principle
&lt;/h3&gt;

&lt;p&gt;Do you remember that odd red arrow that was on the opening diagram? It is time to make sense of it. That arrow was red because it violated the Stable Dependency Principle - dependencies should point in the direction of stability.&lt;/p&gt;

&lt;p&gt;But what is stability? It is important to note that stability is not the opposite of volatility. It is not how often the source files of that component change. Stability is a definition in terms of dependencies. It determines how hard it is to change a component without breaking other components in your system. It measures how much work it takes to change it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---kSHXvlt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcgxqo806ew5g89xgn1r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---kSHXvlt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcgxqo806ew5g89xgn1r.png" alt="Stable and unstable components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are &lt;em&gt;stable&lt;/em&gt; components and &lt;em&gt;unstable&lt;/em&gt; components. Component A is a stable one. Three components use it. This means that it is responsible for them since they depend on it. If it wants to change its interface or internal functionality, these components may also need to change. Therefore, it makes the component stable. It's harder to change it.&lt;/p&gt;

&lt;p&gt;Component B is unstable. It has no dependencies, and nobody uses it. Therefore, it can change as often as it wants.&lt;/p&gt;

&lt;p&gt;Some components, by their very nature, must be volatile. We just want it. A good architectural principle is to divide components that change frequently and those that change rarely. Components that change frequently should be unstable. Components that rarely change can be stable.&lt;/p&gt;

&lt;p&gt;Unstable components should depend on components that are more difficult to change and not vice versa. Because of their volatility, they may change frequently, and we don't want to modify a bunch of other components' code every time we change it (code smell known as the Shotgun Surgery).&lt;/p&gt;

&lt;p&gt;Conversely, a volatile component should not be a dependency of a component that is difficult to change.&lt;/p&gt;

&lt;p&gt;From this, we draw a simple conclusion. Dependencies should point in the direction of stability. Thus, if you go through the dependency graph, each next component in the system should be more stable than the previous ones.&lt;/p&gt;

&lt;p&gt;To assess this more quantitatively, we need to introduce simple IN and OUT metrics. IN is the number of inbound dependencies, and OUT is the number of outbound dependencies. Those connections are source file-based.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HEPeadwI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9qllcjzlojhzsyoglri.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HEPeadwI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9qllcjzlojhzsyoglri.png" alt="IN and OUT metrics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example, we have a Cc component. Inside it, there are two public files. They are used by two files from the Ca component, one from the Cb component and one from the Cd component. This means that its IN metric is equal to four.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#instability-metric"&gt;
  &lt;/a&gt;
  Instability metric
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XpmHf4z_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0svkok0v06yb4890wd3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XpmHf4z_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0svkok0v06yb4890wd3.png" alt="Instability metric"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I = OUT / (IN + OUT)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Based on the IN metric, you can calculate the Instability metric. The Instability of a component is the share of its outgoing connections among all its connections. If the Instability of a component is equal to one, then no one depends on the component. He has no reason not to change. It can be a volatile component. If Instability is zero, then the component is very stable. Other components depend on this component. It is difficult for it to change, but on the other hand, since it does not depend on other components. So it will change only for important reasons: for reasons of either unavoidable change in business logic or some kind of purposeful refactoring decisions that hopefully won't change its interface.&lt;/p&gt;

&lt;p&gt;Let's consider the case of violation of the Stable Dependency Principle. I think it is a bit easier to use the Stability metric. It is simply the inverted Instability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;S = 1 − I = IN / (IN + OUT)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Suppose initially we had a stable component in the system. We designed it this way, and it contains the core of the system's functionality, one that we expect not to change very often. But at some point in time, while adding some new functionality to the core of the system, one of the developers saw that the initially volatile component Flexible had the code he needed, and he just jumped to reuse it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uLVkHS5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4413nh0055jcewy2p1r2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uLVkHS5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4413nh0055jcewy2p1r2.png" alt="Stable Dependency Principle violation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A new connection was created between a stable component and a mutable component. This connection violates the Stable Dependency Principle. A stable component has a ⅔ Stability metric. It has two incoming connections, among a total of three connections. The flexible component has a Stability metric of 1/3. He has one incoming connection and two outgoing ones. We remember that in the Stable Dependency Principle, stability should increase in the direction of connections. Ideally, the Stability of the component that is lower in the picture should be greater than the Stability of the component that is higher in the picture, but here it is just the opposite. This connection is broken, and so is our original desire for a component that rarely changes to be stable.&lt;/p&gt;

&lt;p&gt;A component that changes frequently, an unstable component, should have few or no incoming connections, and yet they have appeared.&lt;/p&gt;

&lt;p&gt;Solution? Once again, it is the Dependency Inversion. Component C defines the interface it needs. Component D implements this interface, and the necessary functionality is injected into component C.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--12bl3bMS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqsh8ncf24i7qfqf2cgs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--12bl3bMS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqsh8ncf24i7qfqf2cgs.png" alt="Dependency Inversion example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stable-abstraction-principle"&gt;
  &lt;/a&gt;
  Stable Abstraction Principle
&lt;/h3&gt;

&lt;p&gt;The next principle is the Stable Abstraction Principle. Stable components should be abstract. Indeed, we said that some components in the system must be stable, and many incoming connections to them can not be avoided. But it means that when this component changes, much other code in the system can break. This can be prevented by depending on abstractions. Stable components should be abstract, thereby loosening coupling by defining explicit interfaces. Unstable components need to be concrete because they implement some specific functionality, and that is why they have value. Dependencies must point in the direction of stability, and therefore dependencies must point in the direction of increasing abstractness.&lt;/p&gt;

&lt;p&gt;You can take a simple metric A, the number of abstract files among all the files in our component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A = AbstractFiles / TotalFiles&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-main-sequence"&gt;
  &lt;/a&gt;
  The Main Sequence
&lt;/h3&gt;

&lt;p&gt;We can visualize these metrics of Abstractness and Instability. This plot has two zones to avoid.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pdfabr7v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p7j7vajk7janxnf4c5ct.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pdfabr7v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p7j7vajk7janxnf4c5ct.png" alt="The Main Sequence"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first is the Zone of pain. It contains very concrete components. And they have very high stability. These are difficult to change because if you try to change such components, you may need to change a bunch of others.&lt;/p&gt;

&lt;p&gt;On the other hand, there is a zone of uselessness. There are components here that are abstract but very unstable. It is unclear why a component that is changing all the time and no one depends on it defines some abstraction. This is most likely some kind of rubbish, like unnecessary interfaces.&lt;/p&gt;

&lt;p&gt;We can then assume that the most valuable and problem-free components will be the components that are as far away as possible from these two extreme points. And these components form what Bob Martin called the Main Sequence. Distance from this main sequence can be a good metric. The further the component is from the main sequence, the more suspicious it is. So it is prudent to take a close look at it. Why did such a bad guy appear in the system, and what is wrong with him? Maybe he has something wrong with connections. Somewhere you need Inversion of Dependencies? Or, maybe, in general, you need to repartition the responsibilities between other components or introduce some new ones.&lt;/p&gt;

&lt;p&gt;There is a particular case, and it is essential to mention it. These are nearly immutable components. Although they are in the pain zone, they are not dangerous because they rarely change. The classic example is the standard libraries of the language. All of our code is permeated with it, but this is not a big deal because the developers of these libraries take on a solid obligation to define stable interfaces and functionality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clean-and-hexagonal-architectures"&gt;
  &lt;/a&gt;
  Clean and Hexagonal Architectures
&lt;/h3&gt;

&lt;p&gt;Let's try to bring these principles together in the frameworks of Clean and Hexagonal Architectures. I will talk about them together as if they were the same thing. Because indeed, they have the same basic principles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://butovo.zone/clean_and_hexagonal.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Dq20Kqn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://butovo.zone/clean_and_hexagonal.png" alt="Clean and Hexagonal Architectures"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first principle is that the domain is always at the center of all dependencies. Domain neither depends on nor directly uses any source files from other components. Only other components have physical connections to a domain because they implement the interfaces that are defined in it.&lt;/p&gt;

&lt;p&gt;While Clean Architecture considers the domain to be central, Hexagonal architecture emphasizes that the inner parts of the architecture define the interfaces implemented by the outer parts.&lt;/p&gt;

&lt;p&gt;Inside the system, in its core is the Domain, along the edges, there are all sorts of adapters to implement API, query the database, access Kafka, etc... But, fundamentally, these two architectures are very similar in their values.&lt;/p&gt;

&lt;p&gt;To reiterate, the Domain is the most stable part of the application. Therefore, all other components depend on it. But these dependencies should be to data structures that are fundamental entities of a specific domain. Or they must be abstract interfaces that are defined by the Domain.&lt;/p&gt;

&lt;p&gt;Both architectures have many things in common in their layering as well. In the center is the Domain Entities Layer. These are pure data structures and entities with basic behavior that is stable in the Domain. If, for example, you want to create a new application with new functionality in the same domain, then, theoretically, you could take these structures out into a new application and build some new functionality based on them with no or few changes. This is the most stable part of the application - the Domain, the part that changes relatively rarely and only for important reasons: changes in your knowledge about the domain.&lt;/p&gt;

&lt;p&gt;Around the inner core is the Domain Services Layer, that is, use cases. These are those entities that implement business processes using the core Domain structures. They, by definition, are application-specific. Therefore, they are less stable and need to change more often.&lt;/p&gt;

&lt;p&gt;Next is the Application Services Layer. This would include technical but important concerns such as transaction management for the database. &lt;/p&gt;

&lt;p&gt;Along the edges of the system are Adapters. This is the lowest level logic - i/o. Those can be HTTP API controllers or clients, Kafka, queues, etc. When moving from the center of the system to the edges, stability and reusability decrease.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reusability: Domain entities &amp;gt; Domain Services &amp;gt; Application Services &amp;gt; Adapters&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stability: Domain entities &amp;gt; Domain Services &amp;gt; Application Services &amp;gt; Adapters&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clean-mixer-example"&gt;
  &lt;/a&gt;
  Clean Mixer Example
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://butovo.zone/clean_mixer.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DruMq8Tq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://butovo.zone/clean_mixer.png" alt="Clean Mixer Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's try to analyze a specific example. Look at the picture. First, we see where the core of our system is. It consists of &lt;code&gt;im&lt;/code&gt; (Instant Messaging) and &lt;code&gt;im/business_chat&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is important to note that all dependencies for components inside our Core Domain are only incoming. Therefore, these components are very stable. &lt;/p&gt;

&lt;p&gt;At the top, we have the app_server component, and it is very unstable because it has many outgoing dependencies. It contains all the dirty initialization: building supervisor trees, configuring dependency injection, etc.&lt;/p&gt;

&lt;p&gt;We also can see the &lt;code&gt;app_services&lt;/code&gt; components — it's the Application Services Layer, which lies between the very stable application core and the very unstable component app_server.&lt;/p&gt;

&lt;p&gt;Red arrows point to the Stable Dependency Principle violation. But the difference in Stability metrics is not that big. So it does not seem that these violations bring any problems worth looking at at this specific moment.&lt;/p&gt;

&lt;p&gt;Also, note that components within the Core Domain are more abstract than other components (I metric).&lt;/p&gt;

&lt;p&gt;It is also quite interesting that two very stable components have many incoming connections: the &lt;code&gt;xmpp&lt;/code&gt; and &lt;code&gt;xep&lt;/code&gt; components. Those implement low-level protocols. This is the kind of functionality that someday soon we might like to move to a separate hex package and use in other applications that work with these protocols. Therefore, we want these components to be stable to be more conveniently reused in other applications.&lt;/p&gt;

&lt;p&gt;It is also worth mentioning the &lt;code&gt;data_io/interface&lt;/code&gt; component. This is an entirely abstract component that contains only the most basic data structures and interface definitions. It was created to break cyclic dependencies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automated-architecture-tests"&gt;
  &lt;/a&gt;
  Automated architecture tests
&lt;/h3&gt;

&lt;p&gt;But fixing the current state of the system is only the first step. How do we automatically check for architectural regressions? This can be done reliably only by automated tests. This is especially important if your target architecture is a Distributed Monolith. Without rigorous automated control, it can quickly regress to a Big Ball of Mud.&lt;/p&gt;

&lt;p&gt;Some examples of tools just for that are Archunit for Java and NetArchTest for C#. Well, now Elixir has a Clean Mixer.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;test/arch_test.exs&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="no"&gt;ExUnit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;capture_log:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;trace:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;MessagingServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Architecture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;ArchTest&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
 &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;ExUnit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Case&lt;/span&gt;

 &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="no"&gt;CleanMixer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Workspace&lt;/span&gt;

 &lt;span class="nv"&gt;@domain&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="s2"&gt;"im"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"im/business_chats"&lt;/span&gt;
 &lt;span class="p"&gt;]&lt;/span&gt;

 &lt;span class="nv"&gt;@core_infrastructure&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="s2"&gt;"xmpp"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"xep"&lt;/span&gt;
 &lt;span class="p"&gt;]&lt;/span&gt;

 &lt;span class="nv"&gt;@application_services&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="s2"&gt;"jabber/app_services"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"im/app_services"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"data_io/app_services"&lt;/span&gt;
 &lt;span class="p"&gt;]&lt;/span&gt;

 &lt;span class="nv"&gt;@adapters&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="s2"&gt;"chatbot_platform_api"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"app_server"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;"network"&lt;/span&gt;
 &lt;span class="p"&gt;]&lt;/span&gt;

 &lt;span class="nv"&gt;@interface_components&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="s2"&gt;"data_io/interface"&lt;/span&gt;
 &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;setup_all&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
   &lt;span class="n"&gt;workspace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;CleanMixer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;include_hex:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Workspace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;timeout_ms:&lt;/span&gt; &lt;span class="mi"&gt;30_000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;ws:&lt;/span&gt; &lt;span class="n"&gt;workspace&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;dependencies_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
   &lt;span class="no"&gt;Workspace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependencies_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Workspace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reject_hex_packs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;&amp;amp;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;

 &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;dependency?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;source_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
   &lt;span class="no"&gt;Workspace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dependency?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;source_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;

 &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
   &lt;span class="no"&gt;Workspace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;workspace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;

 &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;format_cycle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cycle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
   &lt;span class="n"&gt;cycle&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;&amp;amp;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" -&amp;gt; "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The rules are described in the form of regular ExUnit tests. I split the components in the system into several layers, which are similar to the layers in the Clean Architecture. In each subsequent layer, stability decreases, and instability increases. The most stable layer is the Core Domain, then goes the Core Infrastructure - components that implement protocols. The next level is Application Services. And then the Adapters.&lt;/p&gt;

&lt;p&gt;There are two exceptional cases. These are the interface components, which we do not want to depend on anything. And protocol components, which should be as stable as possible since we want them to have a minimum of outgoing dependencies for easy subsequent reuse.&lt;/p&gt;

&lt;p&gt;In the first test, we don't want our system to have circular dependencies between components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="s2"&gt;"there are shall be no circular dependencies between components"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;ws:&lt;/span&gt; &lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
   &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="no"&gt;Workspace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;component_cycles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;format_cycle&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the next test, we don't want Core Domain components to depend on application services.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt; &lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="n"&gt;comp&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nv"&gt;@domain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app_service&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nv"&gt;@application_services&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
   &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="s2"&gt;"domain component &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;comp&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; shall not depend on application service &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;app_service&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;ws:&lt;/span&gt; &lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
     &lt;span class="n"&gt;refute&lt;/span&gt; &lt;span class="n"&gt;dependency?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kn"&gt;unquote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comp&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kn"&gt;unquote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app_service&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="k"&gt;end&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We don't want our Domain Components to depend on Adapters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; for comp &amp;lt;- @domain, adapter &amp;lt;- @adapters do
   test "domain component #{comp} shall not depend on adapter #{adapter}", %{ws: ws} do
     refute dependency?(ws, unquote(comp), unquote(adapter))
   end
 end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We check that the Core Infrastructure is independent of app_services:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt; &lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="n"&gt;comp&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nv"&gt;@core_infrastructure&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app_service&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nv"&gt;@application_services&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
   &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="s2"&gt;"core infrastructure component &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;comp&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; shall not depend on application service &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;app_service&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;ws:&lt;/span&gt; &lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
     &lt;span class="n"&gt;refute&lt;/span&gt; &lt;span class="n"&gt;dependency?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kn"&gt;unquote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comp&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kn"&gt;unquote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app_service&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="k"&gt;end&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We check that the utils component is independent of any other component. Naturally, we want it to be stable and reusable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="s2"&gt;"`utils` shall have no dependencies"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;ws:&lt;/span&gt; &lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;dependencies_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"utils"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All in all, we check that each next more unstable level depends only on more stable components. In fact, we simply check for The Stable Dependencies Principle.&lt;/p&gt;

&lt;p&gt;We can run these tests with the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; mix run &lt;span class="nt"&gt;--no-start&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt;/arch_test.exs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running these tests on each commit in CI gives me a great deal of assurance that our architecture remains what I expect.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#to-summarize"&gt;
  &lt;/a&gt;
  To summarize:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Prohibit cyclical dependency graphs&lt;/li&gt;
&lt;li&gt;Separate domain and infrastructure. The domain should be at the center of your application, infrastructure at the edges.&lt;/li&gt;
&lt;li&gt;Explicitly define interfaces and control dependency directions using Dependency Inversion, but prefer to depend on interfaces, not implementations.&lt;/li&gt;
&lt;li&gt;Visualize the current state and automate checks for architectural regressions&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#about-the-author"&gt;
  &lt;/a&gt;
  About the author
&lt;/h4&gt;

&lt;p&gt;I am Miroslav Malkin, Erlang/Elixir expert at &lt;a href="https://funbox.ru/"&gt;FunBox&lt;/a&gt;. I am also co-founder of &lt;a href="https://www.cogito-labs.com/"&gt;CogitoΣ&lt;/a&gt;, where we investigate code and process quality and measure their impact on product success.&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>erlang</category>
      <category>architecture</category>
      <category>codequality</category>
    </item>
    <item>
      <title>How To Fetch Image From Database In Php And Display In Table?</title>
      <author>https://www.pakainfo.com/</author>
      <pubDate>Tue, 10 Aug 2021 13:29:31 +0000</pubDate>
      <link>https://dev.to/dsp1992/how-to-fetch-image-from-database-in-php-and-display-in-table-22fi</link>
      <guid>https://dev.to/dsp1992/how-to-fetch-image-from-database-in-php-and-display-in-table-22fi</guid>
      <description>&lt;p&gt;How to fetch image from Database in PHP and Display in Table : It is simple to fetch image from database in PHP and display in table format with example and code.&lt;/p&gt;

&lt;p&gt;Fetching image from the database using SELECT query and mysqli_fetch_array() function in the table format.&lt;/p&gt;

&lt;h2&gt;How To Fetch Image From Database In Php And Display In Table?&lt;/h2&gt;

&lt;p&gt;In this article, you going to see how to fetch image from database in php including other related topics of fetching of image.&lt;/p&gt;

&lt;p&gt;Fetching image from database in PHP and display in table is similar to fetch any data from database and show in HTML Table.&lt;/p&gt;

&lt;p&gt;We generally store image at server and its path on database table.&lt;/p&gt;

&lt;p&gt;We are considering an example of products to demonstrate the purpose.&lt;/p&gt;

&lt;p&gt;Steps to fetch images and data from database is as below&lt;/p&gt;

&lt;p&gt;Create MySql Database table&lt;br&gt;
Upload image and store data in database table using PHP&lt;br&gt;
Fetch image and data from database using PHP&lt;/p&gt;

&lt;p&gt;More Details: &lt;a href="https://www.pakainfo.com/how-to-fetch-image-from-database-in-php-and-display-in-table/"&gt;How To Fetch Image From Database In Php And Display In Table?&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Step 1: Connection with Database&lt;/h3&gt;

&lt;p&gt;For this we have create a table product in ebhor database. The dbConn.php file is used to connect with the database.&lt;/p&gt;

&lt;p&gt;Make dbConn.php file as a common file, for reusability which always connected with MySQL database. Include only the dbConn.php file name on that file where you want to perform a task with the database. You don't need to make a connection every time in every file.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;dbConn.php&lt;/b&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;?php

$db = mysqli_connect("localhost","root","","testDB");  // database connection

if(!$db)
{
    die("Connection failed: " . mysqli_connect_error());
}

?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Step 2: Fetching image from Database Code&lt;/h3&gt;

&lt;p&gt;Here, we are fetching an image from the database into the table format.&lt;/p&gt;

&lt;p&gt;The index.php file is using for displaying images.&lt;/p&gt;

&lt;p&gt;In this file, we are using a table for displaying records and images in the proper format.&lt;/p&gt;

&lt;p&gt;We are fetching records using mysqli_fetch_array() function from the database. You can see the above example there are fetched data with the images.&lt;/p&gt;

&lt;p&gt;In this example, you can see the data in the table format for proper view. And we have also set the width and height of those images. You can also define image size as you want.&lt;/p&gt;

&lt;p&gt;After completing all, close the database connection.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;index.php&lt;/b&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Fetch image from database in PHP&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;h2&amp;gt;All Records&amp;lt;/h2&amp;gt;

&amp;lt;table border="2"&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;Sr.No.&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;Name&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;Images&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;

&amp;lt;?php

include "dbConn.php"; // Using database connection file here

$records = mysqli_query($db,"select * from tbltest"); // fetch data from database

while($data = mysqli_fetch_array($records))
{
?&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;?php echo $data['id']; ?&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;?php echo $data['fname']; ?&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;img src="&amp;lt;?php echo $data['images']; ?&amp;gt;" width="100" height="100"&amp;gt;&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt; 
&amp;lt;?php
}
?&amp;gt;

&amp;lt;/table&amp;gt;

&amp;lt;?php mysqli_close($db);  // close connection ?&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More Details: &lt;a href="https://www.pakainfo.com/how-to-fetch-image-from-database-in-php-and-display-in-table/"&gt;How To Fetch Image From Database In Php And Display In Table?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Conclusion:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Finally, we done with all discussion regarding how to fetch image from database in php.&lt;/p&gt;

&lt;p&gt;I hope you liked my this article. If you have any queries or any question regarding this, Feel free to comment on Me.&lt;/p&gt;

</description>
      <category>php</category>
    </item>
    <item>
      <title>How To Automate App Releases using Fastlane and SemVer for Hybrid Applications</title>
      <author>Jeiman Jeya</author>
      <pubDate>Tue, 10 Aug 2021 13:22:23 +0000</pubDate>
      <link>https://dev.to/jeiman/how-to-automate-app-releases-using-fastlane-and-semver-for-hybrid-applications-24m0</link>
      <guid>https://dev.to/jeiman/how-to-automate-app-releases-using-fastlane-and-semver-for-hybrid-applications-24m0</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sWrwbzO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q875yqvd5hutjcw5ws6b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sWrwbzO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q875yqvd5hutjcw5ws6b.png" alt="Placeholder image for article"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This tool/implementation is useful for when you have both iOS and Android binary applications residing within the same repository (usually a &lt;strong&gt;React Native application&lt;/strong&gt;) or hybrid app development tools which produce iOS and Android apps. However, it can be customisable to your needs with a little re-configuration.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#the-story"&gt;
  &lt;/a&gt;
  The Story
&lt;/h1&gt;

&lt;p&gt;Imagine if we could automate the entire app versioning process for our mobile applications by just typing in whether you want to bump it by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Major&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minor&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;or &lt;strong&gt;Patch&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Imagine if you don’t have to worry about the app versioning process of knowing what is already in production and what version we need to bump it to?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lo and behold, the App Release Management (ARM) tool.&lt;/strong&gt; 🎉&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Semantic versioning MAJOR, MINOR, and PATCH is the de facto standard you use to version your applications. Please refer to this &lt;a href="https://semver.org/"&gt;link&lt;/a&gt; to find out more about SemVer standards.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#fancy-word-but-what-does-it-actually-do"&gt;
  &lt;/a&gt;
  Fancy word, but what does it actually do?
&lt;/h1&gt;

&lt;p&gt;It pretty much does what is mentioned above. The process is as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It will fetch the latest versions from TestFlight and Google Play Console respectively.&lt;/li&gt;
&lt;li&gt;It will show you a summary of what the versions are.&lt;/li&gt;
&lt;li&gt;If both Android and iOS match, the tool will select either one of them to use as the base of bumping the version.&lt;/li&gt;
&lt;li&gt;The tool will prompt you whether you would like to bump it based on major, minor, or patch&lt;/li&gt;
&lt;li&gt;Based on the input, the tool will run a SemVer operation in calculating the next iteration in the version and display the results for you.&lt;/li&gt;
&lt;li&gt;If you’re happy with the result, you may press yes to proceed.&lt;/li&gt;
&lt;li&gt;It will update the following files for you:

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;android/app/build.gradle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ios/ProjectName.xcodeproj/project.pbxproj&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Operation completed!&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#it-all-looks-fancy-but-why-this-approach"&gt;
  &lt;/a&gt;
  It all looks fancy, but why this approach?
&lt;/h1&gt;

&lt;p&gt;Well, imagine if you are a product owner or a new engineer who is new to the application code and is required to manage the App Releases. This tool will aid them in completing their task with ease, without worrying about configuring the wrong version code bump by accident.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ok-cool-how-do-i-set-it-up"&gt;
  &lt;/a&gt;
  Ok cool, how do I set it up?
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Please refer to the &lt;a href="https://github.com/jeiman/devops-fun/tree/main/development/app-release-management-tool"&gt;documentation README&lt;/a&gt; file for detailed instructions on how to set up the tool.&lt;/li&gt;
&lt;li&gt;Clone the &lt;a href="https://github.com/jeiman/devops-fun"&gt;devops-fun&lt;/a&gt; repository.&lt;/li&gt;
&lt;li&gt;Once completed, navigate to &lt;strong&gt;development &amp;gt; app-release-management-tool&lt;/strong&gt; folder.&lt;/li&gt;
&lt;li&gt;Ensure that the &lt;code&gt;.env&lt;/code&gt; file is present before proceeding any further. Refer to the README file for more information.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;fastlane&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;Choose Option 1.&lt;/li&gt;
&lt;li&gt;The rest are pretty self-explanatory thereafter.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#what-if-i-want-to-manually-bump-the-version-via-a-tool"&gt;
  &lt;/a&gt;
  What if I want to manually bump the version via a tool?
&lt;/h1&gt;

&lt;p&gt;You may run the &lt;code&gt;bump-version.sh&lt;/code&gt; and pass in a version code as an argument: &lt;code&gt;./development/app-release-management-tool/bump-version.sh 3.2.0&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-does-it-look-like"&gt;
  &lt;/a&gt;
  What does it look like?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pJUYffuX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56d2r8lq56xqfaxan4gd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pJUYffuX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56d2r8lq56xqfaxan4gd.png" alt="CLI tool"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Based on the image above, the following actions occur:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It will do a check against your iOS TestFlight build number and Google App Version and identify if the versions match (&lt;em&gt;Please refer to the &lt;a href="https://github.com/jeiman/devops-fun/blob/main/development/app-release-management-tool/README.md"&gt;README.md&lt;/a&gt; file on how to set up a service connection to the respective stores in order to retrieve the app details programmatically&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;If they do, it will display your current version in the App stores and will ask you for input, whether you want to bump the &lt;strong&gt;major&lt;/strong&gt;, &lt;strong&gt;minor,&lt;/strong&gt; or &lt;strong&gt;patch&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Based on your input, it will use the &lt;code&gt;semver.sh&lt;/code&gt; script to perform the necessary version bump according to the Semantic Versioning standards.&lt;/li&gt;
&lt;li&gt;If they don't match up, you'll be defaulted to using the &lt;code&gt;bump-version.sh&lt;/code&gt; which requires manual input of your SemVer for your application - ie &lt;code&gt;./bump-version.sh 2.2.0&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope this article has proven beneficial and useful to your release management process. If you have any inquiries, please reach out to me. Happy automating your release process! Do leave a comment or recommendations on improving the tool.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jeiman/devops-fun"&gt;https://github.com/jeiman/devops-fun&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jeiman/devops-fun/tree/main/development"&gt;https://github.com/jeiman/devops-fun/tree/main/development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://semver.org/"&gt;https://semver.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jontejada.com/blog/assets/semver02.png"&gt;https://jontejada.com/blog/assets/semver02.png&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fsaintjacques/semver-tool"&gt;https://github.com/fsaintjacques/semver-tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>fastlane</category>
      <category>reactnative</category>
      <category>automation</category>
      <category>hybridapps</category>
    </item>
  </channel>
</rss>
