<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Making a rain animation with WebGL shaders in Three.js.</title>
      <author>NordicBeaver</author>
      <pubDate>Tue, 14 Dec 2021 13:46:39 +0000</pubDate>
      <link>https://dev.to/nordicbeaver/making-rain-animation-with-webgl-shaders-in-threejs-4ic5</link>
      <guid>https://dev.to/nordicbeaver/making-rain-animation-with-webgl-shaders-in-threejs-4ic5</guid>
      <description>&lt;p&gt;I made a small shader that resembles rain on a window. You can try it &lt;a href="https://rain-shader.nordicbeaver.io/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check out the full code here:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/NordicBeaver"&gt;
        NordicBeaver
      &lt;/a&gt; / &lt;a href="https://github.com/NordicBeaver/rain-shader"&gt;
        rain-shader
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;The most interesting part is the fragment shader, where the magic happens. I tried to add some comments, so it's easier to read.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight glsl"&gt;&lt;code&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;uvInterpolator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;uniform&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;u_time&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;uniform&lt;/span&gt; &lt;span class="kt"&gt;sampler2D&lt;/span&gt; &lt;span class="n"&gt;u_texture&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Generate a random float from a single input and seed.&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;Random11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputValue&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;345&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;456&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Generate a random float from a 2d input and seed.&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;Random21&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;456&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Generate drops as distortions, that can be applied to UV coordinates&lt;/span&gt;
&lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="nf"&gt;Drops&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;uv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Randmply move everything&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;shiftY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Random11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;uv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;shiftY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Split UV spac into cells. Each cell will contain a drop.&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;cellsResolution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;uv&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;cellsResolution&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Move each row randomly.&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;rowIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;shiftX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Random11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rowIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;uv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;shiftX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;cellIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;cellUv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;cellCenter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;distanceFromCenter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cellUv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cellCenter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// We don't want to show every drop. So randomly remove some of them.&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;isDropShown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Random21&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cellIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;14244&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;324&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="c1"&gt;// Decrease each drop intensity with time. Then make it appear again.&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;dropIntensity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;fract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u_time&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Random21&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cellIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;32132&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;432&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;dropIntensity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dropIntensity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dropIntensity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dropIntensity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dropIntensity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dropIntensity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;dropIntensity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dropIntensity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// We only need results from inside a specefec radius of a drop.&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;isInsideDrop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;distanceFromCenter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;vecToCenter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cellCenter&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;cellUv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Drop value is a vector to the center that increases with distance form it.&lt;/span&gt;
  &lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;dropValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vecToCenter&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;distanceFromCenter&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;distanceFromCenter&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;drop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dropValue&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;isInsideDrop&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;isDropShown&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dropIntensity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;uv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uvInterpolator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Run the Drop function 10 times to create seemingly random pattern.&lt;/span&gt;
  &lt;span class="kt"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;drops&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;drops&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;Drops&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42424&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;12313&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;432&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Distort UV.&lt;/span&gt;
  &lt;span class="n"&gt;uv&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;drops&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Sample the texture after distorting the UV space.&lt;/span&gt;
  &lt;span class="kt"&gt;vec4&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;texture2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u_texture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nb"&gt;gl_FragColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, all I do is generate drops at random positions. For every pixel around the drop I then calculate how much I need to distort the background. And then I apply the distortion to the UV space and sample the texture with the updated coordinates.&lt;/p&gt;

&lt;p&gt;It's way easier to explain visually, so I made a video of the whole process of making this.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Rl3clbrsI40"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>threejs</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Journey of a dyslexic programmer ? What is it like ?</title>
      <author>aravindasiva</author>
      <pubDate>Tue, 14 Dec 2021 13:13:26 +0000</pubDate>
      <link>https://dev.to/aravindasiva/journey-of-a-dyslexic-programmer-what-is-it-like--2bgf</link>
      <guid>https://dev.to/aravindasiva/journey-of-a-dyslexic-programmer-what-is-it-like--2bgf</guid>
      <description>&lt;p&gt;Ever since I was a little kid I always knew that there was an issue with my reading, writing and spelling, but never knew what it was. I always thought I was one of those different kids.&lt;/p&gt;

&lt;p&gt;As I grew up in India, schools didn't really have anything special for dsylexic kids. Well, it wasn't really the school's mistake since most of the folks in the community had no idea what is Learning Disorder or any type of disorder at all.&lt;/p&gt;

&lt;p&gt;I was called names "trouble maker", "he is trouble", "Lazy", etc., (names are translated to English XD). As a kid it didn't bother me, rather I thought it was cool for some reason.&lt;/p&gt;

&lt;p&gt;During my primary and High school years, there was at least 2 Parent-Teacher meetings where your parent and your teacher discuss about you and your Half-yearly performance with a report card.&lt;/p&gt;

&lt;p&gt;Every year at least one of the teacher says the same phrase to my parents:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;"I know he is very smart. But seems like he doesn't want to write and show that on paper."&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r9lvRy2X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xi9v0skdey9iqdttdxqe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r9lvRy2X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xi9v0skdey9iqdttdxqe.jpg" alt="School to dyslexic kids" width="500" height="562"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By time hearing this phrase from teachers started to annoy me as I wasn't doing that on purpose. Started to wonder and ask myself &lt;strong&gt;&lt;em&gt;"Why me?"&lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;This phrase started when I was in pre-school where I didn't want to recite a poem or a Rhyme (which was subject called "Recitation"), I was standing in front of the whole class and din't spill a word out of my mouth. So, the teacher called my mum and said "He did not utter a single word from his mouth, regardless I am going to pass him because I know he knows the poem/Rhyme". I have no recollection of this incident whatsoever since I was 5 years old then. But Hey, Thanks to my mum.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YLX6BxvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ugkwm1e3ut3275s551u0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YLX6BxvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ugkwm1e3ut3275s551u0.png" alt="Time to read out loud" width="500" height="484"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are from an Indian middle class family, You already know that excelling in academics is important for your family, family friends, relatives, your father's friends, your dog, your dog's friends, your dead fish, you get the point XD. &lt;/p&gt;

&lt;p&gt;So, as a kid, you are under constant pressure to get good marks. So you get into a good school, good university, good job, good life, etc., the race never ends.  &lt;/p&gt;

&lt;p&gt;I struggled with letters, numbers, left and right. I still find myself using fingers to count things, confusing left and right. The normal education system was not quite enough for me. I started to use my own ways to cope with academics and I found myself doing a little bit better in exams even though it did not reflect on my report card, I found it easier than before since I adapted my own strategies to learn and write. &lt;/p&gt;

&lt;p&gt;Since everything is an image in my head I was drawn towards solving problems, puzzles and arts and patterns. On the other hand, I cannot have an image for numbers or words in my head which didn't make sense. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For example: You say &lt;strong&gt;"John Doe has an apple in his hand"&lt;/strong&gt;,&lt;br&gt;
here I can picture John doe, &lt;em&gt;if I already knew him&lt;/em&gt;, I can picture an apple, and I can picture a human hand and when you put everything as a picture you have a dashing John doe with a white shirt and blue jean with a red apple in his a hand. Can you see it? &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I used to play loads of games everyday in my teenage, and you know how parents fell about their son playing violent games filled with killing, more killing, sex. I wouldn't be surprised if they thought I am spawn of some underworld demon. So my parents were against extensive gaming. So, I went out 9 am in the morning to play games in game center (remember those places, How time flies) and come back home 9 pm (I had my meals in middle, stop judging me now XD). And yes, I lied about where I am going.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Now you know mum and dad, if you are reading this. Sorry 🤔?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most of the games got this classic chasing scene where you chase the bad guy with a NPC or getting chased by the bad guy, and the NPC sitting with you in car or a horse starts giving you directions like 'take right now', 'take hard left'. ahhhhh...and I am so confident I take the wrong right and yeah, I had to replay the whole freaking mission because I took a right instead of left, I have tried to kill the NPC character, but lucky him, he can't take damage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mUSoREYx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxff8blw85gee5b9ftfv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mUSoREYx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxff8blw85gee5b9ftfv.png" alt="you said left, Okay right" width="743" height="801"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"I am so good at eating, So I must be a good chef"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yeah, That's my thought process and decided to make games with game engines. Well in my defense I made some pretty decent games. &lt;/p&gt;

&lt;p&gt;Also, learned a valuable lesson to stick with just what I am good at. &lt;/p&gt;

&lt;p&gt;So, I decided to join computer science and explore the world of computers and internet. I had a huge rush when I created my first "Hello world" in my university Computer science lab. I just wanted to know more about how does computer does these things. I had so many questions. I must thank those handful of teachers who believed in me even though I was lot of trouble 😇. &lt;/p&gt;

&lt;p&gt;At the same time, it was difficult for me to type code with basic text editor like notepad++ or something similar where I didn't have syntax highlighting, auto complete, peek definitions, type checking and all those goodies modern IDE provides today. Or at least I didn't know. &lt;/p&gt;

&lt;p&gt;Even with modern IDE available today with all the plugin, I was able to develop something good, But I found myself easily get lost in it. So I started  creating a mind map for my projects (mind map in my actual mind) So, every time I see a block of code or a function I can visualize which box it belongs to and how it is connected with other boxes. This greatly helped me with keeping track and remembering them. I also stared writing notes and drawings of what's in my head So, I can go back and look at it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---dr9qqOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/3cGk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---dr9qqOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/3cGk.gif" alt="MindMap?" width="500" height="215"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today I do Web development, API, and even 3d model integration. How time flies!!. I have decided to try and make mistakes. adapt from my mistakes and make new ones. Dyslexia doesn't mean you cannot code. I think dyslexia is rather helpful to visualize your project which makes it better. Coding just becomes a design in your head, In fact Dyslexia was helping it.&lt;/p&gt;

&lt;p&gt;Nowadays Modern code editors lets you bring your own font, Code editor theme matters too, Play with it until you find the right one for you. &lt;/p&gt;

&lt;p&gt;Use plugins to visualize your indentation, I use &lt;code&gt;indent-rainbow&lt;/code&gt; in VSCode&lt;/p&gt;

&lt;p&gt;Getting lost with &lt;strong&gt;brackets&lt;/strong&gt; ? Use &lt;code&gt;Bracket pair colorizer&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;With or without dyslexia, or whatever level you are on, Take a step and make mistakes. Dyslexic? Well, it will help you a lot. &lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
If you have made it to the end of the post I took too long to write, Congratz 🎉🎉 &lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Never in my life thought I would write such a long post. Kindly avoid my mistakes in this post 😅 Can't read such a big post again 😅 But, Hey! Well done to you 🥳&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;This is my first long blog post and thank you for your time reading it ✌🏼&lt;br&gt;
Your comments are very welcome here. &lt;/p&gt;

</description>
      <category>career</category>
      <category>dyslexia</category>
      <category>productivity</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Best Coding Platforms to learn and practice Code! </title>
      <author>Avinash Kumar</author>
      <pubDate>Tue, 14 Dec 2021 13:12:54 +0000</pubDate>
      <link>https://dev.to/darkxenium/best-coding-platforms-to-learn-and-practice-code-17h1</link>
      <guid>https://dev.to/darkxenium/best-coding-platforms-to-learn-and-practice-code-17h1</guid>
      <description>&lt;p&gt;A great way to improve your skills when learning to code is by solving coding challenges,but there are many platforms and thus it becomes hard to choose where to invest time and but worry not here I am to help you with choosing the platform which is right for you. When I started out I was really confused but as time flew &lt;em&gt;sad noises&lt;/em&gt;, as you know coding takes a huge chuck of time in your day and I discovered many great platforms. I'll list my top favourite ones down below :-&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-hackerrank"&gt;
  &lt;/a&gt;
  1. HackerRank
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jWkUiPOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hr6lmr7462qycpqt2zsv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jWkUiPOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hr6lmr7462qycpqt2zsv.png" alt="hackerrank logo" width="297" height="170"&gt;&lt;/a&gt;&lt;br&gt;
It is a great platform where you can choose the language you want to improve upon. The Difficulty curve is greatly maintained. Also as you progress you get badges in the form of stars from 1 star covered in bronze to shining gold when you reach 5 star, which really motivates to grow and get better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-codechef"&gt;
  &lt;/a&gt;
  2. CodeChef
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kIm9Gdo6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2219qnatkgoljj0mwxeu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kIm9Gdo6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2219qnatkgoljj0mwxeu.jpg" alt="CodeChef logo" width="362" height="139"&gt;&lt;/a&gt;&lt;br&gt;
Well once you complete your basics you can work your way upto Competetive Programming(CP) and here at codechef you get Long challenges which is really unique compared to other CP websites which is really beneficial to a beginner who can get to know about the question while practicing and learning.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-codeforces"&gt;
  &lt;/a&gt;
  3. CodeForces
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fiITPnTX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/llld1h2ubn4aryp36rpi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fiITPnTX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/llld1h2ubn4aryp36rpi.jpg" alt="CodeForces logo" width="347" height="145"&gt;&lt;/a&gt;&lt;br&gt;
 You can further improve upon CP on codeforces as the questions here are really tough and you need to apply the various DS and Algorithms to solve these questions.You can go from a Noobie to a full fledged grandmaster with many good prizes if you manage to be in the top 10.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;I've also started to use LeetCode. It has really great questions even though I haven't made much progress in it. None the less all the best to the future Coders out there, I hope these platforms help you unlock your potential and reach great heights.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to create a smart contract to whitelist users</title>
      <author>Emanuel Ferreira</author>
      <pubDate>Tue, 14 Dec 2021 13:10:30 +0000</pubDate>
      <link>https://dev.to/emanuelferreira/how-to-create-a-smart-contract-to-whitelist-users-57ki</link>
      <guid>https://dev.to/emanuelferreira/how-to-create-a-smart-contract-to-whitelist-users-57ki</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;In this article, we going to create a smart contract to whitelist users, that it will be possible to add an address, check a user, and verify each function if the user has been whitelisted.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Code Editor (Remix, VSCode)&lt;/li&gt;
&lt;li&gt;Basic Solidity Knowledge&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#remix-editor"&gt;
  &lt;/a&gt;
  Remix Editor
&lt;/h2&gt;

&lt;p&gt;To create the smart contract we are going to use the &lt;a href="https://remix.ethereum.org/"&gt;Remix editor&lt;/a&gt; that will help us to create our smart contract.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ownable-contract"&gt;
  &lt;/a&gt;
  Ownable contract
&lt;/h2&gt;

&lt;p&gt;First, we'll start with the basic structure of a contract, we are going to create a contract Ownable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-the-contract-owner"&gt;
  &lt;/a&gt;
  Setting the contract owner
&lt;/h3&gt;

&lt;p&gt;To whitelist the users we need to have a contract owner that will have permission to add users to the whitelist&lt;/p&gt;

&lt;p&gt;Now create a variable called &lt;code&gt;owner&lt;/code&gt; and add the deployer address as the owner of the contract&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// SPDX-License-Identifier: GPL-3.0&lt;/span&gt;
&lt;span class="nx"&gt;pragma&lt;/span&gt; &lt;span class="nx"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;contract&lt;/span&gt; &lt;span class="nx"&gt;Whitelist&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// variable that will contain the address of the contract deployer&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// setting the owner the contract deployer&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-the-modifier"&gt;
  &lt;/a&gt;
  Create the Modifier
&lt;/h3&gt;

&lt;p&gt;The modifier will help us when we need to restrict a function to only the owner of the contract to use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;modifier&lt;/span&gt; &lt;span class="nx"&gt;onlyOwner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ownable: caller is not the owner&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when you try to call a function that contains the onlyOwner modifier just will work if you are the contract owner&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-list-of-addresses"&gt;
  &lt;/a&gt;
  Create a list of addresses
&lt;/h2&gt;

&lt;p&gt;To store our addresses, we need to create a mapping that will receive the address of the user and return if he is whitelisted or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;whitelistedAddresses&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can store the addresses in the whitelistedAddresses mapping, Let's do it in the next steps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-an-address-to-the-whitelist"&gt;
  &lt;/a&gt;
  Adding an address to the whitelist
&lt;/h3&gt;

&lt;p&gt;Now we'll manipulate the whitelistedAddresses mapping to say if the address is whitelisted or not, so when we call the addUser function we'll change the whitelisted status from the address to true.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="nx"&gt;_addressToWhitelist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;onlyOwner&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;whitelistedAddresses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_addressToWhitelist&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see that we have the onlyOwner modifier in our function, so just the contract owner can call this function.&lt;/p&gt;

&lt;p&gt;We have the parameter &lt;code&gt;_addressToWhitelist&lt;/code&gt; that is the address of a user that we want to whitelist.&lt;/p&gt;

&lt;p&gt;So in this line, we are changing the status of the address to true.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;true&lt;/code&gt; = whitelisted&lt;br&gt;
&lt;code&gt;false&lt;/code&gt; = not whitelisted&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;whitelistedAddresses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_addressToWhitelist&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#verifying-if-the-user-has-been-whitelisted"&gt;
  &lt;/a&gt;
  Verifying if the user has been whitelisted
&lt;/h3&gt;

&lt;p&gt;Now create a function that will say to you if the user has been whitelisted (you don't need a function, you can access the list in another function or create a modifier to verify).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;verifyUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="nx"&gt;_whitelistedAddress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="nx"&gt;returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;bool&lt;/span&gt; &lt;span class="nx"&gt;userIsWhitelisted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;whitelistedAddresses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_whitelistedAddress&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;userIsWhitelisted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So when you call this function it will return &lt;code&gt;false&lt;/code&gt; if the address has not whitelisted and &lt;code&gt;true&lt;/code&gt; if you added the user to the whitelist&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-modifier-to-whitelisted-users"&gt;
  &lt;/a&gt;
  Creating a modifier to whitelisted users
&lt;/h3&gt;

&lt;p&gt;If you want to allow only the whitelisted addresses to call a function you can create a modifier.&lt;/p&gt;

&lt;p&gt;So Let's create a modifier and a function to test example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;modifier&lt;/span&gt; &lt;span class="nx"&gt;isWhitelisted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="nx"&gt;_address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;whitelistedAddresses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_address&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You need to be whitelisted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;exampleFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="nx"&gt;isWhitelisted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then our modifier will verify in the whitelisted addresses if the user (&lt;code&gt;msg.sender&lt;/code&gt;) is whitelisted and still following with the function or break returning an error.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now your contract to add users to the whitelist is done, you can adapt it to our projects like NFT collections verifying if the address is whitelisted to mint the NFTs.&lt;/p&gt;

&lt;p&gt;Repository with the Project (Final code): &lt;a href="https://github.com/EmanuelCampos/whitelist_contract"&gt;https://github.com/EmanuelCampos/whitelist_contract&lt;/a&gt; &lt;br&gt;
Stars are appreciated &amp;lt;3&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/manelferreira_"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>solidity</category>
      <category>blockchain</category>
      <category>web3</category>
      <category>smartcontract</category>
    </item>
    <item>
      <title>Guide to make your first react package</title>
      <author>Rakesh Potnuru</author>
      <pubDate>Tue, 14 Dec 2021 13:05:53 +0000</pubDate>
      <link>https://dev.to/itsrakesh/guide-to-make-your-first-react-package-2gd0</link>
      <guid>https://dev.to/itsrakesh/guide-to-make-your-first-react-package-2gd0</guid>
      <description>&lt;p&gt;If you ever made an application with react, then you must have used lots of react packages. Ever thought about making your own package? or Have an idea but don't know how? Then this blog is for you. In this blog, I will explain how to make your own react package and submit it to the npm registry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/signup"&gt;npm&lt;/a&gt; account&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#step1-initialize-the-project"&gt;
  &lt;/a&gt;
  Step-1 - Initialize the project
&lt;/h3&gt;

&lt;p&gt;⚠️ - &lt;em&gt;Don't create project with &lt;code&gt;create-react-app&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a project -&amp;gt; &lt;code&gt;npm init&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt; as &lt;strong&gt;devDependencies&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;--save-dev&lt;/span&gt; react react-dom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now we have to make sure the user have these installed, so we 
can add them as peer dependencies in &lt;code&gt;package.json&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"peerDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^17.0.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react-dom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^17.0.2"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create a &lt;code&gt;src&lt;/code&gt; folder and add an &lt;code&gt;index.js&lt;/code&gt; file. Inside that &lt;code&gt;src&lt;/code&gt; folder create &lt;code&gt;components&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Our project folder structure so far-
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-pack/
├── src/
│   ├── components/
│   └── index.js
└── package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step2-setup-project"&gt;
  &lt;/a&gt;
  Step-2 - Setup project
&lt;/h3&gt;

&lt;p&gt;Now we need to see our components while we are building it, so how we can do it as we are not creating a regular react app? For this, we can use a tool called &lt;strong&gt;&lt;a href="https://storybook.js.org"&gt;Storybook&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vinxSzu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxep8n6gowcn0f8z6bk8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vinxSzu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxep8n6gowcn0f8z6bk8.png" alt="storybook" width="880" height="545"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To install the storybook, simply run this command -&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;⚠️ - &lt;em&gt;Make sure you have storybook CLI installed in order to run this command. To install storybook CLI, run&lt;/em&gt; &lt;code&gt;npm i @storybook/cli -g&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx sb init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now you can see in the &lt;code&gt;src/stories&lt;/code&gt; folder it created some example 
stories. You can delete them.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-pack/
├── src/
│   ├── components/
│   ├── stories/
│   └── index.js
└── package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step3-start-creating-stories"&gt;
  &lt;/a&gt;
  Step-3 - Start creating stories
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create a component in &lt;code&gt;src/components&lt;/code&gt; folder. For example, &lt;code&gt;Button.jsx&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Now create a story in &lt;code&gt;src/stories&lt;/code&gt; and name it as &lt;code&gt;&amp;lt;Component&amp;gt;.stories.js&lt;/code&gt;. For example, &lt;code&gt;Button.stories.js&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Import your component into &lt;code&gt;&amp;lt;Component&amp;gt;.stories.js&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-pack/
├── src/
│   ├── components/
│   │   └── Button.jsx
│   ├── stories/
│   │   └── Button.stories.jsx
│   └── index.js
└── package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In order to see our component we have add our component to 
stories. To do that, in your &lt;code&gt;&amp;lt;Component&amp;gt;.stories.js&lt;/code&gt;-
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;storiesOf&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@storybook/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../components/Button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// create story&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;storiesOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// add component to stories&lt;/span&gt;
&lt;span class="nx"&gt;stories&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So this is the syntax to create a story.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now start your storybook server-
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run storybook
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Go to &lt;a href="http://localhost:6006"&gt;localhost:6006&lt;/a&gt;, you can see your rendered component there.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uHQ6ClvX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptfj5lkbp1etn1hdt6wr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uHQ6ClvX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptfj5lkbp1etn1hdt6wr.png" alt="story example" width="880" height="547"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Like this, you can create a story for every component and see a preview with the storybook.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-4-prepare-to-build-project"&gt;
  &lt;/a&gt;
  Step 4 - Prepare to build project
&lt;/h3&gt;

&lt;p&gt;Normally we create a build for our project after developing with &lt;code&gt;npm run build&lt;/code&gt;. But now we can't do that. So to build the project we have to use another tool called &lt;strong&gt;&lt;a href="https://rollupjs.org"&gt;rollup.js&lt;/a&gt;&lt;/strong&gt; along with some plugins.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install rollup as a dev dependency
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;rollup &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We also need some plugins for rollup and to remove react modules in our package(Because users will already have them installed).
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install rollup @rollup/plugin-node-resolve rollup-plugin-babel rollup-plugin-peer-deps-external rollup-plugin-postcss rollup-plugin-terser @babel/preset-react --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create a file called &lt;code&gt;rollup.config.js&lt;/code&gt; at the root level of the project.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-pack/
├── src/
│   ├── components/
│   │   └── Button.jsx
│   ├── stories/
│   │   └── Button.stories.jsx
│   └── index.js
├── package.json
└── rollup.config.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;And you can add this configuration-
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;babel&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"rollup-plugin-babel"&lt;/span&gt;;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;resolve&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"@rollup/plugin-node-resolve"&lt;/span&gt;;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;external&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"rollup-plugin-peer-deps-external"&lt;/span&gt;;
&lt;span class="n"&gt;import&lt;/span&gt; { &lt;span class="n"&gt;terser&lt;/span&gt; } &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"rollup-plugin-terser"&lt;/span&gt;;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;postcss&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"rollup-plugin-postcss"&lt;/span&gt;;

&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt; [
  {
    &lt;span class="n"&gt;input&lt;/span&gt;: &lt;span class="s2"&gt;"./src/index.js"&lt;/span&gt;,
    &lt;span class="n"&gt;output&lt;/span&gt;: [
      {
        &lt;span class="n"&gt;file&lt;/span&gt;: &lt;span class="s2"&gt;"dist/index.js"&lt;/span&gt;,
        &lt;span class="n"&gt;format&lt;/span&gt;: &lt;span class="s2"&gt;"cjs"&lt;/span&gt;,
      },
      {
        &lt;span class="n"&gt;file&lt;/span&gt;: &lt;span class="s2"&gt;"dist/index.es.js"&lt;/span&gt;,
        &lt;span class="n"&gt;format&lt;/span&gt;: &lt;span class="s2"&gt;"es"&lt;/span&gt;,
        &lt;span class="n"&gt;exports&lt;/span&gt;: &lt;span class="s2"&gt;"named"&lt;/span&gt;,
      },
    ],
    &lt;span class="n"&gt;plugins&lt;/span&gt;: [
      &lt;span class="n"&gt;postcss&lt;/span&gt;({
        &lt;span class="n"&gt;plugins&lt;/span&gt;: [],
        &lt;span class="n"&gt;minimize&lt;/span&gt;: &lt;span class="n"&gt;true&lt;/span&gt;,
      }),
      &lt;span class="n"&gt;babel&lt;/span&gt;({
        &lt;span class="n"&gt;exclude&lt;/span&gt;: &lt;span class="s2"&gt;"node_modules/**"&lt;/span&gt;,
        &lt;span class="n"&gt;presets&lt;/span&gt;: [&lt;span class="s2"&gt;"@babel/preset-react"&lt;/span&gt;],
      }),
      &lt;span class="n"&gt;external&lt;/span&gt;(),
      &lt;span class="n"&gt;resolve&lt;/span&gt;(),
      &lt;span class="n"&gt;terser&lt;/span&gt;(),
    ],
  },
];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;input&lt;/code&gt; - starting pointing of your project&lt;br&gt;
 &lt;code&gt;output&lt;/code&gt; - where your want to put all the build files&lt;br&gt;
 &lt;code&gt;plugins&lt;/code&gt; - plugins to use&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now create a script to run rollup
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rollup -c"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;That's it, now you can see a folder called &lt;strong&gt;dist&lt;/strong&gt; which contains all our code bundled together.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-pack/
├── dist/
├── src/
│   ├── components/
│   │   └── Button.jsx
│   ├── stories/
│   │   └── Button.stories.jsx
│   └── index.js
├── package.json
└── rollup.config.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-5-publish-to-npm"&gt;
  &lt;/a&gt;
  Step 5 - Publish to npm
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create an account on [npm] if you don't have it already.&lt;/li&gt;
&lt;li&gt;Connect to npm with &lt;code&gt;npm login&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Choose a unique name for your package. (When publishing the 
name of the package will be the same as the name of your project which 
is in the &lt;code&gt;package.json&lt;/code&gt; file)&lt;/li&gt;
&lt;li&gt;You need to make two changes to your &lt;code&gt;package.json&lt;/code&gt; file

&lt;ul&gt;
&lt;li&gt;Change &lt;strong&gt;main&lt;/strong&gt; from "index.js" to "dist/index.js"&lt;/li&gt;
&lt;li&gt;Add &lt;strong&gt;module&lt;/strong&gt; field and set it to "dist/index.es.js"
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dist/index.js"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"module"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dist/index.es.js"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;After completing all things, run-
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm publish
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;That's it, you can check your package on the npm registry&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Congrats on publishing your first react package 🎉.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OuMcMR5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dzx4i7sy8qsi6i52qnc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OuMcMR5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dzx4i7sy8qsi6i52qnc.gif" alt="congrats gif" width="320" height="300"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Share your package in the comments below. I will try it 👀.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#tool-of-the-week"&gt;
  &lt;/a&gt;
  ⚒️Tool of the week⚒️
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/thedaviddias/Front-End-Checklist"&gt;Front-End-Checklist&lt;/a&gt;&lt;br&gt;
Are you a front-end developer? Then go through this checklist before deploying your application.&lt;/p&gt;




&lt;p&gt;Hope this helps you!&lt;br&gt;
Save for reference.&lt;br&gt;
Follow for more deliciousness 😀.&lt;br&gt;
You can connect with me on &lt;a href="https://twitter.com/rakesh_at_tweet"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/rakesh-potnuru-067a8b1b1"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>react</category>
      <category>npm</category>
      <category>beginners</category>
    </item>
    <item>
      <title>undefined</title>
      <author>Posandu </author>
      <pubDate>Tue, 14 Dec 2021 13:03:30 +0000</pubDate>
      <link>https://dev.to/posandu/test-post-3ka</link>
      <guid>https://dev.to/posandu/test-post-3ka</guid>
      <description>&lt;p&gt;testing api&lt;/p&gt;

</description>
      <category>testingap</category>
    </item>
    <item>
      <title>Write, test and execute automation scripts from browser's developer tools</title>
      <author>Gajanan Patil</author>
      <pubDate>Tue, 14 Dec 2021 13:00:53 +0000</pubDate>
      <link>https://dev.to/gajananpp/write-test-and-execute-automation-scripts-from-browsers-developer-tools-epo</link>
      <guid>https://dev.to/gajananpp/write-test-and-execute-automation-scripts-from-browsers-developer-tools-epo</guid>
      <description>&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/puppeteer-ide/ilehdekjacappgghkgmmlbhgbnlkgoid"&gt;Puppeteer IDE extension&lt;/a&gt; is a standalone extension which allows you to write and execute puppeteer scripts from developer tools. It is &lt;strong&gt;not&lt;/strong&gt; required to start browser with remote debugging or have nodejs or any other service installed for this extension to work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;This extension is published on chrome web store. &lt;a href="https://chrome.google.com/webstore/detail/puppeteer-ide/ilehdekjacappgghkgmmlbhgbnlkgoid"&gt;Click here&lt;/a&gt; to view extension on chrome web store.&lt;/p&gt;

&lt;p&gt;On adding extension to browser, it will add &lt;code&gt;Puppeteer IDE&lt;/code&gt; tab in developer tools. On switching to this tab, it will by default have one test script which you can execute right away.&lt;/p&gt;

&lt;p&gt;This extension can be used with other chromium based browsers like edge, brave etc.&lt;/p&gt;

&lt;p&gt;Example GIF :-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GExm7sy6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5hvznn4mife7qzmtiv5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GExm7sy6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5hvznn4mife7qzmtiv5.gif" alt="Example Extension GIF" width="640" height="362"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;You can access puppeteer's &lt;a href="https://pptr.dev/#?product=Puppeteer&amp;amp;version=v13.0.0&amp;amp;show=api-class-page"&gt;page&lt;/a&gt; instance variable directly for the tab in which developer tools is opened. On clicking &lt;code&gt;Execute&lt;/code&gt; button, the script will be executed on the inspected tab. &lt;/p&gt;

&lt;p&gt;The script will be auto saved as you are editing it.&lt;/p&gt;

&lt;p&gt;The editor will take the theme of developer tools. You can change developer tool's theme by &lt;a href="https://developer.chrome.com/docs/devtools/customize/dark-theme/"&gt;following this guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Light theme screenshot :-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R9wHeF3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77bp4ref2jrac9q85e2t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R9wHeF3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77bp4ref2jrac9q85e2t.png" alt="Light theme screenshot" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dark theme screenshot :-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3gFc6Y6k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9cbbk091at185sdmjvd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3gFc6Y6k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9cbbk091at185sdmjvd.png" alt="Dark theme screenshot" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#privacy"&gt;
  &lt;/a&gt;
  Privacy
&lt;/h2&gt;

&lt;p&gt;This extension is standalone, it won't make any external API calls in the background. You can inspect the network of extension/page and source code.&lt;/p&gt;

&lt;p&gt;For more information, checkout this project's &lt;a href="https://github.com/gajananpp/puppeteer-ide-extension"&gt;&lt;strong&gt;Github Repo&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/gajananpp"&gt;
        gajananpp
      &lt;/a&gt; / &lt;a href="https://github.com/gajananpp/puppeteer-ide-extension"&gt;
        puppeteer-ide-extension
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Develop, test and execute puppeteer scripts from browser's developer tools.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Puppeteer IDE Extension&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/gajananpp/puppeteer-ide-extension/actions/workflows/lint.yml/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3-PIp5VR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/gajananpp/puppeteer-ide-extension/actions/workflows/lint.yml/badge.svg" alt="lint"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/gajananpp/puppeteer-ide-extension/actions/workflows/build.yml/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rW4-pTsh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/gajananpp/puppeteer-ide-extension/actions/workflows/build.yml/badge.svg" alt="build"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Develop, test and execute puppeteer scripts from browser's developer tools.&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;This extension is published on chrome web store. &lt;a href="https://chrome.google.com/webstore/detail/puppeteer-ide/ilehdekjacappgghkgmmlbhgbnlkgoid" rel="nofollow"&gt;Click here&lt;/a&gt; to view extension on chrome web store.&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;This extension will add an extra tab named "Puppeteer IDE" in browser's developer tools from where you can write and execute puppeteer scripts.&lt;/p&gt;
&lt;p&gt;You can access &lt;a href="https://pptr.dev/#?product=Puppeteer&amp;amp;version=v13.0.0&amp;amp;show=api-class-page" rel="nofollow"&gt;page&lt;/a&gt; instance variable directly for the tab in which developer tools is opened.&lt;/p&gt;
&lt;p&gt;On clicking &lt;code&gt;Execute&lt;/code&gt; button, the script will be executed on the inspected tab.&lt;/p&gt;
&lt;p&gt;The script will be auto saved as you are editing it.&lt;/p&gt;
&lt;p&gt;The editor will take the theme of developer tools. &lt;a href="https://developer.chrome.com/docs/devtools/customize/dark-theme/" rel="nofollow"&gt;Here is a guide&lt;/a&gt; which shows how to customize developer tool's theme.&lt;/p&gt;
&lt;p&gt;Sample GIF :-&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/gajananpp/puppeteer-ide-extensionassets/pptr-ide-extension.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n9RnC3-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/gajananpp/puppeteer-ide-extensionassets/pptr-ide-extension.gif" alt="Sample GIF"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Screenshots&lt;/h2&gt;
&lt;p&gt;Dark theme :-
&lt;a rel="noopener noreferrer" href="https://github.com/gajananpp/puppeteer-ide-extensionassets/screenshots/screen-1.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RvzF_ii9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/gajananpp/puppeteer-ide-extensionassets/screenshots/screen-1.png" alt="Dark theme"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Light theme :-
&lt;a rel="noopener noreferrer" href="https://github.com/gajananpp/puppeteer-ide-extensionassets/screenshots/screen-2.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F7JMfj5y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/gajananpp/puppeteer-ide-extensionassets/screenshots/screen-2.png" alt="Light theme"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Build From Source&lt;/h2&gt;
&lt;p&gt;To build extension from source :-&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;git clone https://github.com/gajananpp/puppeteer-ide-extension

cd puppeteer-ide-extension

npm install

npm run dist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will output extension in…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/gajananpp/puppeteer-ide-extension"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Let's build a SaaS business together | part.1</title>
      <author>Toto</author>
      <pubDate>Tue, 14 Dec 2021 12:59:24 +0000</pubDate>
      <link>https://dev.to/toto/lets-build-a-saas-business-together-part1-395b</link>
      <guid>https://dev.to/toto/lets-build-a-saas-business-together-part1-395b</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hello dev community&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I'm gonna start a new project today and I will share with you every aspect of it and some work in progress by the way over the time.&lt;/p&gt;

&lt;p&gt;This is a serious project and at the end it's gonna be a real business with pricing deployed and online.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-project"&gt;
  &lt;/a&gt;
  The project
&lt;/h2&gt;

&lt;p&gt;Im gonna create a saas app to create books from start to finish and then export them for different platform like Gumroad, kindle or for print.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-deadline"&gt;
  &lt;/a&gt;
  The deadline
&lt;/h2&gt;

&lt;p&gt;I have one month to create the app&lt;/p&gt;

&lt;p&gt;Thanks to the people who gonna read and follow my work. it mean a lot for me.&lt;/p&gt;

</description>
      <category>saas</category>
      <category>career</category>
      <category>programming</category>
    </item>
    <item>
      <title>Why TODOs and Jira tickets are not working anymore</title>
      <author>Alex Omeyer</author>
      <pubDate>Tue, 14 Dec 2021 12:47:17 +0000</pubDate>
      <link>https://dev.to/alexomeyer/why-todos-and-jira-tickets-are-not-working-anymore-3mnh</link>
      <guid>https://dev.to/alexomeyer/why-todos-and-jira-tickets-are-not-working-anymore-3mnh</guid>
      <description>&lt;p&gt;&lt;strong&gt;👋 Hey dev.to community! I've launched a &lt;a href="https://stepsize.typeform.com/to/HdW9VEx4"&gt;quick survey&lt;/a&gt; to learn more about how modern Engineering teams communicate, and would really appreciate your input!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please, answer a few survey questions, share your opinion and get a chance to win an Amazon gift card worth $100💸&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now let's look at why TODOs and Jira tickets are not working for engineering teams anymore!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;A significant amount of a developer’s day is spent reading and understanding code written by other developers. You are essentially stepping into the mind of another developer. It can even be challenging to understand code you’ve written yourself after a few weeks of not working on it. Without the proper context, stepping into another developer’s mind becomes increasingly problematic. Just count the time you spend looking for documentation and asking teammates for context, not to mention the time spent in meetings.&lt;/p&gt;

&lt;p&gt;The time spent doing this is a problem in itself but it becomes much worse if the code contains issues that need to be fixed. According to a &lt;a href="https://thenewstack.io/how-much-time-do-developers-spend-actually-writing-code/"&gt;report by The New Stack&lt;/a&gt;, developers spend 32% of their time fixing the past, rather than building the future. Another blog post by Nnamdi even suggests a &lt;a href="https://whoisnnamdi.com/leaving-software-on-the-table/"&gt;number up to 42%&lt;/a&gt; if you combine managing technical debt with the time spent fixing “bad code” (debugging, refactoring, etc.). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-solutions-today-to-improve-codebase-communication"&gt;
  &lt;/a&gt;
  What are the solutions today to improve codebase communication?
&lt;/h2&gt;

&lt;p&gt;Most developers can relate to the following two solutions used by development teams globally: creating tickets or TODOs. But why do these solutions not work to improve codebase communication?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- Create a ticket or raise the issue with a team member.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Engineers are always strapped for time. So, unless the issue is critical, it will be recorded in a product or task management tool and placed in a backlog, never to be seen again. By recording the issue, developers think they have done part of the work and will address the issue in future sprints. However, recording the ticket is only 10% of the work. &lt;/p&gt;

&lt;p&gt;A golden rule that you can apply is based on the 2-minute rule. The 2-minute rule says that you should do a task if it takes less than 2 minutes of your time. For engineers, 2 minutes is not enough to solve an issue. Therefore, the golden rule here is the 15-minute rule. If you can absorb an issue's context and solve it within 15 minutes, you should do it. When an issue requires more time, it will interrupt the flow of the current issue you’re working on.&lt;/p&gt;

&lt;p&gt;Also, if you decide to record the ticket, you’ll have to step outside your IDE and into a product or task management tool. By recording this issue outside the codebase, you lose visibility over the issue. You will most likely forget about it until you reencounter it when working on another issue or feature. To retain this visibility, developers often opt for the second solution below to improve codebase communication.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NRILJgC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shv9kiohtt7wovwnsfg6.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NRILJgC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shv9kiohtt7wovwnsfg6.jpeg" alt="Image description" width="880" height="587"&gt;&lt;/a&gt; &lt;em&gt;Image credit: Jason Goodman on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create a TODO&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many developers still like to create TODOs to remind themselves or teammates about unfinished work or problems within the codebase. As explained above, a TODO ensures better visibility for issues that need to be resolved in contrast with a product or task management tool.&lt;/p&gt;

&lt;p&gt;However, TODOs lack fundamental properties to improve codebase communication. First of all, the engineering team’s often don’t have a standard for TODOs, let alone capturing context. A TODO is often a quick and short blurb of text and usually does not capture a lot of context about the issue. For that reason, TODOs are unusable for anyone apart from the creator.&lt;/p&gt;

&lt;p&gt;Another problem is that TODOs are seen as “personal”, especially with the introduction of tools like &lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;GitLens&lt;/a&gt; that show the owner of a snippet of code or the person who has last modified it. Therefore, team members will naturally ignore it as “not my problem.”&lt;/p&gt;

&lt;p&gt;And lastly, TODOs are flaky and expire quickly. If code is moved between files, the owner can disappear and make it even harder to track down what has happened or where the TODO originally came from. With older codebases, especially open source ones, you might notice that they have many floating TODOs nobody understands, knows where they came from, and whether they are still relevant? The code might have changed so much that a TODO has become obsolete. Just think about codebase refactoring. Do you want to be the person that tries to figure out if a TODO is still relevant? I guess not!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-how-do-you-improve-your-codebase-communication"&gt;
  &lt;/a&gt;
  So how do you improve your codebase communication?
&lt;/h2&gt;

&lt;p&gt;Engineers spend ⅔ of their time in the editor. If you want to influence how they communicate, do it where they’re already spending most of their time. Therefore, with the rise of extensions, it has become easier for developers to stay within their development environment and not have to switch between different tools. For instance, simple extensions like &lt;a href="https://marketplace.visualstudio.com/items?itemName=GrapeCity.gc-excelviewer"&gt;Excel Viewer&lt;/a&gt; help developers to visualise CSV files in their IDE to avoid switching between tools.&lt;/p&gt;

&lt;p&gt;For that reason, codebase issues need to be visible in the actual codebase for two reasons: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Engineers are reminded about them when they are browsing code, increasing the likelihood of bringing them up, adding details, and eventually addressing them.&lt;/li&gt;
&lt;li&gt;Engineers are constantly reminded about issues directly related to code that they are currently working on—potentially alerting them to issues that they can make worse.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The most essential characteristic of a tool that tracks issues within your IDE is the ability to record context—linking relevant code, adding a detailed description and code, and linking related issues. By providing this context, an engineer is more likely to address the issue when it affects the code they are working on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lUaJexnq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrer1bkym6v9qjzatpok.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUaJexnq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrer1bkym6v9qjzatpok.png" alt="Image description" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The best way to get started with creating code issues is to install free Stepsize extensions for &lt;a href="https://marketplace.visualstudio.com/items?itemName=Stepsize.stepsize"&gt;VSCode&lt;/a&gt; and &lt;a href="https://plugins.jetbrains.com/plugin/14515-issue-tracker-in-ide/"&gt;JetBrains&lt;/a&gt;. Stepsize will help your Engineering team:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create, view, and prioritise codebase issues directly from your editor&lt;/li&gt;
&lt;li&gt;Add issue to your sprint with Jira integration&lt;/li&gt;
&lt;li&gt;Collaborate with your team to improve your codebase health&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As stated by The New Stack, there’s a huge opportunity for organisations to find new ways to decrease the percentage of time engineers spend on fixing issues and increasing time spent on writing new code. One major way to decrease the percentage spent on fixing the past is by visualising issues within a codebase and recording context. &lt;/p&gt;

&lt;p&gt;Try to avoid floating TODOs at all costs or populating backlogs with undescriptive issues. Once you successfully implement this, your engineering team will have more time to build new features, improving their team’s output.&lt;/p&gt;

</description>
      <category>refactorit</category>
      <category>codequality</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>What is the Process to Develop Mobile Apps?</title>
      <author>Pankaj Das</author>
      <pubDate>Tue, 14 Dec 2021 12:46:54 +0000</pubDate>
      <link>https://dev.to/pankajdas0909/what-is-the-process-to-develop-mobile-apps-5fi1</link>
      <guid>https://dev.to/pankajdas0909/what-is-the-process-to-develop-mobile-apps-5fi1</guid>
      <description>&lt;p&gt;Today mobile apps are a big part of start-ups and big enterprises. So, in this article, we will see what is the process to develop a mobile app. We will see the few points which you need to keep in mind to develop the mobile app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#process-to-develop-a-mobile-application"&gt;
  &lt;/a&gt;
  Process to Develop a Mobile Application
&lt;/h2&gt;

&lt;p&gt;A good mobile application can handle full business itself. Also, there are many technologies available to develop a mobile application. Mobile applications allow you to manage everything in a few scrolls and clicks on a screen. So, if you want to develop an application you have to keep in mind the following points.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-requirement-gathering"&gt;
  &lt;/a&gt;
  1) Requirement Gathering
&lt;/h3&gt;

&lt;p&gt;Every project starts with requirement gathering. It is the first step to understanding the basic requirements of the applications. Later on, it will become the functionality of your application. You also need to identify the domain for which you want to create the app. Some famous domains are Healthcare, Edtech, Fintech, etc. You can prepare the following questions for requirement gathering.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What services the developed app will provide to customers?&lt;/li&gt;
&lt;li&gt;Is the app already available or not on play-store or Appstore?&lt;/li&gt;
&lt;li&gt;What are the extra features of the app?.&lt;/li&gt;
&lt;li&gt;Is there a scope to update the app in the future?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also analyze other similar applications already published on the Play Store to get a better understanding of the actual behavior model. This will help you decide what details to add to your application. &lt;/p&gt;

&lt;p&gt;Without understanding your needs, your project is difficult to measure and can cause long-term problems. Therefore, without proper homework, it is not advisable to consult with the mobile app developer to request a budget. Once you have collected and prioritized all the information, it is up to you to decide how to create this app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-wireframing-amp-data-flow"&gt;
  &lt;/a&gt;
  2) Wireframing &amp;amp; Data flow
&lt;/h3&gt;

&lt;p&gt;Once all the functional requirements are established, the second step is to prepare the application visuals to determine the data flow. This includes launching the app and an orderly flow of data from one to the other. Prepare sketches to present your ideas in a more visual way for developers to understand. By doing so, you can develop the app in the right direction and provide the desired output. These sketches should at least contain key information about your app’s visuals.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-platform-features"&gt;
  &lt;/a&gt;
  3) Platform Features
&lt;/h3&gt;

&lt;p&gt;There are many platforms available for mobile development. It includes two major platforms, Android and IOS as well. So, you need to make a decision on which platform your application will run on. After analyzing your target domain you can select the platform of your app. In addition, after selecting the platform for your application, you need to select the minimum version you want for compatibility with your application. This application will not work on devices that do not meet the minimum version. The increasing trend of mobile application development has created major challenges to stay one step ahead of the competition. Therefore, to get the attention of the audience you need to create the best mobile app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-project-estimation"&gt;
  &lt;/a&gt;
  4) Project Estimation
&lt;/h3&gt;

&lt;p&gt;After completing the first three steps, you can send this data to the developer to start developing your application. There are many companies in the market that provide application development services, but the budget is your choice. You can contact your local IT hub to get a rough estimate. You can also search online for startups that offer the services you need, or hire a freelancer to do the job. When you hire a freelancer for a job, you need to read their reviews and work experience before handing them over to the project. Once you have collected all the cost data and assessments, you can compare them to ultimately determine what is right for your particular job.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-choosing-the-developer"&gt;
  &lt;/a&gt;
  5) Choosing the developer
&lt;/h3&gt;

&lt;p&gt;All requirements related to the application must be met so that a developer or company can start work on the project. App developers and development companies work hard to keep up with customer demands. But once you’ve chosen someone to work with, you can’t leave all the work to them. Developers need to have the imagination to develop apps according to the client’s vision. Developers need to provide all the details they need and formulate their vision accurately so that they can understand it correctly. You can also ask developers for other changes that may improve the application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-pricing"&gt;
  &lt;/a&gt;
  6) Pricing
&lt;/h3&gt;

&lt;p&gt;It’s important to check the price quotation, as the budget is only fixed. Before delivery of the application, please make sure if the price is fixed or not. The price may vary depending on the time required. So, you need to check if you are working on a project on a fixed budget or on an hourly/daily basis. This is important because pricing can affect your budget. The model of pricing will play important role in the pricing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;Thanks for remaining till the end of the article. We hope you have enjoyed reading this article. To summarize, in this article, we have discussed what is the process to develop a mobile app. Do let us know your feedback/comments on the same.&lt;/p&gt;

&lt;p&gt;Flutter agency is the &lt;a href="https://flutteragency.com/"&gt;best Flutter Mobile App development company&lt;/a&gt; with a highly experienced team of Flutter developers. We promise to deliver the best application developed in Flutter, which will excel in the market. Also, Flutter Agency is a portal full of excellent resources like Flutter Widget Guide, Flutter Projects, Code libs, etc. So, contact us for your next project.&lt;/p&gt;

</description>
      <category>mobile</category>
      <category>apps</category>
      <category>development</category>
      <category>process</category>
    </item>
    <item>
      <title>Setting up MWAA to use a KMS key</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Tue, 14 Dec 2021 12:35:08 +0000</pubDate>
      <link>https://dev.to/aws/setting-up-mwaa-to-use-a-kms-key-4p6b</link>
      <guid>https://dev.to/aws/setting-up-mwaa-to-use-a-kms-key-4p6b</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;In a &lt;a href="https://dev.to/aws/using-aws-cdk-to-deploy-your-amazon-managed-workflows-for-apache-airflow-environment-12cf"&gt;previous post&lt;/a&gt;, I shared how you can using AWS CDK to provision your Apache Airflow environments using the Managed Workflows for Apache Airflow service (MWAA). &lt;/p&gt;

&lt;p&gt;I was contacted this week by Michael Grabenstein, who flagged an issue with the code in that post. The post used code that configured a kms key for the MWAA environment, but when trying to deploy the app it would fail with the following error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;14:59:15 | CREATE_FAILED        | AWS::MWAA::Environment         | airflowtestenvironment
Resource handler returned message: "Creation failed" (RequestToken: 5b5b5a02-8cee-e48a-66ea-a07a8b1ad41a, HandlerErrorCode: NotStabilized)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This issue was that the CDK stack did not have everything needed to properly configure a customer KMS key, so I wanted to address that in this post, how to configure MWAA so that you can use your own KMS key to properly ensure that everything is encrypted.&lt;/p&gt;

&lt;p&gt;I want to thank Michael for flagging the issue and his PR to the project and help getting this tested.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-kms-for-mwaa"&gt;
  &lt;/a&gt;
  Configuring KMS for MWAA
&lt;/h3&gt;

&lt;p&gt;In order to get KMS configured, we need to do a number of things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create new IAM policies to configure access to our KMS keys&lt;/li&gt;
&lt;li&gt;create our KMS key &lt;/li&gt;
&lt;li&gt;configure MWAA to use that KMS key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we have done that, we can then deploy our stack and create our MWAA environment. Lets get started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating new IAM policies to configure access to our KMS keys&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the original CDK stack, we created IAM policies for the MWAA execution role which covered what was defined in the &lt;a href="https://docs.aws.amazon.com/mwaa/latest/userguide/custom-keys-certs.html"&gt;MWAA docs&lt;/a&gt;. In the stack, this was as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
            "Effect": "Allow",
            "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:GenerateDataKey*",
                "kms:Encrypt"
            ],
            "Resource": "arn:aws:kms:{your-region}:{your-account-id}:key/{your-kms-cmk-id}",
            "Condition": {
                "StringLike": {
                    "kms:ViaService": [
                        "sqs.{your-region}.amazonaws.com",
                        "s3.{your-region}.amazonaws.com"
                    ]
                }
            }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As this stands, this should be ok for what we need. What we needed to do however, is create a new policy that will be used and assigned to our KMS key. This policy will provide the right permissions for MWAA and the workers to be able to access the keys to decrypt/encrypt messages and logs.&lt;/p&gt;

&lt;p&gt;Within the MWAA CDK stack, we create a new policy as follows (and thanks to Michael for his help with this):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        kms_mwaa_policy_document = iam.PolicyDocument(
            statements=[
                iam.PolicyStatement(
                    actions=[
                         "kms:Create*",
                         "kms:Describe*",
                         "kms:Enable*",
                         "kms:List*",
                         "kms:Put*",
                         "kms:Decrypt*"
                    ],
                    principals=[
                        iam.AccountRootPrincipal(),
                        # Optional:
                        # iam.ArnPrincipal(f"arn:aws:sts::{self.account}:assumed-role/AWSReservedSSO_rest_of_SSO_account"),
                    ],
                    resources=["*"]),
                iam.PolicyStatement(
                    actions=[
                        "kms:Decrypt*",
                        "kms:Describe*",
                        "kms:GenerateDataKey*",
                        "kms:Encrypt*",
                        "kms:ReEncrypt*",
                        "kms:PutKeyPolicy"
                    ],
                    effect=iam.Effect.ALLOW,
                    resources=["*"],
                    principals=[iam.ServicePrincipal("logs.amazonaws.com",region=f"{self.region}")],
                    conditions={"ArnLike": { "kms:EncryptionContext:aws:logs:arn": f"arn:aws:logs:{self.region}:{self.account}:*" }},
                ),
            ]
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will use this policy in the next step, when we create the key.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note! When I originally put this together, I did not have the "principals=[iam.AccountRootPrincipal(),..." statement, and it did work for me. However, Michael saw the following error:&lt;/p&gt;


&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Resource handler returned message: "The new key policy will not allow you to update the key policy in the future. (Service: Kms, Status Code: 400
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Which was resolved by adding that additional statement&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Creating our KMS key&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we have our policy, we can create the key. The previous code is modified slightly to incorporate this new policy. (policy=kms_mwaa_policy_document)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
        key = kms.Key(
            self,
            f"{mwaa_props['mwaa_env']}Key",
            enable_key_rotation=True,
            policy=kms_mwaa_policy_document
        )

        key.add_alias(f"alias/{mwaa_props['mwaa_env']}")   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the key is created, it will incorporate the policy we created which you can see from the KMS console.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Configuring MWAA to use that KMS key&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we have that done, we can now configure MWAA to use this. In the original CDK code, I incorrectly used key_id instead of key_arn. The correct CDK code is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        managed_airflow = mwaa.CfnEnvironment(
            scope=self,
            id='airflow-test-environment',
            name=f"{mwaa_props['mwaa_env']}",
            airflow_configuration_options={'core.default_timezone': 'utc'},
            #airflow_version='1.10.12',
            airflow_version='2.0.2',
            dag_s3_path="dags",
            environment_class='mw1.small',
            execution_role_arn=mwaa_service_role.role_arn,
            kms_key=key.key_arn,
            logging_configuration=logging_configuration,
            max_workers=5,
            network_configuration=network_configuration,
            #plugins_s3_object_version=None,
            #plugins_s3_path=None,
            #requirements_s3_object_version=None,
            #requirements_s3_path=None,
            source_bucket_arn=dags_bucket_arn,
            webserver_access_mode='PUBLIC_ONLY',
            #weekly_maintenance_window_start=None
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can view the complete code in the GitHub repo, &lt;a href="https://github.com/094459/blogpost-cdk-mwaa"&gt;blogpost-cdk-mwaa&lt;/a&gt; and the &lt;a href="https://github.com/094459/blogpost-cdk-mwaa/commit/dc8e25c552cadd90c398b84d81e457a7050588a9"&gt;changeset here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploying-mwaa"&gt;
  &lt;/a&gt;
  Deploying MWAA
&lt;/h3&gt;

&lt;p&gt;You can now deploy and create your MWAA environment in the same way, using the following CDK command, and responding Y when prompted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk deploy MWAA-Backend
cdk deploy MWAA-Environment
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;I have upgraded to v2. of CDK, so this was tested on 2.0.0 (build 4b6ce31)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once deployed (it will take 25-30 minutes typically) you should now be able to access your MWAA environment as per usual. The only difference is that now all the interactions between MWAA and the worker nodes, the messages in the scheduler, the log files written to CloudWatch are all encrypted using that key.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other observations and possible improvements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Whilst troubleshooting this, I used CloudWatch Logs and CloudWatch Trail to narrow down the source of the problem. CloudWatch Logs show med that there were some AccessDenied errors, and looking within CloudWatch Trail, I could dive deeper into those errors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
    "eventTime": "2021-12-14T10:36:43Z",
    "eventSource": "kms.amazonaws.com",
    "eventName": "Decrypt",
    "awsRegion": "eu-central-1",
    "sourceIPAddress": "airflow.amazonaws.com",
    "userAgent": "airflow.amazonaws.com",
    "errorCode": "AccessDenied",
    "errorMessage": "User: arn:aws:sts::704533066xxx:assumed-role/MWAA-Environment-V2-mwaaservicerole26CF19B9-1VOIDCIZRBxxx/AmazonMWAA-airflow is not authorized to perform: kms:Decrypt on resource: arn:aws:kms:eu-central-1:704533066374:key/cf448xxx-7b60-4db6-9b52-b8b00047xxx because no resource-based policy allows the kms:Decrypt action",
    "requestParameters": null,
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One final note, I could improve this setup by encrypting the S3 bucket that is configured for MWAA using the same kms key. When I have some time, I will come back and revisit that.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>Extend python with magic(part-1) </title>
      <author>SaptakBhoumik</author>
      <pubDate>Tue, 14 Dec 2021 12:20:27 +0000</pubDate>
      <link>https://dev.to/saptakbhoumik/extend-python-with-magicpart-1-4828</link>
      <guid>https://dev.to/saptakbhoumik/extend-python-with-magicpart-1-4828</guid>
      <description>&lt;p&gt;Hi everyone,&lt;br&gt;
In this post I will show you something magical in python 😏.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#what-am-i-even-talking-about"&gt;
  &lt;/a&gt;
  What am I even talking about?
&lt;/h1&gt;

&lt;p&gt;Well I am talking about magic/dunder method. They are a very useful feature of python and allows you to write code that is more readable,less verbose and efficient. In my previous post(you can read it here &lt;a href="https://dev.to/saptakbhoumik/operator-overloading-in-python-4k09"&gt;here&lt;/a&gt;) I had talked about operator overloading in python and those are basically magic methods. It is not possible to cover every dunder method in one post so I will cover only a few. &lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#-raw-init-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;__init__&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;Most of you already know about it and I am covering it only because it is very important. This method is called automatically when you create any instance of the object. &lt;br&gt;
&lt;strong&gt;The code&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Object innitialized"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Breaking it down&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;__init__(self)&lt;/code&gt;-This is the method that is called when you create an instance of an object. In this case it prints a string&lt;br&gt;
&lt;code&gt;x=Object()&lt;/code&gt;-Here we are initializing &lt;code&gt;x&lt;/code&gt; with an instance of the object&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#-raw-repr-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;__repr__&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;This method returns a string that is printed when you try to print the instance of an object. It is helpful for debugging purposes&lt;br&gt;
&lt;strong&gt;The code&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Value is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Breaking it down&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;__repr__(self)&lt;/code&gt; - It returns the string to be printed and doesn't take any argument&lt;br&gt;
On running the above code you will get &lt;code&gt;Value is 6&lt;/code&gt; as result. If you want to get the string representation instead of printing it then you can use &lt;code&gt;repr(x)&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#-raw-len-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;__len__&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;This method returns the length of the instance of the object when you use the lens() function on it. &lt;br&gt;
&lt;strong&gt;The code&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Breaking it down&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;__len__(self)&lt;/code&gt;-This method returns the length of the object and that's it. It must return an integer and should not take any argument. &lt;br&gt;
&lt;strong&gt;The code&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Breaking it down&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;__len__(self)&lt;/code&gt;-This returns the length of the object and that's it. It should always return a number and should never take any argument&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Magic method are extremely powerful and there are many of them. It is not possible for me to cover all of them in one post so I will post more about them in the future. If you have enjoyed this please read my &lt;a href="https://dev.to/saptakbhoumik/peregrine-update-the-python-like-language-thats-as-fast-as-c-43pb"&gt;post about peregrine&lt;/a&gt;&lt;br&gt;
Thanks for reading &amp;lt;3&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>productivity</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
