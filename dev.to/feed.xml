<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Cheat-Sheet for beginners python developer </title>
      <author>Mahmoud EL-karuony</author>
      <pubDate>Sun, 25 Jul 2021 17:39:30 +0000</pubDate>
      <link>https://dev.to/mahmoudessa/cheat-sheet-for-beginners-python-developer-4oac</link>
      <guid>https://dev.to/mahmoudessa/cheat-sheet-for-beginners-python-developer-4oac</guid>
      <description>&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h3&gt;

&lt;p&gt;We use variables to temporarily store data in the computer’s memory.&lt;/p&gt;

&lt;p&gt;price = 10&lt;/p&gt;

&lt;p&gt;rating = 4.9&lt;/p&gt;

&lt;p&gt;course_name = ‘Python for Beginners’&lt;/p&gt;

&lt;p&gt;is_published = True&lt;/p&gt;

&lt;p&gt;In the above example,&lt;/p&gt;

&lt;p&gt;• price is an integer (a whole number without a decimal point)&lt;/p&gt;

&lt;p&gt;• rating is a float (a number with a decimal point)&lt;/p&gt;

&lt;p&gt;• course_name is a string (a sequence of characters)&lt;/p&gt;

&lt;p&gt;• is_published is a boolean. Boolean values can be True or False.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comments"&gt;
  &lt;/a&gt;
  Comments
&lt;/h3&gt;

&lt;p&gt;We use comments to add notes to our code. Good comments explain the hows and&lt;/p&gt;

&lt;p&gt;whys, not what the code does. That should be reflected in the code itself. Use&lt;/p&gt;

&lt;p&gt;comments to add reminders to yourself or other developers, or also explain your&lt;/p&gt;

&lt;p&gt;assumptions and the reasons you’ve written code in a certain way.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#this-is-a-comment-and-it-wont-get-executed"&gt;
  &lt;/a&gt;
  This is a comment and it won’t get executed.
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#our-comments-can-be-multiple-lines"&gt;
  &lt;/a&gt;
  Our comments can be multiple lines.
&lt;/h6&gt;

&lt;h3&gt;
  &lt;a href="#receiving-input"&gt;
  &lt;/a&gt;
  Receiving Input
&lt;/h3&gt;

&lt;p&gt;We can receive input from the user by calling the input() function.&lt;/p&gt;

&lt;p&gt;birth_year  =  int(input(‘Birth year: ‘))&lt;/p&gt;

&lt;p&gt;The input() function always returns data as a string. So, we’re converting the&lt;/p&gt;

&lt;p&gt;result into an integer by calling the built-in int() function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strings"&gt;
  &lt;/a&gt;
  Strings
&lt;/h3&gt;

&lt;p&gt;We can define strings using a single (‘ ‘) or double (“ “) quotes.&lt;/p&gt;

&lt;p&gt;To define a multi-line string, we surround our string with tripe quotes (“””).&lt;/p&gt;

&lt;p&gt;We can get individual characters in a string using square brackets [].&lt;/p&gt;

&lt;p&gt;course = ‘Python for Beginners’&lt;/p&gt;

&lt;p&gt;course[0] # returns the first character&lt;/p&gt;

&lt;p&gt;course[1] # returns the second character&lt;/p&gt;

&lt;p&gt;course[-1] # returns the first character from the end&lt;/p&gt;

&lt;p&gt;course[-2] # returns the second character from the end&lt;/p&gt;

&lt;p&gt;We can slice a string using a similar notation:&lt;/p&gt;

&lt;p&gt;course[1:5]&lt;/p&gt;

&lt;p&gt;The above expression returns all the characters starting from the index position of 1&lt;/p&gt;

&lt;p&gt;to 5 (but excluding 5). The result will be ytho&lt;/p&gt;

&lt;p&gt;If we leave out the start index, 0 will be assumed.&lt;/p&gt;

&lt;p&gt;If we leave out the end index, the length of the string will be assumed.&lt;/p&gt;

&lt;p&gt;We can use formatted strings to dynamically insert values into our strings:&lt;/p&gt;

&lt;p&gt;name = ‘Mosh’&lt;/p&gt;

&lt;p&gt;message = f’Hi, my name is {name}’&lt;/p&gt;

&lt;p&gt;message.upper() # to convert to uppercase&lt;/p&gt;

&lt;p&gt;message.lower() # to convert to lowercase&lt;/p&gt;

&lt;p&gt;message.title() # to capitalize the first letter of every word&lt;/p&gt;

&lt;p&gt;message.find(‘p’) # returns the index of the first occurrence of p&lt;/p&gt;

&lt;p&gt;(or -1 if not found)&lt;/p&gt;

&lt;p&gt;message.replace(‘p’, ‘q’)&lt;/p&gt;

&lt;p&gt;To check if a string contains a character (or a sequence of characters), we use the in&lt;/p&gt;

&lt;p&gt;operator:&lt;/p&gt;

&lt;p&gt;contains = ‘Python’ in course&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arithmetic-operations"&gt;
  &lt;/a&gt;
  Arithmetic Operations
&lt;/h3&gt;

&lt;p&gt;+&lt;/p&gt;

&lt;p&gt;-&lt;/p&gt;

&lt;p&gt;*&lt;/p&gt;

&lt;p&gt;/         # returns a float&lt;/p&gt;

&lt;p&gt;//        # returns an int&lt;/p&gt;

&lt;p&gt;%     # returns the remainder of division&lt;/p&gt;

&lt;p&gt;**     # exponentiation - x ** y = x to the power of y&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#augmented-assignment-operator"&gt;
  &lt;/a&gt;
  Augmented assignment operator:
&lt;/h4&gt;

&lt;p&gt;x = x + 10&lt;/p&gt;

&lt;p&gt;x += 10&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#operator-precedence"&gt;
  &lt;/a&gt;
  Operator precedence:
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;parenthesis&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;exponentiation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;multiplication / division&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;addition / subtraction&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#if-statements"&gt;
  &lt;/a&gt;
  If Statements
&lt;/h3&gt;

&lt;p&gt;if is_hot:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(“hot day”)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;elif is_cold:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(“cold day”)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;else:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(“beautiful day”)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#logical-operators"&gt;
  &lt;/a&gt;
  Logical operators:
&lt;/h3&gt;

&lt;p&gt;if  has_high_income and has_good_credit:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;if  has_high_income or has_good_credit:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;is_day = True&lt;/p&gt;

&lt;p&gt;is_night = not is_day&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comparison-operators"&gt;
  &lt;/a&gt;
  Comparison operators
&lt;/h3&gt;

&lt;p&gt;a &amp;gt; b&lt;/p&gt;

&lt;p&gt;a &amp;gt;= b (greater than or equal to)&lt;/p&gt;

&lt;p&gt;a &amp;lt; b&lt;/p&gt;

&lt;p&gt;a &amp;lt;= b&lt;/p&gt;

&lt;p&gt;a == b (equals)&lt;/p&gt;

&lt;p&gt;a != b (not equals)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#while-loops"&gt;
  &lt;/a&gt;
  While loops
&lt;/h3&gt;

&lt;p&gt;i = 1&lt;/p&gt;

&lt;p&gt;while i &amp;lt; 5:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(i)

i += 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#for-loops"&gt;
  &lt;/a&gt;
  For loops
&lt;/h3&gt;

&lt;p&gt;for i in range(1, 5):&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;• range(5): generates 0, 1, 2, 3, 4&lt;/p&gt;

&lt;p&gt;• range(1, 5): generates 1, 2, 3, 4&lt;/p&gt;

&lt;p&gt;• range(1, 5, 2): generates 1, 3&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lists"&gt;
  &lt;/a&gt;
  Lists
&lt;/h3&gt;

&lt;p&gt;numbers = [1, 2, 3, 4, 5]&lt;/p&gt;

&lt;p&gt;numbers[0]     # returns the first item&lt;/p&gt;

&lt;p&gt;numbers[1]     # returns the second item&lt;/p&gt;

&lt;p&gt;numbers[-1]     # returns the first item from the end&lt;/p&gt;

&lt;p&gt;numbers[-2]     # returns the second item from the end&lt;/p&gt;

&lt;p&gt;numbers.append(6)     # adds 6 to the end&lt;/p&gt;

&lt;p&gt;numbers.insert(0, 6)     # adds 6 at index position of 0&lt;/p&gt;

&lt;p&gt;numbers.remove(6)     # removes 6&lt;/p&gt;

&lt;p&gt;numbers.pop()     # removes the last item&lt;/p&gt;

&lt;p&gt;numbers.clear()     # removes all the items&lt;/p&gt;

&lt;p&gt;numbers.index(8)     # returns the index of first occurrence of 8&lt;/p&gt;

&lt;p&gt;numbers.sort()     # sorts the list&lt;/p&gt;

&lt;p&gt;numbers.reverse()     # reverses the list&lt;/p&gt;

&lt;p&gt;numbers.copy()     # returns a copy of the list&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tuples"&gt;
  &lt;/a&gt;
  Tuples
&lt;/h3&gt;

&lt;p&gt;They are like read-only lists. We use them to store a list of items. But once we&lt;/p&gt;

&lt;p&gt;define a tuple, we cannot add or remove items or change the existing items.&lt;/p&gt;

&lt;p&gt;coordinates = (1, 2, 3)&lt;/p&gt;

&lt;p&gt;We can unpack a list or a tuple into separate variables:&lt;/p&gt;

&lt;p&gt;x, y, z = coordinates&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dictionaries"&gt;
  &lt;/a&gt;
  Dictionaries
&lt;/h3&gt;

&lt;p&gt;We use dictionaries to store key/value pairs.&lt;/p&gt;

&lt;p&gt;customer = {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;“name”: “John Smith”,

“age”: 30,

“is_verified”: True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;We can use strings or numbers to define keys. They should be unique. We can use&lt;/p&gt;

&lt;p&gt;any types for the values.&lt;/p&gt;

&lt;p&gt;customer[“name”]     # returns “John Smith”&lt;/p&gt;

&lt;p&gt;customer[“type”]     # throws an error&lt;/p&gt;

&lt;p&gt;customer.get(“type”, “silver”)     # returns “silver”&lt;/p&gt;

&lt;p&gt;customer[“name”] = “new name”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h3&gt;

&lt;p&gt;We use functions to break up our code into small chunks. These chunks are easier&lt;/p&gt;

&lt;p&gt;to read, understand and maintain. If there are bugs, it’s easier to find bugs in a&lt;/p&gt;

&lt;p&gt;small chunk than the entire program. We can also re-use these chunks.&lt;/p&gt;

&lt;p&gt;def greet_user(name):&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(f”Hi {name}”)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;greet_user(“John”)&lt;/p&gt;

&lt;p&gt;Parameters are placeholders for the data we can pass to functions. Arguments&lt;/p&gt;

&lt;p&gt;are the actual values we pass.&lt;/p&gt;

&lt;p&gt;We have two types of arguments:&lt;/p&gt;

&lt;p&gt;• Positional arguments: their position (order) matters&lt;/p&gt;

&lt;p&gt;• Keyword arguments: position doesn’t matter - we prefix them with the parameter&lt;/p&gt;

&lt;p&gt;name.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#two-positional-arguments"&gt;
  &lt;/a&gt;
  Two positional arguments
&lt;/h1&gt;

&lt;p&gt;greet_user(“John”, “Smith”)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#keyword-arguments"&gt;
  &lt;/a&gt;
  Keyword arguments
&lt;/h1&gt;

&lt;p&gt;calculate_total(order=50, shipping=5, tax=0.1)&lt;/p&gt;

&lt;p&gt;Our functions can return values. If we don’t use the return statement, by default&lt;/p&gt;

&lt;p&gt;None is returned. None is an object that represents the absence of a value.&lt;/p&gt;

&lt;p&gt;def square(number):&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return number * number
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;result = square(2)&lt;/p&gt;

&lt;p&gt;print(result)     # prints 4&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exceptions"&gt;
  &lt;/a&gt;
  Exceptions
&lt;/h3&gt;

&lt;p&gt;Exceptions are errors that crash our programs. They often happen because of bad&lt;/p&gt;

&lt;p&gt;input or programming errors. It’s our job to anticipate and handle these exceptions&lt;/p&gt;

&lt;p&gt;to prevent our programs from cashing.&lt;/p&gt;

&lt;p&gt;try:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;age = int(input(‘Age: ‘))

income = 20000

risk = income / age

print(age)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;except ValueError:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(‘Not a valid number’)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;except ZeroDivisionError:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(‘Age cannot be 0’)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#classes"&gt;
  &lt;/a&gt;
  Classes
&lt;/h3&gt;

&lt;p&gt;We use classes to define new types.&lt;/p&gt;

&lt;p&gt;class Point:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def __init__(self, x, y):

    self.x = x

    self.y = y

def move(self):

    print(“move”)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;When a function is part of a class, we refer to it as a method.&lt;/p&gt;

&lt;p&gt;Classes define templates or blueprints for creating objects. An object is an instance&lt;/p&gt;

&lt;p&gt;of a class. Every time we create a new instance, that instance follows the structure&lt;/p&gt;

&lt;p&gt;we define using the class.&lt;/p&gt;

&lt;p&gt;point1 = Point(10, 5)&lt;/p&gt;

&lt;p&gt;point2 = Point(2, 4)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;init&lt;/strong&gt; is a special method called a constructor. It gets called at the time of&lt;/p&gt;

&lt;p&gt;creating new objects. We use it to initialize our objects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inheritance"&gt;
  &lt;/a&gt;
  Inheritance
&lt;/h3&gt;

&lt;p&gt;Inheritance is a technique to remove code duplication. We can create a base class&lt;/p&gt;

&lt;p&gt;to define the common methods and then have other classes inherit these methods.&lt;/p&gt;

&lt;p&gt;class Mammal:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def walk(self):

    print(“walk”)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;class Dog(Mammal):&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def bark(self):

    print(“bark”)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;dog = Dog()&lt;/p&gt;

&lt;p&gt;dog.walk()     # inherited from Mammal&lt;/p&gt;

&lt;p&gt;dog.bark()     # defined in Dog&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#modules"&gt;
  &lt;/a&gt;
  Modules
&lt;/h3&gt;

&lt;p&gt;A module is a file with some Python code. We use modules to break up our&lt;/p&gt;

&lt;p&gt;program into multiple files. This way, our code will be better organized. We won’t&lt;/p&gt;

&lt;p&gt;have one gigantic file with a million lines of code in it!&lt;/p&gt;

&lt;p&gt;There are 2 ways to import modules: we can import the entire module, or specific&lt;/p&gt;

&lt;p&gt;objects in a module.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#importing-the-entire-converters-module"&gt;
  &lt;/a&gt;
  importing the entire converters module
&lt;/h1&gt;

&lt;p&gt;import converters&lt;/p&gt;

&lt;p&gt;converters.kg_to_lbs(5)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#importing-one-function-in-the-converters-module"&gt;
  &lt;/a&gt;
  importing one function in the converters module
&lt;/h1&gt;

&lt;p&gt;from converters import kg_to_lbs&lt;/p&gt;

&lt;p&gt;kg_to_lbs(5)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#packages"&gt;
  &lt;/a&gt;
  Packages
&lt;/h3&gt;

&lt;p&gt;A package is a directory with &lt;strong&gt;init&lt;/strong&gt;.py in it. It can contain one or more&lt;/p&gt;

&lt;p&gt;modules.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#importing-the-entire-sales-module"&gt;
  &lt;/a&gt;
  importing the entire sales module
&lt;/h1&gt;

&lt;p&gt;from ecommerce import sales&lt;/p&gt;

&lt;p&gt;sales.calc_shipping()&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#importing-one-function-in-the-sales-module"&gt;
  &lt;/a&gt;
  importing one function in the sales module
&lt;/h1&gt;

&lt;p&gt;from ecommerce.sales import calc_shipping&lt;/p&gt;

&lt;p&gt;calc_shipping()&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#python-standard-library"&gt;
  &lt;/a&gt;
  Python Standard Library
&lt;/h3&gt;

&lt;p&gt;Python comes with a huge library of modules for performing common tasks such as&lt;/p&gt;

&lt;p&gt;sending emails, working with date/time, generating random values, etc.&lt;/p&gt;

&lt;p&gt;Random Module&lt;/p&gt;

&lt;p&gt;import random&lt;/p&gt;

&lt;p&gt;random.random()     # returns a float between 0 to 1&lt;/p&gt;

&lt;p&gt;random.randint(1, 6)     # returns an int between 1 to 6&lt;/p&gt;

&lt;p&gt;members = [‘John’, ‘Bob’, ‘Mary’]&lt;/p&gt;

&lt;p&gt;leader = random.choice(members)     # randomly picks an item&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pypi"&gt;
  &lt;/a&gt;
  Pypi
&lt;/h3&gt;

&lt;p&gt;Python Package Index (pypi.org) is a directory of Python packages published by&lt;/p&gt;

&lt;p&gt;Python developers around the world. We use pip to install or uninstall these&lt;/p&gt;

&lt;p&gt;packages.&lt;/p&gt;

&lt;p&gt;pip install openpyxl&lt;/p&gt;

&lt;p&gt;pip uninstall openpyxl&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Automating Windows Setup via Chocolatey</title>
      <author>Vinay Hegde</author>
      <pubDate>Sun, 25 Jul 2021 17:21:10 +0000</pubDate>
      <link>https://dev.to/vinayhegde1990/automating-windows-setup-via-chocolatey-13p3</link>
      <guid>https://dev.to/vinayhegde1990/automating-windows-setup-via-chocolatey-13p3</guid>
      <description>&lt;p&gt;When you're a software professional, 1 thing you must've dreaded is setting up a new Windows machine (&lt;em&gt;as in a development environment&lt;/em&gt;). This might be since doing so needs either downloading multiple .MSI / .EXE files of the required applications or using the Microsoft App Store (&lt;em&gt;personally I believe it's a little off the mark compared to the Linux/MacOS&lt;/em&gt;).  &lt;/p&gt;

&lt;p&gt;It's also compounded by the fact Windows systems are regarded relatively volatile so we never re-touch/re-configure applications once installed. You also must've surely wondered why Windows trails Linux/Mac OS when it comes to Command Line. Agreed, &lt;strong&gt;&lt;a href="https://docs.microsoft.com/en-us/powershell"&gt;PowerShell&lt;/a&gt;&lt;/strong&gt; changes most of that but learning a new syntax can be a little harrowing.&lt;/p&gt;

&lt;p&gt;What if I told you this could be solved permanently via CLI? Enter Chocolatey to the rescue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/dW5tjSvxH1l94rDP06/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/dW5tjSvxH1l94rDP06/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chocolatey is a package manager specifically designed for Windows systems to solve these very problems. Consider it equivalent to &lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;dnf&lt;/code&gt; or &lt;code&gt;brew&lt;/code&gt; giving you sufficient power to work with Windows, so much that you might never go back to tedious manual methods again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Understanding how Powershell policies work such as &lt;code&gt;Set-ExecutionPolicy&lt;/code&gt;, &lt;a href="https://adamtheautomator.com/set-executionpolicy"&gt;here&lt;/a&gt; is an excellent page to get you started.&lt;/li&gt;
&lt;li&gt;From the &lt;a href="https://docs.chocolatey.org/en-us/choco/setup"&gt;Chocolatey official page&lt;/a&gt; 

&lt;ul&gt;
&lt;li&gt;Windows 7+ / Windows Server 2003+&lt;/li&gt;
&lt;li&gt;PowerShell v2+ (&lt;em&gt;Not PowerShell Core, minimum is v3&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;.NET Framework 4+ (&lt;em&gt;installation attempts to install .NET 4.0 if absent, minimum is v4.5 due to TLS v1.2&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Excitement to learn something new and preferably a cup of tea/coffee.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Follow &lt;a href="https://docs.chocolatey.org/en-us/choco/setup#installing-chocolatey"&gt;this link&lt;/a&gt; to install Chocolatey.&lt;/li&gt;
&lt;li&gt;If you get an error like below, then install PowerShell v7.3 using &lt;a href="https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-windows?view=powershell-7.1#installing-the-msi-package"&gt;these steps&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'Get-ExecutionPolicy' is not recognized as the name of a cmdlet
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;If you've successfully installed Chocolatey, you should now be able to run &lt;code&gt;choco --version&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that's it if you prefer the vanilla install but if you like to dive deeper, you'll quickly realize a few concerns.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How can we install specific versions of software as needed?&lt;/li&gt;
&lt;li&gt;What if we wanted to install multiple applications in 1 go, uninterrupted?&lt;/li&gt;
&lt;li&gt;Can we rollout to multiple machines? (&lt;em&gt;Note: some features for this point may need Chocolatey enterprise, please read the documentation as per your use-cases&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets answer the 1st two questions. &lt;/p&gt;

&lt;p&gt;Number 1 is pretty simple, you just execute &lt;code&gt;choco install vlc={version}&lt;/code&gt; and relax. Number 2 can be a little bit tricky but a handy way is to use the &lt;a href="https://docs.chocolatey.org/en-us/choco/commands/install#packages.config"&gt;Packages.config&lt;/a&gt; which is an XML file containing the list of applications we want to install. &lt;/p&gt;

&lt;p&gt;Now the command becomes &lt;code&gt;choco install {path-to-file.config} --yes&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/vinayhegde1990/initial-workstation-config/tree/master/powershell/chocolatey"&gt;Here&lt;/a&gt; is a sample that you can use or create one/more referring it as per your requirements. You can also keep it under version control to have an audit for changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result?
&lt;/h2&gt;

&lt;p&gt;On a fresh Windows 10 machine, it took me ~35 minutes to install everything, including time to download software as well. Then I use my own curated &lt;code&gt;.dotfiles&lt;/code&gt; for certain tools to finish the development setup so I hope this guide helps you save time/effort as well.&lt;/p&gt;




&lt;p&gt;What are the ways you use to setup Windows environments?&lt;/p&gt;

</description>
      <category>powershell</category>
      <category>windows</category>
      <category>automation</category>
      <category>devops</category>
    </item>
    <item>
      <title>Mastering Drag N Drop API in HTML &amp; JS 😎</title>
      <author>Abhishek Raj</author>
      <pubDate>Sun, 25 Jul 2021 17:19:50 +0000</pubDate>
      <link>https://dev.to/abhishekraj272/mastering-drag-n-drop-api-in-html-js-36a9</link>
      <guid>https://dev.to/abhishekraj272/mastering-drag-n-drop-api-in-html-js-36a9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Few days back, I was working on a side project and I was required to create a Drag N Drop feature like &lt;a href="https://scratch.mit.edu/projects/editor/"&gt;Scratch&lt;/a&gt;, then I read a lot about this Drag n Drop feature.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;In this post, I will be showing 3 Drag n Drop use case, so without wasting the time, let's start.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#drag-n-drop-simple"&gt;
  &lt;/a&gt;
  Drag n Drop Simple
&lt;/h3&gt;

&lt;p&gt;Here, I have created 2 container div, where we can move our child divs. While dragging we will store &lt;strong&gt;id&lt;/strong&gt; of the child in &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer"&gt;DataTransfer&lt;/a&gt; Object and after dropping we will fetch the &lt;strong&gt;id&lt;/strong&gt; from the DataTansfer Object then it will the node will be appended in the dropped container.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/abhishekraj272/embed/LYyeRXP?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#drag-drop-copy-n-delete"&gt;
  &lt;/a&gt;
  Drag, Drop, Copy n Delete
&lt;/h3&gt;

&lt;p&gt;Similarly, I have created 2 container divs, where we can move the child, but when we drop the child, it is copy-pasted instead of cut-paste. &lt;br&gt;
When it is redropped in the previous container, it is deleted.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/abhishekraj272/embed/XWRVdym?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#drag-drop-n-swap"&gt;
  &lt;/a&gt;
  Drag, Drop n Swap
&lt;/h3&gt;

&lt;p&gt;Here, we have 1 container and we can swap (left to right) nodes.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/abhishekraj272/embed/KKmZNNG?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Connect Me @ &lt;a href="https://www.linkedin.com/in/abhishekraj272/"&gt;Linkedin&lt;/a&gt; &lt;a href="https://github.com/abhishekraj272"&gt;Github&lt;/a&gt; &lt;a href="https://twitter.com/abhishekraj272"&gt;Twitter&lt;/a&gt; &lt;a href="https://www.youtube.com/channel/UCvHn2T8DSJzEWzYDdK3Dt8A"&gt;Youtube&lt;/a&gt; 😇&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://web.dev"&gt;Web.dev&lt;/a&gt; &amp;amp; &lt;a href="https://www.w3schools.com/"&gt;W3Schools&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Designing the ultimate (INCLUSIVE) writing tool. [Part 1 - a WYSIWYG in 745 *Bytes*! 😱]</title>
      <author>InHuOfficial</author>
      <pubDate>Sun, 25 Jul 2021 17:01:47 +0000</pubDate>
      <link>https://dev.to/inhuofficial/designing-the-ultimate-inclusive-writing-tool-part-1-a-wysiwyg-in-745-bytes-ggh</link>
      <guid>https://dev.to/inhuofficial/designing-the-ultimate-inclusive-writing-tool-part-1-a-wysiwyg-in-745-bytes-ggh</guid>
      <description>&lt;p&gt;A WYSIWYG in just 745 bytes of JS (gzipped)? Check. A bonus JS syntax highlighter in 900 bytes of JS? Check. Combining the two? You bet! Things are about to get weird, but I do have a good reason for (most of) it!&lt;/p&gt;

&lt;p&gt;In this article I will be introducing a new series all around creating the ultimate &lt;strong&gt;inclusive&lt;/strong&gt; writing tool and the inspiration behind it. &lt;/p&gt;

&lt;p&gt;And obviously, as promised, a super tiny WYSIWYG...you might be surprised how "full featured" it is!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#skip-to-the-wysiwygs"&gt;
  &lt;/a&gt;
  Skip to the WYSIWYG(s)!
&lt;/h2&gt;

&lt;p&gt;Can't be bothered reading all he really interesting features I am building or what this series will be about? How rude!&lt;/p&gt;

&lt;p&gt;But I understand you might be busy, so here is a &lt;a href="#a-basic-wysiwyg"&gt;shortcut to the first stage of the WYSIWYG.&lt;/a&gt;...and the syntax highlighter...of course!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-this-series-and-where-it-started"&gt;
  &lt;/a&gt;
  Introduction to this series and where it started
&lt;/h2&gt;

&lt;p&gt;There was a &lt;a href="https://dev.to/devteam/dev-community-ableist-language-maintaining-an-inclusive-environment-37g3"&gt;really interesting article&lt;/a&gt; released by &lt;a class="mentioned-user" href="https://dev.to/michaeltharrington"&gt;@michaeltharrington&lt;/a&gt;
 earlier this week on ableism and language choice. &lt;/p&gt;

&lt;p&gt;Now it may have appeared from &lt;a href="https://dev.to/inhuofficial/comment/1gfan"&gt;a very long comment I made&lt;/a&gt; that I did not agree that language choice is important. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It is&lt;/strong&gt;, it was my lack of faith in being able to police it effectively and the examples of "good substitutes" for potentially offensive words that I took issue with. Plus so much of ableist language is contextual.&lt;/p&gt;

&lt;p&gt;It really got me thinking though...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#out-of-a-simple-article-an-idea-was-born"&gt;
  &lt;/a&gt;
  Out of a simple article an idea was born.
&lt;/h2&gt;

&lt;p&gt;The article prompted me to start having a think about how you could make it easier for people to write inclusively. &lt;/p&gt;

&lt;p&gt;Without making assumptions about the culture, whether they had a limited vocabulary due to a disability or due to a lack of access to educational resources or because English was a second or even third language etc.&lt;/p&gt;

&lt;p&gt;Basically a piece of software that could steer people towards language that was suitable in a professional / public setting.&lt;/p&gt;

&lt;p&gt;All without the need for a human to intervene, as no matter how well intentioned, you will never have enough information about the writer to know whether you are doing more harm than good.&lt;/p&gt;

&lt;p&gt;A set of guidelines if you will, with the option to ignore them if you wish. &lt;/p&gt;

&lt;p&gt;The one big advantage of this approach is that software is far less likely (although not perfectly unlikely) to make people feel that they are being criticised for their language choices. &lt;/p&gt;

&lt;p&gt;It also scales so that thousands of people can benefit from guidance without the need for more and more human moderators.&lt;/p&gt;

&lt;p&gt;Although ableist language was the catalyst for the idea, inclusive writing is about so much more!&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-just-ableist-language-far-from-it"&gt;
  &lt;/a&gt;
  Not just ableist language, far from it!
&lt;/h2&gt;

&lt;p&gt;Inclusive writing includes keeping an eye on pronoun use, avoiding racist language, avoiding language that excludes non-binary individuals, swear words being over-used (as the occasional "fuck yeah" is obviously desirable 😉) and more I probably haven't thought of yet.&lt;/p&gt;

&lt;p&gt;There are even more aspects to inclusive language, not just choice of words!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;"passive voice vs active voice"&lt;/strong&gt; is one, I will explain passive voice and why to avoid it in a future article when we build the part of the system that highlights passive voice and suggests alternatives that use active voice. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Headings structure&lt;/strong&gt;, essential for people who use a screen reader and for helping everyone understand the relationships in the article etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sentence length&lt;/strong&gt;, as longer sentences are more difficult to process without a "mini break" provided by a full stop, comma etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Complex words and jargon&lt;/strong&gt; should be avoided where possible. 1 in 5 people &lt;strong&gt;in the UK&lt;/strong&gt; have the reading age expected of that of a 12 year old. This one is a big point!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explaining abbreviations.&lt;/strong&gt; One that we often don't think about. Just because you know what "SSR" means doesn't mean everyone does. &lt;/p&gt;

&lt;p&gt;Does it mean "Strategic Scientific Reserve", "Same Sex Relationship" or "Sonic and the Secret Rings". When writing about tech you &lt;em&gt;probably&lt;/em&gt; mean "Server Side Rendering" but that may not be obvious to someone who does not know the term. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Paragraph length.&lt;/strong&gt; This depends almost entirely on &lt;strong&gt;what&lt;/strong&gt; you are writing and &lt;strong&gt;where&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;However this is a tool designed for writing on the web. So short paragraphs are much preferred than walls of text. In fact, most of the preferred ways of writing for the web would get you marked down in English classes!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;grammatical errors&lt;/strong&gt; I am not smart enough to write an application to correct for grammatical errors, so I won't be tackling that (initially, who knows if this project grows I might attempt it!)...there are plenty of services that do that already, so I think I can get away with shelving that for now.&lt;/p&gt;

&lt;p&gt;Those are all the things to do with language I could think of.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#oh-and-it-doesnt-stop-there"&gt;
  &lt;/a&gt;
  Oh and it doesn't stop there
&lt;/h3&gt;

&lt;p&gt;Now that I have decided to put a couple of hours a week aside for this there are loads of things I personally have wanted in a writing system.&lt;/p&gt;

&lt;p&gt;So it might become much more than just an editor, it may have a whole system around it. A few things that I would like to see if I build this are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;A research tool&lt;/strong&gt;, where I can bookmark articles (at the relevant part of the page if necessary) and link them to an article I am researching.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A simple SEO tool&lt;/strong&gt; that ensures that my first 200 words or so are optimised. Simple stats like word occurrence, semantically similar words etc. Nothing too heavy here as quality writing comes first, just a little nudge to help on-page SEO.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Templates&lt;/strong&gt; for different article types.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A "scratch pad"&lt;/strong&gt; for notes and ideas as the article is written (things I need to research further etc.)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Placeholders.&lt;/strong&gt; For things like images that need sourcing (or screenshots I need to take / insert), links to future articles (with a way of adding them to a queue) or related articles not written yet, notes for myself, etc. Basically things that will not show up in the released article but can be searched and acted upon.&lt;/li&gt;
&lt;li&gt;And heck, while we are at it, why not have an &lt;strong&gt;article release checklist&lt;/strong&gt; that ensures that I have completed all the steps required to release quality content and see where I am up to when writing multiple articles simultaneously.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oh, and as always with anything I do, load speed is essential and the thing needs to be as accessible as is humanly possible with current technology. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stage-1-building-my-first-ever-wysiwyg"&gt;
  &lt;/a&gt;
  Stage 1 - building my first ever WYSIWYG
&lt;/h2&gt;

&lt;p&gt;I have built a What You See Is What You Get (WYSIWYG) editor for dev.to in the past. However it wasn't a WYSIWYG, it was a Markdown editor. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/dev-to-markdown-editor-part-deux-massive-improvements-hack-2-continued-5mp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;7 new features, 51.3 new bugs added 😋, the DEV.TO 👩‍💻👨‍💻 editor [PART DEUX!]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial ・ Apr 7 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;So I can't reuse any of that as I want this to be an actual WYSIWYG. &lt;/p&gt;

&lt;p&gt;No I am going to have to start from scratch and learn all about live editors on the web!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-of-you-are-thinking-you-must-like-pain-if-you-are-going-to-build-a-wysiwyg"&gt;
  &lt;/a&gt;
  Some of you are thinking "You must like pain if you are going to build a WYSIWYG!"
&lt;/h3&gt;

&lt;p&gt;For those of you who have been brave enough to try and write a WYSIWYG before, you are already wincing and know that what I have decided to tackle is a horrendous task!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WYSIWYGs are hard to build.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;How do you let people edit a document while generating the underlying HTML on the fly and not upset / change their cursor position?&lt;/p&gt;

&lt;p&gt;How do you keep track of opening and closing HTML tags when they start getting nested? &lt;/p&gt;

&lt;p&gt;How do you account for deleting a word or phrase that has styling applied to only part of it and move the tags accordingly?&lt;/p&gt;

&lt;p&gt;All sounds rather complicated. I don't like complicated so I think the only real answer would be to &lt;strong&gt;cheat&lt;/strong&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#our-cheat-and-why-raw-contenteditable-endraw-is-awesome"&gt;
  &lt;/a&gt;
  Our cheat and why &lt;code&gt;contenteditable&lt;/code&gt; is awesome.
&lt;/h3&gt;

&lt;p&gt;A large number of you will have used, heard of or stumbled across &lt;code&gt;contenteditable&lt;/code&gt; in your careers.&lt;/p&gt;

&lt;p&gt;If you haven't, it is an attribute you can add to an HTML element that &lt;strong&gt;magically&lt;/strong&gt; allows you to click the element and start changing the content.&lt;/p&gt;

&lt;p&gt;The following fiddle demonstrates this in its simplest form.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/qzeda68m//embedded/result,js//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now that may not seem very impressive on its own. But it really is when you think about it. &lt;/p&gt;

&lt;p&gt;It is much more than just a replacement for an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. Every change you make is directly updating the DOM and adjusting the HTML on the fly.&lt;/p&gt;

&lt;p&gt;Still not impressed? Select some text and press Ctrl + B (on Windows). The &lt;code&gt;contenteditable&lt;/code&gt; &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; has just changed to include a &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; tag wrapped around your text. &lt;/p&gt;

&lt;p&gt;It deals with all of the HTML tag management so we don't have to.&lt;/p&gt;

&lt;p&gt;But not only that, a &lt;code&gt;contenteditable&lt;/code&gt; area has a super power. It exposes various JavaScript APIs so we can get and set the state of text!&lt;/p&gt;

&lt;p&gt;Sure, it has loads of quirks, but I think it is pretty amazing how much functionality you get from one single attribute (even if it is a real pain to type correctly!).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-basic-wysiwyg"&gt;
  &lt;/a&gt;
  A basic WYSIWYG
&lt;/h2&gt;

&lt;p&gt;It is worth noting, there is still a load to do here. It has some accessibility issues (read that as &lt;em&gt;a lot&lt;/em&gt; of accessibility issues) so it shouldn't be used in production, it is also missing loads of features etc.&lt;/p&gt;

&lt;p&gt;However the aim here was to build a tiny WYSIWYG as a base.&lt;/p&gt;

&lt;p&gt;At this point, it is a technical showpiece and a learning exercise for me on all the APIs I need to learn to interact with a &lt;code&gt;contenteditable&lt;/code&gt; &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, &lt;strong&gt;not the finished product.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Anyway, enough disclaimers, I know what you came here to see!&lt;/p&gt;

&lt;p&gt;The following WYSIWYG is a total of 896 &lt;strong&gt;bytes&lt;/strong&gt; of JS &lt;strong&gt;and&lt;/strong&gt; CSS combined (when Gzipped). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How is that for tiny?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/y1p08sx7//embedded/result,js,css,html//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-about-syntax-highlighting"&gt;
  &lt;/a&gt;
  How about syntax highlighting?
&lt;/h2&gt;

&lt;p&gt;Oh you thought the WYSIWYG was the showpiece?&lt;/p&gt;

&lt;p&gt;No no no, I have been busy creating more tiny experiments.&lt;/p&gt;

&lt;p&gt;A lot of them still need a lot of work but just for fun how about a super tiny JavaScript syntax highlighter?&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/zgpx364s//embedded/result,js,css,html//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;That was another interesting learning exercise (luckily a lot of the regexes were available with a bit of research so I didn't have to write them, just tweak them!). &lt;/p&gt;

&lt;p&gt;It is not perfect but the concept is there. &lt;/p&gt;

&lt;p&gt;Now I was not intending to do anything else in this article...but I just had to try combining the two fiddles...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-about-syntax-highlightingin-a-wysiwyg"&gt;
  &lt;/a&gt;
  How about Syntax highlighting...in a WYSIWYG?
&lt;/h2&gt;

&lt;p&gt;I created a monster! A weird WYSIWYG where you get syntax highlighting, but can still edit it like a normal document.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--068mV2aQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nvbnonle8etii6obswc.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--068mV2aQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nvbnonle8etii6obswc.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can create some pretty interesting results I have to say....I don't think I will be using it as my day to day editor just yet!&lt;/p&gt;

&lt;p&gt;It is full of bugs as this was obviously not intended etc. etc. but...why not have some fun?&lt;/p&gt;

&lt;p&gt;Sadly you can't insert images, horizontal lines, links etc. as the input gets mangled...but you can still have a load of fun with formatting text!&lt;/p&gt;

&lt;p&gt;It might not look right on your mobile so save this one for when you get to your PC!&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/6yrm3jgx//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I hope it makes you laugh (and cry at the same time) as much as it has me!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#back-to-the-serious-stuff"&gt;
  &lt;/a&gt;
  Back to the serious stuff!
&lt;/h2&gt;

&lt;p&gt;Obviously, while this is all fun, the intention is never to have the WYSIWYG functions as part of the Code Editor.&lt;/p&gt;

&lt;p&gt;The idea is to create a blocks system (similar to WordPress etc.) where you have a WYSIWYG block, then a code editor block, then back to a different block type etc.&lt;/p&gt;

&lt;p&gt;However there was one thing (that you may not have noticed) that was important with the code editor and combining the two that I was doing.&lt;/p&gt;

&lt;p&gt;I was seeing how I could create live highlighting as you typed.&lt;/p&gt;

&lt;p&gt;It isn't as simple as you may think, so have a good look at the code in the last example to work out what the trick is. Don't worry if you don't spot it...I will explain all the tricks etc. in more detail in the next part of this series when I tidy up my sloppy code!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-next"&gt;
  &lt;/a&gt;
  What is next?
&lt;/h2&gt;

&lt;p&gt;OK so these were some fun experiments but not really useful.&lt;/p&gt;

&lt;p&gt;In part two I am going fix the WYSIWYG to a stage where it is both usable and more easily extended so we can start bolting in some of &lt;a href="#features"&gt;the features I listed earlier&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I am also going to use the knowledge gained from the silly WYSIWYG code editor combo to add highlighting to words that are not recommended etc. &lt;/p&gt;

&lt;p&gt;So by the end of part two we should have a usable WYSIWYG that will allow us to highlight a given word, phrase etc. and have suggestions on alternatives. Who knows I might throw another couple of silly things in that article for you to play with too!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;From one simple article a gigantic, all consuming project that is going to take me months has emerged.&lt;/p&gt;

&lt;p&gt;That is the conclusion as far as I am concerned. &lt;/p&gt;

&lt;p&gt;So do me a favour, give me a follow, bookmark the article, leave a comment or share this article with someone you don't like so you can put then through the pain of experiencing my WYSIWYG code editor monstrosity! 🤣&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__551686"&gt;
  
    .ltag__user__id__551686 .follow-action-button {
      background-color: #c62aa4 !important;
      color: #131111 !important;
      border-color: #c62aa4 !important;
    }
  
    &lt;a href="/inhuofficial" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/inhuofficial"&gt;InHuOfficial&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/inhuofficial"&gt;Specialising in accessibility and website load speed / performance. If you have a question about [accessibility] or [page-speed-insights] ask away and I will help any way I can!&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Have a great week and I hope you found this interesting, even if it wasn't useful (yet...that is what part two is for I hope!)&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>showdev</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Complete Introduction to CSS Flexbox 💪</title>
      <author>Rocky</author>
      <pubDate>Sun, 25 Jul 2021 16:47:46 +0000</pubDate>
      <link>https://dev.to/coderzx/complete-introduction-to-css-flexbox-egb</link>
      <guid>https://dev.to/coderzx/complete-introduction-to-css-flexbox-egb</guid>
      <description>&lt;p&gt;Flexbox is a powerful, well-supported layout method that was introduced with the latest version of CSS, CSS3. With flexbox, it's easy to center elements on the page and create dynamic user interfaces that shrink and expand automatically.&lt;/p&gt;
&lt;p&gt;Life was tough before Flexbox and Grid came, centering a div was so troublesome that it became a meme.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oCTpefFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4b8o33jlsb1q7ed5n9us.jpg"&gt;&lt;img alt="meme" src="https://res.cloudinary.com/practicaldev/image/fetch/s--aMBoG3Mq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--oCTpefFj--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4b8o33jlsb1q7ed5n9us.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But fear no more, Flexbox and Grid have solved all our problems and things are so much easier now.&lt;/p&gt;
&lt;p&gt;In this blog, we'll learn the fundamentals of flexbox and dynamic layouts.&lt;/p&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#use-raw-display-flex-endraw-to-position-two-boxes"&gt;&lt;/a&gt;📌 Use &lt;code&gt;display: flex&lt;/code&gt; to Position Two Boxes&lt;/h2&gt;
&lt;p&gt;Placing the CSS property &lt;code&gt;display: flex&lt;/code&gt; on an element allows you to use other flex properties to build a responsive page.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hLoD2x-f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6i9iry6hv4rddo54lsa9.png"&gt;&lt;img alt="1" src="https://res.cloudinary.com/practicaldev/image/fetch/s--C7lC-okP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hLoD2x-f--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6i9iry6hv4rddo54lsa9.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After applying &lt;code&gt;display: flex&lt;/code&gt; property to parent element:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pI5jZiPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebnk1l1n05v95xwtsj6l.jpg"&gt;&lt;img alt="parent" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qv2IIqsW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--pI5jZiPa--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebnk1l1n05v95xwtsj6l.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cKREb9bW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsdd4iy435liovw2rh0u.jpg"&gt;&lt;img alt="2" src="https://res.cloudinary.com/practicaldev/image/fetch/s--iHMvbKQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--cKREb9bW--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsdd4iy435liovw2rh0u.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#use-the-raw-flexdirection-endraw-property"&gt;&lt;/a&gt;📌 Use the &lt;code&gt;flex-direction&lt;/code&gt; Property&lt;/h2&gt;
&lt;p&gt;Adding &lt;code&gt;display: flex&lt;/code&gt; to an element turns it into a flex container. This makes it possible to align any children of that element into rows or columns.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;flex-direction&lt;/code&gt; property specifies the direction of the items within the flex container&lt;/p&gt;
&lt;p&gt;You do this by adding the &lt;code&gt;flex-direction&lt;/code&gt; property to the parent item and setting it to &lt;code&gt;row&lt;/code&gt; or &lt;code&gt;column&lt;/code&gt;. Creating a row will align the children horizontally, and creating a column will align the children vertically.&lt;/p&gt;
&lt;p&gt;Other options for flex-direction are &lt;code&gt;row-reverse&lt;/code&gt; and &lt;code&gt;column-reverse&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ih2CQbHP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s928brc75rg6xhx7r8lq.jpg"&gt;&lt;img alt="dir" src="https://res.cloudinary.com/practicaldev/image/fetch/s--yvRfeLbe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Ih2CQbHP--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s928brc75rg6xhx7r8lq.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note: The default value for the &lt;code&gt;flex-direction&lt;/code&gt; property is &lt;code&gt;row&lt;/code&gt;. This is the reason when we used &lt;code&gt;display: flex&lt;/code&gt; on the boxes above they were aligned in a row automatically.&lt;/p&gt;
&lt;p&gt;After applying &lt;code&gt;row&lt;/code&gt;, &lt;code&gt;row-reverse&lt;/code&gt;, &lt;code&gt;column&lt;/code&gt; and &lt;code&gt;column-reverse&lt;/code&gt; in &lt;span&gt;&lt;code&gt;flex-direction&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;They all are pretty intuitive.&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-flexdirection-row-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;flex-direction: row&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qplDgxYs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zwqvlfdz3wron3aayjh.jpg"&gt;&lt;img alt="row" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zWp8TAh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qplDgxYs--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zwqvlfdz3wron3aayjh.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-flexdirection-rowreverse-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;flex-direction: row-reverse&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U3Xv9M83--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82h7xrin7ufs712zfc2m.jpg"&gt;&lt;img alt="rowrev" src="https://res.cloudinary.com/practicaldev/image/fetch/s--l0JFdkN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--U3Xv9M83--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82h7xrin7ufs712zfc2m.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-flexdirection-column-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;flex-direction: column&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U7-Meq-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikiz947ohrcktzb22obm.png"&gt;&lt;img alt="col" src="https://res.cloudinary.com/practicaldev/image/fetch/s--T_vu4W3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--U7-Meq-m--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikiz947ohrcktzb22obm.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-flexdirection-columnreverse-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;flex-direction: column-reverse&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9qIIBkX---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jbgjy04yhku0h98uvd8r.png"&gt;&lt;img alt="colrev" src="https://res.cloudinary.com/practicaldev/image/fetch/s--CsCUPgd4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--9qIIBkX---/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jbgjy04yhku0h98uvd8r.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#use-the-raw-flexwrap-endraw-property-to-wrap-a-row-or-column"&gt;&lt;/a&gt;📌 Use the &lt;code&gt;flex-wrap&lt;/code&gt; Property to Wrap a Row or Column&lt;/h2&gt;
&lt;p&gt;If we have a large number of elements in the flex container, it can destroy the width of elements.&lt;/p&gt;
&lt;p&gt;CSS flexbox has a feature to split a flex item into multiple rows (or columns). By default, a flex container will fit all flex items together. For example, a row will all be on one line.&lt;/p&gt;
&lt;p&gt;However, using the &lt;code&gt;flex-wrap&lt;/code&gt; property tells CSS to wrap items. This means extra items move into a new row or column. It persists the width of elements.&lt;/p&gt;
&lt;p&gt;The breakpoint of where the wrapping happens depends on the size of the items and the size of the container.&lt;br&gt;&lt;/p&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vimeo:&lt;/p&gt;

&lt;p&gt;CSS has options for the direction of the wrap:&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-nowrap-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;nowrap&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;this is the default setting and does not wrap items.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Ar2XoH6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xiji8onoqbdeycdvpcr1.png"&gt;&lt;img alt="nowrap" src="https://res.cloudinary.com/practicaldev/image/fetch/s--S9s_nFec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--_Ar2XoH6--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xiji8onoqbdeycdvpcr1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-wrap-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;wrap&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;wraps items onto multiple lines from top-to-bottom if they are in rows and left to right if they are in columns.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XtWWxXSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qfll050k1a9jitp1kov3.png"&gt;&lt;img alt="wrap" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_qnIMu4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XtWWxXSF--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qfll050k1a9jitp1kov3.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-wrapreverse-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;wrap-reverse&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;wraps items onto multiple lines from bottom-to-top if they are in rows and right-to-left if they are in columns.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p9zMCweN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqky3jfcdqvvuz23b3ih.png"&gt;&lt;img alt="wrap-reverse" src="https://res.cloudinary.com/practicaldev/image/fetch/s--J7Y21paO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--p9zMCweN--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqky3jfcdqvvuz23b3ih.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#mainaxis-and-crossaxis"&gt;&lt;/a&gt;📌 Main-Axis and Cross-Axis&lt;/h2&gt;
&lt;p&gt;We can align elements within Flexbox in accordance with these two axes.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xw9MIx00--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oa75ny23dwlafq6bdatg.png"&gt;&lt;img alt="Axis" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hzhtlrYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Xw9MIx00--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oa75ny23dwlafq6bdatg.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To help you better understand:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wv84d1Xl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqlumm8j6rawwe039duj.jpg"&gt;&lt;img alt="axis2" src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Hpzy_lZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Wv84d1Xl--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqlumm8j6rawwe039duj.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Time to align flexible items within a flex container&lt;/p&gt;
&lt;p&gt;🔸 Justify-content: For horizontal alignment&lt;br&gt;🔸 Align-content: For vertical alignment&lt;/p&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#align-elements-using-the-raw-justifycontent-endraw-property"&gt;&lt;/a&gt;📌 Align Elements Using the &lt;code&gt;justify-content&lt;/code&gt; Property&lt;/h2&gt;
&lt;p&gt;Sometimes the flex items within a flex container do not fill all the space in the container. It is common to want to tell CSS how to align and space out the flex items a certain way.&lt;/p&gt;
&lt;p&gt;Fortunately, the &lt;code&gt;justify-content&lt;/code&gt; property has several options to do this. But first, it is important to understand the Main Axis and Cross Axis, which we did in the last section.&lt;/p&gt;
&lt;p&gt;Recall that setting a flex container as a row places the flex items side-by-side from left to right. A flex container set as a column places the flex items in a vertical stack from top-to-bottom.&lt;/p&gt;
&lt;p&gt;For each, the direction the flex items are arranged is called the &lt;span&gt;main axis&lt;/span&gt;. For a row, this is a horizontal line that cuts through each item. And for a column, the main axis is a vertical line through the items.&lt;/p&gt;
&lt;p&gt;There are several options for how to space the flex items along the line that is the main axis.&lt;/p&gt;
&lt;p&gt;Most commonly used ones are:&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-justifycontent-center-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;justify-content: center&lt;/code&gt;
&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;aligns all the flex items to the center inside the flex container.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--poahcXB5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j82pbmy3okcjjfx2guhp.png"&gt;&lt;img alt="center" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_gCxIWGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--poahcXB5--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j82pbmy3okcjjfx2guhp.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-justifycontent-flexstart-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;justify-content: flex-start&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;aligns items to the start of the flex container. For a row, this pushes the items to the left of the container. For a column, this pushes the items to the top of the container. This is the default alignment if no justify-content is specified.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2sJzrTql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sm78fs3aquel79cnula4.png"&gt;&lt;img alt="flex-start" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jbbhSftm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2sJzrTql--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sm78fs3aquel79cnula4.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-justifycontent-flexend-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;justify-content: flex-end&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;aligns items to the end of the flex container. For a row, this pushes the items to the right of the container. For a column, this pushes the items to the bottom of the container.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hEuAMkFW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/honqw7ch1fdd6j6uuoqw.png"&gt;&lt;img alt="flex-end" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ceaYSZuv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hEuAMkFW--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/honqw7ch1fdd6j6uuoqw.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Other options include:&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-justifycontent-spacebetween-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;justify-content: space-between&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;aligns items to the center of the main axis, with extra space placed between the items. The first and last items are pushed to the very edge of the flex container. For example, in a row the first item is against the left side of the container, the last item is against the right side of the container, then the remaining space is distributed evenly among the other items.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AcuitWR5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3aj5wh44ma89v6tpvthm.png"&gt;&lt;img alt="space-between" src="https://res.cloudinary.com/practicaldev/image/fetch/s--4OXjNgaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--AcuitWR5--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3aj5wh44ma89v6tpvthm.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-justifycontent-spacearound-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;justify-content: space-around&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;similar to space-between but the first and last items are not locked to the edges of the container, the space is distributed around all the items with a half-space on either end of the flex container.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aeOkYcWQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmynqmj4f6madnwwl9vl.png"&gt;&lt;img alt="space-around" src="https://res.cloudinary.com/practicaldev/image/fetch/s--xwImds0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--aeOkYcWQ--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmynqmj4f6madnwwl9vl.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-justifycontent-spaceevenly-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;justify-content: space-evenly&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Distributes space evenly between the flex items with a full space at either end of the flex container&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JYV6skU1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/je7a8uzo53l5sdwgvb68.png"&gt;&lt;img alt="space-evenly" src="https://res.cloudinary.com/practicaldev/image/fetch/s--LJ5RcP5a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--JYV6skU1--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/je7a8uzo53l5sdwgvb68.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#see-the-code"&gt;&lt;/a&gt;👨‍💻 SEE THE CODE:&lt;/h4&gt;

&lt;h2&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#align-elements-using-the-raw-alignitems-endraw-property"&gt;&lt;/a&gt;📌 Align Elements Using the &lt;code&gt;align-items&lt;/code&gt; Property&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;align-items&lt;/code&gt; property is similar to &lt;code&gt;justify-content&lt;/code&gt;. Recall that the justify-content property aligned flex items along the main axis. For rows, the main axis is a horizontal line and for columns, it is a vertical line.&lt;/p&gt;
&lt;p&gt;Flex containers also have a cross-axis which is the opposite of the main axis. For rows, the cross axis is vertical and for columns, the cross axis is horizontal.&lt;/p&gt;
&lt;p&gt;CSS offers the &lt;code&gt;align-items&lt;/code&gt; property to align flex items along the &lt;span&gt;cross-axis&lt;/span&gt;. For a row, it tells CSS how to push the items in the entire row up or down within the container. And for a column, how to push all the items left or right within the container.&lt;/p&gt;
&lt;p&gt;The different values available for align-items include:&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-alignitems-center-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;align-items: center&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;aligns items to the center. For rows, this vertically aligns items (equal space above and below the items). For columns, this horizontally aligns them (equal space to the left and right of the items).&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvjvIvcC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3uv87lqyuse8vmabf5r.png"&gt;&lt;img alt="center" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KizlkJqz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZvjvIvcC--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3uv87lqyuse8vmabf5r.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-alignitems-flexend-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;align-items: flex-end&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;aligns items to the end of the flex container. For rows, this aligns items to the bottom of the container. For columns, this aligns items to the right of the container.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x3DYgc47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djvv7ez4elsmmdy03gig.png"&gt;&lt;img alt="flex-end" src="https://res.cloudinary.com/practicaldev/image/fetch/s--L4Y82NSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--x3DYgc47--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djvv7ez4elsmmdy03gig.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-alignitems-flexstart-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;align-items: flex-start&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;aligns items to the start of the flex container. For rows, this aligns items to the top of the container. For columns, this aligns items to the left of the container.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tyMFDVAf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28zgh3a8twxw38qiv862.png"&gt;&lt;img alt="flex-start" src="https://res.cloudinary.com/practicaldev/image/fetch/s--o6xzAlEY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tyMFDVAf--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28zgh3a8twxw38qiv862.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-alignitems-stretch-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;align-items: stretch&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;stretch the items to fill the flex container. For example, rows items are stretched to fill the flex container top-to-bottom.&lt;/li&gt;&lt;/ul&gt;
&lt;blockquote&gt;&lt;p&gt;This is the default value if no align-items value is specified.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7mmD6h5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98zwd0833g4g5x0sjn6p.png"&gt;&lt;img alt="stretch" src="https://res.cloudinary.com/practicaldev/image/fetch/s--26Bji0l1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7mmD6h5x--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98zwd0833g4g5x0sjn6p.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/cenacr007_harsh/complete-introduction-to-css-flexbox-1fhl#-raw-alignitems-baseline-endraw-"&gt;&lt;/a&gt;🔶 &lt;code&gt;align-items: baseline&lt;/code&gt;:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;aligns items to their baselines. Baseline is a text concept, think of it as the line that the letters sit on.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FtfJ4DZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zklsfo6ckkgh2hzai7r9.png"&gt;&lt;img alt="baseline" src="https://res.cloudinary.com/practicaldev/image/fetch/s--o7BKMY-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--FtfJ4DZ3--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zklsfo6ckkgh2hzai7r9.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>100+ Javascript Project For Beginners</title>
      <author>Rocky</author>
      <pubDate>Sun, 25 Jul 2021 16:31:41 +0000</pubDate>
      <link>https://dev.to/coderzx/100-javascript-project-for-beginners-45ae</link>
      <guid>https://dev.to/coderzx/100-javascript-project-for-beginners-45ae</guid>
      <description>&lt;p&gt;If you’re interested in becoming a web developer, JavaScript is one of the best coding languages you can learn—but getting familiar with JavaScript basics means using those skills to build JavaScript projects. Need a little help coaxing inspiration to strike? We’ve put together a list of 20+ JavaScript project ideas you can start working on RIGHT NOW (whether you’re looking for JavaScript projects for beginners or JavaScript projects for intermediate coders and beyond).&lt;/p&gt;
&lt;p&gt;Go ahead, scroll through the list, and—when you find a JavaScript project that piques your interest and matches your skill level—follow the project link. Each of these open source JavaScript projects have their JavaScript projects source code listed on their home page for you to use as a guide.&lt;/p&gt;
&lt;h3&gt;1. BUILD A JAVASCRIPT CLOCK&lt;/h3&gt;
&lt;p&gt;If you’re on a website or using web applications with a self-updating time feature (you know, a clock), there’s a very good chance it’s powered by JavaScript code. This means JavaScript clocks don’t just make for good JavaScript projects, a JavaScript clock lets you get hands-on with the kind of actual work you’ll be doing as a JavaScript developer.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Check originally Published article to read More&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Originally Published: &lt;a href="https://bit.ly/2UMq0p1"&gt;&lt;span&gt;Javascript Project For Beginners&lt;/span&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>React-Rails authentication API with Devise and Devise-jwt(Back-end) part.</title>
      <author>Ari Karim</author>
      <pubDate>Sun, 25 Jul 2021 16:19:33 +0000</pubDate>
      <link>https://dev.to/arikarim/react-rails-authentication-api-with-devise-and-devise-jwt-back-end-part-dj</link>
      <guid>https://dev.to/arikarim/react-rails-authentication-api-with-devise-and-devise-jwt-back-end-part-dj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I know that you might tried a lot of articles and searched a lot and you may be tired, or my article may be long and you may want to jump to the code right away but let me tell you that this article is all you need to build a complete &lt;strong&gt;back-end authentication&lt;/strong&gt; for your website.&lt;/p&gt;

&lt;p&gt;But first let me tell you a brief history about authentication API and how it works.&lt;/p&gt;

&lt;p&gt;It is this simple steps:&lt;/p&gt;

&lt;p&gt;1- User logs in to the website&lt;/p&gt;

&lt;p&gt;2- You create a token for the user and send it back.&lt;/p&gt;

&lt;p&gt;3- with each request the user perform you send back the token.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explanation-of-the-above-steps"&gt;
  &lt;/a&gt;
  Explanation of the above steps:
&lt;/h3&gt;

&lt;p&gt;1-2- When the user logs in or signs up into your website your back-end no matter which program you use(Rails, Node...) will create a token and send it back to the user in the &lt;strong&gt;Response headers&lt;/strong&gt; called &lt;strong&gt;authorization&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;3- with each request that the user perform in order for the back-end to know that this person is logged in and it is the correct user, we send back the token in the request headers mainly like &lt;strong&gt;Authorization: Bearer Your token here&lt;/strong&gt;, the back-end se the token and if it was the right token, it will allow you to perform your request, pretty simple isn't it? :).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-begin"&gt;
  &lt;/a&gt;
  Lets begin.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;First lets create a new project, so run this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Rails new App-Name --api -d postgresql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then cd inside the project.&lt;/p&gt;

&lt;p&gt;we will use devise and devise-jwt and rack-cors gems for authentication, so put these gems inside the Gemfile:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Gem 'devise'
Gem 'devise-jwt'
Gem 'rack-cors'
gem 'dotenv-rails' // for hiding variables
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bundle Install or bundle
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;config/initializers/cors.rb&lt;/strong&gt; is generated by default when using the--api to create an app. Otherwise you need to create it.&lt;/p&gt;

&lt;p&gt;Update it like this. The key here is allowing all origins to make requests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Rails.application.config.middleware.insert_before 0, Rack::Cors do
  allow do
    origins '*'

    resource '*', headers: %w(Authorization),
                  methods: :any,
                  expose: %w[Authorization]
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using origins ‘*’ is for our convenience. When deploying to production, set origins to the URL of your front-end app. Otherwise the whole internet will be able to hit your API. Though in some cases that’s desirable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-install-devise"&gt;
  &lt;/a&gt;
  Lets install Devise
&lt;/h2&gt;

&lt;p&gt;run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Rails g devise:install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now create a model and migration with devise, and migrate to generate tables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; rails g devise User
 rails db:setup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update the generated User model with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class User &amp;lt; ApplicationRecord

  devise :database_authenticatable,
         :jwt_authenticatable,
         :registerable,
         jwt_revocation_strategy: JwtDenylist
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create another model file called &lt;strong&gt;jwt_denylist.rb&lt;/strong&gt; and paste in the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class JwtDenylist &amp;lt; ApplicationRecord
  include Devise::JWT::RevocationStrategies::Denylist

  self.table_name = 'jwt_denylist'
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The included module was previously called &lt;strong&gt;Devise::JWT::RevocationStrategies::Blacklist&lt;/strong&gt; so you may see that in older tutorials.&lt;/p&gt;

&lt;p&gt;Create a migration to go along with it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ rails g migration CreateJwtDenylist
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update it to this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class CreateJwtDenylist &amp;lt; ActiveRecord::Migration[6.1]
  def change
    create_table :jwt_denylist do |t|
      t.string :jti, null: false
      t.datetime :exp, null: false
    end
    add_index :jwt_denylist, :jti
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And migrate.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ rails db:migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This sets up a table which tracks JWT tokens that have been logged out and should no longer have access to the app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#controllers"&gt;
  &lt;/a&gt;
  Controllers
&lt;/h2&gt;

&lt;p&gt;Create a sessions controller at &lt;strong&gt;/controllers/users/sessions_controller.rb&lt;/strong&gt;. We want to override the default devise sessions controller so we can specify a custom response on log-in and log-out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Users::SessionsController &amp;lt; Devise::SessionsController
  respond_to :json

  private

  def respond_with(resource, _opts = {})
    render json: { message: 'You are logged in.' }, status: :ok
  end

  def respond_to_on_destroy
    log_out_success &amp;amp;&amp;amp; return if current_user

    log_out_failure
  end

  def log_out_success
    render json: { message: "You are logged out." }, status: :ok
  end

  def log_out_failure
    render json: { message: "Hmm nothing happened."}, status: :unauthorized
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new registration controller, &lt;strong&gt;/controllers/users/registrations_controller.rb&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Users::RegistrationsController &amp;lt; Devise::RegistrationsController
  respond_to :json

  private

  def respond_with(resource, _opts = {})
    register_success &amp;amp;&amp;amp; return if resource.persisted?

    register_failed
  end

  def register_success
    render json: { message: 'Signed up sucessfully.' }
  end

  def register_failed
    render json: { message: "Something went wrong." }
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add one more controller, &lt;strong&gt;controllers/members_controller.rb&lt;/strong&gt;, so we can test logged-in VS logged-out behaviour on an endpoint that required authenticating.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class MembersController &amp;lt; ApplicationController
  before_action :authenticate_user!

  def show
    render json: { message: "Yeppa you did it" }
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#more-devise-setup"&gt;
  &lt;/a&gt;
  More Devise Setup
&lt;/h2&gt;

&lt;p&gt;Update &lt;strong&gt;config/initializers/devise.rb&lt;/strong&gt;. Add this to the file inside the config block.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;config.jwt do |jwt|
  jwt.secret = ENV['RAILS-SECRET-KEY']
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This tells Devise-JWT to use a secret key specified in our credentials file to build tokens.&lt;/p&gt;

&lt;p&gt;Now generate a secret key. And note the output. We’ll add this into our .env file, so run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rake secret
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the root of the project create a &lt;strong&gt;.env&lt;/strong&gt; file and put this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;RAILS-SECRET-KEY = Your secret key from above command
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: If you publish this website and upload it to heroku, do not forget to add a Config variable to your app in heroku, simply go to heroku, go to your app, click on setting, click on config vars then put your &lt;strong&gt;RAILS-SECRET-KEY then your secret key&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#routes"&gt;
  &lt;/a&gt;
  Routes
&lt;/h2&gt;

&lt;p&gt;Update your routes so they point to your new controllers, rather than to the default devise controllers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Rails.application.routes.draw do
  devise_for :users,
             controllers: {
                 sessions: 'users/sessions',
                 registrations: 'users/registrations'
             }
  get '/member-data', to: 'members#show'
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#now-you-will-have-these-endpoints"&gt;
  &lt;/a&gt;
  Now you will have these end-points:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http//localhost:3000/users/sign_in

    Rooute ==&amp;gt; Sign in
    Method ==&amp;gt; POST
    Body ==&amp;gt; { "user": { "email": "test@example.com", "password": "12345678" } }
    Response token ==&amp;gt; data.headers.authorization

http//localhost:3000/users

    Route ==&amp;gt; Sign up
    Method ==&amp;gt; POST
    Body ==&amp;gt; { "user": { "email": "test@example.com", "password": "12345678" } }
    Response token ==&amp;gt; data.headers.authorization

http//localhost:3000/member

    Route ==&amp;gt; To know if user logged in?
    Method ==&amp;gt; GET
    headers ==&amp;gt; token: token you saved from log in or sign up user
    Response ==&amp;gt; data.data.message=&amp;gt; 'yeppa you did it.'

http//localhost:3000/users/sign_out

    Route ==&amp;gt; To know if user logged in?
    Method ==&amp;gt; DELETE
    headers ==&amp;gt; token: token you saved from log in or sign up user
    Response ==&amp;gt; data.data.message=&amp;gt; 'You are logged out.'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can use &lt;strong&gt;postman,Insomnia...&lt;/strong&gt; or any other tool to test the endpoints, just don't forget that except signin and signup you need to send the token in the header like this:&lt;br&gt;
&lt;strong&gt;Authorization: Bearer Your token here&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You may ask what will happen to the token when the user signs out? do you remember the &lt;strong&gt;JWT_denylist&lt;/strong&gt; model that we created!,&lt;br&gt;
each time the user logs out rails puts his token inside that table and each time you log in and have a request with a token, rails compare your token with the tokens inside the deny_list table if it matches one of them it means you are logged out and you are not authorized.&lt;/p&gt;

</description>
      <category>rails</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>CRUD with Django</title>
      <author>Madhuban Khatri</author>
      <pubDate>Sun, 25 Jul 2021 16:05:05 +0000</pubDate>
      <link>https://dev.to/madhubankhatri/crud-with-django-119l</link>
      <guid>https://dev.to/madhubankhatri/crud-with-django-119l</guid>
      <description>&lt;p&gt;Heelloooo friends!&lt;br&gt;
Welcome back to my blog page.&lt;/p&gt;

&lt;p&gt;Today you will get the code of &lt;strong&gt;CRUD&lt;/strong&gt; application in &lt;strong&gt;Django&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-crud"&gt;
  &lt;/a&gt;
  What is CRUD?
&lt;/h1&gt;

&lt;p&gt;C - CREATE&lt;br&gt;
R - RETRIEVE&lt;br&gt;
U - UPDATE&lt;br&gt;
D - DELETE &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#viewspy"&gt;
  &lt;/a&gt;
  views.py
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;

&lt;span class="c1"&gt;#RETRIEVE
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#Retrieve all the persons' datas.
&lt;/span&gt;    &lt;span class="n"&gt;get_persons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'datas'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_persons&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'home.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;#CREATE
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'fname'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;lname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'lname'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;is_married&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'bool'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;create_person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_married&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;is_married&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;create_person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'home'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'GET request is not allowed.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;#UPDATE
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;get_person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'data'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_person&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'update.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;get_person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'fname'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;lname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'lname'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;is_married&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'bool'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;get_person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;
        &lt;span class="n"&gt;get_person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lname&lt;/span&gt;
        &lt;span class="n"&gt;get_person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
        &lt;span class="n"&gt;get_person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_married&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;is_married&lt;/span&gt;
        &lt;span class="n"&gt;get_person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Error'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'home'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;



&lt;span class="c1"&gt;#DELETE
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete_person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;get_person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;get_person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"person deleted"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#urlpy"&gt;
  &lt;/a&gt;
  url.py
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'home'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'create/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'add_person'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;str:id&amp;gt;/update_person/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'update_person'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;str:id&amp;gt;/update/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'update'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'delete/&amp;lt;str:id&amp;gt;/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete_person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'delete_person'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#modelspy"&gt;
  &lt;/a&gt;
  models.py
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="c1"&gt;# Create your models here.
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;is_married&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_str_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adminpy"&gt;
  &lt;/a&gt;
  admin.py
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;

&lt;span class="c1"&gt;# Register your models here.
&lt;/span&gt;
&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#homehtml"&gt;
  &lt;/a&gt;
  home.html
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Required meta tags --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Bootstrap CSS --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello, world!&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container w-50"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;CRUD with DJANGO&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav nav-tabs"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"myTab"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"tablist"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-item"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"presentation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-link active"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"home-tab"&lt;/span&gt; &lt;span class="na"&gt;data-bs-toggle=&lt;/span&gt;&lt;span class="s"&gt;"tab"&lt;/span&gt; &lt;span class="na"&gt;data-bs-target=&lt;/span&gt;&lt;span class="s"&gt;"#home"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"tab"&lt;/span&gt; &lt;span class="na"&gt;aria-controls=&lt;/span&gt;&lt;span class="s"&gt;"home"&lt;/span&gt; &lt;span class="na"&gt;aria-selected=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Create&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-item"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"presentation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-link"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"profile-tab"&lt;/span&gt; &lt;span class="na"&gt;data-bs-toggle=&lt;/span&gt;&lt;span class="s"&gt;"tab"&lt;/span&gt; &lt;span class="na"&gt;data-bs-target=&lt;/span&gt;&lt;span class="s"&gt;"#profile"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"tab"&lt;/span&gt; &lt;span class="na"&gt;aria-controls=&lt;/span&gt;&lt;span class="s"&gt;"profile"&lt;/span&gt; &lt;span class="na"&gt;aria-selected=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Retreive&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tab-content"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"myTabContent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tab-pane fade show active"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"home"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"tabpanel"&lt;/span&gt; &lt;span class="na"&gt;aria-labelledby=&lt;/span&gt;&lt;span class="s"&gt;"home-tab"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"{% url 'add_person' %}"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                {% csrf_token %}
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput1"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;First Name&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"fname"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput1"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Madhuban"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput2"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Last Name&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"lname"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput2"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Khatri"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput3"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Age&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"age"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput3"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"21"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput4"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Are you Single?&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"bool"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;option&amp;gt;&lt;/span&gt;Yes&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;option&amp;gt;&lt;/span&gt;No&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control btn btn-warning"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Add"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tab-pane fade"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"profile"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"tabpanel"&lt;/span&gt; &lt;span class="na"&gt;aria-labelledby=&lt;/span&gt;&lt;span class="s"&gt;"profile-tab"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"table"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;
                      &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;scope=&lt;/span&gt;&lt;span class="s"&gt;"col"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;#&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;scope=&lt;/span&gt;&lt;span class="s"&gt;"col"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;First Name&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;scope=&lt;/span&gt;&lt;span class="s"&gt;"col"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Last Name&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;scope=&lt;/span&gt;&lt;span class="s"&gt;"col"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Is Married&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;scope=&lt;/span&gt;&lt;span class="s"&gt;"col"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Action&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                      &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
                        {% for data in datas %}
                            &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                                &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;scope=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{data.id}}&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
                                &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{data.first_name}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                                &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{data.last_name}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                                &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{data.is_married}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                                &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;
                                    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{% url 'update_person' data.id %}"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-sm btn-primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Update&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;    
                                    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{% url 'delete_person' data.id %}"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-sm btn-danger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Delete&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
                                &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
                        {% endfor %}

                    &lt;span class="nt"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;


    &lt;span class="c"&gt;&amp;lt;!-- Option 1: Bootstrap Bundle with Popper --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;


  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#updatehtml"&gt;
  &lt;/a&gt;
  update.html
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Required meta tags --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Bootstrap CSS --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello, world!&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Update Person&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"{% url 'update' data.id %}"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          {% csrf_token %}
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput1"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;First Name&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"fname"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput1"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"{{data.first_name}}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput2"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Last Name&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"lname"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput2"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"{{data.last_name}}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput3"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Age&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"age"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput3"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"{{data.age}}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput4"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Are you Single?&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"bool"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"exampleFormControlInput4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  {% if data.is_married == 'Yes' %}
                  &lt;span class="nt"&gt;&amp;lt;option&amp;gt;&lt;/span&gt;Yes&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;option&amp;gt;&lt;/span&gt;No&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
                  {% else %}
                  &lt;span class="nt"&gt;&amp;lt;option&amp;gt;&lt;/span&gt;No&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;option&amp;gt;&lt;/span&gt;Yes&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
                  {% endif%}
              &lt;span class="nt"&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control btn btn-warning"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Update"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;



    &lt;span class="c"&gt;&amp;lt;!-- Option 1: Bootstrap Bundle with Popper --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;


  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>django</category>
      <category>python</category>
      <category>crud</category>
    </item>
    <item>
      <title>How to add Health Checks to ASP.NET Core project. A coding story.</title>
      <author>Oleksii Nikiforov</author>
      <pubDate>Sun, 25 Jul 2021 15:34:41 +0000</pubDate>
      <link>https://dev.to/nikiforovall/how-to-add-health-checks-to-asp-net-core-project-a-coding-story-94m</link>
      <guid>https://dev.to/nikiforovall/how-to-add-health-checks-to-asp-net-core-project-a-coding-story-94m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Health checks are valuable and it is pretty straightforward to use them in ASP.NET Core. I've created a coding story to show you how to add and use them in different scenarios. (database, rabbitmq, downstream services).&lt;/p&gt;




&lt;p&gt;Observability of the system is crucial for successful maintenance and monitoring. Health checks help you with that!&lt;/p&gt;

&lt;p&gt;Below, you can find a coding story that describes the process of adding health checks support to ASP.NET Core project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://codingstories.io/story/https:%2F%2Fgitlab.com%2FNikiforovAll%2Fhow-to-add-health-checks-to-aspnetcore"&gt;https://codingstories.io/story/https:%2F%2Fgitlab.com%2FNikiforovAll%2Fhow-to-add-health-checks-to-aspnetcore&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#sneak-peek-the-result"&gt;
  &lt;/a&gt;
  Sneak peek the result
&lt;/h3&gt;

&lt;p&gt;By the end of the coding story, you will see something like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Startup&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IConfiguration&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Startup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IConfiguration&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ConfigureServices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;connectionString&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetConnectionString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DefaultConnection"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;rabbitMqConnectionString&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetConnectionString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"RabbitMQ"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;downstreamServiceUrl&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"DownstreamService:BaseUrl"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddHealthChecks&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddSqlServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
               &lt;span class="n"&gt;connectionString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Database"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;failureStatus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HealthStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Degraded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TimeSpan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromSeconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
               &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"services"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddRabbitMQ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
               &lt;span class="n"&gt;rabbitMqConnectionString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"RabbitMQ"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;failureStatus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HealthStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Degraded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TimeSpan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromSeconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
               &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"services"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddUrlGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
               &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;downstreamServiceUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/health"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
               &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Downstream API Health Check"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;failureStatus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HealthStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unhealthy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TimeSpan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromSeconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
               &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"services"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IApplicationBuilder&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseRouting&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseEndpoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endpoints&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapCustomHealthCheck&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/{**path}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                  &lt;span class="s"&gt;"Navigate to /health to see the health status."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EndpointRouteBuilderExtensions&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
   &lt;span class="c1"&gt;/// Adds a Health Check endpoint to the &amp;lt;see cref="IEndpointRouteBuilder"/&amp;gt; with the specified template.&lt;/span&gt;
   &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
   &lt;span class="c1"&gt;/// &amp;lt;param name="endpoints"&amp;gt;The &amp;lt;see cref="IEndpointRouteBuilder"/&amp;gt; to add endpoint to.&amp;lt;/param&amp;gt;&lt;/span&gt;
   &lt;span class="c1"&gt;/// &amp;lt;param name="pattern"&amp;gt;The URL pattern of the liveness endpoint.&amp;lt;/param&amp;gt;&lt;/span&gt;
   &lt;span class="c1"&gt;/// &amp;lt;param name="servicesPattern"&amp;gt;The URL pattern of the readiness endpoint.&amp;lt;/param&amp;gt;&lt;/span&gt;
   &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IEndpointRouteBuilder&lt;/span&gt; &lt;span class="nf"&gt;MapCustomHealthCheck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;IEndpointRouteBuilder&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/health"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;servicesPattern&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/health/ready"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endpoints&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ArgumentNullException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nameof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapHealthChecks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HealthCheckOptions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Predicate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"services"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;AllowCachingResponses&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;ResponseWriter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WriteResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapHealthChecks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;servicesPattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HealthCheckOptions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Predicate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;AllowCachingResponses&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;ResponseWriter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WriteResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;WriteResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HealthReport&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"application/json; charset=utf-8"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JsonWriterOptions&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Indented&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;var&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MemoryStream&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Utf8JsonWriter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteStartObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteStartObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"results"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteStartObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
               &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
               &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteEndObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteEndObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteEndObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UTF8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Please let me know what you think about this coding story. Feedback is very much appreciated 👍.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/health-checks"&gt;https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/health-checks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/NikiforovAll/how-to-add-health-checks-to-aspnetcore"&gt;https://gitlab.com/NikiforovAll/how-to-add-health-checks-to-aspnetcore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>csharp</category>
      <category>aspnetcore</category>
      <category>todayilearned</category>
      <category>codingstories</category>
    </item>
    <item>
      <title>TIPS &amp; TRICKS OF JAVASCRIPT &amp; REACT</title>
      <author>Rocky</author>
      <pubDate>Sun, 25 Jul 2021 15:29:51 +0000</pubDate>
      <link>https://dev.to/coderzx/tips-tricks-of-javascript-react-49am</link>
      <guid>https://dev.to/coderzx/tips-tricks-of-javascript-react-49am</guid>
      <description>&lt;h1&gt;TIPS 1: Easiest way of string to integer conversion.&lt;/h1&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const value_1 = "1" 

&lt;p&gt;const value_2 = "2"&lt;/p&gt;

&lt;p&gt;function add(field_1, field_2){&lt;/p&gt;

&lt;p&gt;return field_1 + field_2;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;add(+value_1, +value_2); &lt;br&gt;
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#tips-2-easiest-way-of-float-to-integer-conversion"&gt;&lt;/a&gt;TIPS 2: Easiest way of float to integer conversion.&lt;/h1&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const floatToInt = 23.9 | 0;&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#tips-3-use-global-object-always-should-not-need-localstorage"&gt;&lt;/a&gt;TIPS 3: Use Global object always should not need localStorage&lt;/h1&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;Note[if data is is static then you should use it. and don’t use any kind secret or confidential data here..]&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user = {

&lt;p&gt;first_name: "Rowan",&lt;/p&gt;

&lt;p&gt;last_name: "Atkinson"&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;window.user=user&lt;br&gt;
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#tips-3-dont-use-if-not-necessary-ternary-"&gt;&lt;/a&gt;TIPS 3: Don’t use if not necessary ternary (?:)&lt;/h1&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const DemoComponent = ()=&amp;gt;{

&lt;p&gt;const [show, setShow] = useState(false)&lt;/p&gt;

&lt;p&gt;return (&amp;lt;div&amp;gt;&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt; {show? &amp;amp;lt;Message/&amp;amp;gt;: ''}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lt;/div&amp;gt;)&lt;br&gt;
}&lt;br&gt;
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#right-way-with-ampamp"&gt;&lt;/a&gt;Right way with (&amp;amp;&amp;amp;)&lt;/h2&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const DemoComponent = ()=&amp;gt;{&lt;br&gt;
const [show, setShow] = useState(false)

&lt;p&gt;return (&amp;lt;div&amp;gt;&lt;br&gt;
     {show &amp;amp;&amp;amp; &amp;lt;Message/&amp;gt;}&lt;br&gt;
    &amp;lt;/div&amp;gt;)&lt;br&gt;
}&lt;br&gt;
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#tips-4-dont-do-it"&gt;&lt;/a&gt;TIPS 4: Don’t do it&lt;/h1&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (variable1 !== null || variable1 !== undefined || variable1 !== '') {&lt;br&gt;
     let variable2 = variable1;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#do-this-short-and-simple"&gt;&lt;/a&gt;Do this short and simple&lt;/h2&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const variable2 = variable1  || 'new';&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#tips-5-dont-do-it"&gt;&lt;/a&gt;TIPS 5: Don’t do it&lt;/h1&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Math.floor(4.9) === 4 // true&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#do-this-short-and-simple"&gt;&lt;/a&gt;Do this short and simple&lt;/h2&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~~4.9 === 4 // true&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#tips-6-dont-do-it"&gt;&lt;/a&gt;TIPS 6: Don’t do it&lt;/h1&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;switch (something) {

&lt;p&gt;case 1:&lt;br&gt;
    doSomething();&lt;/p&gt;

&lt;p&gt;break;&lt;br&gt;
case 2:&lt;br&gt;
    doSomethingElse();&lt;br&gt;
  break;&lt;br&gt;
case 3:&lt;br&gt;
    doSomethingElseAndOver();&lt;br&gt;
  break;&lt;br&gt;
  // And so on...&lt;br&gt;
}&lt;br&gt;
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#do-this-short-and-simple"&gt;&lt;/a&gt;Do this short and simple&lt;/h2&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const cases = {&lt;br&gt;
  1: doSomething(),

&lt;p&gt;2: doSomethingElse(),&lt;/p&gt;

&lt;p&gt;3: doSomethingElseAndOver()&lt;br&gt;
};&lt;br&gt;
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;[Note: This one has performance issue I prefer use this one when you have crying need. Switch statement is more faster than this solution&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#tips-7-dont-do-it"&gt;&lt;/a&gt;TIPS 7: Don’t do it&lt;/h1&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if(x == 1 || x == 5 || x == 7)  {&lt;br&gt;
  console.log('X has some value');&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#do-this-short-and-simple"&gt;&lt;/a&gt;Do this short and simple&lt;/h2&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;([1,5,7].indexOf(x) !=- 1) &amp;amp;&amp;amp; console.log('X has some value!');&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#tips-8-dont-do-it"&gt;&lt;/a&gt;TIPS 8: Don't do it&lt;/h1&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const param1 =1;&lt;br&gt;
const param2 = 2;&lt;br&gt;
const param3 = 3;&lt;br&gt;
const param4 = 4;

&lt;p&gt;function MyFunc =(param1, param2, param3, param4)=&amp;gt;{&lt;br&gt;
  console.log(param1, param2, param3, param4)&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;MyFunc(param1, param2, param3, param4)&lt;/p&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#do-this-short-and-simple"&gt;&lt;/a&gt;Do this short and simple&lt;/h2&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const params = {param1: 1, param2: 2, param3: 3, param4: 4}

&lt;p&gt;function MyFunc =({param1, param2, param3, param4})=&amp;gt;{&lt;br&gt;
  console.log(param1, param2, param3, param4)&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;


&lt;p&gt;MyFunc(params)&lt;br&gt;&lt;br&gt;
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;
&lt;br&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#tips-9-dont-do-it"&gt;&lt;/a&gt;TIPS 9: Don’t do it&lt;/h1&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Myfunc(value){&lt;br&gt;&lt;br&gt;
   if(value){&lt;br&gt;&lt;br&gt;
     console.log("you have a value")&lt;br&gt;&lt;br&gt;
   }else{&lt;br&gt;&lt;br&gt;
      throw new Error("You don't have a value")&lt;br&gt;&lt;br&gt;
   }&lt;br&gt;&lt;br&gt;
}&lt;br&gt;&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;
&lt;br&gt;
&lt;a href="https://dev.to/nipu/tips-tricks-of-javascript-react-3ncc#do-this-short-and-simple"&gt;&lt;/a&gt;Do this short and simple&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;NOTE: If you check error first then it’s don’t go else block but if you do first one it will check first value is exist then if not found it will go the else block.&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Myfunc(value){&lt;br&gt;&lt;br&gt;
   return !value ? throw new Error("You don't have a value") : console.log("you have a value")&lt;br&gt;&lt;br&gt;
}&lt;/code&gt;&lt;/pre&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>4 JavaScript Projects That Will Get You Hired</title>
      <author>Rocky</author>
      <pubDate>Sun, 25 Jul 2021 15:16:49 +0000</pubDate>
      <link>https://dev.to/coderzx/4-javascript-projects-that-will-get-you-hired-44o5</link>
      <guid>https://dev.to/coderzx/4-javascript-projects-that-will-get-you-hired-44o5</guid>
      <description>&lt;p&gt;If you're starting to apply for your first web developer junior position, then you might want to consider building out one of the 4 (if not all) projects.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Why?&lt;/span&gt;&lt;br&gt;The projects were thought out based on daily tasks that many web developers (including seniors) face every day.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;1. Consume API (Backend)&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OmxLGMC2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obc8e656beknp5kdw1sd.jpg"&gt;&lt;img alt="douglas-lopes-ehyV_XOZ4iA-unsplash" src="https://res.cloudinary.com/practicaldev/image/fetch/s--em7GDdeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--OmxLGMC2--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obc8e656beknp5kdw1sd.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When you consume someone else's API, you are talking to a third party outside of your system. You could choose what type of data you want to get, should you validate it, how do you want to store it in your database, etc.&lt;/p&gt;
&lt;p&gt;This is where you could throw in your imagination and do whatever you want with the data. You could also perform a small CRUD system once you've retrieved the data.&lt;/p&gt;

&lt;p&gt;To give you an idea, you could consume Yelp or SpaceX API (but there is a lot more out there):&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/best-nodejs-projects-for-beginners/"&gt;Nodejs Project For Beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;br&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;2. 10 Hour Challenge (Frontend)&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N8wZ05Rs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3y5ip1xxlrg5glui1d3l.jpg"&gt;&lt;img alt="sonja-langford-eIkbSc3SDtI-unsplash" src="https://res.cloudinary.com/practicaldev/image/fetch/s--lMol7XG6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N8wZ05Rs--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3y5ip1xxlrg5glui1d3l.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is my personal favorite if you're planning to be a front-end developer.&lt;/p&gt;
&lt;p&gt;Within 10 hours, you should build a single-page application using a framework that you've never used before. It has to be responsive, look good/decent, and deployed onto a hosting service.&lt;/p&gt;
&lt;p&gt;Having something like on the resume will impress every person on the interview as you will demonstrate how fast you can learn, implement, and not get destructed in the process. But again, the key is to finish it in 10 hours.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;3. Building Blog Post (Frontend, Backend)&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HCZREIm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yff1vbzjxzzz0dfv2wzj.jpg"&gt;&lt;img alt="blog" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kv75KipP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HCZREIm9--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yff1vbzjxzzz0dfv2wzj.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You've probably heard this already, but there is one key element that many developers don't implement.&lt;/p&gt;
&lt;p&gt;When we build projects with X number of records on a single page, we follow a specific process that allows us to load a specific number of records instead of loading all records at once. This process is called &lt;span&gt;pagination&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lBJZQ_bL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utjwq9qt37krz1yo7vd8.PNG"&gt;&lt;img alt="pagination" src="https://res.cloudinary.com/practicaldev/image/fetch/s--JLx-iErZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lBJZQ_bL--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utjwq9qt37krz1yo7vd8.PNG"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Have you seen something like this at the bottom of any e-commerce website? Well, that is pagination! So when you are building out a blog page, you're focusing on implementation the pagination functionality.&lt;/p&gt;
&lt;p&gt;Suppose you don't have a blog, no problem. You could talk to Yelp API or the database that you've built for the first project.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;4. Hotel System (Frontend, Backend)&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rvrgwgeH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kh8adybznrtwhoow6hm.jpg"&gt;&lt;img alt="comp" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ckhkOgdV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rvrgwgeH--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kh8adybznrtwhoow6hm.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This one will be a bit more complex and time-consuming as you will be building out the frontend, backend, database, and most importantly, building out the features.&lt;/p&gt;
&lt;p&gt;Every hotel has a specific number of available rooms, included in the packages (this is up to your imagination), for how long the guest will be staying, and a lot more.&lt;/p&gt;
&lt;p&gt;Don't go overboard and build out the Hilton system, but focus on maybe 3 to 4 features that you know could be fun to demonstrate during the interview and do small calculations.&lt;/p&gt;
&lt;p&gt;These are the four projects that could help you stand out during the interview and help you to land a job much faster than you think. You may not even get a coding challenge because you will demonstrate excellent work (that's what happened to me).&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Why i hate Javascript</title>
      <author>Mohammad Ali Chraghi</author>
      <pubDate>Sun, 25 Jul 2021 15:13:02 +0000</pubDate>
      <link>https://dev.to/alichraghi/why-i-hate-javascript-22pb</link>
      <guid>https://dev.to/alichraghi/why-i-hate-javascript-22pb</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u0p_Bl-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxjsz9wx71tjgtno0r9r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u0p_Bl-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxjsz9wx71tjgtno0r9r.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
JavaScript has been one of the most popular programming languages for many years. it is deferentially the most widely used language. But it is nonsense. These are the reasons why I  stay away from JavaScript&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#theres-no-static-type"&gt;
  &lt;/a&gt;
  there's no Static Type
&lt;/h2&gt;

&lt;p&gt;yes, there's no static type and most people think this is good because you can always change a variable type. but no! that's bad for some reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;decrease Run-time speed&lt;/li&gt;
&lt;li&gt;decrease Initialization speed&lt;/li&gt;
&lt;li&gt;programming mistakes&lt;/li&gt;
&lt;li&gt;unknown data size and then memory leaks
im not really say dynamic type is always bad but this is not understandable &lt;strong&gt;why javascript have't static typing&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#illogical-comparisons"&gt;
  &lt;/a&gt;
  illogical comparisons
&lt;/h2&gt;

&lt;p&gt;this one is more famous in JS. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UUFl3Qfj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txwjahvdk7e3k4wv0wlo.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UUFl3Qfj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txwjahvdk7e3k4wv0wlo.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
not enough? checkout the examples below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;9999999999999999&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;10000000000000000&lt;/span&gt; &lt;span class="err"&gt;→&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt; &lt;span class="err"&gt;→&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="c1"&gt;// (this website explains https://0.30000000000000004.com )&lt;/span&gt;
&lt;span class="mf"&gt;1.0000000000000001&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="err"&gt;→&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="kc"&gt;NaN&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="err"&gt;→&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="kc"&gt;NaN&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;NaN&lt;/span&gt; &lt;span class="err"&gt;→&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#global-variable-by-default"&gt;
  &lt;/a&gt;
  global variable by default
&lt;/h2&gt;

&lt;p&gt;hmm... how? and why this happen? idk&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;my_func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;my_func&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;→&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(i know you can solve it with &lt;code&gt;var&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt;)&lt;br&gt;
most languages is very sensitive to global variables. even you can't have global variable in rust (you can use &lt;code&gt;static mut&lt;/code&gt; but you need to always use it as a unsafe variable).&lt;br&gt;
because global variables can be altered by any part of the code, that make difficult to remember or reason about every possible use also they can't be limited to some parts of the code&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#sort-function"&gt;
  &lt;/a&gt;
  sort() function
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;.sort()&lt;/code&gt; function is a method for arrays. but idk why it does't like numeric arrays. see the below example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt;→&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;...&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;i have explained my reasons, but not sure you agree or not. if no explain in comments&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
    </item>
  </channel>
</rss>
