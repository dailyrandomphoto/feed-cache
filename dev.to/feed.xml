<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>When to use the 'for' loop</title>
      <author>Hazel Anne Villareal</author>
      <pubDate>Sat, 12 Dec 2020 20:59:58 +0000</pubDate>
      <link>https://dev.to/ennalezah/when-to-use-the-for-loop-5em4</link>
      <guid>https://dev.to/ennalezah/when-to-use-the-for-loop-5em4</guid>
      <description>&lt;p&gt;Nope, not Froot Loops. That cereal is nasty. ü§Æ&lt;/p&gt;

&lt;p&gt;I'm talking about JavaScript loops, and thank goodness for 'em!&lt;/p&gt;

&lt;p&gt;Loops are something you should feel confident with when coding. You're going to need it, and you'll be using it more than you think. Without it, we'd all be writing lines and lines of repeated code, which totally goes against writing &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are a few different &lt;a href="https://www.tutorialrepublic.com/javascript-tutorial/javascript-loops.php"&gt;loop statements&lt;/a&gt; to choose from, and depending on the data you're working with and what your main goal is, sometimes, it makes more sense to use one than the other.&lt;/p&gt;

&lt;p&gt;To help start us off in this series, let's take a look at the &lt;code&gt;for&lt;/code&gt; loop, the most common one in the bunch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%8F%97-structure" class="anchor"&gt;
  &lt;/a&gt;
  üèó Structure
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (initialization; condition; iteration) {
   loop body
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;initialization - Think of this as a counter. You give it a number to start with (you're &lt;em&gt;initializing&lt;/em&gt; it).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;condition - This is a logical statement that must return &lt;code&gt;true&lt;/code&gt; in order for the loop body to execute, and it uses the current value in 'initialization' to determine if the condition is &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;loop body - This is the block of code that will run, but only if condition is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;iteration - Once the loop body is done doing what it needs to do, iteration updates the counter/initialization value.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  ‚úèÔ∏è Example
&lt;/h2&gt;

&lt;p&gt;You're helping create a grading app, and the feature you're working on allows teachers to select a few of the students' grades so extra credit can be added to it. The teacher should be able to input a score, and that score will be added to the selected grades.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function extraCredit(grades, extraCreditScore) {

   for (let i = 0; i &amp;lt; grades.length; i++) {
      grades[i] += extraCreditScore;
   }

   return grades;
}

const grades = [75, 90, 83, 87, 69, 72];
const extraCreditScore = 5;

const newGrades = extraCredit(grades, extraCreditScore);
console.log(newGrades);

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Check out my &lt;a href="https://repl.it/@ennalezah/choosing-the-right-loop#script.js"&gt;Repl.it&lt;/a&gt; to see the code in action. Feel free to add the commented sections back in to see what's really happening as the loop body runs.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works" class="anchor"&gt;
  &lt;/a&gt;
  üß† How it works
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* The `for` loop flow
1. Initialization
2. Condition
3. Loop body
4. Iteration
5. Return to step 1, and repeat everything until condition becomes `false`.
*/
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So what's happening exactly when the &lt;code&gt;for&lt;/code&gt; loop runs?&lt;/p&gt;

&lt;p&gt;Well, let's, first, take a look at our function &lt;code&gt;extraCredit&lt;/code&gt;. It accepts two parameters that will be used in our loop:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;grades&lt;/code&gt; - These are the grades that the teacher selected.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;extraCreditScore&lt;/code&gt; - This is the extra credit score that was entered by the teacher.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What we're expecting to happen is that each element in &lt;code&gt;grades&lt;/code&gt; will have the &lt;code&gt;extraCreditScore&lt;/code&gt; added to it. The function will then return the array but with the updated grades.&lt;/p&gt;

&lt;p&gt;When the function executes, the first thing that's looked at is &lt;code&gt;let i = 0&lt;/code&gt; (initialization), then &lt;code&gt;i &amp;lt; grades.length&lt;/code&gt; (condition). This is basically saying, "We're starting at &lt;code&gt;75&lt;/code&gt;, the first element in &lt;code&gt;grades&lt;/code&gt; (remember, arrays start with an index of 0). The length of &lt;code&gt;grades&lt;/code&gt; is &lt;code&gt;6&lt;/code&gt;,  so is &lt;code&gt;0 &amp;lt; 6&lt;/code&gt;?"&lt;/p&gt;

&lt;p&gt;Ding, ding, ding! üé∞ Our condition statement is &lt;code&gt;true&lt;/code&gt;, which allows us to go into the loop body (&lt;code&gt;grades[i] += extraCreditScore&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;In the loop body, the value of &lt;code&gt;i&lt;/code&gt; in &lt;code&gt;grades[i]&lt;/code&gt; takes the current value of &lt;code&gt;i&lt;/code&gt; in initialization (&lt;code&gt;i = 0&lt;/code&gt;), so &lt;code&gt;grades[0] == 75&lt;/code&gt;. The loop body is saying, "&lt;code&gt;75 + 5&lt;/code&gt;(&lt;code&gt;grades[0]&lt;/code&gt; + &lt;code&gt;extraCreditScore&lt;/code&gt;), then reassign &lt;code&gt;grades[0]&lt;/code&gt; with the updated grade, so now, &lt;code&gt;grades[0] = 80&lt;/code&gt;."&lt;/p&gt;

&lt;p&gt;Once that loop body is done running, our code goes back up to &lt;code&gt;i++&lt;/code&gt; (iteration). This is saying, "Increase the current value of &lt;code&gt;i&lt;/code&gt; by 1."&lt;/p&gt;

&lt;p&gt;Aaaand... we're back to initialization, but this time, &lt;code&gt;i == 1&lt;/code&gt;. The flow, then, keeps repeating until condition returns &lt;code&gt;false&lt;/code&gt;. When that happens, it exits the loop body, and our code moves on to &lt;code&gt;return grades&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-it" class="anchor"&gt;
  &lt;/a&gt;
  üéØ When to use it
&lt;/h2&gt;

&lt;p&gt;Use this loop when you know exactly how many times you need the loop to run. This is why the &lt;code&gt;for&lt;/code&gt; loop is often times used on arrays.&lt;/p&gt;

&lt;p&gt;It uses the length of an array to tell it to loop x amount of times. Initialization keeps track of the element in the array (by index number) that is being "worked on." Loop body is what will update the value of the elem being worked on. And iteration keeps things moving along.&lt;/p&gt;

&lt;p&gt;Whew - that was a lot! üòÖ But I hope you now have a better understanding of how to use a &lt;code&gt;for&lt;/code&gt; loop, what's happening while it's running, and when to use it.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Properly Understanding the DOM</title>
      <author>Josh Carvel</author>
      <pubDate>Sat, 12 Dec 2020 11:12:39 +0000</pubDate>
      <link>https://dev.to/joshcarvel/properly-understanding-the-dom-2cg0</link>
      <guid>https://dev.to/joshcarvel/properly-understanding-the-dom-2cg0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro üß∞
&lt;/h2&gt;

&lt;p&gt;If you're a front-end developer, you've probably heard of the DOM, or used some DOM methods in JavaScript. However, you may not know exactly what it is, or how it works.&lt;/p&gt;

&lt;p&gt;This article will give you a solid &lt;em&gt;understanding&lt;/em&gt; of the DOM and how it fits in with the rendering of webpages on the screen. Along the way, we'll cover some crucial concepts to do with JavaScript objects, the browser and rendering. This will help develop your expertise in web development and make you more productive with the tools that the DOM provides, even if you are using a JavaScript library or framework.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Some familiarity with HTML, CSS and JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-browser" class="anchor"&gt;
  &lt;/a&gt;
  The browser üíª
&lt;/h2&gt;

&lt;p&gt;Firstly, we need to understand the web browser on your device a little better. In this article I'll refer to two core components of browsers.&lt;/p&gt;

&lt;p&gt;The first is the &lt;strong&gt;rendering engine&lt;/strong&gt; (also called the browser engine), which reads HTML and CSS files and &lt;strong&gt;renders&lt;/strong&gt; (outputs) the content on the screen. It can actually be used outside the browser, for example email clients use a rendering engine to display HTML email. You may have heard of the rendering engines used in popular browsers - &lt;em&gt;Blink&lt;/em&gt; (Chromium browsers, i.e. Chrome, recent versions of Microsoft Edge and many more), &lt;em&gt;Gecko&lt;/em&gt; (Firefox) and &lt;em&gt;Webkit&lt;/em&gt; (Safari).&lt;/p&gt;

&lt;p&gt;The second component is the &lt;strong&gt;JavaScript engine&lt;/strong&gt;, which reads and runs any JavaScript files given to it. Again, this is a standalone component that can be run outside the browser. The most popular one is Google's &lt;em&gt;V8&lt;/em&gt;, used in Chromium browsers and by NodeJS to run JavaScript on the server. Firefox uses &lt;em&gt;SpiderMonkey&lt;/em&gt; and Safari's is called &lt;em&gt;JavaScriptCore&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The rendering engine and JavaScript engine work together inside your browser to produce webpages. They tend to be written mainly in the programming language C++.&lt;/p&gt;

&lt;p&gt;The core functionality that browsers provide is based on certain standards, but when referring to the  features browsers make available to developers, I'll use the Mozilla Developer Network web docs, because they are a more accessible guide to the tools available to us and how they are implemented in different browsers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-global-object" class="anchor"&gt;
  &lt;/a&gt;
  The global object üåç
&lt;/h2&gt;

&lt;p&gt;Another thing it's important to understand properly is &lt;em&gt;objects&lt;/em&gt; in JavaScript. In programming, we describe the world with objects - little containers of data that link to other data.&lt;/p&gt;

&lt;p&gt;Let's imagine for a moment we wanted to describe the whole world. That object would have a lot of &lt;em&gt;things&lt;/em&gt; on it, i.e. &lt;strong&gt;properties.&lt;/strong&gt; Things that exist in nature like trees, human inventions like the mobile phone, and things you can do like 'eat cake'. The last one would be a function in JavaScript, and the property is called a &lt;strong&gt;method&lt;/strong&gt; in that case.&lt;/p&gt;

&lt;p&gt;In our example, the world object is the 'place we put all the stuff'. JavaScript also has a place like this, and it's called the &lt;strong&gt;global object.&lt;/strong&gt; Assuming my JavaScript is running in the browser, the global object contains properties and methods related to the browser and the webpage.&lt;/p&gt;

&lt;p&gt;It's quite hard to define what the global browser object actually represents. Your webpage runs in a tab, with unique elements and events happening. A page in another tab is separate, running different JavaScript with its own global object. So we might call the global object the 'tab' object. But you also have access to browser properties, like browser history and storage for example. So what should we call it?&lt;/p&gt;

&lt;p&gt;Well, the browser provides it in a variable called &lt;code&gt;window&lt;/code&gt;. But it doesn't exactly represent a user interface window. It's just a label for the 'place we put all the stuff'. JavaScript makes it easy to access this place - we don't need to say &lt;code&gt;window&lt;/code&gt; to access the stuff on it, just saying &lt;code&gt;myVariable&lt;/code&gt; is the same as saying &lt;code&gt;window.myVariable&lt;/code&gt; (in most cases).&lt;/p&gt;

&lt;p&gt;The definition of what is always on the window object has been standardised, using &lt;strong&gt;interfaces.&lt;/strong&gt; This is an object-orientated programming term which refers to the &lt;em&gt;description&lt;/em&gt; of an object, rather than the object itself. Though an interface is generally a point of interaction, here it means the description of an object, because that enables the interaction of objects to happen smoothly, since they know what properties and methods another object has.&lt;/p&gt;

&lt;p&gt;Here's two things we should know about interfaces: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The interface name is written in PascalCase as a convention.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interfaces can take properties and methods from other interfaces, by &lt;em&gt;inheriting&lt;/em&gt; them from an ancestor interface, or getting them from an unrelated interface called a &lt;em&gt;mixin&lt;/em&gt;. We'll see this later.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#web-apis" class="anchor"&gt;
  &lt;/a&gt;
  Web APIs üí¨
&lt;/h2&gt;

&lt;p&gt;Here's MDN's documentation on the interface for the window object: &lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window"&gt;Window&lt;/a&gt;.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Have a look and you'll see there's quite a lot on there. The functionality the browser gives us to communicate with it is known as &lt;strong&gt;Web APIs.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;API stands for application programming interface. In other words, someone wrote an &lt;em&gt;application&lt;/em&gt;, in this case the browser, and they also wrote a set of features and rules so you could &lt;em&gt;interface&lt;/em&gt; (interact) with it using &lt;em&gt;programming&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For example, let's say you use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;fetch()&lt;/a&gt; in your JavaScript code to get a resource from the internet. That's not part of the JavaScript language - you couldn't use it in JavaScript not being run by a browser. But in a browser you can use it, because the browser attached the fetch method to the window object when it created it.&lt;/p&gt;

&lt;p&gt;The Web APIs make use of objects with properties and methods, just like the window object. In the fetch API, one of these is the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Response"&gt;Response&lt;/a&gt; object. The API defines exactly what the structure of the object should be. &lt;/p&gt;

&lt;p&gt;But we're not going to talk about all the weird and wonderful APIs available to us in the browser: we want to know what the DOM is. There's just one more thing to look at first: a property of the window object called &lt;em&gt;document&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#documents-and-trees" class="anchor"&gt;
  &lt;/a&gt;
  Documents and trees üå≤
&lt;/h2&gt;

&lt;p&gt;Just like how the window object is the container for almost all of the 'global' stuff (console, scrollbars, window dimensions etc.) in your browser, the &lt;strong&gt;document&lt;/strong&gt; is a container for the &lt;em&gt;content&lt;/em&gt;, i.e. the webpage itself. It represents what you &lt;em&gt;give&lt;/em&gt; the browser, not what's already there. This can be an HTML, XML or SVG document, but we're just going to talk about HTML.&lt;/p&gt;

&lt;p&gt;You can give your browser a HTML file by asking it to open one stored locally on your device, or you can request to view a website, causing the browser to retrieve the file from that website's server via the internet. The browser's rendering engine (mentioned at the beginning) then does two things: &lt;strong&gt;parse&lt;/strong&gt; the HTML (read the code line by line), then create a &lt;strong&gt;tree&lt;/strong&gt; of elements.&lt;/p&gt;

&lt;p&gt;When I say create a tree, I'm not talking about planting. It's one way of storing data with a programming language, by creating objects that have 'family' relationships between them. These 'family' relationships are the same you create in an HTML document.&lt;/p&gt;

&lt;p&gt;The relationships are defined by &lt;em&gt;edges&lt;/em&gt; (which clearly ought to be called 'branches', but never mind...). The objects at the end of an edge are known as &lt;strong&gt;nodes&lt;/strong&gt;, because this means the place where lines join (it's also the place where a leaf and stem join on a plant, so it's a bit closer to the tree metaphor). But remember, a node is still just a type of object.&lt;/p&gt;

&lt;p&gt;The node at the very top of the tree is called the &lt;strong&gt;root&lt;/strong&gt;. Visually, the structure would be sort of like a tree. What the browser creates is known as a &lt;strong&gt;document tree&lt;/strong&gt;: a node tree where the root node is a document. It stores information about the document in that root node, and each HTML element on the page and any text inside them also has its own node.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qCOqfAsn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j2mhflsga77dvse84xlw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qCOqfAsn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j2mhflsga77dvse84xlw.png" alt="A document tree visualised. Birger Eriksson, CC BY-SA 3.0, via Wikimedia Commons (side banner removed)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enter-the-dom" class="anchor"&gt;
  &lt;/a&gt;
  Enter the DOM üìÑ
&lt;/h2&gt;

&lt;p&gt;Let's finally talk about the DOM. &lt;/p&gt;

&lt;p&gt;The DOM, technically, is &lt;em&gt;not&lt;/em&gt; the document tree, i.e. the data structure itself. It's the model that describes how the data should be stored and interacted with. However, you will often hear people saying things like 'manipulating the DOM', which is simpler to say than 'manipulating the document tree'. I'll use DOM in this sense too, for convenience.&lt;/p&gt;

&lt;p&gt;The technical term for it is an 'object model', which means it defines some objects and how they can be manipulated, but we don't need to worry about that. Just know that's what DOM stands for: &lt;strong&gt;Document Object Model&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The key thing is that the DOM is one of the browser's Web APIs. We can get information about (read) DOM nodes and change them (write) using JavaScript. We know &lt;em&gt;how&lt;/em&gt; to do this because it's described in the interfaces for the DOM API.&lt;/p&gt;

&lt;p&gt;To be clear, the DOM is a generic API for manipulating documents. There is a specific offshoot for HTML called the &lt;strong&gt;HTML DOM API&lt;/strong&gt; (remember that other types of documents can be modelled by the DOM). But this distinction doesn't really affect us practically.&lt;/p&gt;

&lt;p&gt;We can see the interfaces we need in MDN's documentation on the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model"&gt;DOM&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API"&gt;HTML DOM&lt;/a&gt;. (The 'official' description is currently WHATWG's &lt;a href="https://dom.spec.whatwg.org/"&gt;DOM Living Standard&lt;/a&gt;, and the HTML DOM is defined in WHATWG's &lt;a href="https://html.spec.whatwg.org/multipage/"&gt;HTML Living Standard&lt;/a&gt;.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-dom" class="anchor"&gt;
  &lt;/a&gt;
  Using the DOM üë©‚Äçüíª
&lt;/h2&gt;

&lt;p&gt;Let's use an example to understand interfaces.&lt;/p&gt;

&lt;p&gt;In my JavaScript (which the browser's rendering engine discovered in my HTML document via the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag, and the browser's JavaScript engine is running with &lt;code&gt;window&lt;/code&gt; as the global object), I have access to the &lt;code&gt;document&lt;/code&gt; object, as discussed.&lt;/p&gt;

&lt;p&gt;It's described by the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document"&gt;Document&lt;/a&gt; interface. On the list of methods, you will see &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector"&gt;Document.querySelector()&lt;/a&gt;. This lets me use CSS selector syntax to get an &lt;strong&gt;element&lt;/strong&gt; from the document - in this case, an HTML element, because our document is HTML.&lt;/p&gt;

&lt;p&gt;Now say I have an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element in my HTML file with an id &lt;code&gt;my-input&lt;/code&gt;. I write the following in my JavaScript:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const input = document.querySelector('#my-input');&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When the JavaScript engine parses my code, it will need to work out the value of the input variable, so it will run the function, i.e. in C++ it will go search the document tree for the right element (C++ object), find it, convert it to a JavaScript object and give it back to the JavaScript engine. If it doesn't find one, it returns &lt;code&gt;null&lt;/code&gt;, a primitive value in JavaScript essentially meaning 'no value'.&lt;/p&gt;

&lt;p&gt;In my example, I now have a variable pointing to the element object. Specifically, it's a HTML input element, described by the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement"&gt;HTMLInputElement&lt;/a&gt; interface (part of the HTML DOM). You can see from the properties listed that I can access the value (the text) in the input and read/write it. Pretty useful. &lt;/p&gt;

&lt;p&gt;Now looking at the methods, you'll see things like &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus"&gt;blur()&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus"&gt;focus()&lt;/a&gt;. Very useful too. But look at where they come from - they are &lt;em&gt;inherited&lt;/em&gt; from &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement"&gt;HTMLElement&lt;/a&gt;. My &lt;code&gt;input&lt;/code&gt; is a type of HTMLElement, so it gets properties and methods shared by all HTML elements. &lt;/p&gt;

&lt;p&gt;The inheritance doesn't stop there - HTMLElement is a type of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element"&gt;Element&lt;/a&gt; (now we're back in the generic DOM API). There's some useful stuff there too, like &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute"&gt;setAttribute()&lt;/a&gt;, so I could add, say, a class on my input field in certain circumstances.&lt;/p&gt;

&lt;p&gt;Let's keep moving on up. An element is a type of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Node"&gt;Node&lt;/a&gt;. We know what those are. Element isn't the only type of node - Document is also, of course, a type of Node, since it's the root node of the tree. And we mentioned before that the text inside an element gets its own node, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Text"&gt;Text&lt;/a&gt;, which you can read/write from the node with the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent"&gt;textContent&lt;/a&gt; property.&lt;/p&gt;

&lt;p&gt;Note: we may be confused here because there is also an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText"&gt;HTMLElement.innerText&lt;/a&gt; and an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML"&gt;Element.innerHTML&lt;/a&gt; method. As MDN &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent#Differences_from_innerText"&gt;explains&lt;/a&gt;, these methods have poorer performance and &lt;code&gt;innerHTML&lt;/code&gt; can leave you vulnerable to &lt;em&gt;cross-site scripting&lt;/em&gt; (e.g. I get the value from my input and set the &lt;code&gt;innerHTML&lt;/code&gt; of a &lt;code&gt;div&lt;/code&gt; somewhere else to whatever it is - someone could have written a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag with malicious JavaScript code that will be run on my page). So if I just want to add text to an element, &lt;code&gt;textContent&lt;/code&gt; is the better property to use.&lt;/p&gt;

&lt;p&gt;Now we get to the top of our chain of our inheritance - all of these are a type of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget"&gt;EventTarget&lt;/a&gt;. And so is Window. This allows me to add or remove event listeners, which allow me to respond to page &lt;strong&gt;events&lt;/strong&gt; (like clicks) with a JavaScript function.&lt;/p&gt;

&lt;p&gt;One last thing to discuss here: let's say we used &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll"&gt;Document.querySelectorAll()&lt;/a&gt; to get &lt;em&gt;all&lt;/em&gt; inputs of a particular type. Note that it returns a &lt;em&gt;NodeList.&lt;/em&gt; That's annoying, why not a JavaScript array? Well, remember that the DOM isn't part of JavaScript - it's &lt;em&gt;language-independent&lt;/em&gt;. You could use DOM methods in Python, for example. That means working with DOM objects in JavaScript isn't quite like working with any other kind of object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-dom-in-devtools" class="anchor"&gt;
  &lt;/a&gt;
  The DOM in DevTools üî®
&lt;/h2&gt;

&lt;p&gt;Handily, browsers give us some nice tools that help us view and interact with the DOM.&lt;/p&gt;

&lt;p&gt;Here I opened Chrome developer tools on the Google homepage and inspected their festive logo &lt;code&gt;img&lt;/code&gt; element:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YjZNUO90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9wmk9feuqe606jw9yu50.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YjZNUO90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9wmk9feuqe606jw9yu50.png" alt="The Google logo img element inspected in Chrome devtools Elements tab"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Elements tab shows us the image tag and its place in the document. It looks like it's just an HTML tag, but it's not. We could see the original HTML by right-clicking the page and selecting 'view page source'. &lt;/p&gt;

&lt;p&gt;In fact, the Elements tab is a visual representation of the DOM, and the elements in it are objects. &lt;/p&gt;

&lt;p&gt;Let's prove this by going to the Console tab. If we enter &lt;code&gt;$0&lt;/code&gt; (the Console shortcut for logging the element currently selected in the Elements tab) this will just show us the same representation. But if I use &lt;code&gt;console.dir&lt;/code&gt; I can see the object:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7v0IC1aN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3stzbmm7cgi8a3uw9kbc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7v0IC1aN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3stzbmm7cgi8a3uw9kbc.png" alt="The Google logo img element inspected in Chrome devtools console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we can see all the object's properties, including those inherited properties.&lt;/p&gt;

&lt;p&gt;In JavaScript, the object an object inherits from is called its &lt;strong&gt;prototype&lt;/strong&gt;, i.e. the thing you base something else on. Our image element inherits properties and methods from its prototype, 'HTMLImageElement', which in turn inherits from its prototype, 'HTMLELement', and so on. This is a &lt;strong&gt;prototype chain&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We can see the prototype object by expanding the &lt;code&gt;__proto__&lt;/code&gt; property. If we kept following the chain up we'd end up at &lt;code&gt;Object&lt;/code&gt;, which is the object that contains the properties and methods &lt;em&gt;all&lt;/em&gt; JavaScript objects inherit. This is just for demonstration - you won't need to do this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f18FeApn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pfk50zdd484fi5wk03xn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f18FeApn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pfk50zdd484fi5wk03xn.png" alt="The Google logo img element __proto__ object inspected in Chrome devtools console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All of these objects in the chain, except the actual image element, already existed on the window object of the JavaScript engine. If you did &lt;code&gt;console.log(window)&lt;/code&gt;  on a blank HTML page you could still find them. When I accessed the logo &lt;code&gt;img&lt;/code&gt; element using the DOM and it became a JavaScript object, its prototype chain was set with those objects.&lt;/p&gt;

&lt;p&gt;The property values were either provided as attributes in the HTML image tag, set using the DOM API in JavaScript, just known by the browser e.g. properties relating to dimensions, or have remained as default values since the object was created. If you just create a plain image element without any further information, the values are all defaults.&lt;/p&gt;

&lt;p&gt;Hopefully you now have a better idea of what DOM objects are and how to inspect them. If you want to learn more about inspecting the DOM with Chrome devtools, Google provides a guide &lt;a href="https://developers.google.com/web/tools/chrome-devtools/dom"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rendering" class="anchor"&gt;
  &lt;/a&gt;
  Rendering üé®
&lt;/h2&gt;

&lt;p&gt;Now we understand the DOM and how to use it, let‚Äôs look more closely at the process of rendering a page, so we can think more carefully about how we use the DOM.&lt;/p&gt;

&lt;p&gt;Any site you visit is essentially an HTML file (the 'document'), with references to other files (HTML, CSS or JavaScript) which are all stored on a server and sent to the browser via the internet. The browser parses the HTML and starts constructing the DOM.&lt;/p&gt;

&lt;p&gt;However, JavaScript can affect the parsing process. If the browser gets to a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;  tag in the HTML, it will pause DOM construction by default while the JavaScript code in the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag is executed, because the JavaScript might alter the HTML content by using the DOM API. &lt;/p&gt;

&lt;p&gt;This is why it's often advised that you put the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag at the &lt;em&gt;bottom&lt;/em&gt; of your HTML, so the HTML can be loaded first. Alternatively, you can change the default behaviour by using the &lt;code&gt;defer&lt;/code&gt; or &lt;code&gt;async&lt;/code&gt; attributes on the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script"&gt;script tag&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The browser also creates a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model"&gt;CSS Object Model&lt;/a&gt; (CSSOM). This is similar to the DOM, but instead of representing your HTML document, it represents your CSS style sheets and their content with interfaces. &lt;/p&gt;

&lt;p&gt;It‚Äôs an API, so you &lt;em&gt;could&lt;/em&gt; interact with it to alter your styles, but you are better off defining all the styles you will need in your stylesheet first, then if necessary changing what they apply to using the DOM, by altering the class names on your elements (or using the &lt;code&gt;style&lt;/code&gt; attribute on the elements if you prefer).&lt;/p&gt;

&lt;p&gt;To get ready for rendering, the DOM and CSSOM are combined to create another tree, the &lt;strong&gt;render tree&lt;/strong&gt;. Anything that won‚Äôt be displayed on the page, e.g. the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element, is excluded. The render tree contains all the information the browser needs to display the webpage.&lt;/p&gt;

&lt;p&gt;The browser assembles the &lt;strong&gt;layout&lt;/strong&gt; of elements on the page (like doing a pencil sketch before a painting), then &lt;strong&gt;paints&lt;/strong&gt; the elements to the screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_GypqLGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d39r3tmiw48rn9pwntt5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_GypqLGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d39r3tmiw48rn9pwntt5.png" alt="A simple visualisation of the rendering process"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means that if we respond to user interaction on the page by changing the DOM, the browser will have to do some work to re-layout and repaint items on the page. This has a performance cost, and could be what we would call &lt;em&gt;expensive&lt;/em&gt; in performance terms. However, the browser responds to events efficiently as possible, only doing as much re-layout and repainting as necessary. This is explained in &lt;a href="https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/#Dynamic_changes"&gt;Tali Garsiel's research on how browsers work&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Bear that in mind, because there is sometimes a misconception that the reason we have fancy front-end frameworks is that the &lt;em&gt;DOM itself&lt;/em&gt; is slow. That wouldn't make sense - frameworks &lt;em&gt;still have to use the DOM&lt;/em&gt;, so they couldn't possibly make it faster. Really, it's all down to how you &lt;em&gt;use&lt;/em&gt; the DOM.&lt;/p&gt;

&lt;p&gt;Let's look briefly at the history and present of DOM manipulation to understand this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#libraries-frameworks-and-plain-js" class="anchor"&gt;
  &lt;/a&gt;
  Libraries, frameworks and plain JS üìö
&lt;/h2&gt;

&lt;p&gt;You will often hear about JavaScript &lt;strong&gt;libraries&lt;/strong&gt; and &lt;strong&gt;frameworks&lt;/strong&gt;. A library gives you additional methods written by other developers, and you can call those methods whenever you want. A framework has more control of your application architecture, so &lt;em&gt;it&lt;/em&gt; calls the functions in your code when appropriate, not the other way around.&lt;/p&gt;

&lt;p&gt;For a long time, jQuery was the standard way to write JavaScript. It's a library that was created in 2006 to make DOM manipulation easier at a time when the DOM API was limited and very inconsistently implemented by browsers. It's still used today and some people like using its concise syntax, but its core functionality can now be achieved in modern browsers using plain JavaScript.&lt;/p&gt;

&lt;p&gt;Modern libraries and frameworks don't need to tackle deficiency in the DOM, but they do aim to improve your efficiency and productivity in using it. It's not the sole reason they exist, but it's a big one. &lt;/p&gt;

&lt;p&gt;If you are writing a simple website with limited user interaction, you probably won't run into the efficiency problem, provided you're not doing something very silly performance-wise with your DOM manipulation. But simple sites are not all we have on the web today ‚Äì web &lt;em&gt;applications&lt;/em&gt; such as Facebook are very common. &lt;/p&gt;

&lt;p&gt;These applications contain dynamic, constantly changing content that heavily rely on user input and pulling new data from the server. JavaScript pulls the strings of these changes and is central to the operation of the application. This is a big departure from what the whole infrastructure of serving webpages to the browser was originally designed for. But the problem is not that lots of changes need to be made, it's how to tell the browser exactly &lt;em&gt;which&lt;/em&gt; bits need to change, so you're not re-rendering more than necessary, and to do so without causing any bugs.&lt;/p&gt;

&lt;p&gt;The core front end libraries and frameworks most used today are React, Angular and Vue.js. These aim to take efficient DOM manipulation off your hands, so there is more emphasis on &lt;em&gt;what&lt;/em&gt; you want the page to look like, not &lt;em&gt;how&lt;/em&gt; this should be achieved. If you want to make web applications professionally, your best bet is to simply pick one of these frameworks and learn it (you don't &lt;em&gt;have&lt;/em&gt; to, but most companies use one of them or one like them).&lt;/p&gt;

&lt;p&gt;If you are making simpler websites or are just curious to learn the DOM API, there are lots of guides to plain JavaScript DOM manipulation, like &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents"&gt;this one by MDN&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Let's recap the key points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The DOM is an API provided by browsers. The browser's rendering engine models your HTML document as a document tree and allows you to interact with it.&lt;/li&gt;
&lt;li&gt;The browser window is the global object in the browser's JavaScript engine. This gives you access to the document tree where things on the page are represented as objects, described by interfaces.&lt;/li&gt;
&lt;li&gt;Front end libraries and frameworks can help improve your productivity with the DOM, but you should be aware of why you are using them to ensure you get the best out of them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading and happy DOM manipulation! üôÇ &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sources" class="anchor"&gt;
  &lt;/a&gt;
  Sources
&lt;/h2&gt;

&lt;p&gt;I cross-reference my sources as much as possible. If you think some information in this article is incorrect, please leave a polite comment or message me with supporting evidence üôÇ.&lt;/p&gt;

&lt;p&gt;* = particularly recommended for further study&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Browser_engine"&gt;Browser engine - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/JavaScript_engine"&gt;JavaScript engine - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://javascript.info/global-object"&gt;Global object - javascript.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window"&gt;Window - MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/API"&gt;API - MDN Glossary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Tree_(data_structure)"&gt;Tree (data structure) - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/TR/WD-DOM/introduction.html"&gt;What is the Document Object Model? - w3.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;* &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model"&gt;Document Object Model (and related pages) - MDN&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;* &lt;a href="https://www.youtube.com/watch?v=SmE4OwHztCc"&gt;Ryan Seddon: So how does the browser actually render a website | JSConf EU 2015&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/"&gt;How Browsers Work: Behind the scenes of modern web browsers - Tali Garsiel, published at html5rocks.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Document tree image credit: Birger Eriksson, &lt;a href="https://creativecommons.org/licenses/by-sa/3.0/"&gt;CC BY-SA 3.0&lt;/a&gt;, via Wikimedia Commons (side banner removed)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Proxy Pattern in Go</title>
      <author>tomassirio</author>
      <pubDate>Fri, 11 Dec 2020 22:32:22 +0000</pubDate>
      <link>https://dev.to/tomassirio/proxy-pattern-in-go-4e1a</link>
      <guid>https://dev.to/tomassirio/proxy-pattern-in-go-4e1a</guid>
      <description>&lt;p&gt;Hey there!&lt;/p&gt;

&lt;p&gt;In this week's post, I'm bringing you the proxy design pattern. &lt;/p&gt;

&lt;p&gt;Proxies may be used for a lot of things, such as communication, logging, caching, etc. So in this post, I'm going to show you two implementations of it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#protection-proxy" class="anchor"&gt;
  &lt;/a&gt;
  Protection Proxy
&lt;/h2&gt;

&lt;p&gt;Let's assume you have a car struct and a Driven interface that implements a Drive() function. Nothing too fancy for this example, but it will make a click in the end:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Driven&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Drive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Drive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Car is being driven"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The Car struct is implementing the Driven interface with the Drive() function.&lt;/p&gt;

&lt;p&gt;So now you'd be able to just instantiate a car and make it drive regardless of the driver's condition. So for example, if our Car's driver was underage, there'd be nothing stopping him from driving the car. And that's a big 'no no' where I come from. &lt;/p&gt;

&lt;p&gt;Let's assume there is a Driver struct as well with just an Age attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Driver&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Age&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So Let's create a CarProxy and a constructor for this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;CarProxy&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;car&lt;/span&gt;    &lt;span class="n"&gt;Car&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Driver&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewCarProxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Driver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;CarProxy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;CarProxy&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The CarProxy will have a Car and a Driver as it's attributes and will receive the driver as a parameter. Since cars are cars and we don't care that much about them for this example, we are going to create a generic car for the car proxy.&lt;/p&gt;

&lt;p&gt;So now we need to implement the Driven interface for the CarProxy and we are going to restrict the user from being underage to use this method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;CarProxy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Drive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Age&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;car&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Drive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Driver too young!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's test the results in the main function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;car&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewCarProxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Driver&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;car&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Drive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run main.go
Driver too young!
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But if we change the Driver's age to 22 for example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run main.go
Car is being driven
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see we didn't have to add things to the car struct in order to get the restrictions we needed for it. Instead, we just applied those restrictions to an upper layer (or proxy) to make these modifications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtual-proxy" class="anchor"&gt;
  &lt;/a&gt;
  Virtual Proxy
&lt;/h2&gt;

&lt;p&gt;For this example let's assume you want to create an Image Drawer for different types of formats.&lt;/p&gt;

&lt;p&gt;Then let's create an Image interface that will have a Draw() signature:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Draw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we can create a struct for a Bitmap image which will be constructed from a filename:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Bitmap&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewBitmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Bitmap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Loading image from"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Bitmap&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Bitmap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Draw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Drawing image"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;DrawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"About to draw the image"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Draw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Done drawing the image"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Again, nothing fancy. I also added a DrawImage method which would show the progress of the image while being drawn.&lt;/p&gt;

&lt;p&gt;And this would work just fine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;bmp&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewBitmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"demo.png"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;DrawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run main.go

Loading image from demo.png
About to draw the image
Drawing image demo.png
Done drawing the image
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But there would be an issue if, for example, we used the constructor without storing it in a variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NewBitmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"demo.png"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Loading image from demo.png
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our constructor would be lying to us! And that's also a big 'no no' from where I come from.&lt;/p&gt;

&lt;p&gt;So let's use a proxy for this issue. To be more specific, a Virtual Proxy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;LazyBitmap&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;bitmap&lt;/span&gt;   &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Bitmap&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewLazyBitmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;LazyBitmap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;LazyBitmap&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our LazyBitmap struct will store the filename and a bitmap but will only receive the filename while instantiated leaving the bitmap as nil attribute. &lt;/p&gt;

&lt;p&gt;This is because we don't want the bitmap to be created before being rendered! So Let's render it when we actually need it to be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;LazyBitmap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Draw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bitmap&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bitmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NewBitmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bitmap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Draw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This way we won't be loading infinite instances of the bitmap.  It will mostly work as a singleton attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;bmp&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewLazyBitmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"demo.png"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;DrawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We now instantiate the bitmap as a LazyBitmap and we can still use the DrawImage() method because it will call the bitmap's Draw() method on the inside. However this time the result will be a little bit different:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run main.go                                                                           

About to draw the image
Loading image from demo.png
Drawing image demo.png
Done drawing the image
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see. The image is now loaded after the Draw method is called and not before, which is what we wanted.&lt;/p&gt;

&lt;p&gt;That's all for this week, I hope you are learning as much as I do with these posts.&lt;/p&gt;

</description>
      <category>go</category>
      <category>productivity</category>
      <category>design</category>
      <category>programming</category>
    </item>
    <item>
      <title>Browser Communications</title>
      <author>DaNeil Coulthard</author>
      <pubDate>Fri, 11 Dec 2020 21:16:54 +0000</pubDate>
      <link>https://dev.to/caffiendkitten/browser-communications-11p6</link>
      <guid>https://dev.to/caffiendkitten/browser-communications-11p6</guid>
      <description>&lt;p&gt;Hope you read about &lt;a href="https://dev.to/caffiendkitten/what-is-your-browser-doing-3pg"&gt;What browsers are doing&lt;/a&gt; when you make a request for a resource and &lt;a href="https://dev.to/caffiendkitten/how-do-browser-make-websites-3709"&gt;How do browsers make websites&lt;/a&gt; because today we are going to continue this series with How Browsers communicate.&lt;/p&gt;

&lt;p&gt;We already established that there are no set rules when dealing with the web but then how are browsers are to communicate?&lt;br&gt;
&lt;a href="https://i.giphy.com/media/9uIvZp1vfcWnNt4u5A/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/9uIvZp1vfcWnNt4u5A/giphy.gif" alt="hmmmmm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#protocols" class="anchor"&gt;
  &lt;/a&gt;
  Protocols
&lt;/h1&gt;

&lt;p&gt;Browsers communicate using "protocols"... Or really &lt;em&gt;any&lt;/em&gt; network based communications use protocols.&lt;br&gt;
Protocols are a, loosely followed, set of rules that say how routing and addressing packets of data is done to allow two or more entities to share information. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hKIvsmv2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.myf5.net/upload/networkprotocol.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hKIvsmv2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.myf5.net/upload/networkprotocol.jpg" alt=""&gt;&lt;/a&gt;&lt;br&gt;
As shown above, there are a &lt;em&gt;lot&lt;/em&gt; of different types of protocols that are used at different stages of network communication. But, only a "few" of these make up the "Internet Protocol Stack" or the "Internet Protocol Suite". &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-internet-protocol-suite" class="anchor"&gt;
  &lt;/a&gt;
  The Internet Protocol Suite
&lt;/h1&gt;

&lt;p&gt;The IPS is a conceptual model and suite of communications protocols (or "stack of protocols") used in the Internet to provide end-to-end data communication and specifying how data should be packetized, addressed, transmitted, routed, and received.&lt;/p&gt;

&lt;p&gt;The foundational protocols in the suite are the Transmission Control Protocol (TCP) and the Internet Protocol (IP); and thus it is commonly referred to as simply the TCP/IP Suite.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M2g59_iT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aoos8n2651h5gtmdhmih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M2g59_iT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aoos8n2651h5gtmdhmih.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
Internet Protocol Stack:&lt;br&gt; Note: Some of the layers of the Internet Protocol Suite are not exactly where this diagram shows them or are used at multiple stages in the stack depending on their use.



&lt;h2&gt;
  &lt;a href="#internet-protocol" class="anchor"&gt;
  &lt;/a&gt;
  Internet Protocol
&lt;/h2&gt;

&lt;p&gt;The Internet Protocol (IP) is generally considered the base protocol that all other Internet based protocols sit on top of, is the first to be interacted with when data is received, and introduces the "virtual network abstraction that is the basic principle of the Internet model." (1)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--94AWXk9k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://networkencyclopedia.com/wp-content/uploads/2019/09/internet-protocol-in-tcp-ip.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--94AWXk9k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://networkencyclopedia.com/wp-content/uploads/2019/09/internet-protocol-in-tcp-ip.jpg" alt="Internet Protocol Stack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the very basics level, the Internet Protocol uses a "Internet Datagram" to exchange data though specified encapsulation and lacks any functionality for error handling when datagrams are either duplicated, lost, or arrive to the remote host in another order than they were sent.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9OPcOXlB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.w3.org/People/Frystyk/thesis/IPFrame.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9OPcOXlB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.w3.org/People/Frystyk/thesis/IPFrame.gif" alt='IP Datagram caption="IP Datagram"'&gt;&lt;/a&gt;IP Datagram&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tcpudp" class="anchor"&gt;
  &lt;/a&gt;
  TCP/UDP
&lt;/h2&gt;

&lt;p&gt;The TCP (Transmission Control Protocol) and UDP (User Datagram Protocol) protocols that sit on top of the Internet Protocols in the "Transport Layer" of the TCP/IP Model. Note:: There are a few other protocols at this level, but TCP and UDP are the most commonly used.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UDP&lt;/strong&gt;&lt;br&gt;
The UDP is an end-to-end communications protocol that contains just enough information to transfer a "user datagram" from one process on the transmitting host to another process on the receiving host. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yvfRXEO7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.w3.org/People/Frystyk/thesis/UDPFrame.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yvfRXEO7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.w3.org/People/Frystyk/thesis/UDPFrame.gif" alt="User Datagram"&gt;&lt;/a&gt;User Datagram&lt;/p&gt;

&lt;p&gt;Much like IP though, UDP is an connectionless, unreliable service that transfers data before any agreement is provided by the receiving party. Because of this UDP is primarily used for low-latency(low-delay) and loss-tolerating connections such as voice over Internet Protocol (VoIP), domain name system (DNS) lookup, and video or audio playback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TCP&lt;/strong&gt;&lt;br&gt;
The TCP (Transmission Control Protocol) is a reliable, stream oriented service for connection of application layer software with a service. Because TCP was one of the first network implementations that complemented the IP, it is commonly referred to as TCP/IP.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uuyq9g0n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.w3.org/People/Frystyk/thesis/TCPSegment.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uuyq9g0n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.w3.org/People/Frystyk/thesis/TCPSegment.gif" alt="TCP Segment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TCP requires a connection between client and server to be established before a segment of the actual application data can be sent (also known as the three-way handshake). It uses this connection to establish a virtual circuit between the two transmitting hosts so that both hosts can simultaneously put data out on the Internet without specifying the destination host once the connection is established. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#application-layer" class="anchor"&gt;
  &lt;/a&gt;
  Application Layer
&lt;/h2&gt;

&lt;p&gt;Above the UDP and TCP Transport Layer, respectively, is the Application layer where more protocols provide applications with a standardized way to exchange data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UDP Side&lt;/strong&gt;&lt;br&gt;
The main protocols on the UDP side include DNS, Network Time Protocol (NTP), BOOTP, and DHCP, but there are more.&lt;/p&gt;

&lt;p&gt;These protocols are generally used here because of the lack of need for real-time error handling and the need for a large number of clients to be connected at once.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TCP Side&lt;/strong&gt;&lt;br&gt;
The main protocols usually used on the TCP side include HTTPS, "HTTP, FTP, Post Office Protocol 3 (POP3), Simple Mail Transfer Protocol (SMTP), and Simple Network Management Protocol (SNMP)." (2)&lt;/p&gt;

&lt;p&gt;These protocols are usually used here because of the need for compatible with a variety of operating systems, scalability and reliability as the internet grows, and the ability to recover automatically from the failure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#access-ports" class="anchor"&gt;
  &lt;/a&gt;
  Access ports
&lt;/h2&gt;

&lt;p&gt;As stated above, each side (UDP vs TCP) has their top protocols that are generally used on them, but how do you access them and what do they do?&lt;/p&gt;

&lt;p&gt;The generally agreed upon way to access each protocol is through the logical construct that identifies a specific process, or a type of network service, called a port. &lt;/p&gt;

&lt;p&gt;I don't want to dive deep into all of the protocols and ports at this level (because there are 65,535 ports), but a few of the main ports and their associated protocol as well as a few explanations of a few popular ports.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;20/21: File Transfer Protocol (FTP)&lt;/li&gt;
&lt;li&gt;22: Secure Shell (SSH) Secure Login&lt;/li&gt;
&lt;li&gt;23: Telnet remote login service, unencrypted text messages&lt;/li&gt;
&lt;li&gt;25: Simple Mail Transfer Protocol (SMTP) E-mail routing&lt;/li&gt;
&lt;li&gt;53: Domain Name System (DNS) service&lt;/li&gt;
&lt;li&gt;67, 68: Dynamic Host Configuration Protocol (DHCP)&lt;/li&gt;
&lt;li&gt;80: Hypertext Transfer Protocol (HTTP)&lt;/li&gt;
&lt;li&gt;110: Post Office Protocol (POP3)&lt;/li&gt;
&lt;li&gt;119: Network News Transfer Protocol (NNTP)&lt;/li&gt;
&lt;li&gt;123: Network Time Protocol (NTP)&lt;/li&gt;
&lt;li&gt;143: Internet Message Access Protocol (IMAP) Management of digital mail&lt;/li&gt;
&lt;li&gt;161: Simple Network Management Protocol (SNMP)&lt;/li&gt;
&lt;li&gt;194: Internet Relay Chat (IRC)&lt;/li&gt;
&lt;li&gt;443: HTTP Secure (HTTPS) HTTP over TLS/SSL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Port 80: HTTP&lt;/strong&gt;&lt;br&gt;
By far the most common port, HTTP defines the rules for transferring files, images, and other media to and from web browsers with web servers over the TCP/IP connection.&lt;br&gt;
HTTP is a stateless protocol that requires all requests to originate from the client-side browser and are then sent to a specific server to process the request and send back a response. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sYJjHzSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pr5ud043p2cie5belwbm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sYJjHzSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pr5ud043p2cie5belwbm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Port 443: HTTPS&lt;/strong&gt;&lt;br&gt;
This port is steadily becoming used more than port 80 because of its added security through encryption to protect all data exchanges used on it. As shown below, a normal HTTP request/response will be in plain text for anyone to see, but HTTPS encrypts the correspondence so that they cannot be ready by any unintended viewers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pLNNXErn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sectigostore.com/blog/wp-content/uploads/2020/06/port-443-how-https-works-1024x429.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pLNNXErn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sectigostore.com/blog/wp-content/uploads/2020/06/port-443-how-https-works-1024x429.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HTTPS is HTTP over an SSL/TLS connection that makes use of public key encryption (where there are two keys ‚Äî public and private) to distribute a shared symmetric key, which is then used for transmission. (9)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Port 53: DNS&lt;/strong&gt;&lt;br&gt;
A DNS (Domain Name System) is kind of like a phonebook that lives at your Internet Service Provider (ISP); or on your local system in a few places.&lt;br&gt;
In short, when you make a request for a website (&lt;a href="http://www.example.com"&gt;www.example.com&lt;/a&gt;) your system will use UDP to attempt to locate its IP address by recursively making DNS requests to attempt to locate and translate your requested domain name (example.com) into an internet protocol (IP) address (something like 123.345.567.789).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Clqmq9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.seobility.net/en/wiki/images/d/d0/DNS-Server.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Clqmq9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.seobility.net/en/wiki/images/d/d0/DNS-Server.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ports 25: SMTP, 110: POP3, &amp;amp; 143: IMAP&lt;/strong&gt;&lt;br&gt;
SMTP (Simple Mail Transfer Protocol), POP3 (Post Office Protocol), and IMAP (Internet Message Access Protocol) are used to manage the sending and receiving of digital mail to and from a mail server.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wvmo-pxb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w734o2mmuzts9bq8ninf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wvmo-pxb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w734o2mmuzts9bq8ninf.jpg" alt="email protocols"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More specifically, IMAP and POP3 are most commonly used for retrieving emails and STMP is used for sending emails across the Internet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Port 123: NTP&lt;/strong&gt;&lt;br&gt;
The NTP (Network Time Protocol) is an interesting protocol to me because it is one of the oldest protocols used and is generally only used for clock synchronization between computer systems over packet-switched, variable-latency data networks. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T5Cce81H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/Network_Time_Protocol_servers_and_clients.svg/220px-Network_Time_Protocol_servers_and_clients.svg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T5Cce81H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/Network_Time_Protocol_servers_and_clients.svg/220px-Network_Time_Protocol_servers_and_clients.svg.png" alt=""&gt;&lt;/a&gt;For example, most modern operating systems support NTP as a basis for keeping an accurate clock.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-it-all-comes-together" class="anchor"&gt;
  &lt;/a&gt;
  How it all comes together
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;When your Browser makes a request for a page it will take any data associated with the request and make package it together in a "packet" that it will send to its associated Transport Layer protocols (TCP or UDP).

&lt;ul&gt;
&lt;li&gt;If the data is too large each layer will break the data into chunks called "packets" that will each travel to the destination in the same process.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Once at the Transport Layer protocol, the defined protocol will add on a TCP Header containing its own specific information about the destination, length, padding, special options, and more depending on if it is a UDP or TCP based request. Then the Transport Layer protocol will send the new packet of data to the Internet/Network layer (see the OSI model for more info)&lt;/li&gt;
&lt;li&gt;Now at the Internet Layer the packet the protocol will add on the IP Header and make a Datagram frame that it will be sent to the DataLink layer.&lt;/li&gt;
&lt;li&gt;At the DataLink layer the rest of the original frame is encapsulated into a new frame the associated headers (MAC Header and LLC Header) and footers (FCS footer) are added before it is sent over the communication channel of the Physical Layer.&lt;/li&gt;
&lt;li&gt;Once the intended device receives the data the opposite actions are performed according to its intended use.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nQFUSBHp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/csg25-03-tcp-ip-encapsulation.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nQFUSBHp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/csg25-03-tcp-ip-encapsulation.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
Image from Computer Networking Notes in link 10 below



&lt;h1&gt;
  &lt;a href="#why-should-you-care" class="anchor"&gt;
  &lt;/a&gt;
  Why should you care?
&lt;/h1&gt;

&lt;p&gt;The need to understand protocols is important to make sure that you are using the correct protocol for your need and you are not using protocols that have other intended uses. There are a lot of protocols available and there is no need to reinvent the wheel if you can learn how to use it properly. (Read the &lt;a href="https://tools.ietf.org/"&gt;RFCs&lt;/a&gt; for protocol standards.) Not understanding protocols and their use can lead to broken access issues or leaking date that might be accessible through a different protocols than intended.&lt;/p&gt;




&lt;p&gt;Happy Hacking&lt;br&gt;
&lt;a href="https://i.giphy.com/media/l3vRmVv5P01I5NDAA/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l3vRmVv5P01I5NDAA/giphy.gif" alt="Happy Hacking"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/People/Frystyk/thesis/TcpIp.html"&gt;https://www.w3.org/People/Frystyk/thesis/TcpIp.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://searchnetworking.techtarget.com/definition/TCP-IP"&gt;https://searchnetworking.techtarget.com/definition/TCP-IP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc1122"&gt;https://tools.ietf.org/html/rfc1122&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc7540"&gt;https://tools.ietf.org/html/rfc7540&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://searchnetworking.techtarget.com/definition/UDP-User-Datagram-Protocol"&gt;https://searchnetworking.techtarget.com/definition/UDP-User-Datagram-Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://searchnetworking.techtarget.com/definition/domain-name-system"&gt;https://searchnetworking.techtarget.com/definition/domain-name-system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/still-not-switch-to-http-2/"&gt;https://blog.knoldus.com/still-not-switch-to-http-2/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rfc-editor.org/rfc/rfc7230.txt"&gt;https://www.rfc-editor.org/rfc/rfc7230.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sectigostore.com/blog/port-443-everything-you-need-to-know-about-https-443/"&gt;https://sectigostore.com/blog/port-443-everything-you-need-to-know-about-https-443/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.computernetworkingnotes.com/ccna-study-guide/data-encapsulation-and-de-encapsulation-explained.html"&gt;https://www.computernetworkingnotes.com/ccna-study-guide/data-encapsulation-and-de-encapsulation-explained.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h6&gt;
  &lt;a href="#please-note-that-i-am-still-learning-and-if-something-that-i-have-stated-is-incorrect-please-let-me-know-i-would-love-to-learn-more-about-what-i-may-not-understand-fully" class="anchor"&gt;
  &lt;/a&gt;
  Please Note: that I am still learning and if something that I have stated is incorrect please let me know. I would love to learn more about what I may not understand fully.
&lt;/h6&gt;

</description>
      <category>todayilearned</category>
      <category>codenewbie</category>
      <category>browser</category>
      <category>security</category>
    </item>
    <item>
      <title>Things Always Break When You Run</title>
      <author>Clifton Hill</author>
      <pubDate>Fri, 11 Dec 2020 20:15:17 +0000</pubDate>
      <link>https://dev.to/cliftonhill/things-always-break-when-you-run-1fn8</link>
      <guid>https://dev.to/cliftonhill/things-always-break-when-you-run-1fn8</guid>
      <description>&lt;p&gt;Trying to learn a new skill deeply, with a family to support, in 2020 of all years, while networking with others and job hunting, well...it was bound to happen.&lt;/p&gt;

&lt;p&gt;I had my Linux VM setup on my Windows machine. Was doing all of my development and training on Linux, when I lost months of notes, files and projects.&lt;/p&gt;

&lt;p&gt;I suppose I had it coming to me, working in Linux was something I only started at the end of 2019 because that was how Hack Reactor taught (either on a Mac or Linux). Finding this out mid-stream meant I had to setup Linux in a hurry, and I didn't bother with a backup option. (I'm really not that sloppy.) Months ago, I had tried to connect my Linux VM to my home network USB HD drives, but I could find no solution there, so I went back to the grind, crossing my fingers it would all be okay.&lt;/p&gt;

&lt;p&gt;I must have uncrossed my fingers at some point.&lt;/p&gt;

&lt;p&gt;Still not sure what happened, but it would appear that all of my changes were lost since the prior Snapshot taken on Virtual Box. The worst part of it all were the copious notes I had taken during my learning process.&lt;/p&gt;

&lt;p&gt;But, as it happens, Win 10 is working just fine for web development, and I won't be developing in Linux until I have a moment to get that network problem figured out and back up like I should have done from the beginning.&lt;/p&gt;

&lt;p&gt;Learn from me and don't wait 10 months to backup your work and end up losing 6 months of notes. &lt;/p&gt;

</description>
      <category>linux</category>
      <category>tips</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Making C# More Welcoming</title>
      <author>Matt Eland</author>
      <pubDate>Fri, 11 Dec 2020 17:57:07 +0000</pubDate>
      <link>https://dev.to/techelevator/making-c-more-welcoming-3dd6</link>
      <guid>https://dev.to/techelevator/making-c-more-welcoming-3dd6</guid>
      <description>&lt;p&gt;&lt;em&gt;This article is part of the &lt;a href="https://www.csadvent.christmas/"&gt;C# Advent Series&lt;/a&gt; check it out for more articles from others in the community&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I love C#. I‚Äôve been working with the language since 2001 and still view C# as my favorite and primary programming language, despite growing to love many other languages as well since then. However, this year has been eye-opening for me as I‚Äôve gotten a glimpse into how others learn programming and the problems C# has with new developers.&lt;/p&gt;

&lt;p&gt;This year I left software engineering and became an instructor at &lt;a href="https://www.techelevator.com/"&gt;Tech Elevator&lt;/a&gt;, a full-stack C# and Java bootcamp. I am now responsible for teaching others programming via teaching them C#, SQL, and JavaScript among other technologies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learning programming is hard, but learning a language that was introduced 20 years ago and continues to radically grow and change year after year is monumentally harder.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this article I‚Äôll lay out some of the current problems I see with C# for new developers and talk about my hopes for the future of the language, including some early information on changes Microsoft is looking at including with .NET 6 and &lt;a href="https://developercommunity.visualstudio.com/idea/1281274/beginner-friendly-compiler-error-tooltips.html"&gt;a feature request&lt;/a&gt; I‚Äôm hoping Microsoft will implement in Visual Studio.&lt;/p&gt;

&lt;p&gt;It is my hope that this article helps others empathize more with new developers and take new developers into account when designing their own libraries, languages, and tooling. I would also love it if Microsoft entertained some of the suggestions in this article, but my primary desire is for the community to have a bit more empathy for new developers learning in a broad and deep ecosystem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#panic-in-the-ide" class="anchor"&gt;
  &lt;/a&gt;
  Panic! In the IDE
&lt;/h2&gt;

&lt;p&gt;While it‚Äôs normal for experienced developers to feel waves of &lt;a href="https://killalldefects.com/2019/09/02/impostor-syndrome-and-outliers/"&gt;impostor syndrome&lt;/a&gt; throughout their career, it can be harder to remember that feeling of being a brand new developer writing your first few pieces of code.&lt;/p&gt;

&lt;p&gt;As a beginner, your primary focus is on learning the syntax and learning to think like a machine, but there are so many ways things can fail and a vast array of things you‚Äôve not even encountered yet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#not-all-code-paths-return-a-value" class="anchor"&gt;
  &lt;/a&gt;
  ‚ÄúNot All Code Paths Return a Value‚Äù
&lt;/h3&gt;

&lt;p&gt;The ‚ÄúNot All Code Paths Return a Value‚Äù compiler error in C# is one that almost all of our students run into as they start making their first methods and playing with conditional logic.&lt;/p&gt;

&lt;p&gt;Let‚Äôs say you need to write a method to return a string based on whether the number is above, below, or inside of a specified number range. A seasoned programmer would have no problem with this, but new programmers often try an approach that looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KhQqn8Ml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-8.png%3Fresize%3D770%252C427%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KhQqn8Ml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-8.png%3Fresize%3D770%252C427%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The core logic here is correct: We have 3 good checks for things that have appropriate boundary conditions and return the right result, but the compiler isn‚Äôt happy:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pXe6Ihdr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-3.png%3Fresize%3D711%252C457%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pXe6Ihdr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-3.png%3Fresize%3D711%252C457%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A beginning programmer looks at this CS0161 identifier and it scares them because it‚Äôs an alien string from a computer. They see ‚Äúnot all code paths return a value‚Äù and think ‚ÄúDid I miss a return statement inside my if statements? Is there an edge case I forgot?‚Äù and they‚Äôll validate that any number going into the method should meet one of those 3 scenarios. They think about the logic and not necessarily about the compiler‚Äôs perspective.&lt;/p&gt;

&lt;p&gt;Beginner programmers like repetition. They like thinking about things in terms of if statements and they‚Äôll repeat the same types of condition checks with slight edits. It‚Äôs very normal for people to do things like this as they get used to programming. Only later do they think ‚ÄúI don‚Äôt need an if here if I‚Äôm returning on the prior lines for the other conditions‚Äù because it takes time to become truly familiar with the return statement and its implications.&lt;/p&gt;

&lt;p&gt;I have a fix in mind for this error in particular which I‚Äôll get to in a bit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unassigned-local-variables" class="anchor"&gt;
  &lt;/a&gt;
  Unassigned Local Variables
&lt;/h3&gt;

&lt;p&gt;Just to illustrate that I‚Äôm not just picking a random bad compiler error, let‚Äôs take a look at another case folks are likely to try at some point:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--inX4SG6h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-5.png%3Fresize%3D553%252C225%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--inX4SG6h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-5.png%3Fresize%3D553%252C225%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here the programmer forgot to assign favoriteNumbers a new list of integers. Most programmers, when confronted with these two lines in close proximity, will spot this issue and be able to correct it. The problem is that these are often less clear with longer methods, additional variables, loops, if statements, etc.&lt;/p&gt;

&lt;p&gt;So let‚Äôs take a look at the error message Visual Studio offers. The message once again tells us what‚Äôs wrong, but most experienced developers forget that reading error messages is an acquired skill. To the novice ‚Äúunassigned‚Äù might not make them think ‚ÄúI need to create a new list and set that list into my variable‚Äù.&lt;/p&gt;

&lt;p&gt;This has all the right words, but it could be clearer with one more sentence asking if they meant to set the variable to a value when declaring it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#two-decades-of-language-features" class="anchor"&gt;
  &lt;/a&gt;
  Two Decades of Language Features
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs shift gears a bit to talk about &lt;a href="https://killalldefects.com/2019/09/23/a-love-letter-to-net/"&gt;how C# and .NET is awesome&lt;/a&gt;. As I mentioned in the opening, I‚Äôve been working with C# since beta 2 back in 2001. You don‚Äôt stick with a language that doesn‚Äôt adapt and change over time.&lt;/p&gt;

&lt;p&gt;.NET has made some phenomenal changes over the past two decades with the major new platforms such as Razor, .NET Core, MVC, WPF, LINQ, Entity Framework, and Microsoft Azure, among other things. As technology continues to change, .NET remains relevant entirely through these efforts.&lt;/p&gt;

&lt;p&gt;However, with two decades of progress and history, there is a price to pay, and unfortunately it is the new developers who bear the brunt of it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#options-overload" class="anchor"&gt;
  &lt;/a&gt;
  Options Overload
&lt;/h3&gt;

&lt;p&gt;As C# has grown over the years, it‚Äôs gained a number of incremental improvements in new language features. As new capabilities and keywords get added on, older ways of doing things remain supported to provide easy migration paths. This means that newcomers in tech are likely to see things a number of different ways in looking over existing code and documentation.&lt;/p&gt;

&lt;p&gt;This problem is perhaps at its most prevalent with properties. Let‚Äôs take a look at all of the different ways of handling properties in C#.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kkB7LslT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-10.png%3Fresize%3D643%252C1024%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kkB7LslT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-10.png%3Fresize%3D643%252C1024%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we have all the currently supported ways of working with C# properties in one class. As you can see, there‚Äôs a lot of valid, but different syntax. Some of these pieces of syntax are matters of preference (&lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/expression-bodied-members"&gt;expression-bodied members&lt;/a&gt;), and some are necessary to support certain scenarios.&lt;/p&gt;

&lt;p&gt;A novice programmer needs to be familiar with reading and understanding most of these. Visual Studio will actually automatically insert properties as expression-bodied members when overriding a class, which forces that arrow syntax on new devs who may not be ready for it yet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#guiding-people-towards-cliffs" class="anchor"&gt;
  &lt;/a&gt;
  Guiding People Towards Cliffs
&lt;/h3&gt;

&lt;p&gt;C# has a growing number of keywords ‚Äì particularly when dealing with method parameters and with the concept of a &lt;strong&gt;class&lt;/strong&gt; vs a &lt;strong&gt;struct&lt;/strong&gt; vs an &lt;strong&gt;interface&lt;/strong&gt; vs a &lt;strong&gt;tuple&lt;/strong&gt; vs a &lt;strong&gt;record&lt;/strong&gt; vs an &lt;strong&gt;anonymous object&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There‚Äôs simply a lot of things that a newcomer needs to be able to read and understand in online help, starter templates, articles, books, and existing code. Not only does a newcomer need to understand how to read these things, but they must internalize guidelines and rules on when to use what type of thing as part of the process of understanding each new thing they know.&lt;/p&gt;

&lt;p&gt;Unfortunately, the tooling makes it easy to discover some of the newer and more advanced language features when you don‚Äôt necessarily want people to.&lt;/p&gt;

&lt;p&gt;Take this error message our students might encounter when running on a slightly older version of C# and working with interfaces for the first time:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dRPbin0A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/killalldefects.com/wp-content/uploads/2020/12/CSharp73.png%3Fresize%3D770%252C333%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dRPbin0A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/killalldefects.com/wp-content/uploads/2020/12/CSharp73.png%3Fresize%3D770%252C333%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here the student has tried to define an interface containing a method body out of habit. The compiler message (pictured above) is more encouraging towards upgrading C# versions to take advantage of &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/default-interface-methods"&gt;default interface method implementations&lt;/a&gt; as opposed to pushing them to double check if they wanted to add a method body to an interface to begin with.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Interestingly, newer versions of C# don‚Äôt error on this code at all, making it harder for a student to understand the difference between an abstract class and an interface and what the intent of either one really is.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is an example of a new language feature making it harder for newcomers to learn core aspects of the language first, which is unfortunately a common trend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-c-more-accessible" class="anchor"&gt;
  &lt;/a&gt;
  Making C# More Accessible
&lt;/h2&gt;

&lt;p&gt;At this point hopefully you have a slightly larger understanding of some of the things that concern me about people learning C# 2 decades into its existence.&lt;/p&gt;

&lt;p&gt;Let‚Äôs talk more about remedies for these things.&lt;/p&gt;

&lt;p&gt;Here are a few things that I think would help people have an easier time getting into C# and feeling confident and competent with the language:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beginnerfriendly-compiler-errors" class="anchor"&gt;
  &lt;/a&gt;
  Beginner-Friendly Compiler Errors
&lt;/h3&gt;

&lt;p&gt;The number one thing I would encourage Microsoft to change would be the way that compiler errors appear to the user when the user hovers over the ‚Äúred squiggly‚Äù in the interface.&lt;/p&gt;

&lt;p&gt;Let‚Äôs take a look of a simple mock-up of what might appear with the ‚ÄúNot all code paths return a value‚Äù error I cited earlier as an example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BwRvZBAe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-13.png%3Fresize%3D770%252C504%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BwRvZBAe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-13.png%3Fresize%3D770%252C504%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we have a few changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, the ‚Äúred squiggly‚Äù occurs at the end of the method instead of at the method title. This helps the developer with this particular error by putting the squiggly closer to the spot of the missing / incorrect code.&lt;/li&gt;
&lt;li&gt;Secondly, the error tooltip is vastly different and includes basic contextual information up at the top, a short beginner-friendly paragraph describing the main cases of the error, and includes examples of bad and fixed code.&lt;/li&gt;
&lt;li&gt;Finally, the error code is still included at the footer, along with a hyperlink to learn more details from the official documentation on this error code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This type of experience would be optimal for a new developer and would take a certain degree of fear out of the experience while steering them in the direction of a proper fix.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: This feature has been officially registered as a feature request. If you believe that this provides value, please &lt;a href="https://developercommunity.visualstudio.com/idea/1281274/beginner-friendly-compiler-error-tooltips.html"&gt;upvote it&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;These tooltips would be hard to do with many errors, but I‚Äôm certain Microsoft has some idea of which compiler errors are the most common errors and could prioritize providing help for those scenarios. Here are a few I‚Äôd prioritize myself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CS0029 ‚Äì Cannot implicitly convert X to Y&lt;/li&gt;
&lt;li&gt;CS0103 ‚Äì X does not exist in the current context&lt;/li&gt;
&lt;li&gt;CS0161 ‚Äì Not all code paths return a value&lt;/li&gt;
&lt;li&gt;CS0165 ‚Äì Use of unassigned local variable&lt;/li&gt;
&lt;li&gt;CS1002 ‚Äì Semicolon expected&lt;/li&gt;
&lt;li&gt;CS1513 ‚Äì } expected (missing closing scope)&lt;/li&gt;
&lt;li&gt;CS1525 ‚Äì Invalid expression term. Specifically when using == instead of = for assignment (e.g. int i == 4)&lt;/li&gt;
&lt;li&gt;CS7036 ‚Äì No argument given that corresponds to the required formal parameter (incorrect method call)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#optin-to-advanced-language-features" class="anchor"&gt;
  &lt;/a&gt;
  Opt-In to Advanced Language Features
&lt;/h3&gt;

&lt;p&gt;It‚Äôs healthy and expected to add more language features to support developer productivity and keep up with the changing nature of programming. The recent &lt;a href="https://killalldefects.com/2019/09/11/eliminating-nulls-in-c-with-functional-programming/"&gt;rise in popularity of functional programming&lt;/a&gt; is a great example of this as it has pulled in a lot more functional-style syntax into newer versions of the C# language.&lt;/p&gt;

&lt;p&gt;The problem comes when more complex language features are pushed to new developers still trying to learn the basics.&lt;/p&gt;

&lt;p&gt;For example, when a new developer is trying to implement an interface for the first time, C# will helpfully offer to generate members for the user. That‚Äôs an awesome feature. However, the implementation is maybe not the best for new users:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xKDnL3Ys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i1.wp.com/killalldefects.com/wp-content/uploads/2020/12/ImplementInterface.gif%3Fresize%3D770%252C330%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xKDnL3Ys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i1.wp.com/killalldefects.com/wp-content/uploads/2020/12/ImplementInterface.gif%3Fresize%3D770%252C330%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here C# generates a property getter and setter, but prefers the expression-bodied member syntax of the language.&lt;/p&gt;

&lt;p&gt;This is actually my preferred syntax for writing a simple property, but this is distracting to show someone brand new to C# and programming in general because there are so many other fundamentals to focus on first before you get to the point where you can learn arrow functions.&lt;/p&gt;

&lt;p&gt;One of the most surprising things for me as a new instructor was seeing how much trouble new developers have understanding properties. New programmers are juggling so many different concepts and this idea of a class as a re-usable piece of code with little properties that can be customized takes time to soak in. During this ‚Äúsoaking‚Äù period, properties don‚Äôt make a lot of sense and, unfortunately, there are far too many ways of writing them at present.&lt;/p&gt;

&lt;p&gt;What‚Äôs worse, when Visual Studio pushes expression-bodied member properties at a new developer who has only seen the older ways of writing a property (and has potentially not yet seen arrow functions), the beginner &lt;em&gt;may not even realize&lt;/em&gt; that they‚Äôre looking at a property.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beginner-mode" class="anchor"&gt;
  &lt;/a&gt;
  Beginner Mode
&lt;/h3&gt;

&lt;p&gt;I think what we need is a ‚ÄúBeginner Mode‚Äù that simplifies the language of error messages and sets the auto-generated code to prefer older style syntax.&lt;/p&gt;

&lt;p&gt;Just like how when you used to set up Visual Studio you would tell it if you had a C#, VB.NET, or Web Development background and it would customize its menus, it‚Äôd be nice to indicate that you‚Äôre new to programming or new to C# and have Visual Studio minimize the number of things that could distract you from that early learning path.&lt;/p&gt;

&lt;p&gt;To be fair to the wonderful team at Microsoft here, there‚Äôs definitely new features coming out that you now must opt-in to receive. A notable recent example would be the way &lt;a href="https://killalldefects.com/2019/09/13/safer-code-with-c-8-non-null-reference-types/"&gt;C# 8 adjusts how null values are handled&lt;/a&gt; by requiring a project-level setting enabled to enable that advanced behavior.&lt;/p&gt;

&lt;p&gt;More features need to be handled in similar ways going forward.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deprecate-and-remove-old-syntax" class="anchor"&gt;
  &lt;/a&gt;
  Deprecate and Remove Old Syntax
&lt;/h3&gt;

&lt;p&gt;We need to seriously think about the growing baggage in terms of number of different keywords and different ways those keywords can be arranged. When we introduce new things, we need to seriously ask ourselves what, if anything, we can take out or deprecate from older versions of the language.&lt;/p&gt;

&lt;p&gt;For example, if expression-bodied members are truly designed to replace standard field-based properties with gets and sets, we should say that you should stop using the older way of doing things and provide compiler warnings to guide people away from them. &lt;em&gt;(Note, I‚Äôm not saying this change should be made, I‚Äôm just using it as an example of adding complexity without removing anything)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Even better, we should provide handy quick-fixes that automatically convert old code to use the new recommended ways of doing things, and let you do that at the file, project, or solution level.&lt;/p&gt;

&lt;p&gt;By making explicit best practices clear in our tooling, we remove things that new developers need to care about. Sure they need to care about understanding the old and new way, but they don‚Äôt need to worry about deciding when they should use one way over another.&lt;/p&gt;

&lt;p&gt;Beginners like and &lt;em&gt;need&lt;/em&gt; guide rails because they reduce mental strain and improve comfort as people learn the ropes by focusing on one thing at a time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-ahead-in-net-6" class="anchor"&gt;
  &lt;/a&gt;
  What‚Äôs Ahead in .NET 6?
&lt;/h2&gt;

&lt;p&gt;The good news is that making .NET Accessible to new developers is &lt;a href="https://github.com/dotnet/core/issues/5465"&gt;a central theme&lt;/a&gt; currently under consideration for the .NET 6 release.&lt;/p&gt;

&lt;p&gt;Looking into the current theme, it looks like Microsoft is aiming for the following improvements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/core/issues/5469"&gt;Reducing the strain of legacy features in Visual Studio by hiding things not related to modern development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/core/issues/5468"&gt;Emphasizing task-based learning in the documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/core/issues/5466"&gt;Allowing people to work more with VS Code for .NET Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/core/issues/5472"&gt;Reducing cognitive load needed for using .NET Command line tooling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall, I‚Äôm elated at this, but I‚Äôd still love to see more progress on improving the compiler and runtime errors users see and gearing them towards those brand new to programming.&lt;/p&gt;

&lt;p&gt;I strongly support and embrace Microsoft‚Äôs approach in prioritizing new developers coming into the language as the language and its tooling continue to grow and evolve and I‚Äôd love to see some additional effort on simplifying legacy ways of writing C# code or guiding people towards more modern approaches in a way that‚Äôs as friendly as possible to new developers while respectful of existing code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing" class="anchor"&gt;
  &lt;/a&gt;
  Closing
&lt;/h2&gt;

&lt;p&gt;This article may read like a wish list or an airing of grievances about things that make my job harder as an instructor, but it‚Äôs actually not my students I‚Äôm worried about. A skilled instructor can serve as a tour guide through an existing language.&lt;/p&gt;

&lt;p&gt;My fear is for the folks who want to learn C# in greater depth than their schools teach it, or who are trying to improve themselves on the side. My fear is also that students may struggle and give up due to the daunting learning curve early on when they could have succeeded if they‚Äôd had a bit more help.&lt;/p&gt;

&lt;p&gt;We need a wider diversity of people coming into tech, and the learning curve is one of the many factors stifling that growth. More people should have a fair shot at learning these technologies, and that means revisiting our tools and documentation to welcome the next generation of developers from all ages, genders, and backgrounds.&lt;/p&gt;

&lt;p&gt;I am incredibly proud of .NET and all of its supported languages and associated tools. Microsoft has done a phenomenal job over the past 20 years and I cannot overstate that, despite &lt;a href="https://developercommunity.visualstudio.com/idea/1281274/beginner-friendly-compiler-error-tooltips.html"&gt;the improvements I want to see&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The post &lt;a href="https://killalldefects.com/2020/12/11/making-csharp-more-welcoming/"&gt;Making C# More Welcoming&lt;/a&gt; appeared first on &lt;a href="https://killalldefects.com"&gt;Kill All Defects&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>Dotfiles - Put your home directory under `git`</title>
      <author>Corey Alexander</author>
      <pubDate>Fri, 11 Dec 2020 15:08:18 +0000</pubDate>
      <link>https://dev.to/coreyja/dotfiles-put-your-home-directory-under-git-51l9</link>
      <guid>https://dev.to/coreyja/dotfiles-put-your-home-directory-under-git-51l9</guid>
      <description>&lt;p&gt;&lt;span&gt;Photo by &lt;a href="https://unsplash.com/@cgower"&gt;Christopher Gower&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/code"&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Silicon Valley Season 2 ruined it for me. Richard had worked so hard on Pied Piper, but Gavin is almost able to steal it from him. Why? Cause Richard pulled down the code he had written on his work device and ran the test suite. How could something so trivial almost cost him so much! That season embedded itself in me, and now I try to keep my personal and professional software as separate as can be. And one thing this requires is having a personal machine, on top of the computer provided by my employer.&lt;/p&gt;

&lt;p&gt;As anyone who's done development on different machines can speak to, I found it frustrating at first when settings from one device didn't transfer to the other. For a while, I used Google Drive to manage settings for a few different apps, including the text editor I used at the time. But eventually, I started doing more things in my terminal, and I wanted to keep a copy of the configuration files for all my terminal programs and tools, somewhere that I could share between machines. I did what seemed to me to be the norm and created a &lt;code&gt;dotfiles&lt;/code&gt; repo on Github. And used some tool to symlink or copy between the actual 'live' files in my home directory &lt;code&gt;~&lt;/code&gt;, and the repo files living in their project directory, something like &lt;code&gt;~/Projects/dotfiles&lt;/code&gt;. I did this for years and thought of it as a solved problem. That isn't to say this setup didn't have issues. I would often experiment with something and edit the 'live' configuration files for a quicker feedback loop and forget to update the 'project' files. Or once I switched to symlinks, I would add a new file to a directory 'live', and it would never end up in the &lt;code&gt;git&lt;/code&gt; repo at all. I had half-solutions to both of these issues, though, and I was happy.&lt;/p&gt;

&lt;p&gt;One day, I talked to a co-worker, and they told me something that would change my dotfiles forever.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can make your home directory a git repo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This thought immediately struck me. Why should I keep a separate directory with a copy of these files or deal with symlinking across the directories? It made so much sense! With a single set of files, I would eliminate a whole suite of small annoyances I had with my dotfiles.&lt;/p&gt;

&lt;p&gt;However, I was worried about this kind of setup. I have my projects nested under my home directory, so would that break things? Was I going to commit these projects in my dotfiles? Was I finally going to learn what git sub-modules were?&lt;/p&gt;

&lt;p&gt;Luckily my co-worker also gave me the magic sauce to make this happen, and I've adopted it in my dotfiles ever since! The 'trick' is to change your &lt;code&gt;.gitignore&lt;/code&gt; file to an 'allow list' instead of a 'block list'. The syntax of &lt;code&gt;.gitignore&lt;/code&gt; makes this pretty easy!&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.gitignore&lt;/code&gt; file is processed from top to bottom, so to start this trick, we add &lt;code&gt;*&lt;/code&gt; as the first line in our &lt;code&gt;gitignore&lt;/code&gt;. Now, &lt;code&gt;git&lt;/code&gt; is actually going to ignore every file. We can go back in, and one by one, allow different files and directories with the &lt;code&gt;!&lt;/code&gt; prefix operator! For example, a very minimalistic &lt;code&gt;.gitignore&lt;/code&gt; for a dotfiles repo like this might be like the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*

!.bash_profile
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With this setup, you can easily share your &lt;code&gt;bash_profile&lt;/code&gt; between machines in your dotfiles repo and be confident this is the only file shared. Only the things you explicitly allow in the &lt;code&gt;.gitignore&lt;/code&gt; file will be included in the repo! I find this works really well for a dotfiles repo, as I have many more files in my home directory that I want git to ignore, it would be tedious and error-prone to try to block each of them individually.&lt;/p&gt;

&lt;p&gt;Luckily having 'nested' git repo's like this doesn't really affect the 'inner' repos at all. By that, I mean that my project repos are none the wiser to my dotfiles setup, and no special config is needed for them. Git tools simply look upwards for the closest &lt;code&gt;.git&lt;/code&gt; directory, so having one farther up the directory tree isn't an issue.&lt;/p&gt;

&lt;p&gt;The one caveat to be aware of if you dive in with me and take this approach is that you are almost &lt;em&gt;always&lt;/em&gt; in a git repo. Even if you are simply in a git ignored directory. Does this matter? In practice, I find it really doesn't a ton. My &lt;code&gt;bash_prompt&lt;/code&gt; always shows me I'm in a git repo, but nothing else is really affected.&lt;/p&gt;

&lt;p&gt;I've been doing my dotfiles like this for a while, and I can't imagine going back! Maybe give it a shot and let me know what you think.&lt;/p&gt;

&lt;p&gt;If you want a more detailed explanation of how to set this up, keep reading with me, and we'll walk through it together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explanation" class="anchor"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h2&gt;

&lt;p&gt;The actual how of doing it is slightly more complicated but only as a one-time setup. Let's walk through how you might set up a new dotfiles repo directly in your home directory and share it across multiple machines!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-repo-on-your-first-machine" class="anchor"&gt;
  &lt;/a&gt;
  Creating a repo on your first machine
&lt;/h3&gt;

&lt;p&gt;So to start out, let's assume you have some files in your home directory that you want to put in your dotfiles repo. &lt;/p&gt;

&lt;p&gt;Warning: If your dotfiles are symlinks to the 'real' files elsewhere, you will want to replace those symlinks with actual copies of the files before we get started. If you follow these steps with symlinks, git will only pick up the symlink destination and not the actual file contents.&lt;/p&gt;

&lt;p&gt;Ok, let's get started! I'm gonna hop into a VM so that we can start fresh together.&lt;br&gt;
I have three files I want to share between machines: &lt;code&gt;.bash_profile&lt;/code&gt; and &lt;code&gt;.bash_prompt&lt;/code&gt; for all my 100% necessary bash customizations. And then &lt;code&gt;.gnupg/gpg-agent.conf&lt;/code&gt;, which contains some setup that I needed to make my Yubikey work. But even in a brand new VM, my home directory is full of way more than that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pwd
/home/coreyja
$ ls -a
.       Downloads .sudo_as_admin_successful
..      .gnupg   Templates
.bash_history gpg.pub    .vboxclient-clipboard.pid
.bash_logout  .local     .vboxclient-display-svga-x11.pid
.bash_prompt  Music  .vboxclient-draganddrop.pid
.cache      Pictures  .vboxclient-hostversion.pid
.config    .profile  .vboxclient-seamless.pid
Desktop    Public    Videos
Documents   .ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;First, we need to create a new git repo. We can just run &lt;code&gt;git init .&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git init .
Initialized empty Git repository in /home/coreyja/.git/
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As an optional step, we will also switch to a &lt;code&gt;main&lt;/code&gt; branch that we will use here as the default branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git checkout -b main
Switched to a new branch 'main'
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Tip: If you have &lt;code&gt;git&lt;/code&gt; version 2.28.0 or newer, you can do this from your git init with the &lt;code&gt;--initial-branch&lt;/code&gt; flag. Ex: &lt;code&gt;git init . --initial-branch=main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Right now, we have an empty git repo, but it 'wants' to track everything in my home directory. Nothing is tracked because we haven't &lt;code&gt;git add&lt;/code&gt;ed anything, but the entire home directory is coming up as untracked.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git status
On branch main

No commits yet

Untracked files:
 (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)
    .bash_history
    .bash_logout
    .bash_prompt
    .cache/
    .config/
    .gnupg/
    .local/
    .profile
    .ssh/
    .sudo_as_admin_successful
    .vboxclient-clipboard.pid
    .vboxclient-display-svga-x11.pid
    .vboxclient-draganddrop.pid
    .vboxclient-seamless.pid
    gpg.pub

nothing added to commit but untracked files present (use "git add" to track)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, let's add a &lt;code&gt;.gitignore&lt;/code&gt; file that ignores everything.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ echo '*' &amp;gt; .gitignore
$ git status
On branch main

No commits yet

nothing to commit (create/copy files and use "git add" to track)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, &lt;code&gt;git status&lt;/code&gt; shows that there is nothing to commit because we ignored everything. But we actually DO want to track the &lt;code&gt;.gitignore&lt;/code&gt; file we made. That is because &lt;code&gt;.gitignore&lt;/code&gt; basically becomes the 'manifest' of files to commit to the repo, and as such, does need to be present on each machine. So let's add to our &lt;code&gt;.gitignore&lt;/code&gt; file to tell it we DO want to track the &lt;code&gt;.gitignore&lt;/code&gt; file itself, how meta.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ echo '!.gitignore' &amp;gt;&amp;gt; .gitignore
$ git status
On branch main

No commits yet

Untracked files:
 (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)
    .gitignore

nothing added to commit but untracked files present (use "git add" to track)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The syntax used was to put a &lt;code&gt;!&lt;/code&gt; before the file name, which acts like a NOT ignore; tracking the file!&lt;/p&gt;

&lt;p&gt;Now that git shows some untracked changes, we can add the &lt;code&gt;.gitignore&lt;/code&gt; file and commit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git add --all
$ git commit -m "The bare bones of our dotfiles setup. Currently just a gitignore file that ignores everything besides itself"
[main (root-commit) 664ab8d] The bare bones of our dotfiles setup. Currently just a gitignore file that ignores everything besides itself
 1 file changed, 2 insertions(+)
 create mode 100644 .gitignore
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And from here, we can just repeat what we did for &lt;code&gt;.gitignore&lt;/code&gt; and add the rest of the files we want to track! Lets start with the &lt;code&gt;.bash_profile&lt;/code&gt; and &lt;code&gt;.bash_prompt&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ echo '!.bash_profile' &amp;gt;&amp;gt; .gitignore
$ echo '!.bash_prompt' &amp;gt;&amp;gt; .gitignore
$ git status
On branch main
Changes not staged for commit:
 (use "git add &amp;lt;file&amp;gt;..." to update what will be committed)
 (use "git restore &amp;lt;file&amp;gt;..." to discard changes in working directory)
    modified:  .gitignore

Untracked files:
 (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)
    .bash_profile
    .bash_prompt

no changes added to commit (use "git add" and/or "git commit -a")
$ git add --all
$ git commit -m "Track the bash_profile and bash_prompt files"
[main fdd42e4] Track the bash_profile and bash_prompt files
 3 files changed, 4 insertions(+)
 create mode 100644 .bash_profile
 create mode 100644 .bash_prompt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now let's do the for the &lt;code&gt;.gnupg/gpg-agent.conf&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ echo '!.gnupg/gpg-agent.conf' &amp;gt;&amp;gt; .gitignore
$ git status
On branch main
Changes not staged for commit:
 (use "git add &amp;lt;file&amp;gt;..." to update what will be committed)
 (use "git restore &amp;lt;file&amp;gt;..." to discard changes in working directory)
    modified:  .gitignore

no changes added to commit (use "git add" and/or "git commit -a")
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Hmm, that didn't work quite as well... That's due to how gitignore works on directories. You need to allow BOTH the directory and the file. For things in sub-directories, you need the 'allow' each directory and the final file. Once we ignore the directory, we can go ahead and commit the &lt;code&gt;gpg-agent.conf&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ echo '!.gnupg/' &amp;gt;&amp;gt; .gitignore
$ git status
On branch main
Changes not staged for commit:
 (use "git add &amp;lt;file&amp;gt;..." to update what will be committed)
 (use "git restore &amp;lt;file&amp;gt;..." to discard changes in working directory)
    modified:  .gitignore

Untracked files:
 (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)
    .gnupg/

no changes added to commit (use "git add" and/or "git commit -a")
$ git add -all
$ git status
On branch main
Changes to be committed:
 (use "git restore --staged &amp;lt;file&amp;gt;..." to unstage)
    modified:  .gitignore
    new file:  .gnupg/gpg-agent.conf
$ git commit -m "Add the gpg-agent file as well"
[main e228187] Add the gpg-agent file as well
 2 files changed, 5 insertions(+)
 create mode 100644 .gnupg/gpg-agent.conf

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After all this, here is my &lt;code&gt;.gitignore&lt;/code&gt; file (eagle-eyed readers will notice I reordered this, so the &lt;code&gt;.gnupg/&lt;/code&gt; directory comes before the filename, this is optional, but I like how it looks better personally).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat .gitignore 
*
!.gitignore
!.bash_profile
!.bash_prompt
!.gnupg/
!.gnupg/gpg-agent.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we can push this up to your Git host of choice; I'll use Github here to demo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git remote add origin git@github.com:coreyja/example-dotfiles.git
$ git push --set-upstream origin main
Enumerating objects: 13, done.
Counting objects: 100% (13/13), done.
Compressing objects: 100% (6/6), done.
Writing objects: 100% (13/13), 1.07 KiB | 1.07 MiB/s, done.
Total 13 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), done.
To github.com:coreyja/example-dotfiles.git
 * [new branch]   main -&amp;gt; main
Branch 'main' set up to track remote branch 'main' from 'origin'.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And there we go! You can expand on this to add any files you want in your dotfiles repo! You can edit the 'live' files in place and easily commit the results. You don't have to worry about accidentally leaking anything from your home directory since you have to manually allow files and directories.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cloning-this-repo-on-your-second-machine" class="anchor"&gt;
  &lt;/a&gt;
  Cloning this repo on your second machine
&lt;/h3&gt;

&lt;p&gt;Ok, so now let's move to machine two, and copy these dotfiles down. For this demo, let's also look at what happens when there is a conflict and your second machine's version doesn't match the version we had on our original machine.&lt;/p&gt;

&lt;p&gt;On this machine, we have a slightly different bash prompt.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Machine2$ cat .bash_prompt 
export PS1="Machine2$ "
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we try to clone the repo we created, we will get an error since we don't have an empty directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Machine2$ git clone git@github.com:coreyja/example-dotfiles.git .
fatal: destination path '.' already exists and is not an empty directory.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So what we need to do is create an empty git repo, and then wire up the origin and do a fetch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Machine2$ git init
Initialized empty Git repository in /home/coreyja/.git/
Machine2$ git remote add origin git@github.com:coreyja/example-dotfiles.git
Machine2$ git fetch
remote: Enumerating objects: 13, done.
remote: Counting objects: 100% (13/13), done.
remote: Compressing objects: 100% (5/5), done.
remote: Total 13 (delta 1), reused 13 (delta 1), pack-reused 0
Unpacking objects: 100% (13/13), 1.05 KiB | 540.00 KiB/s, done.
From github.com:coreyja/example-dotfiles
 * [new branch]   main    -&amp;gt; origin/main
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So now we have our remote all set up, let's set up a local branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Machine2$ git checkout -b main
Switched to a new branch 'main'
Machine2$ git reset --mixed origin/main
Unstaged changes after reset:
M   .bash_prompt
D   .gitignore
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we used &lt;code&gt;git reset&lt;/code&gt; to tell git that our &lt;code&gt;HEAD&lt;/code&gt; is the same as the origin version, or we want to operate as if we were 'on' that commit. We use &lt;code&gt;--mixed&lt;/code&gt; so that it keeps our local changes. We can then see if any of our local changes are things we want to keep or remove.&lt;br&gt;
You might also notice it says we 'deleted' the &lt;code&gt;.gitignore&lt;/code&gt; file. This is because this machine didn't have a &lt;code&gt;.gitignore&lt;/code&gt;. We want to take this file from the version we already committed on the first machine. If we don't and run &lt;code&gt;git status&lt;/code&gt;, you will see we aren't yet ignoring the rest of the home directory. So let us go ahead and checkout the origin copy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Machine2$ git checkout origin/main -- .gitignore
Machine2$ git status
On branch main
Changes not staged for commit:
 (use "git add &amp;lt;file&amp;gt;..." to update what will be committed)
 (use "git restore &amp;lt;file&amp;gt;..." to discard changes in working directory)
    modified:  .bash_prompt

no changes added to commit (use "git add" and/or "git commit -a")
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we can take a look at the diff between our local version and the origin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Machine2$ git diff
diff --git a/.bash_prompt b/.bash_prompt
index 6d41176..fdbe383 100644
--- a/.bash_prompt
+++ b/.bash_prompt
@@ -1 +1 @@
-export PS1="$ "
+export PS1="Machine2$ "
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this case, I think I want to throw away both versions and create a new prompt to use on both machines!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Machine2$ echo 'export PS1="coreyja $ "' &amp;gt; .bash_prompt
Machine2$ source .bash_prompt
coreyja $ git add -all
coreyja $ git commit -m "Get second machine setup and create a more unified prompt"
[main 9449185] Get second machine setup and create a more unified prompt
 1 file changed, 1 insertion(+), 1 deletion(-)
coreyja $ git push --set-upstream origin main
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 311 bytes | 311.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To github.com:coreyja/example-dotfiles.git
  e228187..9449185 main -&amp;gt; main
Branch 'main' set up to track remote branch 'main' from 'origin'.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;While we were doing those last steps, we used &lt;code&gt;git add --all&lt;/code&gt;. When I've talked to people about this workflow before, they get worried that commands like this will accidentally commit more than they want. But as you can see, that isn't the case! &lt;code&gt;git add&lt;/code&gt; follows the &lt;code&gt;.gitignore&lt;/code&gt; file, so it will only add the files we explicitly allow.&lt;/p&gt;

&lt;p&gt;And there you have it! Now we have a dotfiles repo setup on two machines, but even better, the repo lives directly in your home directory! No more copying or symlinking! Simply edit the files and create a commit, nice and simple and using all the tools you already know and love!&lt;/p&gt;

&lt;p&gt;I hope more people give this technique a try and let me know what you think!&lt;/p&gt;

</description>
      <category>tooling</category>
      <category>dotfiles</category>
      <category>terminal</category>
    </item>
    <item>
      <title>You Can Run Containers on AWS Amplify Now</title>
      <author>swyx</author>
      <pubDate>Fri, 11 Dec 2020 14:24:37 +0000</pubDate>
      <link>https://dev.to/swyx/you-can-run-containers-on-aws-amplify-now-23ka</link>
      <guid>https://dev.to/swyx/you-can-run-containers-on-aws-amplify-now-23ka</guid>
      <description>&lt;p&gt;The second week of &lt;a href="https://reinvent.awsevents.com/"&gt;AWS re:Invent&lt;/a&gt; brought a surprise major announcement from the AWS Amplify team: &lt;strong&gt;You can run Docker containers as AWS Amplify APIs now&lt;/strong&gt;!!!&lt;/p&gt;

&lt;p&gt;The main Achilles heel of migrating to serverless architectures is having to relearn and rewrite traditional serverful code. With &lt;a href="https://aws.amazon.com/blogs/mobile/zero-effort-container-deployment-for-graphql-and-rest-apis-and-web-hosting-with-amplify-cli/"&gt;the new Amplify Serverless Containers&lt;/a&gt;, it is now possible to deploy code in stateful Docker containers with the &lt;em&gt;exact same workflow&lt;/em&gt; as the rest of Amplify CLI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# example of the new CLI workflow, see docs for details&lt;/span&gt;
&lt;span class="c"&gt;# Amplify CLI version 4.39+&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;amplify init &lt;span class="c"&gt;# if you're setting up new Amplify project&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;amplify configure project
 &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; Do you want to &lt;span class="nb"&gt;enable &lt;/span&gt;container-based deployments? Yes

&lt;span class="nv"&gt;$ &lt;/span&gt;amplify add api

Please &lt;span class="k"&gt;select &lt;/span&gt;from one of the below mentioned services: REST
? Which service would you like to use 
  API Gateway + Lambda 
‚ùØ API Gateway + AWS Fargate &lt;span class="o"&gt;(&lt;/span&gt;Container-based&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For the first time, this opens up the possibility of running &lt;strong&gt;Rails, Django, Laravel&lt;/strong&gt;, or any other traditionally serverful APIs &lt;em&gt;seamlessly&lt;/em&gt; alongside a serverless architecture. If it fits in a Docker container, you can run it! This thus unlocks the full capabilities of their respective ecosystems. &lt;/p&gt;

&lt;p&gt;Emphasis on &lt;em&gt;seamless&lt;/em&gt; integration: this means that frontend and mobile developers don't need to go to 9 months of cloud school (having to learn the details of VPC, subnets, NACLs, IAM policies, SSL generation, continuous deploy, cost optimization, etc) just in order to get a containerized API up and running on AWS.&lt;/p&gt;

&lt;p&gt;This, to me, is a big deal for a number of interrelated reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Long Running Code&lt;/strong&gt;: AWS Lambda functions are limited to 15 minutes. If I need to run longer tasks, like video conversion or batch processing, I would have to jump out of my existing workflow and use a completely different set of tools. Now, I can run Rails + &lt;a href="https://github.com/mperham/sidekiq"&gt;Sidekiq&lt;/a&gt; or &lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xxii-background-jobs"&gt;Flask + Celery&lt;/a&gt; with just an industry standard &lt;code&gt;docker-compose.yml&lt;/code&gt;. Because Amplify's Serverless Containers feature uses AWS Fargate, we may in future have the option of vertically scaling system resources as needed, beyond the traditional &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html"&gt;resource constraints&lt;/a&gt; of AWS Lambda.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Access Entire Ecosystems&lt;/strong&gt;: Libraries and frameworks that were written for serverful paradigms typically become useless when shifting to serverless/Jamstack architectures, requiring yet another learning curve and search for tools. Now you are free to mix and match them - anything that runs in a Docker container is fair game (and &lt;em&gt;everything&lt;/em&gt; runs in a Docker container!)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Incremental Migration&lt;/strong&gt;: This also means that it is no longer a heavy lift to move existing apps and codebases to a serverless/Jamstack architecture. As long as you can separate your UI layer from your API layer, you are now able to host your UI on &lt;a href="https://aws.amazon.com/blogs/aws/amplify-console-hosting-for-fullstack-serverless-web-apps/"&gt;Amplify Console&lt;/a&gt;, and your APIs as a REST or GraphQL service with API Gateway + AWS Fargate.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Easy Access to other &lt;a href="https://docs.amplify.aws/cli/start/workflows#amplify-category-add"&gt;Amplify categories&lt;/a&gt;&lt;/strong&gt;: because this plugs right into the Amplify API category workflow, this means that your code inside your containers get all the same benefits of Amplify APIs like easy authentication with Amazon Cognito and easy access to Amplify-managed resources like &lt;a href="https://docs.amplify.aws/cli/storage/overview"&gt;Storage&lt;/a&gt;, &lt;a href="https://docs.amplify.aws/cli/function"&gt;Functions&lt;/a&gt;, &lt;a href="https://docs.amplify.aws/cli/graphql-transformer/overview"&gt;GraphQL&lt;/a&gt; and more. Because networking is handled for you, you can &lt;em&gt;even talk to other containers&lt;/em&gt; - the default &lt;code&gt;docker-compose.yml&lt;/code&gt; example in the CLI shows how you can make an Express (JS) app interoperate with a Flask (Python) app!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, yeah. I think this is awesome - You can run basically anything on AWS Amplify now - meaning that you spend less time wrangling infrastructure and more time writing valuable features. Don't take my word for it, see &lt;a href="https://twitter.com/IamStan/status/1337088737243783174?s=20"&gt;Ant Stanley&lt;/a&gt; (organizer of Serverless Days and overall cloud expert):&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ceO-EJGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1316347776071094272/hLHrZQc__normal.jpg" alt="Ant Stanley Partial Landscaping #BLM profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Ant Stanley Partial Landscaping #BLM
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/iamstan"&gt;@iamstan&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      This is awesome. Easiest way to run a stateful workload in the cloud. Got Wordpress, Django, Express, Joomla, Flask, Laravel etc ... this is the easiest and quickest way to get it running in a scalable way in the cloud. &lt;a href="https://t.co/vTjfKShQtd"&gt;twitter.com/renebrandel/st‚Ä¶&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:36 PM - 10 Dec 2020
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Rene Brandel
          &lt;/span&gt;
          @renebrandel
        &lt;/div&gt;
        ‚≠êÔ∏èNEW: @AWSAmplify now supports containers‚≠êÔ∏è

üëâ Deploy APIs &amp;amp; host web apps using @awscloud Fargate
üëâ Build &amp;amp; deploy pipeline out-of-the-box
üëâ Single &amp;amp; multi-container deployments (incl. networking)

Amazing work by @panchorodriguez @menyao &lt;a class="comment-mentioned-user" href="https://dev.to/undef_obj"&gt;@undef_obj&lt;/a&gt;
 

https://t.co/YBhqVkqnCS
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1337088737243783174" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1337088737243783174" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      2
      &lt;a href="https://twitter.com/intent/like?tweet_id=1337088737243783174" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      10
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;P.S. for those who are making comparisons with AWS CDK, note that &lt;a href="https://twitter.com/undef_obj/status/1337217826436747266?s=20"&gt;this capability was actually made with CDK&lt;/a&gt; - it solves a higher level problem than CDK. &lt;/p&gt;

</description>
      <category>aws</category>
    </item>
    <item>
      <title>How I created the 1st Full Stack playground</title>
      <author>Kirk</author>
      <pubDate>Fri, 11 Dec 2020 13:07:37 +0000</pubDate>
      <link>https://dev.to/scaledynamics/how-i-created-the-1st-full-stack-playground-ehf</link>
      <guid>https://dev.to/scaledynamics/how-i-created-the-1st-full-stack-playground-ehf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;My name is Gilbert, I‚Äôm an engineer for +30 years (and CEO for +10 years). I designed a technology called WarpJS to integrate JavaScript Front end &amp;amp; Back end, and I wanted people to be able to try it without installing anything‚Ä¶ so I developed an online JavaScript editor with WarpJS, and I ended up creating the first real time JavaScript Full Stack playground! &lt;/p&gt;

&lt;p&gt;This is the story of its creation. Hope you‚Äôll find it interesting and inspiring. &lt;br&gt;
You can test right away the live demo of the &lt;a href="https://playground.scaledynamics.cloud"&gt;JavaScript Full Stack Playground&lt;/a&gt; and let me know what you think about it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LSxMbvnW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607691892635/EYlxKSkWo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LSxMbvnW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607691892635/EYlxKSkWo.gif" alt="playground-modify-backend-v2.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#existing-inbrowser-code-sandbox-front-end-only" class="anchor"&gt;
  &lt;/a&gt;
  Existing in-browser code sandbox: front end only!
&lt;/h2&gt;

&lt;p&gt;When creating a website, you generally have to code a front end &amp;amp; a back end connected and working with one other. &lt;/p&gt;

&lt;p&gt;For the front end, I often used developers sandbox to get code snippets that I adapted to the UI of the website. It‚Äôs really cool and it makes coding so much easier. As the web dev community is so rich, you basically can find anything you‚Äôre looking for! &lt;br&gt;
Though, for the back end, it‚Äôs really another story! Blog posts articles, getting started guides, GitHub projects‚Ä¶ is your new credo üò®. &lt;/p&gt;

&lt;p&gt;And that‚Äôs only to select the right back end stack for your project! That‚Äôs why I thought it would be so much more efficient to have a back end playground. It would show you examples and code snippets to get to throw a quick prototype. &lt;br&gt;
I could have created a back end only playground, but I thought it would not be as effective. Also, my team and I created a technology called WarpJS. It integrates JavaScript Front and Back ends, so I wanted developers to be able to test it without having to install anything. That‚Äôs why I decided to build a front end AND back end playground, to code them at the same time, and to see the results in real time. &lt;/p&gt;

&lt;p&gt;So let‚Äôs get started. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design" class="anchor"&gt;
  &lt;/a&gt;
  Design
&lt;/h2&gt;

&lt;p&gt;I‚Äôve chosen to focus only on web development languages: HTML, CSS, JavaScript for the front end, and Node.js for the back end. &lt;/p&gt;

&lt;p&gt;Here‚Äôs what we get: the development environment is composed of the front end, back end editor panels, sitting side-by-side to code faster. I‚Äôve also added a preview window on the right side to see the rendered page in real time. &lt;/p&gt;

&lt;p&gt;On the left side, I wanted a code snippet search area, so developers can search in the code snippet database. I really wanted everything to be in a single page, so developers can create new snippets, and explore available ones quickly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KdVZBP8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607677986721/orM9I8urZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KdVZBP8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607677986721/orM9I8urZ.png" alt="playground-design.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I made every window adjustable, so you can customize your experience as you wish: resize any panel, allow full screen view‚Ä¶ It‚Äôs handy to focus on some codes, or to make sure web components are responsive‚Ä¶ &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-playground-with-a-unique-recipe" class="anchor"&gt;
  &lt;/a&gt;
  A playground with a unique recipe
&lt;/h2&gt;

&lt;p&gt;There‚Äôs a catch, right? How can we write a back end and use it in the front end without creating endpoints, routing for APIs and HTTP requests? The secret recipe is the technology I mentioned above, WarpJS, which I wanted people to be able to test really easily. It automatically transforms an exported function of a Node.js module into an HTTP server API. On the client side, you no longer need to use HTTP to call the back end module, it just basically calls its functions.&lt;/p&gt;

&lt;p&gt;So this means that, in the back end, you just need to create functions and to export them. In the front end, you just call it. &lt;br&gt;
As you avoid writing HTTP layers, this playground offers you more time to only focus on the core logic of the snippet. It enables any JavaScript developer, even junior one, to use it easily! You no longer need to be an HTTP expert to work as a Full Stack üò¨! Icing on the cake, the Playground is connected with the ScaleDynamics Virtual Cloud, which means it also takes care of deployment processes: you can deploy and run on any cloud. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building" class="anchor"&gt;
  &lt;/a&gt;
  Building
&lt;/h2&gt;

&lt;p&gt;To lay the first stone, I chose &lt;a href="https://golden-layout.com/"&gt;GoldenLayout&lt;/a&gt; as window layout management. For the editors‚Äô views, I selected the &lt;a href="https://microsoft.github.io/monaco-editor/"&gt;Monaco code editor&lt;/a&gt; that powers Visual Studio Code. It takes care of error detection, auto identification, code completion‚Ä¶ &lt;/p&gt;

&lt;p&gt;The preview is an iframe to inject code snippets, which are stored in a MongoDB database, and to provide a live-reload feature for the preview window. &lt;/p&gt;

&lt;p&gt;For the search area, I choose to made it pretty simple: instead of being classified by categories, I choose to sort them with hashtags (for instance #react, #fauna, #AI and so on). Developers can add title and a 250 characters description.&lt;/p&gt;

&lt;p&gt;The back-end panel is connected to the &lt;a href="https://scaledynamics.com/deploy-javascript-microservices-any-cloud"&gt;ScaleDynamics code-to-cloud Suite&lt;/a&gt; to redeploy instantly and to support the full stack live-reload.&lt;/p&gt;

&lt;p&gt;Finally, I‚Äôve naturally coded the whole playground back end with WarpJS itself: I‚Äôve got my first fully functional prototype within two days üòé. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-result-a-javascript-full-stack-playground" class="anchor"&gt;
  &lt;/a&gt;
  The result: a JavaScript Full Stack Playground
&lt;/h2&gt;

&lt;p&gt;It‚Äôs live! You can test right the &lt;a href="https://playground.scaledynamics.cloud"&gt;JavaScript Full Stack Playground&lt;/a&gt;.&lt;br&gt;
Feedbacks are much appreciated so I can improve it!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>discuss</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How Java Has Advanced In The Past 6 Years (From Java 8 to Java 15)</title>
      <author>Wejdi</author>
      <pubDate>Fri, 11 Dec 2020 13:00:11 +0000</pubDate>
      <link>https://dev.to/wejdi_gh/how-java-has-advanced-in-the-past-6-years-from-java-8-to-java-15-4gj3</link>
      <guid>https://dev.to/wejdi_gh/how-java-has-advanced-in-the-past-6-years-from-java-8-to-java-15-4gj3</guid>
      <description>&lt;h1&gt;
  &lt;a href="#java-release-cycle" class="anchor"&gt;
  &lt;/a&gt;
  Java Release Cycle
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8rb5PGY6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ixge2lyra4pg9695apg8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8rb5PGY6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ixge2lyra4pg9695apg8.PNG" alt="Java Release"&gt;&lt;/a&gt;&lt;br&gt;
Until version 8 , Java version release  was one every 3 years ,so there were few versions with many features.&lt;/p&gt;

&lt;p&gt;It was therefore complicated to deliver a new version of Java and complicated for developers to upgrade their applications due to the number of changes included.&lt;/p&gt;

&lt;p&gt;This pace no longer keeps up with the reality of the IT world where everything is going faster and faster! So Java architects decided to publish a version every 6 months (therefore a fixed schedule)&lt;/p&gt;

&lt;p&gt;In each version, all the ready features are incorporated, those that are not ready will be delivered in the next one (no more late version).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#java-8-most-important-features-with-examples" class="anchor"&gt;
  &lt;/a&gt;
  Java 8 most important Features with Examples
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m84mWFWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q5owx5pm8ihx15ftowfe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m84mWFWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q5owx5pm8ihx15ftowfe.jpg" alt="java 8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) New Features in Java language&lt;/strong&gt;&lt;br&gt;
‚óè &lt;strong&gt;forEach() method&lt;/strong&gt;&lt;br&gt;
Java 8 has introduced forEach method in java.lang.Iterable interface so that while writing code we focus on business logic only.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tMDCOk6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bkjtewsoc1esrs4tvne1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tMDCOk6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bkjtewsoc1esrs4tvne1.PNG" alt="foreach"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Lambda Expression&lt;/strong&gt;&lt;br&gt;
The biggest new feature of Java 8 is language level support for lambda expressions (Project Lambda).&lt;br&gt;
 Lambda Expressions syntax is (argument) -&amp;gt; (body).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YKY7uRll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pnil6wy1puzm8hhhjg17.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YKY7uRll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pnil6wy1puzm8hhhjg17.PNG" alt="lambada exemples"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Interface‚Äôs default and Static Methods&lt;/strong&gt;&lt;br&gt;
Prior to java 8, interface in java can only have abstract methods. All the methods of interfaces are public &amp;amp; abstract by default. Java 8 allows the interfaces to have default and static methods. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;-Default methods :&lt;/em&gt; The reason we have default methods in interfaces is to allow the developers to add new methods to the interfaces without affecting the classes that implements these interfaces.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xxh2xa4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vnr8ilfar20f2ybj9nnh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xxh2xa4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vnr8ilfar20f2ybj9nnh.PNG" alt="default interface method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-Static methods :&lt;/em&gt; in interfaces are similar to the default methods except that we cannot override these methods in the classes that implements these interfaces.&lt;br&gt;
For example, there are many static methods on the new Stream interface. This makes ‚Äúhelper‚Äù methods easier to find since they can be located directly on the interface, instead of a different&lt;br&gt;
class such as StreamUtil or Streams.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BNYCrXG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7e2843453cqpimh0dde6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BNYCrXG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7e2843453cqpimh0dde6.PNG" alt="static interface method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Functional Interface&lt;/strong&gt;&lt;br&gt;
In Java 8 a functional interface is defined as an interface with exactly one abstract method. This even applies to interfaces that were created with previous versions of Java.&lt;br&gt;
Java 8 comes with several new functional interfaces in the package, java.util.function.&lt;br&gt;
 -Function - takes an object of type T and returns R.&lt;br&gt;
 -Supplier - just returns an object of type T.&lt;br&gt;
 -Predicate - returns a boolean value based on input of type T.&lt;br&gt;
 -Consumer - performs an action with given object of type T.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GWZtr59B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ek81rt1zsumtf1y5fg51.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GWZtr59B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ek81rt1zsumtf1y5fg51.PNG" alt="lambada exemples"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Method References&lt;/strong&gt;&lt;br&gt;
Method references are a special type of lambda expressions. They're often used to create simple lambda expressions by referencing existing methods.&lt;br&gt;
There are four kinds of method references:&lt;br&gt;
  -Static methods&lt;br&gt;
  -Instance methods of particular objects&lt;br&gt;
  -Instance methods of an arbitrary object of a particular type&lt;br&gt;
  -Constructor&lt;br&gt;
Exemple :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ucq9KeOY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m68oku3tsecmy1fh3i75.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ucq9KeOY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m68oku3tsecmy1fh3i75.PNG" alt="Reference methods"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) New Features in Java libraries&lt;/strong&gt;&lt;br&gt;
‚óè &lt;strong&gt;Stream API&lt;/strong&gt;&lt;br&gt;
The Stream interface is such a fundamental part of Java 8 .&lt;/p&gt;

&lt;p&gt;We can use Java Stream API to implement internal iteration, that is better because java framework is in control of the iteration.&lt;/p&gt;

&lt;p&gt;The Stream interface supports the map/filter/reduce pattern and executes lazily, forming the basis&lt;br&gt;
(along with lambdas) for functional-style programming in Java 8.&lt;/p&gt;

&lt;p&gt;There are also corresponding primitive streams (IntStream, DoubleStream, and LongStream) for performance reasons.&lt;/p&gt;

&lt;p&gt;With Java 8, Collection interface has two methods to generate a Stream :&lt;br&gt;
 -stream():Returns a sequential stream considering collection as its source.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_TsuiUTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/08eppxbjnzf62vhxztq4.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_TsuiUTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/08eppxbjnzf62vhxztq4.PNG" alt="stream"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-parallelStream() : Returns a parallel Stream considering collection as its source.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lwH6ofYH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i9afzmhbyfwjk5ku4o39.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lwH6ofYH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i9afzmhbyfwjk5ku4o39.PNG" alt="parallelStream"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Optional&lt;/strong&gt;&lt;br&gt;
Java 8 comes with the Optional class in the java.util package for avoiding null return values (and thus NullPointerException).&lt;/p&gt;

&lt;p&gt;If a value is present, isPresent() will return true and get() will return the value. Stream terminal operations return Optional object. &lt;br&gt;
Some of these methods are:&lt;br&gt;
 -Optional reduce(BinaryOperator accumulator)&lt;br&gt;
 -Optional min(Comparator&amp;lt;? super T&amp;gt; comparator)&lt;br&gt;
 -Optional max(Comparator&amp;lt;? super T&amp;gt; comparator)&lt;br&gt;
 -Optional findFirst()&lt;br&gt;
 -Optional findAny()&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Date/Time API&lt;/strong&gt;&lt;br&gt;
With Java 8, a new Date-Time API is introduced to cover the following drawbacks of old date-time API:&lt;br&gt;
 -Not thread safe&lt;br&gt;
 -Poor design&lt;br&gt;
 -Difficult time zone handling &lt;/p&gt;

&lt;p&gt;Java 8 Date Time API consists of following packages:&lt;br&gt;
1.java.time Package: This is the base package of new Java Date Time API. such as LocalDate, LocalTime, LocalDateTime, Instant, Period, Duration etc. All of these classes are immutable and thread safe.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;java.time.chrono Package: This package defines generic APIs for non ISO calendar systems. We can extend AbstractChronology class to create our own calendar system.&lt;/li&gt;
&lt;li&gt;java.time.temporal Package: This package contains temporal objects and we can use it for find out specific date or time related to date/time object. For example, we can use these to find out the first or last day of the month. You can identify these methods easily because they always have format ‚ÄúwithXXX‚Äù.&lt;/li&gt;
&lt;li&gt;java.time.zone Package: This package contains classes for supporting different time zones and their rules.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#java-9-most-important-features-with-examples" class="anchor"&gt;
  &lt;/a&gt;
  Java 9 most important Features with Examples
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a0BRQeQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vtqupju2h7sz78m9r9fl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a0BRQeQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vtqupju2h7sz78m9r9fl.jpg" alt="java9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java 9 included better support for multi-gigabyte heaps, better native code integration, a different default garbage collector (G1, for "shorter response times") and a self-tuning JVM.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Java Platform Module System (Project Jigsaw)&lt;/strong&gt;&lt;br&gt;
It is a new kind of Java programing component that can be used to collect Java code (classes and packages). The main goal of this project is to easily scale down application to small devices. In Java 9, JDK itself has divided into set of modules to make it more lightweight. It also allows us to develop modular applications.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;JShell: the interactive Java REPL&lt;/strong&gt;&lt;br&gt;
JShell is a REPL (Read Evaluate Print Loop) tool and run from the command line.&lt;br&gt;
It is an interactive Java Shell tool, it allows us to execute Java code from the shell and shows output immediately.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iTnbh9Rp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y1ii6ukss5fn89qs2lwh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iTnbh9Rp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y1ii6ukss5fn89qs2lwh.png" alt="Jshell"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Process API Improvements&lt;/strong&gt;&lt;br&gt;
Java has improved its process API in Java 9 version, they have added couple new classes and methods to ease the controlling and managing.&lt;br&gt;
Two new interfcase in Process API:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;java.lang.ProcessHandle&lt;/li&gt;
&lt;li&gt;java.lang.ProcessHandle.Info&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LyA4EAaB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m3g4nfqky7gd8uund1kv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LyA4EAaB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m3g4nfqky7gd8uund1kv.PNG" alt="process"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Interface Private Methods&lt;/strong&gt;&lt;br&gt;
In Java 9, we can create private methods inside an interface. Interface allows us to declare private methods that help to share common code between non-abstract methods.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--59IF0kD2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ajt9ru8f3giai9vt5e6f.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--59IF0kD2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ajt9ru8f3giai9vt5e6f.PNG" alt="private methods"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Java Collection Factory Methods&lt;/strong&gt;&lt;br&gt;
Factory methods are special type of static methods that are used to create unmodifiable instances of collections. It means we can use these methods to create list, set and map of small number of elements.&lt;br&gt;
It is unmodifiable, so adding new element will throw java.lang.UnsupportedOperationException&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6AN6lH3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fkecqmzel3hl03dt0p6w.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6AN6lH3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fkecqmzel3hl03dt0p6w.PNG" alt="private methods"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Stream API Improvement&lt;/strong&gt;&lt;br&gt;
The Streams API is arguably one of the best improvements to the Java standard library in a long time.&lt;br&gt;
In Java 9, Stream API has improved and new 4 methods are added to the Stream interface :iterate(), dropWhile(), takeWhile(), ofNullable().&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5kQQ2pK2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yqn475h0w14cseqkztxn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5kQQ2pK2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yqn475h0w14cseqkztxn.PNG" alt="stram improvement"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Reactive Streams&lt;/strong&gt;&lt;br&gt;
Java SE 9 Reactive Streams API is a Publish/Subscribe Framework to implement Asynchronous, Scalable and Parallel applications.&lt;br&gt;
Reactive Streams is about asynchronous processing of stream, so there should be a Publisher and a Subscriber. The Publisher publishes the stream of data and the Subscriber consumes the data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O5CA-72j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y5a9vy6zgy0dcimzkhqd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O5CA-72j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y5a9vy6zgy0dcimzkhqd.PNG" alt="reactive stream"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;HTTP 2 Client&lt;/strong&gt;&lt;br&gt;
A new way of performing HTTP calls arrives with Java 9. This much overdue replacement for the old HttpURLConnection API also supports WebSockets and HTTP/2 protocol.&lt;br&gt;
 It supports both Synchronous (Blocking Mode) and Asynchronous Modes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lCM2O3p8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cry4pz2f7t4cw5g9cicj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lCM2O3p8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cry4pz2f7t4cw5g9cicj.PNG" alt="HTTP2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;G1 Garbage Collector&lt;/strong&gt; &lt;br&gt;
The ‚ÄúGarbage-first‚Äù garbage collector, aka G1, is a concurrent multi-threaded GC. It mostly works alongside the application threads (much like the concurrent mark sweep GC) and is designed to offer shorter, more predictable pause times ‚Äì while still achieving high throughput.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Other new Fectures&lt;/strong&gt; &lt;br&gt;
  -Stack-Walking API&lt;br&gt;
  -Filter Incoming Serialization Data&lt;br&gt;
  -Deprecate the Applet API&lt;br&gt;
  -Indify String Concatenation&lt;br&gt;
  -Enhanced Method Handles&lt;br&gt;
  -Java Platform Logging API and Service&lt;br&gt;
  -Compact Strings&lt;br&gt;
  -Parser API for Nashorn&lt;br&gt;
  -Javadoc Search&lt;br&gt;
  -HTML5 Javadoc&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#java-10-most-important-features-with-examples" class="anchor"&gt;
  &lt;/a&gt;
  Java 10 most important Features with Examples
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vJhRtYZh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v5l3nqa2knbcurs0k3i9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJhRtYZh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v5l3nqa2knbcurs0k3i9.png" alt="java10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java 10 is the fastest release of a java version in its 23-year history. Java has been criticized for its slow growth and evolution, but Java 10 just shattered that concept. &lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Local-Variable Type Inference&lt;/strong&gt; &lt;br&gt;
Local variable type inference is the biggest new feature in Java 10 for developers. &lt;br&gt;
Similar to Javascript, Kotlin, and Scala, now Java will also have a var keyword that allows you to declare a local variable without specifying its type.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--05yxDyE4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vwuidgs0dtfup44djuve.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--05yxDyE4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vwuidgs0dtfup44djuve.PNG" alt="var"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Time-Based Release Versioning&lt;/strong&gt; &lt;br&gt;
From JDK 10 release, Java has adopted a new schedule of a new release every six months. There is a lot of debate whether this is a practical approach or not, larger companies also appreciated the stability and the low rate of change of Java so far.&lt;/p&gt;

&lt;p&gt;Oracle has responded to these concerns and continues to&lt;br&gt;
offer long-term releases on a regular basis, but also at&lt;br&gt;
longer intervals. And after Java 8, it is Java 11, which will&lt;br&gt;
receive a long term support again. &lt;/p&gt;

&lt;p&gt;In fact, Java 9 and Java 10 support has just ended, since&lt;br&gt;
Java 11 is out.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Application Class-Data Sharing&lt;/strong&gt; &lt;br&gt;
This feature extends the existing CDS feature for allowing application classesto be placed in the shared archive in order to improve startup and footprint.&lt;/p&gt;

&lt;p&gt;The general idea was that when the JVM first launched, anything loaded was serialized and stored in a file on disk that could be reloaded on future launches of the JVM.&lt;/p&gt;

&lt;p&gt;This meant that multiple instances of the JVM shared the class metadata so it wouldn‚Äôt have to load them all every time.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Parallel Full GC for G1&lt;/strong&gt; &lt;br&gt;
G1 garbage collector was made default in JDK 9.However, the full GC for G1 used a single threaded mark sweepcompact algorithm.&lt;/p&gt;

&lt;p&gt;This has been changed to the parallel mark-sweep-compact algorithm&lt;br&gt;
in Java 10 effectively reducing the stop-the-world time during full GC.&lt;/p&gt;

&lt;p&gt;This change won‚Äôt help the best-case performance times of the&lt;br&gt;
garbage collector, but it does significantly reduce the worst-case&lt;br&gt;
latencies. &lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Garbage-Collector Interface&lt;/strong&gt;&lt;br&gt;
This is one more interesting and useful Java 10 feature which improves the code isolation of different garbage collectors by introducing a common Garbage Collector Interface.&lt;/p&gt;

&lt;p&gt;It will help in the future for adding new GC without changing existing codebase, also help in removing or housekeeping of the previous GC.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Root Certificates&lt;/strong&gt;&lt;br&gt;
With Java 10, Oracle has open-sourced the root certificates in&lt;br&gt;
Oracle‚Äôs Java SE Root CA program in order to make OpenJDK&lt;br&gt;
builds more attractive to developers and to reduce the&lt;br&gt;
differences between those builds and Oracle JDK builds. &lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Thread-Local Handshakes&lt;/strong&gt;&lt;br&gt;
This is an internal JVM feature to improve performance.&lt;br&gt;
This feature provides a way to execute a callback on threads without performing a global VM safepoint. Make it both possible and cheap to stop individual threads and not just all threads or none.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;API‚Äôs Added&lt;/strong&gt;&lt;br&gt;
-List, Map &amp;amp; Set Interfaces are added with a static copyOf(Collection) method. Its returns an unmodifiable List, Map or Set containing the entries provided. For a List, if the given List is subsequently modified, the returned List will not reflect such modifications.&lt;/p&gt;

&lt;p&gt;-Optional &amp;amp; its primitive variations get a method orElseThrow(). This is exactly same as get(), however the java doc states that it is a preferred alternative then get().&lt;/p&gt;

&lt;p&gt;-Collectors class gets various methods for collecting unmodifiable collections (Set, List, Map).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wx5LqoZ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fxuvgxld30whuxngzikx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wx5LqoZ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fxuvgxld30whuxngzikx.PNG" alt="java10 added API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#java-11-most-important-features-with-examples" class="anchor"&gt;
  &lt;/a&gt;
  Java 11 most important Features with Examples
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wA_o2lh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a050qvgs7mxaqkgnk1ke.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wA_o2lh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a050qvgs7mxaqkgnk1ke.png" alt="java11"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java 11 is the second LTS release after Java 8. Since Java 11, Oracle JDK would no longer be free for commercial use.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Running Java File&lt;/strong&gt;&lt;br&gt;
We can avoid the compilation phase. We can compile execute in one command. We use the java command. It will implicitly compile without saving the.class file. &lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Java String Methods&lt;/strong&gt;&lt;br&gt;
1) isBlank(): This method returns true if the string is empty or contains only white spaces code points.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DDLl15qF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zadb2rugxjfknimvfpxp.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DDLl15qF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zadb2rugxjfknimvfpxp.PNG" alt="isBlank"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) lines() :  returns a reference for a stream of strings that are substrings we received after splitting by lines.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QFNw0VKa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dqx783h4vabzoj8rh1uo.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QFNw0VKa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dqx783h4vabzoj8rh1uo.PNG" alt="lines"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;3) strip(), stripLeading() and the stripTrailing : remove white spaces from the beginning, the ending and the remr of the string. Itis a 'Unicode-Aware' evolution of trim();&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--onvh-OwZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aet1nuovc035j8lv8isb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--onvh-OwZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aet1nuovc035j8lv8isb.PNG" alt="strip"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) repeat(): method repeats the string on which it is invoked the number of times it receives.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HF0XjE11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n289nynt5pocl6z8tmgy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HF0XjE11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n289nynt5pocl6z8tmgy.PNG" alt="repeat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Using var in Lambda Expressions&lt;/strong&gt;&lt;br&gt;
As of Java 11 we can use the var keyword within lambda expressions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jiKOtRqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c02pc0eui5hf21c5g69c.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jiKOtRqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c02pc0eui5hf21c5g69c.PNG" alt="lambda var"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When using var in a lambda expression we must use it on all parameters and we cannot mix it with using specific types.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1TpDOa7H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eacab6dimdj0w90l9262.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1TpDOa7H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eacab6dimdj0w90l9262.PNG" alt="lambda var error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Nested Based Access Control&lt;/strong&gt;&lt;br&gt;
Before Java 11, Java allows classes and interfaces to be nested within each other. These nested types have unrestricted access to each other, including to private fields, methods, and constructors.&lt;/p&gt;

&lt;p&gt;As of Java 11, there are new methods in Class class that assist us with getting information about the created nest. These methods include the following: &lt;br&gt;
&lt;strong&gt;getNestHost()&lt;/strong&gt; : This returns the nest host of the nest to which this Class object belongs&lt;br&gt;
&lt;strong&gt;getNestMembers()&lt;/strong&gt; : This returns an array containing Class objects representing all the members of the nest to which this Class object belongs&lt;br&gt;
&lt;strong&gt;isNestemateOf()&lt;/strong&gt; : This determines if the given Class is a nestmate of this Class object&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HaJ2chHC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ix4hyxo9zqqa9lspn2vz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HaJ2chHC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ix4hyxo9zqqa9lspn2vz.PNG" alt="nested1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--38bLkQAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2h3fdm1tr67yxom3ueag.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--38bLkQAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2h3fdm1tr67yxom3ueag.PNG" alt="nested2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Epsilon: A No-Op Garbage Collector&lt;/strong&gt;&lt;br&gt;
As of Java 11, the JVM has an experimental feature that allows us to run the JVM without any actual memory reclamation.&lt;/p&gt;

&lt;p&gt;The goal is to provide a completely passive garbage collector implementation with a bounded allocation limit and the lowest latency overhead possible.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;ZGC Scalable Low Latency GC&lt;/strong&gt;&lt;br&gt;
As of Java 11, we can use the ZGC. This new GC is available as an experimental feature.&lt;br&gt;
ZGC is a scalable low latency garbage collector. It performs the expensive work concurrently without stopping the execution of application threads for more than 10ms. &lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;HTTP Client&lt;/strong&gt;&lt;br&gt;
As of Java 11, the HTTP Client API is more standardized. The new API supports both HTTP/1.1 and HTTP/2. The new API also supports HTML5 WebSockets. &lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Files Reading and Writing&lt;/strong&gt;&lt;br&gt;
Java 11 introduces two new methods that significantly assist with reading and writing strings from and to files : &lt;strong&gt;readString()&lt;/strong&gt;, &lt;strong&gt;writeString()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---8ZQv3_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4lg6psnlecbb7zl43863.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---8ZQv3_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4lg6psnlecbb7zl43863.PNG" alt="write read file"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Flight Recorder&lt;/strong&gt;&lt;br&gt;
Flight Recorder which earlier used to be a commercial add-on in Oracle JDK is now open-sourced since Oracle JDK is itself not free anymore.&lt;/p&gt;

&lt;p&gt;JFR is a profiling tool used to gather diagnostics and profiling data from a running Java application.&lt;/p&gt;

&lt;p&gt;Its performance overhead is negligible and that‚Äôs usually below 1%. Hence it can be used in production applications.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#java-12-most-important-features-with-examples" class="anchor"&gt;
  &lt;/a&gt;
  Java 12 most important Features with Examples
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aOlCi7Ct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i4o37y7z0x06hstbnzif.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aOlCi7Ct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i4o37y7z0x06hstbnzif.jpg" alt="java12"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java 12 was launched on March 19 2019 , which is a part of the six-month release cycle.&lt;br&gt;
It is a Non-LTS version. Hence it won‚Äôt have long term support.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;JVM Changes&lt;/strong&gt;&lt;br&gt;
‚Äì Shenandoah A Low-Pause-Time Garbage Collector: Java 12 adds Shenandoah, an experimental garbage-collection algorithm, to reduce garbage-collection pause times by performing evacuation work concurrently with running of Java threads.&lt;/p&gt;

&lt;p&gt;-Prompt return of unused committed memory: G1 to automatically return Java heap memory to the operating system when idle. This memory is released in a reasonable period of time when there is very low application activity.&lt;/p&gt;

&lt;p&gt;-Abortable Mixed Collections for G1: Improvements in G1 efficiency include making G1 mixed collections abortable if they might exceed the defined pause target. This is done by splitting the mixed collection set into mandatory and optional.&lt;/p&gt;

&lt;p&gt;-Default CDS Archives: The end goal is to improve the JDK build process by generating a class data-sharing (CDS) archive. Among the goals for this feature are: &lt;br&gt;
1) Improve out-of-the-box startup time.&lt;br&gt;
2) Get rid of the need to run -Xshare: dump to benefit from the CDS.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Switch Expressions&lt;/strong&gt;&lt;br&gt;
There are two main changes to switch in Java with this JEP:&lt;br&gt;
1) Introduction of case L -&amp;gt; syntax that removes the need for break statements, because only the statements next to -&amp;gt; is executed.&lt;br&gt;
2) switch can be an expression, so it can have a value, or it can return a value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NKwAXg5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vm93e579q93u5gawc8bb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NKwAXg5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vm93e579q93u5gawc8bb.PNG" alt="switch 12 "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;File.mismatch method&lt;/strong&gt;&lt;br&gt;
Java 12 added the following method to compare two files:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--46MUFGal--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4v705r4h56opasd4lyfu.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46MUFGal--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4v705r4h56opasd4lyfu.PNG" alt="file mismatch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This method returns the position of the first mismatch or -1L if there is no mismatch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ypT9KXb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5nrl3e4zgnmsac42gtuy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ypT9KXb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5nrl3e4zgnmsac42gtuy.PNG" alt="mismatch 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5BK6u3l4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qlovtmmwclaltd8xyolu.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5BK6u3l4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qlovtmmwclaltd8xyolu.PNG" alt="mismatch result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Compact Number Formatting&lt;/strong&gt;&lt;br&gt;
Java 12 extends existing number formatting APIs to provide support for locale-sensitive compact number formatting.&lt;br&gt;
Now numbers like 1000 (for example) can be formatted as "1K" (short style) or "1 thousand" (long style).  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xw-JxvRb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lxyxsc4xcdacz4zjjo4x.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xw-JxvRb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lxyxsc4xcdacz4zjjo4x.PNG" alt="number formatter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Teeing Collectors&lt;/strong&gt;&lt;br&gt;
Teeing Collector is the new collector utility introduced in the Streams API.&lt;br&gt;
This collector has three arguments ‚Äì Two collectors and a Bi-function.&lt;br&gt;
All input values are passed to each collector and the result is available in the Bi-function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qq83aDfF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2a59u9j7syqx23ijwf41.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qq83aDfF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2a59u9j7syqx23ijwf41.PNG" alt="teening collectors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Java Strings New Methods&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#1-javalangstring-" class="anchor"&gt;
  &lt;/a&gt;
  1) java.lang.String :
&lt;/h5&gt;

&lt;p&gt;-indent‚Äã(int n): Adjusts the indentation of each line of this string based on the value of n, and normalizes line termination characters.&lt;/p&gt;

&lt;p&gt;-If n &amp;gt; 0, then n spaces (U+0020) are inserted at the beginning of each line.&lt;br&gt;
 -If n &amp;lt; 0, then up to n white space characters are removed from the beginning of each line. If a given line does not contain sufficient white space then all leading white space characters are removed. The tab character is also treated as a single character.&lt;br&gt;
 -If n = 0, then the line remains unchanged. However, line terminators are still normalized&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Z9TizYw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ifwc5bwm239bc7lfablu.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Z9TizYw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ifwc5bwm239bc7lfablu.PNG" alt="sring indent"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;- R transform‚Äã(Function&amp;lt;? super String,‚Äã? extends R&amp;gt; f): This method allows the application of a function to this string.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ptMlxaX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7g58ogj3qwc475x4rcfj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ptMlxaX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7g58ogj3qwc475x4rcfj.PNG" alt="sring transform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#2-jvm-constants-api-" class="anchor"&gt;
  &lt;/a&gt;
  2) JVM Constants API :
&lt;/h5&gt;

&lt;p&gt;The Constants API methods don‚Äôt have much usage for normal development related tasks.&lt;/p&gt;

&lt;p&gt;-Optional describeConstable(): Returns an Optional containing the nominal descriptor for this instance, which is the instance itself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QHhdIaZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3edzvvdbulmryv3yalga.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QHhdIaZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3edzvvdbulmryv3yalga.PNG" alt="DescribeConstable"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-String resolveConstantDesc‚Äã(MethodHandles.Lookup lookup): Resolves this instance as a ConstantDesc, the result of which is the instance itself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7eg0LXAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m6tz6gbtnt6bz9n7r9m0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7eg0LXAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m6tz6gbtnt6bz9n7r9m0.PNG" alt="resolveConstantDesc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;#Java 13 most important Features with Examples#&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F5NbRxCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pyr9zxal2olw9zto769c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F5NbRxCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pyr9zxal2olw9zto769c.png" alt="java13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java 13 was released for production use on 17th September 2019. There are not a lot of developer-specific features in Java 13 because of the 6-month release cycle.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Switch Expressions&lt;/strong&gt;&lt;br&gt;
We initially saw switch expressions in JDK 12. Java 13's switch expressions build on the previous version by adding a new yield statement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8rloCmJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jqe3upy8cpx093gbjdja.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8rloCmJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jqe3upy8cpx093gbjdja.PNG" alt="switch 13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Text Blocks&lt;/strong&gt;&lt;br&gt;
Text blocks for multi-line Strings such as embedded JSON, XML, HTML, etc.It allows us to create multiline strings easily. The multiline string has to be written inside a pair of triple-double quotes.&lt;/p&gt;

&lt;p&gt;Earlier, to embed JSON in our code, we would declare it as a String literal:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gbjjY4bH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/npib8c06mk8ptsjaeekw.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gbjjY4bH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/npib8c06mk8ptsjaeekw.PNG" alt="json string"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, it‚Äôs useful in easily creating HTML and JSON strings in our Java program :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8j8CVQD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e4d9cwtnob2ta7ox3jzn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8j8CVQD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e4d9cwtnob2ta7ox3jzn.PNG" alt="json html 13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, java.lang.String now has three new methods to manipulate text blocks:&lt;br&gt;
1) formatted(Object‚Ä¶ args): it‚Äôs similar to the String format() method. It‚Äôs added to support formatting with the text blocks.&lt;/p&gt;

&lt;p&gt;2) stripIndent(): used to remove the incidental white space characters from the beginning and end of every line in the text block. This method is used by the text blocks and it preserves the relative indentation of the content.&lt;/p&gt;

&lt;p&gt;3) translateEscapes(): returns a string whose value is this string, with escape sequences translated as if in a string literal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qgrvJt1Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1a9spp58z224ed9gk8lg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qgrvJt1Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1a9spp58z224ed9gk8lg.PNG" alt="string 13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ynFZVH9L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/un3viqud5q1v36zsznsy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ynFZVH9L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/un3viqud5q1v36zsznsy.PNG" alt="output string 13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Dynamic CDS Archive&lt;/strong&gt;&lt;br&gt;
Class data sharing (CDS) has been a prominent feature of Java HotSpot VM for a while now. It allows class metadata to be shared across different JVMs to reduce startup time and memory footprint.&lt;br&gt;
Now, the creation of CDS archive and using it is much easier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m_uCsziQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fkmhagirwvv6qehfsvzy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m_uCsziQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fkmhagirwvv6qehfsvzy.PNG" alt="dynamic cds"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;ZGC: Uncommit Unused Memory&lt;/strong&gt;&lt;br&gt;
The Z Garbage Collector was introduced in Java 11 as a low-latency garbage collection mechanism.It adds a short pause time before the heap memory cleanup. But, the unused memory was not being returned to the operating system.&lt;/p&gt;

&lt;p&gt;Starting with Java 13, the ZGC now returns uncommitted memory to the operating system by default.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;FileSystems.newFileSystem() Method&lt;/strong&gt;&lt;br&gt;
Three new methods have been added to the FileSystems class to make it easier to use file system providers, which treats the contents of a file as a file system : &lt;br&gt;
-newFileSystem(Path)&lt;br&gt;
-newFileSystem(Path, Map)&lt;br&gt;
-newFileSystem(Path, Map, ClassLoader)&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;DOM and SAX Factories with Namespace Support&lt;/strong&gt;&lt;br&gt;
There are new methods to instantiate DOM and SAX factories with Namespace support:&lt;br&gt;
-newDefaultNSInstance()&lt;br&gt;
-newNSInstance()&lt;br&gt;
-newNSInstance(String factoryClassName, ClassLoader classLoader)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VJrQ9kTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hxcst95ew27cxqddv8c8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VJrQ9kTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hxcst95ew27cxqddv8c8.PNG" alt="dom sax"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Miscellaneous Changes&lt;/strong&gt;&lt;br&gt;
 Java 13 has given us a few more notable changes:&lt;br&gt;
-java.time ‚Äì new official Japanese era name added&lt;br&gt;
-javax.crypto ‚Äì support for MS Cryptography Next Generation (CNG)&lt;br&gt;
-javax.security ‚Äì property jdk.sasl.disabledMechanisms added to disable SASL mechanisms&lt;br&gt;
-javax.xml.crypto ‚Äì new String constants introduced to represent Canonical XML 1.1 URIs&lt;br&gt;
-javax.xml.parsers ‚Äì new methods added to instantiate DOM and SAX factories with namespaces support&lt;br&gt;
-Unicode support upgraded to version 12.1&lt;br&gt;
-Support added for Kerberos principal name canonicalization and cross-realm referrals&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#java-14-most-important-features-with-examples" class="anchor"&gt;
  &lt;/a&gt;
  Java 14 most important Features with Examples
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S5Nj6L9p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bz5heu9oo66h0k0e04yr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S5Nj6L9p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bz5heu9oo66h0k0e04yr.png" alt="java 14"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keeping up with the six-month cycle tradition, Java 14, another non-LTS version is scheduled to release on March 17, 2020.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Switch Expressions&lt;/strong&gt;&lt;br&gt;
Switch Expressions after staying a preview feature in the last two releases ‚ÄìJava 12 and Java 13 have finally attained permanent status in Java 14.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h1fZmSZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/apoow4x49kwaxtq99wb9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h1fZmSZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/apoow4x49kwaxtq99wb9.PNG" alt="switch 14"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Pattern Matching for instanceof&lt;/strong&gt;&lt;br&gt;
The old way to typecast a type to another type is:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DxOHp-qR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xbd7i5f9wk9mw4x7h75t.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DxOHp-qR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xbd7i5f9wk9mw4x7h75t.PNG" alt="instance old"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The new way is :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aJnatqEI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gx0hoss6tdcsr3brwh5j.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aJnatqEI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gx0hoss6tdcsr3brwh5j.PNG" alt="instance new"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above code, the instance jd would be only assigned if obj is of type Journaldev. The scope of the variable is limited to the conditional block only.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Helpful NullPointerExceptions&lt;/strong&gt;&lt;br&gt;
 Improvement in NullPointerExceptions exception message generated by JVM.&lt;/p&gt;

&lt;p&gt;Before Java 14:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UPEtZoS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w54hfu2bg28ykvbeheez.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UPEtZoS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w54hfu2bg28ykvbeheez.PNG" alt="NullPointer old "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java 14 introduced a new JVM feature which gives better insights with a more descriptive stack as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YWPFHWm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/71h80cqpvochy3k4tzxq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YWPFHWm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/71h80cqpvochy3k4tzxq.PNG" alt="NullPointer new "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Records&lt;/strong&gt;&lt;br&gt;
We need to write a lot of low-value, repetitive code to write a simple data carrier class responsibly: constructors, accessors, equals(), hashCode(), toString(), etc. To avoid this repetitive code, Java is planned to use record.&lt;/p&gt;

&lt;p&gt;Before Java 14 :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TsL5DtLd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p0bx7johm33vr7sa0lol.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TsL5DtLd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p0bx7johm33vr7sa0lol.PNG" alt="records old"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After Java 14 : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YOf540GT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tw3j4a5q7td1y7qjqwsx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YOf540GT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tw3j4a5q7td1y7qjqwsx.PNG" alt="record new"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Furthermore, we can add additional fields, methods, and constructor to the record in the following way:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lrOwK1G_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8m84zdewhycsqvb9cuys.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lrOwK1G_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8m84zdewhycsqvb9cuys.PNG" alt="record extra PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Few important things to note about Records:&lt;br&gt;
-A record can neither extend a class nor it can be extended by another class. It‚Äôs a final class.&lt;br&gt;
-Records Can Implement Interfaces.&lt;br&gt;
-Records support multiple constructors.&lt;br&gt;
-Records Allow Modifying Accessor Methods.&lt;br&gt;
-Records cannot be abstract.&lt;br&gt;
-Records cannot extend any other class and cannot define instance fields inside the body. Instance fields must be defined in the state description only.&lt;br&gt;
-Declared fields are private and final.&lt;br&gt;
-The body of a record allows static fields and methods.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Text Blocks&lt;/strong&gt;&lt;br&gt;
Text Blocks were introduced as a preview feature in Java 13 with the goal to allow easy creation of multiline string literals. It‚Äôs useful in easily creating HTML and JSON or SQL query strings.&lt;/p&gt;

&lt;p&gt;In Java 14, Text Blocks are still in preview with some new additions:&lt;br&gt;
-Backslash for displaying nice-looking multiline string blocks.&lt;br&gt;
-\s is used to consider trailing spaces which are by default ignored by the compiler. It preserves all the spaces present before it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IRPkQGqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5uqmxpz2aw6n85fz75ww.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IRPkQGqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5uqmxpz2aw6n85fz75ww.PNG" alt="text blocks 14"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Foreign-Memory Access API&lt;/strong&gt;&lt;br&gt;
An effective Java API is to be introduced in the Java 14 JDK, which enables Java applications to safely and efficiently access foreign memory stored outside the Java heap. The foreign-memory access API introduces three main abstractions: MemorySegment, MemoryAddress and MemoryLayout.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#java-15-most-important-features-with-examples" class="anchor"&gt;
  &lt;/a&gt;
  Java 15 most important Features with Examples
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RQEXKex9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r9hfyio1u2vrkyb5tqzt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RQEXKex9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r9hfyio1u2vrkyb5tqzt.png" alt="java 15"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java 15 (Java SE 15) and its Java Development Kit 15 (JDK 15) open-source has been released on 15 September 2020.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Sealed Classes&lt;/strong&gt;&lt;br&gt;
Sealed classes have been there in Kotlin since a while and Java 15 finally introduces this feature for better control over inheritance.&lt;br&gt;
A class can be sealed by using the &lt;strong&gt;sealed&lt;/strong&gt; modifier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_h00nre3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9qvrwynkx41gg95zwym2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_h00nre3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9qvrwynkx41gg95zwym2.PNG" alt="sealed class"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, the above code means, only the classes defined after the keyword &lt;strong&gt;permits&lt;/strong&gt; are allowed to extend the Vehicle sealed class.&lt;/p&gt;

&lt;p&gt;Every permitted class must be set with an explicit modifier. It can either be final or sealed or non-sealed :&lt;br&gt;
-A permitted subclass that‚Äôs declared final cannot be extended further.&lt;br&gt;
-A permitted subclass that‚Äôs declared sealed can be extended further but only by classes that are permitted by the subclass.&lt;br&gt;
-A permitted subclass may be declared non-sealed can be extended further by any class. The superclass cannot restrict the subclasses further down this class hierarchy.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Hidden Classes&lt;/strong&gt;&lt;br&gt;
While most developers won't find a direct benefit from them, anyone who works with dynamic bytecode or JVM languages will likely find them useful.&lt;/p&gt;

&lt;p&gt;The goal of hidden classes is to allow the runtime creation of classes that are not discoverable.&lt;/p&gt;

&lt;p&gt;Classes such as these typically have a short lifecycle, and thus, hidden classes are designed to be efficient with both loading and unloading.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Foreign Memory API&lt;/strong&gt;&lt;br&gt;
Foreign memory access is already an incubating feature of Java 14. In Java 15, the goal is to continue its incubation status while adding several new features:&lt;br&gt;
-A new VarHandle API, to customize memory access var handles&lt;br&gt;
-Support for parallel processing of a memory segment using the Spliterator interface&lt;br&gt;
-Enhanced support for mapped memory segments&lt;br&gt;
-Ability to manipulate and dereference addresses coming from things like native calls&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;Garbage Collectors&lt;/strong&gt;&lt;br&gt;
In Java 15, both ZGC and Shenandoah will be no longer be experimental. Both will be supported configurations that teams can opt to use, while the G1 collector will remain the default.&lt;/p&gt;

&lt;p&gt;‚óè &lt;strong&gt;The Nashorn JavaScript engine&lt;/strong&gt;&lt;br&gt;
Of note, The Nashorn JavaScript engine, originally introduced in Java 8, is now removed. With the introduction of GraalVM and other VM technologies recently, it's clear Nashorn no longer has a place in the JDK ecosystem.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This article presented the evolution of Java from Java 8 to Java 15 .&lt;/p&gt;

&lt;p&gt;Java has evolved enormously as a language and as an ecosystem since Java 8 was released over six years ago by adding many new features help to make Java a competitive option compared to other JVM-based rivals.&lt;/p&gt;

</description>
      <category>java</category>
    </item>
    <item>
      <title>Copy URL To Clipboard On Npm Run Start</title>
      <author>David Dal Busco</author>
      <pubDate>Fri, 11 Dec 2020 12:11:37 +0000</pubDate>
      <link>https://dev.to/daviddalbusco/copy-url-to-clipboard-on-npm-run-start-3gp</link>
      <guid>https://dev.to/daviddalbusco/copy-url-to-clipboard-on-npm-run-start-3gp</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KLXoeBNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AvO-uFCV6MmXmDCbHS5iO-Q.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KLXoeBNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AvO-uFCV6MmXmDCbHS5iO-Q.jpeg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@giabyte?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Gia Oris&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;I am not sure anyone will ever need the following tricks but, at my client‚Äôs place, we have an application which can only be accessed through an URL which contains a dynamic base64 parameter. Needless to say, it makes its local development a bit inconvenient.&lt;/p&gt;

&lt;p&gt;In addition, I have to admit, I am not a big fan of CLI‚Äôs options which can automatically open browser. Even though I mostly use the Chrome Incognito mode for development purpose, I like to switch often between browsers to try out what I developed.&lt;/p&gt;

&lt;p&gt;Finally, I don‚Äôt use bookmarks (don‚Äôt judge me) and, I often switch between technologies. Therefore, without configuration, every time another port has to be used ( &lt;code&gt;:3333&lt;/code&gt; or &lt;code&gt;:4200&lt;/code&gt; or &lt;code&gt;:8000&lt;/code&gt; or &lt;code&gt;:8100&lt;/code&gt; etc.).&lt;/p&gt;

&lt;p&gt;That‚Äôs why I had the idea to add a pre-start script to the application which should copy the start URL of the application to my clipboard. Doing so, I can then just select a browser, paste the URI and, I am good to go.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#dependencies" class="anchor"&gt;
  &lt;/a&gt;
  Dependencies
&lt;/h3&gt;

&lt;p&gt;In order to copy or read value to the clipboard from a NodeJS script, I used the library &lt;a href="https://github.com/sindresorhus/clipboardy"&gt;clipboardy&lt;/a&gt; which implement such a cross-platform feature.&lt;/p&gt;

&lt;p&gt;In addition, I also added &lt;a href="https://github.com/chalk/chalk"&gt;chalk&lt;/a&gt; ann &lt;a href="https://github.com/sindresorhus/boxen"&gt;boxen&lt;/a&gt; to print out the URL to the console in a stylish way.&lt;/p&gt;

&lt;p&gt;You may notice that all these dependencies are open source and developed by the same person, &lt;a href="https://twitter.com/sindresorhus"&gt;Sindre Sorhus&lt;/a&gt;, which definitely deserve a shout-out for this awesome contribution and work üëç.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i clipboardy chalk boxen &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#script" class="anchor"&gt;
  &lt;/a&gt;
  Script
&lt;/h3&gt;

&lt;p&gt;Once the dependencies fetched, I created the pre-start script itself. In this example, I create a file &lt;code&gt;start-url.js&lt;/code&gt; at the root of the project.&lt;/p&gt;

&lt;p&gt;The script primary generates the &lt;code&gt;url&lt;/code&gt; which I am looking to copy in my clipboard. On purpose, I am using an &lt;code&gt;Hello World üëã&lt;/code&gt; string to demonstrate that it is possible to encode complex parameters.&lt;/p&gt;

&lt;p&gt;To print out a nice message, I use &lt;code&gt;chalk&lt;/code&gt; with colors, in for- and background, and the bold option. I use &lt;code&gt;\n\n&lt;/code&gt; to create newlines. It is worth to notice that the library offer many options such as combining or nesting styles.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;clipboardy&lt;/code&gt; to copy the URL to the clipboard is actually really few work and can be solved by calling its function &lt;code&gt;copy&lt;/code&gt; with the all URL as input parameter.&lt;/p&gt;

&lt;p&gt;Finally, in a &lt;code&gt;console.log&lt;/code&gt; , I print out the message inside a box generated with &lt;code&gt;boxen&lt;/code&gt; .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;clipboardy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;chalk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chalk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;boxen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;boxen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World üëã&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`http://localhost:3333/profile/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chalk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Your URL&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`\n\n&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;chalk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`\n\n&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;chalk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Copied local address to clipboard!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chalk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;red&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Cannot copy &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; to clipboard ü•∫\n\n&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;boxen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;borderStyle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;borderColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yellow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#life-cycle" class="anchor"&gt;
  &lt;/a&gt;
  Life Cycle
&lt;/h3&gt;

&lt;p&gt;Thanks to &lt;a href="https://docs.npmjs.com/cli/v6/using-npm/scripts"&gt;npm&lt;/a&gt; it is possible to execute scripts at different life cycles. Because I was looking to copy the URL when I start locally the application, I added it as a &lt;code&gt;prestart&lt;/code&gt; script to my &lt;code&gt;package.json&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"prestart"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node start-url.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You might ask ‚ÄúBut David, why a prestart and not poststart?‚Äù to which I would answer that &lt;code&gt;prestart&lt;/code&gt; is executed for sure. On the contrary, &lt;code&gt;poststart&lt;/code&gt;, is indeed also executed but, only when the &lt;code&gt;start&lt;/code&gt; life cycle would be released. If your local server, as often, would stay active to watch for changes, &lt;code&gt;poststart&lt;/code&gt; would only resolve when you would cancel your local server.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#demo" class="anchor"&gt;
  &lt;/a&gt;
  Demo
&lt;/h3&gt;

&lt;p&gt;Everything being in place, when I hit &lt;code&gt;npm run start&lt;/code&gt; in my console, the URL is generated, copied to the clipboard and, I notice the following output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BTN_SgeS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2Ald-QYTtC5iBSisGVvNzPMA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BTN_SgeS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2Ald-QYTtC5iBSisGVvNzPMA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I open one of my browser, I can paste the result in the navigation bar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--exYQWh5Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AglgIo-xgThAKIlL-Y1uqtw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--exYQWh5Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AglgIo-xgThAKIlL-Y1uqtw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, hit &lt;code&gt;enter&lt;/code&gt; and access my URL with the generated parameters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O4sv78cO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AZgx91lAb1eO8wN66IqYuYA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O4sv78cO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AZgx91lAb1eO8wN66IqYuYA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;As underlined in the introduction of this post, I am really not sure if anyone will ever need this solution ever üòÖ. Anyway, I hope it was a fun read and let me know if you would improve anything.&lt;/p&gt;

&lt;p&gt;To infinity and beyond!&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;




&lt;p&gt;You can reach me out on &lt;a href="https://twitter.com/daviddalbusco"&gt;Twitter&lt;/a&gt; and, why not, give a try to &lt;a href="https://deckdeckgo.com/"&gt;DeckDeckGo&lt;/a&gt; for your next presentations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://deckdeckgo.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q4yatxfq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://deckdeckgo.com/assets/meta/deckdeckgo-meta.png" alt="DeckDeckGo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
      <category>npm</category>
    </item>
    <item>
      <title>Three unusual qualities we look for to hire amazing developers</title>
      <author>Douglas Parsons</author>
      <pubDate>Fri, 11 Dec 2020 12:05:00 +0000</pubDate>
      <link>https://dev.to/dglsparsons/three-unusual-qualities-we-look-for-to-hire-amazing-developers-50pd</link>
      <guid>https://dev.to/dglsparsons/three-unusual-qualities-we-look-for-to-hire-amazing-developers-50pd</guid>
      <description>&lt;p&gt;Here at Shamaazi, we‚Äôve recently gone through a round of hiring‚Ä¶ and wow, hiring is hard!&lt;/p&gt;

&lt;p&gt;It‚Äôs challenging finding engineers who have the right qualities, attitude and personality to join a team. We‚Äôre a &lt;strong&gt;tiny&lt;/strong&gt; company, with just 2 engineers, so any new teammates have a massive impact on our products and culture.&lt;/p&gt;

&lt;p&gt;We‚Äôre super careful about who we hire because of this.&lt;/p&gt;

&lt;p&gt;We don‚Äôt expect or search for rockstar developers who can recite algorithms and live and breath software. We don‚Äôt expect the world‚Äôs most qualified experts in the technology we use. We don‚Äôt expect people to spend every moment of their spare time programming.&lt;/p&gt;

&lt;p&gt;The qualities we do look for are probably considered unusual compared to most software engineering outfits. Let's take a look at the three we use to ensure a good fit for working at Shamaazi.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#eagleeyed-attention-to-detail-" class="anchor"&gt;
  &lt;/a&gt;
  Eagle-eyed attention to detail üîç &lt;a href="#eagle-eyed-attention-to-detail-%F0%9F%94%8D"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We give our potential candidates a short engineering assignment as part of our hiring process. We explicitly request that they don't spend more than an hour on it, but it still gives us a vast amount of information that just simply isn't evident from their CV.&lt;/p&gt;

&lt;p&gt;Reviewing these assignments has been eye-opening. Most solutions lack attention to detail in at least one area. We begin by asking relatively simple questions of the submissions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Correctness&lt;/strong&gt; ‚Äì does the solution work for all inputs?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Validation&lt;/strong&gt; ‚Äì are the inputs validated, what happens if we try to break the system?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Testing&lt;/strong&gt; ‚Äì How do we know their solution is correct? Is there any proof that it reliably works?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Quality&lt;/strong&gt; ‚Äì How easy is their solution to understand, maintain or extend?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most technical tests we‚Äôve seen fail on at least two or three of these, if not all four. Quite simply, they lack attention to detail in both their quality and behaviour.&lt;/p&gt;

&lt;p&gt;This lack of attention to detail also applies to CVs. We‚Äôve seen poor grammar, typos and even sentences that don‚Äôt make sense! Quite frankly, if they can‚Äôt complete a short assignment with rigour, or can‚Äôt write a CV without errors, can we really trust them with a product that could shape the future of our company?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-ability-to-express-clearly-" class="anchor"&gt;
  &lt;/a&gt;
  The ability to express clearly üó£Ô∏è &lt;a href="#the-ability-to-express-clearly-%F0%9F%97%A3%EF%B8%8F"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Writing good code, a good CV, or writing prose all have a lot in common. They are all forms of &lt;a href="https://dev.to/dglsparsons/why-effective-communication-is-the-key-skill-for-being-an-awesome-programmer-546"&gt;communication&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Writing good code is about communicating a set of requirements both to the computer, and to a future maintainer, CVs communicate your skills and knowledge to a potential employer, and prose is a form of communicating ideas by writing them down.&lt;/p&gt;

&lt;p&gt;As a result, the ability to express yourself clearly is super important. Engineering teams don‚Äôt work in isolation, and working remotely causes a whole new set of challenges for communication. In order to stay well-aligned, agile, and have the ability to discuss complicated topics, we communicate constantly as a team. This is a fundamental aspect of a team being &lt;a href="https://timreview.ca/article/567"&gt;high-performing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, when reviewing engineers, we have to consider a few key questions: Does their code communicate its purpose clearly? Is it well structured? Well written? Does it clearly separate concerns? Does it have sensible naming? Does their CV communicate their strengths and experience eloquently and concisely? When prompted in an interview, can a candidate clearly express their thought-process? Can they articulate complicated ideas?&lt;/p&gt;

&lt;p&gt;If the answer to all of these is ‚Äòyes‚Äô, then we know we have a candidate who is going to be a delight to work with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-positive-outlook-" class="anchor"&gt;
  &lt;/a&gt;
  A positive outlook üòÑ &lt;a href="#a-positive-outlook-%F0%9F%98%84"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This one sounds strange, but I was first introduced to the idea by Patrick Collison, the Founder and CEO of Stripe. In his excellent talk &lt;a href="https://www.youtube.com/watch?v=fPfYN5gU_C0"&gt;‚ÄòHow to Scale‚Äô&lt;/a&gt;, Patrick discusses in great depth the difficulties in building the culture he wanted.&lt;/p&gt;

&lt;p&gt;At an ideal company, we would go to work and everyone would be happy. People would love their jobs and be enthusiastic and supportive. The question then becomes: ‚Äòhow do we create a company where this is the culture? Where the atmosphere is happy‚Äô. This is an incredible challenge, one that has no easy solution.&lt;/p&gt;

&lt;p&gt;As a side note, if anyone knows how to build a company that can turn unhappy people into happy ones, please let me know (I‚Äôd like to send my parents there)!&lt;/p&gt;

&lt;p&gt;Thankfully, Patrick Collison also shared his ‚Äòcheat‚Äô to achieve this. Simply hire people who are happy, positive people already. This is the culture we want to build, so we‚Äôre taking the same shortcut he did at Stripe. By hiring happy people, we can ensure we maintain a happy culture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts-" class="anchor"&gt;
  &lt;/a&gt;
  Closing Thoughts &lt;a href="#closing-thoughts"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;As a tiny company, we have to be incredibly careful about the people we hire. They can have a massive impact on our products, for better or for worse, and contribute heavily towards our culture. Because of this, we deliberately look for these three qualities as signs of excellence in people.&lt;/p&gt;

&lt;p&gt;If we can find people to hire who show three key qualities: a happy outlook, the ability to express themselves clearly, and a keen eye for details, then we know they will be a brilliant hire.&lt;/p&gt;




&lt;p&gt;Would you like to hear more about our hiring process? Do you want to know more about the problems people have in our technical assessment, or the common errors on CVs? Get in touch and let me know.&lt;/p&gt;




&lt;p&gt;Enjoyed this post? Want to share your thoughts on the matter? Found this article helpful? Disagree with me? Let me know by &lt;a href="https://twitter.com/dglsparsons"&gt;messaging me on Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>career</category>
    </item>
  </channel>
</rss>
