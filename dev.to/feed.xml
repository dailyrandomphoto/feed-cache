<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>This post has 4 views</title>
      <author>volcareso</author>
      <pubDate>Mon, 13 Sep 2021 03:16:00 +0000</pubDate>
      <link>https://dev.to/volcareso/this-post-has-4-views-4fh4</link>
      <guid>https://dev.to/volcareso/this-post-has-4-views-4fh4</guid>
      <description>&lt;p&gt;Thats what we call a click bait üòê&lt;/p&gt;

&lt;p&gt;The thing is&lt;/p&gt;

&lt;p&gt;I launched a site :)&lt;br&gt;
Its hosted on github&lt;br&gt;
And runs on vercel&lt;br&gt;
Uses next.js&lt;br&gt;
And i took &lt;a href="//js.org"&gt;js.org&lt;/a&gt; subdomain :) you can gake it too by just a pull request if you're a js developer &lt;/p&gt;

&lt;p&gt;&lt;a href="https://volcareso.js.org/"&gt;link for my site&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Python ü§´ Hidden Syntax ü§´, You'll be using always from now üòù</title>
      <author>Rajesh Joshi</author>
      <pubDate>Mon, 13 Sep 2021 02:35:25 +0000</pubDate>
      <link>https://dev.to/rajeshj3/python-hidden-syntax-you-ll-be-using-always-from-now-3lfe</link>
      <guid>https://dev.to/rajeshj3/python-hidden-syntax-you-ll-be-using-always-from-now-3lfe</guid>
      <description>&lt;h2&gt;
  &lt;a href="#ellipsis"&gt;
  &lt;/a&gt;
  Ellipsis
&lt;/h2&gt;

&lt;p&gt;Use ... (Ellipsis), an alternative to &lt;code&gt;pass&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#single-line-return"&gt;
  &lt;/a&gt;
  single line return
&lt;/h2&gt;

&lt;p&gt;For single line utility functions use, single line return statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Welcome!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#document-your-functions"&gt;
  &lt;/a&gt;
  Document Your Functions
&lt;/h2&gt;

&lt;p&gt;To get proper documented Classes or functions with auto-completion define types of parameters and return types&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rectangle_area&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;area&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjI5xyK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7999vuuuvg3a0n2hyf7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjI5xyK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7999vuuuvg3a0n2hyf7.png" alt="Python ü§´ Hidden Syntax ü§´, You'll be using always from now üòù"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clever-use-of-raw-type-endraw-method"&gt;
  &lt;/a&gt;
  Clever use of &lt;code&gt;type()&lt;/code&gt; method
&lt;/h2&gt;

&lt;p&gt;Call type function to know default value of any datatype.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, Use for type checking&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Apple'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks and Cheers&lt;br&gt;
RajeshJ3&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>EKS Anywhere: The What, The Why and The How</title>
      <author>Abhay Krishna Arunachalam</author>
      <pubDate>Mon, 13 Sep 2021 02:00:44 +0000</pubDate>
      <link>https://dev.to/abhaykrishna/eks-anywhere-the-what-the-why-and-the-how-1h67</link>
      <guid>https://dev.to/abhaykrishna/eks-anywhere-the-what-the-why-and-the-how-1h67</guid>
      <description>&lt;p&gt;AWS recently made the headlines with the launch of Amazon EKS Anywhere, a new and much-awaited deployment option for Amazon Elastic Kubernetes Service (EKS). But what is it and how can you benefit from it? Read on to find out!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-what"&gt;
  &lt;/a&gt;
  The What
&lt;/h1&gt;

&lt;p&gt;Amazon EKS Anywhere is an open-source offering through which customers can host and operate secure, reliable Kubernetes clusters on-premises. It allows you to stay completely off AWS infrastructure (why, you don't even need an AWS account to get started) while offering a cluster management experience on par with EKS. &lt;/p&gt;

&lt;p&gt;EKS Anywhere builds on the strengths of &lt;a href="https://github.com/aws/eks-distro"&gt;Amazon EKS Distro&lt;/a&gt;, the same open-source distribution of Kubernetes that is used by Amazon EKS on the cloud, thus fostering consistency and compatibility between clusters both on AWS as well as on-premises.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-why"&gt;
  &lt;/a&gt;
  The Why
&lt;/h1&gt;

&lt;p&gt;This section covers the motivation for using EKS Anywhere. &lt;/p&gt;

&lt;p&gt;To understand better how EKS Anywhere may be more suited to customer needs, we will first need to understand the high-level architecture of EKS clusters. An Amazon EKS cluster consists of two primary components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The Amazon EKS control plane, consisting of nodes running components such as the Kubernetes API Server, Controller Manager, Scheduler, &lt;code&gt;etcd&lt;/code&gt;, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Worker nodes that are registered with the control plane and run customer workloads.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The control plane is provisioned on AWS infrastructure in an account managed by EKS, while the worker nodes run in customer accounts, thus providing a managed Kubernetes experience on AWS.&lt;/p&gt;

&lt;p&gt;However, some customers may have applications that need to run on-premises due to regulatory, latency, and data residency requirements as well as requirements to leverage existing infrastructure investments. With EKS Anywhere, both control plane and application workloads run on the customer infrastructure, thus providing complete flexibility to the cluster administrator. Also, customers can make use of the &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/eks-connector.html"&gt;EKS Connector*&lt;/a&gt; to connect EKS Anywhere clusters running on their infrastructure to the EKS console, for a centralized view of their on-premises clusters and workloads along with EKS clusters.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*In public preview&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-how"&gt;
  &lt;/a&gt;
  The How
&lt;/h1&gt;

&lt;p&gt;EKS Anywhere currently supports customer-managed vSphere infrastructure provider as the production-grade deployment environment for Kubernetes clusters, with bare-metal support coming in 2022. For local development and testing, it also supports the Docker provider, wherein the control plane and worker nodes are provisioned as Docker containers. The Docker provider is not intended to be used in production environments.&lt;/p&gt;

&lt;p&gt;In this section, I shall demonstrate a step-by-step walkthrough of creating an EKS Anywhere cluster with the Docker provider. Fasten your seatbelts for an &lt;em&gt;EKS&lt;/em&gt;-iting adventure!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;At its core, EKS Anywhere provides an installable CLI &lt;code&gt;eksctl-anywhere&lt;/code&gt; that allows users to create a fully-functional Kubernetes cluster in a matter of minutes. The CLI is provided as an extension to &lt;code&gt;eksctl&lt;/code&gt;, a command-line tool for creating clusters on Amazon EKS. These two binaries and a running Docker environment are all you need to create an EKS Anywhere cluster.&lt;/p&gt;

&lt;p&gt;You can install both &lt;code&gt;eksctl&lt;/code&gt; and &lt;code&gt;eksctl-anywhere&lt;/code&gt; directly using Homebrew on MacOS and Linux. In addition, it is a good idea to install &lt;code&gt;kubectl&lt;/code&gt; for interacting with your cluster post-creation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;aws/tap/eks-anywhere
brew &lt;span class="nb"&gt;install &lt;/span&gt;kubectl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#cluster-creation"&gt;
  &lt;/a&gt;
  Cluster creation
&lt;/h2&gt;

&lt;p&gt;The first step in creating an EKS Anywhere cluster is to generate a cluster config for the desired infrastructure provider. This is a manifest containing the cluster spec that allows you to declaratively manage your EKS Anywhere cluster. Before we proceed, let us give our cluster a suitable name that will be used as a reference for all future operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;CLUSTER_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;eks-anywhere-test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following command generates the cluster config for the Docker provider, with default replica counts, networking and external &lt;code&gt;etcd&lt;/code&gt; configurations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;eksctl anywhere generate clusterconfig &lt;span class="nv"&gt;$CLUSTER_NAME&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; docker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the above command will generate the following output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: anywhere.eks.amazonaws.com/v1alpha1
kind: Cluster
metadata:
  name: eks-anywhere-test
spec:
  clusterNetwork:
    cni: cilium
    pods:
      cidrBlocks:
      - 192.168.0.0/16
    services:
      cidrBlocks:
      - 10.96.0.0/12
  controlPlaneConfiguration:
    count: 1
  datacenterRef:
    kind: DockerDatacenterConfig
    name: eks-anywhere-test
  externalEtcdConfiguration:
    count: 1
  kubernetesVersion: "1.21"
  workerNodeGroupConfigurations:
  - count: 1

---
apiVersion: anywhere.eks.amazonaws.com/v1alpha1
kind: DockerDatacenterConfig
metadata:
  name: eks-anywhere-test
spec: {}

---
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If desired, you may modify the spec as per your requirements. EKS Anywhere supports both stacked and unstacked &lt;code&gt;etcd&lt;/code&gt; topologies, with the latter being the default. If you prefer to use stacked &lt;code&gt;etcd&lt;/code&gt;, you can remove the &lt;code&gt;externalEtcdConfiguration&lt;/code&gt; section from the spec.&lt;/p&gt;

&lt;p&gt;For the purpose of this tutorial, we shall use the default values generated by the command. In order to use the config for cluster operations, the cluster config must be stored in a file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;eksctl anywhere generate clusterconfig &lt;span class="nv"&gt;$CLUSTER_NAME&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; docker &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$CLUSTER_NAME&lt;/span&gt;.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now for the fun part - actually creating the cluster!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;eksctl anywhere create cluster &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="nv"&gt;$CLUSTER_NAME&lt;/span&gt;.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command will kick-start the cluster creation and update the progress on each step in the creation workflow. A detailed explanation of the workflow is provided &lt;a href="https://anywhere.eks.amazonaws.com/docs/concepts/clusterworkflow/"&gt;here&lt;/a&gt;. Optionally, you can set an appropriate verbosity level (0 through 9) using the &lt;code&gt;-v&lt;/code&gt; flag for more verbose logging and for a deeper understanding of what is going on behind the scenes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Performing setup and validations
‚úÖ Docker Provider setup is valid
Creating new bootstrap cluster
Installing cluster-api providers on bootstrap cluster
Provider specific setup
Creating new workload cluster
Installing networking on workload cluster
Installing storage class on workload cluster
Installing cluster-api providers on workload cluster
Moving cluster management from bootstrap to workload cluster
Installing EKS-A custom components &lt;span class="o"&gt;(&lt;/span&gt;CRD and controller&lt;span class="o"&gt;)&lt;/span&gt; on workload cluster
Creating EKS-A CRDs instances on workload cluster
Installing AddonManager and GitOps Toolkit on workload cluster
GitOps field not specified, bootstrap flux skipped
Writing cluster config file
Deleting bootstrap cluster
üéâ Cluster created!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Woot, we have created our first EKS Anywhere cluster! The whole process should take around 8-15 minutes or so.&lt;/p&gt;

&lt;p&gt;The CLI creates a folder with the same name as the cluster and places a kubeconfig file with Admin privileges inside this folder. This kubeconfig file can be used to interact with our EKS Anywhere cluster.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;KUBECONFIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CLUSTER_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CLUSTER_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;-eks-a-cluster&lt;/span&gt;.kubeconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us look at the pods to verify that they are all running.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get pods &lt;span class="nt"&gt;-A&lt;/span&gt;
NAMESPACE                           NAME                                                             READY   STATUS    RESTARTS   AGE
capd-system                         capd-controller-manager-659dd5f8bc-wj4hl                         2/2     Running   0          1m
capi-kubeadm-bootstrap-system       capi-kubeadm-bootstrap-controller-manager-69889cb844-m87x8       2/2     Running   0          1m
capi-kubeadm-control-plane-system   capi-kubeadm-control-plane-controller-manager-6ddc66fb75-hz4hm   2/2     Running   0          1m
capi-system                         capi-controller-manager-db59f5789-sjnv5                          2/2     Running   0          1m
capi-webhook-system                 capi-controller-manager-64b8c548db-kwntg                         2/2     Running   0          1m
capi-webhook-system                 capi-kubeadm-bootstrap-controller-manager-68b8cc9759-7zczt       2/2     Running   0          1m
capi-webhook-system                 capi-kubeadm-control-plane-controller-manager-7dc88f767d-p7bbk   2/2     Running   0          1m
cert-manager                        cert-manager-5f6b885b4-8l5f9                                     1/1     Running   0          2m
cert-manager                        cert-manager-cainjector-bb6d9bcb5-jr7x2                          1/1     Running   0          2m
cert-manager                        cert-manager-webhook-56cbc8f5b8-47wmg                            1/1     Running   0          2m
eksa-system                         eksa-controller-manager-6769764b45-gw6sp                         2/2     Running   0          1m
etcdadm-bootstrap-provider-system   etcdadm-bootstrap-provider-controller-manager-54476b7bf9-8fr2k   2/2     Running   0          1m
etcdadm-controller-system           etcdadm-controller-controller-manager-d5795556-d9cmz             2/2     Running   0          1m
kube-system                         cilium-operator-6bf46cc6c6-j5c8v                                 1/1     Running   0          2m
kube-system                         cilium-operator-6bf46cc6c6-vsf79                                 1/1     Running   0          2m
kube-system                         cilium-q4gg6                                                     1/1     Running   0          2m
kube-system                         cilium-xgffq                                                     1/1     Running   0          2m
kube-system                         coredns-7c68f85774-4kvcb                                         1/1     Running   0          2m
kube-system                         coredns-7c68f85774-9z9kn                                         1/1     Running   0          2m
kube-system                         kube-apiserver-eks-anywhere-test-29qnl                           1/1     Running   0          2m
kube-system                         kube-controller-manager-eks-anywhere-test-29qnl                  1/1     Running   0          2m
kube-system                         kube-proxy-2fx4g                                                 1/1     Running   0          2m
kube-system                         kube-proxy-r4cc8                                                 1/1     Running   0          2m
kube-system                         kube-scheduler-eks-anywhere-test-29qnl                           1/1     Running   0          2m

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the following command, we can fetch the container images running on our pods, and verify that the control plane images, i.e., API server, Controller Manager, etc are all vended by EKS Distro.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl get pods &lt;span class="nt"&gt;-A&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; yaml | yq e &lt;span class="s1"&gt;'.items[] | .spec.containers[] | .image'&lt;/span&gt; - | &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nt"&gt;-ur&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;public.ecr.aws/eks-anywhere/brancz/kube-rbac-proxy:v0.8.0-eks-a-1
public.ecr.aws/eks-anywhere/cluster-controller:v0.5.0-eks-a-1
public.ecr.aws/eks-anywhere/jetstack/cert-manager-cainjector:v1.1.0-eks-a-1
public.ecr.aws/eks-anywhere/jetstack/cert-manager-controller:v1.1.0-eks-a-1
public.ecr.aws/eks-anywhere/jetstack/cert-manager-webhook:v1.1.0-eks-a-1
public.ecr.aws/eks-anywhere/kubernetes-sigs/cluster-api/capd-manager:v0.3.23-eks-a-1
public.ecr.aws/eks-anywhere/kubernetes-sigs/cluster-api/cluster-api-controller:v0.3.23-eks-a-1
public.ecr.aws/eks-anywhere/kubernetes-sigs/cluster-api/kubeadm-bootstrap-controller:v0.3.23-eks-a-1
public.ecr.aws/eks-anywhere/kubernetes-sigs/cluster-api/kubeadm-control-plane-controller:v0.3.23-eks-a-1
public.ecr.aws/eks-anywhere/mrajashree/etcdadm-bootstrap-provider:v0.1.0-beta-4.1-eks-a-1
public.ecr.aws/eks-anywhere/mrajashree/etcdadm-controller:v0.1.0-beta-4.1-eks-a-1
public.ecr.aws/eks-distro/coredns/coredns:v1.8.3-eks-1-21-4
public.ecr.aws/eks-distro/kubernetes/kube-apiserver:v1.21.2-eks-1-21-4
public.ecr.aws/eks-distro/kubernetes/kube-controller-manager:v1.21.2-eks-1-21-4
public.ecr.aws/eks-distro/kubernetes/kube-proxy:v1.21.2-eks-1-21-4
public.ecr.aws/eks-distro/kubernetes/kube-scheduler:v1.21.2-eks-1-21-4
public.ecr.aws/isovalent/cilium:v1.9.10-eksa.1
public.ecr.aws/isovalent/operator-generic:v1.9.10-eksa.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Upon retrieving the nodes, we can see that our cluster has one control plane ("master") node and one worker node as specified in our manifest.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get nodes
NAME                                      STATUS   ROLES                  AGE   VERSION
eks-anywhere-test-29qnl                   Ready    control-plane,master   4m   v1.21.2-eks-1-21-4
eks-anywhere-test-md-0-7796db4bdd-4wmd5   Ready    &amp;lt;none&amp;gt;                 3m   v1.21.2-eks-1-21-4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To log onto a node, we can simply run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; &amp;lt;node name&amp;gt; bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h2&gt;

&lt;p&gt;Let us test our EKS Anywhere cluster by deploying a simple Nginx service.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;apiVersion: apps/v1
kind: Deployment
metadata:
  name: eks-anywhere-nginx-test
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 3
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: public.ecr.aws/nginx/nginx:latest
        ports:
        - containerPort: 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can create the Nginx workload using the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; eks-anywhere-nginx-test.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will provision 3 pods for our application in the &lt;code&gt;default&lt;/code&gt; namespace.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;```NAME                                       READY   STATUS    RESTARTS   AGE&lt;br&gt;
eks-anywhere-nginx-test-7676d696c8-c5ths   1/1     Running   0          1m&lt;br&gt;
eks-anywhere-nginx-test-7676d696c8-c76lf   1/1     Running   0          1m&lt;br&gt;
eks-anywhere-nginx-test-7676d696c8-m25r5   1/1     Running   0          1m&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;

To test our application, we can use the following command to forward the deployment port to our host machine port 80.


```shell
$ kubectl port-forward deploy/eks-anywhere-nginx-test 8080:80
Forwarding from 127.0.0.1:8080 -&amp;gt; 80
Forwarding from [::1]:8080 -&amp;gt; 80
Handling connection for 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, when we navigate to &lt;code&gt;localhost:8080&lt;/code&gt; on the browser, we are greeted by the Nginx welcome page.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rFX7YEOf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3mixbk8eszp0i9smzmyo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rFX7YEOf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3mixbk8eszp0i9smzmyo.png" alt="Nginx welcome page"&gt;&lt;/a&gt;&lt;br&gt;
Alternatively, we can fetch the contents of the site using &lt;code&gt;curl&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl localhost:8080
&amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;&lt;span class="nb"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;
&amp;lt;style&amp;gt;
html &lt;span class="o"&gt;{&lt;/span&gt; color-scheme: light dark&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
body &lt;span class="o"&gt;{&lt;/span&gt; width: 35em&lt;span class="p"&gt;;&lt;/span&gt; margin: 0 auto&lt;span class="p"&gt;;&lt;/span&gt;
font-family: Tahoma, Verdana, Arial, sans-serif&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Welcome to nginx!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;For online documentation and support please refer to
&amp;lt;a &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"http://nginx.org/"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;nginx.org&amp;lt;/a&amp;gt;.&amp;lt;br/&amp;gt;
Commercial support is available at
&amp;lt;a &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"http://nginx.com/"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;nginx.com&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Thank you &lt;span class="k"&gt;for &lt;/span&gt;using nginx.&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thus, we have successfully created and tested our EKS Anywhere cluster. If you wish to go one step further, you can deploy the deploy the Kubernetes Dashboard UI for your cluster using the intstructions &lt;a href="https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cluster-deletion"&gt;
  &lt;/a&gt;
  Cluster deletion
&lt;/h2&gt;

&lt;p&gt;After testing, the cluster can be deleted using the command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;eksctl anywhere delete cluster &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="nv"&gt;$CLUSTER_NAME&lt;/span&gt;.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That brings us to the end of this walkthrough. Thank you very much for reading and I hope you will give EKS Anywhere a spin. The complete documentation is available &lt;a href="https://anywhere.eks.amazonaws.com/"&gt;here&lt;/a&gt;. If you are interested in contributing, please open an issue or pull request on the &lt;a href="https://github.com/aws/eks-anywhere"&gt;EKS Anywhere GitHub repo&lt;/a&gt;. Let me know your thoughts in the comments below. If you have more questions, feel free to reach out to me on &lt;a href="https://www.linkedin.com/in/abhayk96/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://twitter.com/abhay_krishna96"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>showdev</category>
      <category>aws</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Using Generators in Python: The Why, The What, and The When</title>
      <author>Jerry Ng</author>
      <pubDate>Mon, 13 Sep 2021 00:43:52 +0000</pubDate>
      <link>https://dev.to/jerrynsh/using-generators-in-python-the-why-the-what-and-the-when-55l</link>
      <guid>https://dev.to/jerrynsh/using-generators-in-python-the-why-the-what-and-the-when-55l</guid>
      <description>&lt;p&gt;Today, ‚Äúwhat are Generators in Python‚Äù and ‚Äúwhat are Generators used for in Python‚Äù are some of the most popular Python interview questions.&lt;/p&gt;

&lt;p&gt;Often, &lt;a href="https://wiki.python.org/moin/Generators"&gt;Generator&lt;/a&gt; is considered as one of the more intermediate concepts in Python. If you are new to learning Python, you may not have come across Generator before. Here‚Äôs a tip, it has something to do with the use of &lt;code&gt;yield&lt;/code&gt; statements inside a function.&lt;/p&gt;

&lt;p&gt;In this post, I am going to highlight some of the use cases, reasons, and advantages of using Generators in Python. In short, you should consider using Generators when dealing with large datasets with memory constraints.&lt;/p&gt;

&lt;p&gt;Let‚Äôs dive a little bit deeper, shall we?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Consider using Generator when dealing with a huge dataset&lt;/li&gt;
&lt;li&gt;  Consider using Generator in scenarios where we do not need to reiterate it more than once&lt;/li&gt;
&lt;li&gt;  Generators give us lazy evaluation&lt;/li&gt;
&lt;li&gt;  They are a great way to generate sequences in a memory-efficient manner&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#why-should-i-care-about-using-generators"&gt;
  &lt;/a&gt;
  Why Should I Care About Using Generators
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#memory-constraints"&gt;
  &lt;/a&gt;
  Memory constraints
&lt;/h3&gt;

&lt;p&gt;To understand why you should use Generators, we have to first understand that computers have a finite amount of memory (&lt;a href="https://en.wikipedia.org/wiki/Random-access_memory"&gt;RAM&lt;/a&gt;). Whenever we are storing or manipulating variables, lists, etc., all that is being stored inside our memory.&lt;/p&gt;

&lt;p&gt;You might ask, why do computer programs store them in memory? Because it‚Äôs the fastest way for us to write and retrieve data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scenarios"&gt;
  &lt;/a&gt;
  Scenarios
&lt;/h3&gt;

&lt;p&gt;Have you ever had to work with a list so large that you run into &lt;code&gt;MemoryError&lt;/code&gt;? Perhaps, you have tried reading rows from a super large Excel (or &lt;code&gt;.csv&lt;/code&gt;) file.&lt;/p&gt;

&lt;p&gt;All I remember was that performing these tasks is painfully slow or impossible.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-a-generator-function"&gt;
  &lt;/a&gt;
  What Is a Generator Function
&lt;/h2&gt;

&lt;p&gt;To put it simply, a Generator function is a special kind of function that returns many items. The point here is that the items are returned one by one rather than all at once.&lt;/p&gt;

&lt;p&gt;The main difference between a regular function and a Generator function lies in the use of &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;yield&lt;/code&gt; statements in Python.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generators-give-you-lazy-evaluation"&gt;
  &lt;/a&gt;
  Generators give you lazy evaluation
&lt;/h3&gt;

&lt;p&gt;You may have come across this statement. But, what does it really mean?&lt;/p&gt;

&lt;p&gt;If you are familiar with &lt;a href="https://www.w3schools.com/python/python_iterators.asp"&gt;Iterator&lt;/a&gt;, a Generator function is essentially a function that behaves just like that.&lt;/p&gt;

&lt;p&gt;Behind the scene, Generators don‚Äôt compute the value of each item when being instantiated. Rather, they compute it when we ask for it. This is what people mean by Generators give you lazy evaluation.&lt;/p&gt;

&lt;p&gt;As a result, Generators allow us to process and deal with one value at a time without having to load everything in memory first.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#when-and-where-should-i-use-generators"&gt;
  &lt;/a&gt;
  When and Where Should I Use Generators
&lt;/h2&gt;

&lt;p&gt;Generators are great when you encounter problems that require you to read from a large dataset. Reading from a large dataset means our computer or server would have to allocate memory for it.&lt;/p&gt;

&lt;p&gt;The only condition to remember is that a Generator can only be iterated &lt;strong&gt;once&lt;/strong&gt;. In other words, as long as we do not need the previous value from our dataset, we can always use Generator.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reading-sizable-csv"&gt;
  &lt;/a&gt;
  Reading sizable CSV
&lt;/h3&gt;

&lt;p&gt;Another common use case of using Generators is when we are working with large files such as Excel or CSV documents. Without using a Generator function, here‚Äôs how we can write it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Example of using a regular function
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_csv_from_regular_fn&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'large_dataset.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;result_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read_csv_from_regular_fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Output:
# [['a','b','c', ... ], ['x','y','z', ... ] ... ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Upon running the example above, we may experience some slowness or even &lt;code&gt;MemoryError&lt;/code&gt; depending on our computers.&lt;/p&gt;

&lt;p&gt;Looking at the code example above, to generate the result, the &lt;code&gt;read_csv_from_regular_fn&lt;/code&gt; would open our CSV file and loads everything in memory in an instance.&lt;/p&gt;

&lt;p&gt;This is not a good solution when working with larger files than our available memory. Alternatively, we could do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Example of using a Generator function
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_csv_from_generator_fn&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'large_dataset.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;

&lt;span class="c1"&gt;# To get the same output as result_1,
# We generate a list using our newly created Generator function:
&lt;/span&gt;&lt;span class="n"&gt;result_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;read_csv_from_generator_fn&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;

&lt;span class="c1"&gt;# Output same as result_1:
# [['a','b','c', ... ], ['x','y','z', ... ] ... ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this scenario, we use &lt;code&gt;read_csv_from_generator_fn&lt;/code&gt; as our Generator function. This new Generator opens our large CSV file, loops through every row, and yields each row at a time rather than all at once.&lt;/p&gt;

&lt;p&gt;Here, we would not run into any &lt;code&gt;MemoryError&lt;/code&gt; or even any slowness due to memory constraints when reading data from our &lt;code&gt;large_dataset.csv&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To check the memory usage in bytes, we could do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_csv_from_generator_fn&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt; &lt;span class="c1"&gt;# 112 bytes
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_csv_from_regular_fn&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt; &lt;span class="c1"&gt;# 1624056 bytes
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#iterating-through-a-large-list-array"&gt;
  &lt;/a&gt;
  Iterating through a large list (array)
&lt;/h3&gt;

&lt;p&gt;Another example where Generators are often used is where we intend to process values from a large list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Example 1
&lt;/span&gt;&lt;span class="n"&gt;nums_list_comprehension&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100_000_000&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums_list_comprehension&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 333333328333333350000000
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Depending on your computer, you may encounter &lt;code&gt;MemoryError&lt;/code&gt; or at least a couple of seconds of slowness when evaluating the expression above.&lt;/p&gt;

&lt;p&gt;Like &lt;a href="https://www.w3schools.com/python/python_lists_comprehension.asp"&gt;list comprehensions&lt;/a&gt;, the Generator expression allows us to quickly create a Generator object without having to use the &lt;code&gt;yield&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;To cope with our memory constraint, we could turn the code example above into a Generator expression. This line of code below evaluates almost immediately:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Example 2
&lt;/span&gt;&lt;span class="n"&gt;nums_generator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; \&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100_000_000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x106ecc580&amp;gt;
&lt;/span&gt;
&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums_generator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 333333328333333350000000
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Example 1, &lt;code&gt;i ** i&lt;/code&gt; for the entire range of &lt;code&gt;100_000_000&lt;/code&gt; is being evaluated and stored in memory beforehand. It returns a full list.&lt;/p&gt;

&lt;p&gt;In Example 2, &lt;code&gt;i ** i&lt;/code&gt; is only evaluated when being iterated, one at a time. It returns a Generator expression.&lt;/p&gt;

&lt;p&gt;Remember, Generators don‚Äôt compute the value of each item when being instantiated.&lt;/p&gt;

&lt;p&gt;The differences in memory usage are below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums_generator&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 112 bytes
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums_list_comprehension&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 835128600 bytes
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#when-not-to-use-generators"&gt;
  &lt;/a&gt;
  When NOT To Use Generators
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#we-need-the-previous-values"&gt;
  &lt;/a&gt;
  We need the previous values
&lt;/h3&gt;

&lt;p&gt;A Generator can only be iterated once.&lt;br&gt;
The example below shows that the Generator expression from nums_generator can only be iterated once. Using sum on it for the second time resulted in zero as the Generator was exhausted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Continuing from Example 2
&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums_generator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 333333328333333350000000
&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums_generator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 0, because it can only be iterated once.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dealing-with-relatively-small-files"&gt;
  &lt;/a&gt;
  Dealing with relatively small files
&lt;/h3&gt;

&lt;p&gt;When dealing with relatively small files or lists, we may not want to use Generator as it might actually slow us down.&lt;/p&gt;

&lt;p&gt;We can use our previous examples &lt;a href="https://docs.python.org/3/library/profile.html"&gt;cProfile&lt;/a&gt; to profile the performance differences between list comprehension and Generator expression when summing the values up.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;cProfile of summing using List Comprehension vs. Generator Expression:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# List Comprehension
# ------------------
&lt;/span&gt;&lt;span class="n"&gt;cProfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'sum([i * i for i in range(100_000_000)])'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#    5 function calls in 13.956 seconds
#    Ordered by: standard name
#    ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#         1    8.442    8.442    8.442    8.442 &amp;lt;string&amp;gt;:1(&amp;lt;listcomp&amp;gt;)
#         1    0.841    0.841   13.956   13.956 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)
#         1    0.000    0.000   13.956   13.956 {built-in method builtins.exec}
#         1    4.672    4.672    4.672    4.672 {built-in method builtins.sum}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Generator Expression
# --------------------
&lt;/span&gt;&lt;span class="n"&gt;cProfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'sum((i * i for i in range(100_000_000)))'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#    100000005 function calls in 22.996 seconds
#    Ordered by: standard name
#    ncalls  tottime  percall  cumtime  percall filename:lineno(function)
# 100000001   11.745    0.000   11.745    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;genexpr&amp;gt;)
#         1    0.000    0.000   22.996   22.996 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)
#         1    0.000    0.000   22.996   22.996 {built-in method builtins.exec}
#         1   11.251   11.251   22.996   22.996 {built-in method builtins.sum}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From our &lt;code&gt;cProfile&lt;/code&gt; result above, we can tell that using list comprehension is a lot faster provided we don‚Äôt run into memory constraints.&lt;/p&gt;

&lt;p&gt;Evidently, if memory is not an issue, we should stick with using regular functions or list comprehensions.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In summary, Generator is an amazing tool in Python given the scenario where we do not need to reiterate it more than once.&lt;/p&gt;

&lt;p&gt;As Generators give us lazy evaluation, they are a great way to generate sequences in a memory-efficient manner. We should definitely consider using Generator when dealing with huge datasets to optimize our program.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>29 Projects To Help You Practice HTML CSS Javascript 2021</title>
      <author>Niemvuilaptrinh</author>
      <pubDate>Sun, 12 Sep 2021 22:20:21 +0000</pubDate>
      <link>https://dev.to/haycuoilennao19/29-projects-to-help-you-practice-html-css-javascript-2021-1j88</link>
      <guid>https://dev.to/haycuoilennao19/29-projects-to-help-you-practice-html-css-javascript-2021-1j88</guid>
      <description>&lt;p&gt;Today we will go into learning about UI Page projects to increase design ability and how to apply HTML, CSS, Javascript to actual website development!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#responsive-social-platform-ui"&gt;
  &lt;/a&gt;
  Responsive Social Platform UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F3LekeGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Responsive%2520Social%2520Platform%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F3LekeGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Responsive%2520Social%2520Platform%2520UI%2520%25281%2529.png" alt="Responsive Social Platform UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/TurkAysenur/embed/RwWKYMO?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#fox-news-templates"&gt;
  &lt;/a&gt;
  Fox News Templates
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t6-_7d6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Fox%2520News%2520Templates%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t6-_7d6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Fox%2520News%2520Templates%2520%25281%2529.png" alt="Fox News Templates"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/havardob/embed/GRjPywY?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#netflix-landing-page-clone"&gt;
  &lt;/a&gt;
  Netflix Landing Page Clone
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ROm3dfZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Netflix%2520Landing%2520Page%2520Clone%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ROm3dfZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Netflix%2520Landing%2520Page%2520Clone%2520%25281%2529.png" alt="Netflix Landing Page Clone"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/bradtraversy/embed/yWPONg?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#book-store-ui"&gt;
  &lt;/a&gt;
  Book Store UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3B6FXZtq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Book%2520Store%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3B6FXZtq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Book%2520Store%2520UI%2520%25281%2529.png" alt="Book Store UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/TurkAysenur/embed/JjGKKrP?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#project-management-dashboard-ui"&gt;
  &lt;/a&gt;
  Project Management Dashboard UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OJjoYdaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Project%2520Management%2520Dashboard%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OJjoYdaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Project%2520Management%2520Dashboard%2520UI%2520%25281%2529.png" alt="Project Management Dashboard UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/aybukeceylan/embed/OJRNbZp?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#microsoft-homepage-clone"&gt;
  &lt;/a&gt;
  Microsoft Homepage Clone
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--56nUue3Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Microsoft%2520Homepage%2520Clone%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--56nUue3Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Microsoft%2520Homepage%2520Clone%2520%25281%2529.png" alt="Microsoft Homepage Clone"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/bradtraversy/embed/ZEGGNRb?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#task-manager-ui-with-css-grid"&gt;
  &lt;/a&gt;
  Task Manager UI with CSS Grid
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hiedTYjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Task%2520Manager%2520UI%2520with%2520CSS%2520Grid%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hiedTYjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Task%2520Manager%2520UI%2520with%2520CSS%2520Grid%2520%25281%2529.png" alt="Task Manager UI with CSS Grid"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/TurkAysenur/embed/QWyPMgq?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#file-sharing-web-app"&gt;
  &lt;/a&gt;
  File Sharing Web App
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gp636NNs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/File%2520Sharing%2520Web%2520App%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gp636NNs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/File%2520Sharing%2520Web%2520App%2520%25281%2529.png" alt="File Sharing Web App"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/aybukeceylan/embed/yLOxRyG?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#messaging-app-ui-with-dark-mode"&gt;
  &lt;/a&gt;
  Messaging App UI with Dark Mode
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D-EjXrJC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Messaging%2520App%2520UI%2520with%2520Dark%2520Mode%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D-EjXrJC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Messaging%2520App%2520UI%2520with%2520Dark%2520Mode%2520%25281%2529.png" alt="Messaging App UI with Dark Mode"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/TurkAysenur/embed/ZEbXoRZ?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#booking-app-ui"&gt;
  &lt;/a&gt;
  Booking App UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pg2Ra2E5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Booking%2520App%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pg2Ra2E5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Booking%2520App%2520UI%2520%25281%2529.png" alt="Booking App UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/aybukeceylan/embed/pobaKGX?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#job-search-platform-ui"&gt;
  &lt;/a&gt;
  Job Search Platform UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_uZps-5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Job%2520Search%2520Platform%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_uZps-5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Job%2520Search%2520Platform%2520UI%2520%25281%2529.png" alt="Job Search Platform UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/TurkAysenur/embed/jOqdNbm?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#skateboard-video-platform"&gt;
  &lt;/a&gt;
  Skateboard Video Platform
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bMHaOxly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Skateboard%2520Video%2520Platform%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bMHaOxly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Skateboard%2520Video%2520Platform%2520%25281%2529.png" alt="Skateboard Video Platform"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/TurkAysenur/embed/LYRKpWe?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#instagram-redesign"&gt;
  &lt;/a&gt;
  Instagram re-design
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dSm3NjEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Instagram%2520re-design%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dSm3NjEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Instagram%2520re-design%2520%25281%2529.png" alt="Instagram re-design"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/TurkAysenur/embed/qeNvRM?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#videocall-app-ui"&gt;
  &lt;/a&gt;
  VideoCall App UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L6rOl1nA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/VideoCall%2520App%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L6rOl1nA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/VideoCall%2520App%2520UI%2520%25281%2529.png" alt="VideoCall App UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/aybukeceylan/embed/pobbEYB?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#gym-website-tailwind-starter-kit"&gt;
  &lt;/a&gt;
  Gym Website - Tailwind Starter Kit
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V1hm--ab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Gym%2520Website%2520-%2520Tailwind%2520Starter%2520Kit%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V1hm--ab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Gym%2520Website%2520-%2520Tailwind%2520Starter%2520Kit%2520%25281%2529.png" alt="Gym Website - Tailwind Starter Kit"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/bradtraversy/embed/zYqVgXO?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#task-management-dashboard-ui"&gt;
  &lt;/a&gt;
  Task Management Dashboard UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jfw3G3xO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Task%2520Management%2520Dashboard%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jfw3G3xO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Task%2520Management%2520Dashboard%2520UI%2520%25281%2529.png" alt="Task Management Dashboard UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/aybukeceylan/embed/gOpbRPO?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#internal-video-platform-ui"&gt;
  &lt;/a&gt;
  Internal Video Platform UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s_ENOSMd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Internal%2520Video%2520Platform%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s_ENOSMd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Internal%2520Video%2520Platform%2520UI%2520%25281%2529.png" alt="Internal Video Platform UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/aybukeceylan/embed/VweooYQ?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#gmail-redesign"&gt;
  &lt;/a&gt;
  Gmail Redesign
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HjrncAeN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Gmail%2520Redesign%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HjrncAeN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Gmail%2520Redesign%2520%25281%2529.png" alt="Gmail Redesign"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/aybukeceylan/embed/xxKqyVO?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#chat-app-ui"&gt;
  &lt;/a&gt;
  Chat App UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kXVuvDYd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Chat%2520App%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kXVuvDYd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Chat%2520App%2520UI%2520%25281%2529.png" alt="Chat App UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/aybukeceylan/embed/gVmZmJ?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#responsivewebpage"&gt;
  &lt;/a&gt;
  Responsive-Webpage
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tH3DB9K5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Responsive-Webpage%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tH3DB9K5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Responsive-Webpage%2520%25281%2529.png" alt="Responsive-Webpage"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/TurkAysenur/embed/wLOejj?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dashboard-design-with-flexbox"&gt;
  &lt;/a&gt;
  Dashboard Design with Flexbox
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O4wcQvll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Dashboard%2520Design%2520with%2520Flexbox%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O4wcQvll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Dashboard%2520Design%2520with%2520Flexbox%2520%25281%2529.png" alt="Dashboard Design with Flexbox"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/TurkAysenur/embed/YmVYYR?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#services-section"&gt;
  &lt;/a&gt;
  Services Section
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wSvBVINm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Services%2520Section%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wSvBVINm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Services%2520Section%2520%25281%2529.png" alt="Services Section"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ahmadnasr/embed/KKpvNGY?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#spotify-artist-page-ui"&gt;
  &lt;/a&gt;
  Spotify Artist Page UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DeY-Rbbp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Spotify%2520Artist%2520Page%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DeY-Rbbp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Spotify%2520Artist%2520Page%2520UI%2520%25281%2529.png" alt="Spotify Artist Page UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alowenthal/embed/rxboRv?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#twitter-client-ui-in-css-html"&gt;
  &lt;/a&gt;
  Twitter Client UI in CSS + HTML
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2lxGxBk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Twitter%2520Client%2520UI%2520in%2520CSS%2520%2B%2520HTML%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2lxGxBk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Twitter%2520Client%2520UI%2520in%2520CSS%2520%2B%2520HTML%2520%25281%2529.png" alt="Twitter Client UI in CSS + HTML"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/marceloag/embed/fDmtq?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#responsive-movie-app-ui"&gt;
  &lt;/a&gt;
  Responsive Movie App UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LFXULPxo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Responsive%2520Movie%2520App%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LFXULPxo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Responsive%2520Movie%2520App%2520UI%2520%25281%2529.png" alt="Responsive Movie App UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/nicklassandell/embed/soAyr?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#twitch-redesign-mockup"&gt;
  &lt;/a&gt;
  Twitch Redesign Mockup
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ESSBykvR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Twitch%2520Redesign%2520Mockup%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ESSBykvR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Twitch%2520Redesign%2520Mockup%2520%25281%2529.png" alt="Twitch Redesign Mockup"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/colewaldrip/embed/aqpRmQ?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#task-management-ui"&gt;
  &lt;/a&gt;
  Task Management UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sw88Q3hP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Task%2520Management%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sw88Q3hP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Task%2520Management%2520UI%2520%25281%2529.png" alt="Task Management UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/aaronmcg/embed/GRjaRva?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#facebook-profile-page-ui-concept"&gt;
  &lt;/a&gt;
  Facebook Profile Page UI Concept
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uaSEDtbD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Facebook%2520Profile%2520Page%2520UI%2520Concept%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uaSEDtbD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Facebook%2520Profile%2520Page%2520UI%2520Concept%2520%25281%2529.png" alt="Facebook Profile Page UI Concept"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/himalayasingh/embed/bxoBZZ?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/nhat"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Entendiendo Destructuring (Objetos y parametros)</title>
      <author>Franco Cuarterolo</author>
      <pubDate>Sun, 12 Sep 2021 22:06:53 +0000</pubDate>
      <link>https://dev.to/cuarte4/entendiendo-destructuring-objetos-y-parametros-4977</link>
      <guid>https://dev.to/cuarte4/entendiendo-destructuring-objetos-y-parametros-4977</guid>
      <description>&lt;p&gt;Desestructurar un objeto o un array es una pr√°ctica habitual tra√≠da por ECMAScript. Es posible que lo hayas visto en tu trabajo, en tutoriales o en c√≥digo open source, pero, ¬øte paraste a entender qu√© resuelve y c√≥mo aprovechar esta funcionalidad?&lt;/p&gt;

&lt;p&gt;Desestructurar un objeto o un array significa elegir un pedacito del mismo y asignarlo a una variable&lt;/p&gt;

&lt;p&gt;Empecemos con un objeto que describe a una de mis perras:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mascotaDeCuarte&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;nombre&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Gina&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;edad&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;raza&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Schnauzer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;pelaje&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sal y pimienta&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
 &lt;span class="na"&gt;hermanos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Maggie&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ragnar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mara&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Clarita&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Milo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tinta&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El problema es que en la veterinaria me pidieron nombre y raza, para eso vamos a escribir una funci√≥n que lo escriba por nosotros&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;nombreYRaza&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mascota&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;mascota&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nombre&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;mascota&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;raza&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;nombreYRaza&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mascotaDeCuarte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; Gina, Schnauzer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;En programaci√≥n, tenemos un principio llamado "Don't Repeat Yourself (No te repitas)", y en este caso estamos repitiendo la palabra "mascota" tres veces de una forma totalmente innecesaria.&lt;/p&gt;

&lt;p&gt;Ahora es donde podemos empezar a aplicar destructuring. Sabemos que "mascotaDeCuarte" cuenta con dos propiedades: "nombre" y "raza". Desestructurar nos permite tomar estos valores y asignarlos a variables de igual nombre:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;nombreYRaza&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mascota&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;nombre&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;raza&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mascota&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;nombre&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;raza&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;nombreYRaza&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mascotaDeCuarte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; Gina, Schnauzer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ya aprendimos a desestructurar un objeto, pero hay algo m√°s que te quiero contar: podemos desestructurar tambien el parametro de la funci√≥n.&lt;/p&gt;

&lt;p&gt;Como sabemos, el parametro "mascota" es un objeto. Le podemos indicar a la funci√≥n que el objeto que llega en el par√°metro tendr√° dos propiedades de nuestro inter√©s: "nombre" y raza".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;nombreYRaza&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;nombre&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;raza&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;nombre&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;raza&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;nombreYRaza&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mascotaDeCuarte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; Gina, Schnauzer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Desestructurar nuestra funci√≥n y sus parametros nos permiti√≥ tener una funci√≥n mucho m√°s limpia y m√°s facil de leer.&lt;/p&gt;

&lt;p&gt;Hoy hablamos sobre c√≥mo desestructurar un objeto y el parametro de una funci√≥n, pero todav√≠a nos quedan temas por ver como Arrays y Desestructuraci√≥n de valores anidados. Si queres seguir investigando por tu cuenta, podes visitar &lt;a href="https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"&gt;la MDN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Gracias por leer, hasta la pr√≥xima!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Personal Branding</title>
      <author>Fahad Ashiq</author>
      <pubDate>Sun, 12 Sep 2021 21:02:49 +0000</pubDate>
      <link>https://dev.to/fahadashiq12/personal-branding-5b5g</link>
      <guid>https://dev.to/fahadashiq12/personal-branding-5b5g</guid>
      <description>&lt;p&gt;ü§î Personal Branding is often misunderstood in today's digital world the question is here - What actually Personal Branding is in real?&lt;/p&gt;

&lt;p&gt;üöÄ Your personal branding is how you promote yourself. It is the unique combination of skills, experience, and personality that you want the world to see and get them inspired to put their value in it in form of suggestions, constructive criticism &amp;amp; many people out there start doing similar or relevant same as what you are doing to promote positive &amp;amp; better image of relevant domain. It is about telling your story, and how it reflects your conduct, behavior, spoken and unspoken words, and attitudes.&lt;/p&gt;

&lt;p&gt;üôå Do you consider "Personal Branding" is must to consider in every respective professional domain for students, job professionals, and industry experts?&lt;/p&gt;

&lt;p&gt;üëã If yes, share your constructive thoughts on it in the comment section below:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#personalbranding-experience-leadership-communication-storytelling-branding-creativity-linkedin-content-digitalcommunication"&gt;
  &lt;/a&gt;
  personalbranding #experience #leadership #communication #storytelling #branding #creativity #linkedin #content #digitalcommunication
&lt;/h1&gt;

</description>
    </item>
    <item>
      <title>gRPC vs REST - Simple Performance Test</title>
      <author>StevenPG</author>
      <pubDate>Sun, 12 Sep 2021 20:20:07 +0000</pubDate>
      <link>https://dev.to/stevenpg/grpc-vs-rest-simple-performance-test-228m</link>
      <guid>https://dev.to/stevenpg/grpc-vs-rest-simple-performance-test-228m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;As a Java Developer, RESTful APIs are my bread and butter. On most days I spend a majority of my time writing code that either make up or interact with RESTful endpoints, or downstream code triggered by an endpoint.&lt;/p&gt;

&lt;p&gt;I'd heard of some rumblings of a new RPC format a few years ago, and I immediately thought back to my days doing some light GWT (Google Web Toolkit) development. With that, I brushed the idea out of researching gRPC and continued with my standard workflows.&lt;/p&gt;

&lt;p&gt;However, a few months ago I was given the opportunity to jump into a greenfield Golang project at work. I'd heard plenty of good things about Golang, so I dove right in.&lt;/p&gt;

&lt;p&gt;I've since fallen in love with the language, though Java is still where I feel most at home.&lt;/p&gt;

&lt;p&gt;However, while using Go I've come across gRPC usage more and more.&lt;/p&gt;

&lt;p&gt;So as a part of my continued learning, I developed this simple little test to see how the gRPC vs REST performance debate actually plays out within Java alone.&lt;/p&gt;

&lt;p&gt;This isn't an incredibly scientific experiment, but I feel like it at least provides somewhat clear results as to what one might expect when someone at your work starts pitching the new hotness (gRPC in this case) and swears that it will solve X or Y problem and have A or B performance benefits.&lt;/p&gt;

&lt;p&gt;I've been that guy before, and it always helps to have relevant and concrete results to show everyone to help sway your point.&lt;/p&gt;

&lt;p&gt;So with that out of the way, here's my silly little Java-based gRPC vs Rest performance experiment. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rest-vs-grpc-tldr"&gt;
  &lt;/a&gt;
  Rest vs gRPC tl;dr
&lt;/h2&gt;

&lt;p&gt;Before we get into the experiment and testing, here's a quick overview.&lt;/p&gt;

&lt;p&gt;RESTful APIs use HTTP 1.0/1.1 and include usage of HTTP Verbs (ex. GET/POST/DELETE) to transmit messages from client to server. Most servers will expose endpoints that expect specific headers and verbs and utilize the incoming data to perform operations. Data is commonly in JSON format, which Java code deserializes into Java objects for usage within the application.&lt;/p&gt;

&lt;p&gt;gRPC on the other hand, utilizes HTTP/2 and protocol buffers, which can be simplified into binary over HTTP. The protocol buffers describe the length of the components in the binary stream. So rather than delineate data with JSON tokens (such as { , and " ), the data streams as binary and is parsed using known sizes of expected data types. This is then deserialized into Java objects.&lt;/p&gt;

&lt;p&gt;Ok, there's an oversimplified overview, onto the test details.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-data-and-layout"&gt;
  &lt;/a&gt;
  Test Data and layout
&lt;/h2&gt;

&lt;p&gt;The intention of this test was to give some samples of gRPC vs Rest performance, specifically. This is one of the more commonly cited reasons to switch to gRPC, as data is smaller as a binary stream than a json object.&lt;/p&gt;

&lt;p&gt;This test was implemented using exactly 2 JVM applications. One is a Spring Boot application that contains RestController annotated classes to handle inputs and also contains a client that uses Spring Webflux's WebClient to make blocking API calls to the RestController.&lt;/p&gt;

&lt;p&gt;The second application is a native Java application that uses io.grpc libraries to define a gRPC client and server.&lt;/p&gt;

&lt;p&gt;These applications were deployed in two locations and run as runnable jars. Both were deployed on a local desktop as well as an AWS EC2 instance. Details for both are included in the next section.&lt;/p&gt;

&lt;p&gt;The test is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Use randomly generated data in a specific format that is identical in the gRPC and Rest testing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Send increasing numbers of requests in order to see how the processing scales&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;represent semi-real world performance by making calls from a local system to a datacenter at least 200 miles away.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a sample layout of the Rest JSON template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
{
    "car": {
        "make": "toyota",
        "model": "corolla",
        "trim": "4DR Sedan",
        "color": "gray",
        "year": 2012,
        "mileage": 120000
    },
    "driver": {
        "firstname": "John",
        "lastname": "Smith",
        "driverId": "someId"
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the proto definition for the gRPC messages&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
syntax = "proto3";
option java_multiple_files = true;

message Message {

    message Car {
        string make = 1;
        string model = 2;
        string trim = 3;
        string color = 4;
        uint32 year = 5;
        uint32 mileage = 6;
    }

    message Driver {
        string firstname = 1;
        string lastname = 2;
        string driverId = 3;
    }

    Car car = 1;
    Driver driver = 2;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are functionally identical, and would be an example of what a transition from an existing Rest API to a replacement gRPC api might look like.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-machines"&gt;
  &lt;/a&gt;
  Test machines
&lt;/h2&gt;

&lt;p&gt;The remote machine where the gRPC and Rest servers were running were t2.small EC2 instance machines. These were generic non-spot, non-dedicated t2.small instances that had all TCP and UDP traffic exposed. With a whitelisting for the local test machine that would be hitting it.&lt;/p&gt;

&lt;p&gt;JVM Applications were run locally using the Windows 10 x64 OpenJDK, version 11.0.11. Remote JVMs were run using java-11-amazon-cordetto on a AWS Linux 2 OS.&lt;/p&gt;

&lt;p&gt;The local test machine was my own personal development desktop. This system contains a Ryzen 3700x and 64GB of 3200ghz Memory. More than overkill for running the tests described above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h2&gt;

&lt;p&gt;Each test was run (from local to ec2) 10 times and the average taken. This were for sequential requests across Rest and gRPC as seen in the columns below.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;1000 (requests)&lt;/th&gt;
&lt;th&gt;2000 (requests)&lt;/th&gt;
&lt;th&gt;3000 (requests)&lt;/th&gt;
&lt;th&gt;4000 (requests)&lt;/th&gt;
&lt;th&gt;5000 (requests)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;gRPC&lt;/td&gt;
&lt;td&gt;14478ms&lt;/td&gt;
&lt;td&gt;25239ms&lt;/td&gt;
&lt;td&gt;37823ms&lt;/td&gt;
&lt;td&gt;53073ms&lt;/td&gt;
&lt;td&gt;62624ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rest&lt;/td&gt;
&lt;td&gt;16451ms&lt;/td&gt;
&lt;td&gt;30181ms&lt;/td&gt;
&lt;td&gt;43996ms&lt;/td&gt;
&lt;td&gt;58221ms&lt;/td&gt;
&lt;td&gt;71300ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;There's a couple things we want to review as a part of these results. They are subsectioned below!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-much-slower-is-rest-at-each-request-amount"&gt;
  &lt;/a&gt;
  How much slower is Rest at each request amount
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;requests&lt;/th&gt;
&lt;th&gt;percent slower&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;13.6% slower&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;19.5% slower&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3000&lt;/td&gt;
&lt;td&gt;16% slower&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4000&lt;/td&gt;
&lt;td&gt;9% slower&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;td&gt;13% slower&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;We can confidently say that gRPC will always be faster than Rest calls. This aligns with the implementation details around gRPC, specifically binary streams over JSON, binary parsing vs marshaling, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-was-the-correlation-between-increase-in-requests-and-completion-time-for-rest-and-grpc"&gt;
  &lt;/a&gt;
  What was the correlation between increase in requests and completion time for Rest and gRPC
&lt;/h3&gt;

&lt;p&gt;Good question! So for each increase in requests, we would expect to see a linear increase in processing time to get through those messages. Ie, twice the messages should take twice as long. Let's see if that was actually the case.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;0-1000&lt;/th&gt;
&lt;th&gt;1000-2000&lt;/th&gt;
&lt;th&gt;2000-3000&lt;/th&gt;
&lt;th&gt;3000-4000&lt;/th&gt;
&lt;th&gt;4000-5000&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;gRPC&lt;/td&gt;
&lt;td&gt;baseline&lt;/td&gt;
&lt;td&gt;74% longer&lt;/td&gt;
&lt;td&gt;49% longer&lt;/td&gt;
&lt;td&gt;40% longer&lt;/td&gt;
&lt;td&gt;17% longer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rest&lt;/td&gt;
&lt;td&gt;baseline&lt;/td&gt;
&lt;td&gt;83% longer&lt;/td&gt;
&lt;td&gt;45% longer&lt;/td&gt;
&lt;td&gt;32% longer&lt;/td&gt;
&lt;td&gt;22% longer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Request % Increase&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100%  more&lt;/td&gt;
&lt;td&gt;50% more&lt;/td&gt;
&lt;td&gt;33% more&lt;/td&gt;
&lt;td&gt;25% more&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Based on the results above, it's a bit hit or miss. Both Rest and gRPC roughly track the increase. Most of the time, the processing time increases at a faster rate than the request increases, which is good! It means we aren't exponentially taking more and more time to process more requests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-any-of-this-tell-us"&gt;
  &lt;/a&gt;
  What does any of this tell us?
&lt;/h2&gt;

&lt;p&gt;Outside of this specific test? Not a ton. It's a good example to use as a baseline, and a good simple experiment to compare the performance of the two paradigms.&lt;/p&gt;

&lt;p&gt;As one would expect, the repository is &lt;a href="https://github.com/StevenPG/RestVsgRpc"&gt;available on Github with all source code&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>java</category>
      <category>grpc</category>
      <category>rest</category>
      <category>spring</category>
    </item>
    <item>
      <title>Hardening E-Commerce APIs to Secure Billion-Dollar Retailers</title>
      <author>Niloufar Heidari</author>
      <pubDate>Sun, 12 Sep 2021 20:02:36 +0000</pubDate>
      <link>https://dev.to/fabric_commerce/hardening-e-commerce-apis-to-secure-billion-dollar-retailers-21l4</link>
      <guid>https://dev.to/fabric_commerce/hardening-e-commerce-apis-to-secure-billion-dollar-retailers-21l4</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jpIGniAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hubfs/retail-ecommerce-api-security.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jpIGniAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hubfs/retail-ecommerce-api-security.png" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At fabric we are building a &lt;a href="https://resources.fabric.inc/blog/glossary/modular-commerce"&gt;modular&lt;/a&gt; and &lt;a href="https://resources.fabric.inc/blog/headless-commerce"&gt;headless&lt;/a&gt; commerce platform with the vision of becoming for commerce services what AWS is for web services, and due to the headless nature of our platform, APIs run the show. So much so that a multi-billion dollar equipment supplier just signed a multi-million dollar contract with us to consume our commerce APIs.&lt;/p&gt;

&lt;p&gt;API security was a concern before I joined fabric in January 2021, but as we attract more billion-dollar retailers such as Restoration Hardware, GNC, and Staples‚Äîincluding more general market interest with our recent $100M Series B‚ÄîAPI security is now a high priority.&lt;/p&gt;

&lt;p&gt;In this post, I will show you our general approach for securing APIs to support these major retailers. But first, let‚Äôs briefly review why API security matters.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-is-api-security-important-in-retail"&gt;
  &lt;/a&gt;
  Why is API Security Important in Retail?
&lt;/h1&gt;

&lt;p&gt;At fabric we use APIs to connect internal platform services such as cart, checkout, and pricing, and external services such as Stripe (payments), Alavara (tax), and Algolia (search). These connections mean data transfer and compromised APIs are behind &lt;a href="https://www.cloudvector.com/api-data-breaches-in-2020/"&gt;major data breaches&lt;/a&gt;. With mainstream retail, personally identifiable and payment information is widely required to conduct trade and, as e-commerce grows, the attack surface grows with it.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://owasp.org/www-project-api-security/"&gt;API Security project by OWASP&lt;/a&gt; supports this:&lt;/p&gt;

&lt;p&gt;‚ÄúA foundational element of innovation in today‚Äôs app-driven world is the API. From banks, retail and transportation to IoT, autonomous vehicles and smart cities, APIs can be found in customer-facing, partner-facing and internal applications. By nature, APIs expose application logic and sensitive data such as Personally Identifiable Information (PII) and because of this have increasingly become a target for attackers. Without secure APIs, rapid innovation would be impossible.‚Äù&lt;/p&gt;

&lt;p&gt;Below I will describe the tactics we use to secure our APIs. With these tactics, the &lt;a href="https://owasp.org/www-project-api-security/"&gt;top ten API security threats&lt;/a&gt; top ten API security threats identified by OWASP are directed. &lt;strong&gt;Note&lt;/strong&gt;: The OWASP API security project is nascent and needs contributors!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-we-secure-apis"&gt;
  &lt;/a&gt;
  How We Secure APIs
&lt;/h1&gt;

&lt;p&gt;These are the different &lt;a href="https://api.fabric.inc/"&gt;RESTful APIs we use&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Customer storefront APIs:&lt;/strong&gt; Our Storefront API protects e-commerce store frontends (including mobile apps). It is a modular, customizable, and secure API gateway that provides a single data source for all your UIs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third-party APIs:&lt;/strong&gt; These are APIs provided by fabric to third-party vendors like Zendesk or RevCascade to access order and inventory modules. For example, mapping APIs are used to update inventory with new products from merchants.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Merchant application APIs:&lt;/strong&gt; This is a customer API that is unique for each customer.&lt;/p&gt;

&lt;p&gt;All of our API traffic is securely transmitted using HTTPS and modern TLS protocols. In addition to applying security best practices for data in transit via APIs, we take these security measurements:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#internal-vulnerability-testing"&gt;
  &lt;/a&gt;
  Internal Vulnerability Testing
&lt;/h1&gt;

&lt;p&gt;Using vulnerability assessment tools (e.g. &lt;a href="https://www.ibm.com/security/security-intelligence/qradar"&gt;QRadar&lt;/a&gt;, &lt;a href="//qualys.com"&gt;Qualys&lt;/a&gt;, and &lt;a href="https://www.tenable.com/products/nessus"&gt;Nessus&lt;/a&gt;) and considering new security enhancements throughout the software development life cycle (SDLC) is essential for keeping APIs secure. At fabric, our continuous vulnerability management process makes security a key aspect of API development.&lt;/p&gt;

&lt;p&gt;Security tooling is part of our CI/CD pipeline and automated security-focused unit tests run against every deployment. Additionally, we run monthly vulnerability scans to identify and categorize API security issues for all of our customers. If we identify any critical security vulnerabilities, they‚Äôre patched within a week.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thirdparty-pen-tests"&gt;
  &lt;/a&gt;
  Third-Party Pen Tests
&lt;/h1&gt;

&lt;p&gt;Third-party penetration tests reputable firms (e.g. &lt;a href="https://www.trustwave.com/en-us/company/about-us/spiderlabs/"&gt;SpiderLabs&lt;/a&gt;, &lt;a href="https://cobalt.io/"&gt;Cobalt&lt;/a&gt;, and &lt;a href="https://www.fireeye.com/"&gt;FireEye&lt;/a&gt;) provide an objective expert analysis of a system‚Äôs security. A third-party pen test can expose vulnerabilities an internal audit and automated testing alone can miss.&lt;/p&gt;

&lt;p&gt;In addition to leveraging automated scanning tools, third-party pen testers provide the human expertise necessary to identify misconfigurations and exploits that could otherwise go unnoticed. &lt;/p&gt;

&lt;p&gt;For example, automated tooling is great at identifying common vulnerabilities and exposures (CVEs), but an attack that exploits business logic in an e-commerce site‚Äôs frontend APIs may go undetected. Simply put: third-party testing manipulates and attempts to hack an API in the same ways a real attacker would. This human perspective makes it possible to detect and correct misconfigurations and logic flaws before an attacker exploits them.&lt;/p&gt;

&lt;p&gt;At fabric, we conduct third-party pen tests for our entire API annually and before every major release.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#authentication-and-authorization"&gt;
  &lt;/a&gt;
  Authentication and Authorization
&lt;/h1&gt;

&lt;p&gt;Validating users are who they say they are (authentication) and only allowing access to resources they have permissions for (authorization) is fundamental to API security. fabric authenticates users and then provides them with a &lt;a href="https://jwt.io/introduction"&gt;JSON Web Token (JWT)&lt;/a&gt;.  Authorization of those requests is secured using Okta‚Äôs implementation of the industry-standard &lt;a href="https://developer.okta.com/docs/reference/api/oidc/"&gt;OAuth 2.0 protocol&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;End-to-end, the process works like this:&lt;/p&gt;

&lt;p&gt;A client sends credentials (username and password) to the fabric login API.&lt;/p&gt;

&lt;p&gt;The credentials are verified by comparing what the client provides to a salted hash. (Credentials are encrypted using a robust hashing algorithm.) &lt;/p&gt;

&lt;p&gt;If the credentials are valid, the API signs and returns a JWT. If the credentials are invalid, the login request is rejected. Rate-limiting on the login API prevents brute force attacks.&lt;/p&gt;

&lt;p&gt;The client verifies the token and sends the signed token with every subsequent request. This eliminates the need for the client to include credentials for any other requests in the session.&lt;/p&gt;

&lt;p&gt;OAuth 2.0 authorization ensures that the client can only access API endpoints they have adequate permissions for. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#api-throttling"&gt;
  &lt;/a&gt;
  API Throttling
&lt;/h1&gt;

&lt;p&gt;DDoS attacks can prevent an e-commerce site from processing legitimate orders and are one of the &lt;a href="https://www.infosecurity-magazine.com/news/ddos-online-four/"&gt;biggest threats facing large retailers&lt;/a&gt;. API throttling allows us to limit the number of API requests per second and prevent DDoS from bringing a site down. &lt;/p&gt;

&lt;p&gt;Of course, with any throttling, there is the risk of false positives. To mitigate this risk, we use automation to optimize the throttling of APIs and reduce false positives while still providing protection from malicious attacks. Additionally, limits are based on both steady-state rates and bursts to account for different behaviour patterns. &lt;/p&gt;

&lt;p&gt;To implement API throttling, we use &lt;a href="https://aws.amazon.com/api-gateway/"&gt;AWS API Gateway&lt;/a&gt;. At a high level, the throttling process works like this:&lt;/p&gt;

&lt;p&gt;Clients call an API.&lt;/p&gt;

&lt;p&gt;If the number of requests is less than the throttling limit, the request is processed normally.&lt;/p&gt;

&lt;p&gt;If the number of requests exceeds the throttling limit, the user receives an error and must wait to send additional requests.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#api-keys"&gt;
  &lt;/a&gt;
  API Keys
&lt;/h1&gt;

&lt;p&gt;Like API throttling, API keys help limit abuse of our API and protect e-commerce sites that depend on it. API keys include a unique identifier (key ID) that allows us to meter access and prevent attacks. &lt;/p&gt;

&lt;p&gt;Keys are created for each fabric customer and tied to specific entities. Clients must include a key ID and secret key in their requests. By tracking key IDs, we can hone in on malicious behaviour and block it at the source. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cors-support"&gt;
  &lt;/a&gt;
  CORS Support
&lt;/h1&gt;

&lt;p&gt;By default, modern web clients only allow servers to execute scripts from their own &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Origin"&gt;origin&lt;/a&gt; (an origin is a domain, scheme, or port). This is known as the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"&gt;same-origin policy&lt;/a&gt;. From a security perspective, the same-origin policy has obvious benefits. For example, it prevents a malicious site from executing JavaScript that reads data from another webpage a user is logged into. &lt;/p&gt;

&lt;p&gt;Of course, there are plenty of legitimate reasons a site or API may need to call resources with a different origin. &lt;a href="https://blog.stackpath.com/glossary-cross-origin-resource-sharing/"&gt;Cross-Origin Resource Sharing (CORS)&lt;/a&gt; solves this problem and allows servers to securely access resources from specific, pre-defined domains.&lt;/p&gt;

&lt;p&gt;To implement CORS, we use the &lt;a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/example-function-add-cors-header-response.html"&gt;AWS CloudFront CDN&lt;/a&gt; and &lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-cors.html"&gt;AWS CORS&lt;/a&gt; for our REST APIs. Our implementation ensures only authorized cross-origin scripts can be executed.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a simple example of how we use CORS in practice:&lt;/p&gt;

&lt;p&gt;A client uses the fabric Commerce API gateway to load their website from an S3 Bucket at example.website.s3.us-east-1.amazonaws.com.&lt;/p&gt;

&lt;p&gt;To load resources and allow users to interact with the online store and shop, the site uses JavaScript to make authenticated HTTP GET and PUT requests against the same example.website.s3.us-east-1.amazonaws.com bucket.&lt;/p&gt;

&lt;p&gt;Typically, a modern web browser would block the requests to example.website.s3.us-east-1.amazonaws.com because they‚Äôre from a different origin. However, with CORS, we can explicitly allow specific cross-origin requests (in this case, example.website.s3.us-east-1.amazonaws.com), and the site will work as intended.  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;What we‚Äôve discussed here covers a majority of the API attack surface. Still, we also perform regular code security audits; maintain compliance with standards including &lt;a href="https://resources.fabric.inc/blog/ecommerce-pci-compliance"&gt;PCI DSS&lt;/a&gt;, SOC2 Type II, NIST 800, and OWASP Top 10; and implement robust identity and access management to secure our APIs.&lt;/p&gt;

&lt;p&gt;In addition to directing common API security issues, &lt;a href="https://fabric.inc/knowledgebase/start/security-compliance"&gt;we document our security approach&lt;/a&gt; to help customers understand how their data and the data of their customers is protected when using our commerce platform.&lt;/p&gt;

&lt;p&gt;If you‚Äôre developing an API-based platform for retailers (or for users within another industry), implementing the tactics described in this blog post will harden the platform instances you deploy for your customers. It will also secure shopping-related data at scale and help your customers earn trust among shoppers in this evolving digital landscape.&lt;/p&gt;

</description>
      <category>apisecurity</category>
      <category>ecommerce</category>
      <category>b2b</category>
      <category>onlineshopping</category>
    </item>
    <item>
      <title>Days of Code [3]</title>
      <author>Ronaldo Peres</author>
      <pubDate>Sun, 12 Sep 2021 19:36:41 +0000</pubDate>
      <link>https://dev.to/ronaldoperes/days-of-code-3-2l4l</link>
      <guid>https://dev.to/ronaldoperes/days-of-code-3-2l4l</guid>
      <description>&lt;p&gt;Hi everyone,&lt;/p&gt;

&lt;p&gt;Now i have this one:&lt;/p&gt;

&lt;p&gt;"You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.&lt;br&gt;
"&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-example"&gt;
  &lt;/a&gt;
  1 Example
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Input: digits = [1, 2, 3]&lt;/li&gt;
&lt;li&gt;Output: digits = [1, 2, 4]&lt;/li&gt;
&lt;li&gt;Explanation: The array represents the integer 123.&lt;/li&gt;
&lt;li&gt;Incrementing by one gives 123 + 1 = 124.&lt;/li&gt;
&lt;li&gt;Thus, the result should be [1,2,4].&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#2-example"&gt;
  &lt;/a&gt;
  2 Example
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Input: digits = [4,3,2,1]&lt;/li&gt;
&lt;li&gt;Output: [4,3,2,2]&lt;/li&gt;
&lt;li&gt;Explanation: The array represents the integer 4321.&lt;/li&gt;
&lt;li&gt;Incrementing by one gives 4321 + 1 = 4322.&lt;/li&gt;
&lt;li&gt;Thus, the result should be [4,3,2,2].&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#3-example"&gt;
  &lt;/a&gt;
  3 Example
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Input: digits = [9,9,9]&lt;/li&gt;
&lt;li&gt;Output: [1,0,0,0]&lt;/li&gt;
&lt;li&gt;Explanation: The array represents the integer 99.&lt;/li&gt;
&lt;li&gt;Incrementing by one gives 999 + 1 = 1000.&lt;/li&gt;
&lt;li&gt;Thus, the result should be [1,0,0,0].&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  Constraints:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= digits.length &amp;lt;= 100&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= digits[i] &amp;lt;= 9&lt;/li&gt;
&lt;li&gt;digits does not contain any leading 0's. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#observations"&gt;
  &lt;/a&gt;
  Observations
&lt;/h3&gt;

&lt;p&gt;Need to figure out how to solve this one without converting to int or long, since the array can pass the MaxValue, for example:&lt;/p&gt;

&lt;p&gt;The int.Maxvalue = 2147483647;&lt;/p&gt;

&lt;p&gt;We can have this input:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Input: digits = [9,8,7,6,5,4,3,2,1,0]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So if you think to solve:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Join the array and get a string "9876543210"&lt;/li&gt;
&lt;li&gt;When parse it to int we get this, cause we pass the MaxValue:

&lt;ul&gt;
&lt;li&gt;System.OverflowException: 'Value was either too large or too small for an Int32.'&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is my solution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PlusOneArray&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;PlusOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;numOfNine&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;GetNines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numOfNine&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;numOfNine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;numOfNine&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;numOfNine&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;newDigits&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CopyTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newDigits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newDigits&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;numOfNine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;GetNines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;--)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;++;&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also this is at my github:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ronaldoperes/Challenges/blob/master/LC/PlusOne.cs"&gt;Peres Github - Plus one&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy coding!!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>csharp</category>
      <category>algorithms</category>
      <category>challenge</category>
    </item>
    <item>
      <title>Autodeploy javascript library to npmjs via Github Actions</title>
      <author>Alexey Khrushch</author>
      <pubDate>Sun, 12 Sep 2021 19:22:54 +0000</pubDate>
      <link>https://dev.to/alexeykhr/autodeploy-javascript-library-to-npmjs-via-github-actions-3bfc</link>
      <guid>https://dev.to/alexeykhr/autodeploy-javascript-library-to-npmjs-via-github-actions-3bfc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;It's time to simplify and automate the release of our js library in npmjs using Github Actions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#project-initialization"&gt;Project initialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#automating-via-github-actions"&gt;Automating via Github Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#finalizing-the-result"&gt;Finalizing the result&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bonus-vuepress-documentation"&gt;Bonus: Vuepress documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reference"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Node.js 14 version with yarn was used&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-initialization"&gt;
  &lt;/a&gt;
  Project initialization
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Let's create a project called &lt;code&gt;javascript-library-autodeploy&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;javascript-library-autodeloy &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;javascript-library-autodeploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Initialize &lt;code&gt;package.json&lt;/code&gt; and add a couple of libraries for our library to work.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn init
yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; webpack@5.51.1 webpack-cli@4.8.0 eslint@7.32.0 jest@27.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, this example will use Javascript Linter - &lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt; and for running tests - &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt;. We all write tests, right? :)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Final version of &lt;code&gt;package.json&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@alexeykhr/javascript-library-autodeploy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"MIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"webpack --mode=development"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"webpack --mode=production"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jest"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint src"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^7.32.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^27.1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"webpack"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^5.51.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"webpack-cli"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.8.0"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Done, now let's add some logic to our library. In this example, it will be a simple function to add two numbers.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/index.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;And we will immediately cover this complex logic with tests.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tests/sum.test.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../src/index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1 + 2 = 3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;And add a couple more files: &lt;a href="https://raw.githubusercontent.com/Alexeykhr/javascript-library-autodeploy/main/.eslintrc.js"&gt;.eslintrc.js&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/Alexeykhr/javascript-library-autodeploy/main/.npmignore"&gt;.npmignore&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/Alexeykhr/javascript-library-autodeploy/main/.gitignore"&gt;.gitignore&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Done, there is a small project that can be built, added tests, linter, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#automating-via-github-actions"&gt;
  &lt;/a&gt;
  Automating via Github Actions
&lt;/h2&gt;

&lt;p&gt;In this step, we will create 2 &lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions"&gt;Github Workflows&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first one will be executed after each code change in the Github repository, in any branch, and the second one will push our build into npmjs and Github Packages after the release.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let's create the first Workflow to constantly check our code for a working build, Code Style and tests.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# .github/workflows/library.yml&lt;/span&gt;

&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Library&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;push&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;14.x'&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get yarn cache directory path&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn-cache-dir-path&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "::set-output name=dir::$(yarn cache dir)"&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn-cache&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.yarn-cache-dir-path.outputs.dir }}&lt;/span&gt;
          &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}&lt;/span&gt;
          &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;${{ runner.os }}-yarn-&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn lint&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn test&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The workflow is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Calling trigger on &lt;code&gt;push&lt;/code&gt; event&lt;/li&gt;
&lt;li&gt;Installing the latest Ubuntu&lt;/li&gt;
&lt;li&gt;Receive the code from Github&lt;/li&gt;
&lt;li&gt;Installing Node.js version 14&lt;/li&gt;
&lt;li&gt;Install js libraries and cache them until the &lt;code&gt;yarn.lock&lt;/code&gt; file changes&lt;/li&gt;
&lt;li&gt;Run a static code analyzer, tests and build&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this stage, we have already automated most of the work for checking Pull Requests.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now let's create a second &lt;code&gt;Workflow&lt;/code&gt;, which will release the build.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# .github/workflows/release.yml&lt;/span&gt;

&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Release&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;release&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;published&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;library&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;14.x'&lt;/span&gt;
          &lt;span class="na"&gt;registry-url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;https://registry.npmjs.org'&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get yarn cache directory path&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn-cache-dir-path&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "::set-output name=dir::$(yarn cache dir)"&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn-cache&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.yarn-cache-dir-path.outputs.dir }}&lt;/span&gt;
          &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}&lt;/span&gt;
          &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;${{ runner.os }}-yarn-&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm publish --access public&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;NODE_AUTH_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.NPM_TOKEN }}&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;registry-url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;https://npm.pkg.github.com'&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm publish&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;NODE_AUTH_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The logic of this workflow is very similar to the previous workflow. The only difference is that it fires on the &lt;code&gt;release&lt;/code&gt; event, and instead of executing linters and tests,&lt;code&gt;npm publish&lt;/code&gt; is called for npmjs and Github Packages.&lt;/p&gt;

&lt;p&gt;But to work correctly, we need to add &lt;a href="https://docs.github.com/en/actions/reference/encrypted-secrets"&gt;Github Secrets&lt;/a&gt; to this repository called &lt;code&gt;NPM_TOKEN&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You don't need to add &lt;code&gt;GITHUB_TOKEN&lt;/code&gt;, it is already enabled by default - &lt;a href="https://docs.github.com/en/actions/reference/authentication-in-a-workflow#about-the-github_token-secret"&gt;&lt;code&gt;About the GITHUB_TOKEN secret&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to the page &lt;a href="https://www.npmjs.com/settings/SET_YOUR_LOGIN/tokens"&gt;https://www.npmjs.com/settings/SET_YOUR_LOGIN/tokens&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Generate New Token&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Choosing a type &lt;code&gt;Automation&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LRfMbqs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmcqz8l6ksz5saxvi9fg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LRfMbqs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmcqz8l6ksz5saxvi9fg.png" alt="generate-npm-token"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add it to our repository under the key &lt;code&gt;NPM_TOKEN&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Settings &amp;gt; Secrets &amp;gt; New Secret&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o8_qzr7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4bx01zd4xwkeura7p70.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o8_qzr7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4bx01zd4xwkeura7p70.png" alt="npm-token"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finalizing-the-result"&gt;
  &lt;/a&gt;
  Finalizing the result
&lt;/h2&gt;

&lt;p&gt;Ready! Now we can upload our code to the Github repository and immediately see that the first &lt;code&gt;Workflow&lt;/code&gt; is launched.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4AAPqUrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9acphpob90jbdswg2cgh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4AAPqUrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9acphpob90jbdswg2cgh.png" alt="git-push"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's try to create a new release. To do this, on the right sidebar, click on &lt;strong&gt;Releases&lt;/strong&gt;, and then &lt;strong&gt;Create a new release&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TpEKjCrQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1rzubszy6dl1wwww5ks.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TpEKjCrQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1rzubszy6dl1wwww5ks.png" alt="first-release"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;release&lt;/code&gt; event was triggered, and now we can watch how our project is being built and uploaded to the npmjs resource.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D6YynArA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4ow6s9szk9rxfr3sbf5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D6YynArA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4ow6s9szk9rxfr3sbf5.png" alt="github-workflow-release"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Done, here is our library: &lt;a href="https://www.npmjs.com/package/@alexeykhr/javascript-library-autodeploy"&gt;@alexeykhr/javascript-library-autodeploy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also notice that the library has appeared in the &lt;code&gt;Packages&lt;/code&gt; sidebar block.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-vuepress-documentation"&gt;
  &lt;/a&gt;
  Bonus: Vuepress documentation
&lt;/h2&gt;

&lt;p&gt;And of course, how can it be without documentation, I took the first thing that came to hand - this is &lt;a href="https://vuepress.vuejs.org/"&gt;Vuepress&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The documentation will live in the current repository, and of course, the build process will be done for us by Github.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let's start by adding a &lt;code&gt;docs&lt;/code&gt; folder and initializing&lt;code&gt;package.json&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;docs &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;docs &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn init
yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; vuepress@1.8.2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, we make a separate &lt;code&gt;package.json&lt;/code&gt; so that the library versions do not conflict with each other (as, for example, webpack with a different major version). This way the library will not affect our core libraries in any way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"MIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vuepress dev ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vuepress build ."&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"vuepress"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.8.2"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Let's add a simple &lt;code&gt;docs/README.md&lt;/code&gt; file that will display the contents of the file.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# VuePress&lt;/span&gt;

&amp;lt;&amp;lt;&amp;lt; @/../package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;And some settings for &lt;code&gt;Vuepress&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// docs/.vuepress/config.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../package&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Version &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;/`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;My library name is the same as the name of the Github repository, so the base url is taken from package.json&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is enough to be able to build something, and for an explicit display of the build, we are publishing the version of the library in the documentation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now let's update our Github Workflows.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In &lt;strong&gt;.github/workflows/library.yml&lt;/strong&gt; let's change the trigger so that it doesn't fire when we just edit the documentation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;*/**'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;!docs/**'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in &lt;strong&gt;.github/workflows/release.yml&lt;/strong&gt; add another job.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;docs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
  &lt;span class="na"&gt;defaults&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;working-directory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./docs&lt;/span&gt;
  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;14.x'&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get yarn cache directory path&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn-cache-dir-path&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "::set-output name=dir::$(yarn cache dir)"&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn-cache&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.yarn-cache-dir-path.outputs.dir }}&lt;/span&gt;
        &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-yarn-docs-${{ hashFiles('yarn.lock') }}&lt;/span&gt;
        &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;${{ runner.os }}-yarn-docs-&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn build&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Commit changes&lt;/span&gt;
      &lt;span class="na"&gt;working-directory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./docs/.vuepress/dist&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;git config --global user.name "github-actions"&lt;/span&gt;
        &lt;span class="s"&gt;git config --global user.email "github-actions@github.com"&lt;/span&gt;
        &lt;span class="s"&gt;git init&lt;/span&gt;
        &lt;span class="s"&gt;git add -A&lt;/span&gt;
        &lt;span class="s"&gt;git commit -m "deploy"&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Push changes&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ad-m/github-push-action@master&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;github_token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
        &lt;span class="na"&gt;branch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gh-pages&lt;/span&gt;
        &lt;span class="na"&gt;force&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;directory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./docs/.vuepress/dist&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The logic is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Runs &lt;code&gt;yarn install&lt;/code&gt; inside the&lt;code&gt;docs&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;Then the documentation is built&lt;/li&gt;
&lt;li&gt;The entire build is uploaded using force push under the &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And these 2 jobs will run in parallel.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add new code, update the library version and push to Github.&lt;/li&gt;
&lt;li&gt;Add one more release to execute a new job&lt;/li&gt;
&lt;li&gt;It remains to add the &lt;code&gt;gh-pages&lt;/code&gt; branch to &lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt; to display the documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KaBdzd-B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5q2xl76x5ysp5gv6p1i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KaBdzd-B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5q2xl76x5ysp5gv6p1i.png" alt="github-pages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Congratulations, we have automated a lot of our work, now there is no need to write huge scripts, what and why to perform at release. Sometimes forget to deploy code in npmjs :)&lt;/p&gt;

&lt;p&gt;But you can also automate even more, if, for example, you write according to &lt;a href="https://github.com/conventional-commits/conventionalcommits.org"&gt;Conventional Commits&lt;/a&gt;, you can also automate the creation of tags using the &lt;a href="https://github.com/conventional-changelog/standard-version"&gt;standard-version&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;And use all sorts of tools, like &lt;a href="https://github.com/actions/labeler"&gt;actions/labeler&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Alexeykhr/javascript-library-autodeploy"&gt;Github repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/@alexeykhr/javascript-library-autodeploy"&gt;npmjs library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>github</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Amazon SES and everything to set it up</title>
      <author>Jones Zachariah Noel</author>
      <pubDate>Sun, 12 Sep 2021 19:20:19 +0000</pubDate>
      <link>https://dev.to/awscommunity-asean/amazon-ses-and-everything-to-set-it-up-49c6</link>
      <guid>https://dev.to/awscommunity-asean/amazon-ses-and-everything-to-set-it-up-49c6</guid>
      <description>&lt;p&gt;&lt;a href="https://aws.amazon.com/ses/"&gt;Amazon Simple Email Service (SES)&lt;/a&gt; is a AWS provisioned Email service which is available for cloud native applications to integrate and implementing use-cases which requires email messages to be sent.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#key-takeaways-from-the-blog-"&gt;
  &lt;/a&gt;
  Key takeaways from the blog -
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Features of SES&lt;/li&gt;
&lt;li&gt;Common use-cases with SES&lt;/li&gt;
&lt;li&gt;Setting up SES on your AWS Account&lt;/li&gt;
&lt;li&gt;Working with SES&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#features-of-ses"&gt;
  &lt;/a&gt;
  Features of SES
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Sending emails to targeted audience.&lt;/li&gt;
&lt;li&gt;Analytics and monitoring of emails which are delivered, failed, bounced.&lt;/li&gt;
&lt;li&gt;Ease of integration with CLI and SDK.&lt;/li&gt;
&lt;li&gt;Verified the identities - email and domain which has permission to send emails.&lt;/li&gt;
&lt;li&gt;Highly scalable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#common-usecases-with-ses"&gt;
  &lt;/a&gt;
  Common use-cases with SES
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Targeted email messages based on events or programmatically invoked from your application in Lambda Functions, EC2 instances or containers.&lt;/li&gt;
&lt;li&gt;Valid email templates which could be reused.&lt;/li&gt;
&lt;li&gt;With &lt;a href="https://aws.amazon.com/pinpoint/"&gt;Amazon Pinpoint&lt;/a&gt; and &lt;a href="https://aws.amazon.com/personalize/"&gt;Amazon Personalize&lt;/a&gt; sending marketing emails with content customized to user's preference.&lt;/li&gt;
&lt;li&gt;Bulk emails for easier communications with user specific data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#setting-up-ses-on-your-aws-account"&gt;
  &lt;/a&gt;
  Setting up SES on your AWS Account
&lt;/h4&gt;

&lt;p&gt;To get started with SES, you would have to move your SES account out of sandbox environment to production so that you can send emails to any email address. Note, if your SES account is in sandbox environment then you would be able to send emails only to verified identities only.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g1uiy9V8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15pwvhkewkqtclfuzhaf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g1uiy9V8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15pwvhkewkqtclfuzhaf.png" alt="Sandbox environment"&gt;&lt;/a&gt;&lt;br&gt;
To move your SES account out of the sandbox, you would have to raise a support request with AWS and the use-case would evaluated based on which the account is moved to production access.&lt;br&gt;
You can rase the support directly by clicking on &lt;em&gt;Edit your account details&lt;/em&gt; button. And you would be prompted with the below screen, where you would have provide the email type and use-case description.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GSHDwcWF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qiqk1cc0yp30lmfefidh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GSHDwcWF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qiqk1cc0yp30lmfefidh.png" alt="Production access support"&gt;&lt;/a&gt;&lt;br&gt;
Another way to do it is, from the support page raising the limit increase support. &lt;br&gt;
You can find the detailed steps to move SES out of Sandbox in the &lt;a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html"&gt;link&lt;/a&gt;.&lt;br&gt;
And once, the support request is approved, your SES account would be moved out of Sandbox environment. The sending quota would also be reflected for your account. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ll8wsVeg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3f9rn1s23hwlgunbgvxv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ll8wsVeg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3f9rn1s23hwlgunbgvxv.png" alt="Production access"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SES uses verified identities to send emails. The two type of identities supported by SES are - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Email addresses&lt;/strong&gt; : a valid email address should be verified by Amazon's verification process where the email identity would be receiving an email with a verification link.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gd2S05CO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g60pacqpp6b9gr5o57jm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gd2S05CO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g60pacqpp6b9gr5o57jm.png" alt="Email addresses"&gt;&lt;/a&gt;&lt;br&gt;
Once your email is verified, you can send a test email from the console. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dVyAGx51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x06jjc7l4vvbc977xj8d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dVyAGx51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x06jjc7l4vvbc977xj8d.png" alt="Send test email"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Domains&lt;/strong&gt; : a particular domain would be verified if the domain is on Route53, it automatically adds up DNS records for sending emails. Otherwise, it will prompt you with the DNS records which has to be added to your domain.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_RFmxaeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fh9zuqv24kho5ihy0ewp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_RFmxaeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fh9zuqv24kho5ihy0ewp.png" alt="Domains"&gt;&lt;/a&gt;&lt;br&gt;
Similar to email identities, once your domain is added and verified, you can send a test message. Now since your domain is enabled with email you can choose any email address of that domain.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c8JkZKKU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5makpmzo605l2ry36soq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c8JkZKKU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5makpmzo605l2ry36soq.png" alt="Send test email"&gt;&lt;/a&gt;&lt;br&gt;
Note, even though the domain is verified and the email address is also part of the same verified domain, the emails will have the from header as &lt;code&gt;amazonses.com&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#working-with-ses"&gt;
  &lt;/a&gt;
  Working with SES
&lt;/h4&gt;

&lt;p&gt;For sending emails with SES you can use both AWS CLI and AWS SDK. SDK also supports various languages, in this blog we will be using NodeJS SDK. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creation of SES Email templates&lt;/strong&gt;&lt;br&gt;
To create a template on SES for that we would have to define a HTML and text content for the email along with parameters which would be sent when invoking a templated Email message. Create, update and delete of templates is only supported on CLI and SDK. Since this is a one-time execution, we would be doing it from the CLI.&lt;br&gt;
&lt;code&gt;template.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"Template"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"TemplateName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"SampleTemplate"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"SubjectPart"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Greetings, {{name}}!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"HtmlPart"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;h1&amp;gt;Hello {{name}},&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;this is a sample email with parameters -&amp;lt;br/&amp;gt; Name : {{name}}&amp;lt;br/&amp;gt;Email: {{email}}&amp;lt;br/&amp;gt;&amp;lt;/p&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"TextPart"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Dear {{name}},&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;Your email is {{email}}."&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws ses create-template &lt;span class="nt"&gt;--cli-input-json&lt;/span&gt; file://template.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;API reference : &lt;a href="https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SES.html#createTemplate-property"&gt;JavaScript&lt;/a&gt;, &lt;a href="https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ses.html#SES.Client.create_template"&gt;Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Different ways of sending SES emails -&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Formatted email&lt;/strong&gt; : The email body is constructed and sent with &lt;code&gt;SendEmail&lt;/code&gt; API. This supports raw text format and also formatted HTML based content.  Here we can define multiple recipients (&lt;code&gt;to&lt;/code&gt;, &lt;code&gt;cc&lt;/code&gt; and &lt;code&gt;bcc&lt;/code&gt;) with email address separated with comma but this is limited to 50 recipients per email.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;Destination&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
   &lt;span class="na"&gt;CcAddresses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test@zachjonesnoel.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
   &lt;span class="p"&gt;],&lt;/span&gt; 
   &lt;span class="na"&gt;ToAddresses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;example@zachjonesnoel.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;demo@zachjonesnoel.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
   &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; 
  &lt;span class="na"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;Charset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;UTF-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="na"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;p&amp;gt;This message body contains &amp;lt;b&amp;gt;HTML&amp;lt;/b&amp;gt; formatting. It can, for example, contain links like this one: &amp;lt;a class=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;ulink&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; href=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;https://zachjonesnoel.com/&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; target=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;_blank&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;zachjonesnoel&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; 
    &lt;span class="na"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;Charset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;UTF-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="na"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is the demo message.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt; 
   &lt;span class="na"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Charset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;UTF-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Test email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; 
  &lt;span class="na"&gt;ReplyToAddresses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ro-repy@zachjonesnoel.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="p"&gt;],&lt;/span&gt; 
  &lt;span class="na"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ro-repy@zachjonesnoel.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="na"&gt;SourceArn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;
 &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;API reference : &lt;a href="https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SES.html#sendEmail-property"&gt;JavaScript&lt;/a&gt;, &lt;a href="https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ses.html#SES.Client.send_email"&gt;Python&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Raw email&lt;/strong&gt; : This is more flexible than &lt;em&gt;Simple Email&lt;/em&gt; and additionally we can also send attachments with this. The rest of the functionalities are same. The message is a base64 encoded string.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;Destinations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test@zachjonesnoel.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt; 
  &lt;span class="na"&gt;FromArn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;arn:aws:ses:us-east-1:xxxxxxxxx:identity/ro-repy@zachjonesnoel.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="na"&gt;RawMessage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Binary&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; 
  &lt;span class="na"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ro-repy@zachjonesnoel.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="na"&gt;SourceArn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;arn:aws:ses:us-east-1:xxxxxxxxx:identity/ro-repy@zachjonesnoel.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendRawEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;API reference : &lt;a href="https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SES.html#sendRawEmail-property"&gt;JavaScript&lt;/a&gt;, &lt;a href="https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ses.html#SES.Client.send_raw_email"&gt;Python&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Templated email&lt;/strong&gt; : The template of email is defined and the respective template is also created with API or CLI. And whenever the emails are programmatically sent, you would have pass the parameters which are defined in the email template.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Source&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;no-reply@zachjonesnoel.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Template&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SampleTemplate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Destination&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ToAddresses&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test@zachjonesnoel.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TemplateData&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;zachjonesnoel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test@zachjonesnoel.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendTemplatedEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;API reference : &lt;a href="https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SES.html#sendTemplatedEmail-property"&gt;JavaScript&lt;/a&gt;, &lt;a href="https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ses.html#SES.Client.send_templated_email"&gt;Python&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Bulk templated emails&lt;/strong&gt; : Bulk emails also use templates where the same template would be used for multiple emails where the parameters are specific to the users. This would send dedicated emails to each user.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Source&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;no-reply@zachjonesnoel.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Template&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SampleTemplate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Destinations&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
           &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Destination&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ToAddresses&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                         &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test@zachjonesnoel.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                    &lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ReplacementTags&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                         &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;zach&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                         &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test@zachjonesnoel.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;]&lt;/span&gt;
           &lt;span class="p"&gt;},&lt;/span&gt;
           &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Destination&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ToAddresses&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                         &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;demo@zachjonesnoel.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                    &lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ReplacementTags&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                         &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jones&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                         &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;demo@zachjonesnoel.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;]&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendBulkTemplatedEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;API reference : &lt;a href="https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SES.html#sendBulkTemplatedEmail-property"&gt;JavaScript&lt;/a&gt;, &lt;a href="https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ses.html#SES.Client.send_bulk_templated_email"&gt;Python&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;AWS SES provides simplistic integration methods where application developers can leverage the SDK based APIs for &lt;code&gt;sendRawEmail&lt;/code&gt;, &lt;code&gt;sendEmail&lt;/code&gt;, &lt;code&gt;sendTemplatedEmail&lt;/code&gt;, &lt;code&gt;sendBulkTemplatedEmail&lt;/code&gt; available in JavaScript, Python, PHP, Go, Java and .NET. SES provides APIs where it eases sending emails from a verified email or domain so the authenticity of the sender is verified. This also provides good feasibility with HTML based templates and formatting of email content.&lt;br&gt;
Before getting started, don't forget to look into &lt;a href="https://aws.amazon.com/ses/pricing/"&gt;SES pricing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This sample requires identities to be verified on AWS before sending emails, so haven't provided GitHub repository references. If you encounter any issues, don't hesitate to ping me on &lt;a href="https://twitter.com/ZachjNOEL"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/jones-zachariah-noel-n"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>ses</category>
      <category>aws</category>
      <category>serverless</category>
      <category>lambda</category>
    </item>
  </channel>
</rss>
