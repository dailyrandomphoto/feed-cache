<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top Interview Questions for Frontend Developers</title>
      <author>Abhishek Raj</author>
      <pubDate>Fri, 30 Jul 2021 18:18:40 +0000</pubDate>
      <link>https://dev.to/abhishekraj272/top-interview-questions-for-frontend-developers-3d5j</link>
      <guid>https://dev.to/abhishekraj272/top-interview-questions-for-frontend-developers-3d5j</guid>
      <description>&lt;p&gt;In the past few days, I appeared for many frontend devs interview. So, in this post, I have compiled some of the most common question I was asked.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#q1-how-would-you-optimise-a-slow-react-website"&gt;
  &lt;/a&gt;
  Q1. How would you optimise a slow React website?
&lt;/h3&gt;

&lt;p&gt;My View:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We can open the network tab and check if the issue is in frontend or backend. &lt;/li&gt;
&lt;li&gt;If the problem is with frontend, we can use a profiler to see where is the issue.
I think almost every frontend dev has heard about Lighthouse or GTMatrix.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kyo9jN6t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2by60sy8kahy3bnxr1e.png" alt="image"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, the issue with these profiler is that they mostly give information about First Paint/ Time to Interative, etc... but suppose there is a table which gets rendered on each state change or a component is taking too long to compute, how'd you find?&lt;/p&gt;

&lt;p&gt;Here comes React Profiler for our rescue.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NUub6Gtm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7wleq95y2cx7k2339sl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NUub6Gtm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7wleq95y2cx7k2339sl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see which component took how much time to render, then further we can memoize the component/functions taking forever to render.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html"&gt;Read More&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#q2-how-would-you-design-a-loosely-coupled-react-app"&gt;
  &lt;/a&gt;
  Q2. How would you design a loosely coupled React App?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jn4OU5fb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovi5y1ra8q1hsg5gfkje.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jn4OU5fb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovi5y1ra8q1hsg5gfkje.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My Views:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Don‚Äôt repeat yourself: Whenever you see you have repeated a piece of code, try to create another component/function and break it into small pieces.&lt;/li&gt;
&lt;li&gt;Try to move API calls on the top components.&lt;/li&gt;
&lt;li&gt;Try to reduce number of props being passed.&lt;/li&gt;
&lt;li&gt;Try to use Higher Order Components whenever possible.&lt;/li&gt;
&lt;li&gt;Divide features in dedicated reducers.&lt;/li&gt;
&lt;li&gt;Last but not least, Use side-effects manager like Redux-Saga to handle side effects.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The more loosely coupled your application is, more scalable it will be.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#q3-when-to-use-redux-thunk-amp-redux-saga"&gt;
  &lt;/a&gt;
  Q3. When to use Redux Thunk &amp;amp; Redux Saga?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ya5uuj6n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq16n0z23uz34ddl4eub.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ya5uuj6n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq16n0z23uz34ddl4eub.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: Redux Thunk is only 10 lines of code including function  name &amp;amp; curly braces (~300 bytes) ü•∫&lt;br&gt;
Redux-Saga is around 13kb üôÇ&lt;/p&gt;

&lt;p&gt;My View: If you are creating some small scale website then Redux Thunk is you child. Redux Saga is like having an extra thread in your web app which can easily handle any side effect, all thanks to generator functions.&lt;br&gt;
&lt;a href="https://medium.com/@shoshanarosenfield/redux-thunk-vs-redux-saga-93fe82878b2d"&gt;Read More&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#q4-two-way-data-binding-in-react"&gt;
  &lt;/a&gt;
  Q4. Two Way Data Binding in React?
&lt;/h3&gt;

&lt;p&gt;My View: React has one way data binding, which means, data flow is from owner to child only, the child can't update the data directly. It will need to dispatch some actions/call the function required to update the data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ujzs8jVD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9fc9q1jyk8na6s3kqk6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ujzs8jVD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9fc9q1jyk8na6s3kqk6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But in some cases two way data binding might be required.&lt;br&gt;
So, how'd you apply 2 way data binding, React provides some function to do that too.&lt;br&gt;
&lt;a href="https://reactjs.org/docs/two-way-binding-helpers.html"&gt;Read More&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#q5-synthetic-events-in-react"&gt;
  &lt;/a&gt;
  Q5. Synthetic Events in React
&lt;/h3&gt;

&lt;p&gt;My View: Many of us have used Synthetic Events in React but very few of us knows about it. üòù&lt;br&gt;
Quoting React Docs here&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Your event handlers will be passed instances of SyntheticEvent, a cross-browser wrapper around the browser‚Äôs native event. It has the same interface as the browser‚Äôs native event, including stopPropagation() and preventDefault(), except the events work identically across all browsers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/docs/events.html"&gt;Read More&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;All the given answers are my own views, if you think I might be wrong, do comment it down below. I am open for discussions. üòÉ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Connect Me @ &lt;a href="https://www.linkedin.com/in/abhishekraj272/"&gt;Linkedin&lt;/a&gt; &lt;a href="https://github.com/abhishekraj272"&gt;Github&lt;/a&gt; &lt;a href="https://twitter.com/abhishekraj272"&gt;Twitter&lt;/a&gt; &lt;a href="https://www.youtube.com/channel/UCvHn2T8DSJzEWzYDdK3Dt8A"&gt;Youtube&lt;/a&gt; üòá&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
      <category>career</category>
    </item>
    <item>
      <title>Accessible Text on Images: Nail the Contrast Ratio</title>
      <author>Rodney Lab</author>
      <pubDate>Fri, 30 Jul 2021 17:51:36 +0000</pubDate>
      <link>https://dev.to/askrodney/accessible-text-on-images-nail-the-contrast-ratio-5c31</link>
      <guid>https://dev.to/askrodney/accessible-text-on-images-nail-the-contrast-ratio-5c31</guid>
      <description>&lt;h2&gt;
  &lt;a href="#accessible-images"&gt;
  &lt;/a&gt;
  ü§ó Accessible Images
&lt;/h2&gt;

&lt;p&gt;Creating accessible text on images on a website page is not easy.  First there are all the usual accessibility concerns when adding an image your site.  For example, you need to make sure the image has an alt text which describes the image well for partially sighted visitors.  But then you need to remember to leave the alt text empty if the image is included for decorative purposes only.  OK not that difficult so far.  Next as with any other text on your site, you need to make sure that the contrast level between the text colour and the background colour is high enough.&lt;/p&gt;

&lt;p&gt;The widely accepted &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/G18.html#G18-procedure"&gt;standard is for a 4.5 contrast ratio between the text and the background&lt;/a&gt;.  That's simple enough for text on a plain background‚Ä¶ modern browsers have tools built in to help here.  But what do you do when your text is overlaid on an image which had a whole range of colours?  The &lt;a href="https://rainbow.rodneylab.com"&gt;Rainbow tool can help here&lt;/a&gt;.  Here is an example of what we are aiming for. Although the text is a similar hue to the background, by adding an overlay background for the text with the right opacity level we can be confident the contrast ratio is in line with the standard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A4qdnKCx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rntle6ki12pu9cwalbdk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A4qdnKCx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rntle6ki12pu9cwalbdk.jpg" alt="Accessible Text on Images: Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-we-doing-today"&gt;
  &lt;/a&gt;
  What are we doing today?
&lt;/h3&gt;

&lt;p&gt;In this post we take a look at how to add accessible text to an image and also how to ensure you follow the latest best practise to make sure the image is responsive.  Although we use SvelteKit, you can easily adapt the code to work with React based frameworks or even plain HTML.  If you're keen to learn all about creating accessible text on images let's warm up by first taking a look at the Rainbow tool. After that we will crack open Vim or VSCode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-rainbow-tool"&gt;
  &lt;/a&gt;
  üåà What is the Rainbow Tool?
&lt;/h2&gt;

&lt;p&gt;The Rainbow Tool is nothing more than an accessibility aid for developers and UX designers.  To use it you just &lt;a href="https://rainbow.rodneylab.com/"&gt;open up the Rainbow Tool site at rainbow.rodneylab.com&lt;/a&gt;, add an image, customise the colours and text, hit the Get Alpha button and use the value returned in your site code.  Don't worry if you're not sure how to add overlay text in SvelteKit.  We will go over how to add text with overlay to a responsive image in a minute.  First though let's have a quick look under the hood.&lt;/p&gt;

&lt;p&gt;The Rainbow tool was built using a static site generator.  It's power lies in &lt;a href="https://rodneylab.com/use-serverless-rust-with-netlify-functions/"&gt;a Rust serverless function&lt;/a&gt; which does the maths.  It works by finding the pixel (in the image) with the lowest contrast to the text colour.  Then it uses a bit of High School Maths (the Newton-Raphson numerical technique) to work out the overlay transparency which satisfies the contrast ratio supplied (4.5 by default).  There are a few optimisations built in such as resizing the image before getting going to speed up the later calculations.  The code is open source and you can &lt;a href="https://github.com/rodneylab/rainbow"&gt;view the Rainbow Site code on the Rodney Lab Git Hub page&lt;/a&gt;.  Now you know what the Rainbow tool is shall we look at how to use it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessible-text-on-images-how-to-nail-contrast-ratio"&gt;
  &lt;/a&gt;
  üî® Accessible Text on Images How to Nail Contrast Ratio
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#how-to-add-accessible-text-to-a-website-imagegt"&gt;
  &lt;/a&gt;
  How to add accessible text to a website image"&amp;gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://rainbow.rodneylab.com/"&gt;Open the Rainbow Accessibility tool&lt;/a&gt; and click &lt;strong&gt;Browse&lt;/strong&gt; to add your photo.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, pick your text and overlay colours.  A common choice it white text on a black background, though you can be as creative as you like.  If there is not enough contrast between your chosen text and overlay colours, the tool will let you know.  You can also customise the text if you want to.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next click or tap the &lt;strong&gt;Get Alpha&lt;/strong&gt; button to fire up the Rust serverless function.  After a moment the computed alpha will be displayed.  The image is updated, using this value.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally you just head over to you favourite text editor and code up the image.  Here is example code for a responsive image.  Remember to make sure you update the alpha value for your own image.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flower in rainbow colours&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/assets/rainbow-flower.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sizes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(max-width: 672px) calc(100vw - 32px), 672px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;srcsetAvif&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;`
/assets/rainbow-flower-1344.avif 1344w,
/assets/rainbow-flower-672.avif 672w,
/assets/rainbow-flower-336.avif 336w
&lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;;
  const srcsetWebP = &lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;
/assets/rainbow-flower-1344.webp 1344w,
/assets/rainbow-flower-672.webp 672w,
/assets/rainbow-flower-336.webp 336w
&lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;;
  const srcset = &lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;
/assets/rainbow-flower-1344.jpg 1344w,
/assets/rainbow-flower-672.jpg 672w,
/assets/rainbow-flower-336.jpg 336w
&lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;;
&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"image-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;sizes&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;{srcsetAvif}&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/avif"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;sizes&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;{srcsetWebP}&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/webp"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;sizes&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;srcset&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/jpeg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;loading=&lt;/span&gt;&lt;span class="s"&gt;"lazy"&lt;/span&gt; &lt;span class="na"&gt;decoding=&lt;/span&gt;&lt;span class="s"&gt;"async"&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"672"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"672"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"overlay-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Love is love ‚ô•Ô∏é&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"scss"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nc"&gt;.image-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;spacing-3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;color-theme-4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.overlay-text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;spacing-16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;spacing-16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#262322&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.78&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f2e3bc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;spacing-0&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;spacing-4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;spacing-2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;font-size-7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Asap'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code shows how to overlay text on an image with a semi-transparent background.  The opacity (or alpha) is specified in line &lt;code&gt;47&lt;/code&gt;.  Notice how we &lt;a href="https://web.dev/uses-webp-images/"&gt;embed Next-Gen image formats&lt;/a&gt;, but include fall backs for browsers which do not support them.  We also &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images"&gt;make the image responsive by including different widths&lt;/a&gt; and specifying when each should be used.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
   What Are Your Thoughts?&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;In this post we looked at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;how to use a semi-transparent overlay to make text added to an image accessible,&lt;/li&gt;
&lt;li&gt;using the Rainbow tool to get the opacity or alpha level,&lt;/li&gt;
&lt;li&gt;how to embed a responsive image using Next-Gen formats with a fallback.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you found this post useful and you can use something from this post in one of your projects.  I'm keen to hear how you have the Rainbow tool in your work.  Also it is still early in development so I am keen to hear your suggestions on how it could be improved.  You can leave a comment below, &lt;a href="https://twitter.com/intent/user?screen_name=askRodney"&gt;@ me on twitter&lt;/a&gt; or try one of the other contact methods listed below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessible-text-on-images-feedback"&gt;
  &lt;/a&gt;
  üôèüèΩ Accessible Text on Images: Feedback
&lt;/h2&gt;

&lt;p&gt;As I say, I hope you enjoyed the post and learned something new.  I also hope you will use this code in your own projects.  Be sure to share your work on Twitter, giving me a mention so I can see what you did.  Finally be sure to let me know ideas for other posts you would like to see. Read on to find ways to get in touch, further below.  If you have found this post useful, even though you can only afford even a tiny contribution, please &lt;a href="https://rodneylab.com/giving/"&gt;consider supporting me through Buy me a Coffee&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Finally, feel free to share the post on your social media accounts for all your followers who will find it useful. As well as leaving a comment below, you can get in touch via &lt;a href="https://twitter.com/messages/compose?recipient_id=1323579817258831875"&gt;@askRodney&lt;/a&gt; on Twitter and also &lt;a href="https://t.me/askRodney"&gt;askRodney on Telegram&lt;/a&gt;. Also, see further ways to get in touch with Rodney Lab. I post regularly on SvelteKit as well as &lt;a href="https://rodneylab.com/tags/gatsby"&gt;Gatsby JS&lt;/a&gt; among other topics.  Also &lt;a href="https://rodneylab.com/about/#newsletter"&gt;subscribe to the newsletter to keep up-to-date&lt;/a&gt; with our latest projects.&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>rust</category>
      <category>javascript</category>
      <category>a11y</category>
    </item>
    <item>
      <title>Visualising Changes With Semantic Git Differences</title>
      <author>Marcelo Sousa</author>
      <pubDate>Fri, 30 Jul 2021 16:52:12 +0000</pubDate>
      <link>https://dev.to/reviewpad/visualising-changes-with-semantic-git-differences-3omh</link>
      <guid>https://dev.to/reviewpad/visualising-changes-with-semantic-git-differences-3omh</guid>
      <description>&lt;p&gt;&lt;em&gt;Yay ‚Äì you receive a notification for a code review in a pull request on GitHub. You open the files changed tab on GitHub and there it is: a basic UI showing you nothing more than a git diff. Surely, there is a better way to look at the changes, including comments, and navigate to them, right?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;git diff&lt;/code&gt;&lt;/strong&gt; is a great tool used by millions of developers every day. One of the ways developers consume it is through the UI of GitHub, GitLab, or Bitbucket when you doing a code review.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unfortunately, what you see is literally what you get out of the git command.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For example, here is what you see on &lt;a href="http://github.com"&gt;GitHub.com&lt;/a&gt; for the following pull request of the &lt;a href="https://github.com/google/guava"&gt;google/guava&lt;/a&gt; project:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_5GZSyv_K04"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
Files changes in google/guava ‚Äì #3304 Unhandled overflow in the concat() method of per-type primitive utility classes



&lt;p&gt;We believe that in 2021, developers deserve better than having to exhaustively check textual diffs and try to reverse engineer the context of the changes.&lt;/p&gt;

&lt;p&gt;So we have incorporated into Reviewpad a special diff operation that captures an overview of the changes at the semantic level:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TBiCr4p_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onamf2rfai8l2x8f3v8g.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TBiCr4p_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onamf2rfai8l2x8f3v8g.jpg" alt="Reviewpad‚Äôs Explore Tree. Try our beta"&gt;&lt;/a&gt;&lt;/p&gt;
Reviewpad‚Äôs Explore Tree. Try our beta at beta.reviewpad.com.



&lt;p&gt;The Explore Tree was designed to immediately answer the following questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  From the list of modified files, which have changes that involve semantic changes and how many changes occurred?&lt;/li&gt;
&lt;li&gt;  Which semantic objects (e.g. methods and classes in Java) were modified and which type of modification (added, removed, or changed)?&lt;/li&gt;
&lt;li&gt;  Which files or symbols contain comments?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Answering these questions has saved us a lot of review time as the tree also acts as an index into the diff, and allows us to navigate directly into it.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2o0SYdju1yo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
Interactions with the Explore Tree for Google / Guava ‚Äì #3304 Unhandled overflow in the concat() method of per-type primitive utility classes. Check it out on beta.reviewpad.com/review/github.com/google/guava/pull/3304.



&lt;p&gt;In order to compute the Explore Tree, Reviewpad performs a semantic diff of two versions of the file, restricted only to the hunks associated with the git diff. From there, the challenge is to understand which symbol (function, method, class, type, etc) is associated with this change. We‚Äôll write more details about the analyser in a future post. üòâ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cool-how-do-i-check-this-out-by-myself"&gt;
  &lt;/a&gt;
  Cool. How do I check this out by myself?
&lt;/h2&gt;

&lt;p&gt;We have a public beta version of Reviewpad available at &lt;a href="https://beta.reviewpad.com"&gt;beta.&lt;/a&gt;&lt;a href="https://beta.reviewpad.com"&gt;reviewpad.com&lt;/a&gt;. You will need to create a new account and once you log in for the first time, you will see the following page to connect to a code host:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--barJ-GXO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq7sortt5dfkk06exgtx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--barJ-GXO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq7sortt5dfkk06exgtx.png" alt="Connect to code host page on Reviewpad."&gt;&lt;/a&gt;&lt;/p&gt;
Connect to code host page on Reviewpad.



&lt;p&gt;You can connect to GitHub through our OAuth app or manually &lt;a href="https://docs.reviewpad.com/github"&gt;add a personal access token&lt;/a&gt;. The OAuth requires minimal scopes to be able to read and comment on public repositories.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And voil√† ‚Äì you are ready to get started with Reviewpad!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Our semantic analysis works for more than 10 languages including: C, C++, C#, Go, Haskell, Java, Javascript, Proto, Python, Ruby, Rust, Swift and TypeScript.&lt;/p&gt;

&lt;p&gt;We are adding more and more open source projects in different languages so that you can check it out easily. Feel free to reach us on our &lt;a href="https://reviewpad.com/slack"&gt;community Slack&lt;/a&gt; with requests!&lt;/p&gt;

</description>
      <category>codereview</category>
      <category>github</category>
      <category>gitdiff</category>
      <category>semantic</category>
    </item>
    <item>
      <title>Will you consider your carbon footprint when configuring your compute workloads?</title>
      <author>Andrew Brown üá®üá¶</author>
      <pubDate>Fri, 30 Jul 2021 16:49:12 +0000</pubDate>
      <link>https://dev.to/andrewbrown/will-you-consider-your-carbon-footprint-when-configuring-your-compute-workloads-2gf0</link>
      <guid>https://dev.to/andrewbrown/will-you-consider-your-carbon-footprint-when-configuring-your-compute-workloads-2gf0</guid>
      <description>&lt;p&gt;At Google, engineers get to spend 20% of their time on internal projects of their own design and Steren built a free public-facing customer tool to help you consider the carbon footprint when provisioning your resources in a specific region.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--CpRVFcPk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/980619869463855104/1wkCx51g_normal.jpg" alt="Steren profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Steren
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/steren"&gt;@steren&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      üó∫Ô∏è I built a tool to help pick a @GoogleCloud region based on its carbon footprint, price and latency. &lt;br&gt;Adjust 3 sliders, get a sorted list of regions:&lt;br&gt;&lt;a href="https://t.co/yMTEFmuzGU"&gt;gcp-region-picker.web.app&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:20 PM - 20 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1384542442536333315" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1384542442536333315" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1384542442536333315" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--CpRVFcPk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/980619869463855104/1wkCx51g_normal.jpg" alt="Steren profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Steren
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/steren"&gt;@steren&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      üó∫Ô∏è I built a tool to help pick a @GoogleCloud region based on its carbon footprint, price and latency. &lt;br&gt;Adjust 3 sliders, get a sorted list of regions:&lt;br&gt;&lt;a href="https://t.co/yMTEFmuzGU"&gt;gcp-region-picker.web.app&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:20 PM - 20 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1384542442536333315" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1384542442536333315" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1384542442536333315" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hAeprl7L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqp8fbtt6asgw795gbo1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hAeprl7L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqp8fbtt6asgw795gbo1.png" alt="Screen Shot 2021-07-30 at 12.12.57 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you expand the cards you get a bit more detail.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kYtDtJG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjl37utvy0bomict80fn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kYtDtJG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjl37utvy0bomict80fn.png" alt="Screen Shot 2021-07-30 at 12.25.53 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try the &lt;a href="https://cloud.withgoogle.com/region-picker/"&gt;Google Cloud Carbon Footprint Region Picker&lt;/a&gt; yourself.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do you think you will ever consider your carbon-foot print when using cloud services?&lt;/li&gt;
&lt;li&gt;Would you ever want to see a carbon-foot print as part of the cost and usage reporting within your cloud service provider (CSPs)? &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Did you know there is a Forem server just for just the cloud? &lt;a href="https:///www.thedev.cloud"&gt;www.thedev.cloud&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="(https:///www.thedev.cloud)"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fnLiP_rF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8nxmzmstl05jouj4ws0t.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Why we killed elixir</title>
      <author>borislav nikolov</author>
      <pubDate>Fri, 30 Jul 2021 16:26:52 +0000</pubDate>
      <link>https://dev.to/rekki/why-we-killed-elixir-3np</link>
      <guid>https://dev.to/rekki/why-we-killed-elixir-3np</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vn9d9QNm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7novlljrgzposd6w0dli.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vn9d9QNm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7novlljrgzposd6w0dli.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First this is my opinion as CTO, I don't care about languages, I hate them all.&lt;/p&gt;

&lt;p&gt;Here is my hatelist of languages I know enough to say I hate them, from most hated to least hated:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# most hated
java perl javascript
elixir ruby
python cpp objc clojure
go dart
c
# least hated
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All those languages have something to offer, when you decide to use one, you better know how it will bite you in the butt. Most overpromise and underdeliver, their philosophies work great on paper, but poorly in practice. By 'in practice' I mean a diverse team of people working on a non trivially sized project with different experiences, preferences and backgrounds.&lt;/p&gt;

&lt;p&gt;When REKKI started the devs thought they are building a chat app, instead of ordering app, and they chose elixir, with phoenix to be able to trivially do things like 'someone is typing' in the chat. However what they didn't realize was that there is no way two chefs are in the app in the same time. You can read more about that here: &lt;a href="https://dev.to/rekki/work-in-the-kitchen-4ifm"&gt;https://dev.to/rekki/work-in-the-kitchen-4ifm&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We moved from elixir to go around 1 year ago, it was pretty smooth, we just made few go services and moved endpoints that we needed. We made a super simple k8s deployment infra &lt;code&gt;make build push deploy&lt;/code&gt; and you are good to go.&lt;/p&gt;

&lt;p&gt;This enabled all frontend devs to write go, learn more sql, make simple endpoints for themselves, and change something if they need. All of a sudden each frontend dev became a full stack dev.&lt;/p&gt;

&lt;p&gt;But elixir has so many powerful concepts, the genserver, hot code reloading, concurrency, its functional, phoenix is pretty popular and has great community, so why would we move away from it?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#let-it-fail"&gt;
  &lt;/a&gt;
  Let It Fail
&lt;/h2&gt;

&lt;p&gt;First the "let it fail" thing, look, in our company things end up in a master database, for 99.9% of the things, you open a transaction, write your stuff and close it. &lt;/p&gt;

&lt;p&gt;GenServer is great and all, but honestly for us its completely useless, it requires way too much discipline to not create inconsistencies in the data model, so if you do want to have things fail you have to actually handle the failure of a weak data model.&lt;/p&gt;

&lt;p&gt;Lets look at this example:&lt;/p&gt;

&lt;p&gt;User types "hello" message, this ends up in GenServer that sends it in rabbitmq, RMQ is great piece of software, if somethings goes in it is very unlikely it will disappear, except when there is no memory in one of the nodes because of a bug in another queue that the consumer was not consuming, so now lets examine this "let it fail" thing. &lt;/p&gt;

&lt;p&gt;What exactly can fail?&lt;/p&gt;

&lt;p&gt;Nothing really.. what about we just write the message in the database and return&lt;br&gt;
ok or error to the user?&lt;/p&gt;

&lt;p&gt;We had so many outages because the data model has to be very relaxed in order to support the "let it fail" thing, and so often we ended up with partial data in the database..&lt;/p&gt;

&lt;p&gt;Checkout &lt;a href="https://dev.to/rekki/mutation-is-life-boring-technology-11h0"&gt;https://dev.to/rekki/mutation-is-life-boring-technology-11h0&lt;/a&gt; for example&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#hot-code-reloading"&gt;
  &lt;/a&gt;
  hot code reloading
&lt;/h2&gt;

&lt;p&gt;For me this is complete myth, to build a robust hot code reloading deployment pipeline requires enormous amount of effort. To properly handoff and transform state properly..&lt;/p&gt;

&lt;p&gt;Its ok if you want to replace one module or so, or for some prod debugging.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h2&gt;

&lt;p&gt;Runtime performance wise it is slow, about 2-3 times slower than go, and 4-5 than c, which is OK for most things, unless you want to rank a million items with some semi complicated formula, and at point you will have to scatter gather.&lt;/p&gt;

&lt;p&gt;Compile time.. omg it is horrible, like early rust horrible.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#type-safety"&gt;
  &lt;/a&gt;
  Type Safety
&lt;/h2&gt;

&lt;p&gt;We had to have huge amount of useless tests just to avoid having typos.. typos I repeat. Its like perl without strict. Running the linter is slower than flow. Of course we use typespec and etc, it just has the same problem as flow, things become &lt;code&gt;any&lt;/code&gt; fast, and &lt;code&gt;any&lt;/code&gt; spreads like a virus.&lt;/p&gt;

&lt;p&gt;And worse you cant delete &lt;em&gt;anything&lt;/em&gt;, first the tests will fail, and then even when you fix them you have no confidence your changes are good. Of course typesafe code does not guarantee things are ok, but I have seen elixir bugs that are just pathetic for year 2020.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#reading-and-writing-code"&gt;
  &lt;/a&gt;
  Reading and Writing code
&lt;/h2&gt;

&lt;p&gt;This is personal now, some people like it some dont, I wont make strong argument, for me reading clojure is 10x faster than reading elixir, but I also used clojure more.&lt;/p&gt;

&lt;p&gt;The problem is it has steep learning curve, you cant get a js dev and ask him to change elixir code.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#scale"&gt;
  &lt;/a&gt;
  Scale
&lt;/h2&gt;

&lt;p&gt;Do you really think the issues with our scale will be bound to elixir? Most companies will be fine by using bash+netcat webservers. &lt;/p&gt;

&lt;p&gt;This is a joke obviously nobody should do that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;while true; do 
  echo -ne "HTTP/1.0 200 OK\r\nContent-Length: 5\r\n\r\nhello" | nc -l -p 8080
done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#concurrency"&gt;
  &lt;/a&gt;
  Concurrency
&lt;/h2&gt;

&lt;p&gt;What concurrency? Most languages are ok with that, elixir is no better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding-developers"&gt;
  &lt;/a&gt;
  Finding developers
&lt;/h2&gt;

&lt;p&gt;IDK, now its hard to find any kind of developers, but choosing niche language makes it even harder. Also people join just because of the tech, which is not good.&lt;/p&gt;




&lt;p&gt;So since we wanted to unblock the frontend, and simplify the action-at-a-distance architecture, I had few reasonable choices, go and java amongst the top on the list, and since it is just easier to write ok-ish code in go than in java, I chose go.&lt;/p&gt;

&lt;p&gt;So now we are a go shop, we have 20-30 services, each dev can make their own service and deploy it. &lt;/p&gt;

&lt;p&gt;Things are pretty nice. I can say, after 1 year, it was a &lt;em&gt;huge&lt;/em&gt; enabler and multiplier of people, I don't think we would've done half the things we did have we not switched, and the cost of switching was pretty small.&lt;/p&gt;

&lt;p&gt;Go has its baggage as well.. but at least we can delete it.&lt;/p&gt;

</description>
      <category>go</category>
      <category>elixir</category>
    </item>
    <item>
      <title>How to create server of files with FastAPI</title>
      <author>Nelson Adonis Hernandez</author>
      <pubDate>Fri, 30 Jul 2021 16:09:04 +0000</pubDate>
      <link>https://dev.to/nelsoncode/how-to-create-server-of-files-with-fastapi-47d0</link>
      <guid>https://dev.to/nelsoncode/how-to-create-server-of-files-with-fastapi-47d0</guid>
      <description>&lt;p&gt;In this example I will show you how to upload, download, delete and obtain files with FastAPI&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-upload-files-by-form-data-using-fastapi"&gt;
  &lt;/a&gt;
  How to upload files by Form Data using FastAPI
&lt;/h3&gt;

&lt;p&gt;In the following code we define the file field, it is there where we will receive the file by Form Data&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UploadFile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/upload"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;upload_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UploadFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(...)):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'wb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;JSONResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"filename"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AKP6Qpst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o16hh17wd69m7u9wka8q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AKP6Qpst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o16hh17wd69m7u9wka8q.png" alt="Upload files to fastapi with postman"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-download-files-using-fastapi"&gt;
  &lt;/a&gt;
  How to download files using FastAPI
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;getcwd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi.responses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FileResponse&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/download/{name_file}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FileResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;media_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'application/octet-stream'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-to-get-files-using-fastapi"&gt;
  &lt;/a&gt;
  How to get files using FastAPI
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;getcwd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi.responses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FileResponse&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/file/{name_file}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FileResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-to-delete-files-using-fastapi"&gt;
  &lt;/a&gt;
  How to delete files using FastAPI
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi.responses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JSONResponse&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/delete/file/{name_file}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;JSONResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"removed"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;FileNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;JSONResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"removed"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"error_message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"File not found"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>fastapi</category>
      <category>python</category>
      <category>backend</category>
    </item>
    <item>
      <title>The "new" blunder in JavaScript</title>
      <author>mayankav</author>
      <pubDate>Fri, 30 Jul 2021 16:00:37 +0000</pubDate>
      <link>https://dev.to/mayankav/the-new-blunder-in-javascript-1lee</link>
      <guid>https://dev.to/mayankav/the-new-blunder-in-javascript-1lee</guid>
      <description>&lt;p&gt;No, I am not even talking about why JavaScript tries to replicate classical inheritance. As much as that is an easy target on JavaScript, lets leave that upto anti evangelists. Just pondering over the &lt;strong&gt;"new"&lt;/strong&gt; keyword in isolation is what I aim for right now. &lt;a href="https://codepen.io/mayankav/pen/zYwZOZJ"&gt;Do we know all the possible ways of creating objects in JavaScript&lt;/a&gt;? Assuming that we do, two of the four ways available to us, make use of the &lt;strong&gt;"new"&lt;/strong&gt; operator. The first one being &lt;strong&gt;constructor functions&lt;/strong&gt; and yes you guessed it, &lt;strong&gt;ES6 classes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When I talk of classes, I am somehow driven by my conscience to talk about all the problems classical inheritance brings along but for now I will hold on to the &lt;strong&gt;"new"&lt;/strong&gt; keyword. The question you should ask is, why did we feel the need to have &lt;strong&gt;"new"&lt;/strong&gt;, when we could actually use object literals in the first place? I mean, there must be some benefit of saying &lt;strong&gt;new SomeFunction()&lt;/strong&gt; over your old pal &lt;strong&gt;{ }&lt;/strong&gt;. Make a guess. Did someone say &lt;strong&gt;"creating similar objects"&lt;/strong&gt;? So when you have a class &lt;strong&gt;"YourClass"&lt;/strong&gt; with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields"&gt;class fields&lt;/a&gt; &lt;strong&gt;"x"&lt;/strong&gt; and &lt;strong&gt;"y"&lt;/strong&gt; and then when you say &lt;strong&gt;"new YourClass(1,2)"&lt;/strong&gt;, you're assured that everytime you do a &lt;strong&gt;"new"&lt;/strong&gt; object creation you will get a similar object, right? We can do that using &lt;strong&gt;object concatenation&lt;/strong&gt; or &lt;strong&gt;factory functions&lt;/strong&gt; but alright, not bad. What else? Maybe it also feels way simpler, no? So far so good. Smart people probably won't even talk about classes and constuctor functions, leave alone the &lt;strong&gt;"new"&lt;/strong&gt; operator. &lt;a href="https://medium.com/javascript-scene/common-misconceptions-about-inheritance-in-javascript-d5d9bab29b0a#:~:text=Smart%20people%20will%20do%20whatever%20they%20want."&gt;Smart people will do whatever they want&lt;/a&gt;. I personally don't favor using classes but that only makes sense when everything is under my control. Being a part of some team, that's not always the case. We need to deal with code whether we like it or not. Assuming that the &lt;strong&gt;"new"&lt;/strong&gt; operator makes it intuitive for you specially when you're coming from OOP, can you figure out the difference here?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Fri Jul 30 2021 20:08:55 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Fri Jul 30 2021 20:08:55 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// "Fri Jul 30 2021 20:08:55 GMT+0530 (India Standard Time)"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Is &lt;strong&gt;Date&lt;/strong&gt; a class, a constructor function or a factory function? If you don't know what a &lt;strong&gt;factory function&lt;/strong&gt; is, its just another normal function that returns an object. So, if a function explicitly returns an object and is apparently not a constructor function, you can call it an object factory function. So what do you think Date in JavaScript is? I'll leave that on you to experiment with. If you can't reckon, think of how &lt;strong&gt;"new String()"&lt;/strong&gt; &amp;amp; &lt;strong&gt;"String()"&lt;/strong&gt; behave. The former gives you a new object whereas simply calling &lt;strong&gt;String(..)&lt;/strong&gt; over some primitive does cast the value's type to string. The question is how do you define a function that can be safely called with and without the &lt;strong&gt;"new"&lt;/strong&gt; operator? A factory function returns you the same object irrespective of whether you call it with or without a &lt;strong&gt;"new"&lt;/strong&gt; operator. A constructor function on the other hand unless and until called with a &lt;strong&gt;"new"&lt;/strong&gt; prefix returns undefined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;factoryFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ConstructorFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;factoryFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// {x:1, y:2}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;factoryFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// {x:1, y:2}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ConstructorFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ConstructorFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// {x:1, y:2}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;center&gt;&lt;h6&gt;&lt;a href="https://codepen.io/mayankav/pen/VwbxmEY"&gt;Try on Codepen&lt;/a&gt;&lt;/h6&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;Now, I am kind of more interested in the &lt;strong&gt;constructor function&lt;/strong&gt;. Notice that when you simply call your constructor function without the &lt;strong&gt;"new"&lt;/strong&gt; keyword, it returns undefined? Visibly so because there's nothing to return. Interestingly, unless you're in strict mode, you've now also created properties &lt;strong&gt;"x"&lt;/strong&gt; and &lt;strong&gt;"y"&lt;/strong&gt; on the global object. I understand, there's hardly someone in the wild who'd instantiate a constructor function without &lt;strong&gt;"new"&lt;/strong&gt;. Anyway, we know how a constructor function otherwise implicitly returns "this" (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new#:~:text=Creates%20a%20blank%2C%20plain%20JavaScript%20object."&gt;an anonymous object created using the "new" keyword&lt;/a&gt;). What if I put a blunt &lt;strong&gt;return statement&lt;/strong&gt; right inside the constuctor function? Take a look.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ConstructorFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a blunder&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;AnotherConstructorFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;not a blunder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ConstructorFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// "a blunder"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AnotherConstructorFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// {x:1, y:2}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;center&gt;&lt;h6&gt;&lt;a href="https://codepen.io/mayankav/pen/WNjJRNz"&gt;Try on Codepen&lt;/a&gt;&lt;/h6&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;Uncannily, if you return an object or an array, it seems to block the implicit nature of the constructor function that returns the &lt;strong&gt;"this"&lt;/strong&gt; object, upon being instantiated with the &lt;strong&gt;"new"&lt;/strong&gt; operator whereas returning an atomic string makes no difference as such. How do you think it is possible to make a constructor function work safe without the &lt;strong&gt;"new"&lt;/strong&gt; operator? Why would you even want to do that? Well, you may have your own reasons, I just want to prevent the users of my constructor function from mistakenly trying to invoke it without the &lt;strong&gt;"new"&lt;/strong&gt; operator. I know you can simply use an ES6 class but for some reason I want to stick to the old functions style and yes I am not using the strict mode as well. Strict mode inside the function can alert you from creating implicit globals.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;StrictConstructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;StrictConstructor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;StrictConstructor should only be instantiated with 'new' operator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;StrictConstructor&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// {x:1, y:2}&lt;/span&gt;
&lt;span class="nx"&gt;StrictConstructor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;center&gt;&lt;h6&gt;&lt;a href="https://codepen.io/mayankav/pen/xxdWoxx"&gt;Try on Codepen&lt;/a&gt;&lt;/h6&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;So the conditional filter we used to throw the error depends on how the &lt;strong&gt;"new"&lt;/strong&gt; operator creates a new object and assigns it a constructor under the hood. If you want to get deep into this you should definitely go check out the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new#:~:text=Creates%20a%20blank%2C%20plain%20JavaScript%20object."&gt;MDN reference&lt;/a&gt; and then &lt;a href="https://dev.to/mayankav/javascript-inside-story-more-about-prototypes-and-inheritance-3a9l"&gt;my last blog post&lt;/a&gt;. As a matter of fact, instead of throwing an error you can even return an object to eliminate the need of calling the function using &lt;strong&gt;"new"&lt;/strong&gt; like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;StrictConstructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;StrictConstructor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;StrictConstructor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;StrictConstructor&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// {x:1, y:2}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;StrictConstructor&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// {x:1, y:2}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;For a while, if you forget about JavaScript, its not very intuitive to instantiate functions with the &lt;strong&gt;"new"&lt;/strong&gt; operator. Probably that's why we name our constructor functions in &lt;a href=""&gt;PascalCase&lt;/a&gt;. Due to the fact that the &lt;strong&gt;"new"&lt;/strong&gt; operator and constructor functions may behave eerie at times (specially when you forget the &lt;strong&gt;"new"&lt;/strong&gt; operator), you can choose a combination of options from the available list to keep your code safe from surprises.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An ES6 class shall help you spot when someone forgets the &lt;strong&gt;"new"&lt;/strong&gt; keyword, by throwing an error&lt;/li&gt;
&lt;li&gt;Following the convention of naming constructor functions in Pascal.&lt;/li&gt;
&lt;li&gt;Placing a check within your constructor function to either throw an error on skipping the &lt;strong&gt;"new"&lt;/strong&gt; operator or to silently fix the implicit behavior of the constructor function.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#originally-posted-here-"&gt;
  &lt;/a&gt;
  Originally Posted Here -
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mayankav.webflow.io/blog/the-new-blunder-in-javascript"&gt;https://mayankav.webflow.io/blog/the-new-blunder-in-javascript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Introducing the social image generator</title>
      <author>Siddharth</author>
      <pubDate>Fri, 30 Jul 2021 15:42:49 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/introducing-the-social-image-generator-bbp</link>
      <guid>https://dev.to/siddharthshyniben/introducing-the-social-image-generator-bbp</guid>
      <description>&lt;p&gt;Creating social images are a pain. I barely add any (just look through my posts and you'll know). But now, you can easily generate social sharing images using my &lt;a href="https://github.com/SiddharthShyniben/social-image-generator"&gt;generator&lt;/a&gt;. It's not a generator yet, more like a HTML generator where you screenshot the page.&lt;/p&gt;

&lt;p&gt;Wanna know how it looks? Check the social image of this post up ^ there. It supports tags, text, images, captions, and more to come soon!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>writing</category>
    </item>
    <item>
      <title>The Engineering Executive Operating System ‚Äî Part 2 </title>
      <author>Conor Bronsdon</author>
      <pubDate>Fri, 30 Jul 2021 15:39:56 +0000</pubDate>
      <link>https://dev.to/linearb/the-engineering-executive-operating-system-part-2-2heg</link>
      <guid>https://dev.to/linearb/the-engineering-executive-operating-system-part-2-2heg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-engineering-executive-operating-system-part-2"&gt;
  &lt;/a&gt;
  The Engineering Executive Operating System ‚Äî Part 2
&lt;/h2&gt;

&lt;p&gt;Today on the &lt;a href="https://devinterrupted.com/podcast/the-engineering-executive-operating-system-part-2"&gt;Dev Interrupted&lt;/a&gt;, we premiere the second and final episode in our two-part series with Tech Executive Consultant and author, Aviv Ben-Yosef.&lt;/p&gt;

&lt;p&gt;If you haven‚Äôt listened to the first episode, we highly recommend checking it out. Aviv is an expert at onboarding new employees, particularly those joining leadership positions.&lt;/p&gt;

&lt;p&gt;In episode 2 we discuss how leadership can provide a workplace culture where employees are encouraged to speak up and question leadership decisions as well as how to create high impact R&amp;amp;D organizations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://avivbenyosef.com/tech-executive-operating-system/"&gt;Get a sample chapter of Aviv‚Äôs book here.&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/6MrAOnueZ07n4KdjnXDx8M"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-2-highlights-include"&gt;
  &lt;/a&gt;
  Part 2 Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Each member of a team becoming a force multiplier&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;‚ÄúChutzpah driven development‚Äù&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to have candid discussions between leadership and employees&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Providing a culture where employees can tell leadership they are wrong&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating high-impact R&amp;amp;D organizations and teams&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/H_oyLCAX2qw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-server"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Server
&lt;/h2&gt;

&lt;p&gt;With over 1400 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.com/invite/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NISG-j8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2878/1%2ABAy13fLk6AB3z5sJNtmP4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NISG-j8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2878/1%2ABAy13fLk6AB3z5sJNtmP4g.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://devinterrupted.com/podcast/the-engineering-executive-operating-system-part-2"&gt;https://devinterrupted.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>management</category>
      <category>leadership</category>
      <category>devops</category>
      <category>agile</category>
    </item>
    <item>
      <title>Run a TypeScript type check in your pre-commit hook using lint-staged + husky</title>
      <author>Sam Jones</author>
      <pubDate>Fri, 30 Jul 2021 15:34:51 +0000</pubDate>
      <link>https://dev.to/samueldjones/run-a-typescript-type-check-in-your-pre-commit-hook-using-lint-staged-husky-30id</link>
      <guid>https://dev.to/samueldjones/run-a-typescript-type-check-in-your-pre-commit-hook-using-lint-staged-husky-30id</guid>
      <description>&lt;p&gt;A great way to prevent TypeScript compilation errors from bringing down your CI pipelines is to introduce a type check &lt;em&gt;before&lt;/em&gt; you commit your &lt;code&gt;.ts&lt;/code&gt; file changes. &lt;/p&gt;

&lt;p&gt;If you've worked with Git Hooks before, you'll probably know that one of the best combinations for running pre-commit checks is &lt;a href="https://typicode.github.io/husky/#/"&gt;husky&lt;/a&gt; and &lt;a href="https://github.com/okonet/lint-staged"&gt;lint-staged&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Together, these two packages allow you to tap into the relevant Git hook and run commands such as linting on &lt;em&gt;staged files only&lt;/em&gt;. It saves a bunch of debugging time by fixing preventable errors sooner in the development process.&lt;/p&gt;

&lt;p&gt;As a separate step, if you want to check for TypeScript type errors (note: this is different to syntax errors which ESLint picks up and fixes for you), you would typically run a command in the CLI such as &lt;code&gt;npx tsc --noEmit&lt;/code&gt; to compile the TypeScript and highlight any type errors to address.&lt;/p&gt;

&lt;p&gt;Now, the best case scenario here is that you simply pop the above TypeScript command into your lint-staged config along with anything else e.g. ESLint, and you're good to go! &lt;/p&gt;

&lt;p&gt;Oh no, it doesn't quite work as expected. The error message that you may come across looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Option 'project' cannot be mixed with source files on a command line.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The issue I found - and at the time of writing, &lt;a href="https://github.com/microsoft/TypeScript/issues/27379#issuecomment-425245572"&gt;it is still being discussed&lt;/a&gt; - is that lint-staged would pass each staged file to the &lt;code&gt;npx tsc&lt;/code&gt; command like &lt;code&gt;npx tsc --noEmit file1.ts file2.ts&lt;/code&gt; and that causes TypeScript to simply ignore your &lt;code&gt;tsconfig.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Super frustrating!&lt;/p&gt;

&lt;p&gt;Fear not however, as there is an extremely helpful tool that runs &lt;code&gt;tsc&lt;/code&gt; on specific files &lt;em&gt;without&lt;/em&gt; ignoring tsconfig.json and it's called &lt;a href="https://www.npmjs.com/package/tsc-files"&gt;tsc-files&lt;/a&gt;. As the tool's author points out:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I wanted to type-check only the staged files with lint-staged.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Perfect for my use case. So, after a quick look at the docs, it was as simple as updating the lint-staged config in my &lt;code&gt;package.json&lt;/code&gt; file to use the &lt;code&gt;tsc-files&lt;/code&gt; package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "husky": {
    "pre-commit": "lint-staged"
  },
  "lint-staged": {
    "**/*.ts": "tsc-files --noEmit"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Now I am able to run a TypeScript type check on all my staged files using a pre-commit hook.&lt;/p&gt;

&lt;p&gt;Tip: use the &lt;code&gt;--pretty&lt;/code&gt; flag in the &lt;code&gt;tsc&lt;/code&gt; command to add some formatting and colour to your type errors.&lt;/p&gt;

&lt;p&gt;If you have any questions on this setup or have tried different approaches, feel free to comment below or start up a convo over on &lt;a href="https://twitter.com/samueldjones"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading üëã &lt;/p&gt;

</description>
      <category>typescript</category>
      <category>webdev</category>
      <category>git</category>
    </item>
    <item>
      <title>What are the key fundamental skills to learn to become a Backend Engineer? Check out this Youtube Channel </title>
      <author>Anthony BeckfordüöÄ</author>
      <pubDate>Fri, 30 Jul 2021 15:29:00 +0000</pubDate>
      <link>https://dev.to/abeck617/what-are-the-key-fundamental-skills-to-learn-to-become-a-backend-engineer-check-out-this-youtube-channel-4obp</link>
      <guid>https://dev.to/abeck617/what-are-the-key-fundamental-skills-to-learn-to-become-a-backend-engineer-check-out-this-youtube-channel-4obp</guid>
      <description>&lt;p&gt;I have decided to start a blog series on the skills to learn to become a backend engineer. I have started out as a front-end engineer but looking to expand my skills to learn more about backend engineering&lt;/p&gt;

&lt;p&gt;I found this awesome YouTube channel called Hussein Nasser and he talks about different topics regarding backend engineering. In the video that I have watched (&lt;a href="https://www.youtube.com/watch?v=V3ZPPPKEipA&amp;amp;list=PLQnljOFTspQUNnO4p00ua_C5mKTfldiYT&amp;amp;index=1"&gt;https://www.youtube.com/watch?v=V3ZPPPKEipA&amp;amp;list=PLQnljOFTspQUNnO4p00ua_C5mKTfldiYT&amp;amp;index=1&lt;/a&gt;) he mentions some skills to learn for backend engineering. Here are some things he mentioned:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Communication Protocols: Learning the basics of the communication protocols (low level) ex. TCP and UDP to higher level (HTTP), Web Sockets&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web Servers: Have the ability to serve content (Static, Caching, Dynamic). Learn the types of web servers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Database Engineering: Relational &amp;amp; Non-Relational Databases&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Proxies: Reverse Proxies, Load balances (Huge Potential)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Caching: Caching Layers, Statefull vs Stateless Caching&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Messaging Systems: Message queue, Pub/Sub &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web API Frameworks: (Node.JS, Django, Express)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Message Formats: JSON &amp;amp; protobuf &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Security: TLS, Encryption, Firewalls &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Most important thing to take away is that you aren't going to be an expert at everything. Pick a few topics and dive deep into it.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Unboxing a Database-How Databases Work Internally</title>
      <author>Elegberun Olugbenga</author>
      <pubDate>Fri, 30 Jul 2021 15:23:53 +0000</pubDate>
      <link>https://dev.to/gbengelebs/unboxing-a-database-how-databases-work-internally-155h</link>
      <guid>https://dev.to/gbengelebs/unboxing-a-database-how-databases-work-internally-155h</guid>
      <description>&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@nuvaproductions?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Javier Miranda&lt;/a&gt; on &lt;a href="https://unsplash.com/@nuvaproductions?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Databases are one of those abstract, mysterious things that "just work" when you run an insert statement, where's the data stored?. How is it stored? Why are queries so fast? What's underneath the black box of a database? Sometimes it all just feels like magic. &lt;/p&gt;

&lt;p&gt;It's 1 am in Lagos and I can't sleep. I pick up my phone and head to Google to help me demystify this black box. The next words you read are my attempt to unbox a database.&lt;/p&gt;

&lt;p&gt;My focus on this article will be on SQL databases but I believe the underlying concepts can be passed to other types of databases. Before we go on let us define some terms.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h2&gt;

&lt;p&gt;A database is a set of physical files(data) on a hard disk stored and accessed electronically from a computer system. Usually created by the &lt;strong&gt;CREATE DATABASE&lt;/strong&gt; statement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#database-management-system"&gt;
  &lt;/a&gt;
  Database management system
&lt;/h2&gt;

&lt;p&gt;A database management system is software that handles the storage, retrieval, and updating of data in a computer system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DQwsHzn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86sxwxawaoacafgf470t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DQwsHzn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86sxwxawaoacafgf470t.png" alt="dbms"&gt;&lt;/a&gt;&lt;/p&gt;
Popular database management systems



&lt;h2&gt;
  &lt;a href="#database-engine"&gt;
  &lt;/a&gt;
  Database engine
&lt;/h2&gt;

&lt;p&gt;A database engine is the underlying software component that a database management system uses to create, read, update and delete data from a database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-difference-between-a-database-management-system-and-a-database-engine"&gt;
  &lt;/a&gt;
  What is the difference between a database management system and a database engine?
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;database management&lt;/strong&gt; system is the software with its functions that allow us to connect to a &lt;strong&gt;database engine&lt;/strong&gt;. The database engines are the internal tools that allow or facilitate a certain number of operations on the tables and their data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-a-database-management-system-store-data"&gt;
  &lt;/a&gt;
  How does a database management system store data?
&lt;/h2&gt;

&lt;p&gt;Most database management systems store data in files. MySQL for example stores data in files in a specific directory that has the system variable "datadir". Opening a MySQL console and running the following command will tell you exactly where the folder is located.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql&amp;gt;  SHOW VARIABLES LIKE 'datadir';
+---------------+-----------------+
| Variable_name | Value           |
+---------------+-----------------+
| datadir       | /var/lib/mysql/ |
+---------------+-----------------+
1 row in set (0.01 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;a href="https://stackoverflow.com/questions/10378693/how-does-mysql-store-data"&gt;stack overflow answer&lt;/a&gt; explains it really well.&lt;/p&gt;

&lt;p&gt;As you can see from the above command, my "datadir" was located in /var/lib/mysql/. The location of the "datadir" may vary in different systems. The directory contains folders and some configuration files. Each folder represents a MySQL database and contains files with data for that specific database, below is a screenshot of the "datadir" directory in my system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GG5qdLFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otqaz8lnxwoz2dajmdr7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GG5qdLFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otqaz8lnxwoz2dajmdr7.png" alt="mysql"&gt;&lt;/a&gt;&lt;/p&gt;
a data dir folder in a system



&lt;p&gt;Each folder in the directory represents a MySQL database. Each database folder contains files that represent the tables in that database. There are two files for each table, one with a .frm extension and the other with a .idb extension. See the screenshot below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YLFdTIy0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4m1q0u99tt8rezjjcq9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YLFdTIy0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4m1q0u99tt8rezjjcq9.png" alt="mysql2"&gt;&lt;/a&gt;&lt;/p&gt;
Files in a database folder



&lt;ul&gt;
&lt;li&gt;The .frm table file stores the table's format. &lt;a href="https://dev.mysql.com/doc/internals/en/frm-file-format.html"&gt;Details: MySQL .frm File Format&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;The .ibd file stores the table's data. &lt;a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-multiple-tablespaces.html"&gt;Details: InnoDB File-Per-Table Tablespaces&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we insert a record into a table we are actually inserting into a datafile. A page (representing the rows of the table)is created in that datafile. By default, all datafiles have a page size of 16KB, you can reduce or increase the page size depending on the database engine you are using.&lt;/p&gt;

&lt;p&gt;As more and more records are inserted into the table(datafile) several data pages are created.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-pages-relate-to-table-rows"&gt;
  &lt;/a&gt;
  How Pages Relate to Table Rows
&lt;/h2&gt;

&lt;p&gt;The maximum row length is slightly less than half a database page. For example, the maximum row length is slightly less than 8KB for the default 16KB InnoDB page size. For 64KB pages, the maximum row length is slightly less than 16KB.&lt;/p&gt;

&lt;p&gt;If a row does not exceed the maximum row length, all of its data is stored locally within the page. If a row exceeds the maximum row length the database engine stores a 20-byte pointer to the next page locally in the row, and stores the remaining rows externally in overflow pages.&lt;/p&gt;

&lt;p&gt;These two articles do a wonderful job of describing how data pages look in sql server. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.c-sharpcorner.com/UploadFile/ff0d0f/how-sql-server-stores-data-in-data-pages-part-1/"&gt;how-sql-server-stores-data-in-data-pages-part1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.c-sharpcorner.com/UploadFile/ff0d0f/how-sql-server-stores-data-in-data-pages-part-2/"&gt;how-sql-server-stores-data-in-data-pages-part2&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let us assume we have a table(tblEmployees) and we insert a single record into it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;INSERT&lt;/span&gt; &lt;span class="n"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;tblEmployees&lt;/span&gt; &lt;span class="nf"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;Abhishek&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a sample data page of that insertion into the datafile. It is divided into 3 main sections&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#section-1page-header"&gt;
  &lt;/a&gt;
  Section 1:Page Header
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9A7BQTjP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2hmh4p65rcqnj85epihc.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9A7BQTjP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2hmh4p65rcqnj85epihc.jpeg" alt="page-header"&gt;&lt;/a&gt;&lt;/p&gt;
Page Header



&lt;ul&gt;
&lt;li&gt;m_type =1 indicates that it is a data page.&lt;/li&gt;
&lt;li&gt;m_nextpage: This is the link to the memory location of the next data page that will be created, in this case, we have a single data page so it is(0:0).&lt;/li&gt;
&lt;li&gt;m_Prevpage: This is the link to the memory location of the previous data page. Since we have a single data page the value is(0:0). &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#section-2actual-data"&gt;
  &lt;/a&gt;
  Section 2:Actual Data
&lt;/h3&gt;

&lt;p&gt;The actual data that we insert into our table is stored in this section. If you remember, we inserted 1 record with an employee named "Abhishek". That record will be saved here, in this section as shown below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NmcIdo9R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnmrbzwtu5xun058tv07.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NmcIdo9R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnmrbzwtu5xun058tv07.jpeg" alt="actual-data"&gt;&lt;/a&gt;&lt;/p&gt;
Actual Data



&lt;ul&gt;
&lt;li&gt;Record Type = PRIMARY_RECORD, which means it's our actual data.&lt;/li&gt;
&lt;li&gt;Memory Dump = This points to the Actual data's location in memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#section-3offset-table"&gt;
  &lt;/a&gt;
  Section 3:Offset Table
&lt;/h3&gt;

&lt;p&gt;Offset Table: This section of the data file tells you where the record Abhishek is saved exactly in memory.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JFNYUJE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxp7ska6onsxbztdwvw2.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JFNYUJE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxp7ska6onsxbztdwvw2.jpeg" alt="offset-table"&gt;&lt;/a&gt;&lt;/p&gt;
Offset Table



&lt;p&gt;If you see the row offset, it's pointing to the actual data's location.&lt;/p&gt;

&lt;p&gt;These diagrams show how rows are stored in a  datafile.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-does-indexing-work"&gt;
  &lt;/a&gt;
  How does indexing work?
&lt;/h2&gt;

&lt;p&gt;A database index is a data structure that improves the speed of data retrieval operations on a database table.&lt;/p&gt;

&lt;p&gt;Indexing is the way to get an unordered table into an order that will maximize the query efficiency. A Clustered Index is a special type of index that reorders the way records in the table are physically stored on the disk. So how does it work?&lt;/p&gt;

&lt;p&gt;In reality, the database table does not reorder itself every time the query conditions change to optimize the query performance, what happens is that when you create an index you cause the database to create a data structure which in most cases is likely to be a B+Tree. The main advantage of this data structure is that it is sortable and this makes our search more efficient.&lt;/p&gt;

&lt;p&gt;A B+Tree is a type of dictionary, no more and no less. If you think about a linguistic dictionary, it's ordered by "words", and associated with each word is a definition. You look up a word and get a definition.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IaHANN8P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yrqlqco1psk4ex01zpi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IaHANN8P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yrqlqco1psk4ex01zpi.jpg" alt="Indexed Dictionary"&gt;&lt;/a&gt;&lt;/p&gt;
An Indexed Dictionary



&lt;p&gt;So the context of a map data structure is that you have keys ("words") and you want to map this to values ("definitions").&lt;/p&gt;

&lt;p&gt;B+trees have an advantage for certain types of queries. For example, you can do range queries, say if you want to find all entries where the key is between two values (e.g. all words in the dictionary starting with "q").&lt;/p&gt;

&lt;p&gt;B+trees are page-structured (meaning they can be implemented on top of fixed-size disk pages; which minimizes the number of disk accesses needed to perform a query.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;Let us assume we have a table called Employee_Detail. We can create a clustered index with the following command on the Emp_Iid column.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Create Clustered Index My_ClusteredIndex  
on Employee_Detail(Emp_Iid) 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's insert some records&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Head over to this &lt;a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html"&gt;site&lt;/a&gt; and insert records from 1 to 6 simulating how records will be inserted in a database. You will see how the tree automatically adjusts as records are being inserted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Another thing to note the data value locations never change but the (pointers to those values are the ones that are constantly shifting).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The B+Tree will be formed like this. - The center point of the records which in our case is 3 will be the head node. All the Ids that are lower than 3 will be moved to the left and the Ids greater than 3 to the right as shown in this diagram.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WOOzUrI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8ahdte53ai5d1vshxwv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WOOzUrI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8ahdte53ai5d1vshxwv.png" alt="btree"&gt;&lt;/a&gt;&lt;/p&gt;
BTree Visualized



&lt;p&gt;The left side value of each node is always less than the node itself and the right-side value is always greater than the node. The last set of values are called leaf nodes and they contain the actual data value while the intermediate rows hold pointers to the actual data value location.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Think of it like a dictionary that contains a name tag. All the words with "c" are labeled under the "c" tag. words higher than "c" are shifted to the right and words lower than "c" to the left. The tag "c" does not contain the value but a (pointer) to the actual words&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;From the earlier explanation on how SQL stores data in data pages we can infer that the leaf nodes represent data pages containing the table rows. &lt;/p&gt;

&lt;p&gt;If we want to get the employees where Emp_Iid is 4.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;select * from employee_Detail where Emp_Iid=4  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In a normal case, the system will perform 4 comparisons, the first for 1, the second for 2, and the third for 3  and in the fourth comparison, it will find the desired result.&lt;/p&gt;

&lt;p&gt;Using an index, the system only does a single comparison because 3 is the head node of the B+Tree and it knows that 4 is greater than 3 so the record will be on the right. Once it checks the next key It will find a pointer to the data value 4 which is the value that is being requested.&lt;/p&gt;

&lt;p&gt;From this example, we can say that by using an index we can increase the speed of data retrieval.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#components-of-a-database-engine"&gt;
  &lt;/a&gt;
  Components of a Database Engine
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eveqe-In--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0wqk2vpxfvi7br0dvce.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eveqe-In--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0wqk2vpxfvi7br0dvce.png" alt="database-engine"&gt;&lt;/a&gt;&lt;/p&gt;
Components of a database engine



&lt;p&gt;All SQL database engines have a compiler to translate the SQL statement into byte code and a virtual machine to evaluate the byte code. &lt;/p&gt;

&lt;p&gt;The RDBMS processes the SQL statement by:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.Parsing&lt;/strong&gt;: Validates the statement by checking the SQL statement against the system‚Äôs catalog and seeing if these databases, tables, and columns that the user wants exist, and if the user has privileges to execute the SQL query.&lt;br&gt;
Under the parsing stage, there is a syntax check, semantic check, and shared pool check.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#syntax-check"&gt;
  &lt;/a&gt;
  Syntax check
&lt;/h3&gt;

&lt;p&gt;A statement that breaks a rule for well-formed SQL syntax fails the check. For example, the following statement fails because the keyword FROM is misspelled as FORM:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SQL&amp;gt; SELECT * FORM employees;
SELECT * FORM employees
         *
ERROR at line 1:
ORA-00923: FROM keyword not found where expected
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#semantic-check"&gt;
  &lt;/a&gt;
  Semantic Check
&lt;/h3&gt;

&lt;p&gt;The semantics of a statement is its meaning. A semantic check determines whether a statement is meaningful, for example, whether the objects and columns in the statement exist.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SQL&amp;gt; SELECT * FROM nonexistent_table;
SELECT * FROM nonexistent_table
              *
ERROR at line 1:
ORA-00942: table or view does not exist

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#shared-pool-check"&gt;
  &lt;/a&gt;
  Shared Pool Check
&lt;/h3&gt;

&lt;p&gt;During the parse, the database performs a shared pool check to determine whether it can skip resource-intensive steps of statement processing.&lt;/p&gt;

&lt;p&gt;To this end, the database uses a hashing algorithm to generate a hash value for every SQL statement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.Compiling (Binding)&lt;/strong&gt;: Generates a query plan for the statement which is the binary representation of the steps required to carry out the statement. In almost all SQL engines, it will be byte code. What has now been compiled is a command-line shell ‚Äî a program that reads SQL statements and now sends them to the database server for optimization and execution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.Optimizing&lt;/strong&gt;: Optimizes the query plan and chooses the best algorithms such as for searching and sorting. This feature is called the Query Optimizer. The Query Optimizer devises several possible ways to execute the query i.e. several possible execution plans. An execution plan is, in essence, a set of physical operations (an index seek, a nested loop join, and so on) to be performed.&lt;br&gt;
Once this is done, we now have a prepared SQL statement.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;This example shows the execution plan of a SELECT statement when AUTOTRACE is enabled. The statement selects the last name, job title, and department name for all employees whose last names begin with the letter A.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT e.last_name, j.job_title, d.department_name 
FROM   hr.employees e, hr.departments d, hr.jobs j
WHERE  e.department_id = d.department_id
AND    e.job_id = j.job_id
AND    e.last_name LIKE 'A%';

Execution Plan
----------------------------------------------------------
Plan hash value: 975837011

--------------------------------------------------------------------------------
| Id| Operation                     | Name        |Rows|Bytes|Cost(%CPU)|Time  |
-------------------------------------------------------------------------------------
| 0 | SELECT STATEMENT              |             |  3 | 189 | 7(15)| 00:00:01 |
|*1 |  HASH JOIN                    |             |  3 | 189 | 7(15)| 00:00:01 |
|*2 |   HASH JOIN                   |             |  3 | 141 | 5(20)| 00:00:01 |
| 3 |    TABLE ACCESS BY INDEX ROWID| EMPLOYEES   |  3 |  60 | 2 (0)| 00:00:01 |
|*4 |     INDEX RANGE SCAN          | EMP_NAME_IX |  3 |     | 1 (0)| 00:00:01 |
| 5 |    TABLE ACCESS FULL          | JOBS        | 19 | 513 | 2 (0)| 00:00:01 |
| 6 |   TABLE ACCESS FULL           | DEPARTMENTS | 27 | 432 | 2 (0)| 00:00:01 |
-------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
--------------------------------------------------------

   1 - access("E"."DEPARTMENT_ID"="D"."DEPARTMENT_ID")
   2 - access("E"."JOB_ID"="J"."JOB_ID")
   4 - access("E"."LAST_NAME" LIKE 'A%')
       filter("E"."LAST_NAME" LIKE 'A%')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4.Executing&lt;/strong&gt;: The RDBMS executes the SQL statement by running the query plan.&lt;/p&gt;

&lt;p&gt;For an in-depth view, check out this &lt;a href="https://docs.oracle.com/database/121/TGSQL/tgsql_sqlproc.htm#TGSQL186"&gt;tutorial&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;This article has covered a lot of ground, but by now you should have an understanding (or at least an appreciation) of the components and processes that form the databases we use every day.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

&lt;p&gt;Follow me here and across my social media for more content like this &lt;a href="https://www.linkedin.com/in/olugbenga-elegberun/"&gt;Linkedin&lt;/a&gt;. &lt;a href="https://twitter.com/ElegberunDaniel?s=09"&gt;Twitter&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references-and-more"&gt;
  &lt;/a&gt;
  REFERENCES AND MORE
&lt;/h2&gt;

&lt;p&gt;1.&lt;a href="https://blog.devgenius.io/how-a-sql-database-engine-works-c319200889d7"&gt;How a sql database engine works by Andres reyes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href="https://medium.com/@grepdennis/how-a-sql-database-engine-works-c67364e5cdfd"&gt;How a sql database engine works by Dennis Pham&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href="https://www.red-gate.com/simple-talk/databases/sql-server/performance-sql-server/the-sql-server-query-optimizer/"&gt;The sql server query optimizer by Benjamin Nevarez&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href="https://www.freecodecamp.org/news/database-indexing-at-a-glance-bb50809d48bd/"&gt;An in-depth look at Database Indexing by Kousik Nath&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;a href="https://dzone.com/articles/database-btree-indexing-in-sqlite"&gt;Database btree indexing in sqlite by Dhanushka Madushan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6.&lt;a href="https://www.sqlskills.com/blogs/paul/inside-the-storage-engine-using-dbcc-page-and-dbcc-ind-to-find-out-if-page-splits-ever-roll-back/"&gt;Inside the storage engine by Paul Randal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;7.&lt;a href="https://cs.stackexchange.com/questions/27985/b-tree-and-how-it-is-used-in-practice"&gt;B-tree and how it is used in practice answered by Pseudonym&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;8.&lt;a href="https://www.c-sharpcorner.com/UploadFile/f0b2ed/index-in-sql/"&gt;Index in sql by Pankaj Kumar Choudhary&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;9.&lt;a href="https://www.c-sharpcorner.com/UploadFile/ff0d0f/how-sql-server-stores-data-in-data-pages-part-1/"&gt;How sql server stores data in data pages part 1 by Abhishek Yadav&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;10.&lt;a href="https://www.c-sharpcorner.com/UploadFile/ff0d0f/how-sql-server-stores-data-in-data-pages-part-2/"&gt;How sql server stores data in data pages part 2 by Abhishek Yadav&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;11.&lt;a href="https://docs.oracle.com/database/121/TGSQL/tgsql_sqlproc.htm#TGSQL186"&gt;SQL Processing by Oracle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;12.&lt;a href="https://stackoverflow.com/questions/2468202/how-does-a-sql-query-work"&gt;How does a sql query work by &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;13.&lt;a href="https://hackernoon.com/how-sql-database-engine-work-483e32o7"&gt;How sql database engine works by Vijay Singh Khatri&lt;/a&gt;&lt;/p&gt;

</description>
      <category>database</category>
      <category>bigdata</category>
      <category>distributedsystems</category>
    </item>
  </channel>
</rss>
