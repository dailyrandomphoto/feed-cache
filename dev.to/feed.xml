<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Beginner JavaScript - 1 - The Language and How Web Works ? </title>
      <author>The Nerdy Dev</author>
      <pubDate>Sat, 19 Jun 2021 05:36:26 +0000</pubDate>
      <link>https://dev.to/thenerdydev/beginner-javascript-1-the-language-and-how-web-works-2mgl</link>
      <guid>https://dev.to/thenerdydev/beginner-javascript-1-the-language-and-how-web-works-2mgl</guid>
      <description>&lt;p&gt;Hey everyone üëãüèª,&lt;/p&gt;

&lt;p&gt;In this article, let us discuss about the JavaScript Language and How the Web Works. This is the first part of my &lt;strong&gt;Beginner JavaScript Series&lt;/strong&gt; on Dev.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-language-and-how-the-web-works"&gt;
  &lt;/a&gt;
  The Language and How the Web Works
&lt;/h2&gt;

&lt;p&gt;JavaScript is a powerful, event-driven, dynamic and flexible programming language. It can execute on a web browser that allows us to make interactive webpages such as popup menus, animations, form validation. &lt;/p&gt;

&lt;p&gt;So the moment you enter the URL address in your browser and hit ENTER, some things happen under the hood. Let us understand them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ViQSNeo_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vljl45v92zxl5hi3lfpr.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ViQSNeo_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vljl45v92zxl5hi3lfpr.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first thing that happens is the resolution of the URL. &lt;/li&gt;
&lt;li&gt;An HTTP request is sent to the server of the website. &lt;/li&gt;
&lt;li&gt;The response of the server is then parsed. &lt;/li&gt;
&lt;li&gt;Finally the page is rendered and then displayed. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Check this video where I explain the Language and How the Web Works: &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qubTwfgGUzU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So this was it for the first article of the Beginner article series. Stay tuned for the next one. &lt;/p&gt;

&lt;p&gt;If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Apr 28 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Spare 2 Hours ?  If so, utilize them by creating these &lt;strong&gt;10 JavaScript Projects in under 2 Hours&lt;/strong&gt; &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/10-javascript-projects-in-2-hours-3p1c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 JavaScript Projects in 2 Hours&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Oct 26 '20 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;üëâüèª Follow me on Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;üëâüèª Check out my YouTube Channel : &lt;a href="https://youtube.com/thenerdydev"&gt;https://youtube.com/thenerdydev&lt;/a&gt; &lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 Best Big Data Frameworks You Can Learn in 2021</title>
      <author>javinpaul</author>
      <pubDate>Sat, 19 Jun 2021 05:34:28 +0000</pubDate>
      <link>https://dev.to/javinpaul/5-best-big-data-frameworks-you-can-learn-in-2021-5b48</link>
      <guid>https://dev.to/javinpaul/5-best-big-data-frameworks-you-can-learn-in-2021-5b48</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hello guys, if one of your goals is to &lt;strong&gt;learn Big data in 2021&lt;/strong&gt; but you are not sure where to start and which Big Data framework to learn then you have come to the right place. Earlier, I have shared the &lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-big-data-and-hadoop-best-of-lot-23ef8691633f"&gt;best Big Data online courses&lt;/a&gt;, and today, I am going to share the &lt;em&gt;5 best Big Data Frameworks&lt;/em&gt; which you can learn in 2021.&lt;/p&gt;

&lt;p&gt;Given the ever-increasing abundance of data, Big Data Analysis is a very hot and valuable skill nowadays.&lt;/p&gt;

&lt;p&gt;Both Fortune 500 and small companies are looking for competent people who can derive useful insight from their huge pile of data and that's where Big Data Framework like &lt;a href="https://hadoop.apache.org/"&gt;Apache Hadoop&lt;/a&gt;, &lt;a href="https://spark.apache.org/"&gt;Apache Spark&lt;/a&gt;, &lt;a href="https://flink.apache.org/"&gt;Flink&lt;/a&gt;, &lt;a href="https://storm.apache.org/"&gt;Storm&lt;/a&gt;, and &lt;a href="https://hive.apache.org/"&gt;Hive&lt;/a&gt; can help.&lt;/p&gt;

&lt;p&gt;Companies like Amazon, eBay, Netflix, NASA JPL, and Yahoo all use Big Data frameworks like Spark to quickly extract meaning from massive data sets across a fault-tolerant Hadoop cluster, and learning those frameworks and techniques can provide you a competitive advantage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-favorite-big-data-frameworks-for-java-programmers"&gt;
  &lt;/a&gt;
  My Favorite Big Data Frameworks for Java Programmers
&lt;/h2&gt;

&lt;p&gt;This is the list of the top 5 Big Data Framework you can learn in 2021. Each of these frameworks provides different functionalities and knowing what they do is very essential for any Big Data Programmer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-apache-hadoop"&gt;
  &lt;/a&gt;
  1. Apache Hadoop
&lt;/h3&gt;

&lt;p&gt;If you have heard about Big Data then you might have also heard about Hadoop clusters. For many people, &lt;a href="https://medium.com/javarevisited/10-best-big-data-and-hadoop-tutorials-books-and-courses-to-learn-in-2020-aaca8cfccb80"&gt;Apache Hadoop&lt;/a&gt; means Big Data and why not, Apache Hadoop is probably the most popular Big Data Framework out there.&lt;/p&gt;

&lt;p&gt;Apache Hadoop is a framework that allows distributed processing of large data sets across clusters of computers using simple programming models.&lt;/p&gt;

&lt;p&gt;It is designed to scale up from single servers to thousands of machines, each offering local computation and storage. It's based upon the popular Map Reduce pattern and is key for developing a reliable, scalable, and distributed software computing application.&lt;/p&gt;

&lt;p&gt;If you want to start with Big Data in 2021, I highly recommend you to learn Apache Hadoop and if you need a resource, I recommend you to join &lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fthe-ultimate-hands-on-hadoop-tame-your-big-data%2F"&gt;&lt;strong&gt;The Ultimate Hands-On Hadoop&lt;/strong&gt;&lt;/a&gt;course by none other than Frank Kane on Udemy. It's one of the most comprehensive, yet up-to-date course to learn Hadoop online.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fthe-ultimate-hands-on-hadoop-tame-your-big-data%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j6bokLKO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/557/0%2A1BPgKmHWzi2N4cfa.png" alt="Image for post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-apache-spark"&gt;
  &lt;/a&gt;
  2. Apache Spark
&lt;/h3&gt;

&lt;p&gt;This is another Big Data framework that is quite popular and whose demand is increasing day by day. If you want to breakthrough in Big Data Space, learning &lt;a href="https://medium.com/javarevisited/5-free-courses-to-learn-apache-spark-in-2020-bdff2d60c800"&gt;Apache Spark&lt;/a&gt; in 2021 can be a great start.&lt;/p&gt;

&lt;p&gt;Apache Spark is a fast, in-memory data processing engine with elegant and expressive development APIs to allow data workers to efficiently execute streaming, machine learning, or SQL workloads that require fast iterative access to datasets.&lt;/p&gt;

&lt;p&gt;You can use Spark for in-memory computing for ETL, machine learning, and data science workloads to Hadoop. If you want to learn Apache Spark in 2021 and need a resource, I highly recommend you to join Apache Spark 2.0 with Java -Learn Spark from a Big Data Guru on Udemy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fapache-spark-course-with-java%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FjX6ntBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/557/0%2AewHgDQyYDR1R76pG.png" alt="Image for post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Btw, if you need more options to explore Spark with other programming languages like Scala and Python then Frank Kane's &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fapache-spark-with-scala-hands-on-with-big-data%2F"&gt;&lt;strong&gt;Apache Spark with Scala --- Hands On with Big Data!&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Ftaming-big-data-with-apache-spark-hands-on%2F"&gt;&lt;strong&gt;Taming Big Data with Apache Spark and Python --- Hands-On!&lt;/strong&gt;&lt;/a&gt; courses are definitely worth looking at.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-apache-hive"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://hive.apache.org/"&gt;Apache Hive&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Apache Hive is a Big Data Analytics framework that was created by Facebook to combine the scalability of one of the most popular Big Data frameworks.&lt;/p&gt;

&lt;p&gt;You can also think of Apache Hive as a data processing tool on &lt;a href="https://medium.com/swlh/5-free-online-courses-to-learn-big-data-hadoop-and-spark-in-2019-a553e6ccfe30"&gt;Hadoop&lt;/a&gt;. It is a querying tool for HDFS and the syntax of its queries is almost similar to our old &lt;a href="https://medium.com/hackernoon/top-5-sql-and-database-courses-to-learn-online-48424533ac61"&gt;SQL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hive is an open source-software that lets programmers analyze large data sets on Hadoop. It is an engine that turns SQL-requests into chains of MapReduce tasks.&lt;/p&gt;

&lt;p&gt;If you are learning Hadoop then it makes sense to learn Hive as well and if you need resources, I highly recommend &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fhadoop-querying-tool-hive-to-advance-hivereal-time-usage%2F"&gt;&lt;strong&gt;Hive to ADVANCE Hive (Real-time usage): Hadoop querying tool course&lt;/strong&gt;&lt;/a&gt; by J Garg. It's an advanced course to learn Hive but for a very good one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fhadoop-querying-tool-hive-to-advance-hivereal-time-usage%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--leypUAxc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/652/0%2AAPF7EFLJ_zHl-k3y.jpg" alt="Image for post"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-apache-storm"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://storm.apache.org/"&gt;Apache Storm&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Apache Storm&lt;/strong&gt; is another Big Data Framework that is worth learning in 2021. This framework is focused on working with a large real-time data flow. The key features of Storm are scalability and quick recovery after downtime.&lt;/p&gt;

&lt;p&gt;The Apache Storm is to &lt;strong&gt;real-time stream processing&lt;/strong&gt; what Hadoop is to &lt;strong&gt;batch processing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Using Storm you can build applications that need you to be highly responsive to the latest data and react within seconds and minutes, such as finding the latest trending topics on Twitter, or monitoring spikes in payment gateway failures.&lt;/p&gt;

&lt;p&gt;From simple data transformations to applying machine learning algorithms. You can work with this solution with the help of Java, as well as Python, Ruby, and Fancy. &lt;/p&gt;

&lt;p&gt;If you want to learn Apache Storm and need a resource, I suggest &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Flearn-by-example-apache-storm%2F"&gt;&lt;strong&gt;Learn By Example: Apache Storm course&lt;/strong&gt;&lt;/a&gt; by Loony Corn on Udemy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Flearn-by-example-apache-storm%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aBu23Hrt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1043/0%2ATfVC9VQdXDrvDFh3.jpg" alt="Image for post"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-apache-flink"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://flink.apache.org/"&gt;Apache Flink&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Apache Flink&lt;/strong&gt; is another robust Big Data processing framework for stream and batch processing that is worth learning in 2021. It is the successor to Hadoop and Spark. It is the next generation Big data engine for Stream processing.&lt;/p&gt;

&lt;p&gt;If &lt;a href="https://dev.to/javinpaul/top-5-courses-to-learn-big-data-and-hadoop-for-beginners-6g8"&gt;Hadoop&lt;/a&gt; is 2G, &lt;a href="https://javarevisited.blogspot.com/2017/12/top-5-courses-to-learn-big-data-and.html#axzz6cRYpiwdu"&gt;Spark&lt;/a&gt; is 3G then Apache Flink is the 4G in Big data stream processing frameworks.&lt;/p&gt;

&lt;p&gt;Actually, Spark was not a true Stream processing framework, it was just a makeshift to do it but Apache Flink is a TRUE Streaming engine with added capacity to perform Batch, Graph, Table processing, and also to run Machine Learning algorithms.&lt;/p&gt;

&lt;p&gt;Demand of Flink in the market is already increasing. Many renowned companies like Capital One (Bank), Alibaba (eCommerce), Uber (Transportation) have already started using Apache Flink to process their Real-time Big data and thousands others are diving into it.&lt;/p&gt;

&lt;p&gt;If you want to learn Apache Flink and need a resource, I suggest you start with &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fapache-flink-a-real-time-hands-on-course-on-flink%2F"&gt;&lt;strong&gt;Apache Flink | A Real-Time &amp;amp; Hands-On course on Flink&lt;/strong&gt;&lt;/a&gt; by J Garg on Udemy. It's a complete, In-depth &amp;amp; HANDS-ON practical course to learn Apache Flink in 2021.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fapache-flink-a-real-time-hands-on-course-on-flink%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ESwMa54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1113/0%2AAkw3vi9T725zE5Zd.jpg" alt="Image for post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all about the &lt;strong&gt;5 best Big Data Framework You can learn in 2021&lt;/strong&gt;. These are really powerful and in-demand Big Data frameworks and learning them can improve your skills and boost your Resume and Career.&lt;/p&gt;

&lt;p&gt;If you are still hungry for more than another Big Data framework that is worth looking at is Apache Heron, another new and shiny Big Data processing engine. Twitter developed it as a new generation replacement for Storm.&lt;/p&gt;

&lt;p&gt;Other &lt;strong&gt;Java and Programming Articles&lt;/strong&gt; you may like&lt;br&gt;
&lt;a href="https://dev.to/javinpaul/10-skills-java-programmer-can-learn-to-accelerate-their-career-3nlh?fbclid=IwAR19fdBhg3zriyqcZyo9CfvMSHW_xKmNggTndkN-fFFfMaWH6VHG5T_Z6Rc"&gt;10 Skills Java Programmer can learn to accelerate their career&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/javarevisited/top-5-courses-to-learn-software-architecture-in-2020-best-of-lot-5d34ebc52e9"&gt;5 courses to become a Software Architect&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/javarevisited/21-spring-mvc-rest-interview-questions-answers-for-beginners-and-experienced-developers-21ad3d4c9b82"&gt;20 Spring MVC Interview Questions with Answers&lt;/a&gt;&lt;br&gt;
&lt;a href="http://www.java67.com/2018/02/10-books-java-developers-should-read-in.html"&gt;10 Books Java Developers Should Read in 2021&lt;/a&gt;&lt;br&gt;
&lt;a href="http://javarevisited.blogspot.sg/2018/02/top-5-spring-microservices-courses-with-spring-boot-and-spring-cloud.html"&gt;Top 5 courses to learn Microservice with Spring Cloud&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/javarevisited/10-best-java-microservices-courses-with-spring-boot-and-spring-cloud-6d04556bdfed"&gt;10 Courses to learn Microservices in Java with Spring Boot&lt;/a&gt;&lt;br&gt;
&lt;a href="https://javarevisited.blogspot.com/2019/02/the-2019-web-developer-roadmap.html"&gt;The 2021 Web Developer RoadMap&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/javarevisited/10-books-java-developers-should-read-in-2020-e6222f25cc72"&gt;21 Java Books You can Read in 2021&lt;/a&gt;&lt;br&gt;
&lt;a href="https://javarevisited.blogspot.com/2018/09/the-2018-devops-roadmap-your-guide-to-become-DevOps-Engineer.html"&gt;The 2021 DevOps RoadMap --- How to learn DevOps better&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/javarevisited/5-essential-frameworks-every-java-developer-should-learn-6ed83315f1fb"&gt;5 Essential Framework Every Java Programmers Can Learn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading this article so far. If you like these Big Data Frameworks, then please share them with your friends and colleagues. If you have any questions or feedback, then please drop a note.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S. ---&lt;/strong&gt; If you want to become a full-stack Developer in 2021 and looking for the best Java framework a Fullstack developer should learn then I suggest you join this &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Ffull-stack-application-with-spring-boot-and-react%2F"&gt;&lt;strong&gt;Go Java Full Stack with Spring Boot and React&lt;/strong&gt;&lt;/a&gt; course by Ranga Karnam on Udemy. It's a great course to become a full-stack Java developer in 2021&lt;/p&gt;

</description>
      <category>java</category>
      <category>bigdata</category>
      <category>spark</category>
      <category>programming</category>
    </item>
    <item>
      <title>NextConf Clone (Supabase Realtime) - Introduction</title>
      <author>Zernonia</author>
      <pubDate>Sat, 19 Jun 2021 05:34:17 +0000</pubDate>
      <link>https://dev.to/zernonia/nextconf-clone-supabase-realtime-introduction-14pl</link>
      <guid>https://dev.to/zernonia/nextconf-clone-supabase-realtime-introduction-14pl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#next-conf-realtime-playground"&gt;
  &lt;/a&gt;
  Next Conf Realtime Playground
&lt;/h2&gt;

&lt;p&gt;Have you seen the awesome Realtime Playground for &lt;a href="https://nextjs.org/conf"&gt;Next Conf&lt;/a&gt;? I believe most of you did. I thought this is just a fun playground for &lt;code&gt;React/Next Dev&lt;/code&gt; to play around when they are claiming their tickets, but it turns out to be something much BIGGER! &lt;a href="https://nextjs.org/live"&gt;‚ö† Risk of jaw dropping&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Then, the &lt;code&gt;Frontend Dev&lt;/code&gt; in me started to wonder how they implement such features. I &lt;code&gt;Right Click -&amp;gt; Inspect&lt;/code&gt; and started to dig and study how the magic works.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#realtime-sync-replicache"&gt;
  &lt;/a&gt;
  Realtime sync (Replicache)
&lt;/h2&gt;

&lt;p&gt;It turns out their magic is backed by the &lt;code&gt;Backstage assistant&lt;/code&gt;, &lt;a href="https://replicache.dev"&gt;Replicache&lt;/a&gt;. &lt;strong&gt;Replicache&lt;/strong&gt; makes it easy to add realtime collaboration, lag-free UI, and offline support to web apps. Most importantly, it works with any backend stack ü§Ø.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are planning to add Realtime Collaboration into your project/products, be sure to check it out&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#too-complicated"&gt;
  &lt;/a&gt;
  Too Complicated?
&lt;/h2&gt;

&lt;p&gt;But, if you find it too complicated üò´ and involves too many steps just to add Realtime Collaboration into your project, then the following guide and series will definitely help you.&lt;/p&gt;

&lt;p&gt;We won't dig too deep into Replicache, but trying to replicate similar features by using &lt;a href="https://supabase.io/"&gt;Supabase‚ö°&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Be sure to &lt;strong&gt;Bookmark&lt;/strong&gt;üîñ and follow my steps in this Series&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#preview"&gt;
  &lt;/a&gt;
  Preview
&lt;/h2&gt;

&lt;p&gt;If you are intrigued and want to know where this series will bring you to, you check it out &lt;a href="https://supabase-realtime-nextconf-clone.vercel.app/"&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://supabase-realtime-nextconf-clone.vercel.app/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTeDkE46--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rhxz3q7wo8ubsa302llr.PNG" alt="Supabase Realtime NextConf Clone"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OR &lt;/p&gt;

&lt;p&gt;If you just wanna read codes and ignore the rest of the post, no worry, here's the &lt;a href="https://github.com/zernonia/supabase-realtime-nextconf-clone"&gt;Github Repo&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/zernonia"&gt;
        zernonia
      &lt;/a&gt; / &lt;a href="https://github.com/zernonia/supabase-realtime-nextconf-clone"&gt;
        supabase-realtime-nextconf-clone
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;br&gt;
&lt;p&gt;
  &lt;a href="https://github.com/zernonia/supabase-realtime-nextconf-clone"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RH5t4-Cm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/zernonia/supabase-realtime-nextconf-clone/master/images/main.svg" alt="Logo" width="80" height="80"&gt;
  &lt;/a&gt;
  &lt;/p&gt;
&lt;h3&gt;
Supabase Realtime NextConf Clone&lt;/h3&gt;
  &lt;p&gt;
    Fun &amp;amp; Simple &lt;strong&gt;&lt;a href="https://supabase.io/" rel="nofollow"&gt;Supabase&lt;/a&gt; Realtime NextConf Clone.&lt;/strong&gt;
    &lt;br&gt;
    Realtime Play Button ‚Ä¢ Realtime Chat
    &lt;br&gt;
    &lt;br&gt;
    &lt;a href="https://supabase-realtime-nextconf-clone.vercel.app//" rel="nofollow"&gt;View Demo&lt;/a&gt;
    ¬∑
    &lt;a href="https://github.com/zernonia/supabase-realtime-nextconf-clone/issues"&gt;Report Bug&lt;/a&gt;
    ¬∑
    &lt;a href="https://github.com/zernonia/supabase-realtime-nextconf-clone/issues"&gt;Request Feature&lt;/a&gt;
  &lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/zernonia/supabase-realtime-nextconf-clone/master/images/main.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--buW-EOkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/zernonia/supabase-realtime-nextconf-clone/master/images/main.png" alt="Supabase Schema"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
üöÄ Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
üéâ Play around with other user across the internet&lt;/li&gt;
&lt;li&gt;
‚åö Realtime update Cursor and Button Count&lt;/li&gt;
&lt;li&gt;
‚õÖ Realtime chat&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
üìá About The Project&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;TLDR&lt;/em&gt; - &lt;strong&gt;NextConf Realtime Clone using Supabase Realtime&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I was heavily inspired by &lt;a href="https://nextjs.org/conf#room-9q0s8" rel="nofollow"&gt;Next Conf&lt;/a&gt;  realtime ‚åö functionalities, and take some time on learning how Next implement it.  Seems like they are using &lt;a href="https://doc.replicache.dev/how-it-works" rel="nofollow"&gt;Replicache&lt;/a&gt; to implement the &lt;code&gt;Push/Pull&lt;/code&gt; realtime functionalities.&lt;/p&gt;
&lt;p&gt;Then I look around the internet and couldn't find any similar example, thus inspired me to take on the challenge, and utilizing &lt;a href="https://supabase.io/docs/reference/javascript/subscribe" rel="nofollow"&gt;Supabase Realtime ‚ö°&lt;/a&gt; to replicate similar effect.&lt;/p&gt;
&lt;p&gt;After long hour of studying and replicating, I'm proud to present this &lt;strong&gt;Open Source Supabase Realtime NextConf Clone&lt;/strong&gt; Playground üî•&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;‚ö†Ô∏è If you encountered any bugsüêõ, please report it‚Ä¶&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/zernonia/supabase-realtime-nextconf-clone"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#ready"&gt;
  &lt;/a&gt;
  Ready ‚ùì
&lt;/h2&gt;

&lt;p&gt;In the next post, I will start sharing about How Supabase Realtime can achieve this features, Why I decided to use Supabase, and etc.&lt;/p&gt;

&lt;p&gt;Feel free to follow my Twitter: &lt;br&gt;
&lt;code&gt;@zernonia&lt;/code&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>nextjs</category>
      <category>supabase</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Let's Create a Custom Hook in React üê±‚Äçüë§</title>
      <author>Mursal Furqan</author>
      <pubDate>Sat, 19 Jun 2021 05:11:44 +0000</pubDate>
      <link>https://dev.to/mursalfk/let-s-create-a-custom-hook-in-react-hm8</link>
      <guid>https://dev.to/mursalfk/let-s-create-a-custom-hook-in-react-hm8</guid>
      <description>&lt;p&gt;Hi all üëã&lt;br&gt;
So after quite a break, we are back with another article in the &lt;a href="https://dev.to/mursalfk/series/12599"&gt;React Series&lt;/a&gt; with two awesome articles about hooks. If you have stumbled upon this article from a reference and don't know what hooks are, I would definitely suggest to first try our those two articles at the given link where we have discussed deeply about general &lt;a href="https://dev.to/mursalfk/hooks-in-react-46d1"&gt;Hooks in React&lt;/a&gt; and about some essential and &lt;a href="https://dev.to/mursalfk/basic-hooks-in-react-4ai3"&gt;Basic Hooks in react&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, we are about to explain how can you create a custom hook in React. Because using React this way, might really change the way you develop components üòâ So first thing first, What are hooks? Well, the answer is &lt;a href="https://dev.to/mursalfk/hooks-in-react-46d1"&gt;here&lt;/a&gt; üòÑ. So let's just skip that part and directly jump next.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#without-a-custom-hook"&gt;
  &lt;/a&gt;
  Without a custom hook
&lt;/h2&gt;

&lt;p&gt;Let's imagine that we have a functionality in our component to retrieve the Window's width when the user resizes the screen. We need to know if the screen is small, medium or large. &lt;br&gt;
&lt;em&gt;We can write something like this:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const LayoutComponent = () =&amp;gt; {
    const [onSmallScreen, setOnSmallScreen] = useState(false)

    useEffect(() =&amp;gt; {
        checkScreenSize();
        window.addEventListener("resize", checkScreenSize);
    }, []);

    let checkScreenSize = () =&amp;gt; {
        setOnSmallScreen(window.innerWidth &amp;lt; 700);
    };

    return (
        &amp;lt;div className={`${onSmallScreen ? "small" : "large"}`}&amp;gt;
            &amp;lt;h1&amp;gt;Hello from Default Hooks&amp;lt;/h1&amp;gt;
        &amp;lt;/div&amp;gt;
    );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;The component works just fine. Based on the width being less than 700, it tells what the size is. But, imagine if I need the same screen size check in some other component. Should I copy-paste the code? I can! But that defeats the reusability of codes in React. Instead, we can extract this functionality inside a custom hook, and reuse it anywhere we want. üíØ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-custom-hook"&gt;
  &lt;/a&gt;
  Creating the custom hook
&lt;/h2&gt;

&lt;p&gt;Because the hooks are just JS Functions, they don't need a React component to actually exist.&lt;br&gt;
&lt;em&gt;I'll create a new file called &lt;strong&gt;useWindowsWidth.js&lt;/strong&gt;:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState, useEffect } from "react";

const useWindowsWidth = () =&amp;gt; {
    const [isScreenSmall, setIsScreenSmall] = useState(false);

    let checkScreenSize = () =&amp;gt; {
        setIsScreenSmall(window.innerWidth &amp;lt; 700);
    };

    useEffect(() =&amp;gt; {
        checkScreenSize();
        window.addEventListener("resize", checkScreenSize);

        //Cleanup
        return () =&amp;gt; window.removeEventListener("resize", checkScreenSize);
    }, []);

    return isSreenSmall;
};

export default useWindowsWidth;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-the-hook"&gt;
  &lt;/a&gt;
  Using the hook
&lt;/h3&gt;

&lt;p&gt;We Extracted this functionality inside useWindowsWidth function. Now, we can import it anywhere we want to use it!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react"
import useWindowsWidth from "./useWindowsWidth.js"

const MyComponent = () =&amp;gt; {
    const onSmallScreen = useWindowsWidth();

    return (
        //Return some element
    )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, wherever I need to know the size of the screen, I can use useWindowsWidth(). Isn't this cool? Like, rather than writing entire code from scratch, you simply import the function. You can even make this code more dynamic using props by replacing the hard-coded screen size with &lt;code&gt;this.props.screenSizeCheck&lt;/code&gt; and woosh! You can reuse the component wherever you want, with whatever size you want.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#faq"&gt;
  &lt;/a&gt;
  FAQ
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#do-we-have-to-start-our-custom-hooks-name-with-use"&gt;
  &lt;/a&gt;
  Do we have to start our custom hooks name with 'use'?
&lt;/h4&gt;

&lt;p&gt;Well, YES! According to the official &lt;a href="https://reactjs.org/docs/hooks-custom.html"&gt;React documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unlike a React component, a custom Hook doesn‚Äôt need to have a specific signature. We can decide what it takes as arguments, and what, if anything, it should return. In other words, it‚Äôs just like a normal function. Its name should always start with use so that you can tell at a glance that the rules of Hooks apply to it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#do-same-custom-hooks-in-two-components-share-state"&gt;
  &lt;/a&gt;
  Do same custom hooks in two components share state?
&lt;/h4&gt;

&lt;p&gt;Nupp! Rest assured. If you use the same custom hooks in two components, they &lt;strong&gt;WILL NOT&lt;/strong&gt;* share state.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#we-are-done"&gt;
  &lt;/a&gt;
  We are Done!
&lt;/h1&gt;

&lt;p&gt;Custom hooks allows you to really use your imagination when writing your React Code. You can extract and share logic in a way that was not possible with class components üòÑ. And yes, this also enables us to make very 'use'ful functions that can be used at different places in the application.&lt;br&gt;
&lt;em&gt;I wonder if you noticed the wordplay here.&lt;/em&gt; üòâ&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>webpack</category>
    </item>
    <item>
      <title>5 Resource To Enrich Your Front end Skills</title>
      <author>Rezaul karim</author>
      <pubDate>Sat, 19 Jun 2021 04:56:55 +0000</pubDate>
      <link>https://dev.to/rezaulkarim/5-resource-to-enrich-your-front-end-skills-38nk</link>
      <guid>https://dev.to/rezaulkarim/5-resource-to-enrich-your-front-end-skills-38nk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#front-end-skills"&gt;
  &lt;/a&gt;
  Front End Skills
&lt;/h2&gt;

&lt;p&gt;It is so easy to get stuck following tutorial after tutorial and not really making the progress. You‚Äôd hope you be making in your front end Journey. Asked some people for advice on what to do to take that next step and they tell you to go build something, but what are you supposed to build? You know, you‚Äôre ready to take that next step and to really start upping your skills. Just have no idea where to start. You have no ideas of what to build out this sounds like Directly to you, then you‚Äôre definitely in the right place. Because in this article, we will be looking at five different resources that can help.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-we-talk-about"&gt;
  &lt;/a&gt;
  Resources we talk about:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
Front-end Mentor&lt;/li&gt;
&lt;li&gt;
Style Stage&lt;/li&gt;
&lt;li&gt;
CSS Battle&lt;/li&gt;
&lt;li&gt;
Code Wars&lt;/li&gt;
&lt;li&gt;
Front-end Practice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, if you‚Äôve been making this journey along the way and you‚Äôre feeling stuck, I hundred percent can feel your pain. There are so many more and amazing resources to help you get started and help you get past these roadblocks. That are really common, turn into it‚Äôs one thing to just be following articles. It‚Äôs really hard just to get ideas for those or to find designs to build out. So, let‚Äôs go and take a look at some resources that can help you get past that step and just get you coding and reinforcing all those skills. The first one of these resources that we‚Äôre going to look at is&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-frontend-mentor"&gt;
  &lt;/a&gt;
  1. Front-end Mentor
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YzVnA_Yl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624077940625/akQEOInuo.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YzVnA_Yl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624077940625/akQEOInuo.jpeg" alt="front end mentor.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is one of the ones that are recommended to a lot of people, because the really nice thing with this is it takes down that one major, constraint that a lot of us have in that, we don‚Äôt want to have to necessarily design something along the way, we just want to get into the code and start making it look the way it‚Äôs supposed to look. If you‚Äôre not a designer, it can be really hard to come up with something that looks good to even start with or you start trying to design in the browser.&lt;/p&gt;

&lt;p&gt;The wonderful thing is they give you a really nice looking design right from the beginning. So you‚Äôre not worried about that side. You have exactly what you want to build and then you just have to make it happen. The other thing that I really like about it is the organize all their different challenges by difficulty level. So whether it‚Äôs like they have a new be challenged and intermediate one in advance.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#is-it-free"&gt;
  &lt;/a&gt;
  Is it free?
&lt;/h4&gt;

&lt;p&gt;So it‚Äôs a really Good way to take. Things that you‚Äôre hearing about and actually have to implement them into projects. Now when the you might notice right off the bat is there‚Äôs premium and free resources. The free ones are still really, really good. So don‚Äôt feel like you have to pay to get quality out of it. You can get really amazing challenges for free and just jump in there and start doing stuff. You can share your solution when you‚Äôre done and that means other people can actually see it, you can get feedback on your Solutions.&lt;/p&gt;

&lt;p&gt;It also Gets you working with GitHub to be able to do all of this, which is all part of the workflow that you‚Äôre going to need to know how to do when you have a job. So a lot of really good things here as you‚Äôre developing and working on your skill set are going to apply to the real world.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://www.frontendmentor.io/"&gt;https://www.frontendmentor.io/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#more"&gt;
  &lt;/a&gt;
  More
&lt;/h4&gt;

&lt;p&gt;And you also get access to the design system so you get a little bit more information but if you‚Äôre not ready for that or it‚Äôs not in your budget, that‚Äôs cool. You can still really take advantage of front-end Mentor even on the free tier. It is a really, really awesome resource.&lt;/p&gt;

&lt;p&gt;The next resource that I want to look at that. You can use is style stage which can find it&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-style-stage"&gt;
  &lt;/a&gt;
  2. Style Stage
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1C7Mqwjw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624078015211/AmfOotcPD.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1C7Mqwjw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624078015211/AmfOotcPD.jpeg" alt="Screenshot_2021-05-23 Style Stage.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not adapt, It Is by Stephanie Echols, and this one just makes me so happy. It was a way to show what CSS could use you all started with the same HTML file and then you would just come in with your own CSS and style it.&lt;/p&gt;

&lt;p&gt;However,People would do well, Stephanie wanted to do a modern approach to that. That with style Sage style, Sage is very similar to CSS and Garden in the sense that you are starting with all the same HTML file, and it‚Äôs up to you to do whatever you want with it with CSS. There are some differences though, in that she‚Äôs up the game a little bit. If you want to submit it, you do have to do it through a GitHub. Pull request.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#work-flows"&gt;
  &lt;/a&gt;
  Work flows
&lt;/h4&gt;

&lt;p&gt;So, once again, we‚Äôre bringing you an actual work flows that can help you out, but there‚Äôs some guidelines that must be followed. You have to make sure that you‚Äôre following. Civility, best practices and making a site that isn‚Äôt just looking good but that is accessible as well, which is really, really cool. And the nice thing with it is Steph will reply, you put in your pull request she‚Äôs going to let you know, everything is okay.&lt;/p&gt;

&lt;p&gt;So if you want to check it out, you can check that car right there. If you‚Äôre looking for a lot of content of it, is the really fun project to work on. And you actually have to say, this is really for developing your CSS skills because the rule is the only thing you can do is play with your CSS file.&lt;/p&gt;

&lt;p&gt;You‚Äôre not allowed touching HTML, there‚Äôs no JavaScript. This CSS only but this really gets you first of all thinking in a little bit of a different way because you‚Äôre only changing the CSS. But this is also really realistic to a lot of real-world situations where you might be working on a WordPress theme or some other CMS. You don‚Äôt actually have access to go into the HTML and make changes there.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://stylestage.dev/"&gt;https://stylestage.dev/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-css-battle"&gt;
  &lt;/a&gt;
  3. CSS Battle
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l28XHa4t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624078075425/hKtTbLDzV.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l28XHa4t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624078075425/hKtTbLDzV.jpeg" alt="Screenshot_2021-05-23 CSSBattle.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don‚Äôt know what CSS battle, it is a really fun project. Take little challenges for this is the opposite. We‚Äôre not doing real world situations. We‚Äôre taking things, and we‚Äôre building completely unrealistic things. And once again, this is, if you want to up your CSS game specifically on the CSS channel.&lt;/p&gt;

&lt;p&gt;So, maybe a little bit of CSS preference going on here with this one. So you really get to up your CSS game with CSS battle and do things that are out of the ordinary. But what I Like about CSS battle is even know it‚Äôs situations and things that you would never really encounter in the real world. It really forces you to up your creativity and think about things in different ways.&lt;/p&gt;

&lt;p&gt;How many group this one in the same sort of resource as CSS battle and if you don‚Äôt want to just be focused on CSS, but there are other languages that you want to up your game with as well. You sort of want to ramify the experience while you‚Äôre at it, there is&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://cssbattle.dev/"&gt;https://cssbattle.dev/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-code-wars"&gt;
  &lt;/a&gt;
  4. Code Wars
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r1DdKcij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624078126597/SywYSk2E9.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r1DdKcij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624078126597/SywYSk2E9.jpeg" alt="maxresdefault.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unlike CSS battle, it focuses. Only on CSS, code Wars. Opens up the door to a whole bunch of different languages. It‚Äôs a little bit different since we‚Äôre not doing visual things. We‚Äôre doing. You know, you‚Äôre trying to find Solutions&lt;/p&gt;

&lt;p&gt;End of the day. It‚Äôs the same type of idea. It is to have a bit of fun with it. Challenge yourself a little bit and build up your skills that type of approach instead of building up your skills to actually building a project.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://www.codewars.com/"&gt;https://www.codewars.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next one up is a pretty new site called&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-frontend-practice"&gt;
  &lt;/a&gt;
  5. Front-end Practice
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uAazzKPr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624078172505/u5KmmPAAU.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uAazzKPr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624078172505/u5KmmPAAU.jpeg" alt="Screenshot_2021-05-23 Home.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this is by Kyle sharp. And it‚Äôs a really cool project where instead of taking these sort of fictional experiences to try and build them up, like, say something like friend and Mentor who‚Äôs building. Projects from scratch instead of doing something like that. Yeah, it is. He went through and is curated a list of websites that you things really. Well, they look really nice.&lt;/p&gt;

&lt;p&gt;They would be really good practice to build and he encourages you to try and clone those sites instead of looking at the entire site, which can be really overwhelming on some of the big sites that are out there. He focuses in on specific pages with insights for you to clone. He also pointed a lot of the good things that those pages are doing that. You can focus on a little bit while you‚Äôre working on it to help develop your skills.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#develop-skills"&gt;
  &lt;/a&gt;
  Develop Skills:
&lt;/h4&gt;

&lt;p&gt;Some of them are easier than others. So you want to look at it and sort of get an idea of what you‚Äôll be getting yourself into before you jump in there. But the nice thing with these is you can actually reference the code that the professionals used afterward by using some inspect element diving in seeing how they did, some of the things that are in there.&lt;/p&gt;

&lt;p&gt;And this is a little bit like an art student, who has to practice by copying another painting. Exactly. And you do it again and again and again, it‚Äôs not the most exciting thing because it‚Äôs a little bit less creative in a sense and you‚Äôre sort of just trying to reduce I think somebody else has already done, but you learn so much by doing something that somebody else is already done. And another thing that‚Äôs really nice about doing an actual site versus, maybe something like, Brendan Mentor.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#focus-more"&gt;
  &lt;/a&gt;
  Focus More
&lt;/h4&gt;

&lt;p&gt;As you can see, all the little interactions and the other things, there‚Äôs no guessing you can see exactly where the breakpoints are. You can sort of play around with the real site and try and match it. Exactly. Just like print and Mentor. One of the reasons I really like this is because you‚Äôre building out actually Actual Pages actual sites, without worrying, too much about happy, what the design looks like. It‚Äôs more about executing it and making it work, or making that drop down, work and other things and a hundred percent.&lt;/p&gt;

&lt;p&gt;But this is really how you‚Äôre going to start upping your game and start really becoming a front end developer. And speaking of becoming an actual front end developer and contributing Ting to real projects. Maybe instead of these more fictional ones or cloning other people‚Äôs sites or doing coding mores and practice stuff on CSS paddle, maybe you want to up your game by actually taking part in real projects and I would really, really encourage you to do this. Even if you‚Äôre really early on, in your journey, you‚Äôre going, will Kevin, how am I gonna do that? I‚Äôm new.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://www.frontendpractice.com/"&gt;https://www.frontendpractice.com/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-source-for-front-end-skills"&gt;
  &lt;/a&gt;
  Open Source for front end skills
&lt;/h3&gt;

&lt;p&gt;Nobody wants to hire me, it‚Äôs not about being hired right now. It‚Äôs about Contributing to open source contributing to an open source project. First of all is a really nice way to only have to focus on one small thing instead of the entire project in one shot but it‚Äôs also a really good way to get into workflow and seeing how it works and things like that along the way as well.&lt;/p&gt;

&lt;p&gt;Now we can definitely seem overwhelming when you want to get into and start doing this at first. If you‚Äôve never done it and you‚Äôre not even sure what open source, you can means that all of that. So what I would recommend to do is The firsttimersonly.com and read and research on their. They link off to a whole bunch of really good resources, for finding open source projects that have good things for first pull request.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#open-source-contribution"&gt;
  &lt;/a&gt;
  Open Source Contribution
&lt;/h4&gt;

&lt;p&gt;So I mean you don‚Äôt want to be diving into the deep end and finding something that‚Äôs too hard to do. So they help you find your first pull request. You can be doing or find ways to look for something that could be your first pull request. Not only do they live.&lt;/p&gt;

&lt;p&gt;Two places that will help you find your first project to put a pull request in her first open source project to try and contribute toward. But they also have resources on how this whole open source thing works. And how you can find something and the steps that you have to take or the steps. You‚Äôd want to take in being able to contribute. It they really break it down really nicely and this could be a really nice step to start taking.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;So, you‚Äôre actually working with Real people are working on an actual project that‚Äôs online. This is something that could be included in your portfolio that you‚Äôve done actual work on open source projects and you can list them out and show the contributions you make to them. And you can see your changes happening on like actual real-world projects. And I think that is super exciting and can be really, really awesome and empowering as well.&lt;/p&gt;

&lt;p&gt;As I said, when you‚Äôre working on any of these things, you might get stuck along the way and need a little bit of help or For reals along the way to get you through those problems. So put a custom playlist together right here. That looks at some of those common things that people run into especially with CSS when they‚Äôre working on actual projects and ways to overcome them. And went that a really big.So these are resources to improve/boost your front end skills.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mrezaulkarim.com/5-resource-to-enrich-your-front-end-skills/"&gt;Read this article on my blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more exciting tips and tricks please read our  &lt;a href="https://mrezaulkarim.com/blog/"&gt;others articles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find My page on Instagram:  &lt;a href="//instagram.com/stack.content"&gt;@stack.content&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>The Ember Times - Issue No. 182</title>
      <author>The Ember Times</author>
      <pubDate>Sat, 19 Jun 2021 04:53:36 +0000</pubDate>
      <link>https://dev.to/embertimes/the-ember-times-issue-no-182-g05</link>
      <guid>https://dev.to/embertimes/the-ember-times-issue-no-182-g05</guid>
      <description>&lt;p&gt;üëã Emberistas! üêπ&lt;/p&gt;

&lt;p&gt;Using the in-element helper, migrating Controllers to top-level Components, Ember Upgrade Sprints, Ember development on Twitch, and remodeling an Ember App Part 2.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#using-the-inelement-helper"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.linkedin.com/pulse/emberjs-using-in-element-helper-faith-or/"&gt;Using the in-element helper ‚õ≥&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/faith-or"&gt;Faith Or (@faith-or)&lt;/a&gt; wrote a blog post on how they migrated from &lt;code&gt;ember-wormhole&lt;/code&gt; to the built-in &lt;code&gt;in-element&lt;/code&gt; helper introduced in Ember 3.20.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/yapplabs/ember-wormhole"&gt;Ember Wormhole&lt;/a&gt; is an addon that renders a child view somewhere else in the DOM &lt;em&gt;outside&lt;/em&gt; of the component.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://api.emberjs.com/ember/3.20/classes/Ember.Templates.helpers/methods/in-element?anchor=in-element"&gt;in-element helper&lt;/a&gt; renders its block content outside of the regular flow, into a DOM element given by its &lt;code&gt;destinationElement&lt;/code&gt; positional argument.&lt;/p&gt;

&lt;p&gt;Common use cases for both include when a piece of UI is a logical child of a component but needs to render somewhere else such as a loading screen, a modal, tooltip or even a dropdown. The differences between the two are slight. Faith goes into more detail in the blog post.&lt;/p&gt;

&lt;p&gt;There are 3 main takeaways.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;in-element&lt;/code&gt; needs the destination to exist before we use it, while &lt;code&gt;ember-wormhole&lt;/code&gt; does not.&lt;/li&gt;
&lt;li&gt;With &lt;code&gt;in-element&lt;/code&gt;, when the destination element changes, the content is re-rendered completely.&lt;/li&gt;
&lt;li&gt;By default, the &lt;code&gt;in-element&lt;/code&gt; helper will replace all the contents of the destination element. (You will need to configure it not to using &lt;code&gt;insertBefore=null&lt;/code&gt;.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Read the full &lt;a href="https://www.linkedin.com/pulse/emberjs-using-in-element-helper-faith-or/"&gt;blog post on LinkedIn&lt;/a&gt; and check out the &lt;a href="https://github.com/faith-or/emberjs-inelement-vs-wormhole-demo"&gt;demo on GitHub&lt;/a&gt;!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#migrating-controllers-to-toplevel-components-in-ember"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/juanazam/migrating-controllers-to-top-level-components-in-ember-ggc"&gt;Migrating Controllers to top-level Components in Ember üìñ&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In this &lt;a href="https://dev.to/juanazam/migrating-controllers-to-top-level-components-in-ember-ggc"&gt;blog post&lt;/a&gt;, &lt;a href="https://github.com/juanazam"&gt;Juan Manuel Azambuja (@juanazam)&lt;/a&gt; shows a real world example of how to replace your template contents with a single top-level component. The top-level component can then take on a similar role as the controller.&lt;/p&gt;

&lt;p&gt;Juan presents a few tricks as well as a useful discussion of using &lt;a href="https://github.com/ember-modifier/ember-modifier"&gt;ember-modifiers&lt;/a&gt; addon to solve updating issues. The blog sums up the advantages and disadvantages of the top-level approach, and cautions that the framework doesn't fully support this solution without some compromises.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ember-upgrade-sprints"&gt;
  &lt;/a&gt;
  &lt;a href="https://blog.centrica.dev/ember/2021/04/08/ember-upgrade-sprints.html"&gt;Ember Upgrade Sprints üÜï&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A key ingredient of app development is maintenance. Without refactoring code and upgrading dependencies often, our development cycle can slow down and we may fail to meet compliance. When you have a couple of apps to maintain, upgrading Ember may not be a big problem. What can you do when you have many apps to maintain and work with many other people?&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://blog.centrica.dev/ember/2021/04/08/ember-upgrade-sprints.html"&gt;Ember Upgrade Sprints&lt;/a&gt;, &lt;a href="https://github.com/stevetyler"&gt;Steve Tyler (@stevetyler)&lt;/a&gt; provides a few tips for upgrading apps with every LTS release (&lt;a href="https://emberjs.com/releases/lts/"&gt;Long-Term Support&lt;/a&gt;). In addition, Steve shares some challenges that you may face and how you can orient your teams' sprints.&lt;/p&gt;

&lt;p&gt;For more information, we encourage you to check out the blog post. What are some of your insights and resources for upgrading Ember apps and addons? Please share them with the community!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ember-development-on-twitchtv"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.twitch.tv/real_ate/"&gt;Ember development on Twitch.tv üì∫&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/mansona"&gt;Chris Manson (@mansona)&lt;/a&gt; has started to stream Ember development on Twitch. In engaging &lt;a href="https://www.twitch.tv/real_ate/videos"&gt;Twitch streams&lt;/a&gt; Chris shows how he does maintenance and development in the Ember ecosystem. Every stream has a nice table of contents and time boxed periods where Chris works on a certain topic.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.twitch.tv/real_ate/schedule"&gt;Every Thursday at 10:30 - 13:00 (GMT+2)&lt;/a&gt;, you can join Chris on an adventure through contributing in Open Source, chat with other Ember enthusiasts and get &lt;strong&gt;inspired&lt;/strong&gt; to contribute yourself.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#remodeling-an-ember-app-part-2"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.jenweber.dev/remodeling-an-ember-app---testing/"&gt;Remodeling an Ember App Part 2 üêπ&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Part 2 of &lt;a href="https://github.com/jenweber"&gt;Jen Weber's (@jenweber)&lt;/a&gt; ‚ú®fantastic‚ú® new series on bringing an older Ember app up-to-date with Octane and a modern Ember Data strategy is out now!&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://www.jenweber.dev/remodeling-an-ember-app---testing/"&gt;part 2&lt;/a&gt;, Jen covers some testing and debugging strategies that &lt;a href="https://github.com/runspired"&gt;Chris Thoburn (@runspired)&lt;/a&gt; shared and are particularly helpful when upgrading an Ember application.&lt;/p&gt;

&lt;p&gt;From approaches to how to optimize running the tests suite to approaches on how to deal with linting errors to better understanding application test failures, there is a ton of great content in the post that developers of any experience level could learn from.&lt;/p&gt;

&lt;p&gt;Be sure to continue to watch for additional posts with more great content as this series continues!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#connect-with-us"&gt;
  &lt;/a&gt;
  &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLScqu7Lw_9cIkRtAiXKitgkAo4xX_pV1pdCfMJgIr6Py1V-9Og/viewform"&gt;Connect with us ü§ì&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--widSNSZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mh8vxu698tq56cqdq7s9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--widSNSZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mh8vxu698tq56cqdq7s9.png" alt="Office hours Tomster mascot"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Wondering about something related to Ember, Ember Data, Glimmer, or addons in the Ember ecosystem, but don't know where to ask? Readers‚Äô Questions are just for you!&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Submit your own&lt;/strong&gt; short and sweet &lt;strong&gt;question&lt;/strong&gt; under &lt;a href="https://bit.ly/ask-ember-core"&gt;bit.ly/ask-ember-core&lt;/a&gt;. And don‚Äôt worry, there are no silly questions, we appreciate them all - promise! ü§û&lt;/p&gt;


&lt;p&gt;Want to write for the Ember Times? Have a suggestion for next week's issue? Join us at &lt;a href="https://discordapp.com/channels/480462759797063690/485450546887786506"&gt;#support-ember-times&lt;/a&gt; on the &lt;a href="https://discord.gg/emberjs"&gt;Ember Community Discord&lt;/a&gt; or ping us &lt;a href="https://twitter.com/embertimes"&gt;@embertimes&lt;/a&gt; on Twitter.&lt;/p&gt;


&lt;p&gt;Keep on top of what's been going on in Emberland this week by subscribing to our &lt;a href="https://embertimes.substack.com/"&gt;e-mail newsletter&lt;/a&gt;! You can also find our posts on the &lt;a href="https://blog.emberjs.com/tag/newsletter"&gt;Ember blog&lt;/a&gt;. See you in two weeks!&lt;/p&gt;


&lt;p&gt;P.S. We ran into some technical difficulties at Ember Times HQ...we'll be back with the &lt;strong&gt;Contributors' corner&lt;/strong&gt; next issue!&lt;/p&gt;
&lt;br&gt;




&lt;p&gt;That's another wrap! ‚ú®&lt;/p&gt;

&lt;p&gt;Be kind,&lt;/p&gt;

&lt;p&gt;Tim Foster, Anne-Greeth van Herwijnen, Chris Ng, Isaac Lee, Jared Galanis, Amy Lam, and the Learning Team&lt;/p&gt;

</description>
      <category>ember</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Full Stack Reddit Clone - Spring Boot, React, Electron App - Part 9</title>
      <author>Aaron C. Beasley</author>
      <pubDate>Sat, 19 Jun 2021 03:33:11 +0000</pubDate>
      <link>https://dev.to/maxicb/full-stack-reddit-clone-spring-boot-react-electron-app-part-9-3pj5</link>
      <guid>https://dev.to/maxicb/full-stack-reddit-clone-spring-boot-react-electron-app-part-9-3pj5</guid>
      <description>&lt;h1&gt;
  &lt;a href="#full-stack-reddit-clone-spring-boot-react-electron-app-part-9"&gt;
  &lt;/a&gt;
  Full Stack Reddit Clone - Spring Boot, React, Electron App - Part 9
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Welcome to Part 9 of creating a Reddit clone using Spring Boot, and React.&lt;/p&gt;

&lt;p&gt;What are we building in this part?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pagination Support

&lt;ul&gt;
&lt;li&gt;We will update our backend to support pagination, this will reduce the amount of loading times for the client as the database begins to scale&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;JWT Invalidation&lt;/li&gt;
&lt;li&gt;JWT Refreshing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In &lt;a href="https://dev.to/maxicb/full-stack-reddit-clone-spring-boot-react-electron-app-part-3-4a4n"&gt;Part 8&lt;/a&gt; we added the CREATE &amp;amp;&amp;amp; READ endpoints for creating and reading comments!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#important-links"&gt;
  &lt;/a&gt;
  Important Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Backend Source: &lt;a href="https://github.com/MaxiCB/vox-nobis/tree/master/backend"&gt;https://github.com/MaxiCB/vox-nobis/tree/master/backend&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Frontend Source: &lt;a href="https://github.com/MaxiCB/vox-nobis/tree/master/client"&gt;https://github.com/MaxiCB/vox-nobis/tree/master/client&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Live URL: In Progress&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#part-1-updating-repositories-%F0%9F%97%84"&gt;
  &lt;/a&gt;
  Part 1: Updating Repositories üóÑ
&lt;/h2&gt;

&lt;p&gt;Let's cover the updating of all of our repositories to implement pagination and sorting support. Inside &lt;strong&gt;com.your-name.backend.repository&lt;/strong&gt; we will update the following classes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CommentRespository: We will convert our existing logic, as well as add a findAllByPost method that still returns a list, as we rely on that for sending back the total amount of comments in our PostService
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.maxicb.backend.repository;

import com.maxicb.backend.model.Comment;
import com.maxicb.backend.model.Post;
import com.maxicb.backend.model.User;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.repository.PagingAndSortingRepository;

import java.util.List;

public interface CommentRepository extends PagingAndSortingRepository&amp;lt;Comment, Long&amp;gt; {
    Page&amp;lt;Comment&amp;gt; findByPost(Post post, Pageable pageable);
    List&amp;lt;Comment&amp;gt; findAllByPost(Post post);
    Page&amp;lt;Comment&amp;gt; findAllByUser(User user, Pageable pageable);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;PostRepository:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.maxicb.backend.repository;

import com.maxicb.backend.model.Post;
import com.maxicb.backend.model.Subreddit;
import com.maxicb.backend.model.User;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.PagingAndSortingRepository;

import java.util.List;

public interface PostRepository extends PagingAndSortingRepository&amp;lt;Post, Long&amp;gt; {
    Page&amp;lt;Post&amp;gt; findAllBySubreddit(Subreddit subreddit, Pageable pageable);
    Page&amp;lt;Post&amp;gt; findByUser(User user, Pageable pageable);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;SubredditRepository:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.maxicb.backend.repository;

import com.maxicb.backend.model.Subreddit;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.repository.PagingAndSortingRepository;

import java.util.Optional;

public interface SubredditRepository extends PagingAndSortingRepository&amp;lt;Subreddit, Long&amp;gt; {
    Optional&amp;lt;Subreddit&amp;gt; findByName(String subredditName);
    Optional&amp;lt;Page&amp;lt;Subreddit&amp;gt;&amp;gt; findByNameLike(String subredditName, Pageable pageable);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#part-2-updating-services"&gt;
  &lt;/a&gt;
  Part 2: Updating Services üåé
&lt;/h2&gt;

&lt;p&gt;Now that we have updated our repositories we will need to update our servcies to refelct these changes. Inside &lt;strong&gt;com.your-name.backend.service&lt;/strong&gt; we will update the following classes. Keep in mind I will not be displaying the whole class in the section, but only the specific methods we will be updating.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CommentService: We will update the getCommentsForPost &amp;amp;&amp;amp; getCommentsForUser methods to handle pagination properly
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    public Page&amp;lt;CommentResponse&amp;gt; getCommentsForPost(Long id, Integer page) {
        Post post = postRepository.findById(id)
                .orElseThrow(() -&amp;gt; new PostNotFoundException("Post not found with id: " + id));
        return commentRepository.findByPost(post, PageRequest.of(page, 100)).map(this::mapToResponse);
    }

    public Page&amp;lt;CommentResponse&amp;gt; getCommentsForUser(Long id, Integer page) {
        User user = userRepository.findById(id)
                .orElseThrow(() -&amp;gt; new UserNotFoundException("User not found with id: " + id));
        return commentRepository.findAllByUser(user, PageRequest.of(page, 100)).map(this::mapToResponse);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;PostService: We will update the mapToResponse &amp;amp;&amp;amp; getAllPosts &amp;amp;&amp;amp; getPostsBySubreddit &amp;amp;&amp;amp; getPostsByUsername methods to implement pagination, and also retain the existing logic of mapping to DTO's
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    private PostResponse mapToResponse(Post post) {
        return PostResponse.builder()
                .postId(post.getPostId())
                .postTitle(post.getPostTitle())
                .url(post.getUrl())
                .description(post.getDescription())
                .userName(post.getUser().getUsername())
                .subredditName(post.getSubreddit().getName())
                .voteCount(post.getVoteCount())
                .commentCount(commentRepository.findAllByPost(post).size())
                .duration(TimeAgo.using(post.getCreationDate().toEpochMilli()))
                .upVote(checkVoteType(post, VoteType.UPVOTE))
                .downVote(checkVoteType(post, VoteType.DOWNVOTE))
                .build();
    }

    public Page&amp;lt;PostResponse&amp;gt; getAllPost(Integer page) {
        return postRepository.findAll(PageRequest.of(page, 100)).map(this::mapToResponse);
    }

    public Page&amp;lt;PostResponse&amp;gt; getPostsBySubreddit(Integer page, Long id) {
        Subreddit subreddit = subredditRepository.findById(id)
                .orElseThrow(() -&amp;gt; new SubredditNotFoundException("Subreddit not found with id: " + id));
        return postRepository
                .findAllBySubreddit(subreddit, PageRequest.of(page, 100))
                .map(this::mapToResponse);
    }

    public Page&amp;lt;PostResponse&amp;gt; getPostsByUsername(String username, Integer page) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -&amp;gt; new UserNotFoundException("User not found with username: " + username));
        return postRepository
                .findByUser(user, PageRequest.of(page, 100))
                .map(this::mapToResponse);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;SubredditService: We will update the getAll method
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    @Transactional(readOnly = true)
    public Page&amp;lt;SubredditDTO&amp;gt; getAll(Integer page) {
        return subredditRepository.findAll(PageRequest.of(page, 100))
                .map(this::mapToDTO);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#part-3-updating-controllers"&gt;
  &lt;/a&gt;
  Part 3: Updating Controllers
&lt;/h2&gt;

&lt;p&gt;Now that we have updated our services &amp;amp;&amp;amp; repositories we will need to update our controllers to allow client to use pagination. Inside &lt;strong&gt;com.your-name.backend.controller&lt;/strong&gt; we will update the following classes. Keep in mind I will not be displaying the whole class in the section, but only the specific methods we will be updating.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CommentController: We will update the getCommentsByPost &amp;amp;&amp;amp; getCommentsByUser methods to handle pagination properly
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    @GetMapping("/post/{id}")
    public ResponseEntity&amp;lt;Page&amp;lt;CommentResponse&amp;gt;&amp;gt; getCommentsByPost(@PathVariable("id") Long id, @RequestParam Optional&amp;lt;Integer&amp;gt; page) {
        return new ResponseEntity&amp;lt;&amp;gt;(commentService.getCommentsForPost(id, page.orElse(0)), HttpStatus.OK);
    }

    @GetMapping("/user/{id}")
    public ResponseEntity&amp;lt;Page&amp;lt;CommentResponse&amp;gt;&amp;gt; getCommentsByUser(@PathVariable("id") Long id,@RequestParam Optional&amp;lt;Integer&amp;gt; page) {
        return new ResponseEntity&amp;lt;&amp;gt;(commentService.getCommentsForUser(id, page.orElse(0)), HttpStatus.OK);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;PostController: We will update the addPost method firstly to send the created post back to the client on successful creation, getAllPost &amp;amp;&amp;amp; getPostsBySubreddit &amp;amp;&amp;amp; getPostsByUsername methods to implement pagination
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    @PostMapping
    public ResponseEntity&amp;lt;PostResponse&amp;gt; addPost(@RequestBody PostRequest postRequest) {
        return new ResponseEntity&amp;lt;&amp;gt;(postService.save(postRequest), HttpStatus.CREATED);
    }

    @GetMapping
    public ResponseEntity&amp;lt;Page&amp;lt;PostResponse&amp;gt;&amp;gt; getAllPost(@RequestParam Optional&amp;lt;Integer&amp;gt; page) {
        return new ResponseEntity&amp;lt;&amp;gt;(postService.getAllPost(page.orElse(0)), HttpStatus.OK);
    }

    @GetMapping("/sub/{id}")
    public ResponseEntity&amp;lt;Page&amp;lt;PostResponse&amp;gt;&amp;gt; getPostsBySubreddit(@PathVariable Long id, @RequestParam Optional&amp;lt;Integer&amp;gt; page) {
        return new ResponseEntity&amp;lt;&amp;gt;(postService.getPostsBySubreddit(page.orElse(0), id), HttpStatus.OK);
    }

    @GetMapping("/user/{name}")
    public ResponseEntity&amp;lt;Page&amp;lt;PostResponse&amp;gt;&amp;gt; getPostsByUsername(@PathVariable("name") String username, @RequestParam Optional&amp;lt;Integer&amp;gt; page) {
        return new ResponseEntity&amp;lt;&amp;gt;(postService.getPostsByUsername(username, page.orElse(0)), HttpStatus.OK);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;SubredditController: We will update all of the methods to implement sending ResponseEntity as well as support pagination
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    @GetMapping("/{page}")
    public ResponseEntity&amp;lt;Page&amp;lt;SubredditDTO&amp;gt;&amp;gt; getAllSubreddits (@PathVariable("page") Integer page) {
        return new ResponseEntity&amp;lt;&amp;gt;(subredditService.getAll(page), HttpStatus.OK);
    }

    @GetMapping("/sub/{id}")
    public ResponseEntity&amp;lt;SubredditDTO&amp;gt; getSubreddit(@PathVariable("id") Long id) {
        return new ResponseEntity&amp;lt;&amp;gt;(subredditService.getSubreddit(id), HttpStatus.OK);
    }

    @PostMapping
    public ResponseEntity&amp;lt;SubredditDTO&amp;gt; addSubreddit(@RequestBody @Valid SubredditDTO subredditDTO) throws Exception{
        try {
            return new ResponseEntity&amp;lt;&amp;gt;(subredditService.save(subredditDTO), HttpStatus.OK);
        } catch (Exception e) {
            throw new Exception("Error Creating Subreddit");
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#now-our-appliction-fully-supports-pagination-for-all-resources-that-could-grow-and-cause-slow-load-time-for-our-front-end-application"&gt;
  &lt;/a&gt;
  Now our appliction fully supports pagination for all resources that could grow and cause slow load time for our front end application!
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#part-5-refresh-token-class"&gt;
  &lt;/a&gt;
  Part 5: Refresh Token Class ‚è≥
&lt;/h2&gt;

&lt;p&gt;Now we need to create our RefreshToken class, this class will have a ID, token, and the creationDate associated with it to allow for invalidating tokens after a set amount of time.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RefreshToken:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.maxicb.backend.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import java.time.Instant;

@Data
@Entity
@AllArgsConstructor
@NoArgsConstructor
public class RefreshToken {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String token;
    private Instant creationDate;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#part-5-refresh-token-service-and-dto"&gt;
  &lt;/a&gt;
  Part 5: Refresh Token Service and DTOüåé
&lt;/h2&gt;

&lt;p&gt;Now that we have our RefreshToken, we will get everything in place to begin updating our Authentication system. Inside the project we will add, and update the following classes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RefreshTokenRepository:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.maxicb.backend.repository;

import com.maxicb.backend.model.RefreshToken;
import org.springframework.data.repository.PagingAndSortingRepository;

import java.util.Optional;

public interface RefreshTokenRepository extends PagingAndSortingRepository&amp;lt;RefreshToken, Long&amp;gt; {
    Optional&amp;lt;RefreshToken&amp;gt; findByToken(String token);

    void deleteByToken(String token);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;RefreshTokenService: This service will allow us to generate tokens, validate tokens, and delete tokens.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.maxicb.backend.service;

import com.maxicb.backend.exception.VoxNobisException;
import com.maxicb.backend.model.RefreshToken;
import com.maxicb.backend.repository.RefreshTokenRepository;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.util.UUID;

@Service
@AllArgsConstructor
@Transactional
public class RefreshTokenService {
    private RefreshTokenRepository refreshTokenRepository;

    RefreshToken generateRefreshToken () {
        RefreshToken refreshToken = new RefreshToken();
        refreshToken.setToken(UUID.randomUUID().toString());
        refreshToken.setCreationDate(Instant.now());
        return refreshTokenRepository.save(refreshToken);
    }

    void validateToken(String token) {
        refreshTokenRepository.findByToken(token)
                .orElseThrow(() -&amp;gt; new VoxNobisException("Invalid Refresh Token"));
    }

    public void deleteRefreshToken(String token) {
        refreshTokenRepository.deleteByToken(token);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Updated AuthResponse: We will update the AuthResponse to include our newly generated token.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import lombok.AllArgsConstructor;
import lombok.Data;

import java.time.Instant;

@Data
@AllArgsConstructor
public class AuthResponse {
        private String authenticationToken;
        private String refreshToken;
        private Instant expiresAt;
        private String username;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;RefreshTokenRequest: This DTO will handle requests from the client to refresh their token, before it expires in the system
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.maxicb.backend.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.validation.constraints.NotBlank;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class RefreshTokenRequest {
    @NotBlank
    private String refreshToken;
    private String username;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#part-6-jwtprovider-update"&gt;
  &lt;/a&gt;
  Part 6: JWTProvider Update üîè
&lt;/h2&gt;

&lt;p&gt;Now that we have everything in place, we will begin updating our JWT system. Inside &lt;strong&gt;com.your-name.backend.service&lt;/strong&gt; we will update the following classes. Keep in mind I will not be displaying the whole class in the section, but only the specific methods we will be updating.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JWTProvider: We will update our JWT implementation to include a issuedAt date, and also set a expiration date when we create a new token.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Service
public class JWTProvider {
    private KeyStore keystore;
    @Value("${jwt.expiration.time}")
    private Long jwtExpirationMillis;

    ...
    ....
    public String generateToken(Authentication authentication) {
        org.springframework.security.core.userdetails.User princ = (User) authentication.getPrincipal();
        return Jwts.builder()
                .setSubject(princ.getUsername())
                .setIssuedAt(from(Instant.now()))
                .signWith(getPrivKey())
                .setExpiration(from(Instant.now().plusMillis(jwtExpirationMillis)))
                .compact();
    }

    public String generateTokenWithUsername(String username) {
        return Jwts.builder()
                .setSubject(username)
                .setIssuedAt(from(Instant.now()))
                .signWith(getPrivKey())
                .setExpiration(from(Instant.now().plusMillis(jwtExpirationMillis)))
                .compact();
    }
    ....
    ...
    public Long getJwtExpirationMillis() {
        return jwtExpirationMillis;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#part-7-updated-authentication"&gt;
  &lt;/a&gt;
  Part 7: Updated Authentication üíÇ‚Äç‚ôÄÔ∏è
&lt;/h2&gt;

&lt;p&gt;Now that we implemented pagination, we will begin updating our Authentication system. Inside our project we will update the following classes. Keep in mind I will not be displaying the whole class in the section, but only the specific methods we will be updating.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AuthService: We will update our AuthService to handle sending refreshTokens, and add the logic for refreshing existing tokens.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public AuthResponse refreshToken(RefreshTokenRequest refreshTokenRequest) {
        refreshTokenService.validateToken(refreshTokenRequest.getRefreshToken());
        String token = jwtProvider.generateTokenWithUsername(refreshTokenRequest.getUsername());
        return new AuthResponse(token, refreshTokenService.generateRefreshToken().getToken(), Instant.now().plusMillis(jwtProvider.getJwtExpirationMillis()), refreshTokenRequest.getUsername());
    }

public AuthResponse login (LoginRequest loginRequest) {
        Authentication authenticate = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        loginRequest.getUsername(), loginRequest.getPassword()));
        SecurityContextHolder.getContext().setAuthentication(authenticate);
        String authToken = jwtProvider.generateToken(authenticate);
        String refreshToken = refreshTokenService.generateRefreshToken().getToken();
        return new AuthResponse(authToken, refreshToken, Instant.now().plusMillis(jwtProvider.getJwtExpirationMillis()), loginRequest.getUsername());
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;AuthController: We will now implement the new endpoints to allow the client to use the newly added logic.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@PostMapping("/refresh/token")
    public AuthResponse refreshToken(@Valid @RequestBody RefreshTokenRequest refreshTokenRequest) {
        return authService.refreshToken(refreshTokenRequest);
    }

    @PostMapping("/logout")
    public ResponseEntity&amp;lt;String&amp;gt; logout(@Valid @RequestBody RefreshTokenRequest refreshTokenRequest) {
        refreshTokenService.deleteRefreshToken(refreshTokenRequest.getRefreshToken());
        return ResponseEntity.status(HttpStatus.OK).body("Refresh Token Deleted");
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#part-8-custom-exception"&gt;
  &lt;/a&gt;
  Part 8: Custom Exception üö´
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;VoxNobisException: We will create a general purpose custom exception that can be used repeatedly throughout our application as we extend it.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.maxicb.backend.exception;

public class VoxNobisException extends RuntimeException {
    public VoxNobisException(String message) {super(message);}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#part-9-updated-applicationproperties"&gt;
  &lt;/a&gt;
  Part 9: Updated application.properties
&lt;/h2&gt;

&lt;p&gt;We will need to add the expiration time that we would like our application to use when it comes to generating tokens, and setting their expiration dates accordingly. I have chose to set it to 15 minutes, but in the future will increase the duration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# JWT Properties
jwt.expiration.time=900000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#part-10-implementing-swagger-ui"&gt;
  &lt;/a&gt;
  Part 10: Implementing Swagger UI üìÉ
&lt;/h2&gt;

&lt;p&gt;Now that we are at the end of our MVP backend, we will add Swagger UI. If you have never used Swagger before, it is a great way to automatically generate documentation for your API. You can learn more &lt;a href="https://swagger.io/tools/swagger-ui/"&gt;here!&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pom.xml: We will need to include the swagger dependencies inside our project's pom.xml file.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;springfox-swagger2&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.9.2&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;springfox-swagger-ui&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.9.2&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;SwaggerConfig: Inside &lt;strong&gt;com.your-name.backend.config&lt;/strong&gt; we will create the following class.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@Configuration
@EnableSwagger2
public class SwaggerConfig {
    @Bean
    public Docket voxNobisAPI() {
        return new Docket(DocumentationType.SWAGGER_2)
                .select()
                .apis(RequestHandlerSelectors.any())
                .paths(PathSelectors.any())
                .build()
                .apiInfo(getAPIInfo());
    }

    private ApiInfo getAPIInfo(){
        return new ApiInfoBuilder()
                .title("Vox-Nobis API")
                .version("1.0")
                .description("API for Vox-Nobis reddit clone")
                .build();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;BackendApplication: Inside &lt;strong&gt;com.your-name.backend&lt;/strong&gt; we will inject our Swagger configuration.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@SpringBootApplication
@EnableAsync
@Import(SwaggerConfig.class)
public class BackendApplication {
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Security: If you run the application now, and try to navigate to &lt;strong&gt;&lt;a href="http://localhost:8080/swagger-ui.html#/"&gt;http://localhost:8080/swagger-ui.html#/&lt;/a&gt;&lt;/strong&gt;, you will likely get a 403 forbidden error. Inside &lt;strong&gt;com.your-name.backend.config&lt;/strong&gt; we will need to update our security configuration to allow access without authorization by adding the following matchers underneath our existing one.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.antMatchers(HttpMethod.GET, "/api/subreddit")
.permitAll()
.antMatchers("/v2/api-docs",
            "/configuration/ui",
            "/swagger-resources/**",
            "/configuration/security",
            "/swagger-ui.html",
            "/webjars/**")
.permitAll()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion üîç
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;To ensure everything is configured correctly you can run the application, and ensure there are no error in the console. Towards the bottom of the console you should see output similar to below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZgbYnXkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mcnzflm8vjwnvjcx40sh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZgbYnXkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mcnzflm8vjwnvjcx40sh.PNG" alt="Alt Text" title="Successful Run"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If there are no error's in the console you can test the new logic by sending a post request to &lt;strong&gt;&lt;a href="http://localhost:8080/api/auth/login"&gt;http://localhost:8080/api/auth/login&lt;/a&gt;&lt;/strong&gt; with the correct data, upon successful login you should receive the refreshToken, and username back now!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also navigate to &lt;strong&gt;&lt;a href="http://localhost:8080/swagger-ui.html#/"&gt;http://localhost:8080/swagger-ui.html#/&lt;/a&gt;&lt;/strong&gt;, and view the documentation for all of the endpoints we have created, as well as the information they need, and return.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this article we added pagination, and token expiration times.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#next"&gt;
  &lt;/a&gt;
  Next
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#follow-to-get-informed-when-part-ten-is-released-where-we-will-begin-working-on-the-front-end-of-the-application"&gt;
  &lt;/a&gt;
  Follow to get informed when part ten is released, where we will begin working on the Front End of the application!
&lt;/h3&gt;

</description>
      <category>react</category>
      <category>java</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How Have Fedora of Mine Been</title>
      <author>Naufan Rusyda Faikar</author>
      <pubDate>Sat, 19 Jun 2021 02:30:54 +0000</pubDate>
      <link>https://dev.to/naruaika/how-have-fedora-of-mine-been-439j</link>
      <guid>https://dev.to/naruaika/how-have-fedora-of-mine-been-439j</guid>
      <description>&lt;p&gt;I, &lt;em&gt;sometimes&lt;/em&gt;, love being as a researcher. In just a minute or two, my machine, &lt;em&gt;oftentimes&lt;/em&gt;, ended up be a mess. Hearing of Fedora thirty-four which has just officially launched, doing a fresh install of the operating system (OS) had been emerging in my mind, &lt;em&gt;all the time&lt;/em&gt;. But how could clean installation clean up the mess? Nay, that is not possible! Once I got my hands dirty, everything will not be alright. Consequently, I have thoughts of keeping myself away from messing around for this time.&lt;/p&gt;

&lt;p&gt;As many of people in many different communities have mentioned what is new in the thirty-four edition, followed by how-tos when installing Fedora for the first time, or even again, I have nothing more to share. Still and all, it is rather not a bad idea to capture and talk about decisions I have made.&lt;/p&gt;

&lt;p&gt;Most of people will do update all the pre-installed packages on their newly installed operating system, so did I. On Fedora, to update/upgrade packages, we need to do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;dnf &lt;span class="nt"&gt;--assumeyes&lt;/span&gt; upgrade
...

&lt;span class="nv"&gt;$ &lt;/span&gt;systemctl reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thereafter, I started to setup this armament of mine.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1"&gt;
  &lt;/a&gt;
  #1
&lt;/h1&gt;

&lt;p&gt;I have concerned that my cheap wireless earbuds is not working correctly on &lt;a href="https://pipewire.org/"&gt;PipeWire&lt;/a&gt;. There are audio skips and out-of-sync issues, constantly. So, I have decided to switch back to &lt;a href="https://www.freedesktop.org/wiki/Software/PulseAudio/"&gt;PulseAudio&lt;/a&gt; by:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;dnf swap &lt;span class="nt"&gt;--allowerasing&lt;/span&gt; pipewire-pulseaudio pulseaudio
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I will give PipeWire a second chance after hearing that this issue is resolved in the upstream. Until then, we are done. Or until someone gives me more supported earbuds. LOL.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2"&gt;
  &lt;/a&gt;
  #2
&lt;/h1&gt;

&lt;p&gt;To play a wide variety of multimedia, especially those with restricted codecs, we need to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Enable the RPMFusion repositories&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;dnf &lt;span class="nb"&gt;install &lt;/span&gt;https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-&lt;span class="si"&gt;$(&lt;/span&gt;rpm &lt;span class="nt"&gt;-E&lt;/span&gt; %fedora&lt;span class="si"&gt;)&lt;/span&gt;.noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-&lt;span class="si"&gt;$(&lt;/span&gt;rpm &lt;span class="nt"&gt;-E&lt;/span&gt; %fedora&lt;span class="si"&gt;)&lt;/span&gt;.noarch.rpm
...

&lt;span class="c"&gt;# Install the restricted codecs&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;group upgrade &lt;span class="nt"&gt;--with-optional&lt;/span&gt; Multimedia
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, I can now play all of them using the default video player on Fedora, &lt;a href="https://wiki.gnome.org/Apps/Videos"&gt;GNOME Videos&lt;/a&gt;, or formerly known as Totem. I know, it is not the best choice, but it just worked for me.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3"&gt;
  &lt;/a&gt;
  #3
&lt;/h1&gt;

&lt;p&gt;Since my machine has a dedicated graphics processing unit (GPU), the GeForce GTX 10 Series for mobile, I have also grabbed the proprietary driver by:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;dnf &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; akmod-nvidia
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then restart my machine once again.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4"&gt;
  &lt;/a&gt;
  #4
&lt;/h1&gt;

&lt;p&gt;We are all know that technology is changing too fast these days. They are unpredictable anymore. It seems like every day, new programming languages and frameworks are born. Sometimes they are solutions, sometimes they are new problems.&lt;/p&gt;

&lt;p&gt;As a software developer, or even just a normal computer user, the need to testing out which tool works best cannot be avoided. This is the another reason why my Fedora-yey is getting bloated and unkempt by the day.&lt;/p&gt;

&lt;p&gt;I was thinking to keep my host as minimum as possible by installing all the generic software‚Äîsuch as multimedia players, internet browsers, and text editors‚Äîon the host and separating all the specific things into container groups.&lt;/p&gt;

&lt;p&gt;Gratefully, Fedora comes with &lt;a href="https://podman.io/"&gt;Podman&lt;/a&gt; and &lt;a href="https://github.com/containers/toolbox"&gt;Toolbox&lt;/a&gt; pre-installed. Let us take the curiosity out by looking into how I organised my workspaces into groups.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;podman ps &lt;span class="nt"&gt;-a&lt;/span&gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; toolbox
CONTAINER ID  IMAGE                                         COMMAND               CREATED       STATUS                      PORTS                   NAMES
45da333221a9  docker.io/vulnerables/web-dvwa:latest                               5 weeks ago   Created                     0.0.0.0:8080-&amp;gt;80/tcp    dvwa
00cd783bf551  docker.io/raesene/bwapp:latest                /run.sh               5 weeks ago   Exited &lt;span class="o"&gt;(&lt;/span&gt;137&lt;span class="o"&gt;)&lt;/span&gt; 5 weeks ago    0.0.0.0:8080-&amp;gt;80/tcp    bwapp
6d248675f778  docker.io/bkimminich/juice-shop:latest        npm start             5 weeks ago   Exited &lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt; 5 weeks ago      0.0.0.0:8080-&amp;gt;3000/tcp  juice-shop
feea59da1a18  docker.io/szsecurity/webgoat:latest           /usr/bin/supervis...  5 weeks ago   Exited &lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt; 5 weeks ago      0.0.0.0:8080-&amp;gt;80/tcp    webgoat
7f791fa949e1  docker.io/library/postgres:latest             postgres              40 hours ago  Created                                             postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For other cases, I need to have them installed on the root;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;podman ps &lt;span class="nt"&gt;-a&lt;/span&gt;
CONTAINER ID  IMAGE                                      COMMAND               CREATED      STATUS                    PORTS                                           NAMES
cef6fbe452f6  docker.io/tleemcjr/metasploitable2:latest  sh &lt;span class="nt"&gt;-c&lt;/span&gt; /bin/servic...  4 weeks ago  Exited &lt;span class="o"&gt;(&lt;/span&gt;137&lt;span class="o"&gt;)&lt;/span&gt; 4 weeks ago                                                  metasploitable
db82745c519b  k8s.gcr.io/pause:3.5                                             2 weeks ago  Created                   0.0.0.0:3000-&amp;gt;3000/tcp, 0.0.0.0:3306-&amp;gt;3306/tcp  18235f9b87b5-infra
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Having those containers, I rarely boot up GNU/Linux OSes with GNOME Boxes. Although, I still need them for a couple of things.&lt;/p&gt;

&lt;p&gt;You might noticed that all the above containers can be easily obtained by, for instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Download the PostgreSQL image&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;podman pull docker.io/library/postgres
...

&lt;span class="c"&gt;# Create and run a new PostgreSQL container&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;podman run &lt;span class="nt"&gt;--name&lt;/span&gt; postgres &lt;span class="nt"&gt;--network&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;host &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;pass &lt;span class="nt"&gt;-d&lt;/span&gt; postgres
...

&lt;span class="c"&gt;# Enter the PostgreSQL client&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;podman &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; postgres psql &lt;span class="nt"&gt;-U&lt;/span&gt; postgres
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each one is pre-configured by every great maintainers around the globe; nothing more to configure anything. But what if I want to customise a container from scratch? Meaning, just give me a &lt;code&gt;rootfs&lt;/code&gt; (if I am not mistaken) and I will do the rest. In this case, Toolbox has &lt;a href="https://docs.fedoraproject.org/en-US/fedora-silverblue/toolbox/"&gt;some advantages&lt;/a&gt; over the other;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;toolbox list

IMAGE ID      IMAGE NAME                                    CREATED
9c649cf455d4  registry.fedoraproject.org/fedora-toolbox:34  7 weeks ago

CONTAINER ID  CONTAINER NAME  CREATED      STATUS      IMAGE NAME
25dba789f9c7  build-tool      13 days ago  exited      registry.fedoraproject.org/fedora-toolbox:34
17e258afdc85  games           6 days ago   exited      registry.fedoraproject.org/fedora-toolbox:34
b1263fcbb2f3  iot-dev         3 days ago   configured  registry.fedoraproject.org/fedora-toolbox:34
788dea945c07  mobile-dev      7 days ago   configured  registry.fedoraproject.org/fedora-toolbox:34
b68dcf5c322f  texlive         6 weeks ago  configured  registry.fedoraproject.org/fedora-toolbox:34
709bab881755  web-dev         13 days ago  exited      registry.fedoraproject.org/fedora-toolbox:34
6317f74b06ae  web-sec         5 weeks ago  exited      registry.fedoraproject.org/fedora-toolbox:34
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whensoever it is required to build a package from the source code, I will do so in the &lt;code&gt;build-tool&lt;/code&gt; container and grab the executable to the host if needed. This is pretty much where I installed the &lt;code&gt;-devel&lt;/code&gt; packages.&lt;/p&gt;

&lt;p&gt;I have all games, with all the dependencies for the &lt;code&gt;wine&lt;/code&gt; to run correctly, installed in the &lt;code&gt;games&lt;/code&gt; container. Despite being not a pro gamer, but rather a programmer, I have included Steam as well.&lt;/p&gt;

&lt;p&gt;Although we have installed the GPU driver and have fully access to the GPU from the box, out-of-the-box, until now we need to install the driver &lt;em&gt;again&lt;/em&gt; inside the box (read: container). There is &lt;a href="https://github.com/containers/toolbox/issues/116"&gt;a discussion&lt;/a&gt; and work-in-progress solution for this.&lt;/p&gt;

&lt;p&gt;By the way, do not forget to set the launch game options with &lt;code&gt;__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia %command%&lt;/code&gt; to every Steam games to run it using the Nvidia GPU.&lt;/p&gt;

&lt;p&gt;For programming, I have &lt;code&gt;iot-dev&lt;/code&gt;, &lt;code&gt;mobile-dev&lt;/code&gt;, and &lt;code&gt;web-dev&lt;/code&gt; containers, even though they can all be put together (not to-get-her, sorry) into a single container.&lt;/p&gt;

&lt;p&gt;For writing, as I prefer LaTeX to LibreOffice Writer and Google Docs, I have created &lt;code&gt;texlive&lt;/code&gt; container. Why not the host? Is not it a generic-purpose software? Because of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;dnf &lt;span class="nb"&gt;install &lt;/span&gt;texlive-scheme-full
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are so many packages that need to be installed, whoops, that is it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5"&gt;
  &lt;/a&gt;
  #5
&lt;/h1&gt;

&lt;p&gt;Firefox is by default comes with Fedora Workstation installation. I love Firefox, she is a nice friend, not a pet. But I love Firefox Developer Edition more. So, sorry, got to move on. Unluckly, there is not any Firefox Developer Edition in the official Fedora repository. Therefore, I had to download the &lt;code&gt;tar&lt;/code&gt; file, extract, and install it manually.&lt;/p&gt;

&lt;p&gt;By the way, Firefox has its own way to get an update, thus need not to do it by hand. It means no more downloading, extracting, and installing it manually.&lt;/p&gt;

&lt;p&gt;Apparently, Visual Studio Code (VSCode) Insider has no idea about this behaviour. But it is relatively easier to install compared to Firefox Developer Edition.&lt;/p&gt;

&lt;p&gt;Besides these two, I have also installed Krita, GIMP, and Inkscape for daily use. For Krita, I am not using it for creating artworks, but for writing/sketching notes (please, do not blame me). For setting up my programmable mouse, I have &lt;a href="https://github.com/libratbag/piper/"&gt;Piper&lt;/a&gt;. For recording my screen, I have chosen &lt;a href="https://github.com/SeaDve/Kooha"&gt;Kooha&lt;/a&gt;. For connecting my desktop to mobile devices, I have been using &lt;a href="https://github.com/GSConnect/gnome-shell-extension-gsconnect"&gt;GSConnect&lt;/a&gt;. And it goes on ... As everyone has their own preferences.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6"&gt;
  &lt;/a&gt;
  #6
&lt;/h1&gt;

&lt;p&gt;You might be wondering, how do I compile &lt;code&gt;*.tex&lt;/code&gt; files? The host does not have LaTeX compiler, but the &lt;code&gt;texlive&lt;/code&gt; container does. With Visual Studio Code, it is easy to remote access to the container.&lt;/p&gt;

&lt;p&gt;First of all, let us run and enter the container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;toolbox enter texlive
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Second, give write permission to the &lt;code&gt;/root&lt;/code&gt; directory for our user. This is important for the VSCode to write server configuration files to the &lt;code&gt;/root&lt;/code&gt;. In spite of not the best workaround, I tend to change the ownership instead;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo chown&lt;/span&gt; &lt;span class="nt"&gt;-R&lt;/span&gt; naru /root

&lt;span class="c"&gt;# ls -la /&lt;/span&gt;
total 20
...
drwxr-x---.   9 naru   root    420 Jun 19 09:04 root
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Third, attach the VSCode to the running container named &lt;code&gt;texlive&lt;/code&gt;. We need the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers"&gt;&lt;code&gt;Remote - Containers&lt;/code&gt;&lt;/a&gt; extension installed on the VSCode.&lt;/p&gt;

&lt;p&gt;Forth, open a folder contains our LaTeX files.&lt;/p&gt;

&lt;p&gt;Fifth, happy writing! You probably would like to install &lt;a href="https://marketplace.visualstudio.com/items?itemName=James-Yu.latex-workshop"&gt;&lt;code&gt;LaTeX Workshop&lt;/code&gt;&lt;/a&gt; extension for VSCode.&lt;/p&gt;

&lt;p&gt;We actually need not to enter the &lt;code&gt;texlive&lt;/code&gt; container, just run it. So, we can safely &lt;code&gt;exit&lt;/code&gt; from the container now. Next time, make sure to run the container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;toolbox run &lt;span class="nt"&gt;-c&lt;/span&gt; texlive &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;before VSCode, if not already run.&lt;/p&gt;

&lt;p&gt;That is all. Appreciate any feedback from all of you. Feel free to share your setup with us. Have a nice day!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fedoraproject.org/wiki/Changes/DefaultPipeWire"&gt;https://fedoraproject.org/wiki/Changes/DefaultPipeWire&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rpmfusion.org/Configuration"&gt;https://rpmfusion.org/Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rpmfusion.org/Howto/Multimedia?highlight=%28%5CbCategoryHowto%5Cb%29"&gt;https://rpmfusion.org/Howto/Multimedia?highlight=%28%5CbCategoryHowto%5Cb%29&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rpmfusion.org/Howto/NVIDIA?highlight=%28%5CbCategoryHowto%5Cb%29"&gt;https://rpmfusion.org/Howto/NVIDIA?highlight=%28%5CbCategoryHowto%5Cb%29&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.fedoraproject.org/en-US/fedora-silverblue/toolbox/"&gt;https://docs.fedoraproject.org/en-US/fedora-silverblue/toolbox/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://support.steampowered.com/kb_article.php?ref=1040-JWMT-2947"&gt;https://support.steampowered.com/kb_article.php?ref=1040-JWMT-2947&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://download.nvidia.com/XFree86/Linux-x86_64/435.17/README/primerenderoffload.html"&gt;https://download.nvidia.com/XFree86/Linux-x86_64/435.17/README/primerenderoffload.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.fedoraproject.org/en-US/neurofedora/latex/"&gt;https://docs.fedoraproject.org/en-US/neurofedora/latex/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/containers/toolbox/issues/610#issuecomment-726057756"&gt;https://github.com/containers/toolbox/issues/610#issuecomment-726057756&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>linux</category>
      <category>fedora</category>
    </item>
    <item>
      <title>Making Styles Repeatable: Dynamic Styling in React using Styled Components</title>
      <author>Shaundai Person</author>
      <pubDate>Fri, 18 Jun 2021 23:20:28 +0000</pubDate>
      <link>https://dev.to/shaundai/making-styles-repeatable-dynamic-styling-in-react-using-styled-components-5afl</link>
      <guid>https://dev.to/shaundai/making-styles-repeatable-dynamic-styling-in-react-using-styled-components-5afl</guid>
      <description>&lt;p&gt;The &lt;a href="https://styled-components.com/"&gt;styled-components library&lt;/a&gt; makes it easy to create dynamic styles.  At the most fundamental level, Styled Components are just React components with CSS styles attached.  Thus, they can be used the same way we'd use any React component.  Styled Components also come with out-of-the-box constructors that allow you to pass props and functions into your styles, which is what gives them their dynamic abilities.&lt;/p&gt;

&lt;p&gt;Before we get into the &lt;em&gt;how&lt;/em&gt; though, let‚Äôs talk about the &lt;em&gt;why&lt;/em&gt;.  Why would we want to use dynamic styles in our React apps?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DRY and Maintainable:&lt;/strong&gt; Instead of declaring the same styles again and again each time you need them, dynamic styles are declared once and exported as needed.  This means that any future changes to styles only need to be made in one place.  When you Don‚Äôt Repeat Yourself (DRY), maintaining and updating your codebase is simpler.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Less Error Prone:&lt;/strong&gt; Now that we only need to make our changes in one place, it's also less likely we‚Äôll accidentally miss a change somewhere.  For this reason, DRY code (via dynamic styling) is more trustworthy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Clean and Easy to Read:&lt;/strong&gt; Dynamic styling allows us to change up our styles without injecting or removing class names, making our stylesheets shorter and cleaner.  Styles can even be declared &lt;em&gt;within&lt;/em&gt; the &lt;code&gt;.js&lt;/code&gt; file using the styles, making them really easy to find later!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#starting-with-a-basic-button"&gt;
  &lt;/a&gt;
  Starting with a Basic Button
&lt;/h3&gt;

&lt;p&gt;Start by declaring a variable with a descriptive name (like &lt;code&gt;PrimaryButton&lt;/code&gt; below) and setting it equal to &lt;code&gt;styled.[HTML-element-we-want-to-use]&lt;/code&gt;.  The styles are declared between two backticks at the end of the Styled Component declaration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PrimaryButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
  background-color: darkcyan;
  color: white;

  border-radius: 8px;
  border-color: transparent;
  width: 250px;
  padding: 14px;
  font: 20px Georgia;
  &amp;amp;&amp;amp;:hover {
    background-color: rgb(0,139,139,0.5);
  } 
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;PrimaryButton&lt;/code&gt; contains a lot of styles that we'll be using frequently in our app.  Luckily - since &lt;code&gt;PrimaryButton&lt;/code&gt; is fundamentally a React Component - we don't need to retype these styles each time we need to use them.  We also don't need to worry about adding class names to link our styles to a separate stylesheet.  To use &lt;code&gt;PrimaryButton&lt;/code&gt; styles, all we do is swap the old HTML element &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...with our new &lt;code&gt;PrimaryButton&lt;/code&gt; Styled Component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PrimaryButton&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/PrimaryButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If our marketing team later decides to change our app‚Äôs theme colors from &lt;code&gt;darkcyan&lt;/code&gt; to &lt;code&gt;green&lt;/code&gt;, all we need to do is make a one-line change to &lt;code&gt;PrimaryButton&lt;/code&gt; to change &lt;em&gt;all&lt;/em&gt; instances of &lt;code&gt;PrimaryButton&lt;/code&gt; to &lt;code&gt;green&lt;/code&gt; at once.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extending-custom-styles"&gt;
  &lt;/a&gt;
  Extending Custom Styles
&lt;/h3&gt;

&lt;p&gt;What if we want two different-but-fairly-similar types of buttons in our app?  For instance, what if our primary buttons are &lt;code&gt;darkcyan&lt;/code&gt;, but we also want some buttons with a &lt;code&gt;red&lt;/code&gt; background to indicate to users that an action is permanent?  Other than the color, these red ‚Äúdestructive buttons‚Äù will be identical to the &lt;code&gt;PrimaryButtons&lt;/code&gt; we built in the previous example.&lt;/p&gt;

&lt;p&gt;Rather than creating a new class for our destructive style, we &lt;em&gt;extend&lt;/em&gt; the &lt;code&gt;PrimaryButton&lt;/code&gt; styles that we want to use and override the styles we don‚Äôt need.  This is all the code we need to tell Styled Components ‚Äú&lt;code&gt;PrimaryButton&lt;/code&gt;, but red.‚Äù:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;DestructiveButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PrimaryButton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;`
  color: ‚Äòred‚Äô;
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use our new &lt;code&gt;DestructiveButton&lt;/code&gt; in place of &lt;code&gt;PrimaryButton&lt;/code&gt; wherever we'd like the &lt;code&gt;red&lt;/code&gt; buttons to appear. Our code is much cleaner and easier to maintain.  If our marketing team comes back and wants to change the padding for all buttons to &lt;code&gt;12px&lt;/code&gt; instead of &lt;code&gt;14px&lt;/code&gt;, we only need to change the single padding declaration in &lt;code&gt;PrimaryButton&lt;/code&gt; to update the padding for &lt;em&gt;all&lt;/em&gt; buttons, Primary and Destructive alike.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-styles-dynamic"&gt;
  &lt;/a&gt;
  Making Styles Dynamic
&lt;/h3&gt;

&lt;p&gt;Now let‚Äôs get into the dynamic styling.  In this example, we want a button to be &lt;code&gt;darkcyan&lt;/code&gt; some of the time and &lt;code&gt;red&lt;/code&gt; some of the time (for example, the submit button on a form that only turns red when the user has entered invalid information).&lt;/p&gt;

&lt;p&gt;How can we make our styles change based on the current status of elements in our UI?  If we were using just CSS, we'd need to add or remove a class when the input is empty.  If we were using React, we might use a function that accepts props.  Based on the value in those props, our function could set the color equal to either &lt;code&gt;red&lt;/code&gt; or &lt;code&gt;darkcyan&lt;/code&gt;.  Since Styled Components is just React, we have an easy way of doing the latter.&lt;/p&gt;

&lt;p&gt;Styled Components comes with an Attributes constructor (&lt;code&gt;attrs&lt;/code&gt;) that accepts static props or dynamic props.  We're going to use dynamic props for this example.&lt;/p&gt;

&lt;p&gt;We start from scratch with a styled button component - &lt;code&gt;MainButton&lt;/code&gt; - which can dynamically render three variants: &lt;code&gt;primary&lt;/code&gt;, &lt;code&gt;destructive&lt;/code&gt;, and &lt;code&gt;line&lt;/code&gt; (inverted &lt;code&gt;primary&lt;/code&gt; colors).  We'll use the &lt;code&gt;attrs&lt;/code&gt; constructor to make the &lt;code&gt;background-color&lt;/code&gt;, &lt;code&gt;border-color&lt;/code&gt; colors, and &lt;code&gt;hover&lt;/code&gt; colors change dynamically.&lt;/p&gt;

&lt;p&gt;Below, we start with three objects each defining the colors by variant.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ButtonBackgroundColors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;darkcyan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;destructive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ButtonBorderColors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;transparent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;destructive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;transparent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;darkcyan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ButtonHoverColors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rgb(0,139,139,0.5)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;destructive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rgb(255,0,0,0.5)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rgb(0,139,139,0.5)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use &lt;code&gt;attrs&lt;/code&gt;, we add it onto the end of the template literal declaration.  &lt;code&gt;attrs&lt;/code&gt; accepts a function that takes in the &lt;code&gt;props&lt;/code&gt; from our instance of &lt;code&gt;&amp;lt;MainButton&amp;gt;&lt;/code&gt;. The &lt;code&gt;attrs&lt;/code&gt; function returns an object, and we've set those &lt;code&gt;props&lt;/code&gt; equal to the object's keys.  In other words, to use &lt;code&gt;colorVariant&lt;/code&gt; in an instance of &lt;code&gt;MainButton&lt;/code&gt;, all we need to do is add colorVariant as a prop like this: &lt;code&gt;&amp;lt;MainButton colorVariant="primary"&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is good practice to also include a fallback or default option in case the developer does not add any &lt;code&gt;colorVariant&lt;/code&gt; props to &lt;code&gt;MainButton&lt;/code&gt;.  Setting &lt;code&gt;colorVariant&lt;/code&gt; equal to either &lt;code&gt;props.colorVariant&lt;/code&gt; or &lt;code&gt;'primary'&lt;/code&gt; means that if &lt;code&gt;colorVariant&lt;/code&gt; is not present, we will always use &lt;code&gt;primary&lt;/code&gt; as our variant.&lt;/p&gt;

&lt;p&gt;In this example we're only changing colors using a &lt;code&gt;colorVariant&lt;/code&gt; prop, but the variant possibilities are endless!  In the future, if we wanted to add, say, a &lt;code&gt;sizeVariant&lt;/code&gt; that manipulates the height, width, and padding of the button based on variants of &lt;code&gt;small&lt;/code&gt;, &lt;code&gt;medium&lt;/code&gt;, and &lt;code&gt;large&lt;/code&gt;, we could add that to our object as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MainButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorVariant&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;primary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;&lt;span class="s2"&gt;`
  background-color: darkcyan;
  color: white;

  border-radius: 8px;
  border-color: transparent;
  width: 250px;
  padding: 14px;
  font: 20px Georgia;
  &amp;amp;&amp;amp;:hover {
    background-color: rgb(0,139,139,0.5);
    }
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far, we've told &lt;code&gt;MainButton&lt;/code&gt; to look out for the &lt;code&gt;colorVariant&lt;/code&gt; prop, but we haven't yet provided it our colors.  Let's start with &lt;code&gt;background-color&lt;/code&gt;.  Below, we set it equal to a function that accepts the &lt;code&gt;props&lt;/code&gt; from &lt;code&gt;attrs&lt;/code&gt;.  We return the property in &lt;code&gt;ButtonBackgroundColors&lt;/code&gt; that has the color variant we used (in this case, &lt;code&gt;primary&lt;/code&gt;) as a key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PrimaryButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;&lt;span class="s2"&gt;`
  background-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ButtonBackgroundColors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
  color: white;

  border-radius: 8px;
  border-color: transparent;
  width: 250px;
  padding: 14px;
  font: 20px Georgia;
  &amp;amp;&amp;amp;:hover {
    background-color: rgb(0,139,139,0.5);
    }
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, we can make our color function a bit cleaner using object destructuring.  Below, we destructure &lt;code&gt;props&lt;/code&gt; in our declaration function for &lt;code&gt;background-color&lt;/code&gt;.  (Note, the code in &lt;code&gt;background-color&lt;/code&gt; below does exactly the same thing as the &lt;code&gt;background-color&lt;/code&gt; above.  Destructuring as we've done below is a matter of personal preference).&lt;/p&gt;

&lt;p&gt;We also use our &lt;code&gt;ButtonBorderColors&lt;/code&gt; and &lt;code&gt;ButtonHoverColors&lt;/code&gt; objects to give dynamic styling to &lt;code&gt;border-color&lt;/code&gt; and &lt;code&gt;hover&lt;/code&gt; &lt;code&gt;background-color&lt;/code&gt;.  &lt;code&gt;props&lt;/code&gt; has been destructured in their declaration as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PrimaryButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;&lt;span class="s2"&gt;`
  background-color: &lt;/span&gt;&lt;span class="p"&gt;${({&lt;/span&gt;&lt;span class="nx"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ButtonBackgroundColors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
  color: &lt;/span&gt;&lt;span class="p"&gt;${({&lt;/span&gt;&lt;span class="nx"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ButtonTextColors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;

  border-radius: 8px;
  border-color: transparent;
  width: 250px;
  padding: 14px;
  font: 20px Georgia;
  &amp;amp;&amp;amp;:hover {
    background-color: &lt;/span&gt;&lt;span class="p"&gt;${({&lt;/span&gt;&lt;span class="nx"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ButtonHoverColors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;colorVariant&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
    }
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we're ready to use our dynamic styles!  We can provide props to our button like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MainButton&lt;/span&gt; &lt;span class="nx"&gt;colorVariant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;destructive&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Press&lt;/span&gt; &lt;span class="nx"&gt;Me&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/MainButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or we have the option of using a function that passes in the correct color based on props or events:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MainButton&lt;/span&gt; &lt;span class="nx"&gt;colorVariant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getColorVariantFunction&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Press&lt;/span&gt; &lt;span class="nx"&gt;Me&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/MainButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Dynamic styling gives us clean, DRY code that can be easily reused.  Our codebase is more trustworthy and easier to maintain; any future changes only need to be made in one place.  Best of all, we have a way to change styles without the messiness of adding class names, eliminating the chances of making silly errors that cause bugs in production.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;I'm building a TypeScript course - TypeScript for JavaScript Developers&lt;/em&gt;!  &lt;b&gt;Sign up for updates &lt;a href="https://www.tsforjs.com"&gt;here&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;...or find me on &lt;a href="https://twitter.com/shaundai"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>react</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Deploy your React App using Github Pages.</title>
      <author>Gus Bikos</author>
      <pubDate>Fri, 18 Jun 2021 23:06:28 +0000</pubDate>
      <link>https://dev.to/gusbikos/deploy-your-react-app-using-github-pages-27f8</link>
      <guid>https://dev.to/gusbikos/deploy-your-react-app-using-github-pages-27f8</guid>
      <description>&lt;p&gt;If you don't have any hosting at the moment and you want to use something free Github is a very good option.  In this step by step tutorial I will be going over the process of creating and deploying a React application.  &lt;/p&gt;

&lt;p&gt;Before the process gets started we need to make sure we have the following installed: &lt;br&gt;
Node.js - &lt;a href="https://nodejs.org/en/download/"&gt;https://nodejs.org/en/download/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Once that's installed you can head over to your terminal/text editor and decide where you would like to create your react application.  Now that your ready to create your app you type the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init react-app &amp;lt;your project name here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should take about a minute as you are now creating your new react application and all the files that comes with it.  &lt;/p&gt;

&lt;p&gt;Then you want to cd into the folder that contains your application.  Run a npm start to make sure that your application is running, and you should see a tab open with the react logo.  If your able to see that then your react application loaded successfully.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that your react app is all set head over to your Github page and create a new repository. I personally like to name my repository and my react app the same but it's ok to have a different name if you like. Make sure its a public, and empty repository so make sure there is no README.md, description etc.&lt;/p&gt;

&lt;p&gt;You will see this page &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0du6yTkr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghjo978hw6ftfn3rv4y5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0du6yTkr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghjo978hw6ftfn3rv4y5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Leave that open for now and lets move on to the next step.&lt;/p&gt;

&lt;p&gt;Make sure your server is shut down by hitting ctrl+C and run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install gh-pages --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we install the github pages and we save it as a dev dependancy. Explanation of a dev dependency here &lt;a href="https://nodejs.dev/learn/npm-dependencies-and-devdependencies"&gt;https://nodejs.dev/learn/npm-dependencies-and-devdependencies&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that's installed you want to head over to your react application in your text editor, and go into your package.json, here we need to add a few things.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_BdjLZ6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ym2hyuq2yu0zflk4mu7f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_BdjLZ6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ym2hyuq2yu0zflk4mu7f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the very top above "name" your going to add "homepage": "http://"your-github-name".github.io/"your-repo-name", don't forget to add the comma.  This is going to be the link to your web application.&lt;/p&gt;

&lt;p&gt;Then your going to navigate where it says "scripts" and in that hash you are going to add two things:&lt;br&gt;
"predeploy": "npm run build",&lt;br&gt;
"deploy": "gh-pages -d build",&lt;br&gt;
so the final product looks like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xt7WBDE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/av8k31gfkfa18sqse6g2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xt7WBDE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/av8k31gfkfa18sqse6g2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Refer to the picture above to see the differences.&lt;/p&gt;

&lt;p&gt;Next step in your text editor (make sure you are in the right folder) type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now go back to your Github page where you created the repo earlier, make sure your link it set to HTTPS:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ywLhiQT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6c48ssahxnyxw9wagaxb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ywLhiQT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6c48ssahxnyxw9wagaxb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy where it says git remote add origin  and  paste it into your text editor.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XXhDthQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exn8syihxyv772x0ib66.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XXhDthQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exn8syihxyv772x0ib66.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
This will create a remote repository called origin.  You can check if its running by running these two commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Shows you your origin branch&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Shows you the link of your repo.  These are good ways to check if everything is synced correctly.&lt;/p&gt;

&lt;p&gt;Navigate to your src/App.js and delete all the react code that is there.  Inside the return in your App function you can add some HTML there and see if any changes are made to your site.  You can run another npm start and see the changes made to your page. &lt;/p&gt;

&lt;p&gt;Your app is not fully deployed yet there are a few more steps!&lt;/p&gt;

&lt;p&gt;In this next step we will push our code up into the repo.  Run these git commands in your terminal one at a time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add . 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "Deploy my React app to Github Pages"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last thing were missing is to deploy our application from here to Github, so you must run this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next step will be to push our code to Github:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! Now all your code is successfully pushed up and your site is up and running!&lt;/p&gt;

&lt;p&gt;Now you want to head over to your repository on your GitHub, click on Settings, and on the left hand side scroll down a bit until you see Pages.  Inside there you will see a green box and green text notifying you that your website is published at that link!  &lt;/p&gt;

&lt;p&gt;Using Github Pages is great for your personal portfolio, or even react projects and the great thing is that it's free! &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Aplica el Patr√≥n Pipeline en Laravel</title>
      <author>Herminio Heredia Santos</author>
      <pubDate>Fri, 18 Jun 2021 22:29:06 +0000</pubDate>
      <link>https://dev.to/herminioheredia/aplica-el-patron-pipeline-en-laravel-45ef</link>
      <guid>https://dev.to/herminioheredia/aplica-el-patron-pipeline-en-laravel-45ef</guid>
      <description>&lt;p&gt;El &lt;strong&gt;patr√≥n de dise√±o Pipeline (Tuber√≠a)&lt;/strong&gt; consiste en hacer pasar una estructura o un objeto a trav√©s de una secuencia de tareas o etapas.&lt;/p&gt;

&lt;p&gt;La tuber√≠a act√∫a como una l√≠nea de montaje, donde los datos se procesan y luego pasan a la siguiente etapa.&lt;/p&gt;

&lt;p&gt;En este video te explico como funciona este patr√≥n en Laravel&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bx_KAkTL-Sg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>testing</category>
      <category>php</category>
    </item>
    <item>
      <title>Newbie's Guide to AI Resources</title>
      <author>Jessi Shakarian</author>
      <pubDate>Fri, 18 Jun 2021 22:12:41 +0000</pubDate>
      <link>https://dev.to/jessishakarian/newbie-s-guide-to-ai-resources-23l2</link>
      <guid>https://dev.to/jessishakarian/newbie-s-guide-to-ai-resources-23l2</guid>
      <description>&lt;h3&gt;
  &lt;a href="#so-you-want-to-get-into-ai-and-ml-but-dont-know-where-to-start"&gt;
  &lt;/a&gt;
  So, you want to get into AI and ML but don't know where to start?
&lt;/h3&gt;

&lt;p&gt;I've been there. Twice, actually. About 6 months ago, I started looking into AI but got too intimidated. I talked myself out of it.&lt;/p&gt;

&lt;p&gt;Not this time! And I'm here to help you not get overwhelmed at where to start. There's a lot of information out there, and it can be difficult to know where to start. This isn't about the job field, or issues around ethics or bias, this is just some good resources to use if you want to learn more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's get started!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://academy.infinite.red/p/ai-demystified-free-5-day-mini-course"&gt;AI Demystified&lt;/a&gt; from Infinite Red Academy. I recently completed this, and found it incredibly helpful and interesting. Instructor &lt;a href="https://twitter.com/gantlaborde?s=21"&gt;Gant Laborde&lt;/a&gt; breaks down what AI is and how it's used in a humorous and interesting way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.deeplearning.ai/programs/"&gt;DeepLearning.Ai&lt;/a&gt; is a great next step, they have programs for everything - beginners to more advanced stuff. These programs are not completely free, they're through coursera. But coursera does have financial aid, and I highly recommend you take advantage of that. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://ai.google/"&gt;Google&lt;/a&gt; - no, not googling something. Google has a wealth of information about AI &lt;a href="https://ai.google/education"&gt;education&lt;/a&gt; and resources, depending on what you're looking for. Here's an example, their filters for content. Lots of options to explore.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v_EcafOn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y1pau7yvtpdx06d3k88p.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v_EcafOn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y1pau7yvtpdx06d3k88p.jpg" alt="Filter of content options on Google AI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ready to get into the nitty gritty? Let's talk about programming and math!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Learn Python!&lt;/em&gt; Python is &lt;a href="https://www.cuelogic.com/blog/role-of-python-in-artificial-intelligence"&gt;great&lt;/a&gt; for AI, lots of programs already built in for the language. If you're new to programming, it's a great place to start, easy to understand. If you need a course, Udemy has &lt;a href="https://www.udemy.com/course/automate/?src=sac&amp;amp;kw=automate+the+boring+stuff"&gt;Automate the Boring Stuff&lt;/a&gt;. I'm going to be starting this soon. Udemy often has sales on stuff, so better to wait if you can. Or, if videos are not for you, there's a &lt;a href="https://automatetheboringstuff.com/"&gt;book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Math.&lt;/em&gt; If you're interested in AI or ML, math comes with it. You either love math, or are like me, and are willing to tolerate it because it gets you where you need to go (okay, maybe I like it and I'm just in the closet...). &lt;a href="https://towardsdatascience.com/mathematics-for-ai-all-the-essential-math-topics-you-need-ed1d9c910baf"&gt;Here's&lt;/a&gt; some reasons why math has a lot of value in this realm. Years ago, I got to statistics when I went back to school to be a lab tech, and we used a lot of scientific math, but really what saved my butt here is &lt;a href="https://www.khanacademy.org/math"&gt;Khan Academy&lt;/a&gt;. It's free and helped me understand a lot of concepts. Definitely use that for statistics and other math functions as you need it.&lt;/p&gt;

&lt;p&gt;So there you go! Lots of resources to get you started. Have you tried some of these resources before? Let me know on &lt;a href="https://twitter.com/jessishakarian"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>ai</category>
      <category>machinelearning</category>
      <category>python</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
