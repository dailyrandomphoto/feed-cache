<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How To Stop Procrastination As A Developer</title>
      <author>Bobby Iliev</author>
      <pubDate>Mon, 10 May 2021 16:03:15 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/how-to-stop-procrastination-as-a-developer-3ebl</link>
      <guid>https://dev.to/bobbyiliev/how-to-stop-procrastination-as-a-developer-3ebl</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Have you ever procrastinated? If you say "No", you are totally a liar! &lt;/p&gt;

&lt;p&gt;But most important, do you know what procrastination is? This is a (un)aware process of postponing something that you find as hard or boring. Procrastination can also go beyond work. Avoiding a difficult conversation or delaying an important life decision could affect our lives too. &lt;/p&gt;

&lt;p&gt;This process is our choice, and we make it every day, sometimes even more often. Figuring out the exact nature of your procrastination is a half-solved problem. You can do this by thinking about events where you procrastinated and then define when, how, and why you did so.&lt;/p&gt;

&lt;p&gt;If you would like to know how to win over procrastination, here are the main steps that you should follow:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-set-your-goals"&gt;
  &lt;/a&gt;
  1. Set your goals.
&lt;/h1&gt;

&lt;p&gt;Make sure you determine your goals as clearly as possible. Prioritize the task as their importance.  &lt;/p&gt;

&lt;p&gt;Start your every day by pointing the intention of how the day will look like. &lt;/p&gt;

&lt;p&gt;Don't forget to reward yourself when you successfully finished some of the goals for the day. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VS3KNWAh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/october2020/85211789_2554413498156888_1688130710939893760_n.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VS3KNWAh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/october2020/85211789_2554413498156888_1688130710939893760_n.jpeg" alt="To do list stop procarastination"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2find-what-part-of-the-day-you-are-more-productive"&gt;
  &lt;/a&gt;
  2.Find what part of the day you are more productive.
&lt;/h1&gt;

&lt;p&gt;Examine yourself! Are you an early bird or a night owl? Detect when you are most efficient and do your hardest tasks then. Try to combine these tasks with something that you love to do, for example, bring together your morning coffee and your project that you've been working on for a while. &lt;/p&gt;

&lt;p&gt;Paying attention to your body clock and its impacts on energy and alertness can help pinpoint the different times of day when you can do your best work.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-remove-the-distractions"&gt;
  &lt;/a&gt;
  3. Remove the distractions
&lt;/h1&gt;

&lt;p&gt;Create an environment in which you’re less tempted!&lt;/p&gt;

&lt;p&gt;Many of us working on a computer, but we also find our biggest distractions exactly on our working desk. If you find yourself wandering over to video or shopping websites, try using a website blocker app.&lt;/p&gt;

&lt;p&gt;Also, it might help to put your phone in silent mode. This will help you not to pick it up as soon as you received an email or a message. &lt;/p&gt;

&lt;p&gt;Here's a nice quote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Being a good programmer is 3% talent and 97% not being distracted by the internet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4pNnI7yE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/october2020/122878649-2862258620677092-3065239395235664179-n1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4pNnI7yE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/october2020/122878649-2862258620677092-3065239395235664179-n1.jpeg" alt="focus and stop procrastination"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-try-a-pomodoro-technique"&gt;
  &lt;/a&gt;
  4. Try a Pomodoro Technique
&lt;/h1&gt;

&lt;p&gt;The Pomodoro Technique is a time management method. The technique uses a timer to break down work into some parts, usually 25 minutes in length, divided by breaks. Each interval is known as a Pomodoro. That way you will be more focused, so give it a chance and try it!&lt;/p&gt;

&lt;p&gt;There are many "Work with me/Study with me" videos include this method. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jLz--SlurFQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-create-a-morning-routine"&gt;
  &lt;/a&gt;
  5. Create a morning routine
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;"The way you start your day is how you are going to live your day. And how you live your day is the way you live your life" - Louise Hay.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Creating a mourning routine contributes to achieving goals, feeling organized, being more productive. It could help you to be more motivated to finish your duties.  Check out this post for more ideas!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/bobbyiliev/5-morning-habits-that-will-help-you-be-more-productive"&gt;5 Morning Habits That Will Help You Be More Productive&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#book-recommendation"&gt;
  &lt;/a&gt;
  Book Recommendation
&lt;/h1&gt;

&lt;p&gt;If you are trying to build good habits, I strongly recommend the &lt;a href="https://www.amazon.com/Atomic-Habits-Proven-Build-Break/dp/0735211299"&gt;"Atomic Habits" by James Clear&lt;/a&gt;, it gives an easy and proven way to build good habits and also break bad ones!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RW-zzYL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/LSPRZUJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RW-zzYL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/LSPRZUJ.png" alt="Atomic Habits by James Clear"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Procrastination can decrease your growth in your career. It can also reflect on your teamwork, reduce confidence, and even lead to depression. So, it's essential to take actions to stop it.&lt;/p&gt;

&lt;p&gt;The first step to overcoming procrastination is to confess that you're doing it. Then, identify the reasons for your behavior and learn how to overcome it.&lt;/p&gt;

</description>
      <category>productivity</category>
    </item>
    <item>
      <title>Day 24 - 29 and RIP of 100DaysOfCode</title>
      <author>atulit023</author>
      <pubDate>Mon, 10 May 2021 15:53:29 +0000</pubDate>
      <link>https://dev.to/icecoffee/day-24-29-and-rip-of-100daysofcode-57f2</link>
      <guid>https://dev.to/icecoffee/day-24-29-and-rip-of-100daysofcode-57f2</guid>
      <description>&lt;p&gt;I started my first 100 days of code journey on &lt;em&gt;12 April 2021&lt;/em&gt; and for the first 25 days, I did pretty well actually.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ZZF7J5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/ztAdLRcoomAAAAAM/far-too-long-richard-williams.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ZZF7J5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/ztAdLRcoomAAAAAM/far-too-long-richard-williams.gif" alt="so long ago"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React was the hero for the first two weeks followed by react-router and flux but then a couple of days back, I broke my streak and since then I've been feeling pretty bad about it.&lt;/p&gt;

&lt;p&gt;I don't wanna trick myself so I accepted my failure and I started a new 100 days of code challenge today.&lt;/p&gt;

&lt;p&gt;But since I have faced a couple of setbacks, now I am familiar with what may happen and how can I improve.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VQU5TDnk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/fC4zIRrfBXoAAAAM/yes-yeah.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQU5TDnk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/fC4zIRrfBXoAAAAM/yes-yeah.gif" alt="this is power"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is one more thing that I thought, rather than posting articles daily, which is actually great but sometimes it's overwhelming. I can share my journey with everyone after a couple of days or whenever I'll feel like I have something worth sharing.&lt;/p&gt;

&lt;p&gt;Just my thoughts. Thanks for being here.&lt;br&gt;
Hope I may finish this one. I will. &lt;/p&gt;

&lt;p&gt;Have a wonderful day.😀&lt;/p&gt;

&lt;p&gt;Check out the cool cover image right &lt;a href="http://www.vibesnscribes.com/2019/09/22/the-100-days-of-code-journey/"&gt;here&lt;/a&gt;.&lt;br&gt;
It's an excellent wallpaper for a laptop for sure.&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Frontend interview - Questions I was asked</title>
      <author>Rajesh Royal</author>
      <pubDate>Mon, 10 May 2021 15:13:32 +0000</pubDate>
      <link>https://dev.to/rajeshroyal/frontend-interview-questions-i-was-asked-2ie0</link>
      <guid>https://dev.to/rajeshroyal/frontend-interview-questions-i-was-asked-2ie0</guid>
      <description>&lt;p&gt;These are the questions I was asked In a frontend interview for a ReactJS position.  &lt;/p&gt;

&lt;p&gt;If you ask me to clone Netflix UI I will do It in shortest possible time, but if you ask me evaluate and string expression without &lt;code&gt;eval()&lt;/code&gt;. I might not able to do this. &lt;/p&gt;

&lt;p&gt;Hope you guys will find these questions useful. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;BTW I failed miserably 👶👶&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let result = [{x: 1}, {x: 2}, {x: 3}];

reduce this array and result should be 6; You are suggested to use arr.reduce() function. 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;








&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input:
people = [
  { name: 'Alice', age: 21, gender: "female" },
  { name: 'Max', age: 20, gender: "male" },
  { name: 'Jane', age: 20, gender: "female" }
  { name: 'Jon', age: 21, gender: "male" },
  { name: 'Alex', age: 20, gender: "male" }
]

output: 
{
 male: [
  { name: 'Max', age: 20, gender: "male" },
  { name: 'Jon', age: 21, gender: "male" },
  { name: 'Alex', age: 20, gender: "male" }
],
female: [
 { name: 'Alice', age: 21, gender: "female" },
{ name: 'Jane', age: 20, gender: "female" }
]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;








&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: 
let value = "5+8=x";

Output should be 13 (type should be number);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;comment section is yours fellows. 🙏🙏🙏&lt;/p&gt;

</description>
      <category>interview</category>
      <category>javascript</category>
      <category>frontend</category>
      <category>questions</category>
    </item>
    <item>
      <title>Don’t use underscores in your HTTP Headers</title>
      <author>Evan Tahler</author>
      <pubDate>Mon, 10 May 2021 15:12:56 +0000</pubDate>
      <link>https://dev.to/grouparoo/don-t-use-underscores-in-your-http-headers-30co</link>
      <guid>https://dev.to/grouparoo/don-t-use-underscores-in-your-http-headers-30co</guid>
      <description>&lt;p&gt;Don’t use underscores in your HTTP Headers... at least according to AWS and Nginx!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;--HEADER&lt;/span&gt; &lt;span class="s2"&gt;"AUTH_TOKEN: abc"&lt;/span&gt; example.com &lt;span class="c"&gt;# is bad&lt;/span&gt;
curl &lt;span class="nt"&gt;--HEADER&lt;/span&gt; &lt;span class="s2"&gt;"AUTH-TOKEN: abc"&lt;/span&gt; example.com &lt;span class="c"&gt;# is OK&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Grouparoo is a self-hosted application, and we are always helping folks run and deploy our service in new ways. Recently, we’ve been working an &lt;a href="https://github.com/grouparoo/app-example-aws"&gt;example application&lt;/a&gt; for Amazon Web Service’s (AWS) Elastic Beanstalk service. Elastic Beanstalk is AWS’s original Platform as a Service (PaaS) which means you can deploy your application without having to directly manage the servers yourself. Also, Elastic Beanstalk servers are within you Virtual Private Cloud (VPC), so they are good choice if you want to integrate with any of AWS’ other services, like a database or cache.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;app-example-aws&lt;/code&gt; app deployed just fine, but we were running into a strange bug: users of our web UI would be logged out on every subsequent page load! We weren’t seeing this behavior on any of the other hosting platforms we’ve used, including other AWS deployments hosting options. What could be wrong?&lt;/p&gt;

&lt;p&gt;Eventually we narrowed down the problem to communication between our website UI and the API server. The Grouparoo UI server uses a special header, &lt;code&gt;X-GROUPAROO-SERVER_TOKEN&lt;/code&gt; , along with the users’s session cookie, to authenticate against the API to pre-hydrate our pages on behalf of the user making the request. This page hydration request was the only type of request failing. Eventually we got into the weeds of the network request, and saw that the API was never receiving the &lt;code&gt;X-GROUPAROO-SERVER_TOKEN&lt;/code&gt; header, but everything else was coming though OK:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"headers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"connection"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"upgrade"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"host"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"app-example-aws.example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"x-real-ip"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"172.31.xxx.xxx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"x-forwarded-for"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"54.157.xxx.xxx, 172.31.xxx.xxx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"x-forwarded-proto"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"x-forwarded-port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"443"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"x-amzn-trace-id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Root=1-60517ca4-xxxxx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"accept"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content-type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"cookie"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"grouparooSessionId=xxxxxxxxxx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"user-agent"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"axios/0.21.1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After some digging, we learned that Elastic Beanstalk fronts its applications with Nginx acting as a reverse proxy, which by default, considers headers with underscores CGI commands of yore and ignores them. By default the Nginx option &lt;code&gt;underscores_in_headers&lt;/code&gt; is &lt;code&gt;off&lt;/code&gt; , and you can learn more &lt;a href="https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/?highlight=underscore#missing-disappearing-http-headers"&gt;here&lt;/a&gt;. Please note that using underscores in headers is perfectly valid per the HTTP spec, but Nginx, by default, will ignore them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dlTeUMpt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gldlvc3i6pz9kppvef3e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dlTeUMpt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gldlvc3i6pz9kppvef3e.jpg" alt="A photo of a lost header, the football kind"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;br&gt;
  &lt;em&gt;(photo of a lost header, the football kind)&lt;/em&gt;&lt;br&gt;
&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;It was a matter of preference whether or not right thing to do was to change the header we use and not use underscores (&lt;code&gt;X-GROUPAROO-SERVER-TOKEN&lt;/code&gt;) , or to modify the Nginx reverse proxy configuration on our Elastic Beanstalk servers (which is possible - &lt;a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/java-se-nginx.html"&gt;see here&lt;/a&gt;). At the end of the day we want Grouparoo to work out-of-the box on as many platforms as possible without needing custom configuration. Nginx is a wildly popular web server, load balancer, and reverse proxy - and we should to be compatible with its defaults. To that end, we opted to change our headers not to use underscores. I recommend that everyone else developing a web application do the same and follow Nginx's defaults to avoid problems like this down the road.&lt;/p&gt;

</description>
      <category>node</category>
      <category>nginx</category>
      <category>aws</category>
      <category>devops</category>
    </item>
    <item>
      <title>Generate QR Code In Javascript</title>
      <author>Bibek</author>
      <pubDate>Mon, 10 May 2021 14:05:24 +0000</pubDate>
      <link>https://dev.to/bibekkakati/generate-qr-code-in-javascript-2o67</link>
      <guid>https://dev.to/bibekkakati/generate-qr-code-in-javascript-2o67</guid>
      <description>&lt;p&gt;Hello everyone 👋, this is going to be a very short article where I will show how can we generate a QR Code for any content in JavaScript.&lt;/p&gt;

&lt;p&gt;Obviously, I am not going to implement everything from scratch and why should one do that when we have a plethora of useful libraries in JavaScript.&lt;/p&gt;

&lt;p&gt;I came across this awesome lightweight library or you can say a simple script &lt;a href="https://github.com/davidshimjs/qrcodejs"&gt;qrcodejs&lt;/a&gt;. It is very easy to use and is reliable too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Download this zip file: &lt;a href="https://github.com/davidshimjs/qrcodejs/zipball/master"&gt;qrcodejs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extract it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now you can use the &lt;code&gt;qrcode.js&lt;/code&gt; and &lt;code&gt;qrcode.min.js&lt;/code&gt; file in your project.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;Include the &lt;code&gt;qrcode.js&lt;/code&gt; file in your HTML file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;...
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./qrcode.js"&lt;/span&gt; &lt;span class="na"&gt;defer&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Give an &lt;code&gt;id&lt;/code&gt; to the &lt;code&gt;div&lt;/code&gt; where you want to show the generated QR Code. Here I have used &lt;code&gt;"qrcode"&lt;/code&gt; as my &lt;code&gt;id&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;...
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"qrcode"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will create an object from the &lt;code&gt;QRCode&lt;/code&gt; function. Need to pass the &lt;code&gt;id&lt;/code&gt; of the output &lt;code&gt;div&lt;/code&gt; which is &lt;code&gt;"qrcode"&lt;/code&gt; in this case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;QR_CODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QRCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;qrcode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;colorDark&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#000000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;colorLight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffffff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;correctLevel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;QRCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CorrectLevel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;H&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;correctLevel&lt;/code&gt;: &lt;code&gt;L&lt;/code&gt; for low, &lt;code&gt;M&lt;/code&gt; for medium, &lt;code&gt;H&lt;/code&gt; for high.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Generate QRCode by calling the &lt;code&gt;makeCode&lt;/code&gt; method of the QRCode object, which expects the &lt;code&gt;data&lt;/code&gt; as its argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;QR_CODE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://buymeacoffee.com/bibekkakati&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;It will automatically insert the generated QRCode in the &lt;code&gt;div&lt;/code&gt; whose &lt;code&gt;id&lt;/code&gt; has been provided while creating the QRCode object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example✨
&lt;/h3&gt;

&lt;p&gt;Check out the GitHub &lt;a href="https://github.com/bibekkakati/qr-gen"&gt;Repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Try it out here: &lt;a href="https://bibekkakati.github.io/qr-gen/"&gt;Live&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yZLqZgrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajtycj7dkf5g364isx0i.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yZLqZgrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajtycj7dkf5g364isx0i.jpeg" alt="Demo Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Screenshot is taken from Google Lens while scanning.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Enjoyed? Give it a thumbs-up 👍&lt;/p&gt;

&lt;p&gt;Thank you for reading | Feel free to &lt;a href="https://bibekkakati.me"&gt;connect&lt;/a&gt; 👋&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Originally published on &lt;a href="https://blog.bibekkakati.me/generate-qr-code-in-javascript"&gt;blog.bibekkakati.me&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/bibekkakati"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7pOmeWpX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dbibekkakati%26button_colour%3DFFDD00%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3Dffffff"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
      <category>design</category>
    </item>
    <item>
      <title>Linux Commands Cheat Sheet
</title>
      <author>CodeSnail 🐌</author>
      <pubDate>Mon, 10 May 2021 14:02:46 +0000</pubDate>
      <link>https://dev.to/soniarpit/linux-commands-cheat-sheet-150c</link>
      <guid>https://dev.to/soniarpit/linux-commands-cheat-sheet-150c</guid>
      <description>&lt;p&gt;This commands helps you anytime&lt;/p&gt;

&lt;h2 id="0-basic-linux-commands"&gt;Basic Linux commands&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Lists all files and directories in the present working directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ls-R&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Lists files in sub-directories as well&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ls-a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Lists hidden files as well&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ls-al&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Lists files and directories with detailed information like permissions,size, owner, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cd or cd ~&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Navigate to HOME directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cd ..&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Move one level up&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;To change to a particular directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cd /&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Move to the root directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cat &amp;gt; filename&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Creates a new file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cat filename&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Displays the file content&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cat file1 file2 &amp;gt; file3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Joins two files (file1, file2) and stores the output in a new file (file3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mv file "new file path"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Moves the files to the new location&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mv filename new_file_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Renames the file to a new filename&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sudo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Allows regular users to run programs with the security privileges of the superuser or root&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rm filename&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Deletes a file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;man&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Gives help information on a command&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;history&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Gives a list of all past commands typed in the current terminal session&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Clears the terminal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mkdir directoryname&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Creates a new directory in the present working directory or a at the specified path&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rmdir&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Deletes a directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Renames a directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pr -x&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Divides the file into x columns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pr -h&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Assigns a header to the file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pr -n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Denotes the file with Line Numbers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lp -nc , lpr c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Prints “c” copies of the File&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lp-d lp-P&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Specifies name of the printer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;apt-get&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Command used to install and update packages&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;mail -s 'subject' -c 'cc-address' &lt;/code&gt; &lt;code&gt; -b 'bcc-address' 'to-address'&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Command to send email&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mail -s "Subject" to-address &amp;lt; Filename&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Command to send email with attachment&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="1-file-permission-commands"&gt;File Permission commands&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ls-l&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;to show file type and access permission&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;r&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;read permission&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;write permission&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;execute permission&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;no permission&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Chown user&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;For changing the ownership of a file/directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Chown user:group filename&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;change the user as well as group for a file or directory&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="2-environment-variables-command"&gt;Environment Variables command&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;echo $VARIABLE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;To display value of a variable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;env&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Displays all environment variables&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;VARIABLE_NAME= variable_value&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Create a new variable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Unset&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Remove a variable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;export Variable=value&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;To set value of an environment variable&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Read more: &lt;a href="https://www.codesnail.com/linux-commands-cheat-sheet/"&gt;Linux commands cheat sheet&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>cheatsheet</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What is your daily routine?</title>
      <author>Alex Georgiev</author>
      <pubDate>Mon, 10 May 2021 13:32:47 +0000</pubDate>
      <link>https://dev.to/alexgeorgiev17/what-is-your-daily-routine-44f2</link>
      <guid>https://dev.to/alexgeorgiev17/what-is-your-daily-routine-44f2</guid>
      <description>&lt;p&gt;I would like to hear what is everyone doing during WFH (Working from Home). Have you established some goals for each day, for example, to exercise or to read a book, take small breaks each hour?&lt;/p&gt;

&lt;p&gt;Do you have a to-do list that you follow each day of the week or you just try to stay productive but do not follow a routine?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>devops</category>
    </item>
    <item>
      <title>Learn How to Convert: Text to Handwriting, Handwriting to Text, Text to Speech &amp; Speech to Text</title>
      <author>Konchada Sai Ansul</author>
      <pubDate>Mon, 10 May 2021 13:28:59 +0000</pubDate>
      <link>https://dev.to/saiansulsblog/learn-how-to-convert-text-to-handwriting-handwriting-to-text-text-to-speech-speech-to-text-1pk9</link>
      <guid>https://dev.to/saiansulsblog/learn-how-to-convert-text-to-handwriting-handwriting-to-text-text-to-speech-speech-to-text-1pk9</guid>
      <description>&lt;p&gt;Hello Guys, Welcome back to another post of Sai Ansul's Blog. In this blog we are gonna learn &lt;br&gt;
How to Convert: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Text to Handwriting,&lt;/li&gt;
&lt;li&gt;Handwriting to Text, &lt;/li&gt;
&lt;li&gt;Text to Speech ,&lt;/li&gt;
&lt;li&gt;Speech to Text.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let's start, &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-text-to-handwriting"&gt;
  &lt;/a&gt;
  1. Text to Handwriting
&lt;/h2&gt;

&lt;p&gt;Since in this pandemic period we students has got plenty of assignments to be done. isn't it?&lt;br&gt;
So, I have got you a very easy and interesting way to submit those assignments in just seconds.&lt;br&gt;
Wanna know how?&lt;/p&gt;

&lt;p&gt;So firstly open this &lt;a href="https://saurabhdaware.github.io/text-to-handwriting/#how-to-add-handwriting"&gt;link&lt;/a&gt; . &lt;br&gt;&lt;br&gt;
After you open it you will see a interface like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dsjlF3zk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616158822277/lHK0HENbU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dsjlF3zk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616158822277/lHK0HENbU.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Where you can replace the text of the input image with yours and see the magic.&lt;br&gt;&lt;br&gt;
There are some customizations also available over there like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Handwriting font&lt;/li&gt;
&lt;li&gt;Font size&lt;/li&gt;
&lt;li&gt;Ink color&lt;/li&gt;
&lt;li&gt;Effects&lt;/li&gt;
&lt;li&gt;Resolution&lt;/li&gt;
&lt;li&gt;Spacing options &lt;/li&gt;
&lt;li&gt;Margin options &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And after customizing you need to click on &lt;strong&gt;Generate Image&lt;/strong&gt; , the image will be generated and then you can download the image and use it. You can also generate multiple images at a time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ft0K65xp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616159473575/3TKPWysvm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ft0K65xp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616159473575/3TKPWysvm.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-handwriting-to-text"&gt;
  &lt;/a&gt;
  2. Handwriting to Text
&lt;/h2&gt;

&lt;p&gt;This conversion is popularly known as OCR- Optical Character Recognition.&lt;/p&gt;

&lt;p&gt;There are many sites and apps this feature is available to extract the text in many languages.&lt;br&gt;
This feature is also available in many document scanners.&lt;/p&gt;

&lt;p&gt;The best 5 online sites that I like the most for OCR are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.onlineocr.net/"&gt;OnlineOCR.&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://convertio.co/ocr/"&gt;Convertio&lt;/a&gt; .&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.newocr.com/"&gt;NewOCR.&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://finereaderonline.com/en-us"&gt;ABBYY FineReader Online.&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.i2ocr.com/"&gt;i2OCR.&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The document scanners that has OCR are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://play.google.com/store/apps/details?id=com.cv.docscanner"&gt;Doc Scanner &lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://play.google.com/store/apps/details?id=in.insomniactech.proscanner"&gt;Cam Scanner Indian&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://play.google.com/store/apps/details?id=com.adobe.scan.android"&gt;Adobe Scan&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TJRUQfg---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616162740694/RGRTjx6Ry.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TJRUQfg---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616162740694/RGRTjx6Ry.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can upload the document and select the language that document's text has.&lt;/p&gt;

&lt;p&gt;And the magic happens after the conversion is completed, the document which will be generated and you will be select the text and use anywhere. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-text-to-speech"&gt;
  &lt;/a&gt;
  3. Text to Speech
&lt;/h2&gt;

&lt;p&gt;This conversion is known as TTS- Text to Speech Synthesizer.&lt;/p&gt;

&lt;p&gt;This feature is also available in adobe pdf viewer also&lt;/p&gt;

&lt;p&gt;The top 3 online sites for these are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="http://www.cross-plus-a.com/balabolka.htm"&gt;Balabolka&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.naturalreaders.com/"&gt;Natural reader online reader&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://cloud.google.com/text-to-speech"&gt;Google Cloud Text-to-Speech&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MoUTdHFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616164322882/f4ALQmESp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MoUTdHFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616164322882/f4ALQmESp.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the image you can upload files with various extensions and it will convert to mp3 audio file which you can download and hear anywhere.&lt;/p&gt;

&lt;p&gt;If you have noticed some time ago  &lt;a href="https://hashnode.com/"&gt;Hashnode&lt;/a&gt;  has also launched a feature named audio blog that also use the technology.&lt;/p&gt;

&lt;p&gt;This also has many customizations like in voices, speed and many more.&lt;/p&gt;

&lt;p&gt;Go check it out&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-speech-to-text"&gt;
  &lt;/a&gt;
  4. Speech to Text
&lt;/h2&gt;

&lt;p&gt;Speech to text conversion is the process of converting spoken words into written texts.&lt;/p&gt;

&lt;p&gt;Rather than typing long documents and making your hands pain  you just need to read out it once.&lt;/p&gt;

&lt;p&gt;This process is also often called speech recognition.&lt;/p&gt;

&lt;p&gt;The top 3 online sites for these are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://www.google.com/docs/about/"&gt;Google Docs Voice Typing.&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.nuance.com/dragon.html"&gt; Dragon Professional Individual. &lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.brainasoft.com/braina/speech-to-text.html"&gt;Braina Pro&lt;/a&gt; .&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r4aLin8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616165744202/jBr2odDDn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r4aLin8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616165744202/jBr2odDDn.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the conversion the txt file will be generated and you can use it anywhere.&lt;/p&gt;

&lt;p&gt;This is it for today guys. If you liked this blog and want to support my efforts, do share it with as many friends as possible. And feel free to drop in suggestions for improvements.&lt;/p&gt;

&lt;p&gt;If you liked this blog and want to support my efforts, do share it with as many friends as possible. And feel free to drop in suggestions for improvements.&lt;/p&gt;

</description>
      <category>beginners</category>
    </item>
    <item>
      <title>Introduction to AWS CloudFormation</title>
      <author>Jenna Pederson</author>
      <pubDate>Mon, 10 May 2021 13:12:56 +0000</pubDate>
      <link>https://dev.to/aws/introduction-to-aws-cloudformation-k7d</link>
      <guid>https://dev.to/aws/introduction-to-aws-cloudformation-k7d</guid>
      <description>&lt;p&gt;If you're a full-stack software developer, you probably want to focus your time delivering core business value. Dealing with infrastructure, environment inconsistencies, manual testing, and manual deployment steps is time consuming, frustrating, and requires a different skill set, especially if you're part of a small team or are the solo developer at a budding startup. Provisioning infrastructure manually for an environment only happens so often, for instance for new projects or when a change needs to be made to a virtual machine or database configuration, but as you grow, your infrastructure needs to scale and so do your processes. Inconsistencies between environments can create problems down the pipeline, costing your small team time and money. And if your build and deploy process is also manual, then so is your rollback process. If you even have one. Because these processes are manual and time-consuming, they are done infrequently. Which means mistakes are made. When bugs are eventually found, they are often more severe, more difficult, and expensive to fix than if they had been found earlier.&lt;/p&gt;

&lt;p&gt;Sound familiar? In my &lt;a href="https://jennapederson.com/blog/2021/4/2/what-is-infrastructure-as-code/"&gt;last post&lt;/a&gt;, we learned that Infrastructure as Code (IaC) is the management of your infrastructure resources and their dependencies with code. IaC allows you to scale quicker and easier, improve your quality, control your costs and risks, and know your infrastructure better.&lt;/p&gt;

&lt;p&gt;With IaC, you can start solving the problems above and begin to free up your time so you can get back to building quality web apps quickly and delivering core business value. Today, we'll dive a little deeper with a look at AWS CloudFormation, an Infrastructure as Code framework. We'll cover templates, stacks, and change sets, and then take a look at five examples to demonstrate some of the foundational features to get started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;To work through these examples, you'll need an AWS account and the AWS CLI installed. You can create your account &lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/"&gt;here&lt;/a&gt; and find instructions for installing the AWS CLI &lt;a href="https://aws.amazon.com/cli/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-cloudformation"&gt;
  &lt;/a&gt;
  What is CloudFormation?
&lt;/h2&gt;

&lt;p&gt;AWS CloudFormation is a framework for provisioning your cloud resources with infrastructure as code. You can manage and provision your AWS resources predictably and repeatedly with code. With a CloudFormation template, you define your AWS resources and manage that collection of resources together as one stack. By treating your infrastructure as code, you can manage the CloudFormation template in version control, just like you do your application code. With CloudFormation you can automate your best practices, scale your infrastructure across the globe, and integrate with other AWS services to control access, improve automation, testing, and controls.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#templates"&gt;
  &lt;/a&gt;
  Templates
&lt;/h3&gt;

&lt;p&gt;A CloudFormation template is a JSON or YAML (skip the JSON and use YAML!) formatted text file where you will define your cloud resources. For example, your template could define an Amazon S3 bucket, give it a name, and configure it to have encryption enabled by default.&lt;/p&gt;

&lt;p&gt;This is the basic anatomy of a CloudFormation template. The only required top-level object is Resources. In this post, we'll cover Parameters, Mappings, Resources, and Outputs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;AWSTemplateFormatVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2010-09-09&lt;/span&gt; &lt;span class="c1"&gt;# The only allowable value is 2010-09-09&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Describes the template&lt;/span&gt;
&lt;span class="na"&gt;Metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Objects providing additional information about the template&lt;/span&gt;
&lt;span class="na"&gt;Parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Input parameters to pass to your template at runtime&lt;/span&gt;
&lt;span class="na"&gt;Rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# A set of rules to validate the parameters provided during creation or update&lt;/span&gt;
&lt;span class="na"&gt;Mappings&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Key/value pairs used for lookup at runtime&lt;/span&gt;
&lt;span class="na"&gt;Conditions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Conditions that control whether certain resources are created or whether properties are assigned values&lt;/span&gt;
&lt;span class="na"&gt;Transform&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Customizations for serverless applications&lt;/span&gt;
&lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Defines resources and their properties, the only required top-level object&lt;/span&gt;
&lt;span class="na"&gt;Outputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Values that are returned whenever you view information about the resources created from this template&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you apply a template, in the AWS Console, using the APIs, or with the AWS CLI, you create a stack.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stacks"&gt;
  &lt;/a&gt;
  Stacks
&lt;/h3&gt;

&lt;p&gt;A CloudFormation stack is an implementation of the resources defined in your template. If you're familiar with object-oriented programming, you can think of a template as a class and the stack as the implementation of that class, the object or objects.&lt;/p&gt;

&lt;p&gt;A stack allows you to manage a collection of related resources as a single unit. When you want to make changes to resources in a stack, you'll update the template and create a change set.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#change-sets"&gt;
  &lt;/a&gt;
  Change Sets
&lt;/h3&gt;

&lt;p&gt;A change set allows you to preview what will change when you apply the template to update the running stack. Each resource will behave differently depending on what type of resource it is and what you are changing about that resource or it's dependencies. For instance, if you are changing the BucketEncryption of an S3 Bucket, your bucket will be changed in place. However, for resources like an RDS instance, if you change anything that requires replacement, like DBName or AvailabilityZone, the database will be deleted and recreated, and you'll lose your data and all automated snapshots. There are ways of handling these scenarios with stack policies, but we won't be covering that today. Just know that it exists and change sets can help you see what will be changed in place or replaced altogether.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#templates-in-action"&gt;
  &lt;/a&gt;
  Templates in Action
&lt;/h2&gt;

&lt;p&gt;Let's take a look at some CloudFormation templates in action. For readability and so that you can take these and run with them, these examples will all be in YAML format. If you need to convert them to JSON, you can use the handy tool, &lt;a href="https://github.com/awslabs/aws-cfn-template-flip"&gt;AWS CloudFormation Template Flip&lt;/a&gt;, to flip it from YAML to JSON.&lt;/p&gt;

&lt;p&gt;Over the course of these next five examples, we will iterate on each template to extend it with new or changed configuration. This is how you will build your own templates. Even if you have one small configuration change to make, you re-apply the entire template to make that change.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-1-resources"&gt;
  &lt;/a&gt;
  Example 1: Resources
&lt;/h3&gt;

&lt;p&gt;In this first example, we create an Amazon S3 bucket.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# file: 01_example_s3.yaml&lt;/span&gt;
&lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ExampleBucket&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::S3::Bucket&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;BucketName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;intro-to-cloudformation-example-1'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's walk through the parts that make up this template.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Resources: Top-level object where we define all resources in this stack&lt;/li&gt;
&lt;li&gt;ExampleBucket: The Logical ID for this resource. We'll use this ID to refer to this resource in other parts of our template.&lt;/li&gt;
&lt;li&gt;Type: This is the type of resource to create. You can find out more about the allowed properties for an Amazon S3 Bucket resource &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html"&gt;here&lt;/a&gt; and see all the supported resource types &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Properties: For each resource, you'll be able to configure it with properties.&lt;/li&gt;
&lt;li&gt;BucketName: The only property we're configuring is the bucket name, which is a string.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I like using the command-line, so that's what we'll use today, but you can also apply your template to create or update a stack using the AWS Console.&lt;/p&gt;

&lt;p&gt;From the directory where your template file resides, run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;aws cloudformation create-stack &lt;span class="nt"&gt;--stack-name&lt;/span&gt; intro-to-cloudformation &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--template-body&lt;/span&gt; file://01_example_s3.yaml &lt;span class="nt"&gt;--region&lt;/span&gt; us-east-1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything goes as planned, you'll see the stack ID displayed. You can navigate to the CloudFormation stack in the AWS Console to view the status of the stack you just created. When it's complete, your bucket named &lt;code&gt;bucket-example-1&lt;/code&gt; will be created!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-2-parameters-and-intrinsic-functions"&gt;
  &lt;/a&gt;
  Example 2: Parameters and Intrinsic Functions
&lt;/h3&gt;

&lt;p&gt;In the second example, we use parameters and intrinsic functions in our template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# file: 02_example_s3.yaml&lt;/span&gt;
&lt;span class="na"&gt;Parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;BucketName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The name of the S3 bucket&lt;/span&gt;
  &lt;span class="na"&gt;Environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;This stack's environment.&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
    &lt;span class="na"&gt;Default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dev&lt;/span&gt;
    &lt;span class="na"&gt;AllowedValues&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;dev&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;test&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;prod&lt;/span&gt;

&lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ExampleBucket&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::S3::Bucket&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;BucketName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;BucketName&lt;/span&gt;
      &lt;span class="na"&gt;Tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Env&lt;/span&gt;
          &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Join&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;-'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="nv"&gt;Environment&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;environment&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we've added the Parameters top-level object with a BucketName parameter that accepts a string. We've also added an Environment parameter with three allowed values and a default value of &lt;code&gt;dev&lt;/code&gt;. When we apply this template to create or update a stack, we'll be prompted (in the AWS Console) or have to pass (at the AWS CLI) in these parameters.&lt;/p&gt;

&lt;p&gt;Second, we're referencing the BucketName parameter when specifying the BucketName property of the resource. To do that, we're using the Fn:Ref &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html"&gt;intrinsic function&lt;/a&gt;. !Ref is a shortcut for Fn:Ref.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;BucketName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;BucketName&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Third, we've also added a Tags property and we combine the Environment parameter value with a string by using Fn:Ref and the intrinsic function, Fn:Join. Fn:Join let's us join two strings together. We're joining the value of the Environment parameter with the string 'environment' to create "dev-environment" for the tag value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Join&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;-'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="nv"&gt;Environment&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;environment&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's update our stack now!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;aws cloudformation update-stack &lt;span class="nt"&gt;--stack-name&lt;/span&gt; intro-to-cloudformation &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--template-body&lt;/span&gt; file://02_example_s3.yaml &lt;span class="nt"&gt;--region&lt;/span&gt; us-east-1 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--parameters&lt;/span&gt; &lt;span class="nv"&gt;ParameterKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;BucketName,ParameterValue&lt;span class="o"&gt;=&lt;/span&gt;intro-to-cloudformation-example-2 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;ParameterKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Environment,ParameterValue&lt;span class="o"&gt;=&lt;/span&gt;dev 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice we're using the &lt;code&gt;update-stack&lt;/code&gt; command. Be sure to update the file name in the command if you're working from a new file.&lt;/p&gt;

&lt;p&gt;Now, your bucket has been renamed based on what you input as a parameter and a tag &lt;code&gt;dev-environment&lt;/code&gt; has been added to the bucket.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-3-mappings"&gt;
  &lt;/a&gt;
  Example 3: Mappings
&lt;/h3&gt;

&lt;p&gt;In this example, we'll use the Mappings top-level object to find a key/value pair to use later in our template. Mappings allow us to create resources with properties based on these key/value pairs at runtime.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# file: 03_example_s3.yaml&lt;/span&gt;
&lt;span class="na"&gt;Parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;BucketName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The name of the S3 bucket&lt;/span&gt;
  &lt;span class="na"&gt;Environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;This stack's environment.&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
    &lt;span class="na"&gt;Default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dev&lt;/span&gt;
    &lt;span class="na"&gt;AllowedValues&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;dev&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;test&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;prod&lt;/span&gt;

&lt;span class="na"&gt;Mappings&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;EnvironmentToKeyARN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;dev&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;KMSKeyARN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;YOUR_DEV_KEY_ARN&lt;/span&gt;
    &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;KMSKeyARN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;YOUR_TEST_KEY_ARN&lt;/span&gt;
    &lt;span class="na"&gt;prod&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;KMSKeyARN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;YOUR_PROD_KEY_ARN&lt;/span&gt;

&lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ExampleBucket&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::S3::Bucket&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;BucketName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;BucketName&lt;/span&gt;
      &lt;span class="na"&gt;BucketEncryption&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;ServerSideEncryptionConfiguration&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;ServerSideEncryptionByDefault&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;SSEAlgorithm&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;aws:kms'&lt;/span&gt;
              &lt;span class="na"&gt;KMSMasterKeyID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!FindInMap&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;EnvironmentToKeyARN&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="nv"&gt;Environment&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;KMSKeyARN&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;Tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Name&lt;/span&gt;
          &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Join&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;-'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="nv"&gt;Environment&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;environment&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we've added the Mappings top-level object to map environments to key ARNs. To get the value for the environment we specify in the parameters, we'll use the Fn:FindInMap intrinsic function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;KMSMasterKeyID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!FindInMap&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;EnvironmentToKeyARN&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="nv"&gt;Environment&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;KMSKeyARN&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before applying this template, be sure to update the YOUR_DEV_KEY_ARN, YOUR_TEST_KEY_ARN, YOUR_PROD_KEY_ARN values to KMS key ARNs in your own account. Then, to update your stack, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;aws cloudformation update-stack &lt;span class="nt"&gt;--stack-name&lt;/span&gt; intro-to-cloudformation &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--template-body&lt;/span&gt; file://03_example_s3.yaml &lt;span class="nt"&gt;--region&lt;/span&gt; us-east-1 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--parameters&lt;/span&gt; &lt;span class="nv"&gt;ParameterKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;BucketName,ParameterValue&lt;span class="o"&gt;=&lt;/span&gt;intro-to-cloudformation-example-3 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;ParameterKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Environment,ParameterValue&lt;span class="o"&gt;=&lt;/span&gt;dev 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example-4-outputs"&gt;
  &lt;/a&gt;
  Example 4: Outputs
&lt;/h3&gt;

&lt;p&gt;In our last example, we'll show how to specify output values so that you can see information about the resources you created. You can use outputs to import into other stacks and to see information like resource IP addresses, URLs, and IDs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# file: 04_example_s3.yaml&lt;/span&gt;
&lt;span class="na"&gt;Parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;BucketName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The name of the S3 bucket&lt;/span&gt;
  &lt;span class="na"&gt;Environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;This stack's environment.&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
    &lt;span class="na"&gt;Default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dev&lt;/span&gt;
    &lt;span class="na"&gt;AllowedValues&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;dev&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;test&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;prod&lt;/span&gt;

&lt;span class="na"&gt;Mappings&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;EnvironmentToKeyARN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;dev&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;KMSKeyARN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;YOUR_DEV_KEY_ARN&lt;/span&gt;
    &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;KMSKeyARN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;YOUR_TEST_KEY_ARN&lt;/span&gt;
    &lt;span class="na"&gt;prod&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;KMSKeyARN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;YOUR_PROD_KEY_ARN&lt;/span&gt;

&lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ExampleBucket&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::S3::Bucket&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;BucketName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;BucketName&lt;/span&gt;
      &lt;span class="na"&gt;BucketEncryption&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;ServerSideEncryptionConfiguration&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;ServerSideEncryptionByDefault&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;SSEAlgorithm&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;aws:kms'&lt;/span&gt;
              &lt;span class="na"&gt;KMSMasterKeyID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!FindInMap&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;EnvironmentToKeyARN&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="nv"&gt;Environment&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;KMSKeyARN&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;Tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Name&lt;/span&gt;
          &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Join&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;-'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="nv"&gt;Environment&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;environment&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;Outputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;BucketARN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;The&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ARN&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;of&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;bucket'&lt;/span&gt;
    &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;ExampleBucket.Arn&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've added the Outputs top-level object with one output value named BucketARN. We use the Fn:GetAtt intrinsic function to access the Amazon Resource Name (ARN) of the bucket.&lt;/p&gt;

&lt;p&gt;You can apply the updated template to your stack:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;aws cloudformation update-stack &lt;span class="nt"&gt;--stack-name&lt;/span&gt; intro-to-cloudformation &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--template-body&lt;/span&gt; file://04_example_s3.yaml &lt;span class="nt"&gt;--region&lt;/span&gt; us-east-1 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--parameters&lt;/span&gt; &lt;span class="nv"&gt;ParameterKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;BucketName,ParameterValue&lt;span class="o"&gt;=&lt;/span&gt;intro-to-cloudformation-example-4 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;ParameterKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Environment,ParameterValue&lt;span class="o"&gt;=&lt;/span&gt;dev 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To see the output values, you can navigate to your stack in the AWS Console and view the Outputs tab for the stack or use the &lt;code&gt;describe-stacks&lt;/code&gt; command at the CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;$ aws cloudformation describe-stacks --stack-name intro-to-cloudformation&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will produce information about your stack similar to this, where you can see the output, BucketARN:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Stacks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"StackId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"..."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"StackName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"intro-to-cfn"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Outputs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"OutputKey"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"BucketARN"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"OutputValue"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"arn:aws:s3:::intro-to-cloudformation-example-4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"Description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"The ARN of the bucket"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example-5-delete-your-stack"&gt;
  &lt;/a&gt;
  Example 5: Delete Your Stack
&lt;/h3&gt;

&lt;p&gt;The last step here is to clean up the resources we created. You can delete your stack and all the resources along with it with this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;aws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;cloudformation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;delete-stack&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;--stack-name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;intro-to-cloudformation&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: If you've added any objects to your Amazon S3 Bucket, this &lt;code&gt;delete-stack&lt;/code&gt; command will fail because the bucket must be empty.&lt;/p&gt;

&lt;p&gt;Without CloudFormation, it takes us a number of manual steps to configure this one bucket in the AWS Console. Imagine if we had to create a bunch of different buckets and configure more than just the bucket name. That would be tedious, time-consuming, and error-prone.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C1XtYKE7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6bcgc2siiv1zca2fu4k.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C1XtYKE7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6bcgc2siiv1zca2fu4k.gif" alt="Create S3 Bucket in AWS Console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our CloudFormation template to do the same is about 40 lines of YAML. However by moving this into code, we are able to automate the process of creating cloud resources, adhere to company and security best practices through reuse of templates, manage this code in version control, just like we would our application code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;In this post, we looked at some foundational examples for writing your infrastructure code with AWS CloudFormation. We learned about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Templates, stacks, and change sets&lt;/li&gt;
&lt;li&gt;How to define resources in a template and where to find more information about them&lt;/li&gt;
&lt;li&gt;Using template parameters and intrinsic functions to make your template more dynamic&lt;/li&gt;
&lt;li&gt;Using mappings to dynamically map key/value pairs to change configuration at runtime&lt;/li&gt;
&lt;li&gt;Using outputs to get information about the resources you created in your stack and to feed them into other templates&lt;/li&gt;
&lt;li&gt;How to create, update, and delete your stack from the command line.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the next post, we'll dive a little deeper and use each of these concepts to build a CloudFormation template to host your web app backed by a database.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Like what you read? Follow me here on &lt;a href="https://dev.to/jennapederson"&gt;Dev.to&lt;/a&gt; or on &lt;a href="https://twitter.com/jennapederson"&gt;Twitter&lt;/a&gt; to stay updated!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>infrastructure</category>
      <category>iac</category>
      <category>cloudformation</category>
    </item>
    <item>
      <title>Basics of Java #12</title>
      <author>Chathu Rashmini</author>
      <pubDate>Mon, 10 May 2021 13:04:52 +0000</pubDate>
      <link>https://dev.to/chathurashmini/basics-of-java-12-4gnc</link>
      <guid>https://dev.to/chathurashmini/basics-of-java-12-4gnc</guid>
      <description>&lt;p&gt;This article is on switch statements and loops.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#switch-statement"&gt;
  &lt;/a&gt;
  Switch statement
&lt;/h1&gt;

&lt;p&gt;Assume you have built a website and a user is trying to log into it. You are asking the user to enter his email. Then you are checking whether that email is stored in your database and if so you are fetching his user role (admin, blog writer, reader). If mail is not found the user is a guest. After that you want to print this user roles. To implement this you can easily use switch statements.&lt;br&gt;
Look at the code block given below (Assume you have already fetched the user role from the database into a String variable named &lt;code&gt;userole&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userRole&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"admin"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi you are an admin"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"blog writer"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi you are a blog writer"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"reader"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi you are a reader"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi you are a guest. Please register to log in."&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In here the first case checks whether the value of the &lt;code&gt;userRole&lt;/code&gt; is 'admin'. If so it will print "Hi you are an admin". You can see that I have added &lt;code&gt;break&lt;/code&gt; after the print statement. What &lt;code&gt;break&lt;/code&gt; does is that going out of the switch statements. Which means once a particular case is achieved, no other cases will be evaluated. You will simply go out of the switch block. Same process goes to the cases 'blog writer' and 'reader'.&lt;br&gt;
Next comes the case where you were unable to find the email in the database. Therefore that email does not have a &lt;code&gt;userRole&lt;/code&gt; yet. SO by &lt;code&gt;default&lt;/code&gt; the last case will print the 'guest' statement. There we have not used &lt;code&gt;break&lt;/code&gt;. This is because, &lt;code&gt;default&lt;/code&gt; is the last case in the switch block. So it will automatically go out of the switch block. No &lt;code&gt;break&lt;/code&gt; statement is required here. This might be a bit messy to understand but once you get used to it applying switch statements will become handy.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  Loops
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#for-loop"&gt;
  &lt;/a&gt;
  for Loop
&lt;/h2&gt;

&lt;p&gt;Think that you want to print numbers from 1 to 5. Then you will think that you have to write &lt;code&gt;pritln()&lt;/code&gt; line 5 times. But what if you have an opportunity to write just one &lt;code&gt;println()&lt;/code&gt; and iterate it 5 times? Sounds great right. Let's see how we can do that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's evaluate the code. We have use iterations here by using a 'for loop'. As you can see I have declared a variable &lt;code&gt;i&lt;/code&gt; inside the parenthesis of the &lt;code&gt;for()&lt;/code&gt;. After that we have give the range for 'i'. Here we want to print numbers from 1 to 5. Therefore &lt;code&gt;i&lt;/code&gt; has to be iterated from 1 to 5. So I have mentioned as &lt;code&gt;i = 1&lt;/code&gt; and after a semi colon (;) I have stated that &lt;code&gt;i &amp;lt;= 5&lt;/code&gt;. This means &lt;code&gt;i&lt;/code&gt; goes from 1 to 5. You also can write it as &lt;code&gt;for (int i = 1; i &amp;lt; 6; i++)&lt;/code&gt;. Here also you can get same output. Inside 'for()' loop you have to write the code lines that has to be executed. Here since we are only writing a single code line, we need not to use curly braces.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For loops are used in situations where the number of the iterations are known before hand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h3&gt;

&lt;p&gt;Given an array, books = {"Twilight", "New moon", "Eclipse", "Breaking dawn", "Safe Heaven", "Kite Runner", "Hunger Games"} print all its elements using a for loop.&lt;/p&gt;

&lt;p&gt;How did you code the above task? Let me guess. I assume that, you entered a range in a for loop like (int i=0; i&amp;lt;7; i++) and print the elements by calling the index. However, there is an easier way of doing the same task. Check out this code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Twilight"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"New moon"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Eclipse"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Breaking dawn"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Safe Heaven"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Kite Runner"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Hunger Games"&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the string &lt;code&gt;book&lt;/code&gt; in the parenthesis refers to a single element in the array &lt;code&gt;books&lt;/code&gt;. Therefore, this will print all the elements in the &lt;code&gt;books&lt;/code&gt; array accurately. The negative side of this method is that you can only iterate from beginning to the end. Like you cannot get the output as Hunger Games, Kite Runner, ... Twilight (from right to left) order. And also since you do not have access to index, you won't be able to know the index value of a particular element when you use this method.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#while-loop"&gt;
  &lt;/a&gt;
  While Loop
&lt;/h1&gt;

&lt;p&gt;What if you do not know the number of the iterations beforehand? Then you can use 'while loop'. Check the below code;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code we first declared an integer variable &lt;code&gt;i&lt;/code&gt; and initialized it into zero. The code line &lt;code&gt;while(i&amp;lt;10)&lt;/code&gt; ensures that the value of &lt;code&gt;i&lt;/code&gt; is always less than 10. Which means the code inside the &lt;code&gt;while()&lt;/code&gt; loop will only execute if the &lt;code&gt;i&lt;/code&gt; is less than 10. Then we print &lt;code&gt;i&lt;/code&gt; and increment it by one.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While loops can be used in conditions where you does not know the number of iterations beforehand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Assume in a case where you want user to add subject names, but you do not know number of subjects that are available. What can you do in such a scenario? You have to use a 'while loop' as you do not know the number of iterations here. You can ask the user to enter some word like 'quit' or 'finish', if he has entered all the subjects. Then you can make the loop run only when the input word is not equal to the termination word. Go through the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;userInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"quit"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Subject: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userInput&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextLine&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;toLowerCase&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;subjectCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Number of subjects = "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;subjectCount&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In above code we have taken user input as a &lt;code&gt;Scanner&lt;/code&gt; class object, and then has read the line and has stored into the string &lt;code&gt;input&lt;/code&gt;. Here you can see that I have used the method &lt;code&gt;toLowerCase()&lt;/code&gt;. Why do we need that? Look at the condition inside the parenthesis of the while loop. What it means that the value stored in &lt;code&gt;input&lt;/code&gt; string &lt;em&gt;cannot&lt;/em&gt; be equal to 'quit'. All the letters in 'quit' is in lowercase. Therefore, if user entered like 'Quit' or 'QUIT' the loop will not terminate. So to avoid those disconcerts we have to convert the user input into lowercase.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-while-loops"&gt;
  &lt;/a&gt;
  do while loops
&lt;/h2&gt;

&lt;p&gt;There is only one deference in 'do-while' loop when compared to 'while' loops. In while loop, statements will execute if and only if the condition given in the loop is true. But in 'do-while' loops statements gets executed once before checking the conditions given for the loop. Check the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, first &lt;code&gt;println()&lt;/code&gt; method gets executed and print '0'. After that it will increment it value to 1. Then only the condition in while loop is taken under consideration. Because of this we can say that 'do-while' loops will definitely execute 'at least' only once.&lt;/p&gt;

&lt;p&gt;And with that we can wrap up this article :)&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>OhSnap! Handy Terminal &amp; Git Commands</title>
      <author>Gedalya Krycer</author>
      <pubDate>Mon, 10 May 2021 12:56:44 +0000</pubDate>
      <link>https://dev.to/gedalyakrycer/ohsnap-handy-terminal-git-commands-3ggl</link>
      <guid>https://dev.to/gedalyakrycer/ohsnap-handy-terminal-git-commands-3ggl</guid>
      <description>&lt;p&gt;&lt;em&gt;The "OhSnap!" series explores bite-sized tips that you can apply today.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Here is a list of some helpful terminal and git commands for your viewing pleasure and my own future reference. 😉&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#terminal-commands"&gt;
  &lt;/a&gt;
  Terminal Commands
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#working-with-spaces"&gt;
  &lt;/a&gt;
  Working With Spaces
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd Class\ Work
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd 'Class Work'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Use a backslash (&lt;code&gt;\&lt;/code&gt;) to make "Class\ Work" equal "Class Work”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Encapsulate the phrase with quote marks to preserve spaces between words. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#open-project-folder-in-vs-code"&gt;
  &lt;/a&gt;
  Open project folder in VS Code
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd my-project-folder-name 

code .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#only-show-directories"&gt;
  &lt;/a&gt;
  Only show directories
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ls -d */
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#clear-the-terminal"&gt;
  &lt;/a&gt;
  Clear the terminal
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cmd + k
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clear
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#go-back-to-the-main-directory"&gt;
  &lt;/a&gt;
  Go back to the main directory
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ~
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#show-permissions"&gt;
  &lt;/a&gt;
  Show permissions
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ls -l
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#create-a-file"&gt;
  &lt;/a&gt;
  Create a file
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#create-a-folderdirectory"&gt;
  &lt;/a&gt;
  Create a folder/directory
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir my-project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#removes-a-file"&gt;
  &lt;/a&gt;
  Removes a file
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rm index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#remove-a-folder"&gt;
  &lt;/a&gt;
  Remove a folder
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rm -r my-project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;-r&lt;/code&gt; stands for “recursive”. It means to delete this thing and everything in it.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#copy-a-filefolder"&gt;
  &lt;/a&gt;
  Copy a file/folder
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cp img images
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first value is the original file/folder and the second value is what it is copied as.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#rename-a-filefolder-name"&gt;
  &lt;/a&gt;
  Rename a file/folder name
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mv old-name.html new-name.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first value is the original file/folder name and the second value is the new name.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#open-folder-in-finder"&gt;
  &lt;/a&gt;
  Open folder in Finder
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;open .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#getting-unstuck-from-hardtoexit-terminal-screens"&gt;
  &lt;/a&gt;
  Getting unstuck from hard-to-exit terminal screens
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shift + z
shift + z
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#git-commands"&gt;
  &lt;/a&gt;
  Git Commands
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#show-available-local-branches"&gt;
  &lt;/a&gt;
  Show available local branches
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#create-new-branch"&gt;
  &lt;/a&gt;
  Create new branch
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout -b feature-1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;checkout&lt;/code&gt; moves to the new branch &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-b&lt;/code&gt; creates a new branch&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;feature-1&lt;/code&gt; name for branch&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#push-local-branch-to-remote"&gt;
  &lt;/a&gt;
  Push local branch to remote
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push origin feature-1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#switch-to-a-new-branch"&gt;
  &lt;/a&gt;
  Switch to a new branch
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#merge-changes-from-one-branch-to-another"&gt;
  &lt;/a&gt;
  Merge changes from one branch to another
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git merge master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Navigate to the branch you want to work in&lt;/li&gt;
&lt;li&gt;After the &lt;code&gt;merge&lt;/code&gt; keyword, specify the branch that &lt;strong&gt;has the changes to be merged from&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h4&gt;
  &lt;a href="#grab-all-remote-branches-without-merging"&gt;
  &lt;/a&gt;
  Grab all remote branches without merging
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git fetch --all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#reset-the-local-master-with-the-remote-version"&gt;
  &lt;/a&gt;
  Reset the local master with the remote version
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git reset --hard origin/master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#remove-noncommitted-changes-from-all-branches-and-master-since"&gt;
  &lt;/a&gt;
  Remove non-committed changes from all branches and master since
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout -f
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#view-differences-between-commits"&gt;
  &lt;/a&gt;
  View differences between commits
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git diff
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To leave this view hit &lt;code&gt;Q&lt;/code&gt; on the keyboard &lt;/p&gt;




&lt;p&gt;&lt;em&gt;Thumbnail designed with &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>beginners</category>
      <category>git</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Making Hotwire play nice with ViewComponent</title>
      <author>Kudakwashe Paradzayi</author>
      <pubDate>Mon, 10 May 2021 12:51:04 +0000</pubDate>
      <link>https://dev.to/kudapara/making-hotwire-play-nice-with-viewcomponent-51lf</link>
      <guid>https://dev.to/kudapara/making-hotwire-play-nice-with-viewcomponent-51lf</guid>
      <description>&lt;p&gt;Have you ever wondered if you could use &lt;a href="//hotwire.dev"&gt;hotwire&lt;/a&gt; with &lt;a href="https://github.com/github/view_component"&gt;&lt;code&gt;view_component&lt;/code&gt;&lt;/a&gt; instead of partials. If you have, maybe tried and failed, welcome here.&lt;/p&gt;

&lt;p&gt;By default &lt;a href="https://hotwire.dev"&gt;hotwire&lt;/a&gt; is made to work with partials, which is the built in way to extract 'components' in the context of rails based apps. In a certain application I was building I have used &lt;a href="https://github.com/github/view_component"&gt;&lt;code&gt;view_component&lt;/code&gt; (inspired by react)&lt;/a&gt; in place of partials because it is a framework for building reusable, testable &amp;amp; encapsulated view components in Ruby on Rails.&lt;/p&gt;

&lt;p&gt;It was all fun and games until I wanted to make &lt;a href="https://hotwire.dev"&gt;hotwire&lt;/a&gt; to work with the view components I had made.&lt;/p&gt;

&lt;p&gt;We will use an e-commerce application as an example to demonstrate the problem at hand.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LJ7ASqJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620650508471/XwXipgBgf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LJ7ASqJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620650508471/XwXipgBgf.gif" alt="freshstore-gif.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NB: no JavaScript was used in making this interactive, except for displaying the loading spinners&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hotwire uses websockets to broadcast changes to all clients listening, and this is very fast considering websockets maintain a persistent open connection with the client and the changes feel almost instantaneous. In this example when a user adds a product to cart, &lt;a href="https://hotwire.dev"&gt;hotwire&lt;/a&gt; will broadcast the new product component and it will be replaced on the frontend, smooth as an SPA, with minimum javascript.&lt;/p&gt;

&lt;p&gt;When a product is added to cart, we want to show it change on the UI, unlike a traditional API request which returns JSON, hotwire returns html, in the form of turbo streams. When the response arrives it will only change the specific section in the page that has a turbo frame that matches a specific id.&lt;/p&gt;

&lt;p&gt;Using view components in this context would also help reduce the response's payload to only contain that section that has to be replaced. However view components and turbo streams dont play nice together so I googled around for a quick solution and found &lt;a href="https://discuss.hotwire.dev/t/viewcomponents-not-rendering-with-rails-stream-helper/1813/2"&gt;this answer&lt;/a&gt; on the hotwire forum. I then used that answer to successfully render a ViewComponent in the response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# app/controller/carts_controller.rb

class CartsController &amp;lt; ApplicationController
  def update
    product = Product.find(cart_params[:product_id])
    line_item = CartUpdateService.call(@product, cart_params[:quantity])
    product_component = ProductComponent.new(
      product: product,
      quantity_in_cart: @line_item.quantity
    )

    respond_to do |format|
      format.turbo_stream {
        stream = turbo_stream.replace product do
           view_context.render(product_component)
        end

        render turbo_stream: stream

        head :ok
      }
    end
end

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This was a good solution until I realised that you can only render a stream once, so this crumbled when I wanted to broadcast changes to other areas of the application, like adding &lt;code&gt;line_items&lt;/code&gt; to the cart in the UI, updating cart count, etc. This is because, by design turbo broadcasts are meant to be initiated in the model, which I sort of thought as a code smell because not only was the model responsible for data persistence, validations and business logic, it was also responsible for the way the UI worked. We all strive for &lt;a href="https://thoughtbot.com/blog/skinny-controllers-skinny-models"&gt;skinny models&lt;/a&gt;, don't we.&lt;/p&gt;

&lt;p&gt;This was how it was before, when using partials&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# app/models/line_item.rb
class LineItem &amp;lt; ApplicationRecord
  ...

  after_create_commit :broadcast_prepend_line_item, if: :current_user_present?

  private def broadcast_prepend_line_item
    broadcast_prepend_to "#{Current.user.id}:line_items", partial: 'line_items/line_item', locals: { line_item: self, store: self.order.store }
  end
  ...
end

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And as far as I had researched there was no way to use View Component instead of partials to broadcast these updates.&lt;/p&gt;

&lt;p&gt;So I went and dug into the &lt;a href="https://github.com/hotwired/turbo-rails"&gt;hotwire source code&lt;/a&gt; to look for clues whether it was possible or not.&lt;/p&gt;

&lt;p&gt;After series of iterations I came up with the concept of &lt;code&gt;LiveComponent&lt;/code&gt;, a class that would inherit from &lt;code&gt;ViewComponent::Base&lt;/code&gt; but also include hotwire modules to allow broadcasts and streams. Here is the complete code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# app/components/live_component.rb

class LiveComponent &amp;lt; ViewComponent::Base
  include Turbo::FramesHelper, Turbo::Streams::StreamName, Turbo::Streams::Broadcasts

  attr_reader :streamable, :target

  def initialize(view_context: nil, **args)
    @view_context = view_context
  end

  def broadcast_replace
    return unless @view_context.present?

    broadcast_replace_later_to(
      streamable,
      target: target,
      content: @view_context.render(self)
    )
  end

  def broadcast_prepend
    return unless @view_context.present?

    broadcast_prepend_to(
      streamable,
      target: broadcast_target_default,
      content: @view_context.render(self)
    )
  end

  def broadcast_remove
    return unless @view_context.present?

    broadcast_remove_to(
      streamable,
      target: target
    )
  end

  private def broadcast_target_default
    target.class.model_name.plural
  end
end

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is exactly a ViewComponent with some live extras baked in. Continuing with out illustration of broadcasting changes to the line_items in the cart, we would implement it as a live component like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# app/components/live_line_item_component.rb

class LiveLineItemComponent &amp;lt; LiveComponent
  def initialize(view_context: nil, line_item:, current_user:)
    @line_item = line_item

    # these will be used by LiveComponent to identify
    # the stream channel and the targeted frame-tag on the UI
    @streamable = "#{current_user.id}:line_items"
    @target = @line_item

    super
  end

  def render?
    @line_item.quantity &amp;gt; 0
  end
end

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in the html templates you can then define&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;%= turbo_frame_tag dom_id(@line_item) do %&amp;gt;
   &amp;lt;!-- line item html logic --&amp;gt;
&amp;lt;% end %&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in &lt;code&gt;cart_controller.rb&lt;/code&gt; when you add to cart you can then use the live component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    respond_to do |format|
      format.turbo_stream {
        live_line_item_component = LiveLineItemComponent.new(view_context: view_context, line_item: @line_item, current_user: Current.user)
        if @line_item.destroyed?
          live_line_item_component.broadcast_remove
        elsif @line_item.quantity == 1 &amp;amp;&amp;amp; @line_item.updated_at == @line_item.created_at
          live_line_item_component.broadcast_prepend
        else
          live_line_item_component.broadcast_replace
        end

        ...
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I know the code is a little bit 'dirty' and I'm sure some of you smart people will find ways to improve on it.&lt;/p&gt;

&lt;p&gt;It was a fun little exploration and I am happy it worked out.&lt;/p&gt;

&lt;p&gt;Cheers 🥂&lt;/p&gt;

</description>
      <category>rails</category>
    </item>
  </channel>
</rss>
