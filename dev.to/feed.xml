<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Going serverless with MongoDB Realm - Vue.js Version</title>
      <author>Demola Malomo</author>
      <pubDate>Tue, 23 Nov 2021 07:02:52 +0000</pubDate>
      <link>https://dev.to/hackmamba/going-serverless-with-mongodb-realm-vuejs-version-nld</link>
      <guid>https://dev.to/hackmamba/going-serverless-with-mongodb-realm-vuejs-version-nld</guid>
      <description>&lt;p&gt;Serverless architecture is a pattern of running and building applications and services without having to manage infrastructure. It involves the applications and services running on the server, but all the server management is done by a cloud provider.&lt;/p&gt;

&lt;p&gt;This post will discuss building a fullstack user management application using &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt;, &lt;a href="https://www.mongodb.com/realm"&gt;MongoDB Realm&lt;/a&gt;, and &lt;a href="https://vuejs.org/"&gt;Vue.js&lt;/a&gt;. At the end of this tutorial, we will learn how to create a database on MongoDB, serverless functions as our endpoints using MongoDB Realm and consume the endpoints in a Vue.js application.&lt;/p&gt;

&lt;p&gt;MongoDB Realm is a development platform designed for building mobile, web, desktop, and IoT applications. It offers services like data synchronization, serverless functions, triggers, user authentication, e.t.c. We can build and maintain application on MongoDB Realm using any of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.mongodb.com/realm/manage-apps/deploy/manual/deploy-ui/#std-label-deploy-ui"&gt;Realm UI&lt;/a&gt;:  a browser-based option to create and maintain application&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.mongodb.com/realm/manage-apps/deploy/manual/deploy-cli/#std-label-deploy-cli"&gt;Realm CLI&lt;/a&gt;: a CLI-based option to define and deploy applications&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.mongodb.com/realm/manage-apps/deploy/automated/deploy-automatically-with-github/#std-label-deploy-github"&gt;GitHub Deploy&lt;/a&gt;: use configuration files on Github to deploy applications from a Github repository&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.mongodb.com/realm/admin/api/v3/#std-label-admin-api"&gt;Admin API&lt;/a&gt;: an HTTP-based request to manage your applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post, we will be using &lt;a href="https://docs.mongodb.com/realm/manage-apps/deploy/manual/deploy-ui/#std-label-deploy-ui"&gt;Realm UI&lt;/a&gt; to build our applications.&lt;/p&gt;

&lt;p&gt;You can code along by cloning this repository (&lt;strong&gt;main branch&lt;/strong&gt;) &lt;a href="https://github.com/Mr-Malomz/vue-realm"&gt;here&lt;/a&gt;. If you prefer to view the complete code, checkout to the &lt;strong&gt;dev&lt;/strong&gt; branch of this same repository.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will focus on implementations only. The project UI has already been set up with &lt;a href="https://tailwindcss.com/"&gt;TailwindCSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can check out the React.js version here.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;The following steps in this post require JavaScript and Vue.js experience. Experience with TypeScript isn’t a requirement, but it’s nice to have.&lt;/p&gt;

&lt;p&gt;We also need a &lt;a href="https://www.mongodb.com/"&gt;MongoDB account&lt;/a&gt; to host the database and create serverless functions. &lt;a href="https://www.mongodb.com/cloud/atlas/register"&gt;&lt;strong&gt;Signup&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;is completely free&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let’s code
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#running-the-project"&gt;
  &lt;/a&gt;
  Running the Project
&lt;/h2&gt;

&lt;p&gt;To get started, we need to navigate to the project location, open our terminal and install project dependency as shown below:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;With that done, we can start a development server using the command below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run serve
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zMtY17xK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637580003144_Screenshot%2B2021-11-22%2Bat%2B12.19.26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zMtY17xK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637580003144_Screenshot%2B2021-11-22%2Bat%2B12.19.26.png" alt="" width="880" height="444"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eWa1Q9Zz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637580003179_Screenshot%2B2021-11-22%2Bat%2B12.19.46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eWa1Q9Zz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637580003179_Screenshot%2B2021-11-22%2Bat%2B12.19.46.png" alt="" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-mongodb"&gt;
  &lt;/a&gt;
  Setting up MongoDB
&lt;/h2&gt;

&lt;p&gt;To get started, we need to log in or sign up into our &lt;a href="https://dev.tohttp://"&gt;MongoDB&lt;/a&gt; account and follow the option that applies to us:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For a New Account (Sign Up)&lt;/strong&gt;&lt;br&gt;
First, we need to answer a few questions to help MongoDB help set up our account. Then click on &lt;strong&gt;Finish.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k0T17b14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334362262_Screenshot%2B2021-11-19%2Bat%2B15.58.45.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k0T17b14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334362262_Screenshot%2B2021-11-19%2Bat%2B15.58.45.png" alt="Setup MongoDB" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Shared&lt;/strong&gt; as the type of database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gcwCkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334670330_Screenshot%2B2021-11-19%2Bat%2B15.59.38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gcwCkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334670330_Screenshot%2B2021-11-19%2Bat%2B15.59.38.png" alt="Shared highlighted in red" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Create&lt;/strong&gt; to setup a cluster. This might take sometime to setup.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cwJDLYJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334961608_Screenshot%2B2021-11-19%2Bat%2B16.13.28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cwJDLYJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334961608_Screenshot%2B2021-11-19%2Bat%2B16.13.28.png" alt="Creating a cluster" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to create a user to access the database externally by inputting the &lt;strong&gt;Username&lt;/strong&gt;, &lt;strong&gt;Password&lt;/strong&gt; and then click on &lt;strong&gt;Create User&lt;/strong&gt;. We also need to add our IP address to safely connect to the database by clicking on the &lt;strong&gt;Add My Current IP Address&lt;/strong&gt; button. Then click on &lt;strong&gt;Finish and Close&lt;/strong&gt; to save changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GEZfMf-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637336863099_Screenshot%2B2021-11-19%2Bat%2B16.29.11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GEZfMf-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637336863099_Screenshot%2B2021-11-19%2Bat%2B16.29.11.png" alt="Create user" width="880" height="501"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zNh0mXeV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637336863177_Screenshot%2B2021-11-19%2Bat%2B16.31.34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zNh0mXeV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637336863177_Screenshot%2B2021-11-19%2Bat%2B16.31.34.png" alt="Add IP" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On saving the changes, we should see a Database Deployments screen, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PfqX_2gX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637582445471_Screenshot%2B2021-11-22%2Bat%2B12.33.04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PfqX_2gX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637582445471_Screenshot%2B2021-11-22%2Bat%2B12.33.04.png" alt="cluster" width="880" height="226"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For an Existing Account (Log In)&lt;/strong&gt;&lt;br&gt;
Click the project dropdown menu and click on the &lt;strong&gt;New Project&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XcTSNMP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365380025_Screenshot%2B2021-11-20%2Bat%2B00.33.27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XcTSNMP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365380025_Screenshot%2B2021-11-20%2Bat%2B00.33.27.png" alt="New Project" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter the &lt;code&gt;realmVue&lt;/code&gt; as the project name, click on &lt;strong&gt;Next&lt;/strong&gt; and then click &lt;strong&gt;Create Project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NHgW9pt8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637582923909_Screenshot%2B2021-11-22%2Bat%2B13.07.30.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NHgW9pt8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637582923909_Screenshot%2B2021-11-22%2Bat%2B13.07.30.png" alt="enter project name" width="880" height="457"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o0ifrFWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637582923964_Screenshot%2B2021-11-22%2Bat%2B13.07.44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o0ifrFWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637582923964_Screenshot%2B2021-11-22%2Bat%2B13.07.44.png" alt="create project" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Build a Database&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aBKr1nrz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637583023976_Screenshot%2B2021-11-22%2Bat%2B13.09.56.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aBKr1nrz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637583023976_Screenshot%2B2021-11-22%2Bat%2B13.09.56.png" alt="click on Build a Database" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Shared&lt;/strong&gt; as the type of database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gcwCkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334670330_Screenshot%2B2021-11-19%2Bat%2B15.59.38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gcwCkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334670330_Screenshot%2B2021-11-19%2Bat%2B15.59.38.png" alt="Shared highlighted in red" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Create&lt;/strong&gt; to setup a cluster. This might take sometime to setup.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cwJDLYJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334961608_Screenshot%2B2021-11-19%2Bat%2B16.13.28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cwJDLYJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334961608_Screenshot%2B2021-11-19%2Bat%2B16.13.28.png" alt="Creating a cluster" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to create a user to access the database externally by inputting the &lt;strong&gt;Username&lt;/strong&gt;, &lt;strong&gt;Password&lt;/strong&gt; and then clicking on &lt;strong&gt;Create User&lt;/strong&gt;. We also need to add our IP address to safely connect to the database by clicking on the &lt;strong&gt;Add My Current IP Address&lt;/strong&gt; button. Then click on &lt;strong&gt;Finish and Close&lt;/strong&gt; to save changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GEZfMf-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637336863099_Screenshot%2B2021-11-19%2Bat%2B16.29.11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GEZfMf-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637336863099_Screenshot%2B2021-11-19%2Bat%2B16.29.11.png" alt="Create user" width="880" height="501"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zNh0mXeV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637336863177_Screenshot%2B2021-11-19%2Bat%2B16.31.34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zNh0mXeV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637336863177_Screenshot%2B2021-11-19%2Bat%2B16.31.34.png" alt="Add IP" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On saving the changes, we should see a Database Deployments screen, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g3ZoChoZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637583424964_Screenshot%2B2021-11-22%2Bat%2B13.16.38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g3ZoChoZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637583424964_Screenshot%2B2021-11-22%2Bat%2B13.16.38.png" alt="cluster" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#loading-sample-data"&gt;
  &lt;/a&gt;
  Loading Sample Data
&lt;/h2&gt;

&lt;p&gt;Next, we need to populate our database with users' sample data. To do this, click on the &lt;strong&gt;Browse Collections&lt;/strong&gt; button&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zf8KtrBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637583539121_Screenshot%2B2021-11-22%2Bat%2B13.16.38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zf8KtrBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637583539121_Screenshot%2B2021-11-22%2Bat%2B13.16.38.png" alt="browse collection" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Add My Own Data&lt;/strong&gt;, input &lt;code&gt;vueRealmDB&lt;/code&gt; and &lt;code&gt;vueRealmCol&lt;/code&gt; as the database and collection name, and click on &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gcozTyXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637584046943_Screenshot%2B2021-11-22%2Bat%2B13.22.36.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gcozTyXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637584046943_Screenshot%2B2021-11-22%2Bat%2B13.22.36.png" alt="add my own data" width="880" height="457"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LXHCbuk9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637584046976_Screenshot%2B2021-11-22%2Bat%2B13.25.26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LXHCbuk9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637584046976_Screenshot%2B2021-11-22%2Bat%2B13.25.26.png" alt="create" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to insert these sample data:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;To do this, click on the &lt;strong&gt;Insert Document&lt;/strong&gt; button, fill in the details above and click on &lt;strong&gt;Insert&lt;/strong&gt; to save.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LV_t08e8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637584413150_Screenshot%2B2021-11-22%2Bat%2B13.31.50.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LV_t08e8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637584413150_Screenshot%2B2021-11-22%2Bat%2B13.31.50.png" alt="insert document" width="880" height="353"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1AcRbMAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637584413107_Screenshot%2B2021-11-22%2Bat%2B13.30.52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1AcRbMAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637584413107_Screenshot%2B2021-11-22%2Bat%2B13.30.52.png" alt="fill and insert" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QbPnPwzy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637584737345_Screenshot%2B2021-11-22%2Bat%2B13.38.23.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QbPnPwzy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637584737345_Screenshot%2B2021-11-22%2Bat%2B13.38.23.png" alt="Collection with documents" width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-and-configuring-mongodb-realm-application"&gt;
  &lt;/a&gt;
  Creating and configuring MongoDB Realm application
&lt;/h2&gt;

&lt;p&gt;With our database populated, we need to create serverless functions to perform Create, Read, Update and Delete (CRUD) on our database. To do this, select the &lt;strong&gt;Realm&lt;/strong&gt; tab, click on &lt;strong&gt;Build your own App&lt;/strong&gt;. Then click on &lt;strong&gt;Create Realm Application&lt;/strong&gt; to setup our application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fKqAjsM1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637429955105_Screenshot%2B2021-11-20%2Bat%2B18.37.09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fKqAjsM1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637429955105_Screenshot%2B2021-11-20%2Bat%2B18.37.09.png" alt="select app" width="880" height="444"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2XH2GAG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637430101165_Screenshot%2B2021-11-20%2Bat%2B18.41.17.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2XH2GAG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637430101165_Screenshot%2B2021-11-20%2Bat%2B18.41.17.png" alt="create application" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MongoDB Realm also ships with templates that we can use to build our application quickly. For this tutorial, we will be building from scratch. &lt;/p&gt;

&lt;p&gt;Next, we need to setup permission and rules for our functions. To do this, close the popup guide, click on &lt;strong&gt;Rules&lt;/strong&gt;, select the &lt;strong&gt;vueRealmCol&lt;/strong&gt; and click on &lt;strong&gt;Configure Collection&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8uoc0JeG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637585145195_Screenshot%2B2021-11-22%2Bat%2B13.43.52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8uoc0JeG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637585145195_Screenshot%2B2021-11-22%2Bat%2B13.43.52.png" alt="configure collection" width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MongoDB Realm’s Save and Deploy&lt;/strong&gt;&lt;br&gt;
With that done, MongoDB Realm will show us a widget illustrating the concept of Save and Deploy. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--prEMS29L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637585215538_Screenshot%2B2021-11-22%2Bat%2B13.46.45.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--prEMS29L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637585215538_Screenshot%2B2021-11-22%2Bat%2B13.46.45.png" alt="save and deploy" width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When writing a serverless function, clicking on &lt;strong&gt;Save&lt;/strong&gt; creates a development draft that we can test and play around with. At the same time, &lt;strong&gt;Deploy&lt;/strong&gt; makes our changes public to be consumed by another application(Vue.js in our case).&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Next&lt;/strong&gt; and then &lt;strong&gt;Got it&lt;/strong&gt; to continue.&lt;/p&gt;

&lt;p&gt;Next, we need to allow &lt;strong&gt;Read&lt;/strong&gt; and &lt;strong&gt;Write&lt;/strong&gt; permissions for our function and then &lt;strong&gt;Save.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gsHFdccA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637585456677_Screenshot%2B2021-11-22%2Bat%2B13.48.40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gsHFdccA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637585456677_Screenshot%2B2021-11-22%2Bat%2B13.48.40.png" alt="read and write permissions" width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, navigate to the &lt;strong&gt;Authentication&lt;/strong&gt; tab, click on  &lt;strong&gt;Allow users to log in anonymously&lt;/strong&gt;, toggle it on and &lt;strong&gt;Save Draft&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y3i3vS3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637432705669_Screenshot%2B2021-11-20%2Bat%2B19.20.40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y3i3vS3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637432705669_Screenshot%2B2021-11-20%2Bat%2B19.20.40.png" alt="allow anonymous" width="880" height="444"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X4JBmzCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637432705712_Screenshot%2B2021-11-20%2Bat%2B19.22.47.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X4JBmzCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637432705712_Screenshot%2B2021-11-20%2Bat%2B19.22.47.png" alt="save draft" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MongoDB Realm also ships with several authentication options that we can explore. For this tutorial, we will be using the anonymous option. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-serverless-functions-on-mongodb-realm"&gt;
  &lt;/a&gt;
  Creating serverless functions on MongoDB Realm
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Get All Users Serverless Function&lt;/strong&gt;&lt;br&gt;
With the configuration done, we can now create a serverless function that returns list of users. To do this, navigate to the &lt;strong&gt;Functions&lt;/strong&gt; tab, click on &lt;strong&gt;Create New Function&lt;/strong&gt;, and input &lt;code&gt;getAllUsers&lt;/code&gt; as the function name&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gAhx0Bcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637585888957_Screenshot%2B2021-11-22%2Bat%2B13.55.25.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gAhx0Bcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637585888957_Screenshot%2B2021-11-22%2Bat%2B13.55.25.png" alt="create new function" width="880" height="464"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hdbT1_83--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637585889017_Screenshot%2B2021-11-22%2Bat%2B13.55.43.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hdbT1_83--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637585889017_Screenshot%2B2021-11-22%2Bat%2B13.55.43.png" alt="input function name" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, select the &lt;strong&gt;Function Editor&lt;/strong&gt; tab and modify the function to the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a collection variable to access the &lt;code&gt;vueRealmDB&lt;/code&gt; database and &lt;code&gt;vueRealmCol&lt;/code&gt; collection&lt;/li&gt;
&lt;li&gt;Return the list of documents in the collection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we can test our function by clicking on &lt;strong&gt;Run&lt;/strong&gt; button to see list of users.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7NMAbHQq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637586206619_Screenshot%2B2021-11-22%2Bat%2B14.02.34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7NMAbHQq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637586206619_Screenshot%2B2021-11-22%2Bat%2B14.02.34.png" alt="running getAllUsers function" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we need to copy any returned user’s &lt;code&gt;_id&lt;/code&gt; and save it somewhere; we need it for the next function. Then click on &lt;strong&gt;Save Draft&lt;/strong&gt; to create a deployment draft for our function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JFAPTRXz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637586991637_Screenshot%2B2021-11-22%2Bat%2B14.08.47.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JFAPTRXz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637586991637_Screenshot%2B2021-11-22%2Bat%2B14.08.47.png" alt="copy id and save draft" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get A User Serverless Function&lt;/strong&gt;&lt;br&gt;
To do this, click on the &lt;strong&gt;Functions&lt;/strong&gt; tab,  click on &lt;strong&gt;Create New Function&lt;/strong&gt;, and input &lt;code&gt;getSingleUser&lt;/code&gt; as the function name&lt;/p&gt;

&lt;p&gt;&lt;a href="/static/img/pixel.gif" class="article-body-image-wrapper"&gt;&lt;img src="/static/img/pixel.gif" alt="create new function"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="/static/img/pixel.gif" class="article-body-image-wrapper"&gt;&lt;img src="/static/img/pixel.gif" alt="name function"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, select the &lt;strong&gt;Function Editor&lt;/strong&gt; tab, and modify the function to the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a collection variable to access the &lt;code&gt;vueRealmDB&lt;/code&gt; database and &lt;code&gt;vueRealmCol&lt;/code&gt; collection&lt;/li&gt;
&lt;li&gt;Return a single user by finding it by its &lt;code&gt;_id&lt;/code&gt;. Because MongoDB saves documents in BSON, we need to parse the &lt;code&gt;arg&lt;/code&gt;  as BSON using the &lt;code&gt;BSON.ObjectId&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To test our function, Navigate to the &lt;strong&gt;Console&lt;/strong&gt; tab, replace the &lt;code&gt;Hello world!&lt;/code&gt; in the &lt;strong&gt;exports&lt;/strong&gt; function with the user’s &lt;code&gt;_id&lt;/code&gt; we copied earlier and then click on &lt;strong&gt;Run.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2PI3coKR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637588328533_Screenshot%2B2021-11-22%2Bat%2B14.26.00.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2PI3coKR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637588328533_Screenshot%2B2021-11-22%2Bat%2B14.26.00.png" alt="testing getSingleUser" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we need to save our function by clicking on the &lt;strong&gt;Save Draft&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit A User Serverless Function&lt;/strong&gt;&lt;br&gt;
To do this, we need to follow the same steps as above.&lt;/p&gt;

&lt;p&gt;First, click on the &lt;strong&gt;Functions&lt;/strong&gt; tab,  click on &lt;strong&gt;Create New Function&lt;/strong&gt;, and input &lt;code&gt;editUser&lt;/code&gt; as the function name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RY-MGWIJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637588507648_Screenshot%2B2021-11-22%2Bat%2B14.41.31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RY-MGWIJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637588507648_Screenshot%2B2021-11-22%2Bat%2B14.41.31.png" alt="editUser" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, select the &lt;strong&gt;Function Editor&lt;/strong&gt; tab and modify the function to the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modify the function to accept &lt;code&gt;id&lt;/code&gt;,  &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;location&lt;/code&gt;, and &lt;code&gt;title&lt;/code&gt; arguments&lt;/li&gt;
&lt;li&gt;Create a collection variable to access the &lt;code&gt;vueRealmDB&lt;/code&gt; database and &lt;code&gt;vueRealmCol&lt;/code&gt; collection&lt;/li&gt;
&lt;li&gt;Create an &lt;code&gt;updated&lt;/code&gt; variable that finds the document by &lt;code&gt;_id&lt;/code&gt;, update the collection fields, and set a &lt;code&gt;returnNewDocument&lt;/code&gt; flag to return the updated document.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we can test our function by navigating to the Console tab, replace the &lt;code&gt;Hello world!&lt;/code&gt; in the &lt;strong&gt;exports&lt;/strong&gt; function with required arguments(&lt;strong&gt;_id, name, location, and title&lt;/strong&gt;), click on &lt;strong&gt;Run&lt;/strong&gt;, and then &lt;strong&gt;Save Draft&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6gdYUIAD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637589196152_Screenshot%2B2021-11-22%2Bat%2B14.51.07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6gdYUIAD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637589196152_Screenshot%2B2021-11-22%2Bat%2B14.51.07.png" alt="editUser" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create A User Serverless Function&lt;/strong&gt;&lt;br&gt;
To do this, we need to follow the same steps as before.&lt;/p&gt;

&lt;p&gt;First, click on the &lt;strong&gt;Functions&lt;/strong&gt; tab,  click on &lt;strong&gt;Create New Function&lt;/strong&gt;, and input &lt;code&gt;createUser&lt;/code&gt; as the function name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FBIHM2gs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637589333325_Screenshot%2B2021-11-22%2Bat%2B14.55.16.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FBIHM2gs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637589333325_Screenshot%2B2021-11-22%2Bat%2B14.55.16.png" alt="createUser" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, select the &lt;strong&gt;Function Editor&lt;/strong&gt; tab and modify the function to the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modify the function to accept &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;location&lt;/code&gt;, and &lt;code&gt;title&lt;/code&gt; arguments.&lt;/li&gt;
&lt;li&gt;Create a collection variable to access the &lt;code&gt;vueRealmDB&lt;/code&gt; database and &lt;code&gt;vueRealmCol&lt;/code&gt; collection.&lt;/li&gt;
&lt;li&gt;Create a new user by inserting the arguments and returning the user.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we can test our function by navigating to the Console tab, replace the &lt;code&gt;Hello world!&lt;/code&gt; in the &lt;strong&gt;exports&lt;/strong&gt; function with required arguments(&lt;strong&gt;name, location, and title&lt;/strong&gt;), click on &lt;strong&gt;Run&lt;/strong&gt;, and then &lt;strong&gt;Save Draft&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ro_lgJev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637591396300_Screenshot%2B2021-11-22%2Bat%2B14.57.52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ro_lgJev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637591396300_Screenshot%2B2021-11-22%2Bat%2B14.57.52.png" alt="createUser" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Delete A User Serverless Function&lt;/strong&gt;&lt;br&gt;
To do this, we need to follow the same steps as before.&lt;/p&gt;

&lt;p&gt;First, click on the &lt;strong&gt;Functions&lt;/strong&gt; tab,  click on &lt;strong&gt;Create New Function&lt;/strong&gt;, and input &lt;code&gt;deleteUser&lt;/code&gt; as the function name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tj8B4mYP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637591516954_Screenshot%2B2021-11-22%2Bat%2B15.31.35.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tj8B4mYP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637591516954_Screenshot%2B2021-11-22%2Bat%2B15.31.35.png" alt="deleteUser" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, select the &lt;strong&gt;Function Editor&lt;/strong&gt; tab and modify the function to the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modify the function to accept arguments.&lt;/li&gt;
&lt;li&gt;Create a collection variable to access the &lt;code&gt;vueRealmDB&lt;/code&gt; database and &lt;code&gt;vueRealmCol&lt;/code&gt; collection.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;deleteUser&lt;/code&gt; variable for deleting by &lt;code&gt;_id&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we can test our function by navigating to the Console tab, replace the &lt;code&gt;Hello world!&lt;/code&gt; in the &lt;strong&gt;exports&lt;/strong&gt; function with required the argument, click on &lt;strong&gt;Run&lt;/strong&gt;, and then &lt;strong&gt;Save Draft&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rdgm61RT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637592179074_Screenshot%2B2021-11-22%2Bat%2B15.35.21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rdgm61RT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637592179074_Screenshot%2B2021-11-22%2Bat%2B15.35.21.png" alt="deleteUser" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-serverless-functions"&gt;
  &lt;/a&gt;
  Deploying serverless functions
&lt;/h2&gt;

&lt;p&gt;To start using the serverless functions in our application, we need to deploy them. To do this, click on the &lt;strong&gt;Review Draft &amp;amp; Deploy&lt;/strong&gt; button, scroll down and then click on &lt;strong&gt;Deploy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vOsNEAzv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637592707979_Screenshot%2B2021-11-22%2Bat%2B15.41.38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vOsNEAzv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637592707979_Screenshot%2B2021-11-22%2Bat%2B15.41.38.png" alt="review draft &amp;amp; deploy" width="880" height="464"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8DWhwX_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637457560813_Screenshot%2B2021-11-21%2Bat%2B02.17.08.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8DWhwX_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637457560813_Screenshot%2B2021-11-21%2Bat%2B02.17.08.png" alt="click on deploy" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We should get a prompt showing the status of our deployment.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#finally-integration-with-vuejs"&gt;
  &lt;/a&gt;
  Finally! Integration with Vue.js
&lt;/h2&gt;

&lt;p&gt;To integrate MongoDB Realm in our application,  we need to install the dependencies with:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i realm-web
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;code&gt;realm-web&lt;/code&gt; is a &lt;a href="https://github.com/realm/realm-js/tree/master/packages/realm-web#readme"&gt;library&lt;/a&gt; for accessing MongoDB Realm from a web-browser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup an Environment Variable&lt;/strong&gt;&lt;br&gt;
First, we need to create a &lt;code&gt;.env&lt;/code&gt; file in the project root directory, and in this file, add the snippet below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;VUE_APP_REALM_APP_ID=&amp;lt;your-realm-app-id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;To get our &lt;strong&gt;Realm App ID&lt;/strong&gt;, we need to click on the copy icon as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nv8S29TK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637593055750_Screenshot%2B2021-11-22%2Bat%2B15.56.30.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nv8S29TK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637593055750_Screenshot%2B2021-11-22%2Bat%2B15.56.30.png" alt="copy realm app id by clicking on the highlighted copy icon" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup MongoDB Realm&lt;/strong&gt;&lt;br&gt;
Next, we need to create a &lt;code&gt;utils&lt;/code&gt; folder in the &lt;code&gt;src&lt;/code&gt; folder, and in this folder, create a &lt;code&gt;mongo.client.ts&lt;/code&gt; file and add the code snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a variable to store the &lt;strong&gt;Realm App ID&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Create and export an instance of MongoDB Realm and pass the App ID. The bang&lt;code&gt;!&lt;/code&gt; in front of &lt;code&gt;REALM_APP_ID&lt;/code&gt; tells the compiler to relax the non-null constraint error(Meaning the parameter cannot be null or undefined)&lt;/li&gt;
&lt;li&gt;Create and export the credential type we will be using for this app. We configure this authentication option earlier.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Get All Users&lt;/strong&gt;&lt;br&gt;
To get all users, we need to create an interface to describe the response properties. To do this, we need to create a &lt;code&gt;models&lt;/code&gt; folder in the &lt;code&gt;src&lt;/code&gt; folder, and in this folder, create a &lt;code&gt;user.interface.ts&lt;/code&gt; file and add the code snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: &lt;em&gt;The question mark in front of&lt;/em&gt; &lt;strong&gt;&lt;em&gt;_id&lt;/em&gt;&lt;/strong&gt;  &lt;em&gt;tells TypeScript that this property is optional since MongoDB automatically generates it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to modify &lt;code&gt;App.vue&lt;/code&gt; by updating it with the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the &lt;code&gt;IUser&lt;/code&gt; interface, &lt;code&gt;app&lt;/code&gt; and &lt;code&gt;credentials&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create &lt;code&gt;users&lt;/code&gt;  property to manage the list of users.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;getListOfUsers&lt;/code&gt;  function to authenticate our application using the &lt;code&gt;credentials&lt;/code&gt; imported and get the list of users by accessing the &lt;code&gt;getAllUsers&lt;/code&gt; serverless function we created earlier. Then update the &lt;code&gt;users&lt;/code&gt; property and use the &lt;code&gt;mounted&lt;/code&gt; hook to call the function.
&lt;strong&gt;PS&lt;/strong&gt;: &lt;em&gt;The serverless function (&lt;/em&gt;&lt;strong&gt;&lt;em&gt;getAllUsers&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;in our case) called must be the same as the one defined on MongoDB Realm.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Update the mark-up to display the list of users.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Complete App.vue&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Create A User&lt;/strong&gt;&lt;br&gt;
To create a user, we must first modify &lt;code&gt;App.vue&lt;/code&gt; by updating it with the snippet below&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add a &lt;code&gt;userValue&lt;/code&gt; property to the &lt;code&gt;data&lt;/code&gt; property.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;updateUserValue&lt;/code&gt; function to update the &lt;code&gt;userValue&lt;/code&gt; property&lt;/li&gt;
&lt;li&gt;Include &lt;code&gt;watch&lt;/code&gt; component property to monitor the &lt;code&gt;userValue&lt;/code&gt; property and get the updated list of users if there is a change made to it.&lt;/li&gt;
&lt;li&gt;Update the &lt;code&gt;Modal&lt;/code&gt; component to accept the &lt;code&gt;updateUserValue&lt;/code&gt; as a &lt;code&gt;prop&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, navigate to the &lt;code&gt;Modal.vue&lt;/code&gt; file inside the &lt;code&gt;components&lt;/code&gt; folder, update the &lt;code&gt;props&lt;/code&gt;, and create a user.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;updateUserValue&lt;/code&gt; to &lt;code&gt;props&lt;/code&gt; property&lt;/li&gt;
&lt;li&gt;Modify the &lt;code&gt;onSubmitForm&lt;/code&gt; function to authenticate our application using the &lt;code&gt;credentials&lt;/code&gt; imported. Create a user by accessing the &lt;code&gt;createUser&lt;/code&gt; serverless function we created earlier, passing the required arguments (&lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;location&lt;/strong&gt; and &lt;strong&gt;title&lt;/strong&gt;)and then updating the &lt;code&gt;userValue&lt;/code&gt; and form state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Edit A User&lt;/strong&gt;&lt;br&gt;
To edit a user, we must first modify &lt;code&gt;App.vue&lt;/code&gt; by creating a property to manage the &lt;code&gt;_id&lt;/code&gt; of the user we want to edit and function to update it. We also updated the &lt;code&gt;handleEditClick&lt;/code&gt; function to update the property and pass it as props to the &lt;code&gt;Modal&lt;/code&gt; component.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Next, we need to populate our form when the &lt;strong&gt;Edit&lt;/strong&gt; button is clicked. To do this, open &lt;code&gt;Modal.vue&lt;/code&gt; and update as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;editingId&lt;/code&gt; to &lt;code&gt;props&lt;/code&gt; property&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;getAUser&lt;/code&gt; function to authenticate our application using the &lt;code&gt;credentials&lt;/code&gt; imported. Get the selected user details using the &lt;code&gt;getSingleUser&lt;/code&gt;  serverless function and then update the form values. The &lt;code&gt;getSingleUser&lt;/code&gt; function also required us to convert &lt;code&gt;editingId&lt;/code&gt; to string using &lt;code&gt;BSON.ObjectID&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;Include &lt;code&gt;watch&lt;/code&gt; component property to monitor the &lt;code&gt;isEdit&lt;/code&gt; state, conditionally call the &lt;code&gt;getAUser&lt;/code&gt; function and update form state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to update the &lt;code&gt;onSubmitForm&lt;/code&gt; function to include updating the user’s details by conditionally checking if it is an update action or not. Next, we need to call the &lt;code&gt;editUser&lt;/code&gt; serverless function and pass in the required parameters. Finally, update the &lt;code&gt;updateUserValue&lt;/code&gt;, restore the form back to default and close the &lt;code&gt;Modal&lt;/code&gt; component.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Complete Modal.Vue&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Delete A User&lt;/strong&gt;&lt;br&gt;
To delete a user, we need to modify &lt;code&gt;App.vue&lt;/code&gt; by creating a &lt;code&gt;handleDelete&lt;/code&gt; function as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Creates a &lt;code&gt;deleteAUser&lt;/code&gt; function that takes an &lt;code&gt;id&lt;/code&gt; as an argument, authenticate our application using the &lt;code&gt;credentials&lt;/code&gt;. Delete selected user using the &lt;code&gt;deleteUser&lt;/code&gt; serverless function and update the &lt;code&gt;userValue&lt;/code&gt; state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Complete App.vue&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Finally, we can test our application by starting the development server and performing CRUD operations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YwSeduFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637622880463_Screenshot%2B2021-11-23%2Bat%2B00.14.29.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YwSeduFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5F12CB220A74A4DEB6FF68681B47C7B21F99639FF61AAE2AFC0BCCDD4BDF4016_1637622880463_Screenshot%2B2021-11-23%2Bat%2B00.14.29.png" alt="working application" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This post discussed how to create a database on MongoDB, create and deploy serverless functions using MongoDB Realm and consume the endpoints in a Vue.js application.&lt;/p&gt;

&lt;p&gt;You may find these resources helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.mongodb.com/realm/"&gt;MongoDB Realm&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://tailwindcss.com/"&gt;TailwindCSS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/realm/realm-js"&gt;Realm-Web SDK&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://en.wikipedia.org/wiki/Serverless_computing"&gt;Serverless computing&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mongodb.com/json-and-bson"&gt;BSON&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>serverless</category>
      <category>mongodb</category>
      <category>vue</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Going serverless with MongoDB Realm - React.js Version</title>
      <author>Demola Malomo</author>
      <pubDate>Tue, 23 Nov 2021 07:02:11 +0000</pubDate>
      <link>https://dev.to/hackmamba/going-serverless-with-mongodb-realm-reactjs-version-jh6</link>
      <guid>https://dev.to/hackmamba/going-serverless-with-mongodb-realm-reactjs-version-jh6</guid>
      <description>&lt;p&gt;Serverless architecture is a pattern of running and building applications and services without having to manage infrastructure. It involves the applications and services running on the server, but all the server management is done by a cloud provider.&lt;/p&gt;

&lt;p&gt;This post will discuss building a fullstack user management application using &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt;, &lt;a href="https://www.mongodb.com/realm"&gt;MongoDB Realm&lt;/a&gt;, and &lt;a href="https://reactjs.org/"&gt;React.js&lt;/a&gt;. At the end of this tutorial, we will learn how to create a database on MongoDB, serverless functions as our endpoints using MongoDB Realm and consume the endpoints in a React.js application.&lt;/p&gt;

&lt;p&gt;MongoDB Realm is a development platform designed for building mobile, web, desktop, and IoT applications. It offers services like data synchronization, serverless functions, triggers, user authentication, e.t.c. We can build and maintain application on MongoDB Realm using any of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.mongodb.com/realm/manage-apps/deploy/manual/deploy-ui/#std-label-deploy-ui"&gt;Realm UI&lt;/a&gt;:  a browser-based option to create and maintain application&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.mongodb.com/realm/manage-apps/deploy/manual/deploy-cli/#std-label-deploy-cli"&gt;Realm CLI&lt;/a&gt;: a CLI-based option to define and deploy applications&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.mongodb.com/realm/manage-apps/deploy/automated/deploy-automatically-with-github/#std-label-deploy-github"&gt;GitHub Deploy&lt;/a&gt;: use configuration files on Github to deploy applications from a Github repository&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.mongodb.com/realm/admin/api/v3/#std-label-admin-api"&gt;Admin API&lt;/a&gt;: an HTTP-based request to manage your applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post, we will be using &lt;a href="https://docs.mongodb.com/realm/manage-apps/deploy/manual/deploy-ui/#std-label-deploy-ui"&gt;Realm UI&lt;/a&gt; to build our applications.&lt;/p&gt;

&lt;p&gt;You can code along by cloning this repository (&lt;strong&gt;main branch&lt;/strong&gt;) &lt;a href="https://github.com/Mr-Malomz/react-realm"&gt;here&lt;/a&gt;. If you prefer to view the complete code, checkout to the &lt;strong&gt;dev&lt;/strong&gt; branch of this same repository.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will focus on implementations only. The project UI has already been set up with &lt;a href="https://tailwindcss.com/"&gt;TailwindCSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can check out the Vue.js version here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;The following steps in this post require JavaScript and React.js experience. Experience with TypeScript isn’t a requirement, but it’s nice to have.&lt;/p&gt;

&lt;p&gt;We also need a &lt;a href="https://www.mongodb.com/"&gt;MongoDB account&lt;/a&gt; to host database the and create serverless functions. &lt;a href="https://www.mongodb.com/cloud/atlas/register"&gt;&lt;strong&gt;Signup&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;is completely free&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let’s code
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#running-the-project"&gt;
  &lt;/a&gt;
  Running the Project
&lt;/h2&gt;

&lt;p&gt;To get started, we need to navigate to the project location, open our terminal and install project dependency as shown below:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;With that done, we can start a development server using the command below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4oMajjcm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637324516561_screencapture-localhost-3000-2021-11-19-13_20_27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oMajjcm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637324516561_screencapture-localhost-3000-2021-11-19-13_20_27.png" alt="" width="880" height="449"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xO9Wfuub--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637324516571_screencapture-localhost-3000-2021-11-19-13_20_46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xO9Wfuub--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637324516571_screencapture-localhost-3000-2021-11-19-13_20_46.png" alt="" width="880" height="411"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-mongodb"&gt;
  &lt;/a&gt;
  Setting up MongoDB
&lt;/h2&gt;

&lt;p&gt;To get started, we need to log in or sign up into our &lt;a href="https://dev.tohttp://"&gt;MongoDB&lt;/a&gt; account and follow the option that applies to us:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For a New Account (Sign Up)&lt;/strong&gt;&lt;br&gt;
First, we need to answer a few questions to help MongoDB help set up our account. Then click on &lt;strong&gt;Finish.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k0T17b14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334362262_Screenshot%2B2021-11-19%2Bat%2B15.58.45.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k0T17b14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334362262_Screenshot%2B2021-11-19%2Bat%2B15.58.45.png" alt="Setup MongoDB" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Shared&lt;/strong&gt; as the type of database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gcwCkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334670330_Screenshot%2B2021-11-19%2Bat%2B15.59.38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gcwCkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334670330_Screenshot%2B2021-11-19%2Bat%2B15.59.38.png" alt="Shared highlighted in red" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Create&lt;/strong&gt; to setup a cluster. This might take sometime to setup.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cwJDLYJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334961608_Screenshot%2B2021-11-19%2Bat%2B16.13.28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cwJDLYJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334961608_Screenshot%2B2021-11-19%2Bat%2B16.13.28.png" alt="Creating a cluster" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to create a user to access the database externally by inputting the &lt;strong&gt;Username&lt;/strong&gt;, &lt;strong&gt;Password&lt;/strong&gt; and then click on &lt;strong&gt;Create User&lt;/strong&gt;. We also need to add our IP address to safely connect to the database by clicking on the &lt;strong&gt;Add My Current IP Address&lt;/strong&gt; button. Then click on &lt;strong&gt;Finish and Close&lt;/strong&gt; to save changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GEZfMf-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637336863099_Screenshot%2B2021-11-19%2Bat%2B16.29.11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GEZfMf-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637336863099_Screenshot%2B2021-11-19%2Bat%2B16.29.11.png" alt="Create user" width="880" height="501"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zNh0mXeV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637336863177_Screenshot%2B2021-11-19%2Bat%2B16.31.34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zNh0mXeV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637336863177_Screenshot%2B2021-11-19%2Bat%2B16.31.34.png" alt="Add IP" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On saving the changes, we should see a Database Deployments screen, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B6brk7G5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637366357918_Screenshot%2B2021-11-20%2Bat%2B00.59.05.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B6brk7G5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637366357918_Screenshot%2B2021-11-20%2Bat%2B00.59.05.png" alt="cluster" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For an Existing Account (Log In)&lt;/strong&gt;&lt;br&gt;
Click the project dropdown menu and click on the &lt;strong&gt;New Project&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XcTSNMP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365380025_Screenshot%2B2021-11-20%2Bat%2B00.33.27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XcTSNMP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365380025_Screenshot%2B2021-11-20%2Bat%2B00.33.27.png" alt="New Project" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter the &lt;code&gt;reactRealm&lt;/code&gt; as the project name, click on &lt;strong&gt;Next&lt;/strong&gt; and then click &lt;strong&gt;Create Project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TUJCW4_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365425845_Screenshot%2B2021-11-20%2Bat%2B00.42.02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TUJCW4_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365425845_Screenshot%2B2021-11-20%2Bat%2B00.42.02.png" alt="enter project name" width="880" height="447"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c46knZSW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365425865_Screenshot%2B2021-11-20%2Bat%2B00.42.33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c46knZSW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365425865_Screenshot%2B2021-11-20%2Bat%2B00.42.33.png" alt="create project" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Build a Database&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NPgml2vk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365760093_Screenshot%2B2021-11-20%2Bat%2B00.47.26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NPgml2vk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365760093_Screenshot%2B2021-11-20%2Bat%2B00.47.26.png" alt="" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Shared&lt;/strong&gt; as the type of database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gcwCkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334670330_Screenshot%2B2021-11-19%2Bat%2B15.59.38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gcwCkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334670330_Screenshot%2B2021-11-19%2Bat%2B15.59.38.png" alt="Shared highlighted in red" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Create&lt;/strong&gt; to setup a cluster. This might take sometime to setup.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cwJDLYJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334961608_Screenshot%2B2021-11-19%2Bat%2B16.13.28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cwJDLYJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334961608_Screenshot%2B2021-11-19%2Bat%2B16.13.28.png" alt="Creating a cluster" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to create a user to access the database externally by inputting the &lt;strong&gt;Username&lt;/strong&gt;, &lt;strong&gt;Password&lt;/strong&gt; and then clicking on &lt;strong&gt;Create User&lt;/strong&gt;. We also need to add our IP address to safely connect to the database by clicking on the &lt;strong&gt;Add My Current IP Address&lt;/strong&gt; button. Then click on &lt;strong&gt;Finish and Close&lt;/strong&gt; to save changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GEZfMf-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637336863099_Screenshot%2B2021-11-19%2Bat%2B16.29.11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GEZfMf-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637336863099_Screenshot%2B2021-11-19%2Bat%2B16.29.11.png" alt="Create user" width="880" height="501"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zNh0mXeV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637336863177_Screenshot%2B2021-11-19%2Bat%2B16.31.34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zNh0mXeV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637336863177_Screenshot%2B2021-11-19%2Bat%2B16.31.34.png" alt="Add IP" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On saving the changes, we should see a Database Deployments screen, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B6brk7G5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637366357918_Screenshot%2B2021-11-20%2Bat%2B00.59.05.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B6brk7G5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637366357918_Screenshot%2B2021-11-20%2Bat%2B00.59.05.png" alt="cluster" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#loading-sample-data"&gt;
  &lt;/a&gt;
  Loading Sample Data
&lt;/h2&gt;

&lt;p&gt;Next, we need to populate our database with users' sample data. To do this, click on the &lt;strong&gt;Browse Collections&lt;/strong&gt; button&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WSkvg8mp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637367731794_Screenshot%2B2021-11-20%2Bat%2B00.59.05.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WSkvg8mp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637367731794_Screenshot%2B2021-11-20%2Bat%2B00.59.05.png" alt="browse collection" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Add My Own Data&lt;/strong&gt;, input &lt;code&gt;reactRealmDB&lt;/code&gt; and &lt;code&gt;reactRealmCol&lt;/code&gt; as the database and collection name, and click on &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B1tVSxF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637368231456_Screenshot%2B2021-11-19%2Bat%2B17.07.15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B1tVSxF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637368231456_Screenshot%2B2021-11-19%2Bat%2B17.07.15.png" alt="add my own data" width="880" height="501"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9y910MdR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637368231395_Screenshot%2B2021-11-20%2Bat%2B01.27.04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9y910MdR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637368231395_Screenshot%2B2021-11-20%2Bat%2B01.27.04.png" alt="create" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to insert these sample data:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;To do this, click on the &lt;strong&gt;Insert Document&lt;/strong&gt; button, fill in the details above and click on &lt;strong&gt;Insert&lt;/strong&gt; to save.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gbAgRMFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637369198121_Screenshot%2B2021-11-20%2Bat%2B01.44.42.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gbAgRMFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637369198121_Screenshot%2B2021-11-20%2Bat%2B01.44.42.png" alt="insert document" width="880" height="284"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eyX8khjB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637369198088_Screenshot%2B2021-11-20%2Bat%2B01.43.44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eyX8khjB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637369198088_Screenshot%2B2021-11-20%2Bat%2B01.43.44.png" alt="fill and insert" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_hlhtqKx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637410162134_Screenshot%2B2021-11-20%2Bat%2B01.46.24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_hlhtqKx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637410162134_Screenshot%2B2021-11-20%2Bat%2B01.46.24.png" alt="Collection with documents" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-and-configuring-mongodb-realm-application"&gt;
  &lt;/a&gt;
  Creating and configuring MongoDB Realm application
&lt;/h2&gt;

&lt;p&gt;With our database populated, we need to create serverless functions to perform Create, Read, Update and Delete (CRUD) on our database. To do this, select the &lt;strong&gt;Realm&lt;/strong&gt; tab, click on &lt;strong&gt;Build your own App&lt;/strong&gt;. Then click on &lt;strong&gt;Create Realm Application&lt;/strong&gt; to setup our application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fKqAjsM1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637429955105_Screenshot%2B2021-11-20%2Bat%2B18.37.09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fKqAjsM1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637429955105_Screenshot%2B2021-11-20%2Bat%2B18.37.09.png" alt="select app" width="880" height="444"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2XH2GAG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637430101165_Screenshot%2B2021-11-20%2Bat%2B18.41.17.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2XH2GAG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637430101165_Screenshot%2B2021-11-20%2Bat%2B18.41.17.png" alt="create application" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MongoDB Realm also ships with templates that we can use to build our application quickly. For this tutorial, we will be building from scratch. &lt;/p&gt;

&lt;p&gt;Next, we need to setup permission and rules for our functions. To do this, close the popup guide click on &lt;strong&gt;Rules&lt;/strong&gt;, select the &lt;strong&gt;reactRealmCol&lt;/strong&gt; and click on &lt;strong&gt;Configure Collection&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qqju-qdz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637431150221_Screenshot%2B2021-11-20%2Bat%2B18.54.01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qqju-qdz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637431150221_Screenshot%2B2021-11-20%2Bat%2B18.54.01.png" alt="configure collection" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MongoDB Realm’s Save and Deploy&lt;/strong&gt;&lt;br&gt;
With that done, MongoDB Realm will show us a widget illustrating the concept of Save and Deploy. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hQiuBdK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637431628285_Screenshot%2B2021-11-20%2Bat%2B19.06.58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hQiuBdK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637431628285_Screenshot%2B2021-11-20%2Bat%2B19.06.58.png" alt="save and deploy" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When writing a serverless function, clicking on &lt;strong&gt;Save&lt;/strong&gt; creates a development draft that we can test and play around with. At the same time, &lt;strong&gt;Deploy&lt;/strong&gt; makes our changes public to be consumed by another application(React.js in our case).&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Next&lt;/strong&gt; and then &lt;strong&gt;Got it&lt;/strong&gt; to continue.&lt;/p&gt;

&lt;p&gt;Next, we need to allow &lt;strong&gt;Read&lt;/strong&gt; and &lt;strong&gt;Write&lt;/strong&gt; permissions for our function and then &lt;strong&gt;Save.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YYgkYxnP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637432271012_Screenshot%2B2021-11-20%2Bat%2B19.14.44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YYgkYxnP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637432271012_Screenshot%2B2021-11-20%2Bat%2B19.14.44.png" alt="read and write permissions" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, navigate to the &lt;strong&gt;Authentication&lt;/strong&gt; tab, click on  &lt;strong&gt;Allow users to log in anonymously&lt;/strong&gt;, toggle it on and &lt;strong&gt;Save Draft&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y3i3vS3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637432705669_Screenshot%2B2021-11-20%2Bat%2B19.20.40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y3i3vS3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637432705669_Screenshot%2B2021-11-20%2Bat%2B19.20.40.png" alt="allow anonymous" width="880" height="444"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X4JBmzCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637432705712_Screenshot%2B2021-11-20%2Bat%2B19.22.47.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X4JBmzCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637432705712_Screenshot%2B2021-11-20%2Bat%2B19.22.47.png" alt="save draft" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MongoDB Realm also ships with several authentication options that we can explore. For this tutorial, we will be using the anonymous option. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-serverless-functions-on-mongodb-realm"&gt;
  &lt;/a&gt;
  Creating serverless functions on MongoDB Realm
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Get All Users Serverless Function&lt;/strong&gt;&lt;br&gt;
With the configuration done, we can now create a serverless function that returns list of users. To do this, navigate to the &lt;strong&gt;Functions&lt;/strong&gt; tab, click on &lt;strong&gt;Create New Function&lt;/strong&gt;, and input &lt;code&gt;getAllUsers&lt;/code&gt; as the function name&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VFCuUoR3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637435627118_Screenshot%2B2021-11-20%2Bat%2B20.07.54.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VFCuUoR3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637435627118_Screenshot%2B2021-11-20%2Bat%2B20.07.54.png" alt="create new function" width="880" height="444"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HGU5X8d6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637435627136_Screenshot%2B2021-11-20%2Bat%2B20.10.20.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HGU5X8d6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637435627136_Screenshot%2B2021-11-20%2Bat%2B20.10.20.png" alt="input function name" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, select the &lt;strong&gt;Function Editor&lt;/strong&gt; tab and modify the function to the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a collection variable to access the &lt;code&gt;reactRealmDB&lt;/code&gt; database and &lt;code&gt;reactRealmCol&lt;/code&gt; collection&lt;/li&gt;
&lt;li&gt;Return the list of documents in the collection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we can test our function by clicking on &lt;strong&gt;Run&lt;/strong&gt; button to see list of users.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nRrgbgA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637437226082_Screenshot%2B2021-11-20%2Bat%2B20.32.34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nRrgbgA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637437226082_Screenshot%2B2021-11-20%2Bat%2B20.32.34.png" alt="running getAllUsers function" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we need to copy any returned user’s &lt;code&gt;_id&lt;/code&gt; and save it somewhere; we need it for the next function. Then click on &lt;strong&gt;Save Draft&lt;/strong&gt; to create a deployment draft for our function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T5iP3o3b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637437738284_Screenshot%2B2021-11-20%2Bat%2B20.32.34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T5iP3o3b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637437738284_Screenshot%2B2021-11-20%2Bat%2B20.32.34.png" alt="copy id and save draft" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get A User Serverless Function&lt;/strong&gt;&lt;br&gt;
To do this, click on the &lt;strong&gt;Functions&lt;/strong&gt; tab,  click on &lt;strong&gt;Create New Function&lt;/strong&gt;, and input &lt;code&gt;getSingleUser&lt;/code&gt; as the function name&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QREIyDXN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637438304276_Screenshot%2B2021-11-20%2Bat%2B20.54.12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QREIyDXN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637438304276_Screenshot%2B2021-11-20%2Bat%2B20.54.12.png" alt="create new function" width="880" height="444"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kmiEjQ3v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637438304310_Screenshot%2B2021-11-20%2Bat%2B20.56.21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kmiEjQ3v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637438304310_Screenshot%2B2021-11-20%2Bat%2B20.56.21.png" alt="name function" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, select the &lt;strong&gt;Function Editor&lt;/strong&gt; tab and modify the function to the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a collection variable to access the &lt;code&gt;reactRealmDB&lt;/code&gt; database and &lt;code&gt;reactRealmCol&lt;/code&gt; collection&lt;/li&gt;
&lt;li&gt;Return a single user by finding it by its &lt;code&gt;_id&lt;/code&gt;. Because MongoDB saves documents in BSON, we need to parse the &lt;code&gt;arg&lt;/code&gt;  as BSON using the &lt;code&gt;BSON.ObjectId&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To test our function, Navigate to the &lt;strong&gt;Console&lt;/strong&gt; tab, replace the &lt;code&gt;Hello world!&lt;/code&gt; in the &lt;strong&gt;exports&lt;/strong&gt; function with the user’s &lt;code&gt;_id&lt;/code&gt; we copied earlier and then click on &lt;strong&gt;Run.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vmlo7uzN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637439246631_Screenshot%2B2021-11-20%2Bat%2B21.11.55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vmlo7uzN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637439246631_Screenshot%2B2021-11-20%2Bat%2B21.11.55.png" alt="testing getSingleUser" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we need to save our function by clicking on the &lt;strong&gt;Save Draft&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit A User Serverless Function&lt;/strong&gt;&lt;br&gt;
To do this, we need to follow the same steps as above.&lt;/p&gt;

&lt;p&gt;First, click on the &lt;strong&gt;Functions&lt;/strong&gt; tab,  click on &lt;strong&gt;Create New Function&lt;/strong&gt;, and input &lt;code&gt;editUser&lt;/code&gt; as the function name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GaZkxikL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637440543105_Screenshot%2B2021-11-20%2Bat%2B21.34.43.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GaZkxikL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637440543105_Screenshot%2B2021-11-20%2Bat%2B21.34.43.png" alt="editUser" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, select the &lt;strong&gt;Function Editor&lt;/strong&gt; tab and modify the function to the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modify the function to accept &lt;code&gt;id&lt;/code&gt;,  &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;location&lt;/code&gt;, and &lt;code&gt;title&lt;/code&gt; arguments&lt;/li&gt;
&lt;li&gt;Create a collection variable to access the &lt;code&gt;reactRealmDB&lt;/code&gt; database and &lt;code&gt;reactRealmCol&lt;/code&gt; collection&lt;/li&gt;
&lt;li&gt;Create an &lt;code&gt;updated&lt;/code&gt; variable that finds the document by &lt;code&gt;_id&lt;/code&gt;, update the collection fields, and set a &lt;code&gt;returnNewDocument&lt;/code&gt; flag to return the updated document.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we can test our function by navigating to the Console tab, replace the &lt;code&gt;Hello world!&lt;/code&gt; in the &lt;strong&gt;exports&lt;/strong&gt; function with required arguments(&lt;strong&gt;_id, name, location, and title&lt;/strong&gt;), click on &lt;strong&gt;Run&lt;/strong&gt;, and then &lt;strong&gt;Save Draft&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hKyXFFE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637454690535_Screenshot%2B2021-11-21%2Bat%2B01.17.58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hKyXFFE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637454690535_Screenshot%2B2021-11-21%2Bat%2B01.17.58.png" alt="editUser" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create A User Serverless Function&lt;/strong&gt;&lt;br&gt;
To do this, we need to follow the same steps as before.&lt;/p&gt;

&lt;p&gt;First, click on the &lt;strong&gt;Functions&lt;/strong&gt; tab,  click on &lt;strong&gt;Create New Function&lt;/strong&gt;, and input &lt;code&gt;createUser&lt;/code&gt; as the function name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OT1HzIFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637455228815_Screenshot%2B2021-11-21%2Bat%2B01.40.17.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OT1HzIFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637455228815_Screenshot%2B2021-11-21%2Bat%2B01.40.17.png" alt="createUser" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, select the &lt;strong&gt;Function Editor&lt;/strong&gt; tab and modify the function to the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modify the function to accept &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;location&lt;/code&gt;, and &lt;code&gt;title&lt;/code&gt; arguments.&lt;/li&gt;
&lt;li&gt;Create a collection variable to access the &lt;code&gt;reactRealmDB&lt;/code&gt; database and &lt;code&gt;reactRealmCol&lt;/code&gt; collection.&lt;/li&gt;
&lt;li&gt;Create a new user by inserting the arguments and returning the user.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we can test our function by navigating to the Console tab, replace the &lt;code&gt;Hello world!&lt;/code&gt; in the &lt;strong&gt;exports&lt;/strong&gt; function with required arguments(&lt;strong&gt;name, location, and title&lt;/strong&gt;), click on &lt;strong&gt;Run&lt;/strong&gt;, and then &lt;strong&gt;Save Draft&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hQ8l1DID--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637456186551_Screenshot%2B2021-11-21%2Bat%2B01.48.28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hQ8l1DID--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637456186551_Screenshot%2B2021-11-21%2Bat%2B01.48.28.png" alt="createUser" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Delete A User Serverless Function&lt;/strong&gt;&lt;br&gt;
To do this, we need to follow the same steps as before.&lt;/p&gt;

&lt;p&gt;First, click on the &lt;strong&gt;Functions&lt;/strong&gt; tab,  click on &lt;strong&gt;Create New Function&lt;/strong&gt;, and input &lt;code&gt;deleteUser&lt;/code&gt; as the function name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HEb-eIpB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637456726117_Screenshot%2B2021-11-21%2Bat%2B02.05.10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HEb-eIpB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637456726117_Screenshot%2B2021-11-21%2Bat%2B02.05.10.png" alt="deleteUser" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, select the &lt;strong&gt;Function Editor&lt;/strong&gt; tab and modify the function to the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modify the function to accept arguments.&lt;/li&gt;
&lt;li&gt;Create a collection variable to access the &lt;code&gt;reactRealmDB&lt;/code&gt; database and &lt;code&gt;reactRealmCol&lt;/code&gt; collection.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;deleteUser&lt;/code&gt; variable for deleting by &lt;code&gt;_id&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we can test our function by navigating to the Console tab, replace the &lt;code&gt;Hello world!&lt;/code&gt; in the &lt;strong&gt;exports&lt;/strong&gt; function with the required argument, click on &lt;strong&gt;Run&lt;/strong&gt;, and then &lt;strong&gt;Save Draft&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uxAzNsbw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637592681689_Screenshot%2B2021-11-22%2Bat%2B15.47.17.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxAzNsbw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637592681689_Screenshot%2B2021-11-22%2Bat%2B15.47.17.png" alt="deleteUser" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-serverless-functions"&gt;
  &lt;/a&gt;
  Deploying serverless functions
&lt;/h2&gt;

&lt;p&gt;To start using the serverless functions in our application, we need to deploy them. To do this, click on the &lt;strong&gt;Review Draft &amp;amp; Deploy&lt;/strong&gt; button, scroll down and then click on &lt;strong&gt;Deploy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6nxRZEhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637592054362_Screenshot%2B2021-11-21%2Bat%2B02.16.39.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6nxRZEhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637592054362_Screenshot%2B2021-11-21%2Bat%2B02.16.39.png" alt="review draft &amp;amp; deploy" width="880" height="444"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8DWhwX_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637457560813_Screenshot%2B2021-11-21%2Bat%2B02.17.08.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8DWhwX_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637457560813_Screenshot%2B2021-11-21%2Bat%2B02.17.08.png" alt="click on deploy" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We should get a prompt showing the status of our deployment.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#finally-integration-with-reactjs"&gt;
  &lt;/a&gt;
  Finally! Integration with React.js
&lt;/h2&gt;

&lt;p&gt;To integrate MongoDB Realm in our application,  we need to install the dependencies with:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i realm-web
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;code&gt;realm-web&lt;/code&gt; is a &lt;a href="https://github.com/realm/realm-js/tree/master/packages/realm-web#readme"&gt;library&lt;/a&gt; for accessing MongoDB Realm from a web-browser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup an Environment Variable&lt;/strong&gt;&lt;br&gt;
First, we need to create a &lt;code&gt;.env&lt;/code&gt; file in the project root directory, and in this file, add the snippet below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REACT_APP_REALM_APP_ID=&amp;lt;your-realm-app-id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;To get our &lt;strong&gt;Realm App ID&lt;/strong&gt;, we need to click on the copy icon as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W-GGwIdS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637483339552_Screenshot%2B2021-11-21%2Bat%2B09.27.34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W-GGwIdS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637483339552_Screenshot%2B2021-11-21%2Bat%2B09.27.34.png" alt="copy realm app id by clicking on the highlighted copy icon" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup MongoDB Realm&lt;/strong&gt;&lt;br&gt;
Next, we need to create a &lt;code&gt;utils&lt;/code&gt; folder in the &lt;code&gt;src&lt;/code&gt; folder, and in this folder, create a &lt;code&gt;mongo.client.ts&lt;/code&gt; file and add the code snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a variable to store the &lt;strong&gt;Realm App ID&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Create and export an instance of MongoDB Realm and pass the App ID. The bang&lt;code&gt;!&lt;/code&gt; in front of &lt;code&gt;REALM_APP_ID&lt;/code&gt; tells the compiler to relax the non-null constraint error(Meaning the parameter cannot be null or undefined)&lt;/li&gt;
&lt;li&gt;Create and export the credential type we will be using for this app. We configure this authentication option earlier.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Get All Users&lt;/strong&gt;&lt;br&gt;
To get all users, we need to create an interface to describe the response properties. To do this, we need to create a &lt;code&gt;models&lt;/code&gt; folder in the &lt;code&gt;src&lt;/code&gt; folder, and in this folder, create a &lt;code&gt;user.interface.ts&lt;/code&gt; file and add the code snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: &lt;em&gt;The question mark in front of&lt;/em&gt; &lt;strong&gt;&lt;em&gt;_id&lt;/em&gt;&lt;/strong&gt;  &lt;em&gt;tells TypeScript that this property is optional since MongoDB automatically generates it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to modify &lt;code&gt;App.tsx&lt;/code&gt; by updating it with the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the &lt;code&gt;IUser&lt;/code&gt; interface, &lt;code&gt;app&lt;/code&gt;, and &lt;code&gt;credentials&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create state variables to manage the list of users.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;getUsers&lt;/code&gt; function inside the &lt;code&gt;useEffect&lt;/code&gt; hook to authenticate our application using the &lt;code&gt;credentials&lt;/code&gt; imported, get the list of users by accessing the &lt;code&gt;getAllUsers&lt;/code&gt; serverless function we created earlier, and then update the &lt;code&gt;users&lt;/code&gt; state.
&lt;strong&gt;PS&lt;/strong&gt;: &lt;em&gt;The serverless function (&lt;/em&gt;&lt;strong&gt;&lt;em&gt;getAllUsers&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;in our case) called must be the same as the one defined on MongoDB Realm.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Update the mark-up to display the list of users.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Complete App.tsx&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Create A User&lt;/strong&gt;&lt;br&gt;
To create a user, we must first modify &lt;code&gt;App.tsx&lt;/code&gt; by creating a state variable to manage returned value when a user is created. We also need to add the state as dependency on the &lt;code&gt;useEffect&lt;/code&gt; hook; so that when changes are made, it refreshes the page and load the latest list of users. Finally, we need to update the &lt;code&gt;Modal&lt;/code&gt; component with the state function to update the value.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; &lt;em&gt;TypeScript will complain about the&lt;/em&gt; &lt;code&gt;*Modal.tsx*&lt;/code&gt; &lt;em&gt;component not having the&lt;/em&gt; &lt;strong&gt;&lt;em&gt;setUserValue&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;property. We will fix this.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Next, navigate to the &lt;code&gt;Modal.tsx&lt;/code&gt; file inside the &lt;code&gt;components&lt;/code&gt; folder, update the interface, and create a user.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Modify the &lt;code&gt;handleSubmit&lt;/code&gt; function to authenticate our application using the &lt;code&gt;credentials&lt;/code&gt; imported. Create a user by accessing the &lt;code&gt;createUser&lt;/code&gt; serverless function we created earlier, passing the required arguments (&lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;location&lt;/strong&gt;, and &lt;strong&gt;title&lt;/strong&gt;)and then updating the &lt;code&gt;userValue&lt;/code&gt; and form state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Edit A User&lt;/strong&gt;&lt;br&gt;
To edit a user, we must first modify &lt;code&gt;App.tsx&lt;/code&gt; by creating a state variable to manage the &lt;code&gt;_id&lt;/code&gt; of the user we want to edit. We also updated the &lt;code&gt;onClick&lt;/code&gt; event to update the state variable and pass it as props to the &lt;code&gt;Modal&lt;/code&gt; component.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Next, we need to populate our form when the &lt;strong&gt;Edit&lt;/strong&gt; button is clicked. To do this, open &lt;code&gt;Modal.tsx&lt;/code&gt; and update as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Modify the interface and props to include &lt;code&gt;editingId&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;useEffect&lt;/code&gt; to conditionally check if it’s editing or creating,  get the selected user details using the &lt;code&gt;getSingleUser&lt;/code&gt;  serverless function and then update the form values. The &lt;code&gt;getSingleUser&lt;/code&gt; function also required us to convert &lt;code&gt;editingId&lt;/code&gt; to string using &lt;code&gt;BSON.ObjectID&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;Clean up the effect by updating the form state to an empty string.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to update the &lt;code&gt;handleSubmit&lt;/code&gt; function to include updating the user’s details by conditionally checking if it is an update action or not. Next, we need to call the &lt;code&gt;editUser&lt;/code&gt; serverless function and pass in the required parameters. Finally, update the &lt;code&gt;userValue&lt;/code&gt;, restore the form back to default and close the &lt;code&gt;Modal&lt;/code&gt; component.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Complete Modal.tsx&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Delete A User&lt;/strong&gt;&lt;br&gt;
To delete a user, we need to modify &lt;code&gt;App.tsx&lt;/code&gt; by creating a &lt;code&gt;handleDelete&lt;/code&gt; function as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Creates a &lt;code&gt;handleDelete&lt;/code&gt; function that takes an &lt;code&gt;id&lt;/code&gt; as an argument, authenticate our application using the &lt;code&gt;credentials&lt;/code&gt;. Delete selected user using the &lt;code&gt;deleteUser&lt;/code&gt; serverless function and update the &lt;code&gt;userValue&lt;/code&gt; state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Complete App.tsx&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Finally, we can test our application by starting the development server and performing CRUD operations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NpyWs1Es--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637515600361_Screenshot%2B2021-11-21%2Bat%2B18.26.26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NpyWs1Es--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637515600361_Screenshot%2B2021-11-21%2Bat%2B18.26.26.png" alt="working application" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This post discussed how to create a database on MongoDB, create and deploy serverless functions using MongoDB Realm and consume the endpoints in a React.js application.&lt;/p&gt;

&lt;p&gt;You may find these resources helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.mongodb.com/realm/"&gt;MongoDB Realm&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://tailwindcss.com/"&gt;TailwindCSS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/realm/realm-js"&gt;Realm-Web SDK&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://en.wikipedia.org/wiki/Serverless_computing"&gt;Serverless computing&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mongodb.com/json-and-bson"&gt;BSON&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>serverless</category>
      <category>mongodb</category>
      <category>react</category>
      <category>typescript</category>
    </item>
    <item>
      <title>ASMR Coding a JavaScript App - rainy night</title>
      <author>Bek Brace</author>
      <pubDate>Tue, 23 Nov 2021 06:54:21 +0000</pubDate>
      <link>https://dev.to/bekbrace/asmr-coding-a-javascript-app-rainy-night-6ma</link>
      <guid>https://dev.to/bekbrace/asmr-coding-a-javascript-app-rainy-night-6ma</guid>
      <description>&lt;p&gt;I did not realize how coding tutorials on YouTube are sometimes annoying - including my own (no exclusion 😄), don't get me wrong, I mean it's great to be taught and all but often it's just annoying, you want to watch someone coding in silence and code with them, especially if you're familiar with the language/framework/tech they're using in the video.&lt;/p&gt;

&lt;p&gt;This is an HTML/CSS/JavaScript application, coded from scratch in silence in a rainy night here in Poland, and I did not want to talk  just code in silence and if you're a beginner - intermediate, you can code along with me or you can leave it turned on while doing your own stuff.&lt;/p&gt;

&lt;p&gt;The idea was inspired from one famous YouTuber called Takuya and his channel is called "devaslife", he's a Japanese from Osaka who speaks perfect English. The man types in a very smooth way on the terminal - he uses Fish terminal - and never touches the mouse in all of his videos; productive and efficient. I was only inspired by him, and started creating my own videos with my own style, just occasionally not being the main style on the channel.&lt;/p&gt;

&lt;p&gt;The Application itself is a Steps converter .. say you walked today 31450 steps (info from your iphone or android app) but you don't know what does that mean in Km ? or how much calories have you burned ? so you enter the number of steps in the application and it  outputs the result after a nice loading animation is being displayed (just for UX, nothing more - a simple setTimeOut method).&lt;/p&gt;

&lt;p&gt;Here's the video&lt;br&gt;
Hope you enjoy it - if you like that type of videos&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9jUp7zt6g1s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;YouTube : &lt;a href="https://www.youtube.com/channel/UC7EVSn5inapL20oPSwAwEUg"&gt;https://www.youtube.com/channel/UC7EVSn5inapL20oPSwAwEUg&lt;/a&gt;&lt;br&gt;
Facebook : &lt;a href="https://www.facebook.com/bekbrace%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B"&gt;https://www.facebook.com/bekbrace​​​​&lt;/a&gt;&lt;br&gt;
Twitter : &lt;a href="https://twitter.com/BekBrace"&gt;https://twitter.com/BekBrace&lt;/a&gt;&lt;br&gt;
Instagram : &lt;a href="https://www.instagram.com/bek_brace/"&gt;https://www.instagram.com/bek_brace/&lt;/a&gt;&lt;br&gt;
GitHub profile : &lt;a href="https://github.com/BekBrace"&gt;https://github.com/BekBrace&lt;/a&gt;&lt;br&gt;
Website : &lt;a href="https://bekbrace.com"&gt;https://bekbrace.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The Comprehensive Guide to Angular Performance Tuning</title>
      <author>Tarun Gurang</author>
      <pubDate>Tue, 23 Nov 2021 06:07:33 +0000</pubDate>
      <link>https://dev.to/tarungurang/the-comprehensive-guide-to-angular-performance-tuning-1l5n</link>
      <guid>https://dev.to/tarungurang/the-comprehensive-guide-to-angular-performance-tuning-1l5n</guid>
      <description>&lt;p&gt;It's not uncommon to see Angular apps slow down over time. Angular is a performant platform, but if we don't know how to create performant Angular apps, our apps will become slower as they evolve. As a result, any serious Angular developer must be aware of what makes an Angular app slow in order to prevent it from being slow in the first place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improving-change-detection"&gt;
  &lt;/a&gt;
  Improving change detection
&lt;/h2&gt;

&lt;p&gt;Change detection can be the most performance-intensive part of Angular apps, so it's important to understand how to render the templates efficiently so that we would just re-rendering a component if it has new changes to display.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onpush-change-detection"&gt;
  &lt;/a&gt;
  OnPush change detection
&lt;/h2&gt;

&lt;p&gt;When an asynchronous event occurs in the app, such as click, XMLHttpRequest, or setTimeout, the default change detection behavior for components is to re-render. This can be a matter of concern because it will result in a lot of needless renderings of models that haven't been updated.&lt;/p&gt;

&lt;p&gt;When an asynchronous event occurs in the app, such as click, XMLHttpRequest, or setTimeout, the default change detection behavior for components is to re-render. This can be a matter of concern because it will result in a lot of needless renderings of models that haven't been updated.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A new reference has been added to one of its input properties&lt;/li&gt;
&lt;li&gt;An event originating from the component or one of its children, such as a click on a component button.&lt;/li&gt;
&lt;li&gt;Explicit shift detection run&lt;/li&gt;
&lt;li&gt;To use this technique, simply set the change-detection strategy in the component's decorator as follows:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Component({
    selector: 'app-todo-list',
    templateUrl: './todo-list.component.html',
    styleUrls: ['./todo-list.component.scss'],
    changeDetection: ChangeDetectionStrategy.OnPush
  })
  export class TodoListComponent implements OnInit {}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#design-for-immutability"&gt;
  &lt;/a&gt;
  Design for immutability
&lt;/h3&gt;

&lt;p&gt;Since we need a new reference given to a component's input to activate change detection with onPush, we must ensure that all state changes are immutable to use this process. If we're using Redux for state management, we'll notice that each time the state changes, we'll get a new instance, which will cause change detection for onPush components when given to a component's inputs. With this method, we'll need container components to get data from the store, as well as presentation components that can only communicate with other components via input and output.&lt;/p&gt;

&lt;p&gt;The async pipe is the simplest way to provide store data to the template. This will appear to have the data outside of an observable and will ensure that the stream is cleaned up when the object is automatically destroyed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;xml&amp;gt;&amp;lt;div class="mx-auto col-10"&amp;gt;&amp;lt;h5&amp;gt;{{'todo-list' | translate}}&amp;lt;/h5&amp;gt;
&amp;lt;hr&amp;gt;&amp;lt;app-cards-list&amp;gt;&amp;lt;/app-cards-list&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;hr&amp;gt;&amp;lt;app-add-todo&amp;gt;&amp;lt;/app-add-todo&amp;gt;
&amp;lt;/xml&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#make-onpush-the-default-change-detection-strategy"&gt;
  &lt;/a&gt;
  Make onPush the default change detection strategy
&lt;/h3&gt;

&lt;p&gt;While creating new components with Angular CLI, we can use schematics to render onPush the default changeDetection strategy. In Angular, simply add this to the schematic’s property. json is a type of data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"schematics": {
    "@schematics/angular:component": {
      "styleext": "scss",
      "changeDetection": "OnPush"
    }
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-pipes-instead-of-methods-in-templates"&gt;
  &lt;/a&gt;
  Using pipes instead of methods in templates
&lt;/h3&gt;

&lt;p&gt;When a component is re-rendered, methods in a prototype will be named. Even with onPush change detection, this means it will be activated any time the component or any of its children is interacted with (click, type). If the methods perform intensive computations, the app will become sluggish as it scales because it must recompute every time the part is accessed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read More: &lt;a href="https://www.ifourtechnolab.com/blog/accessibility-with-angular"&gt;Accessibility With Angular&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instead, we might use a pure pipe to ensure that we're just recalculating when the pipe's input shifts. As we previously discussed, async pipe is an example of a pure pipe. When the observable emits a value, it will recompute. If we're dealing with pure functions, we want to make sure we're just recomputing when the input changes. A pure function is one that, given the same input, always returns the same result. As a result, if the input hasn't changed, it's pointless to recompute the output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public getDuedateTodayCount(todoItems: TODOItem[]) {
  console.log('Called getDuedateTodayCount');
  return todoItems.filter((todo) =&amp;gt; this.isToday(new Date(todo.dueDate))).length;
}
private isToday(someDate) {
  const today = new Date();
  return (
    someDate.getDate() == today.getDate() &amp;amp;&amp;amp;
    someDate.getMonth() == today.getMonth() &amp;amp;&amp;amp;
    someDate.getFullYear() == today.getFullYear()
  );
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#with-method"&gt;
  &lt;/a&gt;
  With method
&lt;/h4&gt;

&lt;p&gt;Let's look at what's happening when a template system is used instead of a pipe.&lt;/p&gt;

&lt;p&gt;Consider the following procedure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public getDuedateTodayCount(todoItems: TODOItem[]) {
  console.log('Called getDuedateTodayCount');
  return todoItems.filter((todo) =&amp;gt; this.isToday(new Date(todo.dueDate))).length;
}
private isToday(someDate) {
  const today = new Date();
  return (
    someDate.getDate() == today.getDate() &amp;amp;&amp;amp;
    someDate.getMonth() == today.getMonth() &amp;amp;&amp;amp;
    someDate.getFullYear() == today.getFullYear()
  );
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#with-pipe"&gt;
  &lt;/a&gt;
  With pipe
&lt;/h4&gt;

&lt;p&gt;This can be solved by changing the method to a pipe, which is pure by default and will rerun the logic if the input changes.&lt;/p&gt;

&lt;p&gt;We get the following results by building a new pipe and transferring the logic we used previously inside of it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Pipe, PipeTransform } from '@angular/core';
import { TODOItem } from '@app/shared/models/todo-item';
@Pipe({
  name: 'duedateTodayCount'
})
export class DuedateTodayCountPipe implements PipeTransform {
  transform(todoItems: TODOItem[], args?: any): any {
    console.log('Called getDuedateTodayCount');
    return todoItems.filter((todo) =&amp;gt; this.isToday(new Date(todo.dueDate))).length;
  }
  private isToday(someDate) {
    const today = new Date();
    return (
      someDate.getDate() == today.getDate() &amp;amp;&amp;amp;
      someDate.getMonth() == today.getMonth() &amp;amp;&amp;amp;
      someDate.getFullYear() == today.getFullYear()
    );
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#cache-values-from-pure-pipes-and-functions"&gt;
  &lt;/a&gt;
  Cache values from pure pipes and functions
&lt;/h5&gt;

&lt;p&gt;We can also boost this by using pure pipes by remembering/caching previous values so that we don't have to recompute if the pipe has already been run with the same input. Pure pipes don't keep track of previous values; instead, they check to see if the input hasn't changed the relationship so they don't have to recalculate. To do the previous value caching, we'll need to combine it with something else.&lt;/p&gt;

&lt;p&gt;The Lodash memorize method is a simple way to accomplish this. Since the input is an array of objects, this isn't very realistic in this situation. If the pipe accepts a simple data type as input, such as a number, it may be advantageous to use this as a key to cache results and prevent re-computation.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#using-trackby-in-ngfor"&gt;
  &lt;/a&gt;
  Using trackBy in ngFor
&lt;/h5&gt;

&lt;p&gt;While using ngFor to update a list, Angular can delete the entire list from the DOM and rebuild it because it has no way of verifying which object has been added or removed. The trackBy function solves this by allowing us to give Angular a function to evaluate which item in the ngFor list has been modified or removed, and then then re-render it.&lt;/p&gt;

&lt;p&gt;This is how the track by feature looks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public trackByFn(index, item) {
  return item.id;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#for-heavy-computations-detach-change-detection"&gt;
  &lt;/a&gt;
  For heavy computations: Detach change detection
&lt;/h5&gt;

&lt;p&gt;In extreme cases, we can only need to manually enable change detection for a few components. That is, if a component is instantiated 100s of times on the same page and re-rendering each one is costly, we can disable automatic change detection for the component entirely and only cause changes manually where they are needed.&lt;/p&gt;

&lt;p&gt;We could detach change detection and only run this when the to do Item is set in the todoItem set property if we choose to do this for the todo items:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Component({
    selector: 'app-todo-item-list-row',
    templateUrl: './todo-item-list-row.component.html',
    styleUrls: ['./todo-item-list-row.component.scss'],
    changeDetection: ChangeDetectionStrategy.OnPush
  })
  export class TodoItemListRowComponent implements OnInit {
    private _todoItem : TODOItem;
    public get todoItem() : TODOItem {
      return this._todoItem;
    }
    @Input()
    public set todoItem(v : TODOItem) {
      this._todoItem = v;
      this.cdr.detectChanges();
    }  
    @Input() public readOnlyTODO: boolean;
    @Output() public todoDelete = new EventEmitter();
    @Output() public todoEdit = new EventEmitter();
    @Output() public todoComplete = new EventEmitter&amp;lt;todoitem&amp;gt;();

    constructor(private cdr: ChangeDetectorRef) {}
    public ngOnInit() {
      this.cdr.detach();
    }
    public completeClick() {
      const newTodo = {
        ...this.todoItem,
        completed: !this.todoItem.completed
      };
      this.todoComplete.emit(newTodo);
    }
    public deleteClick() {
      this.todoDelete.emit(this.todoItem.id);
    }
    public editClick() {
      this.todoEdit.emit(this.todoItem);
    }
  }
&amp;lt;/todoitem&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#improving-page-load"&gt;
  &lt;/a&gt;
  Improving page load
&lt;/h5&gt;

&lt;p&gt;The time it takes for a website to load is an important factor in today's user experience. Every millisecond a user waits will result in a sales loss due to a higher bounce rate and a poor user experience, so this is an area where we should focus our efforts. Faster websites are rewarded by search engines, so page load time has an effect on SEO.&lt;/p&gt;

&lt;p&gt;We want to use Angular PWA caching, lazy loading, and bundling to improve page load time.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#cache-static-content-using-angular-pwa"&gt;
  &lt;/a&gt;
  Cache static content using Angular PWA
&lt;/h5&gt;

&lt;p&gt;Since the static content is already in the browser, caching it will make our Angular app load faster. This is easily accomplished with Angular PWA, which uses service workers to store and present static content, such as JavaScript, CSS bundles, images, and static served files, without requiring a server request.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking for Genuine &lt;a href="https://www.ifourtechnolab.com/angular-js-development-company"&gt;Angular Development Company&lt;/a&gt;? Enquire Today.&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#cache-http-calls-using-angular-pwa"&gt;
  &lt;/a&gt;
  Cache HTTP calls using Angular PWA
&lt;/h5&gt;

&lt;p&gt;We can easily set up caching rules for HTTP calls with Angular PWA to give our app a faster user experience without cluttering it with a lot of caching code. we can either optimize for freshness or efficiency, that is, read the cache only if the HTTP call times out, or check the cache first and then call the API only when the cache expires.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#lazy-load-routes"&gt;
  &lt;/a&gt;
  Lazy load routes
&lt;/h5&gt;

&lt;p&gt;Lazy loading routes ensure that each function is packaged in its own bundle and that this bundle can be loaded only when it is needed.&lt;/p&gt;

&lt;p&gt;To allow lazy loading, simply build a child route file in a function like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const routes: Routes = [
  {
    path: '',
    component: TodoListCompletedComponent
  }
];
export const TodoListCompletedRoutes = RouterModule.forChild(routes);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Import routes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@NgModule({
  imports: [FormsModule, CommonModule, SharedModule, TodoListCompletedRoutes],
  declarations: [TodoListCompletedComponent]
})
export class TodoListCompletedModule {}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;using loadChildren in the root route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const appRoutes: Routes = [
  {
    path: rootPath,
    component: TodoListComponent,
    pathMatch: 'full'
  },
  {
    path: completedTodoPath,
    loadChildren: './todo-list-completed/todo-list-completed.module#TodoListCompletedModule'
  }
];
export const appRouterModule = RouterModule.forRoot(appRoutes);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#optimizing-bundling-and-preloading"&gt;
  &lt;/a&gt;
  Optimizing bundling and preloading
&lt;/h5&gt;

&lt;p&gt;We may choose to preload feature modules to speed up page load even further. This way, when we choose to make a lazily loaded feature module, navigation is instant.&lt;/p&gt;

&lt;p&gt;This can be accomplished by setting PreloadModules as the preloadingStrategy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;RouterModule.forRoot(routes, {
  preloadingStrategy: PreloadAllModules
})

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All feature modules will be loaded when the page loads, allowing us quicker page loading and instant navigation when we choose to load other feature modules. This can be further optimized by using a custom preloading Strategy like the one shown here to load only a subset of the routes on app startup&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#serverside-rendering-with-angular-universal"&gt;
  &lt;/a&gt;
  Server-side rendering with Angular Universal
&lt;/h5&gt;

&lt;p&gt;It is recommended that server-side rendering be used for Angular apps that contain indexed pages. This ensures that the pages are entirely made by the server before being shown to the browser, resulting in a faster page load. This would necessitate the app not relying on any native DOM components, and instead injecting document from the Angular providers, for example.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#improving-ux"&gt;
  &lt;/a&gt;
  Improving UX
&lt;/h5&gt;

&lt;p&gt;Performance tuning is all about improving the bottleneck, which is the part of the system that has the most impact on the user experience. Often the alternative is simply to approach behavior with more optimism, resulting in less waiting for the customer.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#optimistic-updates"&gt;
  &lt;/a&gt;
  Optimistic updates
&lt;/h5&gt;

&lt;p&gt;Optimistic changes occur when a change is expressed in the user interface before being saved on the server. The user would have a snappier native-like experience as a result of this. As a result, in the event that the server fails to save the changes, we must roll back the state. Strongbrew has written a post on how to do this in a generic way, making positive changes simple to implement in our code.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#how-should-we-prioritize-performance-tuning"&gt;
  &lt;/a&gt;
  How should we prioritize performance tuning?
&lt;/h5&gt;

&lt;p&gt;Start with the low-hanging fruit: onPush, lazy loading, and PWA, and then figure out where our system's output bottlenecks are. Any enhancement that does not address the bottleneck is a mirage, as it will not enhance the app's user experience. Detaching the change detection is a tuning technique that can be used only if we have a particular issue with a component's change detection affecting output.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h5&gt;

&lt;p&gt;In this blog we have learned how to tune the output of our Angular app in this article. Change detection, page load, and UX enhancements were some of the performance tuning categories we looked at. Any change in a system should start with identifying bottlenecks and attempting to solve them using one of the methods described in this article.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>With No Code Builders, Why Should Clients Hire a Developer?</title>
      <author>Kyle Prinsloo</author>
      <pubDate>Tue, 23 Nov 2021 06:07:17 +0000</pubDate>
      <link>https://dev.to/study_web_dev/with-no-code-builders-why-should-clients-hire-a-developer-53ip</link>
      <guid>https://dev.to/study_web_dev/with-no-code-builders-why-should-clients-hire-a-developer-53ip</guid>
      <description>&lt;p&gt;With the advent of tools that make building an e-commerce site or basic portfolio website simpler than ever, many developers are starting to wonder if this serves as a bad omen for things to come…&lt;/p&gt;

&lt;p&gt;If any client can simply open up an account on a no-code builder, drag and drop a few components until they're happy with the design, click 'Publish' and call it a day, how is there possibly any hope for developers and web designers?&lt;/p&gt;

&lt;p&gt;Unless you're just getting started as a developer, you've probably heard a similar version of this doom and gloom argument before, but worry not my friend, there's more than a glimmer of hope.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLDR: No-code builders should be seen as an opportunity - not a threat.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this article, I'm going to explore exactly what sort of no-code builders are out there, the mistaken threat they pose to developers, and the actual benefit of hiring a developer which you can use to build up your confidence to bolster your proposal proposition success.&lt;/p&gt;

&lt;p&gt;I tweeted this last year, give it a read to get an overview.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--RHr1l2Tu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1387758016716578821/Srn36e3M_normal.png" alt="Kyle Prinsloo profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Kyle Prinsloo
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/study_web_dev"&gt;@study_web_dev&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🔥 My two-cents on:&lt;br&gt;&lt;br&gt;“Why would a client want to pay for a website, when they can just do it themselves for free with platforms like:&lt;br&gt;&lt;br&gt;- Wix&lt;br&gt;- Shopify&lt;br&gt;- WebFlow&lt;br&gt;- WordPress&lt;br&gt;- Squarespace&lt;br&gt;- etc.&lt;br&gt;&lt;br&gt;Here's my answer in a thread 🧵⬇️
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      08:15 AM - 23 Sep 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1308681311608025088" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1308681311608025088" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1308681311608025088" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#what-are-nocode-builders"&gt;
  &lt;/a&gt;
  What are No-Code Builders?
&lt;/h2&gt;

&lt;p&gt;No-code builders are tools on the web that make building websites, e-commerce stores, and even full-blown applications possible without writing any code. Low-code builders are similar but can be ever so slightly more technical.&lt;/p&gt;

&lt;p&gt;In reality, no-code builders are sometimes confused with low-code builders where only a very little amount of code is needed when building out the site or app.&lt;/p&gt;

&lt;p&gt;There is a huge variety of no-code and low-code builders out there today which could give you, a new or even more experienced developer, the impression that your job is being acutely challenged by smart software.&lt;/p&gt;

&lt;p&gt;Webflow, for example, claims to be "the modern way to build for the web" where users of the tool can "build production-ready experiences without coding". On Webflow, you're able to design in the browser, build a site, connect it to a CMS, and host it all without writing a single line of code. Even the Webflow site itself is built using Webflow, which brings a tear to my eye, but in a good way.&lt;/p&gt;

&lt;p&gt;Webflow is just one of these site-building tools.&lt;/p&gt;

&lt;p&gt;You may have heard of others like Wix, Squarespace, or Weebly. They're all very similar tools, but essentially they do what Webflow allows you to do, although all of them offer a slightly worse experience in comparison with Webflow. &lt;/p&gt;

&lt;p&gt;All of these mentioned builders normally come with pre-packaged designs that allow you to simply select a design, replace the placeholder text with yours, and click 'Publish'.&lt;/p&gt;

&lt;p&gt;There are some caveats to this and they're bigger than you may expect…&lt;/p&gt;

&lt;p&gt;But more on that later.&lt;/p&gt;

&lt;p&gt;Moving on from site-builders, there are plenty of other no-code builders out there.&lt;/p&gt;

&lt;p&gt;Shopify is another tool you may be familiar with especially if you've worked with clients that require e-commerce solutions. Shopify offers businesses the means to construct a fully working online store without the need for a custom-coded solution.&lt;/p&gt;

&lt;p&gt;And then there is WordPress.&lt;/p&gt;

&lt;p&gt;No talk of no-code builders would be complete without mentioning probably the world's most famous content management system. It's estimated that over 75 million sites will use it today; WordPress.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-no-code-builders-wont-replace-developers"&gt;
  &lt;/a&gt;
  Why No Code Builders Won't Replace Developers
&lt;/h2&gt;

&lt;p&gt;No-code builders are all over the Internet these days and are being used by millions of people but does this mean that they are replacing developers?&lt;/p&gt;

&lt;p&gt;Not for now, no.&lt;/p&gt;

&lt;p&gt;While these tools allow for sites and apps to be built much faster than what it would take a developer to hand-code them, these tools are still quite useless in the hands of someone who doesn't know what they are doing.&lt;/p&gt;

&lt;p&gt;What often happens is that someone with a business idea, let's call that someone "Jim", will see the multitude of ads for no-code tools (they have really high marketing budgets), notice how simple it appears to design, build, and host a website, and is then fooled into thinking that he can do something just as good.&lt;/p&gt;

&lt;p&gt;Jim will then purchase a subscription to a no-code tool like Wix (it's free but only to a very limited extent) and set about designing and building a site. After several hours or days, Jim has put together a site that, to his eye, looks great and is a sure-fire way of propelling his business to success.&lt;/p&gt;

&lt;p&gt;Except that... well, it is an objectively bad website in terms of its design and usability.&lt;/p&gt;

&lt;p&gt;It takes Jim a few embarrassing conversations with a few friends and colleagues to realize that his site is not as good as he initially thought and that maybe it's better if he turned to a professional to sand the rough edges of his site or even redo it entirely.&lt;/p&gt;

&lt;p&gt;Jim then approaches a developer or designer for the work who then charges a fair wage for the work done. At the end of the day, Jim possesses a Wix website that looks pretty good but now he has spent double or triple his budget and wasted precious time in getting up a site that can achieve his business goals.&lt;/p&gt;

&lt;p&gt;Many freelancers know this fake story actually happens where they have to 'fix' a lot of bad client websites they made themselves.&lt;/p&gt;

&lt;p&gt;That's the troubling thing about many of these no-code tools.&lt;/p&gt;

&lt;p&gt;Clients often start off thinking they know what they're doing thanks to the "if I can do it, you can do it" nature of these no-code builder advertising campaigns.&lt;/p&gt;

&lt;p&gt;At the end of the day, there are quite a few big trade-offs when a client chooses a no-code builder over a developer. The first mistake, however, is thinking that there should be a choice between a developer and a no-code builder.&lt;/p&gt;

&lt;p&gt;If there's one thing you takeaway from this, remember this:&lt;/p&gt;

&lt;p&gt;You will always get people who want to cut their own lawn, and you will always get people who pay others to cut it for them.&lt;/p&gt;

&lt;p&gt;Don't worry about those who want to cut their own lawn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-positive-sum-game-of-developers-amp-nocode-builders"&gt;
  &lt;/a&gt;
  The Positive Sum Game of Developers &amp;amp; No-Code Builders
&lt;/h2&gt;

&lt;p&gt;Developers only write code.&lt;/p&gt;

&lt;p&gt;At least that's what everyone thinks.&lt;/p&gt;

&lt;p&gt;In reality, developers provide solutions to problems. How they provide these solutions have changed with time. But, at the end of the day, developers are hired to solve technical problems and provide tangible value to a client or company.&lt;/p&gt;

&lt;p&gt;That’s the core of what developers do.&lt;/p&gt;

&lt;p&gt;Developers have, for a long time, tended towards snobbishness. In particular, many have looked down at abstracted programming languages and environments as "lesser" or "illegitimate".&lt;/p&gt;

&lt;p&gt;Companies and clients that require custom software solutions still need developers for specific tasks. You don't see Amazon turning to Shopify to run its latest brand merchandise shop. Likewise, clients who need custom solutions will hire developers who understand software.&lt;/p&gt;

&lt;p&gt;Those companies that will rather use a no-code builder probably did not have developers working for them full-time anyways. The thing is, these builders don't facilitate the kind of work that developers do in the first place.&lt;/p&gt;

&lt;p&gt;More abstraction in the case of software tools and solutions does not replace developers. Rather, it equips them to complete tasks that would otherwise be unnecessarily time-consuming. This allows higher productivity which is better for the company or client in question!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-potential-issues-of-nocode-building-apps"&gt;
  &lt;/a&gt;
  What are the Potential Issues of No-Code Building Apps?
&lt;/h2&gt;

&lt;p&gt;It is undeniable that many businesses and companies are attracted to the enticing benefits of no-code building platforms, but you should bear in mind that there are always some cons to something such as the following:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#limited-features-and-templates"&gt;
  &lt;/a&gt;
  Limited features and templates
&lt;/h3&gt;

&lt;p&gt;If your business requires a more distinctive procedure or strategy, the no-code option may not be a good choice.&lt;/p&gt;

&lt;p&gt;No code development platforms give multiple templates and components that may be modified to fulfill a set of use cases when it comes to building up the various elements of an application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;p&gt;Since you're developing an app or a website from another app or website, there's no guarantee that you're safe from any breach or major issues that the no-code platform can encounter.&lt;/p&gt;

&lt;p&gt;You won't even have control over the provider's technology stack when you use no-code. If the provider's internal security is breached, you and your project would be exposed including all of the money and time you put into developing it would be wasted. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ownership"&gt;
  &lt;/a&gt;
  Ownership
&lt;/h3&gt;

&lt;p&gt;You need to rely on the original vendor to ensure that your application is properly maintained in the future. If you have a contract with no-code builders, it might be hard and costly for you to switch providers if needed. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-benefits-of-hiring-a-developer"&gt;
  &lt;/a&gt;
  The Benefits of Hiring a Developer
&lt;/h2&gt;

&lt;p&gt;Developers are professionals.&lt;/p&gt;

&lt;p&gt;They understand the intricacies and nuances of the web that allow them to know when a website or application is not working as it should. This is valuable in and of itself but the real value of a developer is in his or her ability to prevent problems before they even arise and this is where many clients who don’t use a developer get caught out.&lt;/p&gt;

&lt;p&gt;Developers also often bring varied skill sets to the table. You’d be hard-pressed these days to find a developer who is also not well versed in at least one other complementary skill such as design, digital marketing, content writing, or SEO.&lt;/p&gt;

&lt;p&gt;Hiring a developer is not the same as getting a subscription for a new software tool to get a job done. A developer represents expertise that understands the holistic picture. It is this key point that results in vastly differing results when a no-code tool is put in the hands of a developer versus it being used by the client himself.&lt;/p&gt;

&lt;p&gt;Developers are experts.&lt;/p&gt;

&lt;p&gt;Clients with unknown tools in their hands are not.&lt;/p&gt;

&lt;p&gt;What clients get by hiring developers are people who can bridge the gap between software capabilities and the business requirements of the client. How a developer achieves this is often abstracted away from the client who really only cares for the end product and whether it works and looks as expected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-youre-the-asset-not-the-tool-you-use"&gt;
  &lt;/a&gt;
  Conclusion: You're The Asset - Not The Tool You Use
&lt;/h2&gt;

&lt;p&gt;No-code tools may initially serve as a source of anxiety for developers and their sense of work security but digging a little deeper reveals a different story.&lt;/p&gt;

&lt;p&gt;Technology has evolved and continues to do so at a rapid pace. Those who maintain their value in the workforce are those who remain relevant.&lt;/p&gt;

&lt;p&gt;A developer who uses a low- or no-code tool to achieve a specific client requirement is just as relevant as a developer who hand-codes the solution.&lt;/p&gt;

&lt;p&gt;The key differentiator here is time. Everyone values their own time the most. Save your client time and you’ll set yourself apart from the developers looking to remain in their old ways.&lt;/p&gt;

&lt;p&gt;This can be a nuanced argument but a common developer vs. no-code tool story can be boiled down to this:&lt;/p&gt;

&lt;p&gt;A client needs an expert to build his or her product. They will realize this at some point if they go down the journey of building their product themselves.&lt;/p&gt;

&lt;p&gt;It’s up to you, the developer, to remain vigilant in upgrading your skillset and confident in the business and technical acumen that you can offer clients.&lt;/p&gt;

&lt;p&gt;Do this and you’ll forever be a sought-after professional developer who adds value.&lt;/p&gt;

&lt;p&gt;And remember, &lt;strong&gt;you'll always get the guy who wants to cut his own lawn, but you'll always get the other guy who pays someone to do it for him.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Same principle applies to web development, design, freelancing, etc.&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;

&lt;p&gt;If you have anything to add or say about no-code builders, let me know!&lt;/p&gt;

&lt;p&gt;Until next time,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kylep.co/"&gt;Kyle&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>coding</category>
      <category>beginners</category>
    </item>
    <item>
      <title>React Components</title>
      <author>RohitrajDeshmukh</author>
      <pubDate>Tue, 23 Nov 2021 06:00:42 +0000</pubDate>
      <link>https://dev.to/rohitrajdeshmukh/react-components-1101</link>
      <guid>https://dev.to/rohitrajdeshmukh/react-components-1101</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-component"&gt;
  &lt;/a&gt;
  What is component?
&lt;/h2&gt;

&lt;p&gt;Components are basic building blocks of Ract App. A component is a class or a function that accepts inputs and returns react element that describes how the user interface should look. Components are independent and re-usable. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#there-are-main-two-types-of-components"&gt;
  &lt;/a&gt;
  There are main two types of Components
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Class Component&lt;/li&gt;
&lt;li&gt;Functional Component&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#class-component"&gt;
  &lt;/a&gt;
  Class Component
&lt;/h2&gt;

&lt;p&gt;A Class component requires you to extends from React.Components and create a Render function that returns a React Element. A class component is called as statefull class component. Whenever the state of the components changes the render method will call.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Create Class Component name as Demo&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Demo extends React.Component 
{
  render() 
  {
    return &amp;lt;h1&amp;gt;Hello, I am Rohitraj!&amp;lt;/h1&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#functional-component"&gt;
  &lt;/a&gt;
  Functional Component
&lt;/h2&gt;

&lt;p&gt;A Functional component accepts props as an argument and returns a React Element. There is no render method used in funtional component. A function component is called as stateless functional component. It render the user interface based on props.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Create Funtional Component name as Demo&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Demo() 
{
  return &amp;lt;h1&amp;gt;Hello, I am Rohitraj!&amp;lt;/h1&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#rendering-a-component"&gt;
  &lt;/a&gt;
  Rendering a Component
&lt;/h2&gt;

&lt;p&gt;Rendering a component means a component with render prop which takes a funtion that returns a React Element and call it.&lt;br&gt;
Given below is the example where ReactDOM.render renders your component i.e.  to the DOM in the root element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ReactDOM.render(&amp;lt;Demo /&amp;gt;, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#components-in-component"&gt;
  &lt;/a&gt;
  Components in Component
&lt;/h2&gt;

&lt;p&gt;we can use components inside other component. Means we can create multiple funtions in one component and return one function into another funtion.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Demo() {
  return &amp;lt;h1&amp;gt;I am Rohitraj!&amp;lt;/h1&amp;gt;;
}

function Sample() {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;Who are you?&amp;lt;/h1&amp;gt;
      &amp;lt;Demo /&amp;gt;
    &amp;lt;/&amp;gt;
  );
}

ReactDOM.render(&amp;lt;Sample /&amp;gt;, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#components-in-files"&gt;
  &lt;/a&gt;
  Components in Files
&lt;/h2&gt;

&lt;p&gt;We can create a new file with .js extension and inside that we create a funtion and returns some HTML element and we export this function. Given below you can see the example:-&lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;This is the new file we called it as Demo.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Demo() {
  return &amp;lt;h1&amp;gt;Hello, I am Rohitraj!&amp;lt;/h1&amp;gt;;
}

export default Car;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what we called a Demo Component. Now you have to import this file in your application. So for that we use the &lt;em&gt;import&lt;/em&gt; statment then the &lt;em&gt;function_name&lt;/em&gt; and the &lt;em&gt;path&lt;/em&gt; where the file is located. Given below you can see this:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import ReactDOM from 'react-dom';
import Demo from './Demo.js';

ReactDOM.render(&amp;lt;Demo /&amp;gt;, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>Getting started with Remix</title>
      <author>Carlo Gino Catapang</author>
      <pubDate>Tue, 23 Nov 2021 05:58:29 +0000</pubDate>
      <link>https://dev.to/codegino/getting-started-with-remix-10o0</link>
      <guid>https://dev.to/codegino/getting-started-with-remix-10o0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-remix"&gt;
  &lt;/a&gt;
  What is Remix?
&lt;/h2&gt;

&lt;p&gt;Remix is a "relatively" new framework which was open sourced on &lt;em&gt;23rd of November 2021&lt;/em&gt;. It was originally created by the awesome &lt;a href="https://twitter.com/ryanflorence"&gt;Ryan Florence&lt;/a&gt; and &lt;a href="https://twitter.com/mjackson"&gt;Michael Jackson&lt;/a&gt;, and with the recent addition of &lt;a href="https://twitter.com/kentcdodds"&gt;Kent C. Dodds&lt;/a&gt; it allows the framework to sell itself.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As per their &lt;a href="https://remix.run/"&gt;website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Remix is a full stack web framework that let’s you focus on the user interface and work back through web fundamentals to deliver a fast, slick, and resilient user experience.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's get started with the actual coding.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#create-a-basic-remix-app"&gt;
  &lt;/a&gt;
  Create a basic Remix app
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;This is my interpretation after scratching the surface of the &lt;a href="https://remix.run/docs/en/v1"&gt;documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;Make sure you have &lt;a href="https://nodejs.org/en/"&gt;node&lt;/a&gt; installed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-remix@latest
&lt;span class="c"&gt;# follow the prompts&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;whatever you named the project]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;NOTE: There will be an option to run &lt;code&gt;npm install&lt;/code&gt; to install the dependencies immediately.&lt;br&gt;
This will create a &lt;code&gt;package-lock.json&lt;/code&gt;. If you want to use yarn, you can skip this step.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#running-the-app"&gt;
  &lt;/a&gt;
  Running the app
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Based on what you choose in the image below, a custom &lt;code&gt;README.md&lt;/code&gt; file is created at the project's root.&lt;br&gt;
Make sure to check the steps on how to run the application locally&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JkirEOki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/o14gibX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JkirEOki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/o14gibX.png" width="876" height="406"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#running-examples"&gt;
  &lt;/a&gt;
  Running examples
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;You can use yarn for the steps below if you prefer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For Remix App Server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Express Server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Start the Remix development asset server&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm run dev

&lt;span class="c"&gt;# In a new tab start your express app:&lt;/span&gt;
npm run start:dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CEajRxju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/LQLhdpb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CEajRxju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/LQLhdpb.png" width="880" height="473"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don't, make sure to check &lt;code&gt;README.md&lt;/code&gt; for specific instructions on how to run the app locally,&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;I will be using &lt;code&gt;TypeScript&lt;/code&gt; for this blog; if you prefer to use vanilla JavaScript, remove the type usages and change the extensions from &lt;code&gt;.tsx&lt;/code&gt; to &lt;code&gt;.jsx&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#cleaning-up"&gt;
  &lt;/a&gt;
  Cleaning up
&lt;/h3&gt;

&lt;p&gt;Let's start coding with a clean slate.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Remove demo files&lt;/span&gt;
&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; app/routes/demos app/styles/demos

&lt;span class="c"&gt;# We'll recreate this files later&lt;/span&gt;
&lt;span class="nb"&gt;rm &lt;/span&gt;app/routes/index.tsx app/root.tsx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-a-file-named-raw-roottsx-endraw-file-under-raw-app-endraw-folder"&gt;
  &lt;/a&gt;
  Create a file named &lt;code&gt;root.tsx&lt;/code&gt; file under &lt;code&gt;app&lt;/code&gt; folder.
&lt;/h4&gt;

&lt;p&gt;This file will serve as the global container for the app.&lt;/p&gt;

&lt;p&gt;// app/root.tsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Links&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;LiveReload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;Outlet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;Scripts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;ScrollRestoration&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Outlet&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Here is the blueprint of our document&lt;/span&gt;
&lt;span class="c1"&gt;// It looks like our typical HTML but with a few extra tags&lt;/span&gt;
&lt;span class="c1"&gt;// I will discuss in another blog post those Components coming from the remix package&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ReactNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charSet&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width,initial-scale=1"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Meta&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Links&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ScrollRestoration&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Scripts&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LiveReload&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Layout is a wrapper component that provides a consistent layout for all pages.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PropsWithChildren&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-the-index-route-file-raw-indextsx-endraw-under-raw-approutes-endraw-folder"&gt;
  &lt;/a&gt;
  Create the index route file &lt;code&gt;index.tsx&lt;/code&gt; under &lt;code&gt;app/routes&lt;/code&gt; folder.
&lt;/h4&gt;

&lt;p&gt;Let's proceed with the mandatory &lt;code&gt;hello world&lt;/code&gt; example.&lt;/p&gt;

&lt;p&gt;// app/routes/index.jsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adding the two files above will yield the following result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rdj86GvT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kSS5vUz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rdj86GvT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kSS5vUz.png" width="694" height="344"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-link"&gt;
  &lt;/a&gt;
  Create a link
&lt;/h3&gt;

&lt;p&gt;We'll add the links inside &lt;code&gt;Layout&lt;/code&gt; since it will be reusable across all pages.&lt;/p&gt;

&lt;p&gt;// app/root.tsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PropsWithChildren&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/pokemons"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Pokemons&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wAvwBY9J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/FRFNy05.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wAvwBY9J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/FRFNy05.png" width="702" height="252"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After clicking the link or navigating to the URL, you should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g0fxA-YM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/rPlNuL2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g0fxA-YM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/rPlNuL2.png" width="702" height="396"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;It is expected since we have not created a route handler for the &lt;code&gt;/pokemons&lt;/code&gt; page.&lt;/p&gt;



&lt;p&gt;Before creating that route, let us use &lt;code&gt;CatchBoundary&lt;/code&gt; to create a custom &lt;code&gt;404&lt;/code&gt; error message as a fallback for all Not Found routes.&lt;/p&gt;

&lt;p&gt;// app/root.tsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useCatch&lt;/span&gt; &lt;span class="cm"&gt;/*other imports*/&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CatchBoundary&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;caught&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCatch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is a custom error message for 404 pages&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// You can customize the behavior for other status codes&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Document&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusText&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the customized &lt;code&gt;404&lt;/code&gt; error page: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ByhW_ZBT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/tw8NqI4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ByhW_ZBT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/tw8NqI4.png" width="702" height="396"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To fix this &lt;code&gt;404&lt;/code&gt; error, let's create the &lt;code&gt;/pokemons&lt;/code&gt; route&lt;/p&gt;

&lt;p&gt;// app/routes/pokemons/index.tsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Pokemons&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Pokemons&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nfyICHMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/B3FgSe7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nfyICHMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/B3FgSe7.png" width="702" height="252"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-meta-tags"&gt;
  &lt;/a&gt;
  Adding meta tags
&lt;/h3&gt;

&lt;p&gt;Meta tags are used here to update the title and description of the page. To learn more what meta is used for, check &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta"&gt;this&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;// app/routes/pokemons/index.tsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Pokemons&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;List of Pokemons&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// export default function Pokemons...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should see an updated &lt;code&gt;head&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HAmBVTJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/FAVI0hK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HAmBVTJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/FAVI0hK.png" width="694" height="344"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#fetching-data"&gt;
  &lt;/a&gt;
  Fetching Data
&lt;/h3&gt;

&lt;p&gt;Unlike the vanilla React where usually fetch the data from the client-side, in Remix we can load data from the server using a the concept of a &lt;code&gt;loader&lt;/code&gt;&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#create-a-loader"&gt;
  &lt;/a&gt;
  Create a Loader
&lt;/h4&gt;

&lt;p&gt;// app/routes/pokemons/index.tsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// previous imports&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;LoaderFunction&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LoaderFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://pokeapi.co/api/v2/pokemon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// export default function Pokemons...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are wondering where is the &lt;code&gt;.then(res =&amp;gt; res.json())&lt;/code&gt; part, you are not alone.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I'm still cheking how they allow this magic to happen.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We can still write the typical fetch as usual.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h4&gt;
  &lt;a href="#accessing-data-in-react"&gt;
  &lt;/a&gt;
  Accessing data in React
&lt;/h4&gt;

&lt;p&gt;Use the &lt;code&gt;useLoaderData&lt;/code&gt; hook to access the data in React land.&lt;/p&gt;

&lt;p&gt;// app/routes/pokemons/index.tsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useLoaderData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="cm"&gt;/*other imports*/&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// export let loader: LoaderFunction...&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Pokemons&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLoaderData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="c1"&gt;// Try to use console.log here&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Pokemons&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`/pokemons/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Combining the two previous codes will result to:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--65wFEEQG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/dGe8mID.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--65wFEEQG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/dGe8mID.png" width="694" height="556"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#creating-a-dynamic-route"&gt;
  &lt;/a&gt;
  Creating a dynamic route
&lt;/h3&gt;

&lt;p&gt;For this demo, let's use the file path convention.&lt;/p&gt;

&lt;p&gt;Under the &lt;code&gt;pokemons&lt;/code&gt; folder, create a folder named &lt;code&gt;$pokemonName.tsx&lt;/code&gt;.&lt;br&gt;
&lt;em&gt;Yes, it's not a typo; add a &lt;strong&gt;$&lt;/strong&gt; before the file name. We'll see how to use it later.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;// app/routes/pokemons/$pokemonName.tsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Pokemon&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Specific Pokemon Route&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we click &lt;code&gt;bulbasaur&lt;/code&gt; in the list, we should see something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--isTmJJh5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/mqGcGMk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--isTmJJh5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/mqGcGMk.png" width="668" height="348"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, how do we customize the page to show the details of a Pokemon?&lt;/p&gt;



&lt;p&gt;By naming the file &lt;code&gt;$pokemonName.tsx&lt;/code&gt;, inside the file, we can access &lt;code&gt;pokemonName&lt;/code&gt; inside the &lt;code&gt;params&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;We can use this information to fetch the specific data from the server. &lt;code&gt;see line #9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;// app/routes/pokemons/$pokemonName.tsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useLoaderData&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;LoaderFunction&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LoaderFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pokemonName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pokemonName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// OR const { pokemonName } = params;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`https://pokeapi.co/api/v2/pokemon/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;pokemonName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="c1"&gt;// We'll map the data based on our needs&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pokemonName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;img&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sprites&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;front_default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Pokemon&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pokemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLoaderData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; #&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Weight: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the code above, we can show these details in our page&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fLhHL2Kc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/CGAbGbY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fLhHL2Kc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/CGAbGbY.png" width="668" height="348"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#update-meta-of-pokemon-route"&gt;
  &lt;/a&gt;
  Update meta of pokemon route
&lt;/h4&gt;

&lt;p&gt;Before wrapping this up, let's update the meta of the Pokemon details page.&lt;/p&gt;

&lt;p&gt;// app/routes/pokemons/$pokemonName.tsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MetaFunction&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MetaFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`#&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Details of &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is a page with a better title and description&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VQWlTo3f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/u05HbDJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQWlTo3f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/u05HbDJ.png" width="702" height="355"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it all together
&lt;/h2&gt;

&lt;p&gt;Link to the &lt;a href="https://github.com/codegino/my-remix-app"&gt;repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's a &lt;a href="https://my-remix-app-bqf4bn4ci-codegino.vercel.app"&gt;demo&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Styling&lt;/li&gt;
&lt;li&gt;Deployment&lt;/li&gt;
&lt;li&gt;Form Handling&lt;/li&gt;
&lt;li&gt;MDX&lt;/li&gt;
&lt;li&gt;Configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This is still a pretty small application for me to assess what Remix really can do, and there's still much to learn. So far, I like how easy it is to create an application from scratch, and I find the convention easy to follow. I also like how they provide &lt;code&gt;hooks&lt;/code&gt; to make working with the data, errors, and such.Having said that, I definitely will explore more about Remix and the ecosystem in the future.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>remix</category>
    </item>
    <item>
      <title>18 Python one-liners that will speed up your coding process.</title>
      <author>Yash Makan</author>
      <pubDate>Tue, 23 Nov 2021 05:41:19 +0000</pubDate>
      <link>https://dev.to/yash_makan/18-python-one-liners-that-will-speed-up-your-coding-process-21md</link>
      <guid>https://dev.to/yash_makan/18-python-one-liners-that-will-speed-up-your-coding-process-21md</guid>
      <description>&lt;p&gt;Hi folks, I am Yash Makan and in today's blog, we are going to talk about one-liners in python. I clearly remember when I chose to learn python it was just because of the simplicity and readability. But you know what you can make the python code even more easy with less lines of code. Yup! thats right my friend. These one-liner code can save you a lot of time, memory and can impress your friends...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BqjaW6UL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/Bvo7iDxInexT0oCHgg/giphy.gif%3Fcid%3Decf05e47oy9b0df2af0v2j9pw2tpnog57mkdyzdd42he0y6s%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BqjaW6UL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/Bvo7iDxInexT0oCHgg/giphy.gif%3Fcid%3Decf05e47oy9b0df2af0v2j9pw2tpnog57mkdyzdd42he0y6s%26rid%3Dgiphy.gif%26ct%3Dg" alt="https://media3.giphy.com/media/Bvo7iDxInexT0oCHgg/giphy.gif?cid=ecf05e47oy9b0df2af0v2j9pw2tpnog57mkdyzdd42he0y6s&amp;amp;rid=giphy.gif&amp;amp;ct=g" width="480" height="264"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-oneliner-code"&gt;
  &lt;/a&gt;
  what is a one-liner code?
&lt;/h2&gt;

&lt;p&gt;You can think of one-liner code as a block of code compressed together so that it fits inside one line. It is the concise, useful programs packed in just one single line. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-i-need-them"&gt;
  &lt;/a&gt;
  why do I need them?
&lt;/h2&gt;

&lt;p&gt;So if you are not a big fan of writing one-liners or you are just curious that why do I have to know these then below are some pretty convincing topics.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Understanding One-liners will make a python expert as you will get a much better understanding of the language.&lt;/li&gt;
&lt;li&gt;This will help you to write the code faster. You can write the piece of code much faster than others which will help you in competitive programming.&lt;/li&gt;
&lt;li&gt;On-liners will improve your basics and roots of programming as they strengthen your basics.&lt;/li&gt;
&lt;li&gt;You will write the code more in a pythonic way. Generally, people who come from different languages often write code in an un-pythonic way in python for example they don't use list comprehension, multiple assignments, and slicing etc.&lt;/li&gt;
&lt;li&gt;You can impress your friends, colleagues and you can give a good impression in your interview if you have a good grasp of one-liners.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But also it can be a little hard as well. Imagine programming as chess. You know the basics is like knowing what is variables, loops, conditions, data structures, classes but learning the master movies and creating your own strategy is like one-liners. In the beginning, it can be hard and quite overwhelming but once you get to know them. You can achieve greatness and win matches faster than a lot of other players. Everything has a price to pay my friend...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  Basics
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-ifelse"&gt;
  &lt;/a&gt;
  1. If-else
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-elif"&gt;
  &lt;/a&gt;
  2. Elif
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"no"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"yes"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"maybe"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"no"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"yes"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"maybe"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-if-without-else"&gt;
  &lt;/a&gt;
  3. If without else
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'hi'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'hello'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'hello'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-function"&gt;
  &lt;/a&gt;
  4. Function
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"hello "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"hello "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"def f(x):&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;    return 'hello '+ x"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-loop"&gt;
  &lt;/a&gt;
  5. Loop
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;squares&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;squares&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-loop-with-if"&gt;
  &lt;/a&gt;
  6. Loop with If
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;squares&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-loop-with-if-else"&gt;
  &lt;/a&gt;
  7. Loop with if else
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;squares&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;squares&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#8-while-loop-with-if-else"&gt;
  &lt;/a&gt;
  8. While Loop with if else
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"FIVE"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"FIVE"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#9-swap-variables"&gt;
  &lt;/a&gt;
  9. swap variables
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#10-multiple-assignment"&gt;
  &lt;/a&gt;
  10. Multiple Assignment
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"ONE"&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;3.001&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"One"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.001&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#11-write-string-in-file"&gt;
  &lt;/a&gt;
  11. Write String In File
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Helllloooooo"&lt;/span&gt;
&lt;span class="n"&gt;fileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello.txt"&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Helllloooooo"&lt;/span&gt;
&lt;span class="n"&gt;fileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello.txt"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#12quicksort"&gt;
  &lt;/a&gt;
  12.Quicksort
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Source - https://stackabuse.com/quicksort-in-python/
&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;

    &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;high&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;quick_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;quick_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;quick_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;87&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;88&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;83&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;quick_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;87&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;88&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;83&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#13-fibonacci"&gt;
  &lt;/a&gt;
  13. Fibonacci
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#14-http-server"&gt;
  &lt;/a&gt;
  14. HTTP Server
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;http.server&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socketserver&lt;/span&gt;
&lt;span class="n"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;
&lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SimpleHTTPRequestHandler&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;socketserver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"serving at port"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#15-nested-for-loops"&gt;
  &lt;/a&gt;
  15. Nested For Loops
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;iter1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;iter2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iter1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iter2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iter1&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iter2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#16-print-without-newline"&gt;
  &lt;/a&gt;
  16. Print Without Newline
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#17-class"&gt;
  &lt;/a&gt;
  17. Class
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;School&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; 
    &lt;span class="n"&gt;fun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;School&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'School'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'fun'&lt;/span&gt;&lt;span class="p"&gt;:{}})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#18-walrus-python-38"&gt;
  &lt;/a&gt;
  18. Walrus:= (Python 3.8)
&lt;/h3&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;gt; "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;"quit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You entered:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;gt; "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;"quit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You entered:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So now you have some understanding of python one-liners and this will help to speed up your coding process. I hope that you've learnt something new from this article as I myself get to know some cool tricks and one-liners that I didn't know earlier. If this is the case with you as well then do click the heart button when increases my motivation(1 like = 1 good karma). Also, share the post with your friends so that they too can learn something new(don't be selfish...). Hope to be in your mind again, till then b-bye!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H3ignATo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/w89ak63KNl0nJl80ig/giphy.gif%3Fcid%3Decf05e478g5vv310sx1w5035xnuj17tgxbdtlcpcvas5fsoj%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H3ignATo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/w89ak63KNl0nJl80ig/giphy.gif%3Fcid%3Decf05e478g5vv310sx1w5035xnuj17tgxbdtlcpcvas5fsoj%26rid%3Dgiphy.gif%26ct%3Dg" alt="https://media4.giphy.com/media/w89ak63KNl0nJl80ig/giphy.gif?cid=ecf05e478g5vv310sx1w5035xnuj17tgxbdtlcpcvas5fsoj&amp;amp;rid=giphy.gif&amp;amp;ct=g" width="480" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#socials"&gt;
  &lt;/a&gt;
  Socials
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.yashmakan.co.in/"&gt;My Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Yash_Makan"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.yashmakan.co.in/banner"&gt;Banner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>GitHub basics: What are actions?</title>
      <author>Chris Bongers</author>
      <pubDate>Tue, 23 Nov 2021 05:35:19 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/github-basics-what-are-actions-315g</link>
      <guid>https://dev.to/dailydevtips1/github-basics-what-are-actions-315g</guid>
      <description>&lt;p&gt;Now that we have a broad understanding of &lt;a href="https://daily-dev-tips.com/posts/git-basics-what-is-git/"&gt;what Git is&lt;/a&gt;, let's dive deeper into some more specific topics.&lt;/p&gt;

&lt;p&gt;IN this article, I'll explain what GitHub actions are and how you can use them.&lt;/p&gt;

&lt;p&gt;I choose GitHub as the platform to highlight because I love to use it, and it's the biggest one out there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-github-actions"&gt;
  &lt;/a&gt;
  What are GitHub actions
&lt;/h2&gt;

&lt;p&gt;Actions are actions that take place on certain activities on GitHub. You can use these actions to automate specific tasks within your development cycle.&lt;/p&gt;

&lt;p&gt;These actions can trigger specific events. Some examples might be: After each commit, when a new PR is created, etc.&lt;/p&gt;

&lt;p&gt;Let's have a look at the high level overview of a action:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Event 

&lt;ul&gt;
&lt;li&gt;Job

&lt;ul&gt;
&lt;li&gt;Step

&lt;ul&gt;
&lt;li&gt;Action&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's go through these elements as they are pretty essential to understand.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github-action-event"&gt;
  &lt;/a&gt;
  GitHub action event
&lt;/h3&gt;

&lt;p&gt;The event is the actual trigger for the workflow. There can be multiple triggers for one action.&lt;/p&gt;

&lt;p&gt;Let's say we want to trigger the action when a new push is made to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;push&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or run the same action on multiple actions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also use a cronjob as an event &lt;a href="https://daily-dev-tips.com/posts/deploy-eleventy-to-netlify-using-github-actions/"&gt;I use this in my automated deployment process&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;4&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are many more events that can trigger these actions, including comments, labels, and more.&lt;/p&gt;

&lt;p&gt;You can find the &lt;a href="https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows"&gt;complete event list on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jobs-inside-your-action"&gt;
  &lt;/a&gt;
  Jobs inside your action
&lt;/h3&gt;

&lt;p&gt;A job is a list of steps that are run on the same runner. If you have multiple jobs in your action, they will run parallel by default. (You can change this behavior)&lt;/p&gt;

&lt;p&gt;We could, for instance, run a lint job, a test job, and a build job.&lt;/p&gt;

&lt;p&gt;Jobs also need to run on a specific system.&lt;br&gt;
GitHub comes with a complete set of already made runners. They are virtual machines.&lt;/p&gt;

&lt;p&gt;For instance, we can run Windows, Ubuntu, or Mac!&lt;/p&gt;

&lt;p&gt;Jobs can also have specific names. Let's set up the three jobs we described above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;lint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# steps&lt;/span&gt;
    &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# steps&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
        &lt;span class="c1"&gt;# steps&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#steps-inside-the-action-job"&gt;
  &lt;/a&gt;
  Steps inside the action job
&lt;/h3&gt;

&lt;p&gt;A step is a group of actions inside a specific job. Each item inside a step can share data between them.&lt;/p&gt;

&lt;p&gt;An example of a step would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;step-1&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# Actions&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#actions-inside-the-action-job"&gt;
  &lt;/a&gt;
  Actions inside the action job
&lt;/h3&gt;

&lt;p&gt;Actions are the brains behind the operation. They start to do something.&lt;/p&gt;

&lt;p&gt;Let's say we want to add an action that says hello.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;step-1&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "Hi there! 👋"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-does-a-complete-workflow-look-like"&gt;
  &lt;/a&gt;
  How does a complete workflow look like?
&lt;/h2&gt;

&lt;p&gt;Let's take the last example and make this into a complete workflow.&lt;/p&gt;

&lt;p&gt;The first thing we need to do is set a name for our workflow.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Our very first GitHub Action&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then let's determine when our action must run. I want it only to run when we manually tell it to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;workflow_dispatch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the last part is to add jobs and action to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
    &lt;span class="na"&gt;Testing-Actions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;A action is born&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;echo "I'm walking! 🚶‍♀️"&lt;/span&gt;
          &lt;span class="s"&gt;echo "Actually, I'm running on ${{ runner.os }} 🏃"&lt;/span&gt;
          &lt;span class="s"&gt;echo "I'm done! My status: ${{ job.status }} 🎉"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open a new repo on GitHub.&lt;/p&gt;

&lt;p&gt;Then click the actions tab on top to add your first action.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SxyApPea--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636695625249/XfyEVWIog.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SxyApPea--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636695625249/XfyEVWIog.png" alt="Add a new GitHub action" width="880" height="697"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Paste the complete workflow as we created above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Our very first GitHub Action&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;workflow_dispatch&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
    &lt;span class="na"&gt;Testing-Actions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;A action is born&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;echo "I'm walking! 🚶‍♀️"&lt;/span&gt;
          &lt;span class="s"&gt;echo "Actually, I'm running on ${{ runner.os }} 🏃"&lt;/span&gt;
          &lt;span class="s"&gt;echo "I'm done! My status: ${{ job.status }} 🎉"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run this workflow, click on the specific workflow and press the "Run workflow" button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MOl1R36---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636696522444/5Rl3RMNX_w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MOl1R36---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636696522444/5Rl3RMNX_w.png" alt="Run workflow action" width="880" height="459"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once it's done, you can open up the workflow and see what went on.&lt;br&gt;
You should be able to see the job we defined and the steps it took.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NLXrtcoV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636696619356/tO6U3oREw-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NLXrtcoV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636696619356/tO6U3oREw-.png" alt="GitHub action done running" width="880" height="331"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it. We have a working GitHub action.&lt;br&gt;
This is a super basic setup, and the possibilities for workflows are endless!&lt;/p&gt;

&lt;p&gt;You can view &lt;a href="https://github.com/rebelchris/github-actions/actions"&gt;my demo on GitHub&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;What kind of workflow would you like to see?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Building RESTful APIs with Node JS &amp; Hoppscotch</title>
      <author>Sankalp Swami</author>
      <pubDate>Tue, 23 Nov 2021 05:29:41 +0000</pubDate>
      <link>https://dev.to/aviyel/live-event-building-restful-apis-with-node-js-hoppscotch-1oll</link>
      <guid>https://dev.to/aviyel/live-event-building-restful-apis-with-node-js-hoppscotch-1oll</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ry4XnJGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81cko8ru5kfutgtv5i37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ry4XnJGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81cko8ru5kfutgtv5i37.png" alt="Samuel's Event" width="880" height="440"&gt;&lt;/a&gt;&lt;br&gt;
It all began when I failed miserably with my bulky monolithic web application which I developed for a client when working at a startup. I felt so disappointed that I even thought of quitting programming completely. But the hunger for knowledge pushed me harder and made me work on building scalable web applications and that was how I came across RESTful APIs.&lt;/p&gt;

&lt;p&gt;If you are planning to get into Backend Development, it is a must to understand what RESTful APIs are and how they work for building a robust, reliable, and scalable web application. Despite googling for hours, you are still chaotic about RESTful APIs? Time to relax as Aviyel is coming with an amazing event to answer all of your questions.&lt;/p&gt;

&lt;p&gt;Why you should join this event?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You will learn how to make CRUD API endpoints with &lt;a href="http://nodejs.org/"&gt;Node.js&lt;/a&gt;, and &lt;a href="http://expressjs.com/"&gt;Express.js&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You will learn how to test your backend APIs with &lt;a href="https://aviyel.com/projects/5/hoppscotch"&gt;Hoppscotch&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You will learn how to set up your database using &lt;a href="https://harperdb.io/"&gt;HarperDB&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ayodele Samuel Adebayo (unclebigbay) is coming live on Aviyel to clear all your doubts about RESTful APIs. Unclebigbay is a Nigerian software developer, technical writer, and content creator who writes about programming concepts and project-based articles on his blog. He graduated from Tiidelab's coding Bootcamp, and currently works as a freelancer, where he enjoys participating in open source projects and hackathons, with two of his projects making it to the winning list of hackathons on Hashnode. Unclebigbay can be seen playing volleyball with his sports team if he is not coding or writing.&lt;/p&gt;

&lt;p&gt;Join us to get hands-on experience with APIs and open-source!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Date: November 28th, 2021&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Time: 8.00 AM PST | 11:00 AM EST&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Register Here 👉&lt;/strong&gt;: &lt;a href="https://bit.ly/3nHxPYL"&gt;https://bit.ly/3nHxPYL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Impressed? Check out the rest of our &lt;a href="https://aviyel.com/events"&gt;events&lt;/a&gt;!&lt;br&gt;
Let’s build open-source together! 🎉&lt;br&gt;
Team Aviyel&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ayodele Samuel Adebayo Socials!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/unclebigbay143"&gt;unclebigbay&lt;/a&gt;&lt;br&gt;
Hashnode: &lt;a href="https://unclebigbay.com/"&gt;unclebigbay&lt;/a&gt;&lt;br&gt;
Dev.to: &lt;a href="https://dev.to/unclebigbay"&gt;Unclebigbay&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://www.linkedin.com/in/ayodele-samuel-ayodele-55902819a/"&gt;Ayodele Samuel Adebayo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Bind Data in a Blazor Rich Text Editor Component</title>
      <author>Techguy</author>
      <pubDate>Tue, 23 Nov 2021 04:54:36 +0000</pubDate>
      <link>https://dev.to/syncfusion/how-to-bind-data-in-a-blazor-rich-text-editor-component-55pd</link>
      <guid>https://dev.to/syncfusion/how-to-bind-data-in-a-blazor-rich-text-editor-component-55pd</guid>
      <description>&lt;p&gt;Learn how to bind data in the Syncfusion &lt;a href="https://www.syncfusion.com/blazor-components/blazor-wysiwyg-rich-text-editor?utm_source=dev.to&amp;amp;utm_medium=socialmedia&amp;amp;utm_campaign=backlink_promotion"&gt;Blazor Rich Text Editor (RTE)&lt;/a&gt; in a Blazor WebAssembly app. This video explains how to bind the HTML data to the Rich Text Editor using one-way, two-way, and dynamic value binding. Also, it explains how to bind markdown data to the Rich Text Editor.&lt;/p&gt;

&lt;p&gt;Product Overview:&lt;a href="https://www.syncfusion.com/blazor-components/blazor-wysiwyg-rich-text-editor?utm_source=dev.to&amp;amp;utm_medium=socialmedia&amp;amp;utm_campaign=backlink_promotion"&gt;Blazor Rich Text Editor (RTE)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example project: &lt;a href="https://github.com/SyncfusionExamples"&gt;https://github.com/SyncfusionExamples&lt;/a&gt;...&lt;/p&gt;

&lt;p&gt;Explore tutorial videos: &lt;a href="https://bit.ly/3fAz0Ch"&gt;https://bit.ly/3fAz0Ch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0rDnLJKbf-Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>csharp</category>
      <category>dotnet</category>
      <category>blazor</category>
    </item>
    <item>
      <title>Medical Landing Page</title>
      <author>Md Moskur Alam</author>
      <pubDate>Tue, 23 Nov 2021 03:57:13 +0000</pubDate>
      <link>https://dev.to/moskur_alam/medical-landing-page-ccp</link>
      <guid>https://dev.to/moskur_alam/medical-landing-page-ccp</guid>
      <description>&lt;p&gt;Download 15,000+ Design Resources.&lt;/p&gt;

&lt;p&gt;Download thousands of free &amp;amp; premium web design, illustration, bootstrap template, flutter app, icon, 3d illustration, and graphic assets for your UI, UX design project from &lt;a href="https://www.uihut.com/web-designs"&gt;UIHUT&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good news🔥🔥🔥&lt;/p&gt;

&lt;p&gt;Our Black Friday Offer👇&lt;/p&gt;

&lt;p&gt;Get Lifetime Access Only for 99$. Use the "mas10" coupon for the extra 10% off&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
