<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Open VSCODE in browser from github cool trick</title>
      <author>CoderZ90</author>
      <pubDate>Sat, 14 Aug 2021 10:58:25 +0000</pubDate>
      <link>https://dev.to/official_fire/open-vscode-in-browser-from-github-cool-trick-5a89</link>
      <guid>https://dev.to/official_fire/open-vscode-in-browser-from-github-cool-trick-5a89</guid>
      <description>&lt;p&gt;There is a very cool trick to open vscode on browser with a simple shortcut key &lt;/p&gt;

&lt;p&gt;Step 01: Go to your github repository&lt;/p&gt;

&lt;p&gt;Step 02: Press "windows icon" + "." key on your keyboard&lt;/p&gt;

&lt;p&gt;Boom! You are done vs code is launching&lt;/p&gt;

&lt;p&gt;if you found this post useful subscribe to my channel for more videos and coding tutorials&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtube.com/c/codingfire?sub_confirmation=1"&gt;https://youtube.com/c/codingfire?sub_confirmation=1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thankyou! Stay safe. Stay Happy :)&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>Async VS Defer - Understand The JavaScript Execution</title>
      <author>Ranjeet Singh</author>
      <pubDate>Sat, 14 Aug 2021 09:32:03 +0000</pubDate>
      <link>https://dev.to/jeetsdev/async-vs-defer-understand-the-javascript-execution-228g</link>
      <guid>https://dev.to/jeetsdev/async-vs-defer-understand-the-javascript-execution-228g</guid>
      <description>&lt;p&gt;As a web developer, how many times you have written this line in your code?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="script.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Probably too many times to count, but do you really understand how the browser handles this simple line of code? We have always been advised to put our &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag at the end of the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag, but again why is that so...? Is there any other place where we can put our &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag? What if we put the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag inside the &lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/code&gt; tag of our HTML document like -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- inside the head tag --&amp;gt;
&amp;lt;head&amp;gt;
    ...
    &amp;lt;title&amp;gt; .... &amp;lt;/title&amp;gt;
    &amp;lt;script src="script.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://i.giphy.com/media/bN4Gf6GEs9OtW/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/bN4Gf6GEs9OtW/giphy.gif" alt="Gif here"&gt;&lt;/a&gt;&lt;br&gt;
Aahhh, enough of these questions. Now it's time to understand all of them.&lt;/p&gt;

&lt;p&gt;First and foremost, Yes we can put our &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag wherever we want, but remember one thing that it can affect your page performance. &lt;/p&gt;

&lt;p&gt;So now let's understand exactly how &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag loading works and most importantly how we can use &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; to speed up our Javascript loading and improve our page performance. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-browser-parse-html"&gt;
  &lt;/a&gt;
  How Browser Parse HTML
&lt;/h2&gt;

&lt;p&gt;Before understanding how &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; is loading, we first need to understand how the browser parses HTML. Luckily, it's pretty straightforward. The browser will parse HTML from the top of the document to the bottom, and when it hits a resource, like an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag it will send out a request for that resource and continue parsing. The important thing to note is that the browser does not stop parsing the HTML to get the &lt;code&gt;img src&lt;/code&gt;. This is why when you load a web page you may notice the page jumps around as the images pop in since they are loaded in the background and may finish downloading after the HTML is parsed.&lt;/p&gt;

&lt;p&gt;But that's not the case with the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag. When the browser comes across a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag when loading HTML, the browser is forced to download and parse the entire &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; and evaluate it first, before it can continue with reading the rest of the HTML to build the DOM. This is why we are advised to put our &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag at the bottom of our HTML body so they don't delay the parsing of the HTML.&lt;/p&gt;

&lt;p&gt;Now you can just think that putting the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag at the bottom of the HTML body is ideal, but what if the HTML is too large and it takes some time to get downloaded and parsed then the JavaScript will not start downloading until all of the HTML is parsed which could delay your &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; download and affect your page performance. This is why the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; attributes were created.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#async-and-defer"&gt;
  &lt;/a&gt;
  Async and Defer
&lt;/h2&gt;

&lt;p&gt;Both &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; attributes load the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; without blocking the DOM and make the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag work like as a &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag to the parser as described above. This means that the script will be fetched in the background and continue parsing as normal without waiting. Okay, that seems fair but what's the difference between them...? Here we go then.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#async-vs-defer"&gt;
  &lt;/a&gt;
  Async vs Defer
&lt;/h2&gt;

&lt;p&gt;Both &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; look like they do the same thing at the first glance, but that's not the case, there is a subtle difference between the two.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#defer-waits-for-the-dom-but-async-doesnt-"&gt;
  &lt;/a&gt;
  Defer waits for the DOM but Async doesn't -
&lt;/h3&gt;

&lt;p&gt;The first and most important difference Is &lt;code&gt;async&lt;/code&gt; doesn't care whether DOM is fully loaded or not, on the other side &lt;code&gt;defer&lt;/code&gt; waits for the DOM to get loaded first and after that, it starts execution of the scripts.&lt;/p&gt;

&lt;p&gt;For example, let's say you have 25000 buttons in your HTML document and now select every button of the DOM using both of the scripts and get the length of them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;head&amp;gt;
  &amp;lt;script src="defer.js" defer&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src="async.js" async&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div class="container"&amp;gt;
  &amp;lt;!-- 25000 buttons --&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here are our script codes...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//! Async script code here
let asyncButton = document.querySelectorAll('button');
console.log(`Async script button count: ${asyncButton.length}`);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Defer script code here
let deferButton = document.querySelectorAll('button');
console.log(`Defer script button count: ${deferButton.length}`);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is the console output...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i2jVAKBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628732144264/ogBB9E8iI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i2jVAKBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628732144264/ogBB9E8iI.png" alt="temp1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see now, &lt;code&gt;async&lt;/code&gt; is not waiting for the DOM to get loaded fully and selecting all the buttons loaded at the time of execution of the script and on the other hand, &lt;code&gt;defer&lt;/code&gt; is waiting for the DOM elements to get loaded first and that's why it's selecting every button presented at the DOM.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If your script is dependent on the DOM, then never ever use the &lt;code&gt;async&lt;/code&gt; attribute, there's the possibility that the element you need get undefined and this is a potential source of bugs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#defer-maintain-the-order-of-js-files-async-doesnt-"&gt;
  &lt;/a&gt;
  Defer maintain the order of JS files Async doesn't -
&lt;/h3&gt;

&lt;p&gt;What does it mean though, take another example to understand it? Let's say you will have four scripts. Each script logs the number of that script. Now if we gonna use the &lt;code&gt;async&lt;/code&gt; attribute in the scripts, the order of executing scripts become unpredictable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;script src="one.js" async&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="two.js" async&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="three.js" async&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="four.js" async&amp;gt;&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The console output will be something like this...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N3Qi0LwF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628733846390/0AUL0x1t4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N3Qi0LwF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628733846390/0AUL0x1t4.png" alt="temp2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But what if we use the &lt;code&gt;defer&lt;/code&gt; attribute in every script?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;script src="one.js" defer&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="two.js" defer&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="three.js" defer&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="four.js" defer&amp;gt;&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is the output...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2fNXD-KZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628736741526/pdhVcVeJS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2fNXD-KZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628736741526/pdhVcVeJS.png" alt="temp3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now you can see clearly that &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;defer&lt;/code&gt; always maintain the order of the script so if you have scripts that depend on each other then always consider using &lt;code&gt;defer&lt;/code&gt; rather than &lt;code&gt;async&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Adding the &lt;code&gt;defer&lt;/code&gt; attribute will make sure DOM gets loaded first and then the scripts get executes in the given order.&lt;/li&gt;
&lt;li&gt;Adding the &lt;code&gt;async&lt;/code&gt; attribute will execute the script as soon as it gets loaded and this will not follow any order. So avoid using it if your script is dependent on each other or DOM.&lt;/li&gt;
&lt;li&gt;So practically, &lt;code&gt;defer&lt;/code&gt; is more useful than &lt;code&gt;async&lt;/code&gt;, and most of the time you would want &lt;code&gt;defer&lt;/code&gt; instead of &lt;code&gt;async&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;async&lt;/code&gt; is great when you want to load the script in the middle.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's all about &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; and script loading in JavaScript. If you enjoyed this article, please tell a friend about it or share it on your social media handles and make sure you comment below and share your thoughts about it. Thank you.🙏&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/jeetsdev"&gt;Follow me on Twitter&lt;/a&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>DEV Protip: automatically format with keyboard shortcuts!</title>
      <author>Siddharth</author>
      <pubDate>Sat, 14 Aug 2021 09:18:49 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/dev-pro-tip-automatically-format-with-keyboard-shortcuts-k73</link>
      <guid>https://dev.to/siddharthshyniben/dev-pro-tip-automatically-format-with-keyboard-shortcuts-k73</guid>
      <description>&lt;p&gt;I just realized that you can add some basic formatting using keyboard shortcuts in comments:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p0mVLSlV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3wwwbqqkfkol85ku079.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p0mVLSlV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3wwwbqqkfkol85ku079.gif" alt="cft"&gt;&lt;/a&gt;&lt;/p&gt;
Sorry for the random popup in the middle, just my computer reminding me to take a break

 

&lt;p&gt;I only found ⌥⌘i for italic, ⌥⌘b for bold, and ⌥⌘k for links. And they only seem to work on comments. Maybe the DEV team might know more?&lt;/p&gt;

</description>
      <category>dev</category>
      <category>meta</category>
    </item>
    <item>
      <title>Form validation with react-hook-form</title>
      <author>M. Akbar Nugroho</author>
      <pubDate>Sat, 14 Aug 2021 08:46:10 +0000</pubDate>
      <link>https://dev.to/thexdev/form-validation-with-react-hook-form-94e</link>
      <guid>https://dev.to/thexdev/form-validation-with-react-hook-form-94e</guid>
      <description>&lt;p&gt;Form is one of core functionalities that must exist in any application. This functionality allows us interact with user data (input) and process it into a valuable data or resource (output).&lt;/p&gt;

&lt;p&gt;Even this functionality is powerful, it has one biggest obstacle. Yes, it's how to validate the user input. And that's the reason why I make this article.&lt;/p&gt;

&lt;p&gt;In this article I will share to you how we can handle form validation specifically in React application using a package called &lt;code&gt;react-hook-form&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's start it out!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;React application (fresh or existing app)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE:&lt;br&gt;
I will use my previous project called &lt;code&gt;example-app&lt;/code&gt;. It has no features. Just a fresh React project installed using &lt;code&gt;CRA&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/thexdev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Th5Ke3v4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3zOPI-Wa--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/308956/19d49eb4-2172-4978-991a-10fd36088243.jpg" alt="thexdev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thexdev/deploy-react-on-netlify-23a1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Deploy React on Netlify&lt;/h2&gt;
      &lt;h3&gt;M. Akbar Nugroho ・ Aug 12 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-add-reacthookform"&gt;
  &lt;/a&gt;
  1. Add react-hook-form
&lt;/h3&gt;

&lt;p&gt;I use Git inside &lt;code&gt;example-app&lt;/code&gt;. So, before adding the package I will create a new branch called &lt;code&gt;feat-signin&lt;/code&gt; then merge that feature into branch main whenever I finish that feature.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Create and checkout to branch feat-signin&lt;/span&gt;
git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; feat-signin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, it's time to add the package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add react-hook-form
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-create-the-form"&gt;
  &lt;/a&gt;
  2. Create the form
&lt;/h3&gt;

&lt;p&gt;Maybe you have a clue about what form that I want to build. Yes, it's a sign-in form. I will validate the user email and password before they can actually sign-in.&lt;/p&gt;

&lt;p&gt;I will not using any styling tools. Just HTML to make it simple and focus :).&lt;/p&gt;

&lt;p&gt;First, I wanna add a page called Signin inside my project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Here's my current project&lt;/span&gt;
&lt;span class="nb"&gt;.&lt;/span&gt;
├── package.json
├── public
│   ├── favicon.ico
│   ├── index.html
│   ├── logo192.png
│   ├── logo512.png
│   ├── manifest.json
│   └── robots.txt
├── README.md
├── src
│   ├── App.css
│   ├── App.js
│   ├── App.test.js
│   ├── index.css
│   ├── index.js
│   ├── logo.svg
│   ├── pages
│   │   └── Signin.js
│   ├── reportWebVitals.js
│   └── setupTests.js
└── yarn.lock
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create the sign-in form and import it inside &lt;code&gt;App.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/Signin.js&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Signin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Email&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Password&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Signin&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Signin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Signin&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./pages/Signin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Signin&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-integrate-the-form-with-reacthookform"&gt;
  &lt;/a&gt;
  3. Integrate the form with react-hook-form
&lt;/h3&gt;

&lt;p&gt;Let's integrate the previous form so we can collect all user input inside that form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/Signin.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-hook-form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Signin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;formState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Email&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Password&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Signin&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Signin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the application, open the browser console and try to submit the form. You will see something like image below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NnAqk2P3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgzcx5jzac79dxaufmbn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NnAqk2P3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgzcx5jzac79dxaufmbn.png" alt="Submit form"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-add-input-validation"&gt;
  &lt;/a&gt;
  4. Add input validation
&lt;/h3&gt;

&lt;p&gt;If I submit the form with an empty password, I will not get any error message that indicate I forgot to input my password which is a bad UX.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--27YJcsI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cn8cys9uaxitt7kmk0xc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--27YJcsI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cn8cys9uaxitt7kmk0xc.png" alt="Forgot to input password"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To achieve that feature, we need to install two packages. &lt;code&gt;@hookform/resolvers/yup&lt;/code&gt; and &lt;code&gt;yup&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add @hookform/resolvers yup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;NOTE:&lt;br&gt;
yup is one of JavaScript schema Objects. It allows us to define a shape (structure) and validate a JavaScript object. You can also use other schema object like Joi, Zod, etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, let's add input validation into the form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/Signin.js&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;yupResolver&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@hookform/resolvers/yup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Signin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;formState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;resolver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yupResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if we submit the form with an empty password, we will not see any message in the browser console because the form is actually throw error messages and not submit the form.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CPyak7dJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jo7n7dx0pgt0jyviwf9j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CPyak7dJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jo7n7dx0pgt0jyviwf9j.png" alt="Form error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Look, even the cursor automatically focus to the input element that produce the error.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#5-displaying-the-error-messages"&gt;
  &lt;/a&gt;
  5. Displaying the error messages
&lt;/h3&gt;

&lt;p&gt;Now, the form can validates the input value, but it's not good enough. We need to display what's wrong with the form. So, the user can input the correct value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/Signin.js&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Email&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Password&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Submit the form and we can see the error messages.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ws-QMy4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xx1tgdm3ne4hajqsk7mr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ws-QMy4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xx1tgdm3ne4hajqsk7mr.png" alt="Form with error messages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hmm, I think the error messages not user friendly enough, right? So, let's improve it.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#6-customize-the-error-messages"&gt;
  &lt;/a&gt;
  6. Customize the error messages
&lt;/h3&gt;

&lt;p&gt;This is the reason why I choose Yup for the schema validation. We can easily customize the error messages like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/Signin.js&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Please provide a valid email address&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Please provide your email address&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Please provide your password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Submit the form again and you will see the error messages has changed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tAxcIV-p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xh7s6t08im8db47cbdo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tAxcIV-p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xh7s6t08im8db47cbdo.png" alt="Improved error messages"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h2&gt;

&lt;p&gt;Validating the form on the client side is not enough. We also need to validate the form on the server side because attacker can bypass our validation on the client side.&lt;/p&gt;

&lt;p&gt;The problem comes when we want to display the error messages from the server into the form. Fortunately, we can easily done this feature using react-hook-form.&lt;/p&gt;

&lt;p&gt;We just need to use &lt;code&gt;setError&lt;/code&gt; API to display the error messages that comes from the server into the form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/Signin.js&lt;/span&gt;

&lt;span class="c1"&gt;// Response from the server&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//   "message": "...",&lt;/span&gt;
&lt;span class="c1"&gt;//   "errors": {&lt;/span&gt;
&lt;span class="c1"&gt;//     email: ["The email must be a valid email address."]&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;formState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;resolver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yupResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Do sign-in process. Just example :)&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/** ... */&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;422&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;manual&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/thexdev"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3gHgh1Nj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520macbook%26emoji%3D%25F0%259F%2592%25BB%26slug%3Dthexdev%26button_colour%3DFFDD00%26font_colour%3D000000%26font_family%3DPoppins%26outline_colour%3D000000%26coffee_colour%3Dffffff"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
    </item>
    <item>
      <title>Create a Netflix clone from Scratch: JavaScript PHP + MySQL Day 19</title>
      <author>Christopher Glikpo</author>
      <pubDate>Sat, 14 Aug 2021 08:43:54 +0000</pubDate>
      <link>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-19-1n33</link>
      <guid>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-19-1n33</guid>
      <description>&lt;p&gt;Netflix provides streaming movies and TV shows to over 75 million subscribers across&lt;br&gt;
the globe. Customers can watch as many shows/ movies as they want as long as they are&lt;br&gt;
connected to the internet for a monthly subscription fee of about ten dollars. Netflix produces&lt;br&gt;
original content and also pays for the rights to stream feature films and shows.&lt;/p&gt;

&lt;p&gt;In this video,we will create the login functionalities&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/paMCmGfEJe4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like my work, please consider&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/cglikpo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c23TxQOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm11knj7d8zwcvo150q2.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;br&gt;
so that I can bring more projects, more articles for you&lt;/p&gt;

&lt;p&gt;If you want to learn more about Web Development, feel free to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>There's always time for cheese</title>
      <author>Jordan Brennan</author>
      <pubDate>Sat, 14 Aug 2021 08:36:53 +0000</pubDate>
      <link>https://dev.to/jfbrennan/there-s-always-time-for-cheese-1p98</link>
      <guid>https://dev.to/jfbrennan/there-s-always-time-for-cheese-1p98</guid>
      <description>&lt;p&gt;New software features are usually designed, built, and shipped with limited resources, especially at startups, but that's not an excuse to skimp on basic features because &lt;em&gt;there's always time for cheese&lt;/em&gt;! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-analogy"&gt;
  &lt;/a&gt;
  The analogy
&lt;/h2&gt;

&lt;p&gt;When making a sandwich (a big software feature), the bulk of the time is actually spent gathering ingredients, getting a knife and plate, preparing the ingredients, and cleaning up afterwards. This is synonymous to discussing requirements, branching, getting a fresh env running, writing tests, and the code review. None of these activities are the sandwich and your product gains nothing from it. The &lt;em&gt;assembling&lt;/em&gt; stage of making a sandwich is the real work, and, compared to the whole process, the time it takes to add cheese costs almost nothing and yet makes the sandwich so much more delicious.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-cost-of-skipping-cheese"&gt;
  &lt;/a&gt;
  The cost of skipping cheese
&lt;/h2&gt;

&lt;p&gt;What happens when we don't add cheese? Well, we ship a new sandwich that is known to be lacking. The inevitable request for cheese will come and now the cost of adding cheese is much greater than what it would have been (e.g. go get cheese, disassemble the sandwich, possibly rework the layers, add a slice of cheese, and clean up again vs. add the cheese when you were adding meat). &lt;/p&gt;

&lt;p&gt;And that's just the engineering cost. Depending on a customer's need or market demand, delaying cheese can often cost much more than that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-skip-the-cheese"&gt;
  &lt;/a&gt;
  Why do we skip the cheese?
&lt;/h2&gt;

&lt;p&gt;I have found the reason for skipping cheese is most often a lack of familiarity with how cheap a piece of work really is.  Compared to stakeholders, developers have a much better perspective on what additional work is going to cost, and so they need to help stakeholders understand when something is cheese. &lt;strong&gt;Cheese is a valuable addition that easily fits into the work that's already planned&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A misunderstanding of scope creep is the other reason we skip cheese. Cheese is not scope creep, even if it comes into the discussion later. Drifting from a sandwich to a burger or adding a cookie on the side is scope creep. The easiest way to tell is if the addition requires starting up a new division of work (e.g. get other ingredients, set up more tools, follow a different process). &lt;/p&gt;

&lt;p&gt;Wise managers can spot cheese and they make time for it because they understand the cost-benefit favors it, even if they're short on time.&lt;/p&gt;

&lt;p&gt;Next time a big feature request comes to you, &lt;strong&gt;make time for cheese&lt;/strong&gt; 🧀&lt;/p&gt;

</description>
      <category>management</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Support for password authentication was removed on August 13, 2021. - Fixed</title>
      <author>Arjun Codes</author>
      <pubDate>Sat, 14 Aug 2021 08:09:11 +0000</pubDate>
      <link>https://dev.to/arjuncodes/support-for-password-authentication-was-removed-on-august-13-2021-fixed-k1e</link>
      <guid>https://dev.to/arjuncodes/support-for-password-authentication-was-removed-on-august-13-2021-fixed-k1e</guid>
      <description>&lt;p&gt;Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you are getting this error go through this video :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ytSoabxSQ6E"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>arjuncodes</category>
      <category>passwordauthentication</category>
    </item>
    <item>
      <title>Learning Python- Intermediate course: Day 8, Summary of the week and nested Modules</title>
      <author>Aatmaj</author>
      <pubDate>Sat, 14 Aug 2021 08:05:49 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-8-summary-of-the-week-and-nested-modules-j3d</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-8-summary-of-the-week-and-nested-modules-j3d</guid>
      <description>&lt;p&gt;Hello friends, today we will summarize the learning of the week.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary-of-the-week"&gt;
  &lt;/a&gt;
  Summary of the week
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aatmaj/learning-python-intermediate-course-day-5-exploring-the-math-module-5alo"&gt;Day 5&lt;/a&gt; We learnt that modules are a way of packaging our code which enhances flexibility and code reusability. Modules are basically python files which contain various functions. One example of which is the built in module math. The math module in Python is a very useful module. We can perform various mathematical functions using the module.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aatmaj/learning-python-intermediate-course-day-6-math-exercises-12ge"&gt;Day 6&lt;/a&gt; In this part we solved many questions related to the math module for example Armstrong numbers, use of recursion in solving power operations, etc.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aatmaj/learning-python-intermediate-course-day-7-making-python-modules-kmf"&gt;Day 7&lt;/a&gt; We saw how to make our own Python modules and how to use them in our code. We can make Python module by saving a Python file (with the &lt;code&gt;.py&lt;/code&gt; extension in the Lib folder of Python source. Then we can use the modules by using the import statement. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#using-modules-in-modules"&gt;
  &lt;/a&gt;
  Using modules in modules
&lt;/h3&gt;

&lt;p&gt;We can use a module in another module.&lt;br&gt;
 Here is a sample question-&lt;/p&gt;

&lt;p&gt;Create a module named ModuleC to calcuate the combination of two numbers. This module must import ModuleB which contains the factorial function.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ModuleB
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;ModuleC
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ModuleB&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;comb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ModuleB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModuleB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ModuleB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;main
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ModuleC&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModuleC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;10.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;What will happen if we try to call the function factorial from he main? We cannot do so as the main does not directly import ModuleB. Hence, we cannot use the factorial defined in B as ModuleC.factorial() or ModuleB.factorial()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ModuleC&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModuleC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModuleC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;10.0
Traceback (most recent call last):
  File "main.py", line 3, in &amp;lt;module&amp;gt;
    print(ModuleC.factorial(4))
AttributeError: 'module' object has no attribute 'factorial'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ModuleC&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModuleC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;moduleB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;10.0
Traceback (most recent call last):
  File "main.py", line 4, in &amp;lt;module&amp;gt;
    print(moduleB.factorial(4))
NameError: name 'moduleB' is not defined

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the above code to run, we need to import the module B.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ModuleC&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ModuleB&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModuleC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModuleB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;10.0
24
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;ul&gt;
&lt;li&gt;We all know that neither me nor you have ever seen each other. Learning in remote environment is a difficult, and teaching is perhaps even more difficult. Teaching is never a one-way process.
I request everyone to participate actively in this course, either through comments below or forking on Github &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python"&gt;Learning-Python repo&lt;/a&gt;
😃 😃 😃&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;For those who have not yet made account in Dev.to, you can have a free easy sign-up using your mail or GitHub accounts. I would suggest the budding developers to create your GitHub free account right away. You would require to register sooner or later anyways&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥&lt;br&gt;
Next day will begin from Tuesday📅&lt;/p&gt;

</description>
      <category>python</category>
      <category>learningpython</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Support for password authentication was removed </title>
      <author>Arjun Gautam</author>
      <pubDate>Sat, 14 Aug 2021 08:03:45 +0000</pubDate>
      <link>https://dev.to/arjungautam/support-for-password-authentication-was-removed-518o</link>
      <guid>https://dev.to/arjungautam/support-for-password-authentication-was-removed-518o</guid>
      <description>&lt;p&gt;Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.&lt;br&gt;
&lt;strong&gt;If you are getting this error go through this :&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ytSoabxSQ6E"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>arjuncodes</category>
      <category>passwordauthentication</category>
    </item>
    <item>
      <title>JS Polyfills asked in Interviews</title>
      <author>Abhishek Raj</author>
      <pubDate>Sat, 14 Aug 2021 07:44:20 +0000</pubDate>
      <link>https://dev.to/abhishekraj272/js-polyfills-asked-in-interviews-19b3</link>
      <guid>https://dev.to/abhishekraj272/js-polyfills-asked-in-interviews-19b3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As Javascript community keeps adding new methods in Javascript, so all browsers doesn't support new JS methods.  &lt;/p&gt;

&lt;p&gt;To make your JS code run on every browser, you need to add it on your own or you can use &lt;a href="https://sotly.co/IXY6zCbd"&gt;Babel&lt;/a&gt;, &lt;a href="https://sotly.co/40bmc6Bp"&gt;CoreJS&lt;/a&gt;. Sometimes companies ask in &lt;strong&gt;interview&lt;/strong&gt; for Polyfills to know your understanding.  &lt;/p&gt;

&lt;p&gt;In this article, I will list out some Polyfills asked by companies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-array-flat"&gt;
  &lt;/a&gt;
  1. Array Flat
&lt;/h2&gt;

&lt;p&gt;This method is used to flat a nested array.&lt;/p&gt;

&lt;p&gt;In the below example, we have used &lt;a href="https://sotly.co/tSFkt02X"&gt;recursion&lt;/a&gt; to solve this problem. We have created 2 cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A base case: If depth is reached then push arr in output and return it.&lt;/li&gt;
&lt;li&gt;A recursion case: Loop over array and check if its an Array or not. If its an array flat it, else push the number in output.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag__replit"&gt;
  &lt;iframe height="550px" src="https://repl.it/@abhishekraj2721/Array-Flat-JS?lite=true"&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#2-array-filter"&gt;
  &lt;/a&gt;
  2. Array Filter
&lt;/h2&gt;

&lt;p&gt;This is a Higher Order Function which takes another function and filters the array on the basis of the function.&lt;/p&gt;

&lt;p&gt;In the below example, we have created a higher order function, which takes another function and calls on each element of the array. If it returns &lt;em&gt;true&lt;/em&gt; then that element is inserted into result.&lt;/p&gt;


&lt;div class="ltag__replit"&gt;
  &lt;iframe height="550px" src="https://repl.it/@abhishekraj2721/Array-Filter-JS?lite=true"&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#3-array-reduce"&gt;
  &lt;/a&gt;
  3. Array Reduce
&lt;/h2&gt;

&lt;p&gt;This is a Higher Order Function which takes another function and reduces the array to single value/object and returns it.&lt;/p&gt;

&lt;p&gt;In the below example, we have created a higher order function, which takes another function and calls on each element of the array. It mutates the result returned by the callback function.&lt;/p&gt;


&lt;div class="ltag__replit"&gt;
  &lt;iframe height="550px" src="https://repl.it/@abhishekraj2721/Array-Reduce-JS?lite=true"&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#4-function-bind"&gt;
  &lt;/a&gt;
  4. Function Bind
&lt;/h2&gt;

&lt;p&gt;The bind method is used to pass an execution context to the function.&lt;/p&gt;

&lt;p&gt;In the below example, the custom Bind function takes the context and uses apply method to bind the function with the given context.&lt;/p&gt;


&lt;div class="ltag__replit"&gt;
  &lt;iframe height="550px" src="https://repl.it/@abhishekraj2721/Func-Bind-JS?lite=true"&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h5&gt;
  &lt;a href="#for-more-awesome-polyfills-asked-in-interviews-check-out-jsvault"&gt;
  &lt;/a&gt;
  For more Awesome polyfills asked in interviews, check out &lt;a href="https://sotly.co/2_Dz2uUf"&gt;JSVault&lt;/a&gt;
&lt;/h5&gt;

&lt;p&gt;Connect Me @ &lt;a href="https://www.linkedin.com/in/abhishekraj272/"&gt;Linkedin&lt;/a&gt;, &lt;a href="https://github.com/abhishekraj272"&gt;Github&lt;/a&gt;, &lt;a href="https://twitter.com/abhishekraj272"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.youtube.com/channel/UCvHn2T8DSJzEWzYDdK3Dt8A"&gt;Youtube&lt;/a&gt; 😇&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: I have written all the methods as pure functions, as I have only wanted to show the code. We can also use Prototypal Inheritance.  &lt;/p&gt;

&lt;p&gt;All the URLs in this post are powered by &lt;a href="https://app.sotly.co/"&gt;Sotly.co&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>career</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Uh Oh! I Cloned without Forking!</title>
      <author>Upamanyu Das</author>
      <pubDate>Sat, 14 Aug 2021 07:36:57 +0000</pubDate>
      <link>https://dev.to/tintindas/uh-oh-i-cloned-without-forking-2eaj</link>
      <guid>https://dev.to/tintindas/uh-oh-i-cloned-without-forking-2eaj</guid>
      <description>&lt;p&gt;Last week I cloned a repo without forking it first and only realised my mistake after I had already made some commits to my local copy.&lt;/p&gt;

&lt;p&gt;Rookie mistake!  &lt;/p&gt;

&lt;p&gt;But there's an easy fix.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1-remove-the-existing-remote-from-your-local-repo"&gt;
  &lt;/a&gt;
  Step 1: Remove the existing remote from your local repo.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote remove origin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can get a list of configured remotes and their URLs by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2-fork-the-project-and-copy-the-forks-url"&gt;
  &lt;/a&gt;
  Step 2: Fork the project and copy the fork's URL
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UfVEcwve--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/is9brfbn1iuq54lo5rg5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UfVEcwve--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/is9brfbn1iuq54lo5rg5.png" alt="Copy fork's URL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-3-add-the-url-to-your-local-copy"&gt;
  &lt;/a&gt;
  Step 3: Add the URL to your local copy.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote add origin [copied URL]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you're done 😀 ! You can now push your code and it will go to your fork.&lt;/p&gt;

&lt;p&gt;Hope this was helpful!&lt;/p&gt;




&lt;p&gt;Hi, I am Upamanyu! &lt;/p&gt;

&lt;p&gt;If you liked this post maybe you'll like my tweets too. Follow me &lt;a href="https://twitter.com/intent/user?screen_name=tintin_das"&gt;@tintin_das 🐦&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>fork</category>
      <category>beginners</category>
    </item>
    <item>
      <title>NextJS Auth With Prisma And Refresh Tokens (JWT)</title>
      <author>antonm7</author>
      <pubDate>Sat, 14 Aug 2021 07:28:55 +0000</pubDate>
      <link>https://dev.to/antonm7/nextjs-auth-with-prisma-and-refresh-tokens-jwt-5he1</link>
      <guid>https://dev.to/antonm7/nextjs-auth-with-prisma-and-refresh-tokens-jwt-5he1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  introduction
&lt;/h2&gt;

&lt;p&gt;If you are like me and want to handle your website auth on your own you came to the right place.&lt;br&gt;
Every time I want to use authentication in my website I get headache for trying to find the most safe and easy way to handle it.&lt;br&gt;
I love to handle it myself, thats why I dont use things like firebase/auth0.&lt;br&gt;
Recently I have found a way to create authentication with 2 tokens.&lt;br&gt;
It makes the app safe and its pretty easy to handle..&lt;br&gt;
In our case there is 2 jwt tokens, access token and refresh token.&lt;br&gt;
The combination between them is what makes our app safe and protective against XSS/CSRF attacks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-what"&gt;
  &lt;/a&gt;
  What Is What?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Access Token&lt;/strong&gt; &lt;br&gt;
When a user logges in, the authorization server issues an access token, which is an artifact that client applications can use to make secure calls to an API server.&lt;br&gt;
It will be valid for short amount to make it secure as we can, when it expires then something called silent refresh happens.&lt;br&gt;
The silent refresh is an api call for the server to get new access token right before it expires in the memory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Refresh Token&lt;/strong&gt; &lt;br&gt;
As mentioned, access token valid for short amount of time.&lt;br&gt;
So for complete the cycle of renewing the access token we use the refresh token to get new access token.&lt;br&gt;
The refresh token generated on the server and saved in a HttpOnly cookie.&lt;br&gt;
Because client side Javascript can't read or steal an HttpOnly cookie, this is a little better at mitigating XSS than persisting it as a normal cookie or in localstorage.&lt;br&gt;
This is safe from CSRF attacks, because even though a form submit attack can make a /refresh_token API call, the attacker cannot get the new JWT token value that is returned.&lt;br&gt;
Lets look at the /refresh_token apieeeeeeeeeeeeeeeeeeeeeeeeeeeee&lt;/p&gt;

&lt;pre&gt;
import { PrismaClient } from '@prisma/client'
import { verify } from 'jsonwebtoken'
import {createAccessToken, sendRefreshToken, createRefreshToken} from '../../functions/auth'
import cookie from 'cookie'

const prisma = new PrismaClient()

export default async function refresh_token(req, res) {
    if (req.method === 'POST') {
        if(!req.headers.cookie) return res.send({ok: false,accessToken: ''})
        const getToken = cookie.parse(req.headers.cookie)
        const token = getToken.refreshToken

        if(!token) return res.send({ok: false,accessToken: ''})
        let payload = null

        try {
            payload = verify(token, process.env.REFRESH_TOKEN_SECRET)
            
            const user = await prisma.user.findUnique({
                where: {
                    id: payload.userId
                },
                select: {
                    id: true,
                    firstName: true,
                    secondName: true,
                    email: true
                }
            })

            if (!user) return res.send({ok: false,accessToken: ''})

            sendRefreshToken(res, createRefreshToken(user));
            const accessToken = createAccessToken(user)

            return res.send({ ok: true, accessToken,user });
        } catch (e) {
            console.log(e)
            return res.send({ok: false,accessToken: ''})
        }

    } else {
      res.status(500).send()
    }
  }
&lt;/pre&gt;

&lt;p&gt;As you see above we get the request with cookie in the header,  thats our refresh token cookie. We validate it with JWT Validate function.&lt;br&gt;
We get the user id from the payload because we generated the jwt with the user id inside the payload.Then we fetch the user data  from the database (using prisma in our case).&lt;/p&gt;

&lt;p&gt;As you can see there is sendRefreshToken function....why?&lt;br&gt;
When we sending back refresh token it renewing the current one means that the expire date is renewing aswell and extending.Thats simply means that as long as user uses our website he will be authorized.&lt;/p&gt;

&lt;p&gt;Then we send to the client the relevant data - The access token and the basic user data (to access the main user data more conveniently).&lt;br&gt;
How do we create the refresh token and access token?&lt;/p&gt;

&lt;pre&gt;
export const createAccessToken = (user) =&amp;gt; {
    return sign({ userId: user.id }, process.env.ACCESS_TOKEN_SECRET, {
      expiresIn: '15m'
    });
  };

  export const createRefreshToken = (user) =&amp;gt; {
    return sign(
        { userId: user.id },process.env.REFRESH_TOKEN_SECRET,{
            expiresIn: "7d"
        }
    );
};

export const sendRefreshToken = (res,token) =&amp;gt; {
    res.setHeader('Set-Cookie',cookie.serialize('refreshToken',token, {
        httpOnly: true,
        maxAge: 60 * 60 * 24 * 7,
        path: '/'
    }))
};
&lt;/pre&gt;

&lt;p&gt;As you can see the access token expires after 15m and the refresh token is expires after 7 days. The refresh token gets renewd every time the user logges into the website, and the access token renewed with silent refresh.&lt;br&gt;
How do we code the silent refresh?&lt;/p&gt;

&lt;pre&gt;
//_app.js
 useEffect(() =&amp;gt; {
    //initial funciton
    refreshToken().then(data =&amp;gt; {
      if(data.ok) {
        store.setAccessToken(data.accessToken)
        store.setUser(data.user)
      }
      setLoading(false)
    })

    //starts silent refreshes countdown
    setInterval(() =&amp;gt; {
      refreshToken().then(data =&amp;gt; {
        if(data.ok) {
          store.setAccessToken(data.accessToken)
          store.setUser(data.user)
        }
      })
    },600000)
  },[])
&lt;/pre&gt;

&lt;p&gt;On website load it runs the initial refresh token function  (api call for /refresh_token, we send the refresh token as bearer token in the header request), and then the countdown begins.&lt;br&gt;
Every 10 minutes it makes the same call to get the access token from the server and saves it in the client memory.&lt;br&gt;
That way we get new access token and save it in the memory right before the old token expires.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#server-middleware"&gt;
  &lt;/a&gt;
  Server Middleware
&lt;/h2&gt;

&lt;pre&gt;
import { verify } from 'jsonwebtoken'

const checkAuth = (handler) =&amp;gt; {
    return async (req, res) =&amp;gt; {
        try {
            const authorization = req.headers["authorization"]
            if (!authorization) throw new Error("not authenticated")
            const token = authorization.split(" ")[1]
            verify(token, process.env.ACCESS_TOKEN_SECRET);
            return handler(req, res)
        } catch (e) {
            console.log(e)
            res.status(401).send()
        }
    }
}

export default checkAuth
&lt;/pre&gt;

&lt;p&gt;In the code above, we have the server middleware. Before accessing the api route we are validating the access token with the verify function.&lt;br&gt;
How do we use it in the route?&lt;/p&gt;

&lt;pre&gt;
import checkAuth from './middleware/checkAuthServer'

const protectedRoute = async (req, res) =&amp;gt; {
    if(req.method === 'GET') {
        console.log('got it')
        //secret data
        res.send('Hey, keep it in secret!')
    }
}

export default checkAuth(protectedRoute)
&lt;/pre&gt;  

&lt;p&gt;Now, when the user wants to access the protected route, he needs to pass access token that gets validated in our middleware.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#client-middleware"&gt;
  &lt;/a&gt;
  Client Middleware
&lt;/h2&gt;

&lt;p&gt;In some cases on the client, there will be 'protected' pages that only authenticated users can access. In that case we would want to use client middleware on the page.&lt;/p&gt;

&lt;pre&gt;
import { useStore } from "../store";
import {useRouter} from 'next/router'

const withAuth = Component =&amp;gt; {
    const Auth = (props) =&amp;gt; {
        const store = useStore()
        const router = useRouter()
        if(store.accessToken !== null) {
            return (
                
              );
        } else {
            router.replace("/");
            return null;
        }
    };
    return Auth;
  };

  export default withAuth;
&lt;/pre&gt;

&lt;p&gt;We are checking if there is access token in the memory, if it's valid then we pass the page component.&lt;br&gt;
Lets look in our protected page&lt;/p&gt;

&lt;pre&gt;
import { useStore } from '../store'
import {useEffect, useState} from 'react'
import useSWR from 'swr'
//the middleware
import checkAuthClient from '../functions/checkAuthClient'
import axios from 'axios'

function Protected() {
    const store = useStore()
    const [secret, setSecret] = useState(null)
    const [isError, setError] = useState(null)
    const [loading, setLoading] = useState(true)
    
    const fetcher = async () =&amp;gt; {
        return await axios.get('/api/protectedRoute', {
            headers: {
                authorization: `Bearer ${store.accessToken}`
            }
        })
    }

    const { data, error } = useSWR('/api/', fetcher)
    
    useEffect(() =&amp;gt; {
        if(data) setSecret(data.data)
        if (error) setError(error)
        setLoading(false)
    },[data,error])

    if(loading) {
        return (Loading...)
    } else {
        if(isError) {
            return (
                YO! YOU ARE NOT AUTHENTICATED,GET AWAY FROM HERE!!!
            )
        } else {
            return (
                
                    Welcome to protected Page, {secret}
                
            )
        }
    }
}

export default checkAuthClient(Protected)
&lt;/pre&gt;

&lt;p&gt;As you see there is double check,the first check is for the client page, and the second check is on the server (sending access token in the our request).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-wrap-the-registration-process"&gt;
  &lt;/a&gt;
  Lets Wrap The Registration Process
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dreqejgn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxh3sqyked1lvvkzt8jx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dreqejgn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxh3sqyked1lvvkzt8jx.png" alt="Sign Up Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you see in the diagram above we send the user registration data to to server.&lt;br&gt;
It saves the data in the database and generating 2 tokens.&lt;br&gt;
Refresh and access token, both of them gets back to the user,a ccess token as response body and refresh token as HttpOnly cookie.&lt;br&gt;
On the client the access token (and the user data) get saved in the memory.&lt;/p&gt;

&lt;p&gt;The login processs is the same, we fetch the user from the database (after all the validation of curse) and we send both of the tokens to the client.&lt;/p&gt;

&lt;p&gt;On page load we run initial function that tries to get access token from the server. The server gets the HttpOnly cookie, if there isn't that means the user havent even logged in and the server will return nothing back. If the server gets the refresh token and validates it, that means the user has logged in and want to get his access token.&lt;/p&gt;

&lt;p&gt;In the following diagram you can see the process when user tries to access protected page on the client.&lt;br&gt;
If there is access token in the memory we send it as request header to the server that validates it,if there isnt that means user tries to access without getting authorized. For example some random client tries to access /url/profile, if he isn't authorized the website will kick him from the url.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pxNviSMN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tq97mhxwt9f9m96iz36l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pxNviSMN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tq97mhxwt9f9m96iz36l.png" alt="Check token in memory"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Authentication and authorizing user is one of the most popular things and you likely to face in every app you make.&lt;br&gt;
Thats why there is so many services thats provide you authentication helpers like firebase/next-auth/auth0 ext.&lt;br&gt;
I like to create it myself, it makes my life easier because it can be customized as I want to.&lt;/p&gt;

&lt;p&gt;If you have any questions feel free to ask.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#some-useful-links"&gt;
  &lt;/a&gt;
  Some useful links
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/antonm7/nextjs-prisma-auth"&gt;Github Repo&lt;/a&gt;&lt;br&gt;
&lt;a href="https://hasura.io/blog/best-practices-of-using-jwt-with-graphql/"&gt;Hasura Article&lt;/a&gt;&lt;br&gt;
&lt;a href="https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/"&gt;Auth0 Article&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>programming</category>
      <category>react</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
