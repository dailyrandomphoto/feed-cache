<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Skills Required to Become Ethical Hacker</title>
      <author>Yhbiuh</author>
      <pubDate>Sun, 08 Aug 2021 07:49:02 +0000</pubDate>
      <link>https://dev.to/yhbiuh/skills-required-to-become-ethical-hacker-39el</link>
      <guid>https://dev.to/yhbiuh/skills-required-to-become-ethical-hacker-39el</guid>
      <description>&lt;h1&gt;Skills Required to Become a Ethical Hacker&lt;/h1&gt;
&lt;p&gt;Ethical Hacking¬†is compromising computer systems for assessing security and acting in good faith by informing the vulnerable party. Ethical hacking is a key skill for many job roles related to securing the online assets of an organization. The professionals working on these job roles maintain the organization‚Äôs computers, servers, and other components of its infrastructure in working conditions preventing unauthorized access through non-physical channels.¬†&lt;/p&gt;
&lt;p&gt;¬†&lt;/p&gt;
&lt;p&gt;People believe that ‚Äúhacking‚Äù means to hack any website within a minute. This concept comes from watching movies, so they do not even know the original basic concept of what it means to hack or how to do it.¬†&lt;strong&gt;To crack passwords or to steal data?&lt;/strong&gt;¬†No,¬†&lt;strong&gt;Ethical Hacking&lt;/strong&gt;¬†is much more than that. Ethical hacking is to scan vulnerabilities and to find potential threats on a computer or network. An ethical hacker finds the weak points or loopholes in a computer, web applications, or network and reports them to the organization. So, let‚Äôs explore the skills required to become an ethical hacker.¬†&lt;/p&gt;

&lt;p&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/skills-required-to-become-a-ethical-hacker/"&gt;Skill Required To Become Ethical Hacker&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
    </item>
    <item>
      <title>10 Tips For Clean DEV Articles!</title>
      <author>InHuOfficial</author>
      <pubDate>Sun, 08 Aug 2021 07:37:52 +0000</pubDate>
      <link>https://dev.to/inhuofficial/10-tips-for-clean-dev-articles-59id</link>
      <guid>https://dev.to/inhuofficial/10-tips-for-clean-dev-articles-59id</guid>
      <description>&lt;p&gt;So this is a bit of fun on a Sunday in response to &lt;a href="https://dev.to/cleancodestudio/10-tips-for-clean-code-4nm6"&gt;this article on clean code&lt;/a&gt; from &lt;a class="mentioned-user" href="https://dev.to/cleancodestudio"&gt;@cleancodestudio&lt;/a&gt;
 üòã.&lt;/p&gt;

&lt;p&gt;There is no hate or malice here, I am just mischievous (as most of you know) and the article had loads of &lt;strong&gt;accessibility issues&lt;/strong&gt; caused by embedding a load of tweets...so you know I am going to have to say something being the "angry accessibility guy"!&lt;/p&gt;

&lt;p&gt;Anyway, it is silly with an important message, please treat it as such!&lt;/p&gt;

&lt;p&gt;Here is my list of 10 tips for clean articles on DEV! (I would suggest going to read the article first or read them at the same time, otherwise some of these points may not make sense!)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-tips"&gt;
  &lt;/a&gt;
  The Tips
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Don't repeat the article title immediately within the article body, we know what we are reading and it just adds noise&lt;/li&gt;
&lt;li&gt;Don't add alt descriptions to decorative images (the down arrows) used as spacers, instead do &lt;code&gt;![](imageURL)&lt;/code&gt; and leave the &lt;code&gt;alt&lt;/code&gt; attribute empty - they add nothing for people who use a screen reader and get annoying the 3rd, 4th, 5th etc. time.&lt;/li&gt;
&lt;li&gt;Better yet just don't use spacer images, if you structure your article correctly with headings it will be easy to read.&lt;/li&gt;
&lt;li&gt;Including more than one or two tweets from the same account means a lot of repeated information for people who use a screen reader. This makes your article hard to read and tiring, instead copy the content of the tweets into your post.&lt;/li&gt;
&lt;li&gt;Use headings for each point or, as I am doing, an ordered list to make navigating the items easier.&lt;/li&gt;
&lt;li&gt;Put all 10 tips within the article itself (which you can do if you do things properly, there is a reason DEV stops you adding more than 7 tweet embeds!). Having to hunt through the comments for the remaining tips is annoying (due in part to how the DEV comment system works in ordering things).&lt;/li&gt;
&lt;li&gt;On a similar point, comments can change order in the DEV comments section so don't use it for anything that that relies on the order of the comments to make sense.&lt;/li&gt;
&lt;li&gt;Don't use 10 fire emojis in a row in a comment, for a person who uses a screen reader the effect is quite annoying, surely 3 or 4 would get the point across? üî•üî•üî•üî• Don't try and "outfire" people without thinking of how that affects others!&lt;/li&gt;
&lt;li&gt;There are no word limit counts on DEV, you can use full sentences to explain things, rather than having to worry about every character. Enjoy this new found power to express yourself properly and make things flow! &lt;/li&gt;
&lt;li&gt;You are responsible for the quality of your posts, not DEV, not your manager, &lt;strong&gt;you&lt;/strong&gt;. So use the extra tools at your disposal to turn tweet threads into high quality posts.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The End
&lt;/h2&gt;

&lt;p&gt;Obviously this may all be a bit of fun but the &lt;strong&gt;points are all valid and important&lt;/strong&gt; (I might have had to stretch a little on the last two, maybe 8 valid tips and a coupler of filler tips - but that wouldn't make a good title now would it? ü§£).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advice for everyone:&lt;/strong&gt; put some effort in to formatting your articles properly, it makes them easier to read and also has the added bonus of including everyone in the conversation!&lt;/p&gt;

&lt;p&gt;And yes, for those of you who read the original article, I did even copy the cover image style and design, if you are going to copy someone's work &lt;strong&gt;do it right&lt;/strong&gt;! ü§£&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-tip-11"&gt;
  &lt;/a&gt;
  Bonus Tip 11
&lt;/h2&gt;

&lt;p&gt;Always have a bonus tip, people seem to love that!&lt;/p&gt;

&lt;p&gt;My bonus tip is to follow @&lt;a href="https://twitter.com/cleancodestudio"&gt;cleancodestudio on Twitter&lt;/a&gt;, I just have as they put great tips out!&lt;/p&gt;

&lt;p&gt;Oh and I have few followers (although I only started using Twitter again this week), so you could always follow @&lt;a href="https://twitter.com/InHuOfficial"&gt;InHuOfficial&lt;/a&gt; if you fancy it, my silliness will continue there.&lt;/p&gt;

&lt;p&gt;Hope this article made you smile and I hope you are having a great weekend!&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>writing</category>
    </item>
    <item>
      <title>What not do when you get an idea for a project</title>
      <author>Pablo Tejada</author>
      <pubDate>Sun, 08 Aug 2021 07:09:22 +0000</pubDate>
      <link>https://dev.to/ptejada/what-not-do-when-you-get-an-idea-for-a-project-4i2n</link>
      <guid>https://dev.to/ptejada/what-not-do-when-you-get-an-idea-for-a-project-4i2n</guid>
      <description>&lt;p&gt;Great ideas come in the moments you least expect them. I am sure every developer has had one of those moment of enlightenment. The first few steps after getting the idea can be crucial for the success or at least seeing the project even progress.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2bM3aW9C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxy80a1opn0gt7qq189j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2bM3aW9C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxy80a1opn0gt7qq189j.png" alt="undraw_researching_22gp"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The first thing that might come to mind after coming up with the next big idea is to research whether it has been done before and how well it has been done. You could be wasting your time if the idea you have envisioned has already been done the exact same way you had picture it. It is completely ok to still pursue your idea even it has been done before. At the end of the day what matters most is the execution.&lt;/p&gt;

&lt;p&gt;When I come up with an idea the first thing I would do is look for a good available domain. This is before I even do anything else to vet weather it is a good idea to pursue. My top priority was always to get a good or clever &lt;code&gt;.com&lt;/code&gt; domain. It had to be &lt;code&gt;.com&lt;/code&gt; and it would have to make some sense when you read it. Mind you that this this was before we had all this TLDs we have today. Looking back now I realized how useless this way of thinking was. The visibility of your projects in the web goes beyond having a good domain name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TlzD2PVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vf6s4pr4gb8amb73w091.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TlzD2PVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vf6s4pr4gb8amb73w091.jpg" alt="question-mark-1495858_1280"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Over the years I must have accumulated dozens and dozens of domains. I never accomplished anything for most of these domains. They were lucky to even get a "coming soon" page. After some light research I would come to the conclusion that the project was not worth the time, weather there wasn't a real need or it had already been done even better than what I had envision it. I did manage to sell some of the domains for a profit but for most I just let the registration expire. There are a few domains which I really like and I will probably keep holding on to them. One day I will give them meaning.&lt;/p&gt;

&lt;p&gt;I got to finish very few of the projects I have wanted to do. There are some projects you do for yourself and there are others you want be something more than just your hobby. It can be discouraging when those projects you had high hopes for just flop. They just don't attract the interest of the users you want.&lt;/p&gt;

&lt;p&gt;Don't do what I did for years. Don't get useless domain names for your projects that are still ideas or are in their infancy. Nowadays your projects can live anywhere in the web and people don't need to remember their unique domain names. In terms of visibility all that matters is how you spread the word and drive attention to your project. A domain name can always come later.&lt;/p&gt;

&lt;p&gt;Let me know if you can relate in anyway in the comments. My next post will probably be how one of my domains is finally getting a "coming soon" page after 8 years of ownership.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tips</category>
    </item>
    <item>
      <title>Why I'm not a VC (yet)</title>
      <author>swyx</author>
      <pubDate>Sun, 08 Aug 2021 06:26:46 +0000</pubDate>
      <link>https://dev.to/swyx/why-i-m-not-a-vc-yet-2md8</link>
      <guid>https://dev.to/swyx/why-i-m-not-a-vc-yet-2md8</guid>
      <description>&lt;p&gt;Imagine a job where you make $600k a year investing other people's money (no downside) into amazing founders, try to be helpful, and make as much as $20 million over 10 years. Pretty sweet right? &lt;/p&gt;

&lt;p&gt;Those numbers aren't hypothetical; that's exactly &lt;a href="https://podcasts.apple.com/us/podcast/206-with-brianne-kimmel-how-venture-capitalists-make-money/id1469759170?i=1000530964156"&gt;what Brianne Kimmel does with her WorkLife Fund&lt;/a&gt; (to be fair she has top tier results, with &amp;gt;200x returns in 2 years on Hopin and Pipe alone). It's a pretty sweet life and is governed by the Matthew effect inherent in the &lt;em&gt;capital&lt;/em&gt; part of &lt;em&gt;venture capital&lt;/em&gt;: initial success leads to better dealflow leads to more funds and more success.&lt;/p&gt;

&lt;p&gt;I accidentally have a decent profile for a VC career. I have an economics degree from Wharton and spent my first 6 years working in every part of finance from central banking to investment banking to hedge funds (&lt;a href="https://www.freecodecamp.org/news/shawn-wang-podcast-interview/"&gt;long story here&lt;/a&gt;). I also code and am well recognized in (mostly JS) devtools circles. I was &lt;a href="https://www.swyx.io/farewell-netlify/"&gt;with Netlify&lt;/a&gt; (a16z backed) from Series B to C and am now at Temporal (Sequoia backed). I have a better-than-average network across my blog, newsletter, Twitter, podcast, including many founders, a dozen GPs, and I think I've shook hands with at least 3 billionaires. As an indie creator I've watched with green-tinged eyes as &lt;a href="https://www.weekend.fund/"&gt;Ryan Hoover&lt;/a&gt;, &lt;a href="https://www.atelierventures.co/"&gt;Li Jin&lt;/a&gt;, &lt;a href="https://tylertringas.com/a-new-default-funding-for-tech-companies/"&gt;Tyler Tringas&lt;/a&gt;, &lt;a href="https://techcrunch.com/2020/08/05/gumroad-founder-sahil-lavingia-launches-new-seed-fund-in-collaboration-with-angellist/"&gt;Sahil Lavingia&lt;/a&gt;, &lt;a href="https://twitter.com/paigefinnn/status/1350955353291317250"&gt;Paige Doherty&lt;/a&gt;, &lt;a href="https://www.notboring.co/p/introducing-not-boring-capital"&gt;Packy McCormick&lt;/a&gt; and others launched funds that tie in perfectly with their brands.&lt;/p&gt;

&lt;p&gt;I'm nowhere near as accomplished as any of them but pursuing their &lt;em&gt;path&lt;/em&gt; was at least available to me given my network and trajectory. Instead I've turned away and chosen the more traditional path of salaried startup employee, with less freedom and more discomfort. I get asked why every now and then so I figure I better jot down my post-hoc rationalizations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;I don't want to be a meta-creator&lt;/strong&gt;: &lt;a href="https://www.swyx.io/meta-creator-ceiling/"&gt;Meta-Creators have a ceiling&lt;/a&gt; to substance - they burn bright but are overwhelmingly talkers rather than doers.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;There is too much money chasing too few operators&lt;/strong&gt;: This is a time of ridiculously easy money, with GameStop still worth $11b and Dogecoin worth $26b, Devtools startups raising unicorn rounds at 260x ARR, and Roam raising a $200m seed. Interest in private company funding is at generational highs, while new company formation is just coming off generational lows. Investors say getting great dealflow is their biggest problem, but post-PMF founders themselves report that hiring experienced senior executives is &lt;em&gt;their&lt;/em&gt; biggest problem.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;This will be much easier after I have "made it"&lt;/strong&gt;: "I'll be ready someday" is a terrible reason to not do things ‚Äî a college friend of mine is already a GP at Greylock without ever having been a founder or early stage exec. But I also see &lt;em&gt;heaps&lt;/em&gt; of bright eyed bushy tailed "partners" who haven't done a notable thing in their lives and I know that nobody gives them the time of day. Just being at a good firm is no longer enough ‚Äî your shortform bio (founded X, led X at Y, coined X) has to get to the level where people get you on the cap table just to have your name on the funding announcement. &lt;a href="https://www.notboring.co/p/power-to-the-person"&gt;Power is moving to the person&lt;/a&gt;. As &lt;a href="https://twitter.com/ashleymayer/status/1378090154078957571?s=20"&gt;Ashley Mayer put it&lt;/a&gt;, the influencers are trying to become VCs at the exact same time as the VCs are trying to become influencers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But the biggest reason of all: &lt;strong&gt;I'm on the hunt for bigger problems&lt;/strong&gt;. When you are &lt;a href="https://en.wikibooks.org/wiki/Chinese_Stories/The_frog_of_the_well"&gt;a frog in a well&lt;/a&gt;, all you see when you look up is a tiny circle of sky. My imagination is constrained by my experience, and despite my already diverse background across countries, industries, and cultures, I feel like I haven't pushed myself into hard enough problems.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When you are a regular employee at a stable company working on defined career paths, everything looks "solved" and your main job is to learn how things are "done". But founding and investing in startups is not just the art of identifying what big things are broken (everyone can complain about how everything is broken), but also whether the technology and market are ready for the right people to lead everyone to the promised land.&lt;/li&gt;
&lt;li&gt;When you take the "solve your own problems" approach you most like come up with B2C ideas, which are pretty universally regarded to be much harder than B2B (B2C has lower ARPU, higher churn, higher support cost, higher UX/design bar, but do have high growth potential). On my own, the best idea I've had is "&lt;a href="https://twitter.com/search?q=from%3Aswyx%20twitter%20client&amp;amp;src=typed_query"&gt;Superhuman for Twitter&lt;/a&gt;". At Temporal, I've had two theses ‚Äî &lt;a href="https://twitter.com/swyx/status/1319028647349555200"&gt;X University as a Service&lt;/a&gt;, &lt;a href="https://twitter.com/swyx/status/1338956681695227904"&gt;the Enterprise House of Brands&lt;/a&gt; ‚Äî that off the bat have much better revenue potential and lower product/platform risk.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an "operator" I'm focusing on specializing in Developer Experience, which economically speaking is helping Developer Tools companies "cross the chasm". I also practice this on a light burn basis with &lt;a href="https://twitter.com/SvelteSociety"&gt;Svelte Society&lt;/a&gt;, which in its second year alone memed Svelte to the &lt;a href="https://twitter.com/SvelteSociety/status/1422372693827985409?s=20"&gt;top of the StackOverflow frameworks survey&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I'm not resting on my laurels though. I started angel investing last year and have made 6 investments so far, 2 of which already have markups. I'll share more detailed investment theses for each soon, but I think my goal is to deploy ~$50k/yr as an angel as a way to dip my toe into startup investing, mindful that valuations are sky high right now. If I get an early hit, then that's an accelerant to an eventual VC career. &lt;/p&gt;

&lt;p&gt;I could also start a syndicate or rolling fund. Even now the maximum I've allowed myself to go is starting a devtools-angels &lt;a href="https://github.com/sw-yx/devtools-angels/"&gt;list&lt;/a&gt; and &lt;a href="https://discord.gg/7xkkV6CF"&gt;Discord&lt;/a&gt; (where we are currently at 400 members!!) but the principle is the same ‚Äî I'm not ready to be a fulltime investor, so I refuse to take formal steps, but I'm happy to lay the groundwork and have the option someday.&lt;/p&gt;

</description>
      <category>reflections</category>
      <category>money</category>
      <category>vc</category>
    </item>
    <item>
      <title>Introduction to BASH Scripting: Part-3</title>
      <author>Meet Gor</author>
      <pubDate>Sun, 08 Aug 2021 06:24:02 +0000</pubDate>
      <link>https://dev.to/mr_destructive/introduction-to-bash-scripting-part-3-54bc</link>
      <guid>https://dev.to/mr_destructive/introduction-to-bash-scripting-part-3-54bc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Bash or shell won't be much popular and powerful if they didn't have some tools and utilities baked in. But even further they are supported natively in Bash, which just makes every task and challenge quite hassle-free to deal with. In this part of the series, I'll try to cover an overview of some quite powerful and robust tools and utilities in Bash(shell in general) and also some of the advanced topics like dictionaries and positional parameters. Enough talk let's dive in.&lt;/p&gt;

&lt;p&gt;The topics to be covered in this part include the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hash tables/dictionaries in BASH&lt;/li&gt;
&lt;li&gt;Positional parameters&lt;/li&gt;
&lt;li&gt;Aliases in BASH&lt;/li&gt;
&lt;li&gt;Some Tools and utilities

&lt;ul&gt;
&lt;li&gt;grep/sed/awk&lt;/li&gt;
&lt;li&gt;cat/tac/head/tail&lt;/li&gt;
&lt;li&gt;cURL&lt;/li&gt;
&lt;li&gt;find&lt;/li&gt;
&lt;li&gt;bc&lt;/li&gt;
&lt;li&gt;wc&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#bash-dictionaries"&gt;
  &lt;/a&gt;
  Bash dictionaries
&lt;/h2&gt;

&lt;p&gt;Bash dictionaries or hash tables are just like any other hash tables or keymaps in other programming languages. Bash dictionaries are quite similar to arrays but they have a key instead of the index(0,1,2...) and a value just like arrays. This can be quite useful for storing passwords with emails or usernames or any other way in which a value can be accessed only via a unique key. &lt;/p&gt;

&lt;p&gt;To declare a dictionary/ hash table, we can simply write &lt;code&gt;declare -A name&lt;/code&gt;, this will declare an empty hash map for us. Further, we can populate the hash map with keys and values using the same syntax as of array just instead of numbers we can also have strings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

declare -A fruits
fruits["apple"]="red"
fruits["mango"]="yellow"
fruits["grapes"]="green"

read -p "Enter the name of fruit : " name 
echo "The fruit is $name and its color is ${fruits[$name]} "

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ZTXGdgJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626167875237/A2TxYPNoS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ZTXGdgJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626167875237/A2TxYPNoS.png" alt="possh.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above example depicts a way to declare, define and access the key values in a dictionary. The example may look silly but you get the idea. We can also access every key or value using the &lt;code&gt;@&lt;/code&gt; variable and access the number of key-value pairs using the &lt;code&gt;#&lt;/code&gt; variable just like an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

declare -A fruits
fruits["apple"]="red"
fruits["mango"]="yellow"
fruits["grapes"]="green"

for i in "${!fruits[@]}";
do
    echo "$i : ${fruits[$i]}"
done

echo "There are ${#fruits[@]} key-value pairs."
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sJCHWho---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626171398570/14jJl2eFs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sJCHWho---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626171398570/14jJl2eFs.png" alt="possh.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OK, this is very tricky they are the same variables but used slightly differently. Firstly in the range-based for loop &lt;code&gt;${!fruits[@]}&lt;/code&gt;, focus on the &lt;code&gt;!&lt;/code&gt; before the hash table name, this will expand(depict) the hash map's keys. This is used to access every key from the hash table and we can also see &lt;code&gt;#&lt;/code&gt; at the beginning of the hash map name as it is used to represent the entire hash map further in the &lt;code&gt;{#fruits[@]}&lt;/code&gt; we can also use &lt;code&gt;{#fruits[*]}&lt;/code&gt;.  Inside the for loop, &lt;code&gt;i&lt;/code&gt; will be the key, and &lt;code&gt;{fruits[$i]}&lt;/code&gt; will be the value for that &lt;code&gt;i&lt;/code&gt; th key.&lt;/p&gt;

&lt;p&gt;Also, you can notice the bash interpreter automatically arranges the map in the alphabetical order of the values and not keys. This is quite a neat little feature that can come in handy a lot of times.&lt;/p&gt;

&lt;p&gt;If you want to delete or add any key-value pairs we can do that by the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

declare -A fruits
fruits["apple"]="red"
fruits["mango"]="yellow"
fruits["grapes"]="green"

for i in "${!fruits[@]}";
do
    echo "$i : ${fruits[$i]}"
done
echo "There are ${#fruits[@]} key-value pairs."

unset fruits["mango"] 
echo "There are ${#fruits[@]} key-value pairs."
fruits["strawberry"]="pink"

for i in "${!fruits[@]}";
do
    echo "$i : ${fruits[$i]}"
done
echo "There are ${#fruits[@]} key-value pairs."

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YuF9DLKf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626172120966/yCeXpaM9w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YuF9DLKf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626172120966/yCeXpaM9w.png" alt="possh.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above code example is a bit complex but easy enough to understand. We can delete the key-value pair using the unset command and pass in the key along with the hash map name. We can create a key-value pair by simple command as depicted in the above example. This was a basic overview of hash maps/dictionaries in BASH.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#positional-parameters"&gt;
  &lt;/a&gt;
  Positional parameters
&lt;/h2&gt;

&lt;p&gt;We often use user input from within the script but there is another way to pass in parameters outside of the script using positional parameters. It basically allows us to pass in arguments or parameters from the command prompt/ shell and inside of the script, we can access them via Positional Parameters ( $1, $2, $3....$9, ${10} and so on).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

echo "first parameter : " $1
echo "second parameter : " $2
echo "eleventh parameter : " ${11}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JelpmNB6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626159559317/XSyVwkC9U.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JelpmNB6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626159559317/XSyVwkC9U.png" alt="possh.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see from the above script we have passed the parameters from the command line just after typing the filename. The positional parameter $0 is the file name and from 1 onwards the parameters are optional to run if only your script needs any parameters or input to work with. The numbers are just random and just used for demonstration. The 11th parameter or double-digit parameter starting from 10 onwards, you need to encapsulate the number in {curly braces}&lt;code&gt;${number}&lt;/code&gt; because it won't interpret &lt;code&gt;$10&lt;/code&gt; or any other number as just &lt;code&gt;$1&lt;/code&gt; and print 0. &lt;/p&gt;

&lt;p&gt;So we can pass a list of parameters that should be space-separated. We can pass any relevant information such as a string, number, or file names as well. &lt;/p&gt;

&lt;p&gt;If we want to access all the parameters passed to the script, we can use &lt;code&gt;@&lt;/code&gt; variable. You may know this symbol from the array section of part-II, it is used to access every element in the array. But here it is used to access every parameter passed to the script just behaving like a list of values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

echo "The parameters passed are: " $@

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QSOF-52F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626160205206/eH6BD1r_Yu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QSOF-52F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626160205206/eH6BD1r_Yu.png" alt="possh.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To get the number of the parameters passed to the script, we can use &lt;code&gt;#&lt;/code&gt; variable. This is also a variable used in the array section for accessing the number of elements in the array, in this case, the number of parameters in the list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

echo "The parameters passed are: " $#

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hufrn7pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626160630991/jVvJqtCqs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hufrn7pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626160630991/jVvJqtCqs.png" alt="possh.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Positional parameters allow to not take explicit input from the user from the script. This might not be used for the simple scripts but for administration purposes for the admins and users who know what does the script needs and it allows them to pass in arguments without designing the input system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bash-aliases"&gt;
  &lt;/a&gt;
  Bash aliases
&lt;/h2&gt;

&lt;p&gt;Bash aliases are a great way of reducing the command length and making it much easier to type and work with the scripts or any development-related work. Alias is a file called bash_aliases inside the .bashrc folder that contains our shortcut commands, it has a particular order to map certain commands with others. &lt;/p&gt;

&lt;p&gt;Let's see what is an alias first and then we'll see how to set it up.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;alias cdc='cd C:/Users/acer/Desktop/New\ folder/Code/'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will make it viable to just type cdc and I will be in this directory instead of printing all of the jargon. The command we need to use to replace the big command is &lt;code&gt;cdc&lt;/code&gt;. The right command is the variable assigned the command and the left or its value is the command to be replaced with it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ECzbF69J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626163036098/lDwlSdiry.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ECzbF69J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626163036098/lDwlSdiry.gif" alt="shalias.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This command will definitely defer on your machine and OS as the filesystems are different in each major operating system. We can quickly make other such alias or shortcuts so to speak for making the development process faster and efficient. &lt;/p&gt;

&lt;p&gt;Now let us see how we set up this environment for bash alias, it's quite straightforward. You need to create a hidden file named "bashrc" i.e the file name will be &lt;code&gt;.bashrc&lt;/code&gt;. This file has to be in the root directory (the folder to which bash defaults). I do not mean the &lt;code&gt;root&lt;/code&gt; directory in Linux but the repository in which your bash interpreter opens. Once you have created the file put any alias in the file and source the file using the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source .bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that would do the trick, you can now test your macro or shortcut by opening a new instance of the terminal. If this doesn't work for you, then you can check  &lt;a href="https://opensource.com/article/19/7/bash-aliases"&gt;this article&lt;/a&gt;  for a broader understanding of the setup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bash-tools-amp-utilities"&gt;
  &lt;/a&gt;
  Bash tools &amp;amp; utilities
&lt;/h2&gt;

&lt;p&gt;What would you call BASH without grep or sed man! It's a sad life:( BASH comes with some absolutely powerful and handy tools and utilities such as grep, sed, awk, at, wc, find, tar, gzip, which, make, ping, cURL, wget, ssh, .... my words there is an unstoppable long list. Really they are quite important and lay the foundation for some quite complex tasks. Some web servers can become redundant if some of the tools went missing. Let us find why they are so powerful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grep"&gt;
  &lt;/a&gt;
  grep
&lt;/h3&gt;

&lt;p&gt;GREP or global regular expression print is a tool or command that can find patterns using regular expressions in files/strings or any other piece of data. It's not just printing or searching for the text, besides all that it can also edit the file and store the output in the desired file or any variable by proving some arguments to it. Grep supports Pearl's regular expression as well. There is a lot of customization options and arguments available in grep that can just do anything. It becomes an irreplaceable tool for some complex tasks. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VVmJ55IO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626179054053/9ttkV-MZZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VVmJ55IO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626179054053/9ttkV-MZZ.png" alt="possh.png"&gt;&lt;/a&gt;&lt;br&gt;
The above code finds the pattern "more text" in the file specified and prints the line to the screen, but we can modify the output we want, extract the output in a file and do all kinds of wizardry with this tool. This is just a basic, to get started example but trust me it's more than you think, this tool is used widely for web scrapping and pattern matching in quite a lot of use cases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sed"&gt;
  &lt;/a&gt;
  sed
&lt;/h3&gt;

&lt;p&gt;SED or stream editor is another beast in BASH's toolkit, this is just a flawless tool. No words for this. This is a great tool but still underrated. This can actually edit the text inside the terminal, no graphical environment, no interface at all just commands, but it can do what a huge text editor can't! Save time, just edit text without opening anything except a terminal, becomes unbeatable in large files. This is surely a tiny little application that can skyrocket the efficiency development process. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QStpy0s5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626179410079/BkvdAqkfDS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QStpy0s5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626179410079/BkvdAqkfDS.png" alt="possh.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above example replaces the word &lt;code&gt;more&lt;/code&gt; with &lt;code&gt;less&lt;/code&gt; using the sed command if you type 3g or nth line preceded by g, you will replace the word on the nth line only. In this case, only&lt;code&gt;g&lt;/code&gt; will replace every occurrence of the word.&lt;br&gt;
This is again a basic example of a sed command, its more if you go deeper, its more than a tool, its kind of a text-editor for wizards ;) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#awk"&gt;
  &lt;/a&gt;
  awk
&lt;/h3&gt;

&lt;p&gt;awk or Aho, Weinberger, and Kernighan XD are the names of the developers of this application. This is another mind-blowing tool that can programmatically do a lot of stuff. This is like a programming language to a whole new level that can extrapolate and extract data from files and other forms of data. This is quite a great option if you want to quite neatly do something. It has great support libraries and functions that can even perform complex mathematical and scientific operations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ifoKTS1n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626180322400/hWkEVhPl_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ifoKTS1n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626180322400/hWkEVhPl_.png" alt="possh.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are the topics for separate articles because it is insufficient to explain everything at once.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cat-tac-head-tail"&gt;
  &lt;/a&gt;
  cat / tac / head / tail
&lt;/h3&gt;

&lt;p&gt;CAT or concatenate is a tool used for printing out files, create files, sorting the contents of files, editing files, and a plethora of stuff. This command is generally used for printing the file but there is more to it like creating a file directly in the terminal, merging two files, and a ton of other operations. &lt;/p&gt;

&lt;p&gt;TAC or reverse of CAT is a tool used for everything that CAT can do but in reverse:) This is a wired tool but still quite useful sometimes.&lt;/p&gt;

&lt;p&gt;Head is a tool that will print or edit the text in the first 10 lines of the file, it can be used to extrapolate multiple files with similar content. &lt;br&gt;
Tail is a tool that will print or edit the text in the last 10 lines of the file, it can be used just like head but for the last few lines.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xV02fOS7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626180451092/Z5VUpIxCm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xV02fOS7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626180451092/Z5VUpIxCm.png" alt="possh.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It turns out, you can not only print the first or last 10 lines but n lines by passing the -n as an argument, there is a ton of stuff to discover, this just drives me crazy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#curl"&gt;
  &lt;/a&gt;
  cURL
&lt;/h3&gt;

&lt;p&gt;cURL or client URL is a tool that can be used to transfer data via various network protocols. You might not believe but it is used in cars, televisions, routers, and other embedded systems for exchanging relevant data via appropriate protocols. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---BARR1vw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626181263235/JPocJwoEd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---BARR1vw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626181263235/JPocJwoEd.png" alt="possh.png"&gt;&lt;/a&gt;&lt;br&gt;
This example depicts how we can fetch data from an API using cURL and extract data in JSON format and use it for relevant tasks.&lt;br&gt;
This is again one of the best utility out there as it becomes quite remarkable and vintage. Despite being almost 30 years old, it shines bright in the tech world.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#find"&gt;
  &lt;/a&gt;
  find
&lt;/h3&gt;

&lt;p&gt;Find as the name suggests it is used to find files among the folders and directories in a file system. it becomes quite helpful in complex projects where the directory structure is deep and large. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lu8_1CdZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626181386566/zpP9Yaom4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lu8_1CdZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626181386566/zpP9Yaom4.png" alt="possh.png"&gt;&lt;/a&gt;&lt;br&gt;
The command &lt;code&gt;find *.txt&lt;/code&gt; finds every txt file available on this directory. As simple as it can get. This is surely looking silly and idiotic but it finds its glory in large and complicated codebases. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bc"&gt;
  &lt;/a&gt;
  bc
&lt;/h3&gt;

&lt;p&gt;bc or basic calculator is a utility tool for performing mathematical and arithmetical operations in the terminal, this commands gets integrated with other commands such as awk really well and can be used for further extending the limits of what the command line development can do.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HAiyIz6E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626182601487/z8X4KeDGG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HAiyIz6E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626182601487/z8X4KeDGG.png" alt="possh.png"&gt;&lt;/a&gt;&lt;br&gt;
AWW! I could hear the excitement. That just added new dimensions into BASH. Just creativity and resonance to anything is the limit here. I am using  &lt;a href="http://repl.it/"&gt;REPL.IT&lt;/a&gt;  here for using bash as I do not have it on my windows machine :( But that command is truly insane.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wc"&gt;
  &lt;/a&gt;
  wc
&lt;/h3&gt;

&lt;p&gt;wc or word count is a utility tool for counting and analyzing the size or count of characters, words, lines, or files in a given file structure. This is quite a handy tool for monitoring and keeping track of a system, also for general development purposes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--02XsZ_JZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626182319602/r8UidHV2z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--02XsZ_JZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626182319602/r8UidHV2z.png" alt="possh.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above command prints out the word and lines in the provided file. This command &lt;code&gt;wc&lt;/code&gt; can even compute the size of files and even more properties of files.&lt;br&gt;
Those were some of the quite powerful commands, tools, or utilities in BASH/shell. There are plenty of other commands not covered here because this an extremely large topic and even making separate articles or resources there will certainly and surely be some things that will get missed out, that's the beauty Linux or in general Computer Science has.&lt;br&gt;
Ok, that was a lot, but I hope you got some insights for learning more BASH or Linux in general. This is a wide topic and can't be covered entirely in a single article. &lt;/p&gt;

&lt;p&gt;Now that is it from this part, everything cannot be covered in any number of parts but at least it will help someone to get started in BASH scripting and its specifications for development. Have a Blast learning BASH. Happy Coding :)&lt;/p&gt;

</description>
      <category>bash</category>
      <category>linux</category>
      <category>shellscripting</category>
      <category>terminal</category>
    </item>
    <item>
      <title>in-memory databases: a pratical demo</title>
      <author>Samarth Chitgopekar</author>
      <pubDate>Sun, 08 Aug 2021 06:22:38 +0000</pubDate>
      <link>https://dev.to/httpsamc/in-memory-databases-a-pratical-demo-4bmp</link>
      <guid>https://dev.to/httpsamc/in-memory-databases-a-pratical-demo-4bmp</guid>
      <description>&lt;p&gt;Many of you might've heard a thing or two about &lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt;, an in-memory database that enables super fast reads and writes. But why is this?&lt;/p&gt;

&lt;p&gt;We first need to understand what "in-memory" really means. A computer has RAM (Random Access Memory) that's super fast. This is where Redis lives, in the same place any variable or object you create in any language.&lt;/p&gt;

&lt;p&gt;RAM is very fast, but it comes at a monetary cost - disk space (think your hard drive or ssd) is slower but cheaper. This is easily Redis' biggest pitfall, as RAM becomes a limiting factor regarding how much data you can store. &lt;/p&gt;

&lt;p&gt;With that brief introduction out of the way, let's dive into a crude demonstration of just how much faster Redis can be in comparison to storage in a generic database. We'll just be using a simple Json file for this example, but the concept applies to virtually any database.&lt;/p&gt;

&lt;p&gt;I'll be writing this in Python 3.10, but any modern version of Python 3 will work. No external dependencies are required. &lt;/p&gt;

&lt;p&gt;
  Here's the step by step walkthrough
  &lt;p&gt;To start, I'm going to import a few modules: &lt;code&gt;json&lt;/code&gt; (allows us to port between json &amp;lt;-&amp;gt; python dict) and &lt;code&gt;time&lt;/code&gt; (allows us to keep track of time). Then, I'll create a dictionary called &lt;code&gt;DATA&lt;/code&gt;, which will be cached in memory since it's a variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;DATA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"val"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, I'll define a quick method to create a Json file that represents the &lt;code&gt;DATA&lt;/code&gt; variable in the current directory - this is what we'll compare our in-memory calls to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;createJsonFile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"Creates a simple data.json in the current directory with the value of the dict DATA"&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'data.json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DATA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I'll define a method that opens the Json file, converts it into a dict, and calls for the value of &lt;code&gt;key&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;readFromJson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""Reads the value of "key" by opening data.json and parsing it into a dict,
    and then querying the in-memory dict.

    Returns:
        float: How long the operation took to complete in seconds (rounded to 6 dec.)
    """&lt;/span&gt;

    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'data.json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;readData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;readData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;timeToComplete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Finished querying Json in: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;timeToComplete&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; sec. (value: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;timeToComplete&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, I'm defining a method to get the value of &lt;code&gt;key&lt;/code&gt;, but from the already cached in-memory dict &lt;code&gt;DATA&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;readFromMemory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""Reads the value of "key" from the in-memory dict DATA (global)"

    Returns:
        float: How long the operation took to complete in seconds (rounded to 6 dec.)
    """&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DATA&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;timeToComplete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Finished querying memory in: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;timeToComplete&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; sec. (value: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;timeToComplete&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, I'll define a quick tester method to compare the in-memory calls vs the file calls:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""Runs a call to readFromMemory and readFromJson and explains which was faster
    and by how much.

    Returns:
        float: the time difference between the readFromMemory and readFromJson calls (rounded to 6 dec.)
                (if pos. -&amp;gt; readFromMemory was faster, if neg. -&amp;gt; readFromJson was faster)
    """&lt;/span&gt;
    &lt;span class="n"&gt;readFromJsonTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;readFromJson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;readFromMemoryTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;readFromMemory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;totalDelta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;readFromJsonTime&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;readFromMemoryTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;totalDelta&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Reading from memory was &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;totalDelta&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; sec. faster than reading from Json!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Wow! Reading from Json was actually &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;totalDelta&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; sec. faster!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;totalDelta&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a bonus, I'm going to define a batch method to run lots of tests for us an aggregate the total results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;runTests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numTests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""Runs lots of comparisons and explains the net delta,
    or how much time was saved by the in-memory calls.

    Args:
        numTests (int, optional): How many tests to run. Defaults to 10,000.
    """&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;deltaCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numTests&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;deltaCount&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;timeToComplete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Finished with a net delta of &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deltaCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; seconds saved! (Runtime: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;timeToComplete&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; sec.)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last but not least, the actual call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;createJsonFile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Try this out first to see a single test
&lt;/span&gt;    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Run this later to see a large comparsion - supply a custom value for numTests if you want!
&lt;/span&gt;    &lt;span class="c1"&gt;#runTests()
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
  Here's the complete Python code (copy-pasteable)
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;DATA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"val"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;createJsonFile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"Creates a simple data.json in the current directory with the value of the dict DATA"&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'data.json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DATA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;readFromJson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""Reads the value of "key" by opening data.json and parsing it into a dict,
    and then querying the in-memory dict.

    Returns:
        float: How long the operation took to complete in seconds (rounded to 6 dec.)
    """&lt;/span&gt;

    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'data.json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;readData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;readData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;timeToComplete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Finished querying Json in: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;timeToComplete&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; sec. (value: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;timeToComplete&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;readFromMemory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""Reads the value of "key" from the in-memory dict DATA (global)"

    Returns:
        float: How long the operation took to complete in seconds (rounded to 6 dec.)
    """&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DATA&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;timeToComplete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Finished querying memory in: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;timeToComplete&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; sec. (value: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;timeToComplete&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""Runs a call to readFromMemory and readFromJson and explains which was faster
    and by how much.

    Returns:
        float: the time difference between the readFromMemory and readFromJson calls (rounded to 6 dec.)
                (if pos. -&amp;gt; readFromMemory was faster, if neg. -&amp;gt; readFromJson was faster)
    """&lt;/span&gt;
    &lt;span class="n"&gt;readFromJsonTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;readFromJson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;readFromMemoryTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;readFromMemory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;totalDelta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;readFromJsonTime&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;readFromMemoryTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;totalDelta&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Reading from memory was &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;totalDelta&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; sec. faster than reading from Json!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Wow! Reading from Json was actually &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;totalDelta&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; sec. faster!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;totalDelta&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;runTests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numTests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""Runs lots of comparisons and explains the net delta,
    or how much time was saved by the in-memory calls.

    Args:
        numTests (int, optional): How many tests to run. Defaults to 10,000.
    """&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;deltaCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numTests&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;deltaCount&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;timeToComplete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Finished with a net delta of &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deltaCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; seconds saved! (Runtime: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;timeToComplete&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; sec.)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;createJsonFile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Try this out first to see a single test
&lt;/span&gt;    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Run this later to see a large comparsion - supply a custom value for numTests if you want!
&lt;/span&gt;    &lt;span class="c1"&gt;#runTests()
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-demo"&gt;
  &lt;/a&gt;
  The Demo
&lt;/h2&gt;

&lt;p&gt;To start, just run the program. You'll see a single test that might print out something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Finished querying Json in: 0.001 sec. (value: val)
Finished querying memory in: 0.0 sec. (value: val)
Reading from memory was 0.001 sec. faster than reading from Json!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, there's a difference. That might not seem like a lot, but try commenting out &lt;code&gt;main()&lt;/code&gt; and uncommenting &lt;code&gt;runTests()&lt;/code&gt;. Here's what it looked like when I passed in &lt;code&gt;numTests=100000&lt;/code&gt; to the &lt;code&gt;runTests&lt;/code&gt; call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;-- Hundreds of thousands of lines of individual test results --&amp;gt;
Finished with a net delta of 17.438135 seconds saved! (Runtime: 73.684126 sec.)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, those small differences add up. Now for most applications, I doubt you'll need something as powerful as Redis. But, there's a reason big tech companies that rely on speedy APIs like &lt;a href="https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/improving-key-expiration-in-redis"&gt;Twitter&lt;/a&gt; use it.&lt;/p&gt;

&lt;p&gt;Be sure to like and let me know if you think Redis is worth it down below!&lt;/p&gt;

&lt;p&gt;Complete Python Code:&lt;/p&gt;

</description>
      <category>redis</category>
      <category>database</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>5 Tips to Master the Art of Clean Code</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 08 Aug 2021 05:46:04 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/5-tips-to-master-the-art-of-clean-code-57b6</link>
      <guid>https://dev.to/ruppysuppy/5-tips-to-master-the-art-of-clean-code-57b6</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Good programmers write boring code. Great programmers write really boring code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I came across this quote on the internet, sometime in the past year, it introduced me to the concept of clean code. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-clean-code-exactly"&gt;
  &lt;/a&gt;
  What is &lt;strong&gt;Clean Code&lt;/strong&gt; exactly?
&lt;/h1&gt;

&lt;p&gt;In simple terms &lt;strong&gt;Clean Code&lt;/strong&gt; refers to a codebase that is easy to read and understand. Some salient features of &lt;strong&gt;Clean Code&lt;/strong&gt; are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reduces &lt;strong&gt;cognitive load&lt;/strong&gt; of the reader&lt;/li&gt;
&lt;li&gt;Contains intuitively named &lt;strong&gt;variables&lt;/strong&gt; and &lt;strong&gt;functions&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Follows the &lt;strong&gt;best practices&lt;/strong&gt; for coding&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#why-use-clean-code-when-my-code-works-even-without-it"&gt;
  &lt;/a&gt;
  Why use &lt;strong&gt;Clean Code&lt;/strong&gt; when my code works even without it?
&lt;/h1&gt;

&lt;p&gt;Glad you asked. &lt;strong&gt;Clean Code&lt;/strong&gt; is not about writing code that works, it is about writing code that is easy to read and maintain in the long term. As you can see from this graph, the cost of maintaining a &lt;strong&gt;Dirty Code&lt;/strong&gt; base drastically increases over time, whereas in the case of &lt;strong&gt;Clean Code&lt;/strong&gt;, it remains fairly constant.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HwIuMjs5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4b4tdpmoww5p79a04oi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HwIuMjs5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4b4tdpmoww5p79a04oi.png" alt="Graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clean Code&lt;/strong&gt; is not the &lt;strong&gt;shortest&lt;/strong&gt; or the &lt;strong&gt;smartest looking&lt;/strong&gt;, but it is the &lt;strong&gt;elegant&lt;/strong&gt; code, understanding which takes &lt;em&gt;minimal effort&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Programming&lt;/strong&gt; is an &lt;strong&gt;art&lt;/strong&gt; as much as it is a &lt;strong&gt;science&lt;/strong&gt;. Here are a few tips to help you write &lt;strong&gt;Clean Code&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-intuitive-variable-names"&gt;
  &lt;/a&gt;
  1. Intuitive Variable Names
&lt;/h1&gt;

&lt;p&gt;Quite evidently nobody does all the computation mentally to check what a variable stores.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 2&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;positiveElements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see the second example is far easier to understand than the first one.&lt;/p&gt;

&lt;p&gt;In the case of &lt;strong&gt;booleans&lt;/strong&gt; the variable name should be a question that can be answered with &lt;em&gt;yes&lt;/em&gt; or &lt;em&gt;no&lt;/em&gt;, such as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isValid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hasAuthorization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#2-selfexplanatory-functions"&gt;
  &lt;/a&gt;
  2. Self-Explanatory functions
&lt;/h1&gt;

&lt;p&gt;There are two things to keep in mind while writing functions or methods:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Follow the &lt;strong&gt;Single Responsibility Principle (SRP)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Function names should be actions words (verbs)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Single Responsibility Principle (SRP)&lt;/strong&gt; states that a function should do only one specific task. An example of this would be a function that &lt;em&gt;sends data to the server&lt;/em&gt; &lt;strong&gt;should not&lt;/strong&gt; &lt;em&gt;validate the data&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sendData&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;submit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;sendData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are two other &lt;em&gt;good to follow&lt;/em&gt; principles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Function body should not contain more than 2 levels of nesting&lt;/li&gt;
&lt;li&gt;A function should take a maximum of 3 arguments &lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#3-group-similar-functions-together"&gt;
  &lt;/a&gt;
  3. Group Similar Functions Together
&lt;/h1&gt;

&lt;p&gt;We now come across the concept of &lt;strong&gt;Cohesion&lt;/strong&gt;. &lt;strong&gt;Cohesion&lt;/strong&gt; is a measure of the &lt;em&gt;degree&lt;/em&gt; to which the elements of the module are functionally related.&lt;/p&gt;

&lt;p&gt;Related functions should be grouped together in a class, helping us keep our code compartmentalized&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IOHelper&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;staticmethod&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

  &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;staticmethod&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we find that the &lt;code&gt;IOHelper&lt;/code&gt; class only groups together functions for &lt;strong&gt;io&lt;/strong&gt; operations, without having any utility of its own.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-minimize-the-number-of-comments"&gt;
  &lt;/a&gt;
  4. Minimize The Number Of Comments
&lt;/h1&gt;

&lt;p&gt;This might sound &lt;strong&gt;counterintuitive&lt;/strong&gt; for some beginners, but hear it out. The code you write should be &lt;strong&gt;self-explanatory&lt;/strong&gt;, anyone viewing your code should not have to rely on comments to understand what it does.&lt;/p&gt;

&lt;p&gt;There are a few rare cases where you might need comments in case there is some unintuitive code without a workaround.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// using setTimeout to avoid race-condition&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#5-code-formatting"&gt;
  &lt;/a&gt;
  5. Code Formatting
&lt;/h1&gt;

&lt;p&gt;The codebase should always follow a strict set of &lt;strong&gt;formatting&lt;/strong&gt; rules. It is also a good idea to use a formatter like &lt;a href="https://pypi.org/project/black/"&gt;black&lt;/a&gt; or &lt;a href="https://prettier.io/"&gt;prettier&lt;/a&gt; to automate the formatting.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Project Structure&lt;/strong&gt; should be decided before the commencement of the project and everyone working on it should be aware of it and agree to abide by it, as the &lt;strong&gt;Project Structure&lt;/strong&gt; is context-dependent and everyone likes a specific structure over another.&lt;/p&gt;

&lt;p&gt;The variables and function naming convention should also be specified beforehand (&lt;code&gt;isValid&lt;/code&gt; or &lt;code&gt;hasVality&lt;/code&gt;, etc.) and language-specific cases should be kept in mind (eg: &lt;strong&gt;snake case&lt;/strong&gt; in &lt;strong&gt;python&lt;/strong&gt; and &lt;strong&gt;camel case&lt;/strong&gt; in &lt;strong&gt;JS/TS&lt;/strong&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;snake_case_variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"value"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;camelCaseVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;As mentioned earlier as well, &lt;strong&gt;Clean Code&lt;/strong&gt; is not the &lt;strong&gt;shortest&lt;/strong&gt; code, but it is the easiest to understand. Following these principles would help you become a &lt;strong&gt;better coder&lt;/strong&gt; not by improving your &lt;em&gt;coding skills&lt;/em&gt; but by improving the &lt;em&gt;soft skills&lt;/em&gt; required for coding as it will teach you how to explain your code to &lt;em&gt;non-technical people&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Want to work together? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to see what I am working on? Check out my &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a freelancer who will start off as a Digital Nomad in mid-2022. Want to catch the journey? Follow me on &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow my blogs for weekly new tidbits on &lt;a href="https://dev.to/ruppysuppy"&gt;Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are a few commonly asked questions I get. So, I hope this &lt;strong&gt;FAQ&lt;/strong&gt; section solves your issues.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I am a beginner, how should I learn Front-End Web Dev?&lt;/strong&gt;&lt;br&gt;
First get the fundamentals of &lt;strong&gt;HTML&lt;/strong&gt;, &lt;strong&gt;CSS&lt;/strong&gt;, &lt;strong&gt;JS&lt;/strong&gt; down; Learn any &lt;em&gt;front-end framework/library&lt;/em&gt; (&lt;strong&gt;React&lt;/strong&gt;, &lt;strong&gt;Vue&lt;/strong&gt;, &lt;strong&gt;Angular&lt;/strong&gt;); Then keep making &lt;strong&gt;Projects&lt;/strong&gt; or make &lt;strong&gt;Open Source Contributions&lt;/strong&gt; to attain mastery.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Relevant Article Links&lt;/strong&gt;&lt;br&gt;
    1. &lt;a href="https://dev.to/ruppysuppy/5-projects-to-master-front-end-development-57p"&gt;Front End Project Ideas&lt;/a&gt;&lt;br&gt;
    2. &lt;a href="https://dev.to/ruppysuppy/zero-to-hero-get-started-with-open-source-10b7"&gt;Get Started With Open Source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you mentor me?&lt;/strong&gt;&lt;br&gt;
Sorry, I am already under a lot of workload and would not have the time to mentor anyone.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Connect to me on&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/in/tapajyoti-bose-429a601a0"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Portfolio&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>productivity</category>
      <category>codequality</category>
      <category>career</category>
      <category>programming</category>
    </item>
    <item>
      <title>Database Managment System: Introduction</title>
      <author>Kathan Vakharia</author>
      <pubDate>Sun, 08 Aug 2021 05:41:21 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/database-managment-system-introduction-4dmd</link>
      <guid>https://dev.to/kathanvakharia/database-managment-system-introduction-4dmd</guid>
      <description>&lt;p&gt;Database Management System (&lt;strong&gt;DBMS&lt;/strong&gt;) is one of the core subjects in computer science. It deals with the storage, retrieval, modification, and deletion of &lt;em&gt;data.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Your favorite query language, &lt;em&gt;SQL&lt;/em&gt;  plays a vital role here!&lt;/p&gt;

&lt;p&gt;There are lots of interesting things to discuss in this subject, it is one of the easiest as well as an important subject. The only caveat is that sometimes, terminologies used in this subject can be daunting and hard to swallow üòÖ &lt;/p&gt;

&lt;p&gt;But worry not, I will explain things in the most simple manner possible. Let's start with some basic terms that you need to be familiar with,&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-terms"&gt;
  &lt;/a&gt;
  Basic Terms
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uIi6MQ7N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vgle6a68f03oyvjdleq8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uIi6MQ7N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vgle6a68f03oyvjdleq8.jpg" alt="Image 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data"&gt;
  &lt;/a&gt;
  Data
&lt;/h3&gt;

&lt;p&gt;Any fact that can be recorded or stored. eg: text, numbers, images, videos, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h3&gt;

&lt;p&gt;Collection of &lt;strong&gt;related&lt;/strong&gt; data.&lt;/p&gt;

&lt;p&gt;Traditionally, a database contains only text and numbers. fun fact, such databases are called &lt;em&gt;Traditional Database.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are different  types of databases,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Multimedia Database: to store videos, songs, etc. The best example is Youtube's Database.&lt;/li&gt;
&lt;li&gt;Geographic Information System(GIS): to store data of interspace recorded by satellites and rockets.&lt;/li&gt;
&lt;li&gt;Realtime Database: Databases that need to be updated frequently. For example , your favorite &lt;strong&gt;firebase&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#database-management-system-dbms"&gt;
  &lt;/a&gt;
  Database Management System (DBMS)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gik74T0s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xddlshk7tvlcw4y9ob1w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gik74T0s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xddlshk7tvlcw4y9ob1w.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It a software used to define, construct and manipulate data.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üí° A good analogy: &lt;em&gt;database&lt;/em&gt; is a &lt;strong&gt;book&lt;/strong&gt; üìñ while &lt;em&gt;DBMS&lt;/em&gt; is a &lt;strong&gt;pen üñã&lt;/strong&gt; and &lt;em&gt;data&lt;/em&gt; is the &lt;strong&gt;ink&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;DBMS acts as an &lt;strong&gt;intermediary&lt;/strong&gt; between the &lt;em&gt;application&lt;/em&gt; code and the &lt;em&gt;database&lt;/em&gt;. It ensures specified constraints (restrictions) by not letting the application directly access the data inside the database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iDir0eGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t1ju7qyatu3fo9721ms4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iDir0eGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t1ju7qyatu3fo9721ms4.jpg" alt="Image 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database-system"&gt;
  &lt;/a&gt;
  Database system
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ö† The terminology is loose in the sense Database system is referred as DBMS usually.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Database System is Database + DBMS. For example, MySQL, PostgreSQL all are database systems. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-not-an-operating-system-for-all-of-this"&gt;
  &lt;/a&gt;
  Why not an Operating System for all of this?
&lt;/h2&gt;

&lt;p&gt;A question might arise, why do we need DBMS at all? We already have O.S. which does a lot of stuff for us, why not this one too?&lt;/p&gt;

&lt;p&gt;Simply putting, this will make your system super slow a.k.a boot times of your system will be horrible.&lt;/p&gt;

&lt;p&gt;The reason is whenever we want to access the database, we will ask the operating system which will cause the O.S. to switch from user mode to kernel mode (overhead!) to make system calls like write, read, etc. This makes the entire process of even the data retrieval super slow!&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>tutorial</category>
      <category>dbms</category>
    </item>
    <item>
      <title>Differences between Node.js and the Browser</title>
      <author>Clean Code Studio</author>
      <pubDate>Sun, 08 Aug 2021 05:40:30 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/differences-between-node-js-and-the-browser-50i4</link>
      <guid>https://dev.to/cleancodestudio/differences-between-node-js-and-the-browser-50i4</guid>
      <description>&lt;p&gt;Yes, the browser and node.js both use the JavaScript software language - but the literal &lt;strong&gt;Run Time Environments&lt;/strong&gt; are different.&lt;/p&gt;

&lt;p&gt;Node.js, aka server side JavaScript has many similarities with client-side JavaScript. It also has a multitude of differences. &lt;/p&gt;

&lt;p&gt;Despite both using JavaScript as their software language, we can key in on some key differences that make the software development experience between the two &lt;strong&gt;RADICALLY DIFFERENT&lt;/strong&gt;.&lt;/p&gt;




&lt;p&gt;In today's post we're diving into the differences that separate Node.js (aka server-side JavaScript) from the browser (aka client-side JavaScript).&lt;/p&gt;




&lt;p&gt;From the front-end developers vantage point, node.js comes across as a huge advantage. Node.js pulls on the power of familiarity and comfort, allowing developers to create full-stack applications using a software language in JavaScript that they are &lt;em&gt;already&lt;/em&gt; familiar with. This is huge.&lt;/p&gt;

&lt;p&gt;By using the same language for both ends of the stack, you can deeply learn JavaScript and stick to becoming better and better at it without needing to bounce between languages and partition your learning resources into two or more languages on top of everything else software development requires you to learn.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"We're using JavaScript on both sides, so what changes?"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What changes between node.js and browser side JavaScript is the &lt;strong&gt;ecosystem&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For example, in the browser you're...&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Interacting with the DOM (Document Object Module)&lt;/li&gt;
&lt;li&gt;Utilizing Web Platform APIs (EX: Cookies)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These examples, of course, don't actually exist within Node. The DOM is a representational layer - it's a document object module that has been largely inspired by the need to create a visual user interface layer for the web via the power of browsers. &lt;/p&gt;

&lt;p&gt;Node.js is server-side, we don't have a DOM nor do we need Cookies. Cookie's are largely implemented to track users or save user information - we're on the server side and have direct access to the database or storage resources and are using node.js to control the server itself that backs the website - this is instead of interacting with the browser that is used to communicate with our website server on the front-end.&lt;/p&gt;

&lt;p&gt;In the browser, JavaScript won't have access to several clean APIs/modules that node has. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For example, in node you're...&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Able to interact and access the the file system (fs)&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Another huge difference is that Node.js allows you to control the environment itself. Unless you're building an open source application that anyone is allowed to build on to and deploy anywhere, you know which version of Node.js you will be running your application on. &lt;/p&gt;

&lt;p&gt;This is compared to the browser, where the environment is based on the browser version. You don't have the luxury of defining the environment your visitors will use on the front-end. On the back-end you do and this is very convenient as a developer.&lt;/p&gt;

&lt;p&gt;This means that you can write all the modern ES6-7-8-9 and so on JavaScript that your Node version supports.&lt;/p&gt;

&lt;p&gt;JavaScript advances as fast as any other software language out there - browsers seemingly always a little bit behind the JS curve (at least some of the many browsers out there are so you have to wait a bit to use the most up to date JavaScript releases to support compatibility of your application across front-end browsers to support all of your visitor's and their experience with your software).&lt;/p&gt;

&lt;p&gt;Since JavaScript moves so fast, but browsers can be a bit slow to upgrade, sometimes on the web you are stuck with using older JavaScript / ECMAScript releases.&lt;/p&gt;

&lt;p&gt;On the browser side, you can do a bit of extra leg work to alleviate this "browsers are always a bit behind" issue by using Babel to transform your code to be ES5-compatible before shipping it to the browser. This requires you to install webpack, make sure your using the proper transpiler(s), and have the correct configuration set up to ultimately reduce your modern JavaScript into an older version of JavaScript so that all browsers can use it. &lt;/p&gt;

&lt;p&gt;On the node.js side, you don't have to do this. You won't need to do this.&lt;/p&gt;

&lt;p&gt;Another difference is that Node.js uses the CommonJS module system, while in the browser we are starting to see the ES Modules standard being implemented.&lt;/p&gt;

&lt;p&gt;In practice, this means you may need to use &lt;code&gt;require()&lt;/code&gt; in Node while using &lt;code&gt;import&lt;/code&gt; within the browser - but this looks to be changing/standardizing in the future. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-is-nodejs"&gt;
  &lt;/a&gt;
  What is Node.js
&lt;/h3&gt;




&lt;p&gt;Node.js is a JS runtime based on chrome‚Äôs JavaScript engine called V8. In simple terms, the V8 JS engine from chrome was extracted and using it a new technology has been made to run standing alone. Of course, there's a lot more that goes into something like this.&lt;/p&gt;

&lt;p&gt;As stated earlier this is no DOM, there is no User Interface, and there are runtime differences. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#installing-nodejs-vs-browser-js"&gt;
  &lt;/a&gt;
  Installing Node.js vs. Browser JS
&lt;/h3&gt;




&lt;p&gt;Like Python or PHP, you actually have to install Node.js for it to work properly on your machine. You can install node.js &lt;a href="https://nodejs.org/en/"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Node.js is supported on all major Operating systems (Windows, Mac, Ubuntu, etc...). &lt;/p&gt;

&lt;p&gt;On the other side, you have the browser. What's it look like installing JavaScript into the Browser? The answer is it doesn't look like anything. The browser is responsible for being able to use, interpret, and run JavaScript - you don't install it, it comes with the browser. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#running-nodejs-vs-browser-javascript"&gt;
  &lt;/a&gt;
  Running Node.js vs Browser JavaScript
&lt;/h3&gt;




&lt;p&gt;Once installed (like PHP, python, or any other server-side language) node.js can be run directly through the command line or terminal. &lt;/p&gt;

&lt;p&gt;You can call a JavaScript file by executing &lt;code&gt;node {file_path.js}&lt;/code&gt; via your terminal or command line. This works just like you're running PHP or Python from the terminal. &lt;/p&gt;

&lt;p&gt;You can call the file using &lt;code&gt;node {file_path.js}&lt;/code&gt; or simply type in &lt;code&gt;node&lt;/code&gt; and enter into an interactive &lt;code&gt;REPL&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cmd&amp;gt; node ./test.js 
cmd&amp;gt; "hello world"
cmd&amp;gt;
cmd&amp;gt; node
node&amp;gt; console.log('hello world')
node&amp;gt; "hello world"
node&amp;gt; .exit
cmd&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the browser side this of kind of direct execution of JavaScript file and/or terminal REPL environment doesn't work. &lt;/p&gt;

&lt;p&gt;You have the browser console, accessible via the inspection tool - but this browser console doesn't actually let you call JavaScript files to be executed directly nor give you a REPL to directly interact with server/machine resources. &lt;/p&gt;

&lt;p&gt;You don't have the ability to directly call a JS file and execute it's functionality from the browser. You need to load the JS file into an HTML document and then allow the browser to pull the source code and ultimately run the JavaScript.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#system-access"&gt;
  &lt;/a&gt;
  System Access
&lt;/h3&gt;




&lt;p&gt;The browser sandboxes JavaScript for your safety.&lt;/p&gt;

&lt;p&gt;Node.js provides developers with full access to the system like any other native application.&lt;/p&gt;

&lt;p&gt;This means node.js can read and write directly to and from the file system, has unrestricted access to the network, and can execute software installed on the machine. &lt;/p&gt;

&lt;p&gt;This also means that you must treat node.js with more caution - you're not sand boxed, you can do all the things. With great power comes great responsibility.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#global-vs-window"&gt;
  &lt;/a&gt;
  Global vs. Window
&lt;/h3&gt;




&lt;p&gt;In browser-side JS we have the &lt;code&gt;window&lt;/code&gt; object. This is the upmost parent object in front-end/client-side JS. &lt;/p&gt;

&lt;p&gt;In server-side JS we have the &lt;code&gt;global&lt;/code&gt; object. This is the most publicly/globally accessible object in node.js. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#similarities-between-nodejs-and-browser-side-js"&gt;
  &lt;/a&gt;
  Similarities between Node.js and Browser side JS
&lt;/h3&gt;




&lt;ul&gt;
&lt;li&gt;Both have a single thread for running JavaScript&lt;/li&gt;
&lt;li&gt;Both use the Event Queue (Lookup Event loop for further details) &lt;/li&gt;
&lt;li&gt;Both are non-blocking&lt;/li&gt;
&lt;li&gt;Both have sync and asyn capabilities &lt;/li&gt;
&lt;li&gt;Both use exceptions, flow, and scoping identically&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>coding</category>
      <category>programming</category>
    </item>
    <item>
      <title>Compare Things In JavaScript [Explained in A Gross Amount of Detail]</title>
      <author>Clean Code Studio</author>
      <pubDate>Sun, 08 Aug 2021 04:37:16 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/how-to-actually-compare-things-in-javascript-testing-comparison-operations-259j</link>
      <guid>https://dev.to/cleancodestudio/how-to-actually-compare-things-in-javascript-testing-comparison-operations-259j</guid>
      <description>&lt;center&gt;
&lt;br&gt;
Ever get stuck wondering if you need...&lt;br&gt;
&lt;/center&gt;


&lt;center&gt;
&lt;br&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;isLooselyEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;isStrictlyEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;






&lt;/center&gt;





&lt;center&gt;
&lt;br&gt;
I know I sure have.&lt;br&gt;
&lt;/center&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Testing and Comparison Operations - the actual definitions.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is content pulled directly from &lt;a href="https://tc39.es/ecma262/"&gt;ECMAscript specifications&lt;/a&gt;(Not written by me). It defines specifically how comparisons/testing operations work to an almost grows amount of detail. Good reference to have if you're unsure whether you need two equal signs or one equal sign to check if two things are the same or different.&lt;/em&gt; &lt;/p&gt;


&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#722-isarray-argument-"&gt;
  &lt;/a&gt;
  7.2.2 IsArray ( argument )
&lt;/h2&gt;




&lt;p&gt;The abstract operation IsArray takes argument argument. It performs the following steps when called:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 1. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(argument) is not Object, return false.&lt;/li&gt;
&lt;li&gt; 2. If argument is an &lt;a href="https://tc39.es/ecma262/#array-exotic-object"&gt;Array exotic object&lt;/a&gt;, return true.&lt;/li&gt;
&lt;li&gt; 3. If argument is a &lt;a href="https://tc39.es/ecma262/#proxy-exotic-object"&gt;Proxy exotic object&lt;/a&gt;, then

&lt;ol&gt;
&lt;li&gt; a. If argument.[[ProxyHandler]] is null, throw a TypeError exception.&lt;/li&gt;
&lt;li&gt; b. Let target be argument.[[ProxyTarget]].&lt;/li&gt;
&lt;li&gt; c. Return ?¬†&lt;a href="https://tc39.es/ecma262/#sec-isarray"&gt;IsArray&lt;/a&gt;(target).&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt; 4. Return false.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#723-iscallable-argument-"&gt;
  &lt;/a&gt;
  7.2.3 IsCallable ( argument )
&lt;/h2&gt;




&lt;p&gt;The abstract operation IsCallable takes argument argument (an &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-language-types"&gt;ECMAScript language value&lt;/a&gt;). It determines if argument is a callable function with a [[Call]] internal method. It performs the following steps when called:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 1. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(argument) is not Object, return false.&lt;/li&gt;
&lt;li&gt; 2. If argument has a [[Call]] internal method, return true.&lt;/li&gt;
&lt;li&gt; 3. Return false.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#724-isconstructor-argument-"&gt;
  &lt;/a&gt;
  7.2.4 IsConstructor ( argument )
&lt;/h2&gt;




&lt;p&gt;The abstract operation IsConstructor takes argument argument (an &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-language-types"&gt;ECMAScript language value&lt;/a&gt;). It determines if argument is a &lt;a href="https://tc39.es/ecma262/#function-object"&gt;function object&lt;/a&gt; with a [[Construct]] internal method. It performs the following steps when called:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 1. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(argument) is not Object, return false.&lt;/li&gt;
&lt;li&gt; 2. If argument has a [[Construct]] internal method, return true.&lt;/li&gt;
&lt;li&gt; 3. Return false.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#725-isextensible-o-"&gt;
  &lt;/a&gt;
  7.2.5 IsExtensible ( O )
&lt;/h2&gt;




&lt;p&gt;The abstract operation IsExtensible takes argument O (an Object). It returns a completion record which, if its [[Type]] is normal, has a [[Value]] which is a Boolean. It is used to determine whether additional properties can be added to O. It performs the following steps when called:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 1. &lt;a href="https://tc39.es/ecma262/#assert"&gt;Assert&lt;/a&gt;: &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(O) is Object.&lt;/li&gt;
&lt;li&gt; 2. Return ? O.[[IsExtensible]]().&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#726-isintegralnumber-argument-"&gt;
  &lt;/a&gt;
  7.2.6 IsIntegralNumber ( argument )
&lt;/h2&gt;




&lt;p&gt;The abstract operation IsIntegralNumber takes argument argument. It determines if argument is a finite &lt;a href="https://tc39.es/ecma262/#integral-number"&gt;integral Number&lt;/a&gt; value. It performs the following steps when called:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 1. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(argument) is not Number, return false.&lt;/li&gt;
&lt;li&gt; 2. If argument is NaN, +‚àûùîΩ, or -‚àûùîΩ, return false.&lt;/li&gt;
&lt;li&gt; 3. If &lt;a href="https://tc39.es/ecma262/#eqn-floor"&gt;floor&lt;/a&gt;(&lt;a href="https://tc39.es/ecma262/#eqn-abs"&gt;abs&lt;/a&gt;(&lt;a href="https://tc39.es/ecma262/#%E2%84%9D"&gt;‚Ñù&lt;/a&gt;(argument))) ‚â† &lt;a href="https://tc39.es/ecma262/#eqn-abs"&gt;abs&lt;/a&gt;(&lt;a href="https://tc39.es/ecma262/#%E2%84%9D"&gt;‚Ñù&lt;/a&gt;(argument)), return false.&lt;/li&gt;
&lt;li&gt; 4. Return true.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#727-ispropertykey-argument-"&gt;
  &lt;/a&gt;
  7.2.7 IsPropertyKey ( argument )
&lt;/h2&gt;




&lt;p&gt;The abstract operation IsPropertyKey takes argument argument (an &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-language-types"&gt;ECMAScript language value&lt;/a&gt;). It determines if argument is a value that may be used as a property key. It performs the following steps when called:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 1. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(argument) is String, return true.&lt;/li&gt;
&lt;li&gt; 2. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(argument) is Symbol, return true.&lt;/li&gt;
&lt;li&gt; 3. Return false.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#728-isregexp-argument-"&gt;
  &lt;/a&gt;
  7.2.8 IsRegExp ( argument )
&lt;/h2&gt;




&lt;p&gt;The abstract operation IsRegExp takes argument argument. It performs the following steps when called:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 1. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(argument) is not Object, return false.&lt;/li&gt;
&lt;li&gt; 2. Let matcher be ?¬†&lt;a href="https://tc39.es/ecma262/#sec-get-o-p"&gt;Get&lt;/a&gt;(argument, &lt;a href="https://tc39.es/ecma262/#sec-well-known-symbols"&gt;@@match&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt; 3. If matcher is not undefined, return !¬†&lt;a href="https://tc39.es/ecma262/#sec-toboolean"&gt;ToBoolean&lt;/a&gt;(matcher).&lt;/li&gt;
&lt;li&gt; 4. If argument has a [[RegExpMatcher]] internal slot, return true.&lt;/li&gt;
&lt;li&gt; 5. Return false.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#729-isstringprefix-p-q-"&gt;
  &lt;/a&gt;
  7.2.9 IsStringPrefix ( p, q )
&lt;/h2&gt;




&lt;p&gt;The abstract operation IsStringPrefix takes arguments p (a String) and q (a String). It determines if p is a prefix of q. It performs the following steps when called:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 1. &lt;a href="https://tc39.es/ecma262/#assert"&gt;Assert&lt;/a&gt;: &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(p) is String.&lt;/li&gt;
&lt;li&gt; 2. &lt;a href="https://tc39.es/ecma262/#assert"&gt;Assert&lt;/a&gt;: &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(q) is String.&lt;/li&gt;
&lt;li&gt; 3. If q can be the &lt;a href="https://tc39.es/ecma262/#string-concatenation"&gt;string-concatenation&lt;/a&gt; of p and some other String r, return true. Otherwise, return false.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Note

Any String is a prefix of itself, because r may be the empty String.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#7210-samevalue-x-y-"&gt;
  &lt;/a&gt;
  7.2.10 SameValue ( x, y )
&lt;/h2&gt;




&lt;p&gt;The abstract operation SameValue takes arguments x (an &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-language-types"&gt;ECMAScript language value&lt;/a&gt;) and y (an &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-language-types"&gt;ECMAScript language value&lt;/a&gt;). It returns a completion record whose [[Type]] is normal and whose [[Value]] is a Boolean. It performs the following steps when called:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 1. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x) is different from &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(y), return false.&lt;/li&gt;
&lt;li&gt; 2. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x) is Number or BigInt, then

&lt;ol&gt;
&lt;li&gt; a. Return !¬†&lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x)::sameValue(x, y).&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt; 3. Return !¬†&lt;a href="https://tc39.es/ecma262/#sec-samevaluenonnumeric"&gt;SameValueNonNumeric&lt;/a&gt;(x, y).
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Note

This algorithm differs from the [IsStrictlyEqual](https://tc39.es/ecma262/#sec-isstrictlyequal) Algorithm in its treatment of signed zeroes and NaNs.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#7211-samevaluezero-x-y-"&gt;
  &lt;/a&gt;
  7.2.11 SameValueZero ( x, y )
&lt;/h2&gt;




&lt;p&gt;The abstract operation SameValueZero takes arguments x (an &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-language-types"&gt;ECMAScript language value&lt;/a&gt;) and y (an &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-language-types"&gt;ECMAScript language value&lt;/a&gt;). It returns a completion record whose [[Type]] is normal and whose [[Value]] is a Boolean. It performs the following steps when called:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 1. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x) is different from &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(y), return false.&lt;/li&gt;
&lt;li&gt; 2. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x) is Number or BigInt, then

&lt;ol&gt;
&lt;li&gt; a. Return !¬†&lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x)::sameValueZero(x, y).&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt; 3. Return !¬†&lt;a href="https://tc39.es/ecma262/#sec-samevaluenonnumeric"&gt;SameValueNonNumeric&lt;/a&gt;(x, y).
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Note

SameValueZero differs from [SameValue](https://tc39.es/ecma262/#sec-samevalue) only in its treatment of +0ùîΩ and \-0ùîΩ.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#7212-samevaluenonnumeric-x-y-"&gt;
  &lt;/a&gt;
  7.2.12 SameValueNonNumeric ( x, y )
&lt;/h2&gt;




&lt;p&gt;The abstract operation SameValueNonNumeric takes arguments x (an &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-language-types"&gt;ECMAScript language value&lt;/a&gt;) and y (an &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-language-types"&gt;ECMAScript language value&lt;/a&gt;). It returns a completion record whose [[Type]] is normal and whose [[Value]] is a Boolean. It performs the following steps when called:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 1. &lt;a href="https://tc39.es/ecma262/#assert"&gt;Assert&lt;/a&gt;: &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x) is not Number or BigInt.&lt;/li&gt;
&lt;li&gt; 2. &lt;a href="https://tc39.es/ecma262/#assert"&gt;Assert&lt;/a&gt;: &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x) is the same as &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(y).&lt;/li&gt;
&lt;li&gt; 3. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x) is Undefined, return true.&lt;/li&gt;
&lt;li&gt; 4. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x) is Null, return true.&lt;/li&gt;
&lt;li&gt; 5. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x) is String, then

&lt;ol&gt;
&lt;li&gt; a. If x and y are exactly the same sequence of code units (same length and same code units at corresponding indices), return true; otherwise, return false.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt; 6. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x) is Boolean, then

&lt;ol&gt;
&lt;li&gt; a. If x and y are both true or both false, return true; otherwise, return false.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt; 7. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x) is Symbol, then

&lt;ol&gt;
&lt;li&gt; a. If x and y are both the same Symbol value, return true; otherwise, return false.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt; 8. If x and y are the same Object value, return true. Otherwise, return false.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#7213-islessthan-x-y-leftfirst-"&gt;
  &lt;/a&gt;
  7.2.13 IsLessThan ( x, y, LeftFirst )
&lt;/h2&gt;




&lt;p&gt;The abstract operation IsLessThan takes arguments x (an &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-language-types"&gt;ECMAScript language value&lt;/a&gt;), y (an &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-language-types"&gt;ECMAScript language value&lt;/a&gt;), and LeftFirst (a Boolean). It provides the semantics for the comparison x &amp;lt; y, returning true, false, or undefined (which indicates that at least one operand is NaN). The LeftFirst flag is used to control the order in which operations with potentially visible side-effects are performed upon x and y. It is necessary because ECMAScript specifies left to right evaluation of expressions. If LeftFirst is true, the x parameter corresponds to an expression that occurs to the left of the y parameter's corresponding expression. If LeftFirst is false, the reverse is the case and operations must be performed upon y before x. It performs the following steps when called:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 1. If the LeftFirst flag is true, then

&lt;ol&gt;
&lt;li&gt; a. Let px be ?¬†&lt;a href="https://tc39.es/ecma262/#sec-toprimitive"&gt;ToPrimitive&lt;/a&gt;(x, number).&lt;/li&gt;
&lt;li&gt; b. Let py be ?¬†&lt;a href="https://tc39.es/ecma262/#sec-toprimitive"&gt;ToPrimitive&lt;/a&gt;(y, number).&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt; 2. Else,

&lt;ol&gt;
&lt;li&gt; a. NOTE: The order of evaluation needs to be reversed to preserve left to right evaluation.&lt;/li&gt;
&lt;li&gt; b. Let py be ?¬†&lt;a href="https://tc39.es/ecma262/#sec-toprimitive"&gt;ToPrimitive&lt;/a&gt;(y, number).&lt;/li&gt;
&lt;li&gt; c. Let px be ?¬†&lt;a href="https://tc39.es/ecma262/#sec-toprimitive"&gt;ToPrimitive&lt;/a&gt;(x, number).&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt; 3. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(px) is String and &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(py) is String, then

&lt;ol&gt;
&lt;li&gt; a. If &lt;a href="https://tc39.es/ecma262/#sec-isstringprefix"&gt;IsStringPrefix&lt;/a&gt;(py, px) is true, return false.&lt;/li&gt;
&lt;li&gt; b. If &lt;a href="https://tc39.es/ecma262/#sec-isstringprefix"&gt;IsStringPrefix&lt;/a&gt;(px, py) is true, return true.&lt;/li&gt;
&lt;li&gt; c. Let k be the smallest non-negative &lt;a href="https://tc39.es/ecma262/#integer"&gt;integer&lt;/a&gt; such that the code unit at index k within px is different from the code unit at index k within py. (There must be such a k, for neither String is a prefix of the other.)&lt;/li&gt;
&lt;li&gt; d. Let m be the &lt;a href="https://tc39.es/ecma262/#integer"&gt;integer&lt;/a&gt; that is the numeric value of the code unit at index k within px.&lt;/li&gt;
&lt;li&gt; e. Let n be the &lt;a href="https://tc39.es/ecma262/#integer"&gt;integer&lt;/a&gt; that is the numeric value of the code unit at index k within py.&lt;/li&gt;
&lt;li&gt; f. If m &amp;lt; n, return true. Otherwise, return false.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt; 4. Else,

&lt;ol&gt;
&lt;li&gt; a. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(px) is BigInt and &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(py) is String, then

&lt;ol&gt;
&lt;li&gt; i. Let ny be !¬†&lt;a href="https://tc39.es/ecma262/#sec-stringtobigint"&gt;StringToBigInt&lt;/a&gt;(py).&lt;/li&gt;
&lt;li&gt; ii. If ny is NaN, return undefined.&lt;/li&gt;
&lt;li&gt; iii. Return &lt;a href="https://tc39.es/ecma262/#sec-numeric-types-bigint-lessThan"&gt;BigInt::lessThan&lt;/a&gt;(px, ny).&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt; b. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(px) is String and &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(py) is BigInt, then

&lt;ol&gt;
&lt;li&gt; i. Let nx be !¬†&lt;a href="https://tc39.es/ecma262/#sec-stringtobigint"&gt;StringToBigInt&lt;/a&gt;(px).&lt;/li&gt;
&lt;li&gt; ii. If nx is NaN, return undefined.&lt;/li&gt;
&lt;li&gt; iii. Return &lt;a href="https://tc39.es/ecma262/#sec-numeric-types-bigint-lessThan"&gt;BigInt::lessThan&lt;/a&gt;(nx, py).&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt; c. NOTE: Because px and py are primitive values, evaluation order is not important.&lt;/li&gt;
&lt;li&gt; d. Let nx be ?¬†&lt;a href="https://tc39.es/ecma262/#sec-tonumeric"&gt;ToNumeric&lt;/a&gt;(px).&lt;/li&gt;
&lt;li&gt; e. Let ny be ?¬†&lt;a href="https://tc39.es/ecma262/#sec-tonumeric"&gt;ToNumeric&lt;/a&gt;(py).&lt;/li&gt;
&lt;li&gt; f. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(nx) is the same as &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(ny), return &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(nx)::lessThan(nx, ny).&lt;/li&gt;
&lt;li&gt; g. &lt;a href="https://tc39.es/ecma262/#assert"&gt;Assert&lt;/a&gt;: &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(nx) is BigInt and &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(ny) is Number, or &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(nx) is Number and &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(ny) is BigInt.&lt;/li&gt;
&lt;li&gt; h. If nx or ny is NaN, return undefined.&lt;/li&gt;
&lt;li&gt; i. If nx is -‚àûùîΩ or ny is +‚àûùîΩ, return true.&lt;/li&gt;
&lt;li&gt; j. If nx is +‚àûùîΩ or ny is -‚àûùîΩ, return false.&lt;/li&gt;
&lt;li&gt; k. If &lt;a href="https://tc39.es/ecma262/#%E2%84%9D"&gt;‚Ñù&lt;/a&gt;(nx) &amp;lt; &lt;a href="https://tc39.es/ecma262/#%E2%84%9D"&gt;‚Ñù&lt;/a&gt;(ny), return true; otherwise return false.
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Note 1

Step [3](https://tc39.es/ecma262/#step-arc-string-check) differs from step [2.c](https://tc39.es/ecma262/#step-binary-op-string-check) in the algorithm that handles the addition operator `+` ([13.15.3](https://tc39.es/ecma262/#sec-applystringornumericbinaryoperator)) by using the logical-and operation instead of the logical-or operation.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Note 2

The comparison of Strings uses a simple lexicographic ordering on sequences of code unit values. There is no attempt to use the more complex, semantically oriented definitions of character or string equality and collating order defined in the Unicode specification. Therefore String values that are canonically equal according to the Unicode standard could test as unequal. In effect this algorithm assumes that both Strings are already in normalized form. Also, note that for strings containing supplementary characters, lexicographic ordering on sequences of UTF-16 code unit values differs from that on sequences of code point values.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#7214-islooselyequal-x-y-"&gt;
  &lt;/a&gt;
  7.2.14 IsLooselyEqual ( x, y )
&lt;/h2&gt;




&lt;p&gt;The abstract operation IsLooselyEqual takes arguments x (an &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-language-types"&gt;ECMAScript language value&lt;/a&gt;) and y (an &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-language-types"&gt;ECMAScript language value&lt;/a&gt;). It provides the semantics for the comparison x == y, returning true or false. It performs the following steps when called:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 1. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x) is the same as &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(y), then

&lt;ol&gt;
&lt;li&gt; a. Return &lt;a href="https://tc39.es/ecma262/#sec-isstrictlyequal"&gt;IsStrictlyEqual&lt;/a&gt;(x, y).&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt; 2. If x is null and y is undefined, return true.&lt;/li&gt;
&lt;li&gt; 3. If x is undefined and y is null, return true.&lt;/li&gt;
&lt;li&gt; 4. NOTE: This step is replaced in section &lt;a href="https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec"&gt;B.3.6.2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; 5. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x) is Number and &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(y) is String, return &lt;a href="https://tc39.es/ecma262/#sec-islooselyequal"&gt;IsLooselyEqual&lt;/a&gt;(x, !¬†&lt;a href="https://tc39.es/ecma262/#sec-tonumber"&gt;ToNumber&lt;/a&gt;(y)).&lt;/li&gt;
&lt;li&gt; 6. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x) is String and &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(y) is Number, return &lt;a href="https://tc39.es/ecma262/#sec-islooselyequal"&gt;IsLooselyEqual&lt;/a&gt;(! &lt;a href="https://tc39.es/ecma262/#sec-tonumber"&gt;ToNumber&lt;/a&gt;(x), y).&lt;/li&gt;
&lt;li&gt; 7. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x) is BigInt and &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(y) is String, then

&lt;ol&gt;
&lt;li&gt; a. Let n be !¬†&lt;a href="https://tc39.es/ecma262/#sec-stringtobigint"&gt;StringToBigInt&lt;/a&gt;(y).&lt;/li&gt;
&lt;li&gt; b. If n is NaN, return false.&lt;/li&gt;
&lt;li&gt; c. Return &lt;a href="https://tc39.es/ecma262/#sec-islooselyequal"&gt;IsLooselyEqual&lt;/a&gt;(x, n).&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt; 8. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x) is String and &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(y) is BigInt, return &lt;a href="https://tc39.es/ecma262/#sec-islooselyequal"&gt;IsLooselyEqual&lt;/a&gt;(y, x).&lt;/li&gt;
&lt;li&gt; 9. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x) is Boolean, return &lt;a href="https://tc39.es/ecma262/#sec-islooselyequal"&gt;IsLooselyEqual&lt;/a&gt;(! &lt;a href="#sec-tonumber"&gt;ToNumber&lt;/a&gt;(x), y).&lt;/li&gt;
&lt;li&gt; 10. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(y) is Boolean, return &lt;a href="https://tc39.es/ecma262/#sec-islooselyequal"&gt;IsLooselyEqual&lt;/a&gt;(x, !¬†&lt;a href="#sec-tonumber"&gt;ToNumber&lt;/a&gt;(y)).&lt;/li&gt;
&lt;li&gt; 11. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x) is either String, Number, BigInt, or Symbol and &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(y) is Object, return &lt;a href="https://tc39.es/ecma262/#sec-islooselyequal"&gt;IsLooselyEqual&lt;/a&gt;(x, ?¬†&lt;a href="https://tc39.es/ecma262/#sec-toprimitive"&gt;ToPrimitive&lt;/a&gt;(y)).&lt;/li&gt;
&lt;li&gt; 12. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x) is Object and &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(y) is either String, Number, BigInt, or Symbol, return &lt;a href="https://tc39.es/ecma262/#sec-islooselyequal"&gt;IsLooselyEqual&lt;/a&gt;(? &lt;a href="https://tc39.es/ecma262/#sec-toprimitive"&gt;ToPrimitive&lt;/a&gt;(x), y).&lt;/li&gt;
&lt;li&gt; 13. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x) is BigInt and &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(y) is Number, or if &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x) is Number and &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(y) is BigInt, then

&lt;ol&gt;
&lt;li&gt; a. If x or y are any of NaN, +‚àûùîΩ, or -‚àûùîΩ, return false.&lt;/li&gt;
&lt;li&gt; b. If &lt;a href="https://tc39.es/ecma262/#%E2%84%9D"&gt;‚Ñù&lt;/a&gt;(x) = &lt;a href="https://tc39.es/ecma262/#%E2%84%9D"&gt;‚Ñù&lt;/a&gt;(y), return true; otherwise return false.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt; 14. Return false.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#7215-isstrictlyequal-x-y-"&gt;
  &lt;/a&gt;
  7.2.15 IsStrictlyEqual ( x, y )
&lt;/h2&gt;




&lt;p&gt;The abstract operation IsStrictlyEqual takes arguments x (an &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-language-types"&gt;ECMAScript language value&lt;/a&gt;) and y (an &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-language-types"&gt;ECMAScript language value&lt;/a&gt;). It provides the semantics for the comparison x === y, returning true or false. It performs the following steps when called:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 1. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x) is different from &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(y), return false.&lt;/li&gt;
&lt;li&gt; 2. If &lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x) is Number or BigInt, then

&lt;ol&gt;
&lt;li&gt; a. Return !¬†&lt;a href="https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values"&gt;Type&lt;/a&gt;(x)::equal(x, y).&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt; 3. Return !¬†&lt;a href="https://tc39.es/ecma262/#sec-samevaluenonnumeric"&gt;SameValueNonNumeric&lt;/a&gt;(x, y).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note&lt;/p&gt;

&lt;p&gt;This algorithm differs from the &lt;a href="https://tc39.es/ecma262/#sec-samevalue"&gt;SameValue&lt;/a&gt; Algorithm in its treatment of signed zeroes and NaNs.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>coding</category>
      <category>testing</category>
      <category>node</category>
    </item>
    <item>
      <title>Create a Netflix clone from Scratch: JavaScript PHP + MySQL Day 13</title>
      <author>Christopher Glikpo</author>
      <pubDate>Sun, 08 Aug 2021 04:28:09 +0000</pubDate>
      <link>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-13-35o9</link>
      <guid>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-13-35o9</guid>
      <description>&lt;p&gt;Netflix provides streaming movies and TV shows to over 75 million subscribers across&lt;br&gt;
the globe. Customers can watch as many shows/ movies as they want as long as they are&lt;br&gt;
connected to the internet for a monthly subscription fee of about ten dollars. Netflix produces&lt;br&gt;
original content and also pays for the rights to stream feature films and shows.&lt;/p&gt;

&lt;p&gt;In this video,we will create account class&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jhzK3cwn-c8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this video,we will create a functionalities to validate email&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0ue1840lKU4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like my work, please consider&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/cglikpo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c23TxQOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm11knj7d8zwcvo150q2.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;br&gt;
so that I can bring more projects, more articles for you&lt;/p&gt;

&lt;p&gt;If you want to learn more about Web Development, feel free to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How To Get Make Target Tab Completion in Vim </title>
      <author>Peter Benjamin</author>
      <pubDate>Sun, 08 Aug 2021 04:26:09 +0000</pubDate>
      <link>https://dev.to/pbnj/how-to-get-make-target-tab-completion-in-vim-4mj1</link>
      <guid>https://dev.to/pbnj/how-to-get-make-target-tab-completion-in-vim-4mj1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#problem"&gt;Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#solution"&gt;Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#improved"&gt;Improved&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;p&gt;If you use &lt;code&gt;make&lt;/code&gt; frequently, you may be aware that you can tab complete targets in bash. For example, &lt;code&gt;$ make cl&amp;lt;TAB&amp;gt; ins&amp;lt;TAB&amp;gt;&lt;/code&gt; may autocomplete to &lt;code&gt;clean&lt;/code&gt; then &lt;code&gt;install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In vim, however, if you type &lt;code&gt;:make &amp;lt;TAB&amp;gt;&lt;/code&gt;, by default, vim attempts to autocomplete file names.&lt;/p&gt;

&lt;p&gt;This blog post will show you how you can get vim to autocomplete &lt;code&gt;&amp;lt;TAB&amp;gt;&lt;/code&gt; with target names from your &lt;code&gt;Makefile&lt;/code&gt; instead.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;I recently came across &lt;a href="https://unix.stackexchange.com/questions/230047/how-to-list-all-targets-in-make"&gt;this&lt;/a&gt; StackOverflow question, &lt;em&gt;How to list all targets in make?&lt;/em&gt;, in which the answer is bash's completion logic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;make &lt;span class="nt"&gt;-qp&lt;/span&gt; |
    &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="nt"&gt;-F&lt;/span&gt;&lt;span class="s1"&gt;':'&lt;/span&gt; &lt;span class="s1"&gt;'/^[a-zA-Z0-9][^$#\/\t=]*:([^=]|$)/ {split($1,A,/ /);for(i in A)print A[i]}'&lt;/span&gt; |
    &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nt"&gt;-u&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will print out a newline-delimited list of possible targets from the Makefile in your current working directory.&lt;/p&gt;

&lt;p&gt;With this set of commands, we can write a custom vimscript function that executes them and returns the output as completion candidates for a vim command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; MakeCompletion&lt;span class="p"&gt;()&lt;/span&gt; abort
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;systemlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'make -qp | awk -F'':'' ''/^[a-zA-Z0-9][^$#\/\t=]*:([^=]|$)/ {split($1,A,/ /);for(i in A)print A[i]}'' | grep -v Makefile | sort -u'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

command&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;nargs&lt;span class="p"&gt;=&lt;/span&gt;* &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;customlist&lt;span class="p"&gt;,&lt;/span&gt;MakeCompletion Make &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="k"&gt;make&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;args&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This alone is a great accomplishment. If you type &lt;code&gt;:Make &amp;lt;TAB&amp;gt;&lt;/code&gt;, you can cycle through all the possible make targets!&lt;/p&gt;

&lt;p&gt;However, you may notice that if you type part of a target name and hit &lt;code&gt;&amp;lt;TAB&amp;gt;&lt;/code&gt;, vim will ignore the partial input and cycle through from the beginning of the list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improved"&gt;
  &lt;/a&gt;
  Improved
&lt;/h2&gt;

&lt;p&gt;If you read &lt;code&gt;:help :command-completion-customlist&lt;/code&gt;, you will discover that the function can take 3 arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The function arguments are:
    ArgLead     the leading portion of the argument currently being completed on
    CmdLine     the entire command line
    CursorPos   the cursor position in it (byte index)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So let's modify our &lt;code&gt;MakeCompletion()&lt;/code&gt; function to support filtering results based on &lt;code&gt;ArgLead&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; MakeCompletion&lt;span class="p"&gt;(&lt;/span&gt;A&lt;span class="p"&gt;,&lt;/span&gt;L&lt;span class="p"&gt;,&lt;/span&gt;P&lt;span class="p"&gt;)&lt;/span&gt; abort
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;targets &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;systemlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'make -qp | awk -F'':'' ''/^[a-zA-Z0-9][^$#\/\t=]*:([^=]|$)/ {split($1,A,/ /);for(i in A)print A[i]}'' | grep -v Makefile | sort -u'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;targets&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'v:val =~ "^'&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;a:A&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'"'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

command&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;nargs&lt;span class="p"&gt;=&lt;/span&gt;* &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;customlist&lt;span class="p"&gt;,&lt;/span&gt;MakeCompletion Make &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="k"&gt;make&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;args&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when you type &lt;code&gt;:Make cl&amp;lt;TAB&amp;gt; ins&amp;lt;TAB&amp;gt;&lt;/code&gt;, it will successfully auto-complete to &lt;code&gt;:Make clean install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I hope you find this short vim tip helpful.&lt;/p&gt;

&lt;p&gt;For more vim goodies, check out my &lt;a href="https://github.com/pbnj/dotfiles/blob/main/vim/.vim/vimrc"&gt;vimrc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy hacking! &lt;/p&gt;

</description>
      <category>vim</category>
      <category>make</category>
      <category>linux</category>
    </item>
  </channel>
</rss>
