<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Java vs Python</title>
      <author>Konchada Sai Ansul</author>
      <pubDate>Mon, 12 Apr 2021 18:30:24 +0000</pubDate>
      <link>https://dev.to/saiansulsblog/java-vs-python-5fla</link>
      <guid>https://dev.to/saiansulsblog/java-vs-python-5fla</guid>
      <description>&lt;p&gt;Hello Guys, Welcome back to another post of &lt;strong&gt;Sai Ansul's Blog&lt;/strong&gt;.&lt;br&gt;
In this blog we are gonna find which programming language is better.&lt;/p&gt;

&lt;p&gt;So let's start,&lt;/p&gt;

&lt;p&gt;Firstly let us know what is programming? &lt;br&gt;&lt;br&gt;
Programming is the way we can make the computer perform various tasks.&lt;/p&gt;

&lt;p&gt;What is programming language? &lt;br&gt;&lt;br&gt;
It is a formal language to perform various tasks, there are several protocols and algorithms to be followed.&lt;/p&gt;

&lt;p&gt;Let us know the types of programming languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Procedural Programming Language. &lt;/li&gt;
&lt;li&gt;Functional Programming Language. &lt;/li&gt;
&lt;li&gt;Object-oriented Programming Language. &lt;/li&gt;
&lt;li&gt;Scripting Programming Language. &lt;/li&gt;
&lt;li&gt;Logic Programming Language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some names of programming language are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C++ Language. &lt;/li&gt;
&lt;li&gt;C Language. &lt;/li&gt;
&lt;li&gt;Pascal Language.&lt;/li&gt;
&lt;li&gt;Python Language.&lt;/li&gt;
&lt;li&gt;Java Language.&lt;/li&gt;
&lt;li&gt;Perl Language&lt;/li&gt;
&lt;li&gt;Lisp Language&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-comparison-factors-are"&gt;
  &lt;/a&gt;
  The Comparison Factors are &lt;br&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Speed
&lt;/li&gt;
&lt;li&gt;Legacy
&lt;/li&gt;
&lt;li&gt;Code
&lt;/li&gt;
&lt;li&gt;Practical Agility
&lt;/li&gt;
&lt;li&gt;Trends
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-speed"&gt;
  &lt;/a&gt;
  1. Speed
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HJl57eej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614613345245/zTg0kFpcL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HJl57eej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614613345245/zTg0kFpcL.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
In the terms of speed Java is faster than Python as it is a compiled language, so it takes less time to carry out the program as compared Python is an interpreter language and it takes more time than Java language to carry out the program.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-legacy"&gt;
  &lt;/a&gt;
  2. Legacy
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q71TDESk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614613782923/7cbAl7gJf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q71TDESk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614613782923/7cbAl7gJf.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java's legacy problems are typically larger and more numerous than python’s .&lt;br&gt;
Python has less legacy problem so world finds difficulty for the script to copy and paste codes and gives it a slight edge over the other languages.&lt;/p&gt;

&lt;p&gt;The other confusion that arises when we say that the two languages that is which one is easier between Java &amp;amp; python. So let’s have a look at the number of lines required while writing a code in both the languages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-code"&gt;
  &lt;/a&gt;
  3. Code
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e5LYPCPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614614056196/VedCUfUbD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e5LYPCPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614614056196/VedCUfUbD.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Java is very talkative as compared to Python. It takes 10 lines of code to read from a file in Java.&lt;br&gt;
Python only takes 2 lines of code in Python. This makes Python a more preferable language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-practical-agility"&gt;
  &lt;/a&gt;
  4. Practical Agility
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1YAvEi1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614616253879/zbH93Al2K.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1YAvEi1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614616253879/zbH93Al2K.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Java enjoys more support than python thanks to its static type system and universality of IDE’s in development. It is more popular for mobile and web apps.&lt;br&gt;
Python has an existence in the talent space and is considered to be the most favorable language for Machine Learning, Artificial Intelligence, Internet of Things and a lot more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-trends"&gt;
  &lt;/a&gt;
  5. Trends
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4QpfZz-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614616478560/PkqM5SUSL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4QpfZz-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614616478560/PkqM5SUSL.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
While not as trendy as Java was, it is still the most popular programming language by virtually any measure. On the other hand, Python’s growth has been astronomical, especially in developed, high-income countries. The reasons for this amazing growth include developer productivity, language flexibility, library support, community support, and ease of learning.&lt;/p&gt;

&lt;p&gt;Now with this, we come to an end of this comparison on Java vs Python. Python has a slight edge over Java and wins the battle in most of the factors. So, if you have read this, you might have a clear idea about which programming language is better and which one you should use.&lt;/p&gt;

&lt;p&gt;If you liked this blog and want to support my efforts, do share it with as many friends as possible. And feel free to drop in suggestions for improvements.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>computerscience</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Your Static Site to a PWA!</title>
      <author>Rishi Vishwakarma</author>
      <pubDate>Mon, 12 Apr 2021 17:54:49 +0000</pubDate>
      <link>https://dev.to/prorishi/your-static-site-to-a-pwa-24dl</link>
      <guid>https://dev.to/prorishi/your-static-site-to-a-pwa-24dl</guid>
      <description>&lt;p&gt;A &lt;strong&gt;&lt;em&gt;Progressive Web App&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;PWA&lt;/em&gt;&lt;/strong&gt; for short, is a website with added native capabilities. They are installable just like normal apps and even work offline and run in a separate browser process. They also support features like push notifications etc. PWAs have recently rose in importance because of the features they offer. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Fun Fact:&lt;/em&gt;&lt;/strong&gt; DEV Community is also a PWA!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Building a basic PWA is not-so-difficult. Let's see how we can convert a static site into a PWA with a little changes.&lt;br&gt;
&lt;strong&gt;&lt;em&gt;But First things First, understand a little more&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Additional Components necessary for a PWA:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Manifest&lt;/li&gt;
&lt;li&gt;A Service Worker&lt;/li&gt;
&lt;li&gt;A HTTPS connection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us see their roles in building a PWA.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;&lt;em&gt;Manifest&lt;/em&gt;&lt;/strong&gt; is a JSON file that describes the properties of our PWA. It contains information like app name, theme-color, icons, app shortcuts etc.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;em&gt;Service Worker&lt;/em&gt;&lt;/strong&gt; is JS worker that runs in background process. It manages the state and cache of the app, handles notifications and syncs latest data with the offline one.&lt;/li&gt;
&lt;li&gt;HTTPS connection is needed for security purposes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here I am starting with a simple Clock made with the awesome trio (HTML, CSS, JS)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#try-the-app-first"&gt;
  &lt;/a&gt;
  Try the app first!!
&lt;/h3&gt;


&lt;div class="glitch-embed-wrap"&gt;
  &lt;iframe src="https://glitch.com/embed/#!/embed/clockkk?previewSize=100&amp;amp;path=index.html" alt="clockkk on glitch"&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://clockkk.glitch.me"&gt;Click here&lt;/a&gt; to be able to install it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-note"&gt;
  &lt;/a&gt;
  !!! Note:
&lt;/h2&gt;

&lt;h5&gt;
  &lt;a href="#not-all-browsers-support-pwa-now-but-support-will-come-soon-latest-versions-of-chrome-firefox-edge-support-it-recently"&gt;
  &lt;/a&gt;
  Not all browsers support PWA now but support will come soon. Latest versions of Chrome, FireFox, Edge support it recently.
&lt;/h5&gt;

&lt;p&gt;Our project structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/Clock
    +-- /components
    |      +-- /images
    |      |      +-- favicon.png
    |      |      +-- clock-face.png
    |      +-- /scripts
    |      |      +-- main.js
    |      |      +-- redirect.js
    |      |      +-- pwa-handler.js
    |      +-- /styles
    |             +-- main.css
    +-- index.html
    +-- manifest.json
    +-- service-worker.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;A-not-so-Fun Fact&lt;/em&gt;&lt;/strong&gt;: Adobe has discontinued their PhoneGap Build; which is a cloud service for building apps because of the rise of PWA.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
  &lt;a href="#indexhtml-gt-remember-to-link-the-manifest"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;index.html&lt;/em&gt;&lt;/strong&gt; -&amp;gt; Remember to link the manifest!
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- Some basic meta tags. --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"text/html;charset=UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, height=device-height,user-scalable=no, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!-- This one is important for the manifest. --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"theme-color"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"#0d085c"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Clock&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!-- Reference the StyleSheet. --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/components/main.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!-- Reference the manifest file; is must for PWA. --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"manifest"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/manifest.json"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!-- Reference the icons --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"shorcut icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/components/favicon.png"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/x-icon"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"apple-touch-icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/components/favicon.png"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Clock&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"install"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Install App&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"clocks"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"analog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"second"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"minute"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"hour"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"digital"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!-- Reference the main and helper scripts. --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/components/main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/components/pwa-handler.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#i-have-not-shown-the-maincss-and-mainjs-files-as-they-dont-do-much-with-the-pwa-but-you-could-find-them-on-the-github-repo"&gt;
  &lt;/a&gt;
  I have not shown the main.css and main.js files as they don't do much with the PWA but you could find them on the GitHub repo.
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#componentsscriptspwahandlerjs"&gt;
  &lt;/a&gt;
  /components/scripts/&lt;strong&gt;&lt;em&gt;pwa-handler.js&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Reference the serviceWorker.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;serviceWorker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serviceWorker&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Register our ServiceWorker script, if serviceWorker is available.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serviceWorker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;serviceWorker&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/service-worker.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ServiceWorker Registered to the Application!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Failed to Register the ServiceWorker.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create a variable to defer the beforeinstallprompt event.&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;beforeInstallEvent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Reference the install button from DOM.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;installButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;install&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Watch for the beforeinstallevent and defer it.&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;beforeinstallprompt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;beforeInstallEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;installButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Prompt for Installation when install button is clicked.&lt;/span&gt;
&lt;span class="nx"&gt;installButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;beforeInstallEvent&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Hide the install button as its purpose is over.&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outcome&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;accepted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;installButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I have provided a button for prompting for installation in the &lt;code&gt;index.html&lt;/code&gt; and it disappears as soon as the app is installed.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#componentsimagesfaviconpng"&gt;
  &lt;/a&gt;
  /components/images/&lt;strong&gt;&lt;em&gt;favicon.png&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l9gJDidl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://clockkk.glitch.me/components/images/favicon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l9gJDidl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://clockkk.glitch.me/components/images/favicon.png" alt="favicon.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#componentsimagesclockfacepng"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;/components/images/clock-face.png&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CkudBlQc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://clockkk.glitch.me/components/images/clock-face.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CkudBlQc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://clockkk.glitch.me/components/images/clock-face.png" alt="favicon.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#manifestjson-gt-a-512x512-icon-is-a-must"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;manifest.json&lt;/em&gt;&lt;/strong&gt; -&amp;gt; A 512x512 icon is a must!
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Clock"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"display"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"standalone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"theme_color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#0d085c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"icons"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/components/images/favicon.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"512x512"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"purpose"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"any maskable"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is a bare-minimum manifest file; you will find a whole bunch of other properties that are available upon searching.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#serviceworkerjs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;service-worker.js&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Name of the Cache.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CACHE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cacheV1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Select files for caching.&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;urlsToCache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/images&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/images/favicon.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/images/clock-face.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/scripts/main.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/scripts/pwa-handler.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/styles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/styles/main.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Cache all the selected items once application is installed.&lt;/span&gt;
&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;install&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CACHE&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Caching started.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urlsToCache&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Whenever a resource is requested, return if its cached else fetch the resourcefrom server.&lt;/span&gt;
&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;respondWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#with-this-much-knowledge-your-are-ready-to-dive-into-the-world-of-pwa"&gt;
  &lt;/a&gt;
  With this much knowledge your are ready to dive into the world of PWA.
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#here-is-the-github-repo"&gt;
  &lt;/a&gt;
  Here is the GitHub repo:
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/prorishi"&gt;
        prorishi
      &lt;/a&gt; / &lt;a href="https://github.com/prorishi/Clock"&gt;
        Clock
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Features an analog and digital clock with an installable PWA.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#thanks-for-your-time-and-do-reference-your-pwas-in-the-discussions-area"&gt;
  &lt;/a&gt;
  Thanks for your time and do Reference your PWAs in the discussions area.
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;btw this is my first post ever on Internet!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>pwa</category>
      <category>html</category>
    </item>
    <item>
      <title>I need some advice on Freelancing</title>
      <author>𝐋𝐄𝑽𝐈𝑨𝐓𝐇𝐀𝐍 Programming</author>
      <pubDate>Mon, 12 Apr 2021 17:38:43 +0000</pubDate>
      <link>https://dev.to/leviathanprogramming/i-need-some-advice-on-freelancing-c0m</link>
      <guid>https://dev.to/leviathanprogramming/i-need-some-advice-on-freelancing-c0m</guid>
      <description>&lt;p&gt;Hello everyone, I am going to start freelancing soon and would like some advice on it and an answer for my question below.&lt;/p&gt;

&lt;p&gt;I am a fifteen-year-old fullstack developer and I'm going to be starting to actually put my skills to use, starting with making free websites for people, and then charging little y little until I get much better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-you-charge-your-customers-for-a-domain-name"&gt;
  &lt;/a&gt;
  Do you charge your customers for a domain name?
&lt;/h3&gt;

&lt;p&gt;My question is, Do you buy a domain name yourself and then charge your customer for it?&lt;br&gt;
If you buy the domain for them and link it to the website, you can get a higher control level over it and can manage it in case something goes wrong.&lt;br&gt;
If your customer buys it, they might not be able to link it properly and might not set it up properly.  Linking domains was a very difficult task for me at first.&lt;/p&gt;

&lt;p&gt;Also, I'd appreciate some advice on freelancing if you have any.  Thanks!&lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>help</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Demystifying Time Complexity &amp; Big O Notation</title>
      <author>Sai Ashish</author>
      <pubDate>Mon, 12 Apr 2021 17:12:45 +0000</pubDate>
      <link>https://dev.to/theinsightfulcoder/demystifying-time-complexity-big-o-notation-2f20</link>
      <guid>https://dev.to/theinsightfulcoder/demystifying-time-complexity-big-o-notation-2f20</guid>
      <description>&lt;p&gt;One of the most important concepts in software development is analysing the time complexity of an algorithm. In technical interviews, you'd often find interviewers asking, "What's the time complexity of this algorithm?" or "Can you improve the time complexity?" If you've no idea what time complexity means or what the fuss about Big O is all about, stick till the end to find out!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-time-complexity"&gt;
  &lt;/a&gt;
  What is Time Complexity?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gmBpRLJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618086630981/i1Xrzpbef.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gmBpRLJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618086630981/i1Xrzpbef.png" alt="Time Complexity"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Time complexity is the &lt;strong&gt;time taken&lt;/strong&gt; by an algorithm as a &lt;strong&gt;function of the length of the input&lt;/strong&gt;. In short, it tells the running time or &lt;strong&gt;performance&lt;/strong&gt; of a program as the size of the input is varied.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-to-understand-time-complexity"&gt;
  &lt;/a&gt;
  Why do we need to understand Time Complexity?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7PZFqt4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618085877205/GCNqIjS2y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7PZFqt4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618085877205/GCNqIjS2y.png" alt="Understanding Time Complexity"&gt;&lt;/a&gt;&lt;br&gt;
Time complexity helps us to determines the &lt;strong&gt;scalability&lt;/strong&gt; of an algorithm. Suppose, you're at a party and you want to use an Instagram filter to capture the joyous occasion. Alas, the filter takes years to load. Your smiles turn into a frown as your mood gets ruined. So much for a party, huh?&lt;/p&gt;

&lt;p&gt;As a developer, it is necessary to understand which is the most efficient and optimised method to use in an application. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-compare-the-time-complexity-of-an-algorithm"&gt;
  &lt;/a&gt;
  How to compare the time complexity of an algorithm?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C1T7Sm-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618085987351/2UtWwoe7H.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C1T7Sm-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618085987351/2UtWwoe7H.png" alt="Compare time complexity of algorithm"&gt;&lt;/a&gt;&lt;br&gt;
Let us take an example to understand this problem. Ali and Jack were given a task to write a program to find the sum of &lt;em&gt;n&lt;/em&gt; numbers. Jack is a very hardworking guy who has mastered the fundamentals of a programming language. He doesn't pay attention to anything except programming. Here's how he coded the program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int n=10, sum = 0;
for(int i=1; i&amp;lt;=n; i++)
{
     sum = sum + i;
}
System.out.println(sum);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ali was smart. He focused on every subject in school and solved problems in a jiffy. When Ali was granted the same problem, he chuckled and used Mathematics to his aid. Here's  how Ali built his program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int n=10;
System.out.println((n*(n+1))/2);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you see from the above scenario, Ali was much more efficient as he avoided the shackles of using a loop to calculate his answer. If the size of the input increases, Jack's program will start to freeze and eventually int will overflow to present the wrong answer. Ali's magical line saves time and gives the right answer even for larger numbers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-big-o"&gt;
  &lt;/a&gt;
  What is Big O?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZqO-JOx2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084695849/cgaFO-C_x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZqO-JOx2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084695849/cgaFO-C_x.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Image Source: &lt;a href="https://www.bigocheatsheet.com/"&gt;BigOCheatSheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Based on logic, we have understood time complexity and its comparison but we need something very distinct to compare the performance of different algorithms. If we start comparing the different type of sorting techniques by logic, it would get real tedious for our brain to execute the complexity of our problem. To optimise this, there's a superhero called the Big O.&lt;/p&gt;

&lt;p&gt;As per  &lt;a href="https://en.wikipedia.org/wiki/Big_O_notation"&gt;Wikipedia&lt;/a&gt;, Big O or asymptotic notation is a &lt;strong&gt;mathematical function&lt;/strong&gt; that describes the &lt;strong&gt;limiting behaviour&lt;/strong&gt; of a function when the argument tends towards a particular value or infinity.&lt;/p&gt;

&lt;p&gt;Big O basically tells us the &lt;strong&gt;time complexity in mathematical terms&lt;/strong&gt; which can be easily compared. Our superhero Big O comes in different forms and sizes. I'll introduce you to them, right away!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-o1"&gt;
  &lt;/a&gt;
  Understanding O(1)
&lt;/h2&gt;

&lt;p&gt;O(n) stands for &lt;strong&gt;constant time complexity&lt;/strong&gt;. O(1) represents that no matter the size of the input, it takes the same amount of time to execute. For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int b = {1,2,3,4,5}
System.out.println(b[0]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No matter the length of the array, the program will require one unit, constant time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-on"&gt;
  &lt;/a&gt;
  Understanding O(n)
&lt;/h2&gt;

&lt;p&gt;O(n) stands for &lt;strong&gt;linear time complexity&lt;/strong&gt;. Linear represents the time takes by the algorithm is directly proportional to the size of the input. One of the most famous examples is the Linear Search algorithm. In linear search, we iterate over each element of the loop until we find a match. In the best-case scenario, the element could be present in the first position itself, thus effectively reducing the time complexity to O(1) as seen above. On the other hand, if the element is present at the end of the array or not at all, the loop has to iterate over all the elements in the array. Hence, the time complexity increases to O(n).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int a = 0, n[] = {1,2,3,4,5};
for(int i = 0; i &amp;lt;n.length; i++)
{
     if(n[i]==a)
     {
          System.out.println("Found");
          break;
     }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If there are two for loops in a program, the effective time complexity is still considered as O(n) and not O(2n). We typically ignore the constants in front of the variables in such cases, because they both still represent a linear function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-ologn"&gt;
  &lt;/a&gt;
  Understanding O(logn)
&lt;/h2&gt;

&lt;p&gt;O(logn) also known as &lt;strong&gt;logarithmic time complexity&lt;/strong&gt; denotes the time taken by the program to execute is proportional to the logarithm of the size of the input. The most famous example of this is the Binary Search algorithm. Let's suppose the worst-case scenario in the Binary search algorithm. We keep on halving our search array until we find the element or realise it is not present. In an array of 8 elements it will take maximum of 3 iterations(log28) to execute. If there are 1 million elements, it'll take just 19 iterations. This makes Binary Search so much more powerful than Linear Search.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int arr[] = {10,20,30,40,50}; 
int l = 0, r = arr.length - 1;
while (l &amp;lt;= r) {
      int m = l + (r - l) / 2;
      if (arr[m] == x)
          return m;
      if (arr[m] &amp;lt; x)
           l = m + 1;
      else
           r = m - 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#understanding-on2"&gt;
  &lt;/a&gt;
  Understanding O(n&lt;sup&gt;2&lt;/sup&gt;)
&lt;/h2&gt;

&lt;p&gt;O(n&lt;sup&gt;2&lt;/sup&gt;) is also known as &lt;strong&gt;Quadratic time complexity&lt;/strong&gt;. It represents that input is proportional to the square of the size of the input. It is most commonly seen in Bubble sort, Insertion sort and Patterns. Nested loops are an easy way to identify the O(n&lt;sup&gt;2&lt;/sup&gt;) complexity. &lt;/p&gt;

&lt;p&gt;As the number of nested loops increases so does the power.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for(int i = 1; i&amp;lt;=5; i++)
{
     for(int j = 1; j&amp;lt;=i; j++)
     {
         System.out.print(j);
     }
System.out.println();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If there are instances of multiple nested loops of different orders only the highest power will contribute to time complexity. For example, if T(n) = 3n&lt;sup&gt;3&lt;/sup&gt; + 2n&lt;sup&gt;2&lt;/sup&gt;+n. The time complexity will be Cubic, O(n&lt;sup&gt;3&lt;/sup&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-o2n"&gt;
  &lt;/a&gt;
  Understanding O(2&lt;sup&gt;n&lt;/sup&gt;)
&lt;/h2&gt;

&lt;p&gt;O(2&lt;sup&gt;n&lt;/sup&gt;) represents the &lt;strong&gt;exponential function&lt;/strong&gt;. It is opposite to the logarithmic function. This mostly occurs in the case of Recursive functions, like recursive calculation of Fibonacci numbers. Another famous example of this complexity is the Hanoi Tower Problem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void solve_hanoi(int N, string from_peg, string to_peg, string spare_peg)
{
    if (N&amp;lt;1) {
        return;
    }
    if (N&amp;gt;1) {
        solve_hanoi(N-1, from_peg, spare_peg, to_peg);
    }
    print "move from " + from_peg + " to " + to_peg;
    if (N&amp;gt;1) {
        solve_hanoi(N-1, spare_peg, to_peg, from_peg);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Program Source: &lt;a href="https://stackoverflow.com/questions/34915869/example-of-big-o-of-2n"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-on"&gt;
  &lt;/a&gt;
  Understanding O(n!)
&lt;/h2&gt;

&lt;p&gt;O(n!) represents that the time complexity is the function of n &lt;strong&gt;factorial.&lt;/strong&gt; This is the costliest it can get. One of the most classic examples is the Travelling Salesman Problem. Another example of O(n!) is given below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const nFacRuntimeFunc = (n) =&amp;gt; {
  for(let i=0; i&amp;lt;n; i++) {
    nFacRuntimeFunc(n-1);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should at all costs &lt;strong&gt;avoid&lt;/strong&gt; the O(n!) complexity. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-recap"&gt;
  &lt;/a&gt;
  Let's Recap:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;O(1)&lt;/strong&gt; - Constant time complexity (Best🎯)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(n)&lt;/strong&gt; - Linear time complexity&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(log n)&lt;/strong&gt; - Logarithmic time complexity&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt; - Quadratic time complexity&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(2&lt;sup&gt;n&lt;/sup&gt;)&lt;/strong&gt; - Exponential time complexity&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(n!)&lt;/strong&gt; - Factorial time complexity (Worst😭)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#valuable-resource-big-o-cheatsheet"&gt;
  &lt;/a&gt;
  Valuable Resource:  &lt;a href="https://www.bigocheatsheet.com/"&gt;Big O Cheatsheet&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Our superhero deserves a website of his own. I stumbled upon this website called the  &lt;a href="https://www.bigocheatsheet.com/"&gt;BigOCheatSheet.com&lt;/a&gt; made by &lt;a href="https://twitter.com/ericdrowell"&gt;Eric&lt;/a&gt;. It contains an amazing comparison of the time complexity for different data structures and array sorting elements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3L0qsJym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084611822/5039Vbory.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3L0qsJym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084611822/5039Vbory.png" alt="Time Complexity of common data structures"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EbhkONez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084629307/BR6c2vUa8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EbhkONez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084629307/BR6c2vUa8.png" alt="Time Complexity of various sorting algorithms"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In today's world, people are learning various frameworks, libraries &amp;amp; technologies without learning time complexity or Data Structures &amp;amp; Algorithms(DSA). If you ask any developer working in the top MNC's, they'll advise you to master the fundamentals and learn DSA as it greatly helps in problem-solving and writing efficient code. With that said, I hope our superhero continues to be our guardian angel forever. Cheers🍻&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>beginners</category>
      <category>algorithms</category>
      <category>programming</category>
    </item>
    <item>
      <title>3 ways ML is a Game Changer for your Incident Management Lifecycle</title>
      <author>gdcohen</author>
      <pubDate>Mon, 12 Apr 2021 16:55:26 +0000</pubDate>
      <link>https://dev.to/gdcohen/3-ways-ml-is-a-game-changer-for-your-incident-management-lifecycle-55md</link>
      <guid>https://dev.to/gdcohen/3-ways-ml-is-a-game-changer-for-your-incident-management-lifecycle-55md</guid>
      <description>&lt;p&gt;Any developer, SRE or DevOps engineer responsible for an application with users has felt the pain of responding to a high priority incident. There's the immediate stress of mitigating the issue as quickly as possible, often at odd hours and under severe time pressure. There's the bigger challenge of identifying root cause so a durable fix can be put in place. There's the aftermath of postmortems, reviews of your monitoring and observability solutions, and inevitable updates to alert rules. And there's the typical frustration of wondering what could have been done to avoid the problem in the first place.&lt;/p&gt;

&lt;p&gt;In a modern cloud native environment, the complexity of distributed applications and the pace of change make all of this ever harder. Fortunately, AI and ML technologies can help with these human-driven processes. Here are three specific ways:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-drastically-cut-incident-remediation-times"&gt;
  &lt;/a&gt;
  1. Drastically cut incident remediation times
&lt;/h2&gt;

&lt;p&gt;The toughest incidents are ones where the symptoms are obvious, but the root cause is not. In other words, they are easy to detect, but hard to root cause -- as seen in &lt;a href="https://www.zebrium.com/blog/lessons-from-slack-gcp-and-snowflake-outages-zebrium"&gt;recent outages at GCP, Slack and Snowflake&lt;/a&gt;. SREs and engineers can spend hours digging through dashboards, traces, and inevitably -- scan&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g2z5ZVCX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/manual%2520hunting%2520for%2520root%2520cause.png%3Fwidth%3D234%26name%3Dmanual%2520hunting%2520for%2520root%2520cause.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g2z5ZVCX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/manual%2520hunting%2520for%2520root%2520cause.png%3Fwidth%3D234%26name%3Dmanual%2520hunting%2520for%2520root%2520cause.png" alt="manual hunting for root cause"&gt;&lt;/a&gt; millions of log lines. There might be clues to narrow the scope of the problem -- perhaps a set of services, containers, or hosts -- but ultimately there is a search for the unknown. Is there a new type of error? Or any unusual events? Or a significant deviation from the normal in event patterns? And when there are many of the above -- how do they relate to each other?&lt;/p&gt;

&lt;p&gt;Really experienced engineers develop instincts to help with this hunt for the unknown. But machine learning is very well suited to this problem -- it can keep tracking the evolving (but healthy) event patterns and their correlations, &lt;a href="https://www.zebrium.com/blog/is-autonomous-monitoring-the-anomaly-detection-you-actually-wanted"&gt;quickly surface unusual ones that explain root cause&lt;/a&gt;, and even &lt;a href="https://www.zebrium.com/blog/real-world-examples-of-gpt-3-plain-language-root-cause-summaries-zebrium"&gt;summarize the problem in plain language&lt;/a&gt; by matching the events against known problems in the public domain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-eliminate-the-alert-rule-hamster-wheel"&gt;
  &lt;/a&gt;
  2. Eliminate the Alert Rule hamster wheel
&lt;/h2&gt;

&lt;p&gt;The second pain point is the need to revise and continually evolve alert rules and settings that give you early warning. While a pure approach might only monitor a narrow set of user-impacting health metrics&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H_UD3AE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/manual%2520alert%2520rules.png%3Fwidth%3D396%26name%3Dmanual%2520alert%2520rules.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H_UD3AE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/manual%2520alert%2520rules.png%3Fwidth%3D396%26name%3Dmanual%2520alert%2520rules.png" alt="manual alert rules"&gt;&lt;/a&gt; and symptoms, that can make it harder to identify root cause. So in reality most organizations set alerts for a blend of user facing symptoms as well as underlying health indicators (errors, latencies, reconnects, resource exhaustion etc.) After a particularly painful incident, it is natural to review and modify alerts -- adding new ones or modifying thresholds each time a new type of issue is encountered. The challenge is that as long as new types of problems continue to occur, this is a never ending game of catch up.\&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B70022JZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/ML%2520driven%2520alert%2520rules.png%3Fwidth%3D262%26name%3DML%2520driven%2520alert%2520rules.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B70022JZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/ML%2520driven%2520alert%2520rules.png%3Fwidth%3D262%26name%3DML%2520driven%2520alert%2520rules.png" alt="ML driven alert rules"&gt;&lt;/a&gt;\&lt;br&gt;
Machine learning can reduce this burden considerably. The simplest approach is to configure a set of "signals" which will trigger ML driven reports. Signals could of course be real incidents, but they could also be symptom alerts. For example, many teams watch for the overall error frequency -- if it spikes relative to recent trends, you know something is wrong, but not necessarily what. Well, you can use the same simple alert as a trigger for machine learning to scan the logs and metrics for that deployment around the time of the alert -- identifying unusual events/sequences and anomalous metrics that could explain the spike in errors. Even better, machine learning can fingerprint these sequences -- so when a particularly noteworthy root cause is detected, you already have a pre-built alert rule you can simply connect to an alert channel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-proactively-catch-silent-bugs-and-inform-developers-early-in-the-cycle"&gt;
  &lt;/a&gt;
  3. Proactively catch silent bugs and inform developers early in the cycle
&lt;/h2&gt;

&lt;p&gt;In the not too distant past, new releases were tested extensively before deploying to production. This allowed for deliberately constructed test plans, stress tests and an opportunity to catch bugs that might&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VotKfmXF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/proactive%2520detection%2520of%2520incidents.png%3Fwidth%3D234%26name%3Dproactive%2520detection%2520of%2520incidents.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VotKfmXF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/proactive%2520detection%2520of%2520incidents.png%3Fwidth%3D234%26name%3Dproactive%2520detection%2520of%2520incidents.png" alt="proactive detection of incidents"&gt;&lt;/a&gt; have potentially nasty downstream consequences. Today, deployment cycles are much faster, drastically shrinking the time to do any of the above. There is now a trend towards "test in production". Although many teams do use staging environments and approaches like chaos tools, it's more likely that subtle bugs will only surface in production when they result in user complaints or visible symptoms.&lt;/p&gt;

&lt;p&gt;By using ML to surface new or unusual errors, event patterns and patterns in the metrics, machine learning can quickly become a developer's best friend in proactively surfacing subtle bugs early, before they impact users. For instance, using our own ML technology, the Zebrium engineering team recently caught a bug related to a malformed middleware SQL query, that under certain conditions prevented users from completing their intended workflow. Another example involved an exception that was handled in a try/catch block which emitted an error log message but was otherwise silently breaking outbound webhook notifications. Our developers have come to appreciate the proactive detection from our internal Zebrium service to catch these kinds of bugs early, before they can do real damage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As more users rely on software applications, the pressure to shrink MTTR and the stress of troubleshooting incidents under pressure all grow proportionally. Over the last decade a rich set of observability tools have emerged to help detect problems easily, but troubleshooting has remained very manual, driven by the instincts and experience of the engineer on call. New approaches that apply machine learning to tackle this problem can help by &lt;a href="https://www.zebrium.com/blog/youve-nailed-incident-detection-what-about-incident-resolution"&gt;drastically reducing MTTR&lt;/a&gt;, catching new bugs early, and reducing the manual effort involved in tasks like creating RCA reports and maintaining alert rules.&lt;/p&gt;

&lt;p&gt;If you're interested in using ML as part of your incident management lifecycle, please &lt;a href="https://www.zebrium.com/"&gt;visit Zebrium&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Posted with permission of the Author &lt;a href="https://www.zebrium.com/blog/author/ajay-singh"&gt;Ajay Singh&lt;/a&gt; @ Zebrium&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The TRUE difference between [] and {{}} bindings in Angular</title>
      <author>ng-conf</author>
      <pubDate>Mon, 12 Apr 2021 16:47:53 +0000</pubDate>
      <link>https://dev.to/ngconf/the-true-difference-between-and-bindings-in-angular-2h9i</link>
      <guid>https://dev.to/ngconf/the-true-difference-between-and-bindings-in-angular-2h9i</guid>
      <description>&lt;p&gt;Joe Eames | ng-conf | Sep 2020&lt;/p&gt;

&lt;p&gt;One of the parts of Angular that most developers think they understand, but many don’t, is the true nature of &lt;code&gt;[]&lt;/code&gt; and &lt;code&gt;{{}}&lt;/code&gt; bindings.&lt;/p&gt;

&lt;p&gt;A fundamental lack of understanding of these bindings can become a major issue when working with templates and trying to get them to do exactly what you want. It can also be the cause of spending an unnecessary amount of hours trying to figure out a bug.&lt;/p&gt;

&lt;p&gt;So I’m going to run down exactly what these two bindings do, and what it is that many developers misunderstand about them.&lt;/p&gt;

&lt;p&gt;You’re probably familiar with the typical usage of &lt;code&gt;{{}}&lt;/code&gt; bindings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you’re probably familiar with the typical usage of &lt;code&gt;[]&lt;/code&gt; or property bindings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img [src]="imgsrc"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But do you truly understand what each binding is doing? And why we use them in this situation? Many if not most developers simply know to use &lt;code&gt;{{}}&lt;/code&gt; when putting text in an element, and &lt;code&gt;[]&lt;/code&gt; for binding to properties.&lt;/p&gt;

&lt;p&gt;But have you ever wondered with reactive forms why the &lt;code&gt;formControlName&lt;/code&gt; property doesn’t use the &lt;code&gt;[]&lt;/code&gt; binding?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input formControlName="title" &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A foundational understanding of what is going on will help you understand when and why you need to use &lt;code&gt;[]&lt;/code&gt; or &lt;code&gt;{{}}&lt;/code&gt; or nothing (like with the formControlName property)&lt;/p&gt;

&lt;p&gt;So let’s start by discussing the difference between the following two lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img [src]="imgsrc"&amp;gt;
&amp;lt;img src="{{imgsrc}}"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both will accomplish the same thing. They both set the src attribute of the image tag.&lt;/p&gt;

&lt;p&gt;It’s also important to understand that both of them are running an evaluation on the imgsrc property which must be in your component. In both, they are using Angular’s expression syntax. So you can do things like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img [src]="'/images/' + name + '.png'"&amp;gt;
&amp;lt;img src="{{'/images/' + name + '.png'}}"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is an expression that does string appending to ultimately arrive at the URL for the image, appending together a root directory, a name, and an extension.&lt;/p&gt;

&lt;p&gt;Note that you can’t mix &lt;code&gt;[]&lt;/code&gt; and &lt;code&gt;{{}}&lt;/code&gt; together on the same attribute. Angular will complain.&lt;/p&gt;

&lt;p&gt;So what’s the ultimate difference between the two?&lt;/p&gt;

&lt;p&gt;It comes down to how they function. &lt;code&gt;{{}}&lt;/code&gt; is basically a form of string interpolation. You should think of it as simply replacing the HTML string with the results of the binding, and then the HTML gets evaluated.&lt;/p&gt;

&lt;p&gt;Property binding, &lt;code&gt;[]&lt;/code&gt;, on the other hand, works differently. You should think of this as manipulating the DOM &lt;strong&gt;after&lt;/strong&gt; the HTML has been processed by the browser.&lt;/p&gt;

&lt;p&gt;So the [src] binding actually manipulates the src property of the image object, and NOT the src attribute of the img tag.&lt;/p&gt;

&lt;p&gt;The reason this matters is that the property binding - since it’s not string interpolation - can preserve data types.&lt;/p&gt;

&lt;p&gt;Consider the following part of a form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input formControlName="isVisible" name="isVisible" type="radio" 
value="true"&amp;gt; True
&amp;lt;input formControlName="isVisible" name="isVisible" type="radio" 
value="false"&amp;gt; False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This HTML doesn’t bind the isVisible part of the form to the boolean values true and false. If you thought it does you have fallen victim to the subtle issues with binding. This code binds the isVisible property to either the string “true” or the string “false”. And any non-empty string is truthy. So if you then used that in a ngIf expression&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1 *ngIf="myForm.value.isVisible"&amp;gt;I'm only visible if the radio 
button is set to True&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This won’t work. The ngIf will always evaluate to true.&lt;/p&gt;

&lt;p&gt;BUT if you bind to the value PROPERTY&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input formControlName="isVisible" name="isVisible" type="radio" 
[value]="true"&amp;gt; True
&amp;lt;input formControlName="isVisible" name="isVisible" type="radio" 
[value]="false"&amp;gt; False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you are now binding the isVisible property to a boolean true or false.&lt;/p&gt;

&lt;p&gt;But you can’t do this with the &lt;code&gt;{{}}&lt;/code&gt; binding&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input formControlName="isVisible" name="isVisible" type="radio" 
value="{{true}}"&amp;gt; True
&amp;lt;input formControlName="isVisible" name="isVisible" type="radio" 
value="{{false}}"&amp;gt; False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This produces the same result as the first example. It’s ultimately just the string “true” and the string “false”.&lt;br&gt;
That is the fundamental thing that most Angular developers don’t understand. Property bindings are actually manipulating the DOM and they get to preserve data types. Curly brace binding is string interpolation of the HTML and always results in strings.&lt;/p&gt;

&lt;p&gt;Once you understand this, you can avoid a lot of potential bugs.&lt;/p&gt;

&lt;p&gt;Happy Coding.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ngconf-the-musical-is-coming"&gt;
  &lt;/a&gt;
  &lt;strong&gt;ng-conf: The Musical is coming&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;ng-conf: The Musical is a two-day conference from the ng-conf folks coming on April 22nd &amp;amp; 23rd, 2021. Check it out at &lt;a href="https://www.2021.ng-conf.org/"&gt;ng-conf.org&lt;/a&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Presenting TypeIt: A VSCode extension for content creators</title>
      <author>Mauro Garcia</author>
      <pubDate>Mon, 12 Apr 2021 16:43:41 +0000</pubDate>
      <link>https://dev.to/mauro_codes/presenting-typeit-a-vscode-extension-for-content-creators-60d</link>
      <guid>https://dev.to/mauro_codes/presenting-typeit-a-vscode-extension-for-content-creators-60d</guid>
      <description>&lt;p&gt;Today I wanted to share with you a side-project I've been working on with &lt;a class="comment-mentioned-user" href="https://dev.to/paulasantamaria"&gt;@paulasantamaria&lt;/a&gt;
. &lt;/p&gt;

&lt;p&gt;It's called &lt;strong&gt;TypeIt: Typing animations for content creators&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TypeIt is a VSCode extension that retypes your code so you can record it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-typeit"&gt;
  &lt;/a&gt;
  Why TypeIt?
&lt;/h1&gt;

&lt;p&gt;Sometimes we just want to write code at our own pace, test it, and, once we are comfortable, share it online as code snippets or tutorials. We may not want to memorize and write the code all over again just to record it. That's when TypeIt comes in. Use it to automatically retype the code you want to share.&lt;/p&gt;

&lt;p&gt;Plus, you can choose different modes, adjust the typing speed and even retype multiple documents in parallel!&lt;/p&gt;

&lt;p&gt;This video demonstrates how TypeIt can be used to create and share content:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1_GBQnNuZ5Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#more-info"&gt;
  &lt;/a&gt;
  More info
&lt;/h1&gt;

&lt;p&gt;If you want to learn more about it, you can visit our &lt;a href="https://typeit.uppernauts.com/"&gt;website&lt;/a&gt;.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#we-would-love-to-hear-your-thoughts"&gt;
  &lt;/a&gt;
  We would love to hear your thoughts 💬
&lt;/h1&gt;

&lt;p&gt;What do you think about TypeIt?&lt;br&gt;
Would you try it?&lt;br&gt;
Let us know if you have any questions or feedback in the comments below👇&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>vscode</category>
      <category>plugins</category>
      <category>tools</category>
    </item>
    <item>
      <title>Comparing Flask and Django</title>
      <author>Sophia Iroegbu</author>
      <pubDate>Mon, 12 Apr 2021 16:27:36 +0000</pubDate>
      <link>https://dev.to/sophyia/comparing-flask-and-django-4lao</link>
      <guid>https://dev.to/sophyia/comparing-flask-and-django-4lao</guid>
      <description>&lt;p&gt;Python is one of the most widely used programming languages, thanks to its clean, readable code and adaptability. It is also in high demand due to its wide variety of web frameworks, which can quickly transform your project from a mere concept to an amazing reality. There are numerous frameworks, but only two stand out: &lt;strong&gt;Flask&lt;/strong&gt; and &lt;strong&gt;Django&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now let's compare Flask and Django based on some of the core framework's features:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-database"&gt;
  &lt;/a&gt;
  The Database:
&lt;/h1&gt;

&lt;p&gt;Django has a robust Object Relational Mapping (ORM) framework that supports a variety of relational databases such as SQLite, PostgreSQL, MySQL, and Oracle, as well as managing and generating database migrations.&lt;br&gt;
Flask makes no promises on how data is stored, but there are several libraries and extensions available to assist with this: Flask-SQLAlchemy, Flask-Alembic, Flask-Peewee, and so on.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#administrator"&gt;
  &lt;/a&gt;
  Administrator:
&lt;/h1&gt;

&lt;p&gt;Django has a powerful admin screen, which is a desktop application with a user interface for handling data based on the templates. Django excels in this field as well. It enables you to easily execute &lt;em&gt;CRUD operations&lt;/em&gt; on your templates when building out an application without writing any additional code. &lt;br&gt;
Again, Flask does not come with anything like this by itself, but the Flask-Admin extension has the same functionality.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#views-and-routing"&gt;
  &lt;/a&gt;
  Views and Routing:
&lt;/h1&gt;

&lt;p&gt;Both frameworks support mapping URLs to views and feature and class-based views, but Django fits a URL pattern, the request object, which contains the HTTP request content.&lt;br&gt;
Flask makes use of Werkzeug to provide URL routing and request/response handling. It requires that the item in Flask be global in order for it to have easy access to it (as long as you import it).&lt;br&gt;
URLs are typically specified alongside the view (via a decorator), but they can be broken out into a centralized position, similar to the Django pattern.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security:
&lt;/h1&gt;

&lt;p&gt;Django has built-in defense against a variety of standard attack vectors such as CSRF, XSS, and SQL injection. This security features help to protect the code from bugs. In addition, the Django development team proactively discloses and promptly patches identified security bugs. Flask, on the other hand, has a much narrower code base, which means there is less surface area to strike. However, when security flaws in your hand-crafted app code emerge, you will need to correct and patch them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;It isn't so much about the right structures as it is about personal preference. Simply enjoy yourself when coding.&lt;/p&gt;

</description>
      <category>python</category>
      <category>django</category>
      <category>flask</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The Race is on to be the "Rails of React", but is anyone there yet?</title>
      <author>Zack Sheppard</author>
      <pubDate>Mon, 12 Apr 2021 16:26:47 +0000</pubDate>
      <link>https://dev.to/zackdotcomputer/the-race-is-on-to-be-the-rails-of-react-but-is-anyone-there-yet-3bim</link>
      <guid>https://dev.to/zackdotcomputer/the-race-is-on-to-be-the-rails-of-react-but-is-anyone-there-yet-3bim</guid>
      <description>&lt;p&gt;There's this phenomenon in psychology called the &lt;a href="https://en.wikipedia.org/wiki/Frequency_illusion"&gt;Frequency Illusion&lt;/a&gt; - it posits that once you notice and understand a single instance of something, you're going to start seeing it everywhere and believe that it's super common.&lt;/p&gt;

&lt;p&gt;I've been having some serious Frequency Illusion this month around one-stop-shop API + frontend frameworks for React. It seems like every week there's a new toolset coming to market that aims to be the Laravel or Rails or Django for JS-based web apps.&lt;/p&gt;

&lt;p&gt;Let's do a quick dive into the ones I've run into recently and the immediate pros and cons each one brings to the table. Are any production ready? Do any actually make your developer experience better?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-they-all-do"&gt;
  &lt;/a&gt;
  What They All Do
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;All&lt;/em&gt; of these tools provide you with a few key things you'll need to set up almost any JAMStack web app:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Database ORM&lt;/strong&gt;. All four of these frameworks use &lt;a href="https://www.prisma.io"&gt;Prisma&lt;/a&gt; as a way to manage your backend database and generate a type-checked client for it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Authentication&lt;/strong&gt;. While not all of the frameworks disclose how their authentication works, all of them do provide at least basic user management.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Build&lt;/strong&gt;. To varying degrees, all of these projects provide some sort of build pipeline based on Babel, Wepback, or both. This is important since it allows you to write modern Javascript or Typescript and to mingle server-side libraries with client-side ones, but in the end build everything out into compatible dialects.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#the-contenders"&gt;
  &lt;/a&gt;
  The Contenders
&lt;/h1&gt;




&lt;h2&gt;
  &lt;a href="#blitzjs"&gt;
  &lt;/a&gt;
  Blitz.js
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://blitzjs.com"&gt;Homepage&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m4nOKC5j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618222674624/BgQNhXIPD.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m4nOKC5j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618222674624/BgQNhXIPD.jpeg" alt="Blitz.js Homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Blitz is a lightweight collection of generators that turn out a Next.js-style monolithic JAM app. Blitz touts its community (which it advertises as strongly welcoming to LGBTQ+ people, women, and minorities) as one of its key features, but I will only be talking about the tooling and framework itself here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#built-on"&gt;
  &lt;/a&gt;
  Built on
&lt;/h3&gt;

&lt;p&gt;Blitz is built on &lt;strong&gt;Next.js&lt;/strong&gt; and, presumably, other open-source tooling. However, it obscures all of its underlying technology other than &lt;strong&gt;Prisma&lt;/strong&gt; to the point that it may as well be a new framework unto itself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Blitz is loosely opinionated and flexible for your frontend setup, meaning you can follow your personal bliss for how to layout the code and what tooling to use.&lt;/li&gt;
&lt;li&gt;Blitz comes with some nice extra features out of the box like 90% of a email integration (just drop in a mailing service).&lt;/li&gt;
&lt;li&gt;Blitz CLI has a suite of devtools and a powerful code generator. In just one command line you can integrate a styling library like Tailwind, add a new data model (including database schema, API endpoints, and edit pages), or stand up a full admin UI to view the underlying database.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;p&gt;Blitz kindly did my work here and listed their &lt;a href="https://blitzjs.com/docs/tradeoffs"&gt;trade-offs&lt;/a&gt; themselves.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Because their code so heavily wraps the underlying dependencies, you are locking yourself in to their upgrade priorities and timeline.&lt;/li&gt;
&lt;li&gt;Blitz's API layer is not as clearly documented as the competitors, though they say this will get better in later versions.&lt;/li&gt;
&lt;li&gt;On that note, Blitz is painfully beta software at this point. It depends on an experimental React version, it throws up "this software is beta" disclaimers on most commands, and its documentation for processes like production deploy are essentially non-existent. While promising, the impression I have is that this is not quite production-ready for a large project.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#bedrock"&gt;
  &lt;/a&gt;
  Bedrock
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://bedrock.mxstbr.com/"&gt;Homepage&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Itwmv54x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618222685860/s__4b0mE4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Itwmv54x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618222685860/s__4b0mE4.jpeg" alt="Bedrock Homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bedrock is a private, for-profit getting-started kit by Max Stoiber.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#built-on"&gt;
  &lt;/a&gt;
  Built on
&lt;/h3&gt;

&lt;p&gt;Bedrock is based on &lt;strong&gt;Next.js&lt;/strong&gt;, &lt;strong&gt;Prisma&lt;/strong&gt;, and written in &lt;strong&gt;Typescript&lt;/strong&gt;. It uses &lt;strong&gt;GraphQL&lt;/strong&gt; for its API and &lt;strong&gt;Passport.js&lt;/strong&gt; for authentication. It also comes with &lt;strong&gt;Postmark&lt;/strong&gt; and &lt;strong&gt;Stripe&lt;/strong&gt; integration out of the box for sending email and taking payments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Comes with email and payment support - a rarity - so that you can build a wide variety of SaaS businesses on top of it quickly.&lt;/li&gt;
&lt;li&gt;Comes with dedicated support and a private community.&lt;/li&gt;
&lt;li&gt;Comes out of the box with not just authentication but team management for your users.&lt;/li&gt;
&lt;li&gt;Advertises itself as truly production-ready as opposed to other frameworks on this list which strongly disclaim that they are still in pre-release beta.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;It costs almost $400 USD.&lt;/strong&gt; I can't actually review the process of getting set up with this toolkit because it is so expensive.&lt;/li&gt;
&lt;li&gt;Bedrock is more boilerplate than a true framework. Since it is based on several well-loved open source projects, it might not add much to your experience over doing it yourself.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#redwoodjs"&gt;
  &lt;/a&gt;
  RedwoodJS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://redwoodjs.com"&gt;Homepage&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zjj2r-SH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618222632207/ivRfjr_oL.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zjj2r-SH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618222632207/ivRfjr_oL.jpeg" alt="RedwoodJS Homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RedwoodJS comes with quite a pedigree, being the latest project from Tom Preston-Warner, a co-founder of Github and creator of Gravatar and Jekyll.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#built-on"&gt;
  &lt;/a&gt;
  Built on
&lt;/h3&gt;

&lt;p&gt;Redwood uses &lt;strong&gt;Storybook&lt;/strong&gt; to organize its &lt;strong&gt;React&lt;/strong&gt; components on the frontend. In the API, it uses &lt;strong&gt;Apollo&lt;/strong&gt; to serve &lt;strong&gt;GraphQL&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Redwood's key feature is the suite of helper commands that automatically generate code for you during development. For example, does your web app need a new page for a user's notifications? Getting the boilerplate (route, page, storybook, and &lt;strong&gt;tests&lt;/strong&gt;) for it is as easy as &lt;code&gt;yarn redwood generate page notifications /my/notifications&lt;/code&gt;. Did you make a new model and need a CRUD API to access it? &lt;code&gt;yarn redwood generate scaffold myModel&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Redwood adds new tools for web development, like &lt;code&gt;Set&lt;/code&gt;s with &lt;code&gt;Layout&lt;/code&gt;s in the router, that are original and exciting.&lt;/li&gt;
&lt;li&gt;Redwood comes with plugins to integrate with trendy authentication or automatically deploy to a full variety hosting platforms, as well as to roll-it-yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Redwood has either wrapped its dependencies so strongly that they are hard to see, or the team has completely reimplemented core features themselves. This means you are tightly locked in to their framework once you start building with them and might be very unhappy if they slow down or stop development.&lt;/li&gt;
&lt;li&gt;Redwood is &lt;em&gt;deeply&lt;/em&gt; opinionated about how you should organize and work on your app. If you don't agree with their opinions, the framework is simply not for you.&lt;/li&gt;
&lt;li&gt;Redwood is still pre-1.0. Some features that might be absolute requirements for you, like Typescript support in the generators, are not yet present.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#amplication"&gt;
  &lt;/a&gt;
  Amplication
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://amplication.com/"&gt;Homepage&lt;/a&gt; and &lt;a href="https://docs.amplication.com/docs/"&gt;Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LiG9YZxa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618222659271/gEskz6oDA.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LiG9YZxa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618222659271/gEskz6oDA.jpeg" alt="Amplication Homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amplication is a bit of an odd-one-out on this list. Whereas the other frameworks in this comparison are meant to be the foundation for your web app, Amplication is a webapp which generates web apps. The resulting apps can be downloaded freely and are almost entirely independent of Amplication.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#built-on"&gt;
  &lt;/a&gt;
  Built on
&lt;/h3&gt;

&lt;p&gt;Generated apps are basically a who's-who of hot JAMStack tools - they use &lt;strong&gt;NestJS&lt;/strong&gt;, &lt;strong&gt;Prisma&lt;/strong&gt;, &lt;strong&gt;Apollo&lt;/strong&gt;, &lt;strong&gt;Express&lt;/strong&gt;, &lt;strong&gt;Passport&lt;/strong&gt;, and everything is written in &lt;strong&gt;Typescript&lt;/strong&gt; and containerized with &lt;strong&gt;Docker&lt;/strong&gt;. Generated apps also include both a &lt;strong&gt;GraphQL&lt;/strong&gt; and &lt;strong&gt;REST&lt;/strong&gt; API (documented in &lt;strong&gt;Swagger&lt;/strong&gt;) to access your data and a separate Admin frontend built on Amplication's own toolkit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The only tool that aims for containerization with Docker rather than bare code to be built out in JAMStack style. This could be a con, but it does open up new possibilities for your server that aren't available for APIs running in Lambda.&lt;/li&gt;
&lt;li&gt;They aren't playing keep-away with the code. You can freely take the generated applications out of Amplication thanks to easy Github syncing and direct code downloads.&lt;/li&gt;
&lt;li&gt;Uses well-known and well-tested open source libraries to provide functionality.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It says right on their sign-in screen "amplication is currently in alpha and it should not be used in production" and it shows - you will get errors while using their console and the generated applications have very little optimization.&lt;/li&gt;
&lt;li&gt;It is pretty slow - getting your sandbox environment set up for development takes so long that I've finished this blog post before it finished setting up my environment &lt;em&gt;(note: it finished eventually)&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Builds a truly monolithic app as the end-result. Your frontend, REST, and GraphQL APIs are all in one package, and the generated code is complex and confusingly named.&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h1&gt;

&lt;p&gt;Having spent the weekend walking through these four libraries' "Getting Started" guides, what are my takeaways?&lt;/p&gt;

&lt;p&gt;First off, sadly a lot of these frameworks are clearly not production-ready, even for a side project. The ideas that Amplication, Blitz, and Redwood are introducing - powerful code generation to rapidly build out an API and its boilerplate - are sorely needed in the React/JAMStack landscape. But Blitz and Amplication especially felt too unstable for me to use in anything other than an internal project. Redwood is closer, but the clear winner is Bedrock, which is the only one touting itself as honestly production ready.&lt;/p&gt;

&lt;p&gt;Next let's talk about vendor lock-in. Vendor Lock-in is why I never use Create React App anymore (and you shouldn't either). As a framework ages, keeping up to date with all its dependencies becomes harder and harder and if you depend on that framework you wind up using old, buggy, or insecure code. This, I fear, is the danger with Blitz and Redwood. Their vendor lock-in is so tight that you are really binding your app's upgrade lifecycle to those teams' schedules. The clear winners here are Amplication and Bedrock, since these two give you direct access to the dependencies, freeing you up to manage your own upgrade cycle.&lt;/p&gt;

&lt;p&gt;Finally, what is the value-add of these frameworks for you? The elephant in the room here is Bedrock's $400 price tag. Is it worth that? It is built on free tools put together in a fairly obvious way - you could replicate it given enough time. But, the glue-code that Max wrote to stick them together, code that has already been validated both during development and in production, is valuable. So, is the time the kit saves you worth $400? Similarly, is the time-saving code generation of Redwood and Blitz worth the cost of vendor lock-in?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-the-winner-is"&gt;
  &lt;/a&gt;
  So the winner is...
&lt;/h2&gt;

&lt;p&gt;For me personally, the clear winner of this experiment remains &lt;strong&gt;doing it yourself&lt;/strong&gt;. For my process, none of these tools brings enough to the table for me to switch over to them. But that is a personal choice based in part on the fact that I need to keep learning things to write in this blog...&lt;/p&gt;

&lt;p&gt;However, if I needed a framework to quickly prototype a JAMStack application, I would have to give the crown to &lt;strong&gt;RedwoodJS&lt;/strong&gt;. It's free, open source, and it seems to strike the right balance of being almost production-ready, easy to use, and actually helpful.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Congrats, you win.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The exciting thing about this contest, though, is that it is still being run and could change any day. Any of these libraries could pull off the same miracle Prisma did with their jump from version 1 to 2 and leap from being a niche player to the trendiest force in the field. Plus I'm sure there are more of these tools out there that I haven't even heard about - maybe that were even released as I wrote this post. If you know of one please drop it in the comments so I can check it out 👇&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>serverless</category>
      <category>graphql</category>
      <category>react</category>
    </item>
    <item>
      <title>Announcing "@mswjs/data"—data modeling library for testing JavaScript applications</title>
      <author>Artem Zakharchenko</author>
      <pubDate>Mon, 12 Apr 2021 15:59:45 +0000</pubDate>
      <link>https://dev.to/kettanaito/announcing-mswjs-data-data-modeling-library-for-testing-javascript-applications-3290</link>
      <guid>https://dev.to/kettanaito/announcing-mswjs-data-data-modeling-library-for-testing-javascript-applications-3290</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;It's been more than a year since &lt;a href="https://mswjs.io"&gt;Mock Service Worker&lt;/a&gt; (MSW) began to appear in people's &lt;code&gt;package.json&lt;/code&gt;, improving the way you write tests, iterate on features, and debug API-related issues. We are incredibly thankful for everybody who supported us and gave the library a chance in their projects. That allowed us to gather a ton of feedback based on the usage scenarios you face every day. It is with that feedback that we can move the project forward to ease your testing and development workflow even more. And it is with that feedback that we are able to make this announcement.&lt;/p&gt;

&lt;p&gt;MSW was deliberately designed with only the essentials of API mocking in mind: interception of requests and response mocking. A huge focus was made on leveraging Service Worker API to enable a one-of-a-kind experience and support the same request handlers across different environments. While some alternative libraries come with built-in assertions or data-modeling options, our team has chosen a horizontal way to scale the project: distribute complimentary, on-demand libraries instead of stuffing dozens of functions and methods into a single package.&lt;/p&gt;

&lt;p&gt;Some of the most popular questions developers have when starting with MSW are related to data. You immediately notice how the library is agnostic to how you create and update data in your handlers. You may use a plain array or &lt;code&gt;Map&lt;/code&gt; to manage resources. Perhaps, you may even design a custom database abstraction that manages those resources in a more standardized way.&lt;/p&gt;

&lt;p&gt;No matter what data-related setup you end up with, it's there to answer the following questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to describe data resources?&lt;/li&gt;
&lt;li&gt;How to implement CRUD operations on data?&lt;/li&gt;
&lt;li&gt;How to persist the changes made to the data?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Today we are proud to announce the &lt;a href="https://github.com/mswjs/data"&gt;Data library&lt;/a&gt;—a standalone package to model and query data in your tests and beyond. Although the project is at the early stage of development and doesn't solve every problem right away, letting you try it out and gather your feedback is crucial for us to refine and shape the future experience.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mswjs"&gt;
        mswjs
      &lt;/a&gt; / &lt;a href="https://github.com/mswjs/data"&gt;
        data
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Data modeling and relation library for testing JavaScript applications.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Without further a due, let's talk about what's to become the recommended way to work with data in Mock Service Worker.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#data-modeling"&gt;
  &lt;/a&gt;
  Data modeling
&lt;/h2&gt;

&lt;p&gt;First, let's get acquainted with the two main terms that the Data library operates with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Model&lt;/em&gt;—description of the data. Think of it as a blueprint that describes what properties the data has.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Entity&lt;/em&gt;—an instance of a particular model. This is the exact data that implements its model description.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When working with Data, you define models and relationships between them, which, effectively, result in a virtual database being created.&lt;/p&gt;

&lt;p&gt;Install the package into your project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @mswjs/data 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, let's create a new "user" model:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mswjs/data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Models are defined by calling the &lt;code&gt;factory&lt;/code&gt; function and providing it with the object where keys represent &lt;em&gt;model names&lt;/em&gt;, and values stand for &lt;em&gt;model definitions&lt;/em&gt;. Each property in the model definition has an initializer—a function that seeds a value and infers its type.&lt;/p&gt;

&lt;p&gt;Notice how the &lt;code&gt;id&lt;/code&gt; property equals &lt;code&gt;primaryKey&lt;/code&gt;. Each model &lt;em&gt;must have a primary key&lt;/em&gt;, which acts as a unique ID in a conventional database table. Data exposes the &lt;code&gt;primaryKey&lt;/code&gt; function that you should use to mark a certain property as the model's primary key.&lt;/p&gt;

&lt;p&gt;In the example above, we're using plain functions that return static data. This means that each time a user is created, it will have &lt;code&gt;firstName: "John"&lt;/code&gt; and &lt;code&gt;age: 18&lt;/code&gt;. While this is a good foundation to build upon, the static nature of values may limit your data scenarios. Consider using tools like &lt;a href="https://github.com/marak/Faker.js/"&gt;Faker&lt;/a&gt; to define models with randomly generated realistic data.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mswjs/data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;faker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// Create a user model with a random UUID and first name.&lt;/span&gt;
  &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can define multiple models and relationships between them within the same &lt;code&gt;factory&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oneOf&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mswjs/data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;faker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;book&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;isbn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;// "book.publisher" is a relational property&lt;/span&gt;
    &lt;span class="c1"&gt;// that references an entity of the "publisher" model.&lt;/span&gt;
    &lt;span class="na"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;oneOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;publisher&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Learn more about &lt;a href="https://github.com/mswjs/data"&gt;defining model relationships&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#seeding"&gt;
  &lt;/a&gt;
  Seeding
&lt;/h2&gt;

&lt;p&gt;Once the models are defined, create an entity of a particular model by calling the &lt;code&gt;.create()&lt;/code&gt; method on it:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Creating an entity without any arguments will fill its properties using the value initializers you've specified in the model definition.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.create()&lt;/code&gt; method accepts an optional argument that stands for the initial values of the entity. For example, if we wish to create a user with a fixed "firstName" value, we can provide that value in the initial values object:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// Uses an exact value for the "firstName" property,&lt;/span&gt;
  &lt;span class="c1"&gt;// while seeding the "id" based on its getter.&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#querying-client"&gt;
  &lt;/a&gt;
  Querying client
&lt;/h2&gt;

&lt;p&gt;Apart from the data modeling functionality, this library provides a &lt;em&gt;querying client&lt;/em&gt; that allows you to find, modify, and delete entities on runtime. The querying client brings Data to life, as it enables dynamic scenarios against the generated data.&lt;/p&gt;

&lt;p&gt;Each model supports the following querying methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.findFirst()&lt;/code&gt;, finds the first entity that matches a query.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.findMany()&lt;/code&gt;, finds multiple entities that match a query.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.count()&lt;/code&gt;, returns the number of entities for a model.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.update()&lt;/code&gt;, updates an entity that matches a query.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.updateMany()&lt;/code&gt;, updates multiple entities that match a query.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.delete()&lt;/code&gt;, deletes an entity that matches a query.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.deleteMany()&lt;/code&gt;, deletes multiple entities that match a query.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most basic example of querying is finding an entity by its primary key. In our case, we can find a user by its "id" like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Find a user with the given "id" (primary key).&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findFirst&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc-123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's focus on &lt;code&gt;which&lt;/code&gt; part of the query above. When querying entities, &lt;code&gt;which&lt;/code&gt; is a predicate object that describes the criteria against an entity. The structure of that predicate is the following:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;expectedValue&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;[property]&lt;/code&gt;, a known property of the model. In the case of our "user" model, this can be "id" or "firstName".&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;[operator]&lt;/code&gt;, an operator function name that compares the actual and expected values of the referenced property.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Operators depend on the value type that's being queried. When querying a string (like we do with &lt;code&gt;which.id&lt;/code&gt;, where "id" is of the String type), operators like &lt;code&gt;equals&lt;/code&gt;, &lt;code&gt;notEquals&lt;/code&gt;, &lt;code&gt;contains&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt;, and others are available. When querying a number, you have access to the &lt;code&gt;gt&lt;/code&gt;, &lt;code&gt;lte&lt;/code&gt;, &lt;code&gt;between&lt;/code&gt;, etc. operators instead.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Querying methods are strongly typed, validating the known model properties and value-based operators on build time. Experiment with your models to learn about all the different options at your disposal!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a similar fashion, we can query multiple entities. Here's how we can get all the users that satisfy a certain age criteria:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Returns all users whose "user.age"&lt;/span&gt;
&lt;span class="c1"&gt;// is greater or equal 18.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;gte&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Data supports &lt;a href="https://github.com/mswjs/data#cursor-based-pagination"&gt;cursor&lt;/a&gt; and &lt;a href="https://github.com/mswjs/data#offset-based-pagination"&gt;offset&lt;/a&gt; pagination to work with large data sets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is much more functionality that Data provides, so don't hesitate to explore the library API. Refer to the &lt;a href="https://github.com/mswjs/data"&gt;documentation&lt;/a&gt; for API definition and usage examples.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#integration-with-mock-service-worker"&gt;
  &lt;/a&gt;
  Integration with Mock Service Worker
&lt;/h2&gt;

&lt;p&gt;Here's a gigantic cherry on top: you can turn any data model into &lt;a href="https://mswjs.io/docs/basics/request-handler"&gt;request handlers&lt;/a&gt; (both REST &lt;em&gt;and&lt;/em&gt; GraphQL) to encapsulate its operations, like creation and querying, under the respective API routes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#generating-rest-api"&gt;
  &lt;/a&gt;
  Generating REST API
&lt;/h3&gt;

&lt;p&gt;Using our &lt;code&gt;db&lt;/code&gt; and its "user" model, we can turn it into a REST API "server" in a single command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/mocks/browser.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setupWorker&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;msw&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// Import the "db" object.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./db&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setupWorker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="c1"&gt;// Generate REST API request handlers&lt;/span&gt;
  &lt;span class="c1"&gt;// based on the "user" model.&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toHandlers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Looks unfamiliar? Learn how to &lt;a href="https://mswjs.io/docs/getting-started/install"&gt;get started with Mock Service Worker&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Calling &lt;code&gt;.toHandlers()&lt;/code&gt; on a model generates CRUD routes for working with that model. In the example above, the following request handlers will be created:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;GET /users/&lt;/code&gt;, returns all users in the database.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GET /users/:id&lt;/code&gt;, returns a user by their primary key (&lt;code&gt;id&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;POST /users&lt;/code&gt;, creates a new user.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PUT /users/:id&lt;/code&gt;, updates an existing user.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DELETE /users/:id&lt;/code&gt;, deletes a user by their primary key.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Notice how the model name is pluralized ("user*&lt;em&gt;s&lt;/em&gt;*") to reflect the proper semantics when working with the "user" resource.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the handlers established, you can create and query users in your application as you would do against an actual HTTP server:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a new user in the database.&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// The body is used as the initial entity values.&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc-123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Then, query the created user.&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users/abc-123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Explore this interactive sandbox to learn more about generating REST API handlers from your data models:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/data-rest-api-handlers-i91nv"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#generating-graphql-api"&gt;
  &lt;/a&gt;
  Generating GraphQL API
&lt;/h3&gt;

&lt;p&gt;A model can also generate GraphQL handlers:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setupWorker&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toHandlers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;graphql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This command generates the following GraphQL schema with its types based on your model:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserQuery&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;take&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;!]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserInput&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;updateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserQueryInput&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserInput&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;updateUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserQueryInput&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserInput&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;!]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;deleteUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserQueryInput&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserInput&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;deleteUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserQueryInput&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UserInput&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;!]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;All the generated GraphQL types and their names are based on your model name and properties.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With your model turned into request handlers, you can query its entities as you would usually do in GraphQL. Here's an example that uses Apollo to get a user entity by ID:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@apollo/client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GET_USER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
  query GetUser {
    # Hey, it's the same query as in the ".findMany()" method!
    user(which: { id: { equals: "abc-123" } }) {
      firstName
      age
    }
  }
`&lt;/span&gt;

&lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GET_USER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Explore the GraphQL example on Codesandbox:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/data-graphql-api-handlers-2xc4i"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#call-for-contributors"&gt;
  &lt;/a&gt;
  Call for Contributors!
&lt;/h2&gt;

&lt;p&gt;Data is a new library that has a long way to go and multiple areas to improve. For instance, these are some of the features we'd love to implement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client-side persistence;&lt;/li&gt;
&lt;li&gt;Server-side rendering support;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.createMany()&lt;/code&gt; method to seed multiple entities at once, respecting their relations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you would like to learn about data modeling or find this area fascinating, &lt;a href="https://github.com/mswjs/data/issues"&gt;&lt;strong&gt;join as a contributor&lt;/strong&gt;&lt;/a&gt; and shape the way developers would model their fixtures.&lt;/p&gt;

&lt;p&gt;You can also support the project financially by &lt;a href="https://opencollective.com/mswjs"&gt;&lt;strong&gt;sponsoring it on Open Collective&lt;/strong&gt;&lt;/a&gt;, allowing the team to work on bug fixes and stunning new features. Your support will not go unnoticed!&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#resources-amp-links"&gt;
  &lt;/a&gt;
  Resources &amp;amp; links
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mswjs"&gt;
        mswjs
      &lt;/a&gt; / &lt;a href="https://github.com/mswjs/data"&gt;
        data
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Data modeling and relation library for testing JavaScript applications.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mswjs/msw"&gt;Mock Service Worker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ApiMocking"&gt;Follow on Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Create own Blog app in Django [Tutorial]</title>
      <author>CodeSnail 🐌</author>
      <pubDate>Mon, 12 Apr 2021 15:57:24 +0000</pubDate>
      <link>https://dev.to/soniarpit/create-own-blog-app-in-django-tutorial-4bb2</link>
      <guid>https://dev.to/soniarpit/create-own-blog-app-in-django-tutorial-4bb2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#blog-features"&gt;
  &lt;/a&gt;
  Blog Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CKEditor in Admin&lt;/li&gt;
&lt;li&gt;Threaded Comment system&lt;/li&gt;
&lt;li&gt;Tagging functionality&lt;/li&gt;
&lt;li&gt;Retrieving similar posts&lt;/li&gt;
&lt;li&gt;Search functionality&lt;/li&gt;
&lt;li&gt;Auto Sitemap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So Let's start&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtual-environment-setup"&gt;
  &lt;/a&gt;
  Virtual Environment Setup
&lt;/h2&gt;

&lt;p&gt;Virtualenv is a tool used to create an isolated Python environment. This environment has its own installation directories that doesn’t share libraries with other virtualenv environments (and optionally doesn’t access the globally installed libraries either).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;to install virtual environment just type following command in the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip3 install virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before making a virtual environment we make project directory. Inside it, we make a virtual environment. Type following command in terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir awwblog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside awwblog directory we setup virtual environment. Type following command in terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd awwblog/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First find your python installation path of particular version,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;which python3.9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I use python3.9 here. By above command you get the path of the python3.9 (of any version)&lt;/p&gt;

&lt;p&gt;I want python3.9 in my virtual environment. So let’s create virtual environment.&lt;/p&gt;

&lt;p&gt;Using virtualenv command we created env_awwblog virtual environment. Every python installation goes inside that. But before installing python stuff we need to activate the virtual environment.&lt;/p&gt;

&lt;p&gt;Type following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source env_awwblog/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No, we are ready to install Django inside virtual environment. So let’s go…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-django"&gt;
  &lt;/a&gt;
  Installing Django
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip3 install Django
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now Django is installed in our environment&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-awwblog-project"&gt;
  &lt;/a&gt;
  Creating awwblog Project
&lt;/h2&gt;

&lt;p&gt;Everything going fine right. Now we start the project using django-admin command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;django-admin startproject awwblog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command should have created a awwblog directory. Use the command cd awwblog to go into the directory.&lt;/p&gt;

&lt;p&gt;The command should have created a awwblog directory. Use the command cd awwblog to go into the directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just hit the url &lt;a href="http://127.0.0.1:8000/"&gt;http://127.0.0.1:8000/&lt;/a&gt; in browser.&lt;br&gt;
Now you can see this,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AZI1Y0J2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codesnail.com/wp-content/uploads/2021/03/image-7-1024x529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AZI1Y0J2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codesnail.com/wp-content/uploads/2021/03/image-7-1024x529.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you see this in your browser, congratulation!! your Django installation is done successfully. Now we create an app.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-blog-app"&gt;
  &lt;/a&gt;
  Creating blog App
&lt;/h2&gt;

&lt;p&gt;Now let’s create your first Django application. You will create a blog application from scratch. From the project’s root directory, run the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 manage.py startapp blog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open awwblog directory in your favorite code editor. I am using VS code. Below is the structure of how our project file structure looks like after setting up everything,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WfQ7mPVK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codesnail.com/wp-content/uploads/2021/03/image-8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WfQ7mPVK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codesnail.com/wp-content/uploads/2021/03/image-8.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now open settings.py in the awwblog directory. The first thing you need to do is to add the created app “blog” in the INSTALLED_APPS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.admin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.auth'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.contenttypes'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.sessions'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.messages'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.staticfiles'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'blog'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This holds the Django apps you’ll be using in the Django project.&lt;/p&gt;

&lt;p&gt;That’s it for this article. In next tutorial we will build post modal to store blog posts.&lt;/p&gt;

&lt;p&gt;Hope you like it. Please share this tutorial with your friends.&lt;/p&gt;

&lt;p&gt;Next: &lt;a href="https://www.codesnail.com/designing-the-blog-data-schema-django-blog-2/"&gt;Next: Designing the blog data schema – Django Blog #2&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>django</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Idea to sale in 2 hours</title>
      <author>farez</author>
      <pubDate>Mon, 12 Apr 2021 15:52:36 +0000</pubDate>
      <link>https://dev.to/farez/idea-to-sale-in-2-hours-3jh3</link>
      <guid>https://dev.to/farez/idea-to-sale-in-2-hours-3jh3</guid>
      <description>&lt;p&gt;On 7 April 2021, Gumroad promoted their GumroadDay. It's one day when sellers on gumroad.com get to keep 100% of sales revenue. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/search?q=%23GumroadDay&amp;amp;src=typeahead_click"&gt;GumroadDay&lt;/a&gt; looked like a success because it got a lot of exposure on Twitter and it drove sellers to promote their product on Gumroad, usually with a &lt;a href="https://twitter.com/farez/status/1379742789768896516"&gt;one day discount&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While it looked like a great opportunity for sellers, some lamented that they didn't have anything to sell to take advantage of it. &lt;/p&gt;

&lt;p&gt;So I wondered, would it be possible to create something to sell in an hour? &lt;a href="https://twitter.com/farez/status/1379744692963696641"&gt;That thought&lt;/a&gt; turned into a personal challenge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deciding-what-to-sell"&gt;
  &lt;/a&gt;
  Deciding what to sell
&lt;/h2&gt;

&lt;p&gt;First step: what to sell?&lt;/p&gt;

&lt;p&gt;I only had an hour, so I needed something I could create easily and quickly. And for customers I'm familiar with. &lt;/p&gt;

&lt;p&gt;These came to mind:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Photos&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the last few months, I've been playing around with taking stock photos and uploading them for sale on EyeEm. I have a lot of photos and it would have been easy to pick a few, edit them, and sell them. &lt;/p&gt;

&lt;p&gt;Problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I don't know the customer segment well and don't have an existing audience or channel for it.&lt;/li&gt;
&lt;li&gt;I don't think Gumroad is known for selling stock photos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;My time&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I could sell my time. I'm a freelancer after all, and I know how to sell this well.&lt;/p&gt;

&lt;p&gt;Problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's not a scalable product.&lt;/li&gt;
&lt;li&gt;I wanted to sell something that's cheap enough, and my time isn't cheap.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Documents&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I'm a freelance web developer, and over the years I've built and refined various processes and documents I use for my day-to-day. &lt;/p&gt;

&lt;p&gt;One of the documents is a "Standard Terms and Conditions" document I include in every client contract. I could repackage this easily and it can be sold at a cheap enough price. And freelancers are constantly looking for legal document templates to reuse for their own projects. &lt;/p&gt;

&lt;p&gt;So a "Terms and Conditions document template for freelancers" seems to be the best option, because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is a clear &lt;strong&gt;problem&lt;/strong&gt;: creating a legally binding contract document is expensive, difficult, and boring. &lt;/li&gt;
&lt;li&gt;There is a clear &lt;strong&gt;target&lt;/strong&gt; segment: freelance web developers, like me.&lt;/li&gt;
&lt;li&gt;There is an obvious &lt;strong&gt;solution&lt;/strong&gt;: a template document that's quick to use. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Execution&lt;/strong&gt; is easy and obvious: just take what I've been using and refining for so many years and repurpose it into a template.&lt;/li&gt;
&lt;li&gt;There is a ready &lt;strong&gt;distribution&lt;/strong&gt; channel: the small audience that I have and taking advantage of the #GumroadDay hashtag on Twitter for discovery.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-product"&gt;
  &lt;/a&gt;
  Creating the product
&lt;/h2&gt;

&lt;p&gt;This was easy. &lt;/p&gt;

&lt;p&gt;All I had to do was take the document, and replace all mention of my business name with this placeholder: [[ YOUR BUSINESS NAME ]].&lt;/p&gt;

&lt;p&gt;I assumed that potential customers for this document template would be freelancers who are less experienced. So I needed to include a simple "user guide". &lt;/p&gt;

&lt;p&gt;In doing so, I realised that Terms and Conditions document on its own is half the solution, because there's usually another document that accompanies it: a Proposal document. So I decided to also add a simple Proposal template into the package. &lt;/p&gt;

&lt;p&gt;Again, this is easy because I already have one I've been using for my own client projects.&lt;/p&gt;

&lt;p&gt;The result is a package consisting of a &lt;a href="https://gumroad.com/l/freelance_docs"&gt;Proposal template and a Terms and Conditions template for freelance web developers&lt;/a&gt;, in Google Docs format.&lt;/p&gt;

&lt;p&gt;Total time: 1 hour.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#packaging-and-sales-copy"&gt;
  &lt;/a&gt;
  Packaging and sales copy
&lt;/h2&gt;

&lt;p&gt;Next, I had to sell it on Gumroad. And this actually took a bit of time. &lt;/p&gt;

&lt;p&gt;First I had to write the sales copy. Next I had to include a couple of screen grabs to show what the documents look like. And finally, I needed a cover image for the product.&lt;/p&gt;

&lt;p&gt;For the sales copy, luckily I already had a prior product on Gumroad (an eBook) which I can refer to. I just used the sale copy structure from that product and tweaked it.&lt;/p&gt;

&lt;p&gt;For the cover image, I went on Canva and looked for some ready made templates I can use. I did find one that I like, and spent 10 minutes just changing the copy. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#promotion"&gt;
  &lt;/a&gt;
  Promotion
&lt;/h2&gt;

&lt;p&gt;Once I've created the product on Gumroad and published it, I tweeted it out with the #GumroadDay tag for visibility.&lt;/p&gt;

&lt;p&gt;I also shared it with a handful of forums and groups I'm a part of, on Slack and Telegram.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h2&gt;

&lt;p&gt;Only 7 copies sold, but, the first sale came in within 5 minutes! &lt;/p&gt;

&lt;p&gt;I wasn't actually expecting to sell any as the challenge was mainly to see if I could create and sell in an hour. &lt;/p&gt;

&lt;p&gt;But the beauty of creating a digital product is that you can keep selling it many times. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lessons-learnt"&gt;
  &lt;/a&gt;
  Lessons learnt
&lt;/h2&gt;

&lt;p&gt;The whole process from idea to sale took 2 hours. I didn't quite meet the 1-hour challenge I gave myself, but 2 hours is still quick. &lt;/p&gt;

&lt;p&gt;What I underestimated was the time required for packaging and sales. This took about an hour.&lt;/p&gt;

&lt;p&gt;Giving myself a very tight time constraint was fantastic for focus. There was no time to waste time on "research" and there was no time for perfectionism. There was only one goal: ship.&lt;/p&gt;

&lt;p&gt;This meant I had to work with what I had and what I knew, and this is something a lot of founders lose sight of, me included. &lt;/p&gt;

&lt;p&gt;Using what you know and selling it to people you already have access to can save you months of time. &lt;/p&gt;

&lt;p&gt;Riding on a trend is also a great way to get exposure. In the case of this product, it was #GumroadDay in Twitter. I could also look out for other trends in future, for example #FreelanceDay and create a promotion for it.&lt;/p&gt;

&lt;p&gt;So, in the end, 7 sales isn't much. But I can reinvest that money into ads and more marketing to try and sell more. &lt;/p&gt;

&lt;p&gt;To me, the main lesson is this: &lt;/p&gt;

&lt;p&gt;Building and launching requires less time than you think.&lt;/p&gt;

&lt;p&gt;Here's the end result: &lt;a href="https://gumroad.com/l/freelance_docs"&gt;Freelance Web Dev Proposal and T&amp;amp;C Templates&lt;/a&gt;&lt;/p&gt;

</description>
      <category>freelance</category>
      <category>templates</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
