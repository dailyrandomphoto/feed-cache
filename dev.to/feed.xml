<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Create a Blog using Hugo</title>
      <author>Aditya</author>
      <pubDate>Thu, 06 May 2021 15:29:04 +0000</pubDate>
      <link>https://dev.to/adityavinodh/create-a-blog-using-hugo-447l</link>
      <guid>https://dev.to/adityavinodh/create-a-blog-using-hugo-447l</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-hugo"&gt;
  &lt;/a&gt;
  What is Hugo?
&lt;/h1&gt;

&lt;p&gt;Hugo is a static-site generator that helps you generate and build static files like HTML, CSS, and JavaScript ahead of time. It is an opensource project built with Go and boasts impressive build times that seems incomparable.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-does-it-do"&gt;
  &lt;/a&gt;
  What does it do?
&lt;/h1&gt;

&lt;p&gt;It helps you convert markdown files (the files you will be writing your articles or blog posts in) to the static files that will be served later. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-is-it-different"&gt;
  &lt;/a&gt;
  How is it different?
&lt;/h1&gt;

&lt;p&gt;This is different to traditional methods like a wordpress site, that has a dedicated database and a web server that needs to respond to requests, communicate with the Databse, and serve the files on every request. It is much more slower than using a static-site generator like Hugo as nothing is dynamic; we know that the content is not going to change. HTTP web servers are extremely good and fast at just serving static content. Users ask for a file, and the server just has to give it. There is no other processing involved.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-benefits"&gt;
  &lt;/a&gt;
  The Benefits
&lt;/h1&gt;

&lt;p&gt;Your website can be deployed and hosted anywhere (On GCP cloud storage, AWS S3, Netlfify, Firebase, etc.), and can be deployed to a CDN (Content Delivery Network) so that it can be cached on a global edge network and significantly improve the performance and speed of page loads. This is especially important with poor internet connections, and for SEO (Search Engine Optimization).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#caveats"&gt;
  &lt;/a&gt;
  Caveats
&lt;/h1&gt;

&lt;p&gt;However, that does not mean Hugo can not be used for anything dynamic. If your use case if very complex such as involving user input, you might not be able to use Hugo. Using a regular website, or single-page-application with React, Angular, Vue, or Svelte might be a better option. But if all you need is a simple blog, with a few extra features, like an option for users to provide comments, Hugo has everything you need.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#get-started"&gt;
  &lt;/a&gt;
  Get Started
&lt;/h1&gt;

&lt;p&gt;The &lt;a href="https://gohugo.io/documentation/"&gt;Hugo Documentation&lt;/a&gt; is very helpful and elaborate. It is the first place to check in case of references or issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;Hugo is available in all platforms (Windows, MacOS, and Linux), as a binary that you can install, or via a package manager. If you have a compatible package manager, that is the recommended way as it is the easiest and has the least amount of work to maintain&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-using-the-binaries"&gt;
  &lt;/a&gt;
  Install using the Binaries
&lt;/h3&gt;

&lt;p&gt;Availabe from their GitHub &lt;a href="https://github.com/gohugoio/hugo/releases"&gt;Releases&lt;/a&gt; page. (Choose the appropriate platform and type of file). Make sure to install it in a location that is somewhere in your &lt;code&gt;PATH&lt;/code&gt;. &lt;code&gt;usr/local/bin&lt;/code&gt; is the best place for Linux. Otherwise, append the location to your &lt;code&gt;PATH&lt;/code&gt; variable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-using-a-package-manager"&gt;
  &lt;/a&gt;
  Install using a Package Manager
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;On Windows&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;choco install hugo -confirm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scoop install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;&lt;strong&gt;On Linux and MacOS&lt;/strong&gt; (Using Homebrew)&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;To verify that the installation occurred successfully, run the following command.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hugo version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;There should not be any errors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-site"&gt;
  &lt;/a&gt;
  Creating the Site
&lt;/h2&gt;

&lt;p&gt;Change directories into the location you want to create your project. Then run the following command with your project's name. This will create folder that contains all the files that you need to get started.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Creates a new site and project called 'firstblog'
hugo new site firstblog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Change directories into the project directory that was created.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd firstblog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You will notice a similar folder structure. The &lt;code&gt;config.toml&lt;/code&gt; file is where all the variables and settings for your projects live. You will be able to setup and configure most of your website from that one file.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
├── archetypes
├── config.toml
├── content
├── data
├── layouts
├── static
└── themes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If you want to change the file type for your configurations, you can change it to YAML or JSON depending on your preference. You can copy and paste the contents of the file using a tool like &lt;a href="https://www.convertsimple.com/convert-toml-to-yaml/"&gt;ConvertSimple&lt;/a&gt; to convert the format and syntax.&lt;/p&gt;

&lt;p&gt;All of the actual content that you write as markdown files lives inside the &lt;code&gt;content&lt;/code&gt; directory. You can organize the content in folders, and subfolders, and Hugo will automatically take care of organizing the posts as categories or subcategories.&lt;/p&gt;

&lt;p&gt;Use the following command to create a blank markdown file. You can specify where you want to store this file. If the file name alone is provided, then it is directly placed in the &lt;code&gt;content&lt;/code&gt; directory.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hugo create first-post.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;or try the following to place it in &lt;code&gt;content/posts&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hugo create posts/first-post.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;h3&gt;
  &lt;a href="#front-matter"&gt;
  &lt;/a&gt;
  Front Matter
&lt;/h3&gt;

&lt;p&gt;Every markdown file that is created and used for your website has a section on the top that is unique to Hugo. It starts and ends with &lt;code&gt;---&lt;/code&gt;. The syntax used in this is &lt;code&gt;TOML&lt;/code&gt; by default. You can change this default setting with the following command:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To convert to YML
hugo convert toYAML
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In the front matter, you can set options for the specific page, meta data, and other configuration that is specific to this particular page. Check out the documentation of &lt;a href="https://gohugo.io/content-management/front-matter/"&gt;Front Matter&lt;/a&gt; to learn the different options available.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-a-theme"&gt;
  &lt;/a&gt;
  Install a Theme
&lt;/h3&gt;

&lt;p&gt;One of the powers of Hugo is to utilize one of the many themes created by the community. Check out the &lt;a href="https://themes.gohugo.io/"&gt;Complete List&lt;/a&gt; and choose one of the themes. Read the documentation and install the theme. This process is very straightforward. Mostly, you will have to download the code, either manually, or using Git, and place it in the &lt;code&gt;themes&lt;/code&gt; folder, then inside another folder with the name of the theme you chose.&lt;/p&gt;

&lt;p&gt;Then make sure to go to the &lt;code&gt;config&lt;/code&gt; file and update the theme variable with the name of the theme you have chosen.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#running-the-site"&gt;
  &lt;/a&gt;
  Running the Site
&lt;/h3&gt;

&lt;p&gt;Hugo has an in-built web server that helps you view the site locally, and automatically watches your files for changes, and re-runs when the changes occur.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hugo server -D&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#deployment"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  Deployment&lt;br&gt;
&lt;/h2&gt;

&lt;p&gt;With the following command, Hugo builds your site and outputs the final static content to the &lt;code&gt;public&lt;/code&gt; directory by default. That can be modified in the &lt;code&gt;config&lt;/code&gt; file if needed. The contents of this file needs to be deployed with whatever hosting provider you chose to use.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hugo -D&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h1&gt;
&lt;br&gt;
  &lt;a href="#bonus-content"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  Bonus content&lt;br&gt;
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#hosting"&gt;
  &lt;/a&gt;
  Hosting
&lt;/h2&gt;

&lt;p&gt;Hugo is very feature-rich, and is an amazing product if used wisely. You could set up a CI/CD Pipeline to run every time you make changes and deploy to your hosting provider of choice.&lt;/p&gt;

&lt;p&gt;I have setup this blog using GitHub Actions and Firebase. Every time code is merged, a commit is made to the main branch, or a Pull Request is merged, a Firebase workflow runs on GitHub in the cloud that deploys the content of the &lt;code&gt;public&lt;/code&gt; directory to Firebase Hosting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comments"&gt;
  &lt;/a&gt;
  Comments
&lt;/h2&gt;

&lt;p&gt;You can add a comments or discussion section to all of your pages (or select ones) easily using &lt;a href="https://disqus.com/"&gt;Disqus&lt;/a&gt;. Instructions and setup is very straightforward and simple.&lt;/p&gt;




&lt;p&gt;That's all for this post and tutorial. I hoped this has helped you and given you an idea of how things work.&lt;/p&gt;

</description>
      <category>hugo</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What Is "Lifting State Up" in React?</title>
      <author>Reed Barger</author>
      <pubDate>Thu, 06 May 2021 15:22:32 +0000</pubDate>
      <link>https://dev.to/reedbarger/what-is-lifting-state-up-in-react-o97</link>
      <guid>https://dev.to/reedbarger/what-is-lifting-state-up-in-react-o97</guid>
      <description>&lt;p&gt;Here is a simple, practical example of what the React concept of "lifting state up" is and how it can help you in building your applications.&lt;/p&gt;

&lt;p&gt;Lifting state up is a common pattern that is essential for React developers to know, because it helps us avoid more complex (and often unnecessary) patterns for managing our state.&lt;/p&gt;

&lt;p&gt;How does it do that? Let's see how through a simple example.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Want to build amazing React apps using best practices from front to back? Check out the &lt;a href="https://reactbootcamp.com"&gt;&lt;strong&gt;React Bootcamp&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#breaking-down-our-todo-app"&gt;
  &lt;/a&gt;
  Breaking down our Todo App
&lt;/h2&gt;

&lt;p&gt;Let's start with a basic todo application, which consists of three components: &lt;code&gt;TodoCount&lt;/code&gt;, &lt;code&gt;TodoList&lt;/code&gt; and &lt;code&gt;AddTodo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All of these components, as their name suggests, are going to need to share some common state.&lt;/p&gt;

&lt;p&gt;If we look at &lt;code&gt;TodoCount&lt;/code&gt;, this is where we're going to display up at the top of our app, how many total to dues we have in our application.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;TodoList&lt;/code&gt; is going to be where we show all of our todos. It has some initial state with these three items ("item 1", "item 2", "item 3"), which we're displaying within an unordered list.&lt;/p&gt;

&lt;p&gt;And finally, we have &lt;code&gt;AddTodo&lt;/code&gt;. This consists of a form, where we want to be able to add a new item to this list. Right now we're just logging the todo that we type into the input to the console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/App.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoCount&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoList&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AddTodo&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TodoCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Total&lt;/span&gt; &lt;span class="nx"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TodoList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;AddTodo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-do-we-care-about-lifting-state-up"&gt;
  &lt;/a&gt;
  Why do we care about lifting state up?
&lt;/h2&gt;

&lt;p&gt;How can we use the concept of lifting state up to help finish our application?&lt;/p&gt;

&lt;p&gt;These components need to share some state, some todo state. We need to share that todo state order to display the number of todos as well as to update our todo list.&lt;/p&gt;

&lt;p&gt;This is where the concept of lifting state up comes in.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We lift up state to a common ancestor of components that need it, so that they can all share in the state. This allows us to more easily share state among all of these components that need rely upon it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What common ancestor should we lift up our state to so all of the components can read from and update that state? The &lt;code&gt;App&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;Here's what our app should now look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/App.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;    

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoCount&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoList&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AddTodo&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TodoCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Total&lt;/span&gt; &lt;span class="nx"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TodoList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;AddTodo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#passing-state-down"&gt;
  &lt;/a&gt;
  Passing state down
&lt;/h2&gt;

&lt;p&gt;However, there's a small problem.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;TodoList&lt;/code&gt; doesn't have access to the &lt;code&gt;todos&lt;/code&gt; state variable, so we need to pass that down from &lt;code&gt;App&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O_EHSOkQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reactbootcamp.com/content/images/2021/05/Screen-Shot-2021-05-05-at-12.29.41-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O_EHSOkQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reactbootcamp.com/content/images/2021/05/Screen-Shot-2021-05-05-at-12.29.41-AM.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can do that with components in React using props.&lt;/p&gt;

&lt;p&gt;On &lt;code&gt;TodoList&lt;/code&gt;, let's add a prop named &lt;code&gt;todos&lt;/code&gt;. We can destructure &lt;code&gt;todos&lt;/code&gt; from the props object. This allows us to see our todo items once again.&lt;/p&gt;

&lt;p&gt;Now what about displaying the total number of todos within our to do count component?&lt;/p&gt;

&lt;p&gt;This is another instance in which we can pass down the data as a prop, since to do count relies upon that state. So we'll again provide the same prop of to dues the structure from to do counts, props object, and to display the total number of to dues. That would be from the value &lt;code&gt;todos.length&lt;/code&gt;, and we see that it's 3 currently.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoCount&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoList&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AddTodo&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TodoCount&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Total&lt;/span&gt; &lt;span class="nx"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TodoList&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#passing-callbacks-down"&gt;
  &lt;/a&gt;
  Passing callbacks down
&lt;/h2&gt;

&lt;p&gt;Now the last step is to be able to add a new todo.&lt;/p&gt;

&lt;p&gt;This is where our setter function, &lt;code&gt;setTodos&lt;/code&gt;, comes in. To update our todo state, we don't need to pass down both values, the variable and the setter function, all we need to do is pass down &lt;code&gt;setTodos&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We'll pass it down to &lt;code&gt;addTodo&lt;/code&gt; as a prop of the same name (setTodos) and destructure it from props.&lt;/p&gt;

&lt;p&gt;As you can see, we're using our form on submit to get access to the input's value; whatever was typed into it, which we're putting it within a local variable named &lt;code&gt;todo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Instead of needing to pass down the current todos array, we can just use an inner function to get the previous todos value. This allows us to get previous todos and just return what we want the new state to be.&lt;/p&gt;

&lt;p&gt;This new state will be an array, in which we will spread all of the previous todos and add our new todo as the last element in that array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoCount&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoList&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AddTodo&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;AddTodo&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevTodos&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;prevTodos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Not only by lifting state up and passing its state variable down to the components that need to read from it, can we use this pattern, we can also use it for callbacks to be able to update state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once we add a new item to our todo list, it's immediately added to state and we see our &lt;code&gt;TodoList&lt;/code&gt; component re-render to display that new item, as well as &lt;code&gt;TodoCount&lt;/code&gt; to show the total number of todos which is now 4:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3FDImXMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://reactbootcamp.com/content/images/2021/05/lifting-state-2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3FDImXMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://reactbootcamp.com/content/images/2021/05/lifting-state-2.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Lifting state up is an important pattern for React developers because sometimes we have state that's located within a particular component that also needs to be shared with sibling components.&lt;/p&gt;

&lt;p&gt;Instead of using an entire state management library like Redux or React Context, we can just lift the state up to the closest common ancestor and pass both the state variables the state values down as well as any callbacks to update that state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ready-for-the-next-step-join-the-react-bootcamp"&gt;
  &lt;/a&gt;
  Ready for the next step? Join The React Bootcamp
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://bit.ly/join-react-bootcamp"&gt;The React Bootcamp&lt;/a&gt;&lt;/strong&gt; takes everything you should know about learning React and bundles it into one comprehensive package, including videos, cheatsheets, plus special bonuses.&lt;/p&gt;

&lt;p&gt;Gain the insider information hundreds of developers have already used to master React, find their dream jobs, and take control of their future:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/join-react-bootcamp"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w2usNUi9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reedbarger.nyc3.digitaloceanspaces.com/react-bootcamp-banner.png" alt="The React Bootcamp"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Click here to be notified when it opens&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Precision agriculture by m0nit0ring and c0ntr0lling system</title>
      <author>GUNTAKA LIKHITHA</author>
      <pubDate>Thu, 06 May 2021 15:05:45 +0000</pubDate>
      <link>https://dev.to/221910304021/precision-agriculture-by-m0nit0ring-and-c0ntr0lling-system-45ao</link>
      <guid>https://dev.to/221910304021/precision-agriculture-by-m0nit0ring-and-c0ntr0lling-system-45ao</guid>
      <description>&lt;p&gt;Precision agriculture by m0nit0ring and c0ntr0lling system is the last decade techn0l0gical ev0luti0n that als0 affected breeding of d0mestic animals.&lt;br&gt;
Use of vari0us sens0rs and wireless devices:&lt;/p&gt;

&lt;p&gt;1)Farmers can 0btain inf0rmati0n ab0ut s0il humidity using I0T techn0l0gy, but farmers estimate the s0il humidity acc0rding to the rainfall.&lt;/p&gt;

&lt;p&gt;2)Farmers can 0btain inf0rmati0n ab0ut nutrients c0nditi0ns in the s0il, but farmers used t0 kn0w the nutrients by c0ntinu0us 0bservati0n.&lt;/p&gt;

&lt;p&gt;3)Farmers can 0btain inf0rmati0n ab0ut the 0ccurrence of plant diseases and pests in plants but in the past farmers used to kn0w the nutrients by c0ntinu0us 0bservati0n.&lt;br&gt;
Maj0r challenges faced by the agriculture d0main are the excess use 0f water and fertilizers in harvests, which will diminish the quality and quantity of the pr0ducts. This pr0blem can be tackled by the utilizati0n 0f the pr0p0sed system. Hence, the pr0p0sed framew0rk can be implemented in a real-time farming envir0nment t0 get rev0luti0nary results. This can be extended by including disease predicti0n and a rec0mmendati0n system t0 pr0vide instructi0ns t0 farmers regarding pesticides and cultivati0n. We can als0 include a web service platf0rm f0r c0llab0rative gr0up c0mmunicati0n between farmers and agricultural experts as future w0rk. A system has t0 be devel0ped t0 measure pesticide levels in cr0ps. Sustainable energy can be used f0r 0perating the system rather than using electricity.&lt;/p&gt;

&lt;p&gt;Features: -&lt;/p&gt;

&lt;p&gt;1)Intelligent agriculture.&lt;/p&gt;

&lt;p&gt;2)Inf0rmation systems and c0ntr0l netw0rks applied in real farming scenari0s.&lt;/p&gt;

&lt;p&gt;3)Aut0matic c0ntr0l system pr0vides appr0priate gr0wth c0nditi0ns in the greenh0use.&lt;/p&gt;

&lt;p&gt;4)Sens0r netw0rk.&lt;/p&gt;

&lt;p&gt;5)Data collecti0n.&lt;/p&gt;

&lt;p&gt;6)Netw0rk service.&lt;/p&gt;

&lt;p&gt;7)Data fusi0n.&lt;/p&gt;

&lt;p&gt;8)C0mputati0n in intelligent agriculture.&lt;/p&gt;

&lt;p&gt;9)C0ntr0lling plant diseases and insect pests.&lt;/p&gt;

&lt;p&gt;10)Aut0n0m0us tracing system.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>🎉 The Create Go App project has grown to v2, but is still easier, better, faster &amp; stronger</title>
      <author>Vic Shóstak</author>
      <pubDate>Thu, 06 May 2021 14:55:16 +0000</pubDate>
      <link>https://dev.to/koddr/the-create-go-app-project-has-grown-to-v2-but-is-still-easier-better-faster-stronger-575j</link>
      <guid>https://dev.to/koddr/the-create-go-app-project-has-grown-to-v2-but-is-still-easier-better-faster-stronger-575j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hello, friends! 😉 I'm excited to share great news with you: the &lt;a href="https://github.com/create-go-app/cli"&gt;Create Go App CLI&lt;/a&gt; project, &lt;em&gt;that I've been working on for a long time&lt;/em&gt;, has finally been updated to major version &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In case anyone forgot, I remind you that with this CLI you can create in just a few seconds a new production-ready project with &lt;strong&gt;backend&lt;/strong&gt; (Go), &lt;strong&gt;frontend&lt;/strong&gt; (JavaScript, TypeScript) and &lt;strong&gt;deploy automation&lt;/strong&gt; (Ansible, Docker).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;☝️ You only need to focus on writing code and thinking of business-logic! The CLI will take care of the rest.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OK. Let's look at the changes together! Fasten your seat belts, we're starting.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  📝 Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#new-in-v2-and-beyond"&gt;New in v2 and beyond&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#changes-in-cli-commands"&gt;Changes in CLI commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#ansible-roles"&gt;Ansible roles&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#web-proxy-servers"&gt;Web, proxy servers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#database"&gt;Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cache-key-value-storage"&gt;Cache, key-value storage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#project-wiki-page"&gt;Project Wiki page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#your-assistance-to-the-project"&gt;Your assistance to the project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-in-v2-and-beyond"&gt;
  &lt;/a&gt;
  New in v2 and beyond
&lt;/h2&gt;

&lt;p&gt;There are actually quite a few changes, but I've highlighted a few of the &lt;strong&gt;most important&lt;/strong&gt; ones that change the way you work with the Create Go App CLI. For all other changes, please read the release notes in our GitHub repository:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/create-go-app"&gt;
        create-go-app
      &lt;/a&gt; / &lt;a href="https://github.com/create-go-app/cli"&gt;
        cli
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      ✨ A powerful CLI for the Create Go App project. Create a new production-ready project with backend, frontend and deploy automation by running one CLI command!
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changes-in-cli-commands"&gt;
  &lt;/a&gt;
  Changes in CLI commands
&lt;/h2&gt;

&lt;p&gt;This release was aimed primarily at speeding up the CLI and reducing the functionality of commands that were too overloaded.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-init-endraw-command"&gt;
  &lt;/a&gt;
  &lt;code&gt;init&lt;/code&gt; command
&lt;/h3&gt;

&lt;p&gt;After some analysis of the CLI command feedback, we concluded that the command to create a configuration file is very rarely used. The same comment from the focus group of our users, followed about the configuration file itself.&lt;/p&gt;

&lt;p&gt;The most popular comment we got, was something like this: &lt;/p&gt;

&lt;p&gt;— [...] &lt;em&gt;nobody likes setting up yet another config for yet another CLI!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, it was decided to remove &lt;code&gt;init&lt;/code&gt; command and file-based config &lt;code&gt;.cgapp.yml&lt;/code&gt; completely, even &lt;strong&gt;without&lt;/strong&gt; the possibility of backward compatibility, which we successfully did in &lt;code&gt;v2.0.0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-create-endraw-command"&gt;
  &lt;/a&gt;
  &lt;code&gt;create&lt;/code&gt; command
&lt;/h3&gt;

&lt;p&gt;The central CLI command has been redesigned, and its execution time has been &lt;strong&gt;reduced to 2-4 seconds&lt;/strong&gt;. This was achieved by switching to generating the frontend part of the project using ready-made templates from the awesome next generation frontend tooling called &lt;a href="https://vitejs.dev/"&gt;Vite.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SmFIbrRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi3suks2f304z2oh389u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SmFIbrRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi3suks2f304z2oh389u.png" alt="vite js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, you can choose between this frontend frameworks/libraries: &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;JavaScript template&lt;/th&gt;
&lt;th&gt;TypeScript template&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Pure (vanilla)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-vanilla"&gt;&lt;code&gt;vanilla&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-vanilla"&gt;&lt;code&gt;vanilla-ts&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;React&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v17.0.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-react"&gt;&lt;code&gt;react&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-react-ts"&gt;&lt;code&gt;react-ts&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Preact&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v10.5.13&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-preact"&gt;&lt;code&gt;preact&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-preact-ts"&gt;&lt;code&gt;preact-ts&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vue.js&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v3.0.5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-vue"&gt;&lt;code&gt;vue&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-vue-ts"&gt;&lt;code&gt;vue-ts&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Svelte&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v3.37.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-svelte"&gt;&lt;code&gt;svelte&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-svelte-ts"&gt;&lt;code&gt;svelte-ts&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lit&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v2.4.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-lit-element"&gt;&lt;code&gt;lit-element&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app/template-lit-element-ts"&gt;&lt;code&gt;lit-element-ts&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠️ Please note! Creating a new project is done only through the console interface (or CUI for short). Support for creation from the custom templates is currently &lt;strong&gt;under complete redesign&lt;/strong&gt;! We plan to bring this functionality back in the Create Go App CLI &lt;code&gt;v2.2.x&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The structure of the created project will be as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
├── .editorconfig
├── .gitattributes
├── .gitignore
├── hosts.ini     &lt;span class="c"&gt;# &amp;lt;-- file with Ansible inventory variables&lt;/span&gt;
├── playbook.yml  &lt;span class="c"&gt;# &amp;lt;-- file with Ansible playbook&lt;/span&gt;
├── Makefile
├── backend       &lt;span class="c"&gt;# &amp;lt;-- folder with Go backend&lt;/span&gt;
│   └── ...
├── frontend      &lt;span class="c"&gt;# &amp;lt;-- folder with JS/TS frontend (if you choose)&lt;/span&gt;
│   └── ...
└── roles         &lt;span class="c"&gt;# &amp;lt;-- folder with Ansible roles&lt;/span&gt;
    ├── backend
    │   └── ...
    ├── docker
    │   └── ...
    ├── postgres
    │   └── ...
    ├── redis
    │   └── ...
    └── traefik   &lt;span class="c"&gt;# or nginx (if you choose)&lt;/span&gt;
        └── ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Watch a short video presentation: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://recordit.co/OQAwkZBrjN"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--05c24SGA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/11155743/116787503-0d0dbb80-aaad-11eb-9ef1-dce2df6f606c.jpg" alt="cgapp create"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Direct link: &lt;a href="https://recordit.co/OQAwkZBrjN"&gt;https://recordit.co/OQAwkZBrjN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-deploy-endraw-command"&gt;
  &lt;/a&gt;
  &lt;code&gt;deploy&lt;/code&gt; command
&lt;/h3&gt;

&lt;p&gt;Also, we have seriously reworked the principle of deploying the project on a remote server. The only option left for the &lt;code&gt;deploy&lt;/code&gt; command is the default password call for the sudo user:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Required?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-K&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Prompt you to provide the remote user sudo password (&lt;em&gt;a standard Ansible &lt;code&gt;--ask-become-pass&lt;/code&gt; option&lt;/em&gt;).&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Now, everything is built on pre-configured Ansible roles that work perfectly out of the box with our official backend templates for &lt;a href="https://github.com/create-go-app/fiber-go-template"&gt;Fiber&lt;/a&gt; and &lt;a href="https://github.com/create-go-app/net_http-go-template"&gt;net/http&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Watch a short video presentation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://recordit.co/OQAwkZBrjN"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SgPIiZeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/11155743/116787504-0e3ee880-aaad-11eb-8268-35493e5608c5.jpg" alt="cgapp deploy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Direct link: &lt;a href="https://recordit.co/ishTf0Au1x"&gt;https://recordit.co/ishTf0Au1x&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ansible-roles"&gt;
  &lt;/a&gt;
  Ansible roles
&lt;/h2&gt;

&lt;p&gt;Starting with version &lt;code&gt;v2.0.0&lt;/code&gt; we will actively add new Ansible roles to make the process of deploying your project to remote servers as comfortable and fast as possible. &lt;/p&gt;

&lt;p&gt;So, now all the configuration for deployment will be in the Ansible inventory &lt;code&gt;hosts.ini&lt;/code&gt; (in the root of the created project). For example, this is what the inventory looks like for deploying a project with the &lt;strong&gt;Nginx&lt;/strong&gt; web server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="c"&gt;# ./hosts.ini
&lt;/span&gt;
&lt;span class="c"&gt;# Ansible inventory for deploy the Create Go App project.
# Author: Vic Shóstak &amp;lt;vic@shostak.dev&amp;gt; (https://shostak.dev)
# For more information, please visit https://create-go.app/
&lt;/span&gt;
&lt;span class="nn"&gt;[cgapp_project]&lt;/span&gt;
&lt;span class="err"&gt;127.0.0.1&lt;/span&gt; &lt;span class="c"&gt;# CHANGE THIS TO YOUR REMOTE SERVER IP!
&lt;/span&gt;
&lt;span class="nn"&gt;[cgapp_project:vars]&lt;/span&gt;
&lt;span class="c"&gt;#
# Ansible default variables to start playbook:
#
&lt;/span&gt;
&lt;span class="c"&gt;# Set remote sudo username
&lt;/span&gt;&lt;span class="py"&gt;ansible_user&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;root&lt;/span&gt;
&lt;span class="c"&gt;# Ask become password for remote sudo user
&lt;/span&gt;&lt;span class="py"&gt;ansible_become&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;yes&lt;/span&gt;
&lt;span class="c"&gt;# Set connection type to remote server (usually, 'ssh')
&lt;/span&gt;&lt;span class="py"&gt;ansible_connection&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;ssh&lt;/span&gt;
&lt;span class="c"&gt;# Set Python 3 default path
&lt;/span&gt;&lt;span class="py"&gt;ansible_python_interpreter&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/bin/python3&lt;/span&gt;

&lt;span class="c"&gt;#
# Remote server configuration:
#
&lt;/span&gt;
&lt;span class="c"&gt;# Set directory on your remote server 
# for store project files
&lt;/span&gt;&lt;span class="py"&gt;server_dir&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/var/www/cgapp&lt;/span&gt;
&lt;span class="c"&gt;# Set user (owner of files/folders) name
&lt;/span&gt;&lt;span class="py"&gt;server_user&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;root&lt;/span&gt;
&lt;span class="c"&gt;# Set group name
&lt;/span&gt;&lt;span class="py"&gt;server_group&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;docker&lt;/span&gt;

&lt;span class="c"&gt;#
# Project configuration:
#
&lt;/span&gt;
&lt;span class="c"&gt;# Set your project domain
&lt;/span&gt;&lt;span class="py"&gt;project_domain&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;example.com&lt;/span&gt;

&lt;span class="c"&gt;#
# Docker configuration:
#
&lt;/span&gt;
&lt;span class="c"&gt;# Set Docker network name
&lt;/span&gt;&lt;span class="py"&gt;docker_network&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;cgapp_network&lt;/span&gt;

&lt;span class="c"&gt;#
# Backend configuration:
#
&lt;/span&gt;
&lt;span class="c"&gt;# Set backend port number,
# MUST BE MATCH to the port that is listed 
# in your `./backend/.env` file!
&lt;/span&gt;&lt;span class="py"&gt;backend_port&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;5000&lt;/span&gt;

&lt;span class="c"&gt;#
# PostgreSQL configuration (backend DB):
#
&lt;/span&gt;
&lt;span class="c"&gt;# Set PostgreSQL version (for example, 13.2)
&lt;/span&gt;&lt;span class="py"&gt;postgres_version&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;latest&lt;/span&gt;
&lt;span class="c"&gt;# Set PostgreSQL port number,
# MUST BE MATCH to the port that is listed 
# in your `./backend/.env` file!
&lt;/span&gt;&lt;span class="py"&gt;postgres_port&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;5432&lt;/span&gt;
&lt;span class="c"&gt;# Set PostgreSQL user name,
# MUST BE MATCH to the user name that is listed 
# in your `./backend/.env` file!
&lt;/span&gt;&lt;span class="py"&gt;postgres_user&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;postgres&lt;/span&gt;
&lt;span class="c"&gt;# Set PostgreSQL password,
# MUST BE MATCH to the password that is listed 
# in your `./backend/.env` file!
&lt;/span&gt;&lt;span class="py"&gt;postgres_password&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;password&lt;/span&gt;
&lt;span class="c"&gt;# Set PostgreSQL DB name,
# MUST BE MATCH to the DB name that is listed 
# in your `./backend/.env` file!
&lt;/span&gt;&lt;span class="py"&gt;postgres_db&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;postgres&lt;/span&gt;
&lt;span class="c"&gt;# Set PostgreSQL SSL mode state ('enabled' or 'disabled'),
# MUST BE MATCH to the SSL mode state that is listed 
# in your `./backend/.env` file!
&lt;/span&gt;&lt;span class="py"&gt;postgres_ssl_mode&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;disable&lt;/span&gt;

&lt;span class="c"&gt;#
# Go-Migrate configuration:
#
&lt;/span&gt;
&lt;span class="c"&gt;# Set migration number,
# if you WANT to migrate all of your migrations, 
# just leave it blank,
# for only initial migration set it to '1'
&lt;/span&gt;&lt;span class="py"&gt;migrate_number&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;#
# Redis configuration (backend cache):
#
&lt;/span&gt;
&lt;span class="c"&gt;# Set Redis version (for example, 6.2)
&lt;/span&gt;&lt;span class="py"&gt;redis_version&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;latest&lt;/span&gt;
&lt;span class="c"&gt;# Set Redis port number,
# MUST BE MATCH to the port that is listed 
# in your `./backend/.env` file!
&lt;/span&gt;&lt;span class="py"&gt;redis_port&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;6379&lt;/span&gt;

&lt;span class="c"&gt;#
# Nginx configuration:
#
&lt;/span&gt;
&lt;span class="c"&gt;# Set Nginx version (for example, 1.20-alpine)
&lt;/span&gt;&lt;span class="py"&gt;nginx_version&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;alpine&lt;/span&gt;
&lt;span class="c"&gt;# Set redirect from HTTP to HTTPS for default server
&lt;/span&gt;&lt;span class="py"&gt;nginx_use_only_https&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;yes&lt;/span&gt;
&lt;span class="c"&gt;# Set redirect from WWW to non-WWW domain for default server
&lt;/span&gt;&lt;span class="py"&gt;nginx_redirect_to_non_www&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-proxy-servers"&gt;
  &lt;/a&gt;
  Web, proxy servers
&lt;/h3&gt;

&lt;p&gt;We're recommending to use &lt;a href="https://traefik.io/traefik/"&gt;Traefik Proxy&lt;/a&gt; as default proxy server for your projects. The main reason: this proxy provides &lt;strong&gt;automatic&lt;/strong&gt; SSL certificates from Let's Encrypt with &lt;strong&gt;renew&lt;/strong&gt; out of the box.&lt;/p&gt;

&lt;p&gt;Also, Traefik was built on the Docker ecosystem and has a really useful Web UI:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mztDGq4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48lxi7mt92k52cdjmbp3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mztDGq4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48lxi7mt92k52cdjmbp3.png" alt="traefik web ui"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;List of roles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;traefik&lt;/code&gt; — configured Traefik container with a simple ACME challenge via CA server.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;traefik-acme-dns&lt;/code&gt; — configured Traefik container with a complex ACME challenge via DNS provider.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nginx&lt;/code&gt; — pure Nginx container with "the best practice" configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h3&gt;

&lt;p&gt;List of roles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;postgres&lt;/code&gt; — configured &lt;a href="https://postgresql.org/"&gt;PostgreSQL&lt;/a&gt; container with apply migrations (by &lt;a href="https://github.com/golang-migrate/migrate"&gt;golang-migrate/migrate&lt;/a&gt; tool) for backend.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cache-keyvalue-storage"&gt;
  &lt;/a&gt;
  Cache, key-value storage
&lt;/h3&gt;

&lt;p&gt;List of roles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;redis&lt;/code&gt; — configured &lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt; container to store the backend cache.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-wiki-page"&gt;
  &lt;/a&gt;
  Project Wiki page
&lt;/h2&gt;

&lt;p&gt;Soon, we plan to move completely to the GitHub Wiki and do away with the separate documentation on our &lt;a href="https://create-go.app/"&gt;website&lt;/a&gt; for the project. &lt;/p&gt;

&lt;p&gt;— &lt;em&gt;Everything should be in one place&lt;/em&gt;, — as focus group users correctly noted.&lt;/p&gt;

&lt;p&gt;This is a table of contents for the &lt;a href="https://github.com/create-go-app/cli/wiki"&gt;Create Go App Wiki&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CLI commands

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/create-go-app/cli/wiki/Command-create"&gt;&lt;code&gt;cgapp create&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/create-go-app/cli/wiki/Command-deploy"&gt;&lt;code&gt;cgapp deploy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/create-go-app/cli/wiki/Errors-in-the-process"&gt;Errors in the process&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/create-go-app/cli/wiki/How-the-CLI-works"&gt;How the CLI works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/create-go-app/cli/wiki/FAQ"&gt;Frequently asked questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/create-go-app/cli/wiki/Logo"&gt;Logo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-assistance-to-the-project"&gt;
  &lt;/a&gt;
  Your assistance to the project
&lt;/h2&gt;

&lt;p&gt;If you want to say &lt;strong&gt;thank you&lt;/strong&gt; or/and support active development of project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add a &lt;a href="https://github.com/create-go-app/cli"&gt;GitHub Star&lt;/a&gt; to the project.&lt;/li&gt;
&lt;li&gt;Twit about project &lt;a href="https://twitter.com/intent/tweet?text=%E2%9C%A8%20Create%20a%20new%20production-ready%20project%20with%20%23Golang%20backend%2C%20%23JavaScript%20or%20%23TypeScript%20frontend%2C%20%23Docker%20and%20%23Ansible%20deploy%20automation%20by%20running%20one%20command.%20%0A%0AFocus%20on%20writing%20code%20and%20thinking%20of%20business-logic%21%0AThe%20CLI%20will%20take%20care%20of%20the%20rest.%0A%0Ahttps%3A%2F%2Fgithub.com%2Fcreate-go-app%2Fcli"&gt;on your Twitter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Write interesting articles about project on &lt;a href="https://dev.to/"&gt;Dev.to&lt;/a&gt;, &lt;a href="https://medium.com/"&gt;Medium&lt;/a&gt; or personal blog.&lt;/li&gt;
&lt;li&gt;Join DigitalOcean at our &lt;a href="https://m.do.co/c/b41859fa9b6e"&gt;referral link&lt;/a&gt; (your profit is &lt;strong&gt;$100&lt;/strong&gt; and we get $25).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Together, we can make this project &lt;strong&gt;better&lt;/strong&gt; every day!&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#photos-and-videos-by"&gt;
  &lt;/a&gt;
  Photos and videos by
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Vic Shóstak &lt;a href="https://shostak.dev"&gt;https://shostak.dev&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;If you want more → write a comment below &amp;amp; follow me. Thanks! 😘&lt;/p&gt;

</description>
      <category>go</category>
      <category>news</category>
      <category>beginners</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Errores https mas comunes</title>
      <author>Matias Blanc</author>
      <pubDate>Thu, 06 May 2021 14:27:44 +0000</pubDate>
      <link>https://dev.to/matiasblanc/errores-https-mas-comunes-46k4</link>
      <guid>https://dev.to/matiasblanc/errores-https-mas-comunes-46k4</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;En nuestra vida de web developer debemos saber los errores  que cometemos para mejorarlos y ser mejores cada día, por eso es que debemos saber sobre estos errores http, porque son los errores de la web, cada vez que desarrolles un sitio puedes encontrar algunos de los siguientes errores.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#error-400-bad-request"&gt;
  &lt;/a&gt;
  ERROR 400 BAD REQUEST
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Sucede cuando el cliente envía una petición que el servidor no puede comprender, generalmente cuando los datos enviados por el navegador no cumplen con las normas del protocolo HTTP.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A2e2szbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eubetoig9f0atgy1or6r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A2e2szbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eubetoig9f0atgy1or6r.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#401-authorization-requiered"&gt;
  &lt;/a&gt;
  401 – AUTHORIZATION REQUIERED
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Si el cliente ha solicitado una página web que se encuentra protegida por una contraseña, el servidor devuelve el error 401. En este caso no se devuelve el error de manera típica, sino que aparece una ventana emergente en la cuál se solicita al usuario que ingrese una contraseña para acceder al sitio web. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mfcHsHqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9i46o8e9vxbovhk7xmnn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mfcHsHqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9i46o8e9vxbovhk7xmnn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#error-404-o-not-found"&gt;
  &lt;/a&gt;
  ERROR 404 O NOT FOUND
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Uno de los mas conocidos este error es el mas comun en una web, no lo vas a ver mucho cuando desarrolles una web si no cuando este subida y un usuario busque algun subdomio no creado en tu sitio o que una persona haya escrito mal un link pero con el dominio de tu web.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k3ySrang--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hy3lkan6jv5o47cdq7uz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k3ySrang--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hy3lkan6jv5o47cdq7uz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#error-500-o-internal-server-error"&gt;
  &lt;/a&gt;
  ERROR 500 O INTERNAL SERVER ERROR
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Internal Server Error significa Error interno del servidor. Este código generalmente se muestra cuando el servidor no puede d ar muchos detalles del error o que ningún otro error 5** se pudo mostrar. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hU0k-kYM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czr3qu5fnzfigg41jvxf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hU0k-kYM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czr3qu5fnzfigg41jvxf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#error-502-o-bad-gateway"&gt;
  &lt;/a&gt;
  ERROR 502 O BAD GATEWAY
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Bad Gateway o en español puerta de enlace no valida. indica un error de comunicación entre dos servidores. Sucede cuando el cliente se conecta a un servidor que actúa como un proxy que necesita acceder a un servidor ascendente. En estos casos, usualmente el otro servidor se localiza en un nivel superior en la jerarquía de servidores.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nfRPNKvy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ve19ed559bh7yzbq8agk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nfRPNKvy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ve19ed559bh7yzbq8agk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Hay muchos, muchos mas pero estos son los que mas vas a ver, los demás errores ni te los vas a topar, la verdad es que la mayoría de los errores http no los he visto en una web ya que son muchos, no se si te deberías memorizar TODOS pero si saberte algunos importantes.&lt;/p&gt;

&lt;p&gt;si crees que alguna información esta mal o quieres que agregue algún error coméntalo acá abajo.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>http</category>
      <category>webdev</category>
      <category>programming</category>
      <category>spanish</category>
    </item>
    <item>
      <title>FILE HANDALING</title>
      <author>Pranavi nerella</author>
      <pubDate>Thu, 06 May 2021 14:26:55 +0000</pubDate>
      <link>https://dev.to/pranavi333/file-handaling-119j</link>
      <guid>https://dev.to/pranavi333/file-handaling-119j</guid>
      <description>&lt;p&gt;A file is the name of memory location where we can store data permanently under computer’s hard disk. Java language supports a set of classes in java.io package to create and maintain files. The following are some of the classes we can use to create and maintain files :&lt;/p&gt;

&lt;p&gt;FileInputStream&lt;br&gt;
FileOutputStream&lt;br&gt;
FileWriter etc.,&lt;/p&gt;

&lt;p&gt;FileOutputStream class :&lt;/p&gt;

&lt;p&gt;This class represent data as a stream of bytes. The objects of this class can be used to open and access a file in write mode. The object for this class can be created as below :&lt;/p&gt;

&lt;p&gt;FileOutputStream fis = new FileOutputStream(“file-name”,boolean-value); Here, if the boolean value is true, the file can be opened in append mode. If it is false,the data is overwritten from the beginning of the file every time when we execute the program.The following program demonstrates the use of this class.&lt;/p&gt;

&lt;p&gt;/* Program to store data into a file using FileOutputStream class */&lt;/p&gt;

&lt;p&gt;import java.io.*;&lt;/p&gt;

&lt;p&gt;class FileWrite{&lt;/p&gt;

&lt;p&gt;public static void main(String args[]) throws Exception {&lt;/p&gt;

&lt;p&gt;InputStreamReader isr = new InputStreamReader(System.in);&lt;/p&gt;

&lt;p&gt;BufferedReader br = new BufferedReader(isr);&lt;/p&gt;

&lt;p&gt;System.out.println(“Enter some text “);&lt;/p&gt;

&lt;p&gt;String data = br.readLine();&lt;/p&gt;

&lt;p&gt;FileOutputStream fos = new FileOutputStream(“file1.txt”,true);&lt;/p&gt;

&lt;p&gt;/* Because data is in the form of String object, convert it into byte array */&lt;/p&gt;

&lt;p&gt;byte b[] = data.getBytes();&lt;/p&gt;

&lt;p&gt;fos.write(b); /* writes byte array into file.txt */&lt;/p&gt;

&lt;p&gt;fos.close();&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;FileInputStream class :&lt;/p&gt;

&lt;p&gt;This clas represents data as a stream of bytes. The objects of this class can be used to open and access a file in read mode. The object for this class can be created as below :&lt;/p&gt;

&lt;p&gt;FileInputStream fis = new FileInputStream(“file-name”);&lt;/p&gt;

&lt;p&gt;The following program demonstrates the use of this class.&lt;/p&gt;

&lt;p&gt;/* Program to read data from a file using FileInputStream class */&lt;/p&gt;

&lt;p&gt;import java.io.*;&lt;/p&gt;

&lt;p&gt;class FileRead {&lt;/p&gt;

&lt;p&gt;public static void main(String args[]) throws Exception {&lt;/p&gt;

&lt;p&gt;FileInputStream fis = new FileInputStream(“file1.txt”);&lt;/p&gt;

&lt;p&gt;int size = fis.available(); /* available() returns no. of bytes in file1.txt */&lt;/p&gt;

&lt;p&gt;byte b [] = new byte[size];&lt;/p&gt;

&lt;p&gt;/* create a byte array of file size */&lt;/p&gt;

&lt;p&gt;fis.read(b);&lt;/p&gt;

&lt;p&gt;String data = new String(b);&lt;/p&gt;

&lt;p&gt;/* convert the byte array to string */&lt;/p&gt;

&lt;p&gt;System.out.println(“The contents of file1.txt are : “ + data);&lt;/p&gt;

&lt;p&gt;}// end of main&lt;/p&gt;

&lt;p&gt;}// end of class&lt;/p&gt;

&lt;p&gt;FileWriter class :&lt;/p&gt;

&lt;p&gt;This class represent data as a stream of characters. The objects of this class can be used to open and access a file in write mode. The object for this class can be created as below :&lt;/p&gt;

&lt;p&gt;FileWriter fw = new FileWriter(filename,boolean-value);&lt;/p&gt;

&lt;p&gt;The following program demonstrates the use of FileWriter class.&lt;/p&gt;

&lt;p&gt;import java.io.*;&lt;/p&gt;

&lt;p&gt;class FileWrite {&lt;/p&gt;

&lt;p&gt;public static void main(String args[]) throws Exception {&lt;/p&gt;

&lt;p&gt;FileWriter fw = new FileWriter(“file2.txt”,true);&lt;/p&gt;

&lt;p&gt;BufferedReader br = new BufferedReader(new InputStreamReader(System.in));&lt;/p&gt;

&lt;p&gt;System.out.println(“Enter some text “);&lt;/p&gt;

&lt;p&gt;String data = br.readLine();&lt;/p&gt;

&lt;p&gt;// convert data into equalent character array&lt;/p&gt;

&lt;p&gt;char ch[] = data.toCharArray();&lt;/p&gt;

&lt;p&gt;fw.write(ch);&lt;/p&gt;

&lt;p&gt;fw.close();&lt;/p&gt;

&lt;p&gt;} // end main&lt;/p&gt;

&lt;p&gt;} // end class&lt;/p&gt;

</description>
      <category>java</category>
    </item>
    <item>
      <title>Apprendre Ruby: Premier pas!</title>
      <author> </author>
      <pubDate>Thu, 06 May 2021 14:00:04 +0000</pubDate>
      <link>https://dev.to/ericcodeur/apprendre-ruby-premier-pas-1a35</link>
      <guid>https://dev.to/ericcodeur/apprendre-ruby-premier-pas-1a35</guid>
      <description>&lt;p&gt;Je développe en Javascript, Python, PHP et Ruby. Ruby est de tous mon langage de programmation préféré.&lt;/p&gt;

&lt;h2&gt; Vous souhaitez apprendre Ruby? &lt;/h2&gt;

&lt;p&gt;Dans cette série, nous partirons du début et découvrirons chaque aspect de Ruby une étape à la fois.&lt;/p&gt;

&lt;p&gt;Chaque article comprendra de la théorie mais aussi des exercices et des solutions.&lt;/p&gt;

&lt;p&gt;Si vous avez des questions / commentaires ou si vous êtes nouveau et avez besoin d'aide, vous pouvez commenter ci-dessous ou m'envoyer un message.&lt;/p&gt;

&lt;h2&gt; Exécutez votre code Ruby &lt;/h2&gt;

&lt;p&gt;Pas besoin de faire une installation complète. Allez simplement sur ce site Web &lt;a href="https://replit.com/languages/ruby"&gt;https://replit.com/languages/ruby&lt;/a&gt; et commencez à apprendre dès maintenant. Vous aurez tout le temps nécessaire pour comprendre l'installation de Ruby sur votre machine locale plus tard...&lt;/p&gt;

&lt;h1&gt; Variables Ruby &lt;/h1&gt;

&lt;p&gt;Si vous débutez dans la programmation, les variables sont les éléments fondamentaux d’un langage de programmation, car elles sont utilisées pour stocker différentes valeurs que vous souhaitez traiter dans votre code.&lt;/p&gt;

&lt;p&gt;Une fois que la variable est stockée dans la mémoire du programme, elle peut être utilisée plus tard.&lt;/p&gt;

&lt;p&gt;Par exemple, disons que vous souhaitez stocker le nom d'utilisateur, vous pouvez spécifier un nom de variable et définir sa valeur.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;nom_contact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La variable du nom de 'nom_contact' contient la valeur 'Mike Taylor'&lt;/p&gt;

&lt;p&gt;Dans Ruby, une variable de type texte (string) est placée entre guillemets.&lt;/p&gt;

&lt;p&gt;Le nom de la variable que nous venons de créer est une variable de type string. Dans Ruby, nous n'avons pas à spécifier le type de variable.&lt;/p&gt;

&lt;p&gt;Ruby est un langage interprété Just-in-time (JIT). Qui reconnaît automatiquement le type de données en fonction des valeurs stockées.&lt;/p&gt;

&lt;p&gt;Voici quelques types de variables de base Ruby et comment les créer&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# string&lt;/span&gt;
&lt;span class="n"&gt;nom_complet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;

&lt;span class="c1"&gt;# nombre / integer&lt;/span&gt;
&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;

&lt;span class="c1"&gt;# nombre / float&lt;/span&gt;
&lt;span class="n"&gt;prix_livre&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;15.80&lt;/span&gt;

&lt;span class="c1"&gt;# boolean&lt;/span&gt;
&lt;span class="n"&gt;actif?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;admin?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ruby a également des types de variables plus avancés comme tableau, hachage, structure et classe. Nous couvrirons tous ces détails plus tard.&lt;/p&gt;

&lt;h1&gt; Afficher sur la console &lt;/h1&gt;

&lt;p&gt;Dans Ruby, il est possible d'afficher des informations sur la console / le terminal.&lt;/p&gt;

&lt;p&gt;Par exemple, envoyons notre variable de nom à la console&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;nom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;nom&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La méthode put prendra toute valeur que nous lui donnerons et l'imprimera sur la console ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mike Taylor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Autres exemples&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;nom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Bonjour le monde'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Bonjour'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nom&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Bonjour le monde
Bonjour
Mike Taylor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Comme vous pouvez le voir, nous pouvons envoyer plusieurs valeurs à la méthode put et il les affichera toutes.&lt;/p&gt;

&lt;p&gt;Une autre méthode Ruby très similaire aux put est la méthode print. Print peut afficher quelque chose sur la console mais n'enverra pas le saut de ligne après chaque impression. Exemple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;nom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Hello '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nom&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello Mike Taylor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt; Saisie d'information &lt;/h1&gt;

&lt;p&gt;Que diriez-vous d'obtenir des informations de l'utilisateur. Dans Ruby, nous utilisons la méthode pour faire exactement cela&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Saisir votre nom: '&lt;/span&gt;
&lt;span class="n"&gt;nom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La méthode gets renverra tout ce que vous tapez plus des caractères de saut de ligne. Si vous ne voulez pas lire les caractères de saut de ligne, utilisez la méthode chomp pour supprimer ce dernier caractère&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Saisir votre nom: '&lt;/span&gt;
&lt;span class="n"&gt;nom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt; Exercice &lt;/h1&gt;

&lt;p&gt;Créez un petit programme qui demande le nom d'utilisateur et l'âge de l'utilisateur et enregistrez le résultat dans la variable nom et âge.&lt;/p&gt;

&lt;p&gt;Ensuite, affichez le nom et la variable d'âge dans la console&lt;/p&gt;

&lt;p&gt;Solution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Saisir votre nom: '&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Saisir votre age: '&lt;/span&gt;
&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"L'utilsateur se nomme: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Son age est de: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt; Conclusion &lt;/h3&gt;

&lt;p&gt;C'est tout pour aujourd'hui. Le voyage vient de commencer, restez à l'écoute pour le prochain article très bientôt. (plus tard aujourd'hui ou demain)&lt;/p&gt;

&lt;p&gt;Si vous avez des commentaires ou des questions, veuillez les faire ci dessous.&lt;/p&gt;

</description>
      <category>french</category>
      <category>ruby</category>
      <category>rails</category>
      <category>beginners</category>
    </item>
    <item>
      <title>GitHub repositories that developers should know</title>
      <author>rafaelvieirab</author>
      <pubDate>Thu, 06 May 2021 13:50:47 +0000</pubDate>
      <link>https://dev.to/rafaelvieirab/github-repositories-that-developers-should-know-2hek</link>
      <guid>https://dev.to/rafaelvieirab/github-repositories-that-developers-should-know-2hek</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Offered in a variety of &lt;em&gt;different languages&lt;/em&gt; Free Programming Books, it contains sections of free online courses, interactive programming resources, problem sets and competitive programming, programming playgrounds and podcasts and cheat sheets for many programming language.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;Developer Roadmap&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It has many the technologies you need to know if you want to become a &lt;em&gt;Frontend&lt;/em&gt; or &lt;em&gt;Backend&lt;/em&gt; or &lt;em&gt;DevOps Engineer&lt;/em&gt;. It has many the alternative technologies from which can choose whatever suits your need or comfort.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/ossu/computer-science"&gt;OSSU Computer Science&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you don't have a computer science background or degree and want the equivalent knowledge same as a Computer Science degree then this repository is for you. It's for those who want a proper, well-rounded grounding in concepts fundamental to all computing disciplines.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/sindresorhus/awesome"&gt;Awesome&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As the name describes it has an Awesome lists of all kinds of interesting topics ranging from computer science to media, from gaming to business and the list goes on.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x"&gt;Build your own X&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are a person who believes in the principle of "Learning by doing" then this repository has the potential of becoming your daily stop at GitHub. It has links to the resources which help you build your own Cryptocurrency, Database, Bots, BitTorrent Clients, and many more.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Coding Interview University&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Coding Interview University has a multi-month study plan to become a software engineer for a large tech company like Google, Amazon, Facebook, Apple, or any other software company. It offers advice on how to study to become a reliability engineer or operations engineer. It also has links to the flashcards for quickly brushing up your knowledge and stay updated originally created by the author of the repository who landed a job at Amazon. And there are much more success stories like that.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/public-apis/public-apis"&gt;Public Apis&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Public Apis has a collective list of all the free APIs available on the internet to use in your personal or professional projects. It offers a wide range of Application Programming interfaces (APIs) such as business, anime, animals, news, finance, games, and more.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/yangshun/tech-interview-handbook"&gt;Tech Interview Handbook&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Tech Interview Handbook has all the materials that you need to crack a Tech Interview. It has a variety of material regarding How to prepare for coding interviews, Good questions to ask your interviewer, Helpful tips on resume, and many more.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/donnemartin/system-design-primer"&gt;System Design Primer&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;System Design Primer is a great repository for software engineers that will help you learn how to design large-scale systems. That will then help you become a better engineer. The repo provides an organized collection of resources for this broad topic.&lt;br&gt;
Because system design often is a required component of the technical interview process at many companies, this repository can also help you to prepare for those interviews with a study guide, advice on how to approach an interview, interview questions with solutions, Anki flashcard sets for interactive learning, and interactive coding challenges.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/bradtraversy/design-resources-for-developers"&gt;Design Resources for Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This repository has a curated list of design and UI resources from stock photos, web templates, CSS frameworks, UI libraries, tools and much more, available for free to use in your projects and applications. It offers all the template stuff you need to get started with your web development projects.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/pawelborkar/awesome-repos"&gt;Awesome Repos&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It has a number of resourceful repositories packed in just one place. All you have to do is just visit this repository that's it.&lt;/p&gt;

&lt;p&gt;Referências:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/pb/10-github-repositories-every-developer-should-know-ngm"&gt;10 GitHub Repositories every Developer should know&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>github</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to fix zsh icons in Visual Studio Code terminal?</title>
      <author>Krzysztof Szala</author>
      <pubDate>Thu, 06 May 2021 13:42:48 +0000</pubDate>
      <link>https://dev.to/avantar/how-to-fix-zsh-icons-in-visual-studio-code-terminal-38bb</link>
      <guid>https://dev.to/avantar/how-to-fix-zsh-icons-in-visual-studio-code-terminal-38bb</guid>
      <description>&lt;p&gt;Zsh is a popular UNIX shell used by many Linux and macOS users around the globe. It's even more powerful when you use it with a configuration framework like &lt;a href="https://github.com/ohmyzsh/ohmyzsh"&gt;&lt;strong&gt;&lt;em&gt;Oh my zsh&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; and a fantastic template like &lt;a href="https://github.com/romkatv/powerlevel10k"&gt;&lt;strong&gt;&lt;em&gt;Powerline10k&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;. So, we set up our new shiny shell, everything works great in our terminal. Time to write some code. We run &lt;a href="https://code.visualstudio.com"&gt;Visual Studio Code&lt;/a&gt;, open a built-in terminal and... something is not right. What happened to our beautiful template? Where are our sexy icons?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V9c39IBF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ip3c0g8x3eseff8yc7r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V9c39IBF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ip3c0g8x3eseff8yc7r.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The solutions for that is simple, try to follow the steps below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download the latest version of Hack Nerd Font, for example from &lt;a href="https://github.com/source-foundry/Hack/releases/"&gt;here&lt;/a&gt;. Choose the file with &lt;code&gt;ttf&lt;/code&gt; suffix.&lt;/li&gt;
&lt;li&gt;Extract it from the archive.&lt;/li&gt;
&lt;li&gt;Move all &lt;code&gt;ttf&lt;/code&gt; files to &lt;code&gt;/usr/share/fonts&lt;/code&gt; directory (or &lt;code&gt;~/.local/share/fonts/&lt;/code&gt; if you don't want to use them globally).&lt;/li&gt;
&lt;li&gt;Open Visual Studio Code settings and find &lt;code&gt;Terminal font&lt;/code&gt; section.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;Terminal › Integrated: Font Family&lt;/code&gt; attribute from &lt;code&gt;Monospace&lt;/code&gt; to &lt;code&gt;Hack Nerd Font&lt;/code&gt;. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KWRiCb7R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sscxjv1uf0xy5xxcsgrk.png" alt="image"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ztVpqCTh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtb2vw78qh78o0a6y80m.png" alt="image"&gt;
&lt;/li&gt;
&lt;li&gt;You can also change it directly in &lt;code&gt;settings.json&lt;/code&gt; file (look for it in &lt;code&gt;.config/Code/User&lt;/code&gt; directory). The property you are looking for is &lt;code&gt;terminal.integrated.fontFamily&lt;/code&gt;.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dl0_wwFW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tigsu9gidpzqw2f4mx30.png" alt="image"&gt; &lt;/li&gt;
&lt;li&gt;Restart Visual Studio Code.&lt;/li&gt;
&lt;li&gt;Enjoy your new terminal font, which should now look correctly!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K-ljkWNi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r18v3finxt5gbjl1m29m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K-ljkWNi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r18v3finxt5gbjl1m29m.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ps. It will work the same way for macOS users, but the font installation process is a little different.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>zsh</category>
      <category>beginners</category>
      <category>linux</category>
    </item>
    <item>
      <title>Wait!!! What is Containers? 🤷🏼‍♂️</title>
      <author>Ashik</author>
      <pubDate>Thu, 06 May 2021 13:34:58 +0000</pubDate>
      <link>https://dev.to/ashikroyce/wait-what-is-containers-2m10</link>
      <guid>https://dev.to/ashikroyce/wait-what-is-containers-2m10</guid>
      <description>&lt;p&gt;Containers have become one of the most popular concepts used in IT and software industry in the last five years. Since the introduction of Docker, containers have evolved to a larger ecosystem that include many tools and technologies, including Docker and Kubernetes. Before we go into too much detail, let's look at why containers have become so popular and how they're used. &lt;/p&gt;

&lt;p&gt;First off, containers aren't a new topic. They've existed for a number of years and have taken many forms before the creation of Docker. As you can see here, in general a container is defined as a collection of software processes unified by one namespace with access to an operating system kernel that it shares with other containers and little or no access between them.&lt;/p&gt;

&lt;p&gt;Docker modifies this definition by saying that a container is a runtime instance of Docker images that contain three things, a Docker image, an execution environment, and a standard set of instructions&lt;/p&gt;

&lt;p&gt;For those coming from an object oriented world, you can use the analogy of classes and objects, where a container is an object and the class is a Docker image. While Docker has many products and solutions, the core pieces of the ecosystem are the Docker Engine and the Docker Store, sometimes referred to as the Docker Hub. &lt;/p&gt;

&lt;p&gt;The Docker Engine is comprised of runtime and packaging tools and is required to be installed on the hosts that run Docker. The Docker Store is an online cloud service where users can store and share their Docker images. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#container-vs-virtual-machine"&gt;
  &lt;/a&gt;
  container vs virtual machine?
&lt;/h1&gt;

&lt;p&gt;One question that comes up a lot is what is the difference between a container and a virtual machine? Containers might look like a VM, but these are two distinct technologies. In a VM, each virtual machine includes many applications, all the necessary binaries and libraries that would exist on the OS, and the entire guest operating system to interact with them. On the other hand, a container will include the application and all of its dependencies, but will share the kernel with the other containers. It is not tied to any specific infrastructure other than having the Docker Engine installed on its host. It'll run an isolated process in the user space on the host operating system. This allows containers to run on almost any computer, infrastructure, or cloud. From a high level, containers provide benefits to both developers and DevOps folk alike. Developers like them because it's easy to create applications that are portable and packaged in a standard way. They also make the process of deployment very easy and repeatable. Testing, packaging, and integrations can be automated in an easier way than before. Containers support newer micro services architectures, which fit better from a developer mindset. And finally, containers help alleviate platform compatibility issues. From a DevOps standpoint, using containers simplifies release management. Deployments become much more reliable, which improves the speed and frequency of releases. &lt;/p&gt;

&lt;p&gt;The application lifecycle is consistent. They can be configured once and run multiple times, making the process more repeatable and efficient. Environments can be made more consistent. No more process differences between the dev, staging, and production environments. Scaling applications also becomes a lot simpler. Containers take a few seconds to deploy to a host, which makes the process of adding extra workers easier and the workload can grow and shrink more quickly for on-demand use cases. &lt;/p&gt;

&lt;p&gt;One of the biggest value adds of using container technologies in an enterprise is that developers and DevOps team now have a common language to collaborate. Both sets of teams can describe their needs and architectures in terms of containers using the same vocabulary for dev and deployment. Issues that come up in production by a DevOps team can be easily communicated back to a development team. The dev team can isolate and debug specific issues to a container level, eliminating problems relating to differences in hosts or runtime issues with applications. With all the benefits that containers bring to the table, it's no wonder that there's such a dramatic increase in their use. &lt;/p&gt;

&lt;p&gt;A Forrester survey conducted in 2010 indicated that organisations expect the number of containerised apps will rise by 98% in 2022. The white paper is a great read and talks about some of the most prominent use cases of containers in different sized orgs. Organisations use containers to build applications to incorporate a micro services based architecture. Newer applications are built with a micro services mindset using containers underneath to realise this, and legacy applications are shipped as containers to fit the micro services mold as well. Finally, containers assist with code agility and help you build a continuous integration or continuous deployment pipeline. This use case really pushes an IT team to develop, test, and deploy applications faster in a more automated fashion. Hopefully by now it's clear why enterprises have started to adopt containers in such a big way. Now that we understand what containers are all about!!!&lt;/p&gt;

</description>
      <category>docker</category>
      <category>kubernetes</category>
    </item>
    <item>
      <title>Why Your Emails May Be Bouncing Back &amp; What You Can Do About It</title>
      <author>Alfonso Millan</author>
      <pubDate>Thu, 06 May 2021 13:05:06 +0000</pubDate>
      <link>https://dev.to/giantmachines/why-your-emails-may-be-bouncing-back-what-you-can-do-about-it-4ddg</link>
      <guid>https://dev.to/giantmachines/why-your-emails-may-be-bouncing-back-what-you-can-do-about-it-4ddg</guid>
      <description>&lt;p&gt;Recently at Giant Machines, I was investigating a handful of emails from one of our client projects that were not being properly delivered to specific Internet Service Providers (ISPs). After doing some research on their email settings and configurations, I discovered that an ISP's spam scanner configuration may have been mistakenly blocking harmless emails for its customers. As a result, I had to troubleshoot and debug these emails locally to identify why they were not being delivered. For the local debugging that I did, I used an npm package called &lt;a href="https://www.npmjs.com/package/spamscanner"&gt;spamscanner&lt;/a&gt;, which I will be covering in more depth down below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dataprot.net/statistics/spam-statistics/"&gt;55% to 85%&lt;/a&gt; of all email traffic is due to spam emails! Due to this, email clients are constantly attempting to block potentially harmful spam emails from reaching their users. However, at times, perfectly valid (and non-spam) emails can be flagged incorrectly.&lt;/p&gt;

&lt;p&gt;For this post, I will cover how ISPs use spam scanners to try to detect malicious emails. I will also show you how to set up a spam scanner locally that you can use to debug and troubleshoot your own emails. This troubleshooting can be helpful in determining why your emails may not be reaching their intended recipients! This post assumes a basic familiarity with JavaScript, using a terminal, and using a code editor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#email-basics"&gt;
  &lt;/a&gt;
  Email Basics
&lt;/h2&gt;

&lt;p&gt;The process for sending and receiving email has changed quite a bit since its inception, but its basic principles have remained in place. For the purposes of this post, all that you need to know is that web mail clients (such as Gmail, Outlook, etc.) communicate back and forth with dedicated email servers. For a closer look at how email works under the hood, refer to the following article: "&lt;a href="https://www.freecodecamp.org/news/how-does-email-work/"&gt;How Does Email Work.&lt;/a&gt;"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#email-authentication"&gt;
  &lt;/a&gt;
  Email Authentication
&lt;/h2&gt;

&lt;p&gt;Due to the abundance of email spam, several protocols have been implemented over the years to try to mitigate spam messages by performing various programmatic checks.&lt;/p&gt;

&lt;p&gt;The three main protocols are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;SPF (Sender Policy Framework)&lt;/strong&gt;: Is the sender who they claim to be?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DKIM (DomainKeys Identified Mail)&lt;/strong&gt;: Encrypts email headers with a private key; servers then use a publicly available key to decrypt the headers and verify the message.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DMARC (Domain Message Authentication Reporting and Conformance)&lt;/strong&gt;: Built on top of SPF and DKIM; senders can set policies deciding how to handle SPF/DKIM and what to do for failing checks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For additional information on these email authentication protocols, refer to the following article: "&lt;a href="https://sendgrid.com/blog/email-authentication-explained/"&gt;How Email Authentication Works&lt;/a&gt;."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#email-spam-scanners"&gt;
  &lt;/a&gt;
  Email Spam Scanners
&lt;/h2&gt;

&lt;p&gt;To detect whether incoming emails are malicious, mail servers also use spam scanners, such as Apache's popular &lt;a href="https://spamassassin.apache.org/"&gt;SpamAssasin&lt;/a&gt;. The internal workings of these spam scanners can be somewhat complicated (involving &lt;a href="https://en.wikipedia.org/wiki/Naive_Bayes_classifier"&gt;Naive Bayes Classifiers&lt;/a&gt; on &lt;a href="https://cwiki.apache.org/confluence/display/SPAMASSASSIN/HowScoresAreAssigned"&gt;trained, large datasets&lt;/a&gt;, for the curious), but the primary takeaway is that these classification systems typically assign a numerical point value to an incoming email to determine the validity of the message. The higher the score, the more likely that the email is spam. For reference, the ISP Optimum &lt;a href="http://help.webhosting.optonline.net/documents/rd/gb/gettingstarted/old/Managing_Domain_Names/Update_DNS_and_MX_Records/faq_email.htm#question20"&gt;states&lt;/a&gt; the following regarding their spam filtering:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All incoming emails are evaluated against these spam rules and are assigned a "spam score". This score determines whether the message will be classified as spam. For standard filtering, the threshold is set at 5, meaning &lt;strong&gt;any message with a score of 5 or higher is classified as spam&lt;/strong&gt;. &lt;strong&gt;Messages scoring between 5 and 10 will be delivered, but will include a spam notification in the subject of the email so that you can immediately identify and delete these messages&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Different ISPs have different policy configurations on their chosen spam scanner, but the same idea applies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cwp1LHH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/wugu3Dm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cwp1LHH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/wugu3Dm.png" alt="Litmus Email Screenshot"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Services like &lt;a href="https://www.litmus.com/"&gt;Litmus&lt;/a&gt; provide the ability to see how various spam scanners rank your emails.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the screenshot above, the email template that I was investigating received very low scores across the various spam scanners. So what gives? Why were these emails bouncing back, despite having a low score? We will be taking a closer look at this specific issue down below.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#first-steps"&gt;
  &lt;/a&gt;
  First Steps
&lt;/h3&gt;

&lt;p&gt;Before using a spam scanner to investigate and troubleshoot your email templates, there are some quick wins for lowering your score that can be achieved by following some of the recommendations listed in &lt;a href="https://github.com/CopernicaMarketingSoftware/Documentation/blob/master/Publisher/en/some-tips-to-lower-your-email-spam-score.md"&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#so-about-that-local-spam-scanner-setup"&gt;
  &lt;/a&gt;
  So… about that local spam scanner setup?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#initial-setup"&gt;
  &lt;/a&gt;
  Initial Setup
&lt;/h3&gt;

&lt;p&gt;For installation instructions on the npm package &lt;a href="https://www.npmjs.com/package/spamscanner"&gt;spamscanner&lt;/a&gt;, refer to their &lt;a href="https://www.npmjs.com/package/spamscanner"&gt;docs&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#simple-server-and-local-email-template"&gt;
  &lt;/a&gt;
  Simple Server and Local Email Template
&lt;/h3&gt;

&lt;p&gt;Email clients allow you to download your email messages (with the file extension ".eml"). With these locally saved messages, we can run spamscanner against them to further inspect their contents.&lt;/p&gt;

&lt;p&gt;Assuming that you have installed spamscanner and have Node.js locally setup, you may use the following bare-bones script for running the scanner against a locally saved email message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// in a file called index.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Make sure to install spamscanner in your package.json&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SpamScanner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;spamscanner&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scanEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// For a list of all options &amp;amp; their defaults, see:&lt;/span&gt;
  &lt;span class="c1"&gt;// https://www.npmjs.com/package/spamscanner#api&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scanner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SpamScanner&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// Swap out the "Your_locally_saved_message_here.eml" file with the actual filename in the directory&lt;/span&gt;
  &lt;span class="c1"&gt;// containing this script&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your_locally_saved_message_here.eml&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scanResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;scanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// For a list of properties available for inspection, see:&lt;/span&gt;
    &lt;span class="c1"&gt;// https://www.npmjs.com/package/spamscanner#scannerscansource&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Scan results, scanResult.mail:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scanResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error in scanEmail:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;scanEmail&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// To run this script, run `node index.js` in your terminal where this script resides.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that you can also run the scanner on Strings or Buffers as long as they are a complete SMTP message (i.e., they include headers and the full email contents).&lt;/p&gt;

&lt;p&gt;The results of running this script will come back in the following shape:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ScanResult&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;is_spam&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;classification&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;phishing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;executables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;arbitrary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nl"&gt;links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For a detailed description of these fields, refer to the &lt;a href="https://github.com/spamscanner/spamscanner#scannerscansource"&gt;docs&lt;/a&gt;. Typically, the result in the &lt;code&gt;is_spam&lt;/code&gt; field &lt;em&gt;should&lt;/em&gt; be enough to give you confidence that your email will not be marked as spam. Note that spamscanner does not assign a numerical value but instead opts to return a boolean.&lt;/p&gt;

&lt;p&gt;However, different ISPs use different spam scanners, and it may be necessary to investigate your email messages further. To do so, make sure that the "debug" flag is set to &lt;code&gt;true&lt;/code&gt;, as per the code sample above. You can then inspect the contents of &lt;code&gt;scanResult.mail&lt;/code&gt;, which is an object containing more detailed debugging information regarding the email contents (shown below).&lt;/p&gt;

&lt;p&gt;This ".mail" object returns the following shape:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ParsedMail&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;attachments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Attachment&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nl"&gt;bcc&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;AddressObject&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;AddressObject&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nl"&gt;cc&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;AddressObject&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;AddressObject&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nl"&gt;date&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;from&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;AddressObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;headerLines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HeaderLines&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Headers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;inReplyTo&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;messageId&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;normal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;low&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;high&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;references&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;replyTo&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;AddressObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;textAsHtml&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;to&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;AddressObject&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;AddressObject&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It can be used to get more specific information about the email.&lt;/p&gt;

&lt;p&gt;A sample screenshot of the "headers" field that is a part of the ".mail" object is shown below.&lt;/p&gt;

&lt;p&gt;In the emails that I was investigating, the spam scanner classifier was marking the email messages as "not spam" but Optimum was appending the following &lt;code&gt;X-Optimum-spam: yes&lt;/code&gt; header to the messages as they were incoming:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvoDteuD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WJxF61P.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvoDteuD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WJxF61P.png" alt="Terminal Screenshot"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Some of the headers present in the email message file. Note the Optimum spam header.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This was causing these messages to not only be marked as spam but they were &lt;strong&gt;also being blocked/bounced entirely!&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#when-all-else-fails-try-manual-debugging"&gt;
  &lt;/a&gt;
  When all else fails, try manual debugging.
&lt;/h2&gt;

&lt;p&gt;If your messages are still being blocked despite a low spam scanner score (or &lt;code&gt;is_spam&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; if using spamscanner), you may have to take a more manual approach. To do so, I gradually removed parts of the email and re-sent the trimmed-down emails to the ISP that was blocking us. I was eventually able to trace the problem down to this line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"mailto:example@example.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Contact customer support&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Specifically the &lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Creating_hyperlinks#e-mail_links"&gt;mailto:&lt;/a&gt;&lt;/strong&gt; present in the template caused Optimum's email configuration to flag the email as spam and reject the message outright, despite mailto tags not causing our messages to be flagged as spam by other ISPs.&lt;/p&gt;

&lt;p&gt;Additionally, other emails were bouncing back due to the following (modified) copy:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If this email change request wasn't authorized by you, please click the link below to cancel. If you have any questions, you can contact support via &lt;a href="mailto:example@example.com"&gt;example@example.com&lt;/a&gt; or by calling +1 555-555-5555.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Specifically, the &lt;code&gt;+1&lt;/code&gt; present in the template caused Optimum's spam scanner configuration to flag the email as spam and reject the message outright despite being valid and despite not being flagged by other ISPs or SpamAssasin.&lt;/p&gt;

&lt;p&gt;Due to Optimum's unique SpamAssassin configuration, we were seeing issues for our customers who had an Optimum domain email and attempted to receive emails with "mailto:" or "+1" present. It is not clear why Optimum chooses to block these emails when other ISPs do not, but it could be the case that their configuration is particularly sensitive and errs on the side of caution in attempting to mitigate potential security risks.&lt;/p&gt;

&lt;p&gt;The issues that may be affecting your emails may differ but the techniques used here can help you narrow down why your emails may be bouncing back!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Email servers accept, forward, and deliver messages.&lt;/li&gt;
&lt;li&gt;If an email has not been properly authenticated, the email server must return a failure "bounce" message.&lt;/li&gt;
&lt;li&gt;Spam scanners typically assign a point ranking to emails to classify them as spam or not spam. Hot dog/not hot dog anyone? 🌭&lt;/li&gt;
&lt;li&gt;You can use the npm package &lt;a href="https://github.com/spamscanner/spamscanner"&gt;spamscanner&lt;/a&gt; locally on your email templates to check whether they are being classified as spam.&lt;/li&gt;
&lt;li&gt;When all else fails, you may have to try a more manual debugging approach to debug ISP-specific edge cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#additional-resources"&gt;
  &lt;/a&gt;
  Additional Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://spamassassin.apache.org/"&gt;https://spamassassin.apache.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sendgrid.com/blog/10-tips-to-keep-email-out-of-the-spam-folder/"&gt;https://sendgrid.com/blog/10-tips-to-keep-email-out-of-the-spam-folder/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sendgrid.com/docs/glossary/spam/"&gt;https://sendgrid.com/docs/glossary/spam/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have any questions? Comment down below and happy coding!&lt;/p&gt;

</description>
      <category>emails</category>
      <category>spamscanner</category>
      <category>javascript</category>
      <category>debugging</category>
    </item>
    <item>
      <title>Tips &amp; tricks for building a game using Jetpack Compose for Desktop</title>
      <author>Sebastian Aigner</author>
      <pubDate>Thu, 06 May 2021 13:03:41 +0000</pubDate>
      <link>https://dev.to/kotlin/tips-tricks-for-building-a-game-using-jetpack-compose-for-desktop-266o</link>
      <guid>https://dev.to/kotlin/tips-tricks-for-building-a-game-using-jetpack-compose-for-desktop-266o</guid>
      <description>&lt;p&gt;In the &lt;strong&gt;first part of my blog post series&lt;/strong&gt; about building a small clone of the classic arcade game &lt;a href="https://en.wikipedia.org/wiki/Asteroids_(video_game)"&gt;&lt;strong&gt;Asteroids&lt;/strong&gt;&lt;/a&gt; on top of Jetpack Compose for Desktop, we saw how to implement the main game loop, as well as manage state and draw basic shapes. In this post, we will explore some more details of the game implementation. This includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Rendering details&lt;/strong&gt; – making sure game objects don't escape our play area, and using a device-independent coordinate system for rendering&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Geometry and linear algebra&lt;/strong&gt; – the &lt;em&gt;secret sauce&lt;/em&gt; that makes the space ships fly&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Frame-independent movement&lt;/strong&gt; – so that our game works consistently.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's learn about these topics!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rendering-clipping-and-coordinate-systems"&gt;
  &lt;/a&gt;
  Rendering: Clipping and Coordinate Systems
&lt;/h2&gt;

&lt;p&gt;In the context of rendering, there are two areas that still need our attention – we need to make sure that our &lt;strong&gt;game objects are constrained to the game surface&lt;/strong&gt;, and we need to make a conscious decision about the &lt;strong&gt;units of the coordinates&lt;/strong&gt; we use to describe the position of a game object. We'll discuss both in this section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clipping"&gt;
  &lt;/a&gt;
  Clipping
&lt;/h3&gt;

&lt;p&gt;By default, Compose naively draws your objects without any clipping. This means game objects can poke outside the "play surface", which produces a weirdly fourth-wall-breaking effect:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1sFMicMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xh0d39znpo8w97djsab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1sFMicMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xh0d39znpo8w97djsab.png" alt="game objects escaping the bounds of reality"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We &lt;strong&gt;constrain the game objects to the bounds&lt;/strong&gt; of our play surface by applying &lt;code&gt;Modifier.clipToBounds()&lt;/code&gt; to the &lt;code&gt;Box&lt;/code&gt; which defines our play surface:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Modifier&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fillMaxWidth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fillMaxHeight&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;clipToBounds&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="c1"&gt;// . . .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because all our game elements are drawn as children of this play area &lt;code&gt;Box&lt;/code&gt;, using this modifier causes the rendered entities inside it to be cut off at the edges (instead of being drawn over the surrounding user interface):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RNbA1hOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0zvlctk9ajr379k1m4rv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RNbA1hOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0zvlctk9ajr379k1m4rv.png" alt="game objects staying snugly inside the play area"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deviceindependent-pixels-and-density"&gt;
  &lt;/a&gt;
  Device-Independent Pixels and Density
&lt;/h3&gt;

&lt;p&gt;Something else to be aware of when doing any kind of rendering tasks in Compose for Desktop is to &lt;strong&gt;keep the units of measurement in the back of your mind&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Wherever I worked with coordinates, I decided to work in &lt;a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/unit/Dp"&gt;&lt;strong&gt;device-independent pixels&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;mouse pointer position&lt;/strong&gt; is stored as a &lt;code&gt;DpOffset&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Game width&lt;/strong&gt; and &lt;strong&gt;height&lt;/strong&gt; are stored as &lt;code&gt;Dp&lt;/code&gt;s&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Game objects&lt;/strong&gt; are placed on the play surface using their &lt;code&gt;.dp&lt;/code&gt; coordinates.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This helps the game work consistently across high-density displays and low-density displays alike. However, it also &lt;strong&gt;requires some operations to be performed in the context of &lt;code&gt;Density&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For example, the &lt;code&gt;pointerMoveFilter&lt;/code&gt; returns an &lt;code&gt;Offset&lt;/code&gt; in pixels – and &lt;strong&gt;they are not device-independent&lt;/strong&gt;!. To work around this, we obtain the local screen density in our composition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;density&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;LocalDensity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then use &lt;code&gt;with(density)&lt;/code&gt; to access the &lt;code&gt;toDp()&lt;/code&gt; extension functions to the &lt;code&gt;Offset&lt;/code&gt; into a &lt;code&gt;DpOffset&lt;/code&gt;, allowing us to store our &lt;code&gt;targetLocation&lt;/code&gt; in this device-independent pixel format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pointerMoveFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;onMove&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;targetLocation&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;DpOffset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toDp&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toDp&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For storing the play area's width and height, we do a very similar thing, just without wrapping it in a &lt;code&gt;DpOffset&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onSizeChanged&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toDp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toDp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-game-of-geometry-and-linear-algebra"&gt;
  &lt;/a&gt;
  A Game of Geometry and Linear Algebra &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Underneath the visualization, the "Asteroids" game builds on just a few basic blocks to implement its mechanics – it is really a game of vectors and linear algebra:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;position&lt;/strong&gt;, &lt;strong&gt;movement&lt;/strong&gt;, and &lt;strong&gt;acceleration&lt;/strong&gt; of the ship can be described by &lt;em&gt;position, movement, and acceleration vectors&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;orientation&lt;/strong&gt; of the ship is the &lt;em&gt;angle&lt;/em&gt; of the &lt;em&gt;vector&lt;/em&gt; between the ship and the cursor.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Circle-circle collisions&lt;/strong&gt; can be tested based on &lt;em&gt;distance vectors&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead of reinventing the &lt;del&gt;wheel&lt;/del&gt; vector, I decided to use &lt;code&gt;openrndr-math&lt;/code&gt;, which includes an implementation of the &lt;code&gt;Vector2&lt;/code&gt; class including all common operations, like scalar multiplication, addition, subtraction, the dot product, and more. (Ever since listening to the &lt;a href="https://talkingkotlin.com/openrndr-with-edwin-jakobs/"&gt;Talking Kotlin&lt;/a&gt; episode, I've been meaning to explore &lt;a href="https://openrndr.org/"&gt;OPENRNDR&lt;/a&gt; in detail, but that will have to happen in a separate project.)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://api.openrndr.org/openrndr-math/openrndr-math/org.openrndr.math/-vector2/index.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3uoN7JuZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4t373i87ll0hb6e6zsvn.png" alt="OPENRNDR Vector2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As somebody who happens to be a bit rusty with their linear algebra skills, I extended the functionality of the class a bit. For example, I defined the following extension function to allow me to access the angle a &lt;code&gt;Vector2&lt;/code&gt; in degrees between 0-360:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nc"&gt;Vector2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Double&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;rawAngle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;atan2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rawAngle&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;PI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thankfully, I did not have to spend too much time on figuring out the call to &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.math/atan2.html"&gt;&lt;code&gt;atan2&lt;/code&gt;&lt;/a&gt;, because I previously watched one of &lt;a href="http://twitter.com/intelligibabble"&gt;Leland Richardson&lt;/a&gt;'s &lt;a href="https://www.youtube.com/watch?v=fwn7olJOc70"&gt;live streams&lt;/a&gt; where he also uses this function to calculate some angles.&lt;/p&gt;

&lt;p&gt;Extensions like this one help me express ideas in ways I understand them myself – and hopefully still will a few months down the road.&lt;/p&gt;

&lt;p&gt;I also made use of properties with &lt;a href="https://kotlinlang.org/docs/properties.html#getters-and-setters"&gt;backing fields&lt;/a&gt; to make it possible to access a &lt;code&gt;GameObject&lt;/code&gt;'s movement vector in different representations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As a combination of &lt;strong&gt;length&lt;/strong&gt; (speed) and &lt;strong&gt;angle&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;As a vector with &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; coordinates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the context of a &lt;code&gt;GameObject&lt;/code&gt;, that can look like the following, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;speed&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;mutableStateOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;angle&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;mutableStateOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;position&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;mutableStateOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;movementVector&lt;/span&gt;
    &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Vector2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;UNIT_X&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;speed&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;
        &lt;span class="n"&gt;angle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we're using this functionality outside of the &lt;code&gt;GameObject&lt;/code&gt; class a lot, we could also consider defining additional &lt;code&gt;length&lt;/code&gt; / &lt;code&gt;angle&lt;/code&gt; getters and setters as extension properties on the &lt;code&gt;Vector2&lt;/code&gt; class, directly.&lt;/p&gt;

&lt;p&gt;For our simulation, we still need to do a bit more – we haven't yet addressed the problem of how to update location and speed based on the elapsed real time. Let's talk about the approach for that next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frameindependent-movement-with-delta-timing"&gt;
  &lt;/a&gt;
  Frame-Independent Movement With Delta Timing &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;When building game logic, we need to keep one essential point in mind: &lt;strong&gt;Not all frames are created equal!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On a 60 Hz display, each frame is visible for 16ms.&lt;/li&gt;
&lt;li&gt;On a 120 Hz display, that number drops to 8.3ms.&lt;/li&gt;
&lt;li&gt;On a 240 Hz display, each frame only shows for 4.2ms.&lt;/li&gt;
&lt;li&gt;On a system under load, or while running in a non-focused window, the application frame rate may be lower than 60 Hz.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That means that &lt;strong&gt;we can't use "frames" as a measurement of time&lt;/strong&gt;: If we define the speed of our spaceship in relation to the frame rate, it would move four times faster on a 240 Hz display than on a 60 Hz display.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x5gQopD2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo8s3j8b4v0zx8b3eozn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x5gQopD2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo8s3j8b4v0zx8b3eozn.png" alt="frame-based"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We need to &lt;strong&gt;decouple the game logic&lt;/strong&gt; (and its rudimentary "physics simulation") &lt;strong&gt;from the frame rate&lt;/strong&gt; at which our application runs. Even &lt;a href="https://youtu.be/qpC43CdvjyA?t=25"&gt;AAA games&lt;/a&gt; don't get this right all the time – but for our projects, we can do better!&lt;/p&gt;

&lt;p&gt;A straightforward approach for this decoupling is to use &lt;a href="https://en.wikipedia.org/wiki/Delta_timing"&gt;&lt;strong&gt;delta timing&lt;/strong&gt;&lt;/a&gt;: We calculate the new game state based on the &lt;em&gt;time difference&lt;/em&gt; (the &lt;em&gt;delta&lt;/em&gt;) since the last time we updated the game. &lt;br&gt;
This usually means we &lt;em&gt;multiply&lt;/em&gt; the result of our calculations with the time delta, &lt;em&gt;scaling&lt;/em&gt; the result based on the elapsed time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s----Zpg5yW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3dnr7776bas1ly70yjvr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s----Zpg5yW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3dnr7776bas1ly70yjvr.png" alt="time-based"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Compose for Desktop, we use &lt;code&gt;withFrameMillis&lt;/code&gt; and &lt;code&gt;withFrameNanos&lt;/code&gt;. Both of them provide a timestamp, so we just need to keep track of the previous timestamp to calculate the &lt;code&gt;delta&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;prevTime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0L&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;delta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;prevTime&lt;/span&gt;
    &lt;span class="c1"&gt;// . . .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my case, a &lt;code&gt;GameObject&lt;/code&gt; has an &lt;code&gt;update&lt;/code&gt; function that takes a &lt;code&gt;realDelta: Float&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;velocity&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;movementVector&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;realDelta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toDouble&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;velocity&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As demonstrated in the code above, I use it to scale the velocity of game objects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;This concludes our tour of building a small game with Compose for Desktop! To see how all the pieces fit together, read the source code (~300 lines of code) on &lt;a href="https://github.com/SebastianAigner/asteroids-compose-for-desktop"&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Building Asteroids on Compose for Desktop was great fun! I am always surprised by the iteration speed that &lt;a href="https://www.jetbrains.com/lp/compose/"&gt;Compose for Desktop&lt;/a&gt; provides: &lt;strong&gt;Getting from a first rectangle to a full game in just one long evening.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Of course, implementing a retro game like Asteroids on modern hardware comes with the luxury of not having to think too hard about performance optimizations, allocations, entity-component systems, or more. When building something more ambitious, these points likely need addressing, and you might find yourself using a few additional libraries besides a &lt;code&gt;Vector2&lt;/code&gt; implementation.&lt;/p&gt;

&lt;p&gt;For the next &lt;a href="https://en.wikipedia.org/wiki/Super_Hexagon"&gt;Super Hexagon&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Roguelike"&gt;pixel roguelike&lt;/a&gt;, or other 2D game, however, you can definitely &lt;strong&gt;give Compose a shot&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once again, you can find all 300 lines of source code for this project on &lt;a href="https://github.com/SebastianAigner/asteroids-compose-for-desktop"&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you're looking for additional inspiration, take a look at some other &lt;strong&gt;folks building games with Compose&lt;/strong&gt;!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vivek Sharma built &lt;a href="https://twitter.com/V9vek/status/1350156513625534464"&gt;everybody's favorite dinosaur game&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;vitaviva built &lt;a href="https://twitter.com/vitaviva2/status/1379876842560122886"&gt;Tetris with Compose&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;John O'Reilly made a &lt;a href="https://github.com/joreilly/chip-8"&gt;Compose for Desktop CHIP-8 frontend&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;theapache64 pushes the limits of Compose's builtin components to implement &lt;a href="https://twitter.com/theapache64/status/1379735815023030279"&gt;Switch, Check, and Radio Snake&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>gamedev</category>
      <category>kotlin</category>
      <category>jetpackcompose</category>
      <category>android</category>
    </item>
  </channel>
</rss>
