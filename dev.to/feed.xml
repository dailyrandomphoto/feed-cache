<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Geo-Distributed Data Lakes Explained (By a Non-Developer)</title>
      <author>Kaylan Stock</author>
      <pubDate>Wed, 27 Jan 2021 17:57:08 +0000</pubDate>
      <link>https://dev.to/harperdb/geo-distributed-data-lakes-explained-by-a-non-developer-m68</link>
      <guid>https://dev.to/harperdb/geo-distributed-data-lakes-explained-by-a-non-developer-m68</guid>
      <description>&lt;p&gt;Happy 2021! This week’s term is a mouthful, but don’t let the long name deter you. It’s a pretty interesting topic and I think you will agree after finishing this breakdown. There is a lot to say about how awesome it is to combine the flexibility of a data lake with the power of a distributed architecture, but I’ll get more into the benefits of both as a joint solution later. To start, I want to look at geo-distributed data lakes in two parts before we marry them together, for my non-developer brain that made the most sense! No time to waste, let’s kick things off with the one and only… data lakes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-a-data-lake-not-warehouse" class="anchor"&gt;
  &lt;/a&gt;
  It’s a Data LAKE, Not Warehouse!
&lt;/h3&gt;

&lt;p&gt;It shouldn’t be a shock to the system to point out that we are living in a data-driven world going into 2021. Because of this, “data lakes” are a fitting term for the amount of data companies are collecting. In my opinion, we could probably start calling them data oceans, expansive and seemingly never-ending. &lt;a href="https://aws.amazon.com/big-data/datalakes-and-analytics/what-is-a-data-lake/"&gt;So what is a data lake exactly?&lt;/a&gt; Think of all your data as the water and your repository as the lake that holds that water. Unstructured data or “water” comes from one source and your structured data/water comes from another. You can use any of the water coming from any number of water sources (i.e. multiple structured and unstructured data sources) to build out visualizations, real-time analytics, or even machine learning models. So while your water is flowing in from rivers, creeks, and mountain runoffs, you can drink any of that water and it will keep you hydrated. &lt;/p&gt;

&lt;p&gt;Data lakes can be on-premise or hosted in the cloud, and I think my favorite thing about data lakes is that the natural or raw form of the data that is stored in a lake is &lt;a href="https://en.wikipedia.org/wiki/Data_lake"&gt;usually called an “object blob.”&lt;/a&gt; What is the first thing you think of when you hear the word blob? It’s such a great word. So thanks to object blobs in data lakes, data management becomes &lt;a href="https://www.guru99.com/data-lake-architecture.html"&gt;more cost-effective&lt;/a&gt; than other solutions when it comes to storing historical data because it allows you to store both relational and non-relational data. &lt;a href="https://www.forbes.com/sites/bernardmarr/2017/07/24/what-is-data-democratization-a-super-simple-explanation-and-the-key-pros-and-cons/?sh=3788c54e6013"&gt;Data lakes democratize data&lt;/a&gt;, which simply means that everyone has access to the data instead of having gatekeepers or admins that decide who has access. Data lakes also provide folks with an easy way to understand said data that is shared in the data repository. I can imagine at large companies with many employees and departments, a data lake makes company collaboration ten times easier. &lt;/p&gt;

&lt;p&gt;There is a difference between a data lake and a data warehouse, which should be mentioned before we move on.  &lt;a href="https://aws.amazon.com/big-data/datalakes-and-analytics/what-is-a-data-lake/"&gt;According to AWS’s website&lt;/a&gt;, a data warehouse is a repository database optimized for specific data used to analyze relational data coming from transactional systems and line of business applications. So that means data warehouses do not handle unstructured data or are not optimized to handle it. So I say, in 2021 with hundreds of data sources, all hail the data lake! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#geodistributed-data-all-over-the-world" class="anchor"&gt;
  &lt;/a&gt;
  Geo-Distributed: Data All Over the World
&lt;/h3&gt;

&lt;p&gt;In general, geo-distributed is used in reference to data storage, websites, applications, containers, etc. For the sake of this article, we will focus on geo-distributed data storage. A one-sentence description of geo-distributed databases and storage would tell you that it means a &lt;a href="https://www.databasejournal.com/sqletc/the-guiding-principles-for-cloud-scale-geo-distributed-databases.html"&gt;database technology deployed&lt;/a&gt; across more than one geographical location without performance delays. &lt;a href="https://dzone.com/articles/9-techniques-to-build-cloud-native-geo-distributed"&gt;Some might say&lt;/a&gt; that geo-distributed data storage can come in the form of zone, region, or even multi-cloud.  &lt;/p&gt;

&lt;p&gt;Multi or Hybrid cloud is an important architecture in this case because it's a powerful and cost-saving example of geo-distributed. &lt;a href="https://harperdb.io/blog/hybrid-cloud-a-perfect-blend/"&gt;To quote our very own CTO&lt;/a&gt; &lt;a href="https://dev.to/kylebernhardy"&gt;Kyle&lt;/a&gt; “Hybrid cloud is the peanut butter in your chocolate, it can be an intermixing of public cloud services, but is more typically a blend of private cloud (or on-premise) with public.” When working with hybrid cloud, you are using multiple local "edge" nodes closer to the end-user, instead of large centralized data centers, hence to implement hybrid cloud you are using a geo-distributed data storage architecture. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.tutorialspoint.com/distributed_dbms/distributed_dbms_databases.htm"&gt;Geo-distributed functionality&lt;/a&gt; is great in the sense that with the increased &lt;a href="https://www.techopedia.com/definition/18707/data-redundancy#:~:text=Data%20redundancy%20is%20a%20condition,multiple%20software%20environments%20or%20platforms."&gt;redundancy&lt;/a&gt;, you don’t need to worry as much about one data center, cloud instance, or on-premise site going down. A fail in one location isn’t the end all be all for your team, data is gold after-all. Global performance is improved because queries are distributed across many different servers in parallel, and users are able to hit a database that is physically closer to them, ultimately reducing latency (or if you want to be fancy you can call it &lt;a href="https://www.geeksforgeeks.org/advantages-of-distributed-database/"&gt;“interquery and intraquery parallelism”&lt;/a&gt;). The user experience is also better when data storage is distributed because of the rapid query times.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mix-them-together-hello-geodistributed-data-lake" class="anchor"&gt;
  &lt;/a&gt;
  Mix Them Together: Hello Geo-Distributed Data Lake!
&lt;/h3&gt;

&lt;p&gt;So we have all the ingredients, now let’s bake this data cake! From here it’s pretty easy to understand that a geo-distributed data lake is a type of geo-distributed data storage. A data lake distributed across multiple locations….kinda sounds like the data version of an ocean! As a powerful way to collaborate efficiently with large dispersed teams, geo-distributed data lakes make big data analysis easy and user-friendly. Companies spread across the country or even the world can easily access company data and know that the data they are looking at is the most up to date version, which comes in handy, especially when dealing with real-time mission-critical analytics. Here's a nice bulleted list for all my dev friends on the &lt;a href="https://www.educba.com/distributed-database-system/"&gt;advantages of a distributed data lake&lt;/a&gt; (hint: I touched on some of them when talking about geo-distributed data storage):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Collaboration and Synchronization&lt;/strong&gt;- These two things can become streamlined and done in real-time when you have multiple copies of a database out in the world. Local teams can have the data most important to them running nearby, making it easy to pull the most recent updates. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Data Redundancy and Recovery&lt;/strong&gt;- Similar to when we talk about general-purpose distributed data storage, you don’t have to worry about network, data center, or any other outages or downtime. You have backup from your other replicated data lakes there to give you peace of mind.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Performance&lt;/strong&gt;- Instead of one large data lake, you now have many smaller data lakes spread across your network (also known as load distribution). You aren’t hammering one system all at once.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Agile Development and Data Analytics&lt;/strong&gt;- Distributed data lake means you can use the same data across different applications along with improved collaboration and sync, as listed above. Your team can work in a smarter and faster fashion.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Scalability&lt;/strong&gt;- It's easier to scale your data collection when you not only have the flexibility of a data lake that can collect both unstructured and structured data, but you also have access to multiple copies of that data lake spread across different locations. With a distributed architecture, you can easily add additional data lake nodes as demand increases. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cost Savings&lt;/strong&gt;- If you are using the &lt;a href="https://dev.to/margo_hdb/enhance-your-hybrid-cloud-strategy-with-a-new-edge-36c4"&gt;hybrid cloud&lt;/a&gt; model that we discussed earlier, then you can significantly cut the costs of your data lake. This is because you are not exclusively locked into cloud providers and their cloud hosting costs, instead, you using localized edge nodes that are maintained by your organization or a third-party.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#use-cases-amp-tools-for-geodistributed-data-lakes" class="anchor"&gt;
  &lt;/a&gt;
  Use Cases &amp;amp; Tools for Geo-Distributed Data Lakes
&lt;/h3&gt;

&lt;p&gt;With so many benefits to geo-distributed data lakes, use cases and tools that work in the geo-distributed data lake space are not hard to find. Here are some of my favorite ideas for implementing distributed data lakes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Internet of Things (IoT)&lt;/strong&gt;- A no-brainer. IoT data can be a pain in the…. and a lot of IoT use cases require real-time or near real-time analytics. When you combine the ability to pull in large amounts of structured and unstructured data with the replication of a geo-distributed architecture, you get the perfect IoT tool. Now your IoT strategy and implementation won’t get bogged down by how to store the massive amounts of data coming in from many devices across many locations. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Extract Transform Load (ETL)&lt;/strong&gt;- Data lakes are famous for being an excellent route when working in ETL and this is because you can now &lt;a href="https://www.sqlchick.com/entries/2016/7/31/data-lake-use-cases-and-planning"&gt;extract and load your data&lt;/a&gt; into your data lake and transform it whenever you need. Imagine the power of this strategy being multiplied across different locations.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Enterprise and Big Data&lt;/strong&gt;d- This makes total sense when you consider the benefits above, including agile development, data analytics, scalability, collaboration, and data sync. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Advanced and Real-Time Analytics&lt;/strong&gt;- When you aren’t worried about the operational side of your data storage, you can focus on the juicy part of data collection, analyzing, and putting your data to work! &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these use cases in mind let's talk tools. &lt;a href="https://harperdb.io/developers/get-started/"&gt;HarperDB&lt;/a&gt; works for all of the above use cases because it can ingest both structured and unstructured data. That allows it to act as a data lake repository. THEN add in the advanced &lt;a href="https://harperdb.io/developers/documentation/clustering/"&gt;clustering and replication&lt;/a&gt; capabilities, followed up with &lt;a href="https://harperdb.io/product/#sql"&gt;SQL capabilities&lt;/a&gt; for analytical jobs and you are not only working with a geo-distributed data lake, but you can also use HarperDB simultaneously as a data warehouse! You can spin up HarperDB on any computing device, from large scale servers down to micro-computing devices like the Raspberry Pi.  Other great tools to check out for geo-distributed data lakes include &lt;a href="https://www.snowflake.com/workloads/data-lake/"&gt;Snowflake&lt;/a&gt;, &lt;a href="https://www.cloudera.com/products/sdx/data-lake-service.html"&gt;Cloudera&lt;/a&gt;, and &lt;a href="https://databricks.com/product/delta-lake-on-databricks"&gt;Databricks&lt;/a&gt;, which I have linked to their Data Lake info pages if you are curious about how they all fit into the landscape. “Distributed” is becoming quite the buzzword for good reason, and it will be exciting to see how that space transforms as more and more teams adopt a distributed architecture. &lt;/p&gt;

&lt;p&gt;Combining the flexibility of data lakes with the power of a distributed architecture is a no brainer in my opinion. Data lakes provide an easy way to ingest all types of data, store large amounts of historical data, and then use only the data that you need when you need it. Geo-distributed enables improved performance, cost savings, scalability, and better safety nets for the ever-growing data needs of modern-day enterprises and startups alike. As always, let me know what I missed and shoot me your ideas for my next “Explained By” blog. 👋 &lt;/p&gt;

</description>
      <category>database</category>
      <category>distributedsystems</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why You Need a Design System</title>
      <author>Tyler Hawkins</author>
      <pubDate>Wed, 27 Jan 2021 16:20:59 +0000</pubDate>
      <link>https://dev.to/thawkin3/why-you-need-a-design-system-14lf</link>
      <guid>https://dev.to/thawkin3/why-you-need-a-design-system-14lf</guid>
      <description>&lt;p&gt;Your frontend application needs a design system. If you want to provide a consistent user experience (UX), ship features faster, make re-branding changes more easily, and free up your time to focus on hard UX problems, this article is for you.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#first-off-what-is-a-design-system" class="anchor"&gt;
  &lt;/a&gt;
  First off, what is a design system?
&lt;/h2&gt;

&lt;p&gt;A design system is a tool that enables you to build your application. It provides all the building blocks and guidance your team needs to design and develop a product. In simple terms, you can think of a design system as a component library. At the “atomic” level, you might have components for a button, or an avatar, or a tooltip. These components are used like Lego blocks to piece together your application, forming “molecules” and eventually whole pages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AoAY5ub2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2ArIFyJCY2SvlkpQZj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AoAY5ub2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2ArIFyJCY2SvlkpQZj.png" alt="[Palantir’s Blueprint](https://dribbble.com/Palantir) component library"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;a href="https://dribbble.com/Palantir"&gt;Palantir’s Blueprint&lt;/a&gt; component library



&lt;p&gt;However, a design system is more than just a component library. It also includes the design principles and branding rules on how to use the components. It includes good documentation with templates and examples of do’s and don’ts. It encompasses the surrounding processes, strategy, and vision for the component library. It might include a blog or newsletter for updates. And it has a clearly defined governance model for who owns the design system or contributes to it.&lt;/p&gt;

&lt;p&gt;There’s a lot more to design systems than meets the eye!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-would-you-use-a-design-system" class="anchor"&gt;
  &lt;/a&gt;
  Why would you use a design system?
&lt;/h2&gt;

&lt;p&gt;Now that we’ve gotten that definition out of the way, why would you want to use a design system when building your app? There are four main reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To provide consistency throughout the app&lt;/li&gt;
&lt;li&gt;To enable you to ship features faster&lt;/li&gt;
&lt;li&gt;To make re-branding changes easy&lt;/li&gt;
&lt;li&gt;To allow you to focus on the hard UX problems&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s explore these ideas.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#provide-consistency-throughout-the-app" class="anchor"&gt;
  &lt;/a&gt;
  Provide consistency throughout the app
&lt;/h2&gt;

&lt;p&gt;Consistency creates a sense of familiarity for your users as they navigate your app. If a button looks a certain way on one page, it’s disorienting to have it look differently on another page. For more complex interactions in components like dropdowns, modals, or autocomplete inputs, you absolutely want the behavior to be consistent. If the same element looks and behaves differently from page to page, your users may become frustrated or confused.&lt;/p&gt;

&lt;p&gt;Spotify provides a &lt;a href="https://spotify.design/article/reimagining-design-systems-at-spotify"&gt;fascinating case study&lt;/a&gt; of how they addressed inconsistency in their UI.&lt;/p&gt;

&lt;p&gt;If you think back to 2009, the Spotify app looked much different ten years ago than it does today! The experience and design for web, desktop, and mobile looked nothing like each other. You had to re-learn how to use the app depending on your device. Even moving from page to page was a struggle. The home page didn’t feel the same as a playlist or artist page did. The experience felt disjointed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z4b_H98J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2Ae99_NzQKMP1MjKuO" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z4b_H98J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2Ae99_NzQKMP1MjKuO" alt="Spotify inconsistent UI from 2009"&gt;&lt;/a&gt;&lt;/p&gt;
Spotify inconsistent UI from 2009 (Source: &lt;a href="https://spotify.design/article/reimagining-design-systems-at-spotify"&gt;Spotify design blog&lt;/a&gt;)



&lt;p&gt;Spotify recognized this problem and sought a solution that would unify their user experience across pages, devices, and platforms. Starting in 2013, they spent two years building and implementing their design system. That’s a long time! But just look at the result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D_-_4nzP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2As52vlp_ENokuuBVL" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D_-_4nzP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2As52vlp_ENokuuBVL" alt="Spotify consistent UI from 2015"&gt;&lt;/a&gt;&lt;/p&gt;
Spotify consistent UI from 2015 (Source: &lt;a href="https://spotify.design/article/reimagining-design-systems-at-spotify"&gt;Spotify design blog&lt;/a&gt;)



&lt;p&gt;Was it worth it? I think so.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ship-features-faster" class="anchor"&gt;
  &lt;/a&gt;
  Ship features faster
&lt;/h2&gt;

&lt;p&gt;Web applications are full of duplicated functionality. Sure, you may be building a new feature at the moment, but that feature is made up of building blocks. You likely have buttons, tooltips, avatars, and dialog modals all over your app.&lt;/p&gt;

&lt;p&gt;So, if you have 20 modals in your app, which scenario would you prefer: You can build each modal from scratch, with each modal taking one day to build. Or, you can build one reusable modal in three days, and then you can implement this modal in under 15 minutes anywhere you need it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B3HuR_GE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2APBiJ25hAdwIDtZxH" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B3HuR_GE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2APBiJ25hAdwIDtZxH" alt="Cavemen pulling a cart with square wheels"&gt;&lt;/a&gt;&lt;/p&gt;
No thanks! We are too busy. — Source unknown



&lt;p&gt;This should be a no-brainer. It’s more beneficial to build a reusable component rather than re-writing similar code from scratch. Using a design system enables you to speed up your development lifecycle and ship features faster without sacrificing quality.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#make-rebranding-changes-easy" class="anchor"&gt;
  &lt;/a&gt;
  Make re-branding changes easy
&lt;/h2&gt;

&lt;p&gt;It’s not uncommon for a company to go through some sort of re-branding or design refresh every few years. And while the design changes may be relatively straightforward, it can be tedious to apply the style updates everywhere they’re needed.&lt;/p&gt;

&lt;p&gt;Design systems allow you to make an update in one place and then sit back and watch as the changes are applied everywhere in your app.&lt;/p&gt;

&lt;p&gt;Consider a simple change in which blue buttons with subtle rounded edges now need to be green buttons with more pronounced rounded edges. This change needs to be applied to every button in your app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tw4RR9eq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2696/1%2A92B3MetYC0K-3bAYz5Ib0Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tw4RR9eq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2696/1%2A92B3MetYC0K-3bAYz5Ib0Q.png" alt="Your task: Update all buttons in your app from blue to green"&gt;&lt;/a&gt;&lt;/p&gt;
Your task: Update all buttons in your app from blue to green



&lt;p&gt;If you built each button as a one-off implementation or used a design system inconsistently, this menial task will easily become a nightmare.&lt;/p&gt;

&lt;p&gt;In the screenshot below, the first button was implemented using the design system, the second was built on its own but styled to look like the design system’s button, and the third is using entirely different styles. When it comes time to update your app’s design, only the first button will be affected by the changes in the design system. Now the look of the app is even more inconsistent!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BIzsto3b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3968/1%2AHSAYV9I0GBZEtuYvQl5jSw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BIzsto3b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3968/1%2AHSAYV9I0GBZEtuYvQl5jSw.png" alt="Bad: Inconsistent use of a design system makes simple style updates a pain"&gt;&lt;/a&gt;&lt;/p&gt;
Bad: Inconsistent use of a design system makes simple style updates a pain



&lt;p&gt;Now, what if every button in the app was provided by the design system? Updating the style in the design system is simple, and now all the buttons in your app have the appropriate new styles. Beautiful!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WOa0l6qM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3980/1%2AAVbqCc0YOdljJHWs8X8kEA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WOa0l6qM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3980/1%2AAVbqCc0YOdljJHWs8X8kEA.png" alt="Good: Consistent use of a design system makes style updates easy"&gt;&lt;/a&gt;&lt;/p&gt;
Good: Consistent use of a design system makes style updates easy






&lt;h2&gt;
  &lt;a href="#focus-on-the-hard-ux-problems" class="anchor"&gt;
  &lt;/a&gt;
  Focus on the hard UX problems
&lt;/h2&gt;

&lt;p&gt;One piece of pushback I sometimes hear criticizing the use of a design system goes a little like this: “Designers don’t want a design system. They don’t want to be put in a box. They want the freedom to be creative in their designs with each new feature they build.”&lt;/p&gt;

&lt;p&gt;However, I’d argue that this line of thinking is short-sighted.&lt;/p&gt;

&lt;p&gt;If you are a designer mocking up a new feature, do you really want to consider how a dropdown menu should appear and function? Do you want to design a new button each time? Do you want to re-imagine tooltip styles?&lt;/p&gt;

&lt;p&gt;Or, would you rather focus on the user experience as a whole? Would you rather focus on how this new feature can solve an important problem for your users? Would you rather focus on the overall workflow of the page and ensure that it feels natural and follows a logical progression?&lt;/p&gt;

&lt;p&gt;I’m betting most people would choose the latter set of choices. Design systems don’t limit creativity — they enable creativity. Design systems take care of providing the building blocks so you can focus on what’s most important: designing an exceptional user experience.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you want to build an application that can scale, you need a design system. Design systems enable you to provide a consistent user experience, ship features faster, make re-branding changes more easily, and free up your time to focus on hard UX problems.&lt;/p&gt;

</description>
      <category>design</category>
      <category>webdev</category>
      <category>systems</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Functional programming in python</title>
      <author>Aswin Barath</author>
      <pubDate>Wed, 27 Jan 2021 15:26:45 +0000</pubDate>
      <link>https://dev.to/aswin2001barath/functional-programming-in-python-42fi</link>
      <guid>https://dev.to/aswin2001barath/functional-programming-in-python-42fi</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;In computer science, functional programming is a programming paradigm where programs are constructed by applying and composing functions. (Wikipedia)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#need-for-functional-programmingfp" class="anchor"&gt;
  &lt;/a&gt;
  Need for Functional Programming(FP)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The usage of Functional Programming provides us with separation of concern where we can separate data and logic separately. Hence, the code becomes &lt;em&gt;clear&lt;/em&gt; and &lt;em&gt;easy to understand&lt;/em&gt; to a developer.&lt;/li&gt;
&lt;li&gt;Functional Programming follows the &lt;em&gt;DRY (Do not Repeat Yourself)&lt;/em&gt; principle.&lt;/li&gt;
&lt;li&gt;Code which follows Functional Programming practice is &lt;em&gt;memory-efficient&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The codebase which implements Functional Programming will also be &lt;em&gt;easy to extend and maintain&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pure-functions" class="anchor"&gt;
  &lt;/a&gt;
  Pure functions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;One of the important concepts in functional programming is the usage of &lt;strong&gt;pure functions&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A function is said to be a &lt;em&gt;Pure function&lt;/em&gt; if:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1) Given the same input, the function will always return the same output.&lt;/p&gt;

&lt;p&gt;2) The function must not produce any &lt;em&gt;side effects&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Side effects&lt;/strong&gt; are things that a function does that affect the outside world, that is they change the state of the program.&lt;/li&gt;
&lt;li&gt;Changing the data in a variable, printing output can be considered as some examples of side effects of a function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider the following simple example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aG0VmWf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lipceb5cbltvuuylxsqf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aG0VmWf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lipceb5cbltvuuylxsqf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The function square will always return only the square of a given number and will not change anything in the outside world.&lt;br&gt;
This type of functions are also called &lt;strong&gt;declarative functions&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#note" class="anchor"&gt;
  &lt;/a&gt;
  Note:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;But, technically it's not possible to use pure functions everywhere as we may need to change the state of the code.&lt;/li&gt;
&lt;li&gt;Although, it's a good practice to use pure functions as many places as possible.&lt;/li&gt;
&lt;li&gt;And the &lt;em&gt;fact&lt;/em&gt; here is that it highly probable to face bugs and errors occur in non-pure functions rather than in pure functions.&lt;/li&gt;
&lt;li&gt;Python provides us with some useful pure functions which are built-in python.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#pure-functions-in-python" class="anchor"&gt;
  &lt;/a&gt;
  Pure Functions in python:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;map()&lt;/li&gt;
&lt;li&gt;filter()&lt;/li&gt;
&lt;li&gt;zip()&lt;/li&gt;
&lt;li&gt;reduce()&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#1-map" class="anchor"&gt;
  &lt;/a&gt;
  1) map()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;map() accepts two arguments - a function and an iterable.&lt;/li&gt;
&lt;li&gt;Consider the above example of square function, we can make use of map() function to quickly apply the function to a given iterable like a list of numbers:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tsXs5DhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nlk0ynd655xvqbsni04e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tsXs5DhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nlk0ynd655xvqbsni04e.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[4, 36, 100]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The most common and useful use case of map() function is to receive multiple unknown numbers of input from the user:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JpE3lyUs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5yh2k05ao8kf45wlwhn5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JpE3lyUs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5yh2k05ao8kf45wlwhn5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter some numbers: 2 5 3 7 4
Check your numbers: [2, 5, 3, 7, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-filter" class="anchor"&gt;
  &lt;/a&gt;
  2) filter()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;filter() function filters any given iterable based on the specified function.&lt;/li&gt;
&lt;li&gt;Consider the following example where the filter() function filters only the items which satisfy the condition of the given &lt;code&gt;only_even()&lt;/code&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aDmytKc_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4se1zxrb81g5zgjcs7wu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDmytKc_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4se1zxrb81g5zgjcs7wu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[2, 4, 6, 8, 10]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-zip" class="anchor"&gt;
  &lt;/a&gt;
  3) zip()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When we need to zip two iterables literally, we use the zip() function.&lt;/li&gt;
&lt;li&gt;We can add as many iterables as we want inside a zip() function.&lt;/li&gt;
&lt;li&gt;Consider the following example with two iterables:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ltOMZlm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kk0of0fmulej6ojcxhwp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ltOMZlm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kk0of0fmulej6ojcxhwp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[('Iron Man', 'Batman'), ('Spider-Man', 'Superman')]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;zip() function binds together the corresponding index items in a tuple and inserts into a list function (as I specified as the list() function).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-reduce" class="anchor"&gt;
  &lt;/a&gt;
  4) reduce()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;reduce() function is part of a functools module - a standard python library.&lt;/li&gt;
&lt;li&gt;Consider the following example, where the reduce() function accumulates the given list values and provides a final output.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xyVet6IH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5swwddumg7fjsstm59la.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xyVet6IH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5swwddumg7fjsstm59la.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;9
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Unlike other functions, the reduce() function accepts three arguments.&lt;/li&gt;
&lt;li&gt;From the example, you can see that the function accumulate() accepts two arguments &lt;code&gt;acc&lt;/code&gt; and &lt;code&gt;item&lt;/code&gt; and returns the sum.&lt;/li&gt;
&lt;li&gt;Here, the reduce() function passes the last argument 0 as acc at first and the first item from the list, then it accumulates and passes the sum as acc for the next list item and so on until all the list items are accumulated and the result is displayed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#code-along-and-learn-more" class="anchor"&gt;
  &lt;/a&gt;
  Code along and learn more...
&lt;/h4&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Stop learning everything</title>
      <author>Hanna</author>
      <pubDate>Wed, 27 Jan 2021 15:09:16 +0000</pubDate>
      <link>https://dev.to/hanna/stop-learning-everything-2j07</link>
      <guid>https://dev.to/hanna/stop-learning-everything-2j07</guid>
      <description>&lt;p&gt;One mistake I've seen people make, especially newcomers to devops or programming in general, is they try to learn to much. I don't mean in a specific time frame either, I mean overall. They end up learning 50 different languages and/or tools, when in reality they're going to only end up using using at most 5, especially in their career. I know this because it's something I've personally done, I ended up learning so many languages, tools and more, that I have per-say "cluttered" my brain with information that probably won't be used, and this is problematic, especially at scale.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-or-need" class="anchor"&gt;
  &lt;/a&gt;
  Want or need
&lt;/h2&gt;

&lt;p&gt;Don't get me wrong learning is good and you should learn but you should only learn what is needed. There is a difference between learning something because you can, and learning something because something your working on needs it. I could learn all the programming languages in the world, but if I only end up using 5-10 of those languages, what use is that knowledge? &lt;/p&gt;

&lt;p&gt;One common phrase I often quote in things like job interviews, among other things is "lead by example, don't lead by courage", and what this phrase essentially means is, you want to be an example when you lead, what you don't want to do is lead or become an example that is only an example because you had the knowledge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#knowledge-or-experience" class="anchor"&gt;
  &lt;/a&gt;
  Knowledge or experience
&lt;/h2&gt;

&lt;p&gt;Having the knowledge to use something, doesn't directly correlate with knowing how to use it well. Instead of focusing your time on learning 20 different tools or languages, instead focus on learning the specific tools your project or job(s) need, and improving your skills with them. This is very important when it comes to software engineering jobs, among things not even related to programming.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>tooling</category>
      <category>discuss</category>
      <category>leadership</category>
    </item>
    <item>
      <title>Day 34 Of 100DaysOfCode : Python Code To Find Count Of Mail</title>
      <author>Durga Pokharel</author>
      <pubDate>Wed, 27 Jan 2021 15:04:28 +0000</pubDate>
      <link>https://dev.to/iamdurga/day-34-of-100daysofcode-python-code-to-find-count-of-mail-4ddh</link>
      <guid>https://dev.to/iamdurga/day-34-of-100daysofcode-python-code-to-find-count-of-mail-4ddh</guid>
      <description>&lt;p&gt;Today is my 34 day of #100DaysOfCode and Python. Today I tried to write some code on python access to web data and data structure on python. Complete some assignment on coursera.&lt;/p&gt;

&lt;p&gt;Below is the python code I tried to write to find the count of mail from the file and from whom maximum times mail come.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#python-code" class="anchor"&gt;
  &lt;/a&gt;
  Python Code
&lt;/h1&gt;

&lt;p&gt;At first we open file. Set counts to zero at first. There is empty list for mails. I write simple loop to find the mail. There is empty dictionary to store mail as a key and number of count as a value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fhand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'mbox-short.txt'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;emails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fhand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# print('Debug:', words)
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;'From'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="n"&gt;emails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;#print(emails)
&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;emails&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="c1"&gt;#print(d)
&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;nd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])))}&lt;/span&gt;
&lt;span class="n"&gt;nd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The output of this code is given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'cwen@iupui.edu'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'david.horwitz@uct.ac.za'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'zqian@umich.edu'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'gsilver@umich.edu'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'louis@media.berkeley.edu'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'rjlowe@iupui.edu'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'stephen.marquard@uct.ac.za'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'ray@media.berkeley.edu'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'gopal.ramasammycook@gmail.com'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'antranig@caret.cam.ac.uk'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'wagnermr@iupui.edu'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To find by whom we got maximum mail is find by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"This &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;())[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; send mail most i.e &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;())[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; times."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Output is,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;cwen&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;iupui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edu&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;blockquote class="twitter-tweet"&gt;
&lt;br&gt;
&lt;p&gt;Day 34 Of &lt;a href="https://twitter.com/hashtag/100DaysOfCode?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#100DaysOfCode&lt;/a&gt; and &lt;a href="https://twitter.com/hashtag/Python?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Python&lt;/a&gt; &lt;br&gt;* Web access on python&lt;br&gt;* Data structure on python&lt;br&gt;* Python program to find the maximum count of mail.&lt;a href="https://twitter.com/hashtag/100DaysOfCode?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#100DaysOfCode&lt;/a&gt; ,&lt;a href="https://twitter.com/hashtag/CodeNewbie?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#CodeNewbie&lt;/a&gt; ,&lt;a href="https://twitter.com/hashtag/Python?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Python&lt;/a&gt; ,&lt;a href="https://twitter.com/hashtag/beginners?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#beginners&lt;/a&gt; &lt;a href="https://t.co/pTaNyNoczI"&gt;pic.twitter.com/pTaNyNoczI&lt;/a&gt;&lt;/p&gt;— Durga Pokharel (@mathdurga) &lt;a href="https://twitter.com/mathdurga/status/1354440046322057220?ref_src=twsrc%5Etfw"&gt;January 27, 2021&lt;/a&gt;&lt;br&gt;
&lt;/blockquote&gt; 

</description>
      <category>100daysofcode</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>python</category>
    </item>
    <item>
      <title>How to use Notion as an Issue Tracker</title>
      <author>Maegan Wilson</author>
      <pubDate>Wed, 27 Jan 2021 14:19:19 +0000</pubDate>
      <link>https://dev.to/maeganwilson_/how-to-use-notion-as-an-issue-tracker-3oab</link>
      <guid>https://dev.to/maeganwilson_/how-to-use-notion-as-an-issue-tracker-3oab</guid>
      <description>&lt;p&gt;First off, this is a video on YouTube. If you like it and watch it, please head over to YouTube and give it a like.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1Qs2pFvt8tg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Alright, if you're reading this it's because you want to read the points in the video. Here are the two major topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is Notion&lt;/li&gt;
&lt;li&gt;Why I use Notion as an issue tracker&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-is-notion" class="anchor"&gt;
  &lt;/a&gt;
  What is Notion
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.notion.so/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7i9eriur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qyw9qg0ddu10nr5nc5ms.png" alt="Notion.so website before logging in"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notion brands itself as an "All-in-one Workspace" and as a major tool for teams. It's a web app that can be used to create a "wiki" style document. You can add links to other notion documents, photos, and website links as well. YouTube videos can also be put in to the documents, which is pretty neat.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-i-use-notion-as-an-issue-tracker" class="anchor"&gt;
  &lt;/a&gt;
  Why I use Notion as an issue tracker
&lt;/h1&gt;

&lt;p&gt;The main reason I like to use Notion as an issue tracker is the database feature. Another reason I like using Notion is that I can share a page quickly to the web.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#databases" class="anchor"&gt;
  &lt;/a&gt;
  Databases
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ywCsAv3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4am0a59wbxdod44eb849.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ywCsAv3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4am0a59wbxdod44eb849.png" alt="My issue tracking for iHog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This database can be setup with whatever properties you want. The choices I use are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Text: Enter whatever text you want&lt;/li&gt;
&lt;li&gt;Number: I use this to associate to a GitHub issue&lt;/li&gt;
&lt;li&gt;Multi-select: Think of these as chain-able tags&lt;/li&gt;
&lt;li&gt;Select: Think of these as non-chain-able tags&lt;/li&gt;
&lt;li&gt;Links: Put a link to anywhere on the internet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another bonus to the database feature is that you can have different views to present the data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lqd5DXyT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/icqxy2assdhqwlg1kktv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lqd5DXyT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/icqxy2assdhqwlg1kktv.png" alt="View options"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you create a view, then you can sort and filter the data based on the databse properties. I have a property called progress and a Board view that has the columns based on the progress. The progress is a select since an issue can only be in one state at a time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zX85IFF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rzjkpyi9ew65ziizstgr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zX85IFF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rzjkpyi9ew65ziizstgr.png" alt="Progress view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then utilizing filters and sorts you can quickly see specific issues for a release or any other property in the database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fIpbVkSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2uyc9l3x9i6xjhaqme48.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fIpbVkSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2uyc9l3x9i6xjhaqme48.png" alt="Using filters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These filters and sorting capabilities make Notion such a great tool for me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sharing-a-web-page" class="anchor"&gt;
  &lt;/a&gt;
  Sharing a web page
&lt;/h2&gt;

&lt;p&gt;You can share a web page with the internet if you need to. Anyone can access it and click on links. This makes it quite easy to make a one page website and share to other places.&lt;/p&gt;

&lt;p&gt;Another nice thing is on that page, you can add a linked database that can be filtered and used in the page. In the image below, I have 2 views of the issue tracker. You can click on the image and see it live.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.notion.so/ihog/v2021-1-425b31a2f2684b1ba356ecf8dfbb7be4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BxzJ7FuV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q5wfxtz782x7cr2eschq.png" alt="Release notes page"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;That's what I have about Notion!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#links-as-a-thanks-for-reading" class="anchor"&gt;
  &lt;/a&gt;
  Links as a thanks for reading!
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.notion.so/"&gt;Notion website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.notion.so/parttimedeveloper/51efdc27322e42e88df74ce6722bacba?v=fd70df00e81c4b19b3dab9b086e28ca6"&gt;Template of my issue tracker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I work on iHog live every Tuesday and Thursday at 6:45am CST on my Twitch. Please go check it out and join me for a stream! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitch.tv/maeganwilson_"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9YxLpJlk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4si8aq4fh7rtdr8ehvr5.png" alt="Twitch https://twitch.tv/maeganwilson_"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've created a discord for to discuss development topics, technology, and other random things! If you want to join click the image below!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://discord.gg/HmGYbNHmun"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ns65p7O2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gtm1w4zfv62datsjoynw.png" alt="Discord invite https://discord.gg/HmGYbNHmun"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>developertips</category>
    </item>
    <item>
      <title>Demystifying the Frontend Technical Interview</title>
      <author>Alexa Tuskey</author>
      <pubDate>Wed, 27 Jan 2021 14:12:26 +0000</pubDate>
      <link>https://dev.to/lasertuskey/demystifying-the-frontend-technical-interview-1oba</link>
      <guid>https://dev.to/lasertuskey/demystifying-the-frontend-technical-interview-1oba</guid>
      <description>&lt;p&gt;I’m going to state the obvious here: technical interviews are hard. It’s an unnatural thing, having a near-stranger (or several) watch as you face off with a problem you may or may not have encountered before, in an unfamiliar environment, &lt;em&gt;with a time limit&lt;/em&gt;. For the majority of us, we are used to doing most of our work alone, in the comfort of our own setup, free from judging eyes and time constraints (outside of deadlines, of course). So how is one supposed to ace something that seems designed to make you fail?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I’m not claiming to know how every technical interview is handled. Different companies have different processes, so do your homework beforehand via Glassdoor, or better yet, networking with people who currently work there. I wanted to write this article because I’ve seen so many talented developers let nerves/imposter syndrome/stress freeze them up when I know they know what they’re doing. I hope this perspective from other side will give you a confidence boost to let your hard work and talent shine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-dont-need-to-finish" class="anchor"&gt;
  &lt;/a&gt;
  You don’t need to finish.
&lt;/h2&gt;

&lt;p&gt;I want to see &lt;em&gt;how&lt;/em&gt; you work. I could care less how quickly you do it. You aren’t going to be working like this if we hire you, so why would I expect you to hackertype like your life depended on it? Take a deep breath, and take your time. If you want talk through what you’re doing and use me as your rubber duck, great. If you’d prefer to concentrate in silence, no problem. I want to see how you approach the problem, if you write pseudocode, what methods you try and if something doesn’t work as expected, how you get around it. I’ve seen really good developers get choked up and freeze because they’re watching the clock. While it’s much easier said than done to relax, just know that speed does not necessarily equate understanding in my eyes, so take your time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-okay-to-ask-to-look-something-up" class="anchor"&gt;
  &lt;/a&gt;
  It’s okay to ask to look something up.
&lt;/h2&gt;

&lt;p&gt;You’ve probably heard the phrase, that good developers are good Googlers. It’s true! The more experience you get as a developer, the better questions you know to ask. Plus, we are expected to know a lot of information! Different languages, different syntaxes, different tools. Why would I expect you to memorize everything you’ve ever learned if I use search engines daily in my own workflow? If you need a refresher on the syntax of the Fetch API, don’t be afraid to ask to look it up really quick. I can see the difference between someone who understands what they’re doing, and someone who is just trying to look up answers to quickly copy and paste.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-careful-with-frameworkslibraries" class="anchor"&gt;
  &lt;/a&gt;
  Be careful with frameworks/libraries.
&lt;/h2&gt;

&lt;p&gt;Unless you are very comfortable using a framework or a library in a sandbox environment, skip it for Vanilla JS/plain CSS. You may be used to working with one in a pre-setup environment, whether it was set up by someone else or by a meta-framework like Nuxt, but trying to set one up in a sandbox while you’re against the clock can lead to stress and disaster. Depending on the seniority of the role, if you don’t have much experience with frameworks but are strong with Vanilla and plain CSS, that’s going to look a lot better than fumbling with the set up and syntax of a framework.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-open-to-advice" class="anchor"&gt;
  &lt;/a&gt;
  Be open to advice.
&lt;/h2&gt;

&lt;p&gt;If I see you getting stuck and the right questions just aren’t coming, I’ll try my best to drop some helpful tidbits to point you in the right direction because I want you to succeed. Not everyone likes taking advice though, especially if it isn’t their preferred way of doing things. You are free to solve your problem however you want, but if you don’t even consider a different way (without explaining &lt;em&gt;why&lt;/em&gt;), I might question how you’ll work within our team and with other developers. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One more little secret:&lt;/strong&gt; I get nervous interviewing people too. Am I coming off as welcoming and friendly? Do &lt;em&gt;I&lt;/em&gt; sound like I know what I’m doing? Will I know the answer if I’m asked a question? Remember: you are interviewing your interviewer too (as weird as that sounds). Would you like working with/for this person? Does the team you will be working with seem supportive and inclusive? Does the challenge you are being given seem fair to the role and skill level that you are interviewing for? Practicing these questions internally beforehand helps humanize your interviewer and generally makes the process a little less scary. Remember, a good company/interviewer/human should be rooting for you too.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>interview</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Minimal Notes - web app build with Vue.js</title>
      <author>Vladimir Carrer</author>
      <pubDate>Wed, 27 Jan 2021 13:18:46 +0000</pubDate>
      <link>https://dev.to/vladocar/minimal-notes-web-app-build-with-vue-js-4l3m</link>
      <guid>https://dev.to/vladocar/minimal-notes-web-app-build-with-vue-js-4l3m</guid>
      <description>&lt;p&gt;There are many notes apps, but I needed something simple that works for me on my laptop. &lt;/p&gt;

&lt;p&gt;That is why I made minimal notes that will work in my browser locally. &lt;/p&gt;

&lt;p&gt;Everything is stored in your web browser localStorage. All the coding is done with Vue.js and the best part is everything is in the &lt;strong&gt;index.html&lt;/strong&gt; file that is &lt;strong&gt;only 4Kb&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I also made Minimal Notes.app for Mac OS users. First I used Electron to package the app. But the file from 4Kb became 400 Mb, with some optimization I achieved around 140 Mb but I was not happy. Then I tried Cordova for Mac and worked perfectly. Now the file is 0.45 Mb that is much better then 140 Mb.&lt;/p&gt;

&lt;p&gt;Demo:&lt;br&gt;
&lt;a href="https://vladocar.github.io/Minimal-Notes/"&gt;https://vladocar.github.io/Minimal-Notes/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The project on github:&lt;br&gt;
&lt;a href="https://github.com/vladocar/Minimal-Notes"&gt;https://github.com/vladocar/Minimal-Notes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nQ6dCy5U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qt9l7adcx9jb6s0n8gmu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nQ6dCy5U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qt9l7adcx9jb6s0n8gmu.png" alt="Minimal Notes App"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vue</category>
      <category>github</category>
    </item>
    <item>
      <title>Using Framer Motion to make page transitions in React</title>
      <author>Sam Piggott</author>
      <pubDate>Wed, 27 Jan 2021 13:10:23 +0000</pubDate>
      <link>https://dev.to/sam_piggott/using-framer-motion-to-make-page-transitions-in-react-5ma</link>
      <guid>https://dev.to/sam_piggott/using-framer-motion-to-make-page-transitions-in-react-5ma</guid>
      <description>&lt;p&gt;In this short tutorial, we'll be learning how we can use the &lt;code&gt;AnimatePresence&lt;/code&gt; component provided by Framer Motion to create our very own page transitions when navigating between pages in React!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Eg4JHYC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/el44fn3e1jk9aczsva18.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Eg4JHYC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/el44fn3e1jk9aczsva18.gif" alt="Animation Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll be using React Router for this example - but this same principle should work for other router implementations, too (have tested with the &lt;strong&gt;Next.js&lt;/strong&gt; router and it worked with no issues!)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#watch-the-video-tutorial" class="anchor"&gt;
  &lt;/a&gt;
  Watch the Video Tutorial:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codesnap.io/course/react-bites/framer-motion-page-transitions"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7SrUxAQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/BxK9xNo.png" alt="Video Tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also download the source code from the link above, too!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-the-required-packages" class="anchor"&gt;
  &lt;/a&gt;
  Installing the required packages
&lt;/h3&gt;

&lt;p&gt;First of all, let's install the required packages into our React project. We'll need React Router for navigation, and Framer Motion for the transition behaviour.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add react-router-dom framer-motion
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adding-a-browserrouter-to-our-app" class="anchor"&gt;
  &lt;/a&gt;
  Adding a BrowserRouter to our app
&lt;/h3&gt;

&lt;p&gt;Next, in the top-level component where &lt;code&gt;ReactDOM.Render&lt;/code&gt; is called (for me, &lt;code&gt;index.tsx&lt;/code&gt;), we'll want to wrap our app's container in an instance of &lt;code&gt;&amp;lt;Router&amp;gt;&lt;/code&gt; from &lt;code&gt;react-router&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, we'll add the necessary imports to &lt;code&gt;index.tsx&lt;/code&gt;...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, we'll wrap our top-level component in an instance of this router.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; // &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;--&lt;/span&gt; &lt;span class="na"&gt;Adding&lt;/span&gt; &lt;span class="na"&gt;this&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;
      &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; // &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;--&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="na"&gt;and&lt;/span&gt; &lt;span class="na"&gt;this&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
  &lt;span class="err"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="na"&gt;React&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;,
  document.getElementById('root')
);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#building-a-simple-switch" class="anchor"&gt;
  &lt;/a&gt;
  Building a simple switch
&lt;/h3&gt;

&lt;p&gt;Next, we'll need to make some changes to the component immediately beneath the top-level component (in our example, the &lt;code&gt;App&lt;/code&gt; component).&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;App&lt;/code&gt; component, we'll set up a basic routing system for our app. In this example, we're only going to be navigating between two simple pages - so we just need a &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; and two &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; components to get us going.&lt;/p&gt;

&lt;p&gt;So let's import those in our &lt;code&gt;App.tsx&lt;/code&gt; file first...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then below, we'll return our simple switch from our &lt;code&gt;App&lt;/code&gt; component. For clarity, &lt;code&gt;Page1&lt;/code&gt; and &lt;code&gt;Page2&lt;/code&gt; components can be any valid React component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/page1"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Page1&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/page2"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Page2&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adding-animatepresence-from-framer-motion" class="anchor"&gt;
  &lt;/a&gt;
  Adding AnimatePresence from Framer Motion
&lt;/h3&gt;

&lt;p&gt;Now, it's time to add the animation! First, we'll wrap our &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; in the &lt;code&gt;&amp;lt;AnimatePresence&amp;gt;&lt;/code&gt; component from Framer Motion. Let's import that first...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AnimatePresence&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;framer-motion&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, let's wrap our app in that new component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AnimatePresence&lt;/span&gt; &lt;span class="na"&gt;exitBeforeEnter&lt;/span&gt; &lt;span class="na"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/page1"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Page1&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/page2"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Page2&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;AnimatePresence&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Transitions with &lt;code&gt;AnimatePresence&lt;/code&gt; only work when the child immediately below the &lt;code&gt;AnimatePresence&lt;/code&gt; component changes. In that case, that's our &lt;code&gt;Switch&lt;/code&gt; component. We'll need to add some props to help &lt;code&gt;AnimatePresence&lt;/code&gt; recognise when that change has occurred.&lt;/p&gt;

&lt;p&gt;Once again, in &lt;code&gt;App.tsx&lt;/code&gt;, we're going to import the &lt;code&gt;useLocation&lt;/code&gt; hook from &lt;code&gt;react-router&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And now, let's add the &lt;code&gt;location&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; props to our &lt;code&gt;Switch&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AnimatePresence&lt;/span&gt; &lt;span class="na"&gt;exitBeforeEnter&lt;/span&gt; &lt;span class="na"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt; &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/page1"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Page1&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/page2"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Page2&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;AnimatePresence&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adding-the-transition-effect-parameters-to-our-page-components" class="anchor"&gt;
  &lt;/a&gt;
  Adding the transition effect parameters to our page components
&lt;/h3&gt;

&lt;p&gt;Great news - we're done with our App component. Now, let's add some animations to our pages, and we should be ready to go!&lt;/p&gt;

&lt;p&gt;Here's the &lt;code&gt;Page1&lt;/code&gt; component I'm working with. It's super simple - just a simple &lt;code&gt;div&lt;/code&gt; with some styles, and a &lt;code&gt;Link&lt;/code&gt; to our other page in the app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Page1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is page 1&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/page2"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Go to Page 2
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To trigger an animation when this &lt;code&gt;Page1&lt;/code&gt; component is mounted, we'll need to wrap it in a special component called &lt;code&gt;motion.div&lt;/code&gt; which is provided by Framer Motion. So, let's import that...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;motion&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;framer-motion&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, we'll wrap our &lt;code&gt;Page1&lt;/code&gt; component in our new &lt;code&gt;motion.div&lt;/code&gt; component, and provide some props to perform the animation when it's mounted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Page1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
      &lt;span class="na"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is page 1&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/page2"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Go to Page 2
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see, we've added three new props to our &lt;code&gt;motion.div&lt;/code&gt; component here, too.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;initial&lt;/strong&gt; - This is the style of the component at the &lt;strong&gt;beginning&lt;/strong&gt; of the animation when it is &lt;strong&gt;animating in&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;animate&lt;/strong&gt; - This is the style of the component at the &lt;strong&gt;end&lt;/strong&gt; of the animation when it is &lt;strong&gt;animating in&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;exit&lt;/strong&gt; - This is the style of the component at the &lt;strong&gt;end&lt;/strong&gt; of the animation when it is &lt;strong&gt;animating out&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;transition&lt;/strong&gt; - Transition configuration. Here, we're specifying how long we want the duration to last for (in our case, 0.5 seconds).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With those props in place, we can expect the following behaviour:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When the prop is first mounted, it is invisible (&lt;code&gt;scaleY: 0&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Then, it will immediately animate over 0.5 seconds to be visible (&lt;code&gt;scaleY: 1&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;When it is animating out, it will resize back down before it is removed from the DOM (&lt;code&gt;scaleY: 0&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, the only other thing we need to do is wrap our other page components that we wish to animate using the same method.&lt;/p&gt;

&lt;p&gt;I'm animating between two pages (&lt;code&gt;Page1&lt;/code&gt; and &lt;code&gt;Page2&lt;/code&gt; in this example), so I'll need to wrap &lt;code&gt;Page2&lt;/code&gt; in a &lt;code&gt;motion.div&lt;/code&gt; tag, too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Page2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
      &lt;span class="na"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is page 2&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/page1"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Go to Page 1
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#and-were-done" class="anchor"&gt;
  &lt;/a&gt;
  And we're done!
&lt;/h3&gt;

&lt;p&gt;And with that, we are done! We have successfully set up a fancy animation when navigating between pages in React.&lt;/p&gt;

&lt;p&gt;You should now also have all the knowledge you need to customise your transition styles, too. Each page can also have different transition styles - the sky's the limit!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#codesnap" class="anchor"&gt;
  &lt;/a&gt;
  CodeSnap
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://codesnap.io"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IwgicCou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/mwdAzpU.png" alt="CodeSnap Preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you enjoyed this course, I'm uploading tutorial videos, courses, articles and plenty more. If you'd like to see more of this content, please consider signing up for the mailing list over on &lt;a href="https://codesnap.io"&gt;&lt;strong&gt;CodeSnap.io&lt;/strong&gt;&lt;/a&gt;. It encourages me to make more videos and articles just like this one 🙏&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Building HTTP server with Ruby</title>
      <author>Arnab Sen</author>
      <pubDate>Wed, 27 Jan 2021 12:43:56 +0000</pubDate>
      <link>https://dev.to/arnabsen1729/building-http-server-with-ruby-17ad</link>
      <guid>https://dev.to/arnabsen1729/building-http-server-with-ruby-17ad</guid>
      <description>&lt;p&gt;&lt;em&gt;The article was originally posted &lt;a href="https://arnabsen.rocks/posts/building_server_from_scratch/"&gt;here&lt;/a&gt;. Some of the gifs are not displayed here due to dev.to's restrictions.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-web-server" class="anchor"&gt;
  &lt;/a&gt;
  What is a web server?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;A web server is a program that takes a request to your website from a user and does some processing on it.&lt;/strong&gt; Then, it might give the request to the application layer. A few of the most popular web servers are Nginx, Apache. (They have more features like reverse proxy, load balancing, and many others, as well, but primarily they act as web servers)&lt;/p&gt;

&lt;p&gt;Now, let me ask a question. The server that runs on your localhost during the development is that a web server? Cause, whatever request you sent, it processes it and then loads up the appropriate page. So, it might seem like a webserver, but more technically it is called an &lt;strong&gt;app server&lt;/strong&gt;.  The &lt;strong&gt;app server&lt;/strong&gt; loads the code and keeps the app in memory. When your app server gets a request from your web server, it tells your app about it. After your app is done handling the request, the app server sends the response back to the webserver (and eventually to the user). For rails in particular there are many app servers like Unicorn, Puma, Thin, Rainbows.&lt;/p&gt;

&lt;p&gt;But if there are so many servers that are tested by the community and used by thousands, why should we bother building another? Well, by building one from scratch we will have a better knowledge of how these works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-actions-does-an-http-server-actually-perform" class="anchor"&gt;
  &lt;/a&gt;
  What actions does an HTTP server actually perform?
&lt;/h2&gt;

&lt;p&gt;So, let's break down what an HTTP server does.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dJ-q-m-4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arnabsen.rocks/images/tutorial-3/http-working.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dJ-q-m-4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arnabsen.rocks/images/tutorial-3/http-working.png" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#steps-involved" class="anchor"&gt;
  &lt;/a&gt;
  Steps involved
&lt;/h3&gt;

&lt;p&gt;So when we visit a particular URL, it sends a particular HTTP request to the server. Now, what is an HTTP request? It is an application-level protocol that every application connected to the internet has to agree upon. There are many other protocols like FTP (File Transfer Protocol), TCP (Transmission Control Protocol), SMTP (Simple Mail Transfer Protocol). &lt;strong&gt;HTTP or HyperText Transfer Protocol&lt;/strong&gt; is just very popular among these and is used by web applications and web servers to communicate among themselves.&lt;/p&gt;

&lt;p&gt;So, when we type one URL in the browser. It makes an &lt;strong&gt;HTTP "request"&lt;/strong&gt; to the web server, to which the webserver processes that request and sends back an &lt;strong&gt;HTTP "response"&lt;/strong&gt; which gets rendered to the user in the browser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#history" class="anchor"&gt;
  &lt;/a&gt;
  History
&lt;/h3&gt;

&lt;p&gt;The first HTTP standard was released in 1996 which was HTTP/1.0 by Tim Berners Lee. Now we have HTTP/2 which is a more efficient expression of HTTP's semantics "on the wire" and was published in 2015. Also, did you know that there is another successor which is HTTP 3 which is already in use by over 4% of the websites (It used UPDP instead of TCP for the transport protocol)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-should-we-start" class="anchor"&gt;
  &lt;/a&gt;
  How should we start?
&lt;/h2&gt;

&lt;p&gt;So we would need a tool that will listen for bi-directional communication between client and server. Basically a &lt;strong&gt;socket&lt;/strong&gt;. &lt;strong&gt;Socket&lt;/strong&gt; is nothing but an endpoint for two-way communication between two programs running on a network i.e endpoints of a &lt;em&gt;bidirectional communications channel&lt;/em&gt;. So it has to be bound to a port so the TCP layer can find the application that the data is sent to, the server forms the listener socket and the client reaches out to the socket. We will not be implementing sockets. Ruby already has a socket implemented in their standard library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"socket"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The socket library provides specific classes for handling the common transports as well as a generic interface for handling the rest, basically it interacts with the OS level and performs the necessary actions for us.&lt;/p&gt;

&lt;p&gt;What should be the basic processes of the webserver&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Listen for connections&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parse the request&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Process and send the response&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1-listen-for-connections" class="anchor"&gt;
  &lt;/a&gt;
  1. Listen for connections
&lt;/h3&gt;

&lt;p&gt;First, let's open a port and listen to all messages sent to that particular port. We can do that using the &lt;code&gt;TCPServer.new&lt;/code&gt;  or &lt;code&gt;TCPServer.open&lt;/code&gt; method. [ According to the docs they are synonymous ]&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"socket"&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Feel free to choose any port, but make sure it is available.  Use the command "netstat -lntu" to look for the ports that are currently used by a process, don't use those.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we would like to loop infinitely to process our incoming connections. When a client connects to our server, &lt;code&gt;server.accept&lt;/code&gt; will return a Ruby Socket, which can be used like any other ruby I/O object. Since the connection was made by a request we would also love to read that request, which we can do using &lt;code&gt;gets&lt;/code&gt;  method. It will return the first line of the request.&lt;/p&gt;

&lt;p&gt;So now we have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"socket"&lt;/span&gt;

&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt; &lt;span class="c1"&gt;# to get a port from the ARG&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Client connected..."&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Request: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gets&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;How to test this?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Open up two terminals in one run the ruby script, and in the other open up &lt;code&gt;irb&lt;/code&gt;.  Now follow my commands:&lt;/p&gt;

&lt;p&gt;On the other terminal I write the commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"socket"&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;soc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;TCPSocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;soc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Hello There"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2cAeT09Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://arnabsen.rocks/images/tutorial-3/test.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2cAeT09Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://arnabsen.rocks/images/tutorial-3/test.gif" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A much easier way to test is to run the script and visit that port using the browser. If your port is &lt;code&gt;8000&lt;/code&gt; just visit&lt;br&gt;
&lt;code&gt;http://localhost:8000&lt;/code&gt;. You will see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Client connected...
Request: GET / HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;or can use the curl command for the same.&lt;/p&gt;

&lt;p&gt;Why just &lt;code&gt;GET / HTTP/1.1&lt;/code&gt; ?&lt;/p&gt;

&lt;p&gt;Because when you sent a request it gets parsed into a multi-line string. Try to run the command &lt;code&gt;curl -v localhost:8000&lt;/code&gt; you will notice something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*   Trying ::1:8000...
* Connected to localhost (::1) port 8000 (#0)
&amp;gt; GET / HTTP/1.1
&amp;gt; Host: localhost:8000
&amp;gt; User-Agent: curl/7.74.0
&amp;gt; Accept: */*
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And in our script we used &lt;code&gt;session.gets&lt;/code&gt; which only takes one line in the IO stream as input. So, let's replace that with  &lt;code&gt;readpartial(2048)&lt;/code&gt; . Here 2048 represents the byte of data we would love to read. We can increase that, but for our case, it is enough.&lt;/p&gt;

&lt;p&gt;So far we have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"socket"&lt;/span&gt;

&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Request: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;readpartial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now run the script and the curl command again. It will print all of the HTTP request data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q8cbjapx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arnabsen.rocks/images/tutorial-3/2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q8cbjapx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arnabsen.rocks/images/tutorial-3/2.png" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-parsing-the-http-request" class="anchor"&gt;
  &lt;/a&gt;
  2. Parsing the HTTP request
&lt;/h3&gt;

&lt;p&gt;Right now we are just receiving the request as a string, we need to parse it so that our server can understand and further process it.&lt;/p&gt;

&lt;p&gt;Let's look into the request once again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; GET / HTTP/1.1  &lt;span class="c"&gt;# GET is the method, the / is the path, the HTTP part is the protocol&lt;/span&gt;
 Host: localhost:8000 &lt;span class="c"&gt;# Headers&lt;/span&gt;
 User-Agent: curl/7.74.0
 Accept: &lt;span class="k"&gt;*&lt;/span&gt;/&lt;span class="k"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The first line gives us&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;method&lt;/li&gt;
&lt;li&gt;path&lt;/li&gt;
&lt;li&gt;protocol&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the lines after that comes under the header. So we write this function that will parse the raw request string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request_string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;method: &lt;/span&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;version: &lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;path: &lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;headers: &lt;/span&gt;&lt;span class="n"&gt;parse_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_string&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It calls another &lt;code&gt;parse_headers&lt;/code&gt; to parse the headers&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;":"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;
    &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now instead of just printing the request do it this way&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;ap&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;readpartial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I am using &lt;code&gt;awesome_print&lt;/code&gt; to display the data in a formatted manner you can replace that with &lt;code&gt;puts&lt;/code&gt;. Now you would get something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YMIfkyNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arnabsen.rocks/images/tutorial-3/3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YMIfkyNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arnabsen.rocks/images/tutorial-3/3.png" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-process-and-send-the-http-response" class="anchor"&gt;
  &lt;/a&gt;
  3. Process and send the HTTP response
&lt;/h3&gt;

&lt;p&gt;Now since we have all the data we now have to prepare and send the response. If the path of the request is "/" which refers to the home we will respond with something like &lt;code&gt;index.html&lt;/code&gt;  else, if it was something else like &lt;code&gt;localhost:8000/about.html&lt;/code&gt; then we will respond with that path &lt;code&gt;about.html&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prepare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parsed_req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parsed_req&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt;
        &lt;span class="n"&gt;respond_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"index.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;respond_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What &lt;code&gt;respond_with&lt;/code&gt; is supposed to is to check if the file exists, if it does then respond with the file, else return a 404.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;respond_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exists?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ok_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;binread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;error_response&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For the responses, we will be sending a string of this format. This is according to the HTTP spec. You can read more about the HTTP spec &lt;a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="s2"&gt;"HTTP/1.1 &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="s2"&gt;"Content-Length: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\#&lt;/span&gt;&lt;span class="s2"&gt;{body}&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So our, &lt;code&gt;ok_response&lt;/code&gt; and &lt;code&gt;error_respnse&lt;/code&gt; will be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ok_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;MyServer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;code: &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;body: &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;error_response&lt;/span&gt;
    &lt;span class="no"&gt;MyServer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;code: &lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now after we have our response we can send it back to the client. I have refactored the codes a little bit, you can find the entire code here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/arnabsen1729/http-server-ruby"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KgH5pSCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github-readme-stats.vercel.app/api/pin/%3Fusername%3Darnabsen1729%26repo%3Dhttp-server-ruby" alt="ReadMe Card"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once everything is in place, we can finally run the script and visit the URL &lt;code&gt;http://localhost:8000&lt;/code&gt; it will render all the contents of &lt;code&gt;index.html&lt;/code&gt;. Also if you have any other pages in the same folder like &lt;code&gt;about.html&lt;/code&gt; visiting &lt;code&gt;http://localhost:8000/about.html&lt;/code&gt; will render that as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kH_S-d00--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dklq40i3g81duh2m8u72.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kH_S-d00--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dklq40i3g81duh2m8u72.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yayy!! We have successfully built our own HTTP server&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>tutorial</category>
    </item>
    <item>
      <title> FAT32 vs. NTFS: Which Is Better?🔥🔥</title>
      <author>Kiran Sethumadhavan</author>
      <pubDate>Wed, 27 Jan 2021 12:23:28 +0000</pubDate>
      <link>https://dev.to/forcommunity/fat32-vs-ntfs-which-is-better-5g10</link>
      <guid>https://dev.to/forcommunity/fat32-vs-ntfs-which-is-better-5g10</guid>
      <description>&lt;p&gt;Windows-supported operating systems rely on one of two different types of file systems: File Allocation Table (FAT) or New Technology File System (NTFS).&lt;/p&gt;

&lt;p&gt;While both file systems were created by Microsoft, each has different benefits and disadvantages related to compatibility, security, and flexibility.&lt;/p&gt;

&lt;p&gt;In this article, we will break down what a FAT file system is, what an NTFS file system is and what the pros and cons are for each system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What Is FAT?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Microsoft created the File Allocation Table file system in 1977 and is the simplest file system supported by Windows NT. It is the older of the two file systems and therefore isn’t as efficient or advanced. However, it does offer more compatibility with other operating systems and removable storage devices.&lt;/p&gt;

&lt;p&gt;The FAT is used to describe the allocation status of the clusters (the basic units of logical storage on a hard drive) in a file system, as well as the link relationship between each. It acts as a Table of Contents for the operating system, indicating where directories and files are stored on the disk.&lt;/p&gt;

&lt;p&gt;A FAT is often most used in removable storage devices, such as digital cameras, Smart TVs and other portable devices.&lt;/p&gt;

&lt;p&gt;The file allocation table is a critical part of the FAT file system. If the FAT is damaged or lost, the data on the hard disk becomes unreadable.&lt;/p&gt;

&lt;p&gt;There are several limitations to using a FAT32 file system:&lt;/p&gt;

&lt;p&gt;FAT32 only supports files of up to 4GB in size and volumes of up to 2TB in size&lt;/p&gt;

&lt;p&gt;FAT32 isn’t a journaling file system, which means corruption can happen more easily&lt;/p&gt;

&lt;p&gt;FAT32 doesn’t support file permissions&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What Is NTFS?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Microsoft created the New Technology File System in 1993, and it is now the most widely used file system in Windows.&lt;/p&gt;

&lt;p&gt;It was introduced as a replacement for the FAT file system, designed to improve upon FAT by increasing performance, reliability and disk space.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NTFS supports:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Very large files&lt;/p&gt;

&lt;p&gt;Different file permissions and encryption&lt;/p&gt;

&lt;p&gt;Automatically restores consistency by using log file and checkpoint information&lt;/p&gt;

&lt;p&gt;File compression when running out of disk space&lt;/p&gt;

&lt;p&gt;Establishing disk quotas, LIMITING space users can use&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FAT vs. NTFS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;FAT is the more simple file system of the two, but NTFS offers different enhancements and offers increased security. Choosing the right operating system depends on your needs.&lt;/p&gt;

&lt;p&gt;Fault Tolerance: NTFS automatically repairs files/folders in the case of power failures or errors. FAT32 maintains two different copies of the FAT in the case of damage.&lt;/p&gt;

&lt;p&gt;Security: FAT32 only offers shared permissions, while NTFS allows you to set specific permissions to local files/folders.&lt;/p&gt;

&lt;p&gt;Compression: FAT32 does not offer any compression option. NTFS does allow for individual compression of files and folders so you don’t slow down the system.&lt;/p&gt;

&lt;p&gt;Compatibility: NTFS is compatible with operating systems back to Windows XP. For Mac OS users, however, NTFS systems can only be read by Mac, while FAT32 drives can be both read and written to by the Mac OS.&lt;/p&gt;

&lt;p&gt;The biggest disadvantage of using the NTFS file system is compatibility:&lt;/p&gt;

&lt;p&gt;Many removable devices, such as Android smartphones don’t support NTFS&lt;/p&gt;

&lt;p&gt;While Mac OS X can read support for NTFS drives, but it can’t write to NTFS drives without third-party software&lt;/p&gt;

&lt;p&gt;Some media devices, including Smart TVs, media players, and printers, don’t support NTFS&lt;/p&gt;

&lt;p&gt;NTFS file systems are only compatible with Windows 2000 and later versions of Windows&lt;/p&gt;

&lt;p&gt;When it comes to removable devices, it’s safer to use FAT32 so they can be used with almost any device.&lt;/p&gt;

&lt;p&gt;There is no clear winner when it comes to FAT vs. NTFS. Choosing the right file system depends on your individual needs and uses.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hey Guys we just dropped our 1st video on YouTube at 10 Am (IST) on 16 January 2020 .Please hit that subscribe button and make sure you smash that like button .Hotstar+Disney is a very famous streaming and entertainment service in India with more than 27 millon paid viewers and 300 millon monthly active users . We would love to hear your response .&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=4pjpHUN28kk"&gt;https://www.youtube.com/watch?v=4pjpHUN28kk&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>programming</category>
      <category>productivity</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>Introducing check html links - no more bad links</title>
      <author>Thomas Allmer</author>
      <pubDate>Wed, 27 Jan 2021 11:59:33 +0000</pubDate>
      <link>https://dev.to/modern-web/introducing-check-html-links-no-more-bad-links-1jdg</link>
      <guid>https://dev.to/modern-web/introducing-check-html-links-no-more-bad-links-1jdg</guid>
      <description>&lt;p&gt;&lt;strong&gt;TL;DR : I created a standalone tool that can help you fix all the broken links in your websites/documentation. You can check it out &lt;a href="https://www.npmjs.com/package/check-html-links"&gt;on npm as check-html-links&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In my developer career, I have put live multiple websites and honestly often within a few days, there was always this one issue raised. "This link on xxx is broken". 🤦‍♂️&lt;/p&gt;

&lt;p&gt;Often these things happen as somewhere a page got moved or renamed and not every location got updated.&lt;br&gt;
It's really hard to catch especially if you have a dynamic page like with WordPress or an SPA. And for users, there is nothing worse than landing on your documentation only to find a 404 staring back at them.&lt;/p&gt;

&lt;p&gt;Luckily, with the rise of SSG (Static Site Generators), this problem becomes easier to tackle and can be solved in large part. The reason for that is that with all HTML rendered upfront as static files we can read all of them and check every link.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#evaluation-and-the-decision-for-a-new-tool" class="anchor"&gt;
  &lt;/a&gt;
  Evaluation and the decision for a new tool
&lt;/h2&gt;

&lt;p&gt;Of course, I am not the first one to come up with that idea and there are multiple tools available on the market already.&lt;br&gt;
However, when checking existing solutions I found out that most of them didn't satisfy me in at least on way 😅. Things I noticed: slow to execute, deprecated, large dependency tree, confusing output for the user, ...&lt;/p&gt;

&lt;p&gt;Reviewing these tools I decided to create my own, with the following requirements :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Blazing fast&lt;/li&gt;
&lt;li&gt;User-focused output&lt;/li&gt;
&lt;li&gt;Few dependencies, to keep it lean&lt;/li&gt;
&lt;li&gt;Preferably in the NodeJS ecosystem&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#focusing-on-useful-output" class="anchor"&gt;
  &lt;/a&gt;
  Focusing on Useful Output
&lt;/h2&gt;

&lt;p&gt;Most tools evaluated check files individually and report on their findings individually. That means if you have a broken link in your header or footer, you will get one line (or even multiple lines) of an error message(s) for EVERY page.&lt;/p&gt;

&lt;p&gt;I tested this on the &lt;a href="https://github.com/11ty/11ty-website"&gt;11ty-website&lt;/a&gt; and there are currently 516 broken links in 501 files. However, &lt;strong&gt;the source of those 516 broken links is just 13 missing pages/resources&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In my implementation, I decided to switch from an "Error in File Focused" method to a "Missing File Focused". Let's see this with examples&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#error-in-file-focused" class="anchor"&gt;
  &lt;/a&gt;
  Error in File Focused
&lt;/h3&gt;

&lt;p&gt;This is what a lot of current existing solutions implement. Here is part of the output that is being produced:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[...]
authors/ryzokuken/index.html
  target does not exist --- authors/ryzokuken/index.html --&amp;gt; /speedlify/
authors/alex_kaul/index.html
  target does not exist --- authors/alex_kaul/index.html --&amp;gt; /speedlify/
docs/config/index.html
  target does not exist --- docs/config/index.html --&amp;gt; /speedlify/
  hash does not exist --- docs/config/index.html --&amp;gt; /docs/copy/#disabling-passthrough-file-copy
authors/cramforce/index.html
  target does not exist --- authors/cramforce/index.html --&amp;gt; /speedlify/
authors/accudio/index.html
  target does not exist --- authors/accudio/index.html --&amp;gt; /speedlify/
[...]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We get ~2000 lines of errors for &lt;code&gt;/speedlify/&lt;/code&gt; as it's not found ~500 times. In the middle of those errors, we also see some other broken links.&lt;br&gt;
Because the reporting is focusing first on the files, and then on the actual error &lt;strong&gt;it is difficult to know where most errors originate from&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#missing-file-focused" class="anchor"&gt;
  &lt;/a&gt;
  Missing File Focused
&lt;/h3&gt;

&lt;p&gt;Let us turn that around and focus on missing references indeed. Here is the output for the same input website :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[...]
  1. missing reference target _site/speedlify/index.html
    from _site/404.html:1942:13 via href="/speedlify/"
    from _site/authors/_amorgunov/index.html:2031:13 via href="/speedlify/"
    from _site/authors/_coolcut/index.html:2031:13 via href="/speedlify/"
    ... 495 more references to this target

  2. missing id="disabling-passthrough-file-copy" in _site/docs/copy/index.html
    from _site/docs/config/index.html:2527:267 via href="/docs/copy/#disabling-passthrough-file-copy"

  3. missing reference target _site/authors/dkruythoff/github.com/dkruythoff/darius-codes
    from _site/authors/dkruythoff/index.html:2102:234 via href="github.com/dkruythoff/darius-codes"
[...]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We get one 5 line error for &lt;code&gt;/speedlify/&lt;/code&gt; and it tells us it's missing 495 times + 3 examples usages.&lt;br&gt;
Afterward, we find very clearly more missing references and where they occurred.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#a-clear-winner" class="anchor"&gt;
  &lt;/a&gt;
  A clear winner
&lt;/h3&gt;

&lt;p&gt;Comparing those two outputs makes it pretty clear to me that &lt;code&gt;Missing File Focused&lt;/code&gt; will make more sense if there is a chance that some links will be broken everywhere. My implementation focuses on missing links in its output. This is crucial because it allows developers to know where to focus their efforts first to get the biggest wins.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#focusing-on-speed" class="anchor"&gt;
  &lt;/a&gt;
  Focusing on Speed
&lt;/h2&gt;

&lt;p&gt;Speed is always nice to have but in this case, it's probably vital. I need this to be fast so that I can run it potentially on every save. Speed is also very important in case the tool runs in a CI for example. For projects with extensive documentation, we don't want to hog the CI only to check for documentation.&lt;/p&gt;

&lt;p&gt;Luckily HTML is an awesome language to analyze as it's declarative, which means you can read and analyze it at the same time. This may even mean that the HTML is already processed by the time the file is done reading.&lt;/p&gt;

&lt;p&gt;With this knowledge I was hopeful - but reality didn't deliver 😅. The only tool that could keep up with the speed I needed was implemented in &lt;a href="https://golang.org/"&gt;Go&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It seems that most tools use sophisticated parsers meant to create full syntax trees of your HTML.&lt;br&gt;
In reality for link checking all you need to know are the &lt;em&gt;id&lt;/em&gt; and the &lt;em&gt;href&lt;/em&gt; attributes.&lt;/p&gt;

&lt;p&gt;I have been using &lt;a href="https://github.com/justinwilaby/sax-wasm"&gt;sax-wasm&lt;/a&gt; in a few situations before and I knew it supported streaming. I knew that way it could be FAST 🤞!&lt;/p&gt;

&lt;p&gt;How fast are we talking about though?&lt;/p&gt;

&lt;p&gt;As a rule of thumb, I decided that the analysis should be finished within 1s for a small site (up to 200 pages).&lt;br&gt;
The main reason is already listed above: To not disturb during writing/development as it will run on every save.&lt;br&gt;
For medium sites (200 - 1000 pages), it's reasonable if it takes a little longer - let's aim for less than 5 seconds. This will probably be a breaking point where you execute it only on-demand and in the CI instead of executing it on every save.&lt;/p&gt;

&lt;p&gt;Results are gatherd on January 26, 2021:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Website&lt;/th&gt;
&lt;th&gt;Pages&lt;/th&gt;
&lt;th&gt;Duration&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;open-wc.org&lt;/td&gt;
&lt;td&gt;90&lt;/td&gt;
&lt;td&gt;~0.4s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11ty.dev&lt;/td&gt;
&lt;td&gt;501&lt;/td&gt;
&lt;td&gt;~2.5s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;web.dev&lt;/td&gt;
&lt;td&gt;830&lt;/td&gt;
&lt;td&gt;~3.7s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eslint.org&lt;/td&gt;
&lt;td&gt;3475&lt;/td&gt;
&lt;td&gt;~12.4s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#being-part-of-the-nodejs-ecosystem" class="anchor"&gt;
  &lt;/a&gt;
  Being part of the NodeJS ecosystem
&lt;/h2&gt;

&lt;p&gt;My daily workflow is hugely dominated by JavaScript, so it was only natural to want to stay in the same environment if I could reach my earlier requirements with it.&lt;br&gt;
On top of this, the end goal is to integrate it within a bigger WIP system called &lt;a href="https://github.com/modernweb-dev/rocket"&gt;Rocket&lt;/a&gt; which is node-based so therefore it will need to at least support NodeJS. Having it standalone (usable via &lt;code&gt;npx&lt;/code&gt;) also makes it more versatile and easier to maintain/test.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#focusing-on-a-small-dependency-tree" class="anchor"&gt;
  &lt;/a&gt;
  Focusing on a small Dependency Tree
&lt;/h2&gt;

&lt;p&gt;The JavaScript and NodeJs ecosystem is very active and constantly shifting. Lots of changes/improvements happen all the time. It's often hard to keep up. Therefore having a small dependency tree is something to always thrive for because it will reduce the maintenance burden down the line. And as an added benefit, it makes it smaller and easily embeddable as less stuff has to go down the wire. Lean is king 👑.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#solution" class="anchor"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;As already mentioned I went on and implement a link checker myself 😅. So far it fits all my requirements so I call it a success 🎉! You can find it &lt;a href="https://www.npmjs.com/package/check-html-links"&gt;on npm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I called it &lt;code&gt;check-html-links&lt;/code&gt; and its slogan is "no more broken links or assets".&lt;/p&gt;

&lt;p&gt;The features so far are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;extracts every attribute value of id, href, src, srset&lt;/li&gt;
&lt;li&gt;use a wasm parser (sax-wasm)&lt;/li&gt;
&lt;li&gt;streams the html for performance&lt;/li&gt;
&lt;li&gt;check if file or id within file exist&lt;/li&gt;
&lt;li&gt;focus on missing references/sources&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;It does check your final html output so you need to execute it after your Static Site Generator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx check-html-links _site
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage-github-action" class="anchor"&gt;
  &lt;/a&gt;
  Usage Github Action
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://twitter.com/jlengrand"&gt;Julien&lt;/a&gt; created a Github action available for the tool, so you can easily plug it in your existing CI. You can find it &lt;a href="https://github.com/marketplace/actions/check-html-links-action"&gt;on the GitHub Marketplace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is a complete example workflow that will check the result of the folder &lt;code&gt;_site&lt;/code&gt; in the root of your repository on each push:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;check_html_links_job&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;A job to test check-html-links-action&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;check-html-links-action step&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;check-links&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;modernweb-dev/check-html-links-action@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;doc-folder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;_site_'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#comparison" class="anchor"&gt;
  &lt;/a&gt;
  Comparison
&lt;/h2&gt;

&lt;p&gt;Checking the output of &lt;a href="https://github.com/11ty/11ty-website"&gt;11ty-website&lt;/a&gt; with 13 missing reference targets (used by 516 links) while checking 501 files. (on January 17, 2021)&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tool&lt;/th&gt;
&lt;th&gt;Lines printed&lt;/th&gt;
&lt;th&gt;Duration&lt;/th&gt;
&lt;th&gt;Lang&lt;/th&gt;
&lt;th&gt;Dependency Tree&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;check-html-links&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;~2.5s&lt;/td&gt;
&lt;td&gt;node&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;link-checker&lt;/td&gt;
&lt;td&gt;3000+&lt;/td&gt;
&lt;td&gt;~11s&lt;/td&gt;
&lt;td&gt;node&lt;/td&gt;
&lt;td&gt;106&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hyperlink&lt;/td&gt;
&lt;td&gt;68&lt;/td&gt;
&lt;td&gt;4m 20s&lt;/td&gt;
&lt;td&gt;node&lt;/td&gt;
&lt;td&gt;481&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;htmltest&lt;/td&gt;
&lt;td&gt;1000+&lt;/td&gt;
&lt;td&gt;~0.7s&lt;/td&gt;
&lt;td&gt;GO&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#future" class="anchor"&gt;
  &lt;/a&gt;
  Future
&lt;/h2&gt;

&lt;p&gt;The basic functionality is finished and it's reasonabley fast.&lt;/p&gt;

&lt;p&gt;Topic to work on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allow to ignore folders (potentially via a cli parameter)&lt;/li&gt;
&lt;li&gt;Support for &lt;code&gt;&amp;lt;base href="/"&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Big Sites Speed improvements (potentially running multiple parsers in parallel for 1000+ pages)&lt;/li&gt;
&lt;li&gt;Speed improvements by introducing a "permanent cache" for the parse result (if file did not change, parse result will not change - we still check all links)&lt;/li&gt;
&lt;li&gt;Memory consumption check (see if there is room for improvements)&lt;/li&gt;
&lt;li&gt;Improve node api&lt;/li&gt;
&lt;li&gt;Check external links&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#acknowledgements" class="anchor"&gt;
  &lt;/a&gt;
  Acknowledgements
&lt;/h2&gt;

&lt;p&gt;Thank you for following along on my journey on creating &lt;code&gt;check-html-links&lt;/code&gt;. You can find the code on &lt;a href="https://github.com/modernweb-dev/rocket/tree/main/packages/check-html-links"&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Follow us on &lt;a href="https://twitter.com/modern_web_dev"&gt;Twitter&lt;/a&gt;, or follow me on my personal &lt;a href="https://twitter.com/dakmor"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://twitter.com/jlengrand"&gt;Julien&lt;/a&gt; for feedback and helping turn my scribbles to a followable story.&lt;/p&gt;

&lt;p&gt;If you think my open source work is valuable then I would like you to check out my personal &lt;a href="https://github.com/sponsors/daKmoR"&gt;Github Sponsor Page&lt;/a&gt;. Or you can support our whole group via the &lt;a href="https://opencollective.com/modern-web"&gt;Modern Web Open Collective&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;&lt;span&gt;Photo by &lt;a href="https://unsplash.com/@mihaiteslariu0?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Teslariu Mihai&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
    </item>
  </channel>
</rss>
