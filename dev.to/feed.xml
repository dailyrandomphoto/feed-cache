<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Variables, Expressions, and Statements in Julia</title>
      <author>Ifihan Olusheye</author>
      <pubDate>Wed, 17 Nov 2021 13:22:55 +0000</pubDate>
      <link>https://dev.to/ifihan/variables-expressions-and-statements-in-julia-15jb</link>
      <guid>https://dev.to/ifihan/variables-expressions-and-statements-in-julia-15jb</guid>
      <description>&lt;p&gt;In this article, I'd be explaining the following concepts in the Julia programming language: Variables, Expressions, and Statements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S&lt;/strong&gt;: If you have no idea of what Julia is, you can read up &lt;a href="https://dev.to/ifihan/the-julia-programming-language-5b10"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's dive in...&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-are-variables"&gt;
  &lt;/a&gt;
  What are Variables?
&lt;/h4&gt;

&lt;p&gt;Variables can be seen as containers used to store data that the program can use over time and can be called at any point in the codebase. Unlike C and Java, variables in Julia need not to be written with a Datatype. It auto-assigns the data type automatically like Python.&lt;/p&gt;

&lt;p&gt;Using the Julia REPL,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;julia&amp;gt; message = "Hello World"
"Hello World"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One of the features of a powerful language is the ability to manipulate variables. In Julia, a variable can be overwritten (the content of a variable replaced with a new one). Using the previous example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;julia&amp;gt; message = "Hello World"
"Hello World"

julia&amp;gt; message = "I love Julia"
"I love Julia"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;see how the message was overwritten&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Variables can be given any name, as long as it's meaningful to the codebase. Some of the rules that apply in the naming convention in Python applies here. They include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A variable cannot start with a number
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;julia&amp;gt; 7letters = "some text"
ERROR: syntax: "7" is not a valid function argument name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;A variable can start with uppercase, but it's conventional to begin variables with lower cases.&lt;/li&gt;
&lt;li&gt;For variables with long names, you use the underscore character "_". Leaving a space would give an error
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;julia&amp;gt; your name = "Julia"
ERROR: syntax: extra token "name" after end of expression
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Keywords cannot be used as variable names in Julia. For example, struct is a keyword in Julia
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;julia&amp;gt; struct = "Exploration"
ERROR: syntax: unexpected "=" 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The keywords in Julia are:&lt;br&gt;
&lt;code&gt;abstract type&lt;/code&gt;    &lt;code&gt;baremodule&lt;/code&gt;   &lt;code&gt;begin&lt;/code&gt;      &lt;code&gt;break&lt;/code&gt;       &lt;code&gt;catch&lt;/code&gt;&lt;br&gt;
&lt;code&gt;const&lt;/code&gt;            &lt;code&gt;continue&lt;/code&gt;     &lt;code&gt;do&lt;/code&gt;         &lt;code&gt;else&lt;/code&gt;        &lt;code&gt;elseif&lt;/code&gt;&lt;br&gt;
&lt;code&gt;end&lt;/code&gt;              &lt;code&gt;export&lt;/code&gt;       &lt;code&gt;finally&lt;/code&gt;    &lt;code&gt;for&lt;/code&gt;         &lt;code&gt;function&lt;/code&gt;&lt;br&gt;
&lt;code&gt;global&lt;/code&gt;           &lt;code&gt;if&lt;/code&gt;           &lt;code&gt;import&lt;/code&gt;     &lt;code&gt;importall&lt;/code&gt;   &lt;code&gt;in&lt;/code&gt;&lt;br&gt;
&lt;code&gt;let&lt;/code&gt;              &lt;code&gt;local&lt;/code&gt;        &lt;code&gt;macro&lt;/code&gt;      &lt;code&gt;module&lt;/code&gt;      &lt;code&gt;mutable struct&lt;/code&gt;&lt;br&gt;
&lt;code&gt;primitive type&lt;/code&gt;   &lt;code&gt;quote&lt;/code&gt;        &lt;code&gt;return&lt;/code&gt;     &lt;code&gt;try&lt;/code&gt;         &lt;code&gt;using&lt;/code&gt;&lt;br&gt;
&lt;code&gt;struct&lt;/code&gt;           &lt;code&gt;where&lt;/code&gt;        &lt;code&gt;while&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You do not need to memorize them. Keywords are displayed in a different color in most development environments.&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-is-a-statement"&gt;
  &lt;/a&gt;
  What is a Statement?
&lt;/h4&gt;

&lt;p&gt;A statement is a piece of code that performs a specific task, such as creating a variable or displaying a value. The assignment of a value to a variable is written in a statement.&lt;br&gt;
An assignment statement creates a new variable and gives it a value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;julia&amp;gt; note = "random words"
"random words"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Displaying the value of a variable is also done with a statement. From the previous example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;julia&amp;gt; println(note)
random words
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#expressions"&gt;
  &lt;/a&gt;
  Expressions
&lt;/h4&gt;

&lt;p&gt;A combination of values, variables, and operators is called an expression. A variable, like a value, is regarded an expression by itself. Below is a legal representation of an expression&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;julia&amp;gt; 37
37
julia&amp;gt; n = 10
10
julia&amp;gt; n + 25
35
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you type in an expression in the REPL, it gets evaluated immediately. For example, &lt;code&gt;n&lt;/code&gt; has the value 10  and &lt;code&gt;n + 25&lt;/code&gt; has the value 35.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#global-vs-local-variables"&gt;
  &lt;/a&gt;
  Global vs Local Variables
&lt;/h4&gt;

&lt;p&gt;In Julia, variables can be assigned globally or locally. A global variable is a variable that can be used throughout the program while a local variable is a variable that is declared in a function and given a local scope.&lt;br&gt;
Julia uses the &lt;code&gt;global&lt;/code&gt; inbuilt function to declare global variables. For example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;global b = 4

function addNumber(a)
  return a + b
end

println(addNumber(3))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result of this is &lt;code&gt;7&lt;/code&gt;. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion,
&lt;/h5&gt;

&lt;p&gt;Like most other programming languages, Julia makes provision for creating variables, statements, and expressions, which make writing readable and portable code easier. Getting the hang of how it is used is essential for all developers.&lt;/p&gt;

</description>
      <category>julia</category>
    </item>
    <item>
      <title>Top 10 Mobile Apps For Video Calling</title>
      <author>Iryna Hvozdetska</author>
      <pubDate>Wed, 17 Nov 2021 13:05:51 +0000</pubDate>
      <link>https://dev.to/iryna_hvozdetska/top-10-mobile-apps-for-video-calling-278p</link>
      <guid>https://dev.to/iryna_hvozdetska/top-10-mobile-apps-for-video-calling-278p</guid>
      <description>&lt;p&gt;Since the world made its unexpected shift to widespread remote work a couple of years ago, the value of an efficient video calling solution has increased exponentially. Getting the right mobile app for video calling in your arsenal that you can confidently use for virtual meetings is increasingly important for more people and businesses than ever before.&lt;/p&gt;

&lt;p&gt;That being said, with so many options already on the market, it can be hard to figure out which mobile app is the ideal choice for your video calling needs. In this article, we’ll go over the best mobile apps for video calling so you can find the perfect one for you.&lt;/p&gt;

&lt;p&gt;Let’s get right into it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-best-apps-for-video-calling"&gt;
  &lt;/a&gt;
  What Are The Best Apps for Video Calling?
&lt;/h2&gt;

&lt;p&gt;Video calling apps have in the last year become a crucial tool for businesses of all sizes and natures as well as for employees; remote and office-based. Knowing and understanding which mobile app is the best for video calling and &lt;a href="https://www.chanty.com/blog/video-conferencing-guide/"&gt;video conferencing&lt;/a&gt; is therefore very important; but which is best?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ringcentral"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.ringcentral.com/"&gt;RingCentral&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;RingCentral has been one of the most popular video conferencing apps and video conference service providers in the VoIP industry for over two decades now and for good reason! They provide a very well-rounded experience that is versatile enough to cover the needs of almost any customer.&lt;/p&gt;

&lt;p&gt;Organizing meetings is easier than ever since RingCentral lets you use one-click scheduling with popular calendar solutions like iCal, Google Calendar, and Microsoft Outlook. When you combine this with the native task management capabilities of RingCentral, you’re in for a treat.&lt;/p&gt;

&lt;p&gt;There are also a myriad of in-meeting collaboration features like a whiteboard, commenting highlighting, and other forms of real-time annotation that really makes it feel like you’re in the same room with the rest of the participants.&lt;/p&gt;

&lt;p&gt;In terms of service and pricing plans, RingCentral has four options to choose from. In our opinion, choosing the Standard tier and billing annually is the best way to get a lot of value at the right price. Of course, those who want unlimited cloud storage can go for the $70/month Ultimate plan.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chanty"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.chanty.com/"&gt;Chanty&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Despite being newer to the industry than most of its competitors, Chanty has quickly become a popular choice for those who need a streamlined communication experience. The Chanty app lets you chat, call and conference with all your team members no matter where you are.&lt;/p&gt;

&lt;p&gt;You can also integrate third-party tools like Asana, Jira, Trello, GitHub, Zapier, Google Drive, and more. The extensive integration support at Chanty makes it easy to use other tools in your stack in between video calls and all alongside Chanty, working hand in glove and seamlessly together.&lt;/p&gt;

&lt;p&gt;It’s worth noting that video conferencing is only available on the paid plan but the $4/month price is very affordable and you’ll get a ton of perks like 20 GB storage per member. You’ll also get a dedicated support line and the option to reduce your plan price by &lt;br&gt;
25% if you bill annually.&lt;/p&gt;

&lt;p&gt;Beyond its video calling features, you can also assign tasks, insert code snippets, and access all pertinent content through the Teambook function. Overall, Chanty is one of the most versatile and cost-effective solutions not only for video calling but communication as a whole.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zoom"&gt;
  &lt;/a&gt;
  &lt;a href="https://zoom.us/"&gt;Zoom&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Zoom made headlines at the start of the pandemic since it was the video calling solution that most teachers, students, and remote workers were choosing. This led to a 425% surge in their stock price over the course of 2020.&lt;/p&gt;

&lt;p&gt;Some of Zoom’s newer features include a virtual background, live transcription requests, screen sharing in breakout rooms, and a new immersive view that recreates the feel of in-person classes or conferences.&lt;/p&gt;

&lt;p&gt;The developers have also mastered the art of keyboard shortcuts making it possible to control every aspect of the meeting without ever moving your mouse. Every shortcut is customizable which means you can rebind commands to a specific key based on your preferences.&lt;/p&gt;

&lt;p&gt;By default, you can have up to 100 participants in your Zoom meetings. Power users can get the large meetings add-on that increases capacity to 1,000 participants for an extra $50/month. This may be overkill for most users but it’s always nice to have the option to scale up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#messenger"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.messenger.com/"&gt;Messenger&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Considering Messenger currently has 1.3 billion users, the odds of other participants already having the video calling app that Messenger is and being familiar with how it works is far higher compared to specialty products like RingCentral or Brosix.&lt;/p&gt;

&lt;p&gt;The new Messenger Rooms feature lets you host conferences with up to 50 people at once. These free conferencing rooms also don’t have any time limit which stands in stark contrast to solutions like Zoom. Finally, you don’t even need a Facebook account to join the meeting.&lt;/p&gt;

&lt;p&gt;Our only critique of Messenger is the fact that you can’t add invites to third-party calendar apps which can make scheduling meetings a bit trickier. That said, adjusting a few settings can get your Facebook events to sync with your calendar app of choice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#skype"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.skype.com/en/"&gt;Skype&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Skype was one of the first video calling apps to see global adoption, it’s quite impressive that they’ve managed to continually improve the product and keep up with newer competitors who have sought to disrupt the market.&lt;/p&gt;

&lt;p&gt;The value it provides to free users is also undeniable since you can host video conferences with up to 100 participants without spending a single cent. This makes it perfect for large companies who need to scale up but are worried a paid solution will break the bank.&lt;/p&gt;

&lt;p&gt;In terms of navigation, Skype’s latest interface is clean and intuitive. It’s gone through many iterations and years of tweaking so it’s not too surprising that the current version is quite good. If you want a lighter version, you can check out the Skype Lite app.&lt;/p&gt;

&lt;p&gt;There are also a ton of Skype bots that can help optimize your workflow for efficiency and free your team members from repetitive tasks. There may be more exciting choices out there but Skype has undoubtedly stood the test of time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#viber"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.viber.com/en/"&gt;Viber&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Viber has often been viewed as the most comprehensive mobile solution when it comes to messaging but it also gives other competitors a run for their money in the video calling app department.&lt;/p&gt;

&lt;p&gt;You’ll be able to send texts, make calls, and launch group video calls with up to 20 people without paying a dime. Despite being a free mobile app, there are very few ads and they’re timed in a non-intrusive manner such as after a call has already ended.&lt;/p&gt;

&lt;p&gt;The end-to-end encryption also ensures that your conversations will stay private which makes Viber one of the more reliable mobile solutions when it comes to security. Viber may not have as many features as the other solutions on this list but it provides an amazing free experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#slack"&gt;
  &lt;/a&gt;
  &lt;a href="http://slack.com"&gt;Slack&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Slack has become the gold standard when it comes to team communication apps since it was one of the first platforms to successfully provide a one-stop shop for online teams. Its selection of over 2,400 integrations empowers you to do basically anything on the platform.&lt;/p&gt;

&lt;p&gt;Of course, the well-known drawback with Slack is the fact that you won’t be able to view your chat history past 10,000 messages while on the free plan, nor will you be able to use more than 10 integrations.&lt;/p&gt;

&lt;p&gt;However, the paid plans are still affordably priced and you do get a lot of bang for your buck when upgrading. The most notable premium perk is the 1 TB storage which eliminates the need for a subscription to any third-party storage solution — but this is overkill for most.&lt;/p&gt;

&lt;p&gt;You’ll also be able to use as many integrations as you want and record your calls using Slack Clips — making it a lot easier to review meetings at a later date. Speaking of meetings, you can also add automated reminders to make sure you never forget about an important call. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#microsoft-teams"&gt;
  &lt;/a&gt;
  &lt;a href="http://www.microsoft.com"&gt;Microsoft Teams&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Next up we have Microsoft Teams which feels like a combination of Zoom’s video calling and Slack’s text chat capabilities. The free plan provides tremendous value with 10 GB of cloud storage for your team, group conferencing, and unlimited chat history.&lt;/p&gt;

&lt;p&gt;What’s noticeably missing from the free plan is two-factor authentication, so if security is one of your main priorities then an upgrade would definitely be warranted. In terms of UI, the sidebar on the desktop version provides quick access to each part of the app.&lt;/p&gt;

&lt;p&gt;Furthermore, if you’re already using Office 365 in your stack then it makes a lot of sense to choose Microsoft Teams for your video calling needs since it seamlessly integrates with other Microsoft tools, i.e. Word, Excel, OneNote, PowerPoint, and more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#brosix"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.brosix.com/"&gt;Brosix&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Brosix may price its video calling plans lower than the majority of its competitors but the real appeal for users is security rather than affordability. The company uses AES 256-bit encryption, and every channel on the platform has a separate encryption key to ensure maximum security.&lt;/p&gt;

&lt;p&gt;Sharing sensitive files isn’t an issue either as Brosix uses secure P2P file sharing. This comes with the downside that sharing files on the platform can be at best an inconvenience and at worst an arduous process, but such is the price we pay for security.&lt;/p&gt;

&lt;p&gt;The main issue that most users have with Brosix is the outdated interface that can make it tricky to navigate while also being painful on the eyes. If you’re a function over form type of person who values security more than a clean UI then Brosix could still be a great pick for you.&lt;/p&gt;

&lt;p&gt;Our gripe with Brosix is the fact that the free plan is a glorified trial version. Video calling, screen sharing, and file transfer — all core features mind you — are locked to the paid plan, so you’ll need to upgrade to a $5/month plan if you want to use even the most basic functions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#discord"&gt;
  &lt;/a&gt;
  &lt;a href="http://discord.com"&gt;Discord&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Although Discord has historically been known as a platform built for gamers, it’s surprisingly good at video calling too. To start, its push-to-talk feature is just as useful in video conferences as it is for gaming group calls.&lt;/p&gt;

&lt;p&gt;You can have up to 25 participants in your video calls but, considering the fact that Discord is a free mobile app, it’s hard to complain about the low capacity. Many of Discord’s integration focus on gaming sites such as Twitch or Xbox Live but you can also use Gmail, Trello, and Sheets.&lt;/p&gt;

&lt;p&gt;The two main benefits that Discord has over its video calling competitors are the fact that most features are available for free and chat history isn’t capped at 10,000 messages. There’s also a browser-based version of Discord so participants don’t need a native installation to join.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-choose-a-mobile-app-for-video-calling"&gt;
  &lt;/a&gt;
  How to choose a mobile app for video calling
&lt;/h2&gt;

&lt;p&gt;It’s one thing knowing who and what is out there by way of video calling apps. However, knowing and understanding which is the best piece of video calling software or the best video calling app is an entirely different challenge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;p&gt;First and foremost, the decision should come down to which features you need. The keyword here is need; you shouldn’t blow your budget on bells and whistles that you won’t even use most of the time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h2&gt;

&lt;p&gt;Next, factor in the pricing. While it’s true that you should never cheap out when choosing between different software solutions, the app should still be at a price that fits in with your budget so you can continue to use it long-term.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ease-of-use"&gt;
  &lt;/a&gt;
  Ease of Use
&lt;/h2&gt;

&lt;p&gt;Choosing products with a steep learning curve just means it will take longer before you can fully utilize the solution you’re paying for. This being the case, you should be aiming for apps with a good user experience rather than one that throws features at you without guidance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;Choosing between mobile apps doesn’t have to be such a daunting task. It all comes down to factoring in your needs and seeing which solution has the right features for the job. Furthermore, you can try a few out to see for yourself which app is the best fit.&lt;/p&gt;

&lt;p&gt;In the end, it’s hard to go wrong with any of the mobile apps listed in this article since they’re all very solid platforms that provide a plethora of useful features to their users. That’s all for now, stay safe, and happy conferencing!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Author bio:&lt;/strong&gt; &lt;br&gt;
Mia Naumoska is a Chief Marketing Officer at &lt;a href="https://www.chanty.com/"&gt;Chanty&lt;/a&gt; - easy-to-use team collaboration app with a mission to help companies boost their team’s productivity. Having over a decade of experience in the marketing field, Mia is responsible for Chanty’s overall marketing strategy, managing an amazing team of marketing experts. Feel free to connect with Mia on &lt;a href="https://www.linkedin.com/in/mianaumoska/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>mobile</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Day 40 of 100 Days of Code &amp; Scrum: Calling in Sick for Today</title>
      <author>Rammina</author>
      <pubDate>Wed, 17 Nov 2021 13:04:43 +0000</pubDate>
      <link>https://dev.to/rammina/day-40-of-100-days-of-code-scrum-calling-in-sick-for-today-227c</link>
      <guid>https://dev.to/rammina/day-40-of-100-days-of-code-scrum-calling-in-sick-for-today-227c</guid>
      <description>&lt;p&gt;Greetings, everyone!&lt;/p&gt;

&lt;p&gt;Today, I got sick so I wasn't really that productive. I didn't get much sleep because I woke up in the middle of the night with dizziness. Oh well, I still managed to get some work done for my website. I only coded the minimum required, which was an hour.&lt;/p&gt;

&lt;p&gt;Anyway, let's move on to my daily report!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I worked on my portfolio and services sections, and I dealt with Next.js &lt;code&gt;&amp;lt;Image /&amp;gt;&lt;/code&gt; shenanigans.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Here are the things I learned and worked on today:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nextjs"&gt;
  &lt;/a&gt;
  Next.js
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;worked on the styling of my portfolio section for the homepage.&lt;/li&gt;
&lt;li&gt;preliminary skeleton is there, so I will most likely move on to the Contact form's frontend and styling.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I did some practice flashcards for Scrum.&lt;/li&gt;
&lt;li&gt;reviewed some of the things I've learned before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not much done this time, I'll try better tomorrow.&lt;/p&gt;

&lt;p&gt;Thank you for reading, and I hope everyone is doing well!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app?utm_source=next-site&amp;amp;utm_medium=nav-cta&amp;amp;utm_campaign=next-website"&gt;Official Next.js tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scrum.org/pathway/scrum-master"&gt;Scrum Master learning pathway | Scrum.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cover-image"&gt;
  &lt;/a&gt;
  Cover Image
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://unsplash.com/photos/RGkoimdagKs"&gt;David Algás Oroquieta on Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h3&gt;

&lt;p&gt;Feel free to reach out to me in other media!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>The Beginner-friendly way to learn from FreeCodeCamp on YouTube.</title>
      <author>Piyush Malhotra</author>
      <pubDate>Wed, 17 Nov 2021 12:44:22 +0000</pubDate>
      <link>https://dev.to/piyushmalhotra97/the-beginner-friendly-way-to-learn-from-freecodecamp-on-youtube-37g7</link>
      <guid>https://dev.to/piyushmalhotra97/the-beginner-friendly-way-to-learn-from-freecodecamp-on-youtube-37g7</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt;&lt;/strong&gt; is one of the best places online for anyone who wants to learn programming and computer science concepts from scratch. You don’t need to spend  a dime and they give you over &lt;strong&gt;3000&lt;/strong&gt; hours of tutorials,  exercises, and projects which are surely going to teach you enough to land an entry-level developer job. But how exactly one should learn from FCC on Youtube?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The thing about freecodecamp is - On YouTube, the videos won’t be structured step by step as compared to some other platform, let's say &lt;strong&gt;Udemy&lt;/strong&gt; which follows more of a “Bootcamp-y” method. This might prove overwhelming to some people who want to start learning as it did to me. Now, don’t get me wrong, one can learn a lot by following FCC’s youtube videos, they have a ton of content that is not on their website as well. But for beginners, an unguided approach might be a little daunting.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article acts as a guide for beginners as to where should people start learning from FCC’s youtube channel and gives you some tips to reduce clutter and focus only on the things that you require. But keep in mind that in the future you will require lots of googling and researching so do not limit your learning to just one resource. As of now, let’s dive into it…&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-sort-by-most-popular"&gt;
  &lt;/a&gt;
  1. Sort by “Most Popular”
&lt;/h2&gt;

&lt;p&gt;No, really. Just sort the videos by popularity. The reason for this is that so many people have watched and liked that video so there must be something good in it, right? Precisely. It’s going to declutter the barrage of information in front of you so that you can focus only on what’s important.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sd6031m7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b4fsgfz97tqjhpbw8v3g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sd6031m7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b4fsgfz97tqjhpbw8v3g.png" alt="Sorted by Popularity" width="880" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-choose-a-programming-language-beginner-videos"&gt;
  &lt;/a&gt;
  2. Choose a Programming Language (Beginner Videos)
&lt;/h2&gt;

&lt;p&gt;No doubt in this one, you have to get your feet wet and for that, you need at least one language in your “backpack”. Clearly, with 28 million views, Python is the most popular language (also worldwide) which is easy to learn and beginner-friendly but don’t feel forced if you don’t want to. Do some research, read up some stuff, and choose whatever you think you feel comfortable in. Out of the videos above, you should go first for the beginner videos in Python, Javascript, Java, C, or C++ which are usually considered the “Big 5” of programming languages.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x0N-zJJZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkelx1g37zze73td1pf0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x0N-zJJZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkelx1g37zze73td1pf0.png" alt="Popular languages" width="860" height="472"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-establishing-the-fundamentals"&gt;
  &lt;/a&gt;
  3. Establishing the fundamentals
&lt;/h2&gt;

&lt;p&gt;This is the critical point where everyone usually makes mistakes just like I did. You just watched a 4-hour video on a language and now you feel like you can move on to something else, you’re a geek now, right? Wrong! You cannot learn swimming just by watching someone execute a butterfly stroke ever so graciously. After finishing whatever language you just learned, it is time to apply that knowledge by building something. The best way to do this is to watch a “Build Projects” video from the channel and either code along or recreate it after, either way, you must polish the concepts that you have learned in step 2 (We become better by staying consistent).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--futQBNnv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yygnoa2xbz4l743c0xb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--futQBNnv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yygnoa2xbz4l743c0xb.png" alt="Watch, Learn, Practice &amp;amp; Build !!" width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Build anything, copy the project's lines while understanding the concept, go back to the video if you’re stuck, do some creative “googling” and keep on making a bunch of stuff until you are confident you can move on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-second-language"&gt;
  &lt;/a&gt;
  4. Second Language
&lt;/h2&gt;

&lt;p&gt;Now it's time to move on to another language and try on those projects that made using this new language. It will teach you how to work with multiple languages and also the basic differences between various syntax and functionalities. More importantly, it will make you more adaptable because, in a professional environment, you are gonna have to work with multiple technologies at one point or another. The main objective of this step is to teach how to understand the syntax of various languages and read different kinds of code properly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-other-essential-skills"&gt;
  &lt;/a&gt;
  5. Other Essential Skills
&lt;/h2&gt;

&lt;p&gt;You probably have enough practice and mini-projects under your belt now that you can start looking at some intermediate as well as advanced skills. It’s time to do more research now and expand your backpack, you could learn about &lt;strong&gt;computer networking, operating systems, database management (SQL), scripting, Linux, version control, data structures, and algorithms,&lt;/strong&gt; and many other tools that help in the development. A simple google search will show you the essential skills required from a software developer apart from programming. Keep in mind that you should be always practicing whatever you are learning currently and, it WILL help you in one way or another as a developer. All these 5 steps should take you about 3–6 months depending on your time, availability, and choice of topics. Study hard and succeed!!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P6SkxF58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcqocsfw80v1xhswaoqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P6SkxF58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcqocsfw80v1xhswaoqa.png" alt="Keep Learning!" width="880" height="586"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-the-world-is-your-oyster-keep-learning"&gt;
  &lt;/a&gt;
  6. The World is your Oyster — Keep Learning
&lt;/h2&gt;

&lt;p&gt;It is time to choose a specialization in which you want to work professionally. Want to create games for a living? Want to design jaw-droppingly beautiful websites? Want to train computers to predict data? The options are in dozens and some of the growing industries include &lt;strong&gt;Web Development, Cybersecurity, DevOps, Full Stack Dev, Game Development, Data Science, Machine Learning, UI/UX, and many more&lt;/strong&gt;. If you are thinking that you need to learn “everything” before having a job, I’m afraid you are wrong. There are so many technologies and tools that are popping up every day it's practically impossible to keep up! You could study for 100 years and still not feel that you know enough (Avoid the Imposter Syndrome).&lt;/p&gt;

&lt;p&gt;Time to do some creative googling again. Do some research, join communities and subreddits about programming, ask questions about industries, start focusing on other resources for learning. Here is a simple roadmap sketch of the whole learning plan.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u0Mq0E9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjarlaorzkjondc873pg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u0Mq0E9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjarlaorzkjondc873pg.png" alt="Learning Path" width="880" height="515"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, there you have it, a simple guided plan for those who want to start learning from FreeCodeCamp’s Youtube Channel. What’s the next step? You could probably start tackling some junior developer roles while keeping on improving. Note that people can follow it along with other resources as well, this article is just for those who do not know where to start and prefer using FreeCodeCamp videos.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The resources are endless and my aim to write this article was to help declutter the learning path for the absolute beginners. I’ll put up a bunch of more stuff and resources to follow in the coming future. Thanks for reading folks!! If I missed some important steps then feel free to let me know and I will surely make the changes in the article.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>beginners</category>
      <category>freecodecamp</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>React.js - Virtual DOM </title>
      <author>The Nerdy Dev</author>
      <pubDate>Wed, 17 Nov 2021 12:39:15 +0000</pubDate>
      <link>https://dev.to/thenerdydev/reactjs-virtual-dom-3m68</link>
      <guid>https://dev.to/thenerdydev/reactjs-virtual-dom-3m68</guid>
      <description>&lt;p&gt;Hey guys 👋🏻,&lt;br&gt;
In this post, let us talk about Virtual DOM in React.js.&lt;/p&gt;

&lt;p&gt;For this post we will understand Virtual DOM&lt;br&gt;
✔ What is Virtual DOM ?&lt;br&gt;
✔ Why we need Virtual DOM ?&lt;br&gt;
✔ Why Virtual DOM is faster and more efficient than real DOM ?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r_GJOTfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxogniwdxp9s31063jvq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r_GJOTfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxogniwdxp9s31063jvq.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-virtual-dom-"&gt;
  &lt;/a&gt;
  Why Virtual DOM ?
&lt;/h2&gt;

&lt;p&gt;The DOM as we know represents the UI of your application. Every time there is a change in the &lt;code&gt;state&lt;/code&gt; of your application UI, the DOM gets updated to represent that change. But the problem is that frequently manipulating the DOM affects performance, making it &lt;strong&gt;DEAD&lt;/strong&gt; slow ! &lt;/p&gt;

&lt;p&gt;When changes are made to some element, the updated element and it's children have to be &lt;em&gt;re-rendered&lt;/em&gt; to update the application UI. The re-rendering of the UI is what makes it slow. &lt;/p&gt;

&lt;p&gt;✔ &lt;em&gt;More the UI components you have, more expensive will be the patches to the DOM as they would need to be re-rendered for every DOM update&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;👉🏻 &lt;strong&gt;Hence the need for Virtual DOM in React.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-coming-to-question-what-the-heck-is-virtual-dom-"&gt;
  &lt;/a&gt;
  Now coming to question, what the heck is Virtual DOM 🤔?
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Virtual DOM&lt;/strong&gt; is only a &lt;em&gt;virtual representation&lt;/em&gt; of the DOM. Every time the state of our application changes, the virtual DOM gets updated instead of the real DOM. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtual-dom-is-faster-and-more-efficient-"&gt;
  &lt;/a&gt;
  Virtual DOM is faster and more efficient ..
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QTSCuA7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9yoe10he2fr738onc143.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QTSCuA7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9yoe10he2fr738onc143.png" alt="Image description" width="480" height="258"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When new elements are added to the UI, a virtual DOM is created which is a &lt;strong&gt;tree like representation&lt;/strong&gt;. Each element is a node on this tree. If the &lt;code&gt;state&lt;/code&gt; of any of any of these elements changes, a new virtual DOM tree is created. This tree is then compared or &lt;strong&gt;"diffed"&lt;/strong&gt; with the previous &lt;strong&gt;virtual DOM tree&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once this is done, the virtual DOM calculates the &lt;strong&gt;best&lt;/strong&gt; possible method to make these changes to the real DOM. This ensures that there are minimal operations on the real DOM. Hence, reducing the performance cost of updating the real DOM. This updated tree is then batch updated to the real DOM. &lt;/p&gt;

&lt;p&gt;So this is it for this article. Thanks for reading.&lt;br&gt;
&lt;strong&gt;Don't forget to leave a like if you loved the article. Also share it with your friends and colleagues.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" alt="Alt Text" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Talking technique: Recognizing context for cleaner design</title>
      <author>Kirk Shillingford</author>
      <pubDate>Wed, 17 Nov 2021 12:33:17 +0000</pubDate>
      <link>https://dev.to/kirkcodes/talking-technique-recognizing-context-for-cleaner-design-32o1</link>
      <guid>https://dev.to/kirkcodes/talking-technique-recognizing-context-for-cleaner-design-32o1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#a-short-introduction"&gt;
  &lt;/a&gt;
  A Short Introduction
&lt;/h2&gt;

&lt;p&gt;This is a short post covering a relatively useful pattern for writing functions that I have found very applicable to anyone writing modern software. The pattern itself isn't particularly arcane, and many developers find themselves adopting this style with time.&lt;/p&gt;

&lt;p&gt;However, I've found that sometimes, speaking about something explicitly can accelerate learning and understanding faster than trying to intuit things over time. I remember being fairly excited once I noticed the pattern and grateful that once I brought it up, someone more senior than myself took the time to break it down.&lt;/p&gt;

&lt;p&gt;So let's see if I can pass it on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-whats-the-pattern"&gt;
  &lt;/a&gt;
  So what's the pattern
&lt;/h2&gt;

&lt;p&gt;Sometimes, I feel like the best way to approach things is to lay an elaborate groundwork of pieces and slowly assemble the puzzle together with the reader. But this time, I think it's best to start with the final statement, so let's just start with defining the pattern itself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;"User-defined functions should try not to consume "container" data structures.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Those data structures should be manipulated at a higher level by built-in features of the language itself."&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If the above statement doesn't immediately click, that's okay! That's what this article is for. Since we'll be looking at examples in Javascript, I also have a more specific version of the statement for js development, which goes:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;"User-defined functions should try not to consume Arrays, Promises, and Nullables. Those should be manipulated by the built-in methods of their respective libraries.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User-defined functions should try to concern themselves with the values inside the container data structures instead."&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Still unclear? That's fine. Let's examine this more in-depth with some examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-one-manipulating-the-elements-in-an-array"&gt;
  &lt;/a&gt;
  Example one: Manipulating the elements in an array.
&lt;/h2&gt;

&lt;p&gt;Let's take a look at the following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;radii&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sphericalVolumes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radii&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;volumes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="nx"&gt;radii&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;volume&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="nx"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;volume&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;volumes&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sphericalVolumes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radii&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;// [4.1887902047863905, 268.082573106329, 1436.7550402417319, 4188.790204786391, 9202.7720799157]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've created this function, &lt;code&gt;sphericalVolume()&lt;/code&gt;, that accepts a list of "radii" (radiuses? I don't honestly know) and calculates the Volume of the corresponding sphere. This function is &lt;em&gt;fine&lt;/em&gt;, but there are a few things we could critique here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By having the function consume an array, and by using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"&gt;forEach()&lt;/a&gt;, we've bound it to always consuming an array-like structure. If we ever decide to use a different container for our radiuses (like a list or a set), this will break.&lt;/li&gt;
&lt;li&gt;Consuming a list also makes our tests more complicated. In addition to checking the &lt;em&gt;actual&lt;/em&gt; calculation of the spheres, we now have to also ensure this maintains the right behaviour when the list is empty or contains non-numerical values. Neither of which has anything to do with the function's true purpose; &lt;strong&gt;calculating a volume from a radius&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Another added complexity of the tests is that the value returned is now an array that must be unpacked to retrieve the value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's compare it to this refactored version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;radii&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sphericalVolume&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radii&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sphericalVolume&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;// [4.1887902047863905, 268.082573106329, 1436.7550402417319, 4188.790204786391, 9202.7720799157]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we leverage the fact that arrays &lt;em&gt;already&lt;/em&gt; have the tools to transform values in that container. We can do away with most of the trimming around that original function with the built-in &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"&gt;map()&lt;/a&gt; method, and most importantly, &lt;em&gt;our custom function accepts and returns a single value now.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Testing this function is way easier than before because it always gets a number and returns a number. In Javascript, we can't guarantee it will be &lt;em&gt;passed in&lt;/em&gt; a number (in Typescript, we can), but if it does get passed in something else, that's not its job to guarantee.&lt;/p&gt;

&lt;p&gt;Although this article isn't explicitly about &lt;a href="https://medium.com/@vcarl/overly-defensive-programming-e7a1b3d234c2"&gt;overly defensive coding&lt;/a&gt;, this pattern does help you avoid it. As a rule of thumb,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;functions should not both &lt;em&gt;validate&lt;/em&gt; an incoming input &lt;em&gt;and&lt;/em&gt; perform an operation.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;It is the &lt;em&gt;caller's&lt;/em&gt; job to ensure the values it passes to the function are correct.&lt;/p&gt;

&lt;p&gt;Let's see that more clearly in another example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-two-manipulating-a-value-that-may-be-null-or-undefined"&gt;
  &lt;/a&gt;
  Example Two: Manipulating a value that may be null or undefined
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;samplePerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Justin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Belieber&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;samplePerson&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;makeGreeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello Valued Customer,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;makeGreeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;makeGreeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;// "Hello Dr Justin Belieber,"&lt;/span&gt;
&lt;span class="c1"&gt;// "Hello Valued Customer," &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So here we have a mock of doing some kind of data retrieval from an array. This array is supposed to contain objects with information about people's names and titles, identifiable by a unique id. We use the &lt;code&gt;find()&lt;/code&gt; method to get the objects, but &lt;code&gt;find()&lt;/code&gt; will return &lt;code&gt;undefined&lt;/code&gt; if it fails to find a matching element of the array. Our &lt;code&gt;makeGreeting()&lt;/code&gt; function receives this value, checks if it isn't undefined, and returns either a custom, or generic message accordingly.&lt;/p&gt;

&lt;p&gt;You can probably already see the problem here, but let's look at a potential alternative.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;samplePerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Justin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Belieber&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;samplePerson&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;makeGreeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,`&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;possible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;possible&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;makeGreeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;possible&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello Valued Customer,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// "Hello Dr Justin Belieber,"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here again, we've done what we did in the first example. We've moved the validation &lt;em&gt;out&lt;/em&gt; of the function and now ensured that it only ever has to deal with real concrete values.&lt;/p&gt;

&lt;p&gt;Thanks to things like the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator"&gt;ternary&lt;/a&gt; and the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator"&gt;nullish coalescing&lt;/a&gt; operator, we can handle logic concerning whether a value exists using native language features without concerning the custom function.&lt;/p&gt;

&lt;p&gt;This gives us similar testing, readability, and refactoring advantages as we did before.&lt;/p&gt;

&lt;p&gt;Now you might have noticed, earlier in the article, I referred to these data structures as "container" structures. But container may not be the best term to describe something like a value that may be null. Another way we can describe these are values &lt;em&gt;in context:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the values in the first example have the context of being held inside an array&lt;/li&gt;
&lt;li&gt;the values in the second example have the context of &lt;strong&gt;maybe not existing&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Phrased like that, it might seem a little more obvious why it's so much easier to write and manipulate functions that work with values that &lt;em&gt;exist&lt;/em&gt; and are usable, rather than ones that we aren't sure about.&lt;/p&gt;

&lt;p&gt;To wrap up, let's look at just one more example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-three-handling-promises"&gt;
  &lt;/a&gt;
  Example Three: Handling Promises
&lt;/h2&gt;

&lt;p&gt;This last example will be the most lengthy, but I promise it's just a continuation of the same patterns we've seen so far. It just requires a bit more preamble to make sense.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;processResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sprites&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sprite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sprites&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;front_default&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;types_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;sprite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sprite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;types_&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addChildren&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getData1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pokeDiv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pokedex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;899&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://pokeapi.co/api/v2/pokemon/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;processResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sprite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;types_&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nameDiv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spriteDiv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;typeDivs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;types_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nx"&gt;spriteDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sprite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;addChildren&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pokeDiv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nameDiv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;spriteDiv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;typeDivs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what's going on here?&lt;/p&gt;

&lt;p&gt;This is a snippet of part of the logic for my Pokedex New Tab Chrome Extension project (really rolls off the tongue right).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"&gt;fetch&lt;/a&gt; to request some data from the &lt;a href="https://pokeapi.co/"&gt;pokemon api&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We make a function, &lt;code&gt;processResponse()&lt;/code&gt; that accepts the results of that fetch, checks whether it was successful, and then extracts the relevant data, and then returns that transformed data, or null&lt;/li&gt;
&lt;li&gt;Back in the calling function, we update our html with the relevant poke-info if data returned has a meaningful value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once again, with &lt;code&gt;processResponse()&lt;/code&gt; we've got a function that's attempting to both make sense of some context, &lt;em&gt;and&lt;/em&gt; manipulate the objects inside it.&lt;/p&gt;

&lt;p&gt;Also, because it sometimes returns null, we have to validate &lt;em&gt;again&lt;/em&gt; in the main function on the data returned. Does null even make sense as a return value here? Should it perhaps be an error? This whole thing feels a little too unwieldy for a simple data fetch. &lt;/p&gt;

&lt;p&gt;Can we leverage existing tools in the language to handle some of this?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;processResponse2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sprites&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sprite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sprites&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;front_default&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;types_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;sprite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sprite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;types_&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getData2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pokeDiv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pokedex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;899&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://pokeapi.co/api/v2/pokemon/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sprite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;types_&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;processResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nameDiv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spriteDiv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;typeDivs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;types_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="nx"&gt;spriteDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sprite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;addChildren&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pokeDiv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nameDiv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;spriteDiv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;typeDivs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what's going on in &lt;em&gt;this version&lt;/em&gt; of our logic? Well now, we're leveraging the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then"&gt;then()&lt;/a&gt; method on our promise object to pass the value that we want, the object from the successful response.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;processResponse()&lt;/code&gt; therefore no longer has to concern itself with whether the response succeeded; it's a function that is only there for &lt;em&gt;when a success&lt;/em&gt; happens. The ambiguity of our logic goes away, and we even get to use the &lt;code&gt;catch()&lt;/code&gt; method to handle errors any way we choose.&lt;/p&gt;

&lt;p&gt;Cleaner code that easier to reason about, extend, and manipulate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;I hope this little foray into code design was useful to you. This is a broad and deep space, and I wish I had more time to present a more substantial mapping of the principles behind these tactics, and how to build upon them. Hopefully this article and others like it can spark interest and thought in the craft of good code, and what the goals are when refactoring.&lt;/p&gt;

&lt;p&gt;"Values in context" are the type of thing where once you notice them, you start seeing them everywhere, because they are everywhere. Knowing when we need to manipulate an array vs just transforming the values inside seems small, but it's the type of thing that can make the difference between spaghetti logic and functions that are easy to reason about.  &lt;/p&gt;

&lt;p&gt;As always, please reach out if you have any questions, comments, or feedback. &lt;/p&gt;

&lt;p&gt;I hope this was valuable for you. Thank you for your time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-notes"&gt;
  &lt;/a&gt;
  Additional Notes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If you want to approach this from a more academic standpoint, the entire class of &lt;em&gt;"contexts that contain a value"&lt;/em&gt; that we've looked at here are referred to as &lt;a href="https://en.wikipedia.org/wiki/Functor_(functional_programming)"&gt;Functors&lt;/a&gt;. There's a &lt;em&gt;very precise&lt;/em&gt; definition of what functors are and how they work but many people just remember them as &lt;em&gt;contexts&lt;/em&gt; that are &lt;strong&gt;mappable&lt;/strong&gt;. &lt;code&gt;map()&lt;/code&gt;, &lt;code&gt;then()&lt;/code&gt;, and the ternary operator all do the same thing; they allow us to safely work with a value in some context without disturbing the context itself.&lt;/li&gt;
&lt;li&gt;A note on dogma: Like everything in software these techniques are &lt;em&gt;suggestions&lt;/em&gt; and &lt;strong&gt;not&lt;/strong&gt; absolutes. There are very legitimate reasons for functions to consume arrays and nullables and promises; this was just a way of highlighting that that shouldn't always be the default. For example, a &lt;code&gt;sum&lt;/code&gt; function that &lt;em&gt;is&lt;/em&gt; actually performing a transformation on an entire array, would need that entire area. &lt;/li&gt;
&lt;li&gt;In the first example, you might be tempted to think that the second solution seems better partially because we replaced a more verbose &lt;code&gt;forEach()&lt;/code&gt; with the minimal syntax of &lt;code&gt;map()&lt;/code&gt;, but the solution of &lt;code&gt;map()&lt;/code&gt; in the array consuming version has its own even more subtle flaw.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sphericalVolumes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radii&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;radii&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code, while having the same issues as its more verbose version, suffers from another potential anti-pattern:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sphericalVolumes()&lt;/code&gt; in this case is just a &lt;em&gt;thin&lt;/em&gt; abstraction over &lt;code&gt;radii.map(radius =&amp;gt; (4 / 3) * Math.PI * radius ** 3)&lt;/code&gt;. So thin, in fact, that you could argue that unless we use this function in multiple places, the abstraction isn't worth hiding the code behind an interface. In other words, wrapping &lt;code&gt;radii.map(radius =&amp;gt; (4 / 3) * Math.PI * radius ** 3)&lt;/code&gt; in &lt;code&gt;sphericalVolumes()&lt;/code&gt; just hides code away that would've been easy enough to understand anyway. The abstraction doesn't help us make sense of the code; it just makes it harder to discover.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>functional</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>React.js - Props </title>
      <author>The Nerdy Dev</author>
      <pubDate>Wed, 17 Nov 2021 12:09:38 +0000</pubDate>
      <link>https://dev.to/thenerdydev/reactjs-props-50kc</link>
      <guid>https://dev.to/thenerdydev/reactjs-props-50kc</guid>
      <description>&lt;p&gt;Hey guys 👋🏻,&lt;br&gt;
In this post, let us cover what actually are &lt;code&gt;props&lt;/code&gt; in React.js &lt;/p&gt;

&lt;p&gt;For this post we will first understand Props&lt;br&gt;
✔ What is Props ?&lt;br&gt;
✔ Understanding Props&lt;br&gt;
✔ Accessing Props in Functional and Class based Components&lt;br&gt;
✔ Examples of Props&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r_GJOTfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxogniwdxp9s31063jvq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r_GJOTfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxogniwdxp9s31063jvq.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-props"&gt;
  &lt;/a&gt;
  Introduction to Props
&lt;/h2&gt;

&lt;p&gt;Props are used to make components &lt;em&gt;configurable&lt;/em&gt;, &lt;em&gt;dynamic&lt;/em&gt; and &lt;em&gt;flexible&lt;/em&gt;. Every HTML element as we know has some attributes like input element has &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;placeholder&lt;/code&gt; etc. It is &lt;strong&gt;dynamic&lt;/strong&gt; content that you can configure from outside. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-props"&gt;
  &lt;/a&gt;
  Understanding Props
&lt;/h2&gt;

&lt;p&gt;Our components which are customized HTML elements can also be passed some arguments in form of &lt;strong&gt;attributes&lt;/strong&gt; known as &lt;code&gt;props&lt;/code&gt; so as to configure just like any other HTML element is configured and it is the &lt;strong&gt;parent&lt;/strong&gt; component that passes these arguments to the &lt;strong&gt;child&lt;/strong&gt; component. &lt;/p&gt;

&lt;p&gt;Every &lt;strong&gt;child&lt;/strong&gt; component receives &lt;code&gt;props&lt;/code&gt; as an argument that is passed to it by React which is an &lt;strong&gt;object&lt;/strong&gt; that holds the arguments that the &lt;strong&gt;parent&lt;/strong&gt; component passed to the &lt;strong&gt;child&lt;/strong&gt; component and that object is known as &lt;code&gt;props&lt;/code&gt;. &lt;code&gt;props&lt;/code&gt; basically means all the properties that a component is receiving from outside. &lt;/p&gt;

&lt;p&gt;When using &lt;strong&gt;functional&lt;/strong&gt; components, you can access the &lt;code&gt;props&lt;/code&gt; using the below syntax : &lt;/p&gt;

&lt;p&gt;&lt;code&gt;props.&amp;lt;propName&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When using &lt;strong&gt;class&lt;/strong&gt; components, you can access the &lt;code&gt;props&lt;/code&gt; using the syntax : &lt;/p&gt;

&lt;p&gt;&lt;code&gt;this.props.&amp;lt;propName&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  EXAMPLES
&lt;/h2&gt;

&lt;p&gt;Passing a &lt;code&gt;prop&lt;/code&gt; of &lt;strong&gt;brand&lt;/strong&gt; to the &lt;code&gt;Computer&lt;/code&gt; component : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--usaj2jid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aprfv58a36bdqr27df86.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--usaj2jid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aprfv58a36bdqr27df86.png" alt="Image description" width="880" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Defining our &lt;code&gt;Computer&lt;/code&gt; component which receives the &lt;strong&gt;brand&lt;/strong&gt; prop.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EI2H1PnD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kd5e5z3bf7fpqqpjfk1k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EI2H1PnD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kd5e5z3bf7fpqqpjfk1k.png" alt="Image description" width="880" height="771"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So this is it for this article. Thanks for reading.&lt;br&gt;
&lt;strong&gt;Don't forget to leave a like if you loved the article. Also share it with your friends and colleagues.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" alt="Alt Text" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>react</category>
    </item>
    <item>
      <title>Três conceitos para um Código Limpo</title>
      <author>Daniel Reis</author>
      <pubDate>Wed, 17 Nov 2021 12:09:00 +0000</pubDate>
      <link>https://dev.to/danielhe4rt/tres-conceitos-para-um-codigo-limpo-3mdo</link>
      <guid>https://dev.to/danielhe4rt/tres-conceitos-para-um-codigo-limpo-3mdo</guid>
      <description>&lt;h2&gt;
  &lt;a href="#pr%C3%B3logo"&gt;
  &lt;/a&gt;
  Prólogo
&lt;/h2&gt;

&lt;p&gt;A pergunta mais constante entre os desenvolvedores que estão querendo sair do nível Júnior para Pleno é "será que meu código tá uma merda?" ou "beleza isso funciona, mas como melhorar esse lixo?" e se questionar sobre a qualidade do produto que você está entregando é um sinal de que você está (digi)evoluindo.&lt;/p&gt;

&lt;p&gt;Na minha jornada como desenvolvedor eu venho cada vez entendendo que no final das contas o importante é a &lt;strong&gt;engenharia&lt;/strong&gt; e não a &lt;strong&gt;ferramenta&lt;/strong&gt;, até porquê você sabe que um CRUD é uma sequencia X que pode ser replicada em TODAS as linguagens, certo? Logo, se você sabe a teoria/engenharia, a pratica só precisa da ferramenta/linguagem.&lt;/p&gt;

&lt;p&gt;Agora, vamos entender sobre conceitos/padrões que podem estar ligados diretamente à qualidade do código entregue, onde nós deveriamos nos preocupar muito mais do que sobre "qual framework usar".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-que-vamos-aprender"&gt;
  &lt;/a&gt;
  O que vamos aprender?
&lt;/h2&gt;

&lt;p&gt;Nesse post, quero dar exemplos de conceitos e métodologias para que possamos melhorar nosso código. Sendo eles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DRY (Don't Repeat Yourself)&lt;/li&gt;
&lt;li&gt;Early Return (Anti Hadouken)&lt;/li&gt;
&lt;li&gt;KISS (Keep it Simple Stupid)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#1-dont-repeat-yourself-dry"&gt;
  &lt;/a&gt;
  1. Dont Repeat Yourself (DRY)
&lt;/h3&gt;

&lt;p&gt;O tal do DRY é algo bem visto quando o assunto é abstração. A ideia do principio é você não repetir coisas que podem ser abstraidas pra blocos de códigos únicos. Se você está fazendo o mesmo bloco de código duas vezes, ele é refatorável pra uma função com argumentos. &lt;/p&gt;

&lt;p&gt;Não entendeu? Se liga aqui então:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$payload&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pdo&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;prepare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'SELECT * FROM users WHERE email = :email'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;bindParam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;':email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$payload&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="no"&gt;PDO&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;PARAM_STR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'E-mail já cadastrado'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nv"&gt;$query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;prepare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'INSERT INTO users values (null,:name,:email, :password)'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$email&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;?array&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pdo&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;prepare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'SELECT * FROM users WHERE email = :email'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;bindParam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;':email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;PDO&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;PARAM_STR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Usuário inexistente.'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PDO&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FETCH_ASSOC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nesse exemplo feito em menos de 5 minutos podemos ver que há uma duplicidade de código quando fazemos a query do &lt;em&gt;createUser&lt;/em&gt; e a query do &lt;em&gt;getUser&lt;/em&gt; e não há necessidade de duplicar isso caso haja uma função pra lidar com esse comportamento.&lt;/p&gt;

&lt;p&gt;Se liga:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$payload&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getUserByEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$payload&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'E-mail já cadastrado'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nv"&gt;$query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;prepare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'INSERT INTO users values (null,:name,:email, :password)'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$email&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;?array&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getUserByEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Usuário inexistente.'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PDO&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FETCH_ASSOC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getUserByEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$email&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pdo&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;prepare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'SELECT * FROM users WHERE email = :email'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;bindParam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;':email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;PDO&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;PARAM_STR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PDO&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FETCH_ASSOC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Isolamos uma abstração em uma única função e usamos ela em 2 lugares e o código ainda ficou um pouco mais legível (desde que você dê um nome bacana pra sua função abstraida). Bacana né? Se a galera juninha prestasse atenção nesse tipo de coisa desde o dia zero já teriamos carros voadores :p&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-early-return-statement"&gt;
  &lt;/a&gt;
  2. Early Return Statement
&lt;/h3&gt;

&lt;p&gt;Beleza, agora vamos falar de complexidade de código: tá ligado aquele código que tem um monte de if/else um dentro do outro parecendo um hadouken? Então, isso ai é um PORRE pra gente que vai dar manutenção no futuro e muitas vezes perdemos uns minutos refatorando o negócio. Então, se ensinarmos a rapaziada como não criar esse tipo de código vai ser a maior vitória pros devs que mexem com legado (eu incluso).&lt;/p&gt;

&lt;p&gt;Você não sabe o que é um código hadouken? É isso aqui ó:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuthRepository&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;adminAuthenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$credentials&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$credentials&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Hash&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$credentials&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;isAdmin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nc"&gt;Auth&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;UnauthorizedException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'vc n é um admin seu merda'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;UnauthorizedException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'senha errada seu otário'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;UnauthorizedException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ce nem existe no meu banco wtf'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Acho que nesse exemplo deu pra entender o conceito de hadouken, né? Encadeamos tantos ifs e elses que não fez o menor sentido e só aumentou a complexidade do código. Agora, se entendermos a lógica do &lt;strong&gt;Early Return&lt;/strong&gt; a coisa fica um pouco mais bonita. &lt;/p&gt;

&lt;p&gt;O que é: fazer com que o else seja sempre a condição principal e dar o retorno da função o quanto antes. Ou seja: negar a função e retornar em caso de erro. Não entendeu? Vamos pra prática então:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuthRepository&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;adminAuthenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$credentials&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$credentials&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;UnauthorizedException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ce nem existe no meu banco wtf'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nv"&gt;$password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Hash&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$credentials&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;UnauthorizedException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'senha errada seu otário'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;isAdmin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;UnauthorizedException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'vc n é um admin seu merda'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;Auth&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Negamos todas as condicionais pra fazer com que elas retornassem o quanto antes e garantimos uma melhor legibilidade pro código. O Early Return vem sendo cada vez mais citados por devs e empresas como algo obrigatório pra criar um código bacana e saber isso com certeza vai te deixar a frente de uma galera.&lt;/p&gt;

&lt;p&gt;Mas Daniel, não devo usar o else? Bom, isso fica inteiramente pra você. Eu não gosto, mas tem vezes que não dá pra fugir. Fica ai a reflexão :p&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-keep-it-simple-stupid-kiss"&gt;
  &lt;/a&gt;
  3. Keep it Simple Stupid (KISS)
&lt;/h3&gt;

&lt;p&gt;Cara, é bem legal implementar lógicas ao seu software e tudo mais porém chega numa hora que a própria linguagem já tem aquele método ali que você fez pronto, e com toda certeza mais otimizado. Então, pra quê?! As vezes manter as coisas simples são mais vantajosas a longo prazo e isso visto de um lado mais dev da vida onde temos gambiarras pra todo lado, é um puta ponto positivo.&lt;/p&gt;

&lt;p&gt;Vamos um exemplo de um bloco de código zoado e uma versão desse mesmo bloco porém simples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Jeito zoado&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getOAuthProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$providerId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$providerId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'twitch'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'discord'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'twitter'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'google'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'facebook'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Jeito simples&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getOAuthProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$providerId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$providers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'twitch'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'discord'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'twitter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'google'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'facebook'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$providers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$providerId&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adicionar um switch case num bloco de código que era só retornar um array não parece engenharia demais? Sempre que você ver algo extremamente complexo, ou ficando grande, tente refatorar pra ficar o mais simples possível.&lt;/p&gt;

&lt;p&gt;Gostou desse post? Clica no coraçãozinho e me siga nas redes sociais!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>php</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>10 Best Productive Tools for Web Developer.</title>
      <author>Muthu Annamalai Venkatachalam</author>
      <pubDate>Wed, 17 Nov 2021 12:01:12 +0000</pubDate>
      <link>https://dev.to/muthuannamalai12/10-best-productive-tools-for-web-developer-b0n</link>
      <guid>https://dev.to/muthuannamalai12/10-best-productive-tools-for-web-developer-b0n</guid>
      <description>&lt;p&gt;It takes time to build an appealing and functional website. Web developers are dedicated to delivering fast, reliable, and high-quality websites. Thus, to improve our productivity, we need tools that help us provide the best quality software and make our lives easier at the same time.&lt;/p&gt;

&lt;p&gt;In this article, we will discuss tools that can be used to improve our productivity and manage some of the challenges we face in web development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-animista"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://animista.net/"&gt;Animista&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Animista is a great tool for creating custom CSS animations with various effects. Customize any animation in their collection, including a background, exit, text, etc., with their diverse effects. Once you have done that, you will be able to find the code to create the animation. Then you can integrate it into your website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JDGJAVZr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629193933591/JxrL-Uy9o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JDGJAVZr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629193933591/JxrL-Uy9o.png" alt="Animista.png" width="880" height="436"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-responsinator"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://www.responsinator.com/"&gt;Responsinator&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Responsinator is easy to use and free. The tool shows you the most popular screen sizes and shapes for your webpage when you enter the URL of your page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pGWk4GiR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629189828520/KPmtcbfCp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pGWk4GiR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629189828520/KPmtcbfCp.png" alt="Responsinator.png" width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-extractcss"&gt;
  &lt;/a&gt;
  3. &lt;a href="http://extractcss.com/"&gt;ExtractCSS&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;By using this tool, you can extract elements' id, class, and inline styles from an HTML document and output them as CSS stylesheets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4fEFtrwp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630429490994/MuJKcwnFIS.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4fEFtrwp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630429490994/MuJKcwnFIS.jpeg" alt="extract-css.jpg" width="580" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-meta-tags"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://metatags.io/"&gt;Meta Tags&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The Meta Tag is a tool for debugging and generating meta tags for any website. If you use Meta Tags, you can edit and experiment with your content, then preview the way it appears on Google, Facebook, Twitter, and more!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ph3OTiv5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629193375014/0Q-8X-AkM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ph3OTiv5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629193375014/0Q-8X-AkM.png" alt="meta-tags.png" width="880" height="458"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-whatruns"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://www.whatruns.com/"&gt;WhatRuns&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;With this tool, you can check out other sites' themes, plugins, and server information. WhatRuns is compatible with Chrome and Firefox.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IuOoW3_Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629193326745/OWYB8d91S.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IuOoW3_Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629193326745/OWYB8d91S.png" alt="social.png" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-grabient"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://www.grabient.com/"&gt;Grabient&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;For creating linear gradients for your website, Grabient offers an easy-to-use UI. Choose your color and adjust the angles as necessary. After you have the desired gradient, you can apply the gradient CSS to your webpage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CoaetMTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629190137917/gVCYRBLSd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CoaetMTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629190137917/gVCYRBLSd.png" alt="Grabient.png" width="880" height="434"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-unminify"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://unminify.com/"&gt;Unminify&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;It is a Free tool to unminify (unpack, deobfuscate) JavaScript, CSS, HTML, XML, and JSON code, making it readable and pretty.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4H03wuo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629193251347/QULslCDEA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4H03wuo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629193251347/QULslCDEA.png" alt="1.png" width="880" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-google-devtools-device-mode"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://developer.chrome.com/docs/devtools/device-mode/"&gt;Google DevTools Device Mode&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;For developers, Google DevTools Device Mode provides an easy way to simulate mobile devices within the Chrome browser. Using the emulator, you can simulate device inputs such as touch, geolocation, and orientation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3hLV54ns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630429626472/DxZ3KT4tE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3hLV54ns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630429626472/DxZ3KT4tE.png" alt="chrome dev tools.png" width="880" height="713"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-browserhacks"&gt;
  &lt;/a&gt;
  9. &lt;a href="http://browserhacks.com/"&gt;Browserhacks&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Browserhacks contains a collection of browser-specific CSS and JavaScript hacks to help you resolve weird and complex issues on your website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--40iuexv7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629190673089/R3J0dD6HFH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--40iuexv7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629190673089/R3J0dD6HFH.png" alt="Browserhacks.png" width="880" height="533"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-browser-stack"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://www.browserstack.com/"&gt;Browser Stack&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Browser Stack is one of the top testing tools on the market, offering a full range of feature sets. More than 1,000 mobile and desktop browsers are available for testing with this paid tool.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rOLFwkq7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629193518848/0RWDW0ykG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rOLFwkq7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629193518848/0RWDW0ykG.png" alt="Browser-Stack.png" width="880" height="421"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can now extend your support by buying me a Coffee.😊👇&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/muthuannamalai"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" width="545" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>React.js - What is State ?</title>
      <author>The Nerdy Dev</author>
      <pubDate>Wed, 17 Nov 2021 11:57:06 +0000</pubDate>
      <link>https://dev.to/thenerdydev/reactjs-what-is-state--9b7</link>
      <guid>https://dev.to/thenerdydev/reactjs-what-is-state--9b7</guid>
      <description>&lt;p&gt;Hey guys 👋🏻,&lt;br&gt;
In this post, let us cover an introduction to State in React.js.&lt;/p&gt;

&lt;p&gt;For this post we will understand&lt;br&gt;
✔What is State in React ?&lt;br&gt;
✔ Example for creating State in React.&lt;br&gt;
✔ Accessing the State&lt;br&gt;
✔ Using setState and understanding its pitfall.&lt;br&gt;
✔ Using setState with callback to resolve the pitfall.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r_GJOTfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxogniwdxp9s31063jvq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r_GJOTfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxogniwdxp9s31063jvq.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-state"&gt;
  &lt;/a&gt;
  Introduction to State
&lt;/h2&gt;

&lt;p&gt;Every component manages its own state. With the introduction of React Hooks, you can also use state in functional components. But in this article, we will discuss about state in class components. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-for-creating-state-"&gt;
  &lt;/a&gt;
  Example for creating state :
&lt;/h2&gt;

&lt;p&gt;We define a &lt;code&gt;state&lt;/code&gt; property inside the &lt;code&gt;constructor&lt;/code&gt; function. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2cqZcD3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvxzf6c7l6m8d3vj162r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2cqZcD3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvxzf6c7l6m8d3vj162r.png" alt="Image description" width="880" height="696"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-access-the-state"&gt;
  &lt;/a&gt;
  To access the state
&lt;/h2&gt;

&lt;p&gt;To access the &lt;strong&gt;counter&lt;/strong&gt; property defined in the state, we can access it in our JSX template by saying &lt;br&gt;
&lt;code&gt;this.state.counter&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y2oyD7On--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vue8sajrb2y1tmikvgpt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y2oyD7On--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vue8sajrb2y1tmikvgpt.png" alt="Image description" width="880" height="533"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-mutate-the-state-directly-use-raw-setstate-endraw-"&gt;
  &lt;/a&gt;
  DON'T MUTATE THE STATE DIRECTLY, use &lt;code&gt;setState&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BnDBOMuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kht3z3og6s9mycbpxo6d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BnDBOMuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kht3z3og6s9mycbpxo6d.png" alt="Image description" width="880" height="428"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-there-can-be-a-problem-consider-this-"&gt;
  &lt;/a&gt;
  But there can be a problem, consider this ...
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ScvLas2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t1lqb2j6oosdsi5tk7mo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ScvLas2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t1lqb2j6oosdsi5tk7mo.png" alt="Image description" width="880" height="394"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;setState&lt;/code&gt; does not always immediately update the component. It may batch or defer the update until later. Both the &lt;code&gt;setState&lt;/code&gt; calls are enqueued when the value of counter is 0 thus causing the problem. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-solve-the-above-problem"&gt;
  &lt;/a&gt;
  Let's solve the above problem.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3C9huOBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgqd3812qxpg28l8hnup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3C9huOBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgqd3812qxpg28l8hnup.png" alt="Image description" width="880" height="394"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;setState&lt;/code&gt; with callback because it is guaranteed to fire after the update has been applied. So first &lt;code&gt;counter&lt;/code&gt; gets incremented by 1 by first &lt;code&gt;setState&lt;/code&gt; call, once it is done, the &lt;code&gt;counter&lt;/code&gt; is then incremented to 2. This update is done in a synchronous manner. &lt;/p&gt;

&lt;p&gt;So this is it for this article. Thanks for reading.&lt;br&gt;
&lt;strong&gt;Don't forget to leave a like if you loved the article. Also share it with your friends and colleagues.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" alt="Alt Text" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>UIHUT2.0 launched on Product Hunt!! Already #1- Support Us🚀</title>
      <author>Hamid Chowdhury</author>
      <pubDate>Wed, 17 Nov 2021 11:53:01 +0000</pubDate>
      <link>https://dev.to/ahamidchowdhury/uihut20-launched-on-product-hunt-already-1-support-us-39hm</link>
      <guid>https://dev.to/ahamidchowdhury/uihut20-launched-on-product-hunt-already-1-support-us-39hm</guid>
      <description>&lt;p&gt;Hey Dev's,&lt;br&gt;
We are announcing that &lt;a href="https://www.uihut.com/"&gt;UIHUT 2.0&lt;/a&gt; is live on the &lt;a href="https://www.producthunt.com/posts/uihut-2-0"&gt;product hunt&lt;/a&gt; community 🥳🥳🥳&lt;/p&gt;

&lt;p&gt;Download thousands of free &amp;amp; premium web design, illustration, bootstrap template, flutter app, icon, 3d illustration, and graphic assets for your UI, UX design project&lt;br&gt;
🌟🌟🌟 Added Design Resources&lt;/p&gt;

&lt;p&gt;❤️ 2000+ Web Templates &amp;amp; Blocks (Figma, Sketch, XD) - ( New 1000+ )&lt;br&gt;
❤️ 1000+ Mobile App UI Kit (Figma, Sketch, XD) - ( New 500+ )&lt;br&gt;
❤️ 1000+ Web App UI Kit (Figma, Sketch, XD) - ( New 900+ )&lt;br&gt;
❤️ 2500+ Illustrations Packs (Figma, Sketch, XD) - ( New 300+ )&lt;br&gt;
❤️ 9000+ Icons (SVG, PNG) - ( New 1000+ )&lt;br&gt;
❤️ 100+ 3D Assets - ( New 100+ )&lt;/p&gt;

&lt;p&gt;Please show your support on ProductHunt ❤️&lt;/p&gt;

</description>
      <category>support</category>
      <category>design</category>
      <category>webdev</category>
    </item>
    <item>
      <title>AI bot that could answer your questions </title>
      <author>Yash Makan</author>
      <pubDate>Wed, 17 Nov 2021 11:44:54 +0000</pubDate>
      <link>https://dev.to/yash_makan/ai-bot-that-could-answer-any-questions-asked-gmn</link>
      <guid>https://dev.to/yash_makan/ai-bot-that-could-answer-any-questions-asked-gmn</guid>
      <description>&lt;p&gt;Hi, I am Yash Makan and am back with another cool episode. Today as I was reading my school textbooks a thought came to my mind that wouldn't that be cool if python program can learn all the questions from my textbook. So in today's blog, we are developing a question answering bot. What this means is that you can feed this bot some data and ask questions from the textbook and the bot will give answers to each question pretty precisely.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h1bqQb1w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/3ogwG2KguRnvcg88KY/giphy.gif%3Fcid%3Decf05e4716o3383s63wehn2lu8bgo4z19ikmpml3ololdsuo%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h1bqQb1w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/3ogwG2KguRnvcg88KY/giphy.gif%3Fcid%3Decf05e4716o3383s63wehn2lu8bgo4z19ikmpml3ololdsuo%26rid%3Dgiphy.gif%26ct%3Dg" alt="answer the questions" width="480" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Here we will use a library known as &lt;a href="https://pypi.org/project/transformers/"&gt;transformers&lt;/a&gt;. This library is made by &lt;code&gt;huggingface&lt;/code&gt; and has a lot of models available for different tasks. This library is my favourite and you should check other models out as well. Each model will have a tokenizer which will be in charge of preparing the inputs for a model. This means that whenever you are generating the output you must pass the model and tokenizer. There is also an easy way which is using &lt;code&gt;pipeline()&lt;/code&gt;.  These pipelines are objects that abstract most of the complex code from the library. In this tutorial, we are using the pipeline. For example, in this blog, we are using the &lt;code&gt;question-answering&lt;/code&gt; pipeline. This will clear once we code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;pip install transformers&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-start-small"&gt;
  &lt;/a&gt;
  Let's Start Small
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--spJkDoDH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53b0b5z4frqusv78dyxv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--spJkDoDH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53b0b5z4frqusv78dyxv.png" alt="source code" width="880" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code is pretty straightforward. We are first importing pipeline from transformers. Then we are initializing the question_answering pipeline. After that, we input the question and get the result by passing the question and context in the question_answering pipeline. Here the context is the paragraph or the initial text from which the bot finds the answers. At last, the result is printed.&lt;/p&gt;

&lt;p&gt;You see the more you provide the context, the better and widely the bot will return the result.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-else"&gt;
  &lt;/a&gt;
  what else? 🧑🏼
&lt;/h2&gt;

&lt;p&gt;So you see the power with just a few lines of code we achieved a bot that can learn stuff very easily, more accurately and a lot faster than us. But you must be thinking about what can you do to make this better. And the answer is to provide more context. Here are some ideas for this project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scrape &lt;a href="https://pypi.org/project/wikipedia/"&gt;Wikipedia Articles&lt;/a&gt; and feed the data in the script. For example, scrape all the links related to history from Wikipedia(as much as you can) and then scrape the text from each page and put it together. This will create a bot that will know a lot about history I mean a lot...&lt;/li&gt;
&lt;li&gt;Are you a college student? If yes then you can feed your cs book &lt;a href="https://pypi.org/project/pdftotext/"&gt;as pdf&lt;/a&gt; in the script and ask questions. The program will be able to answer your questions. 👨🏼‍🎓&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So you see it's that easy to make a question answering bot. I really hope that you liked this post. If yes then do hit the like button and don't forget to bookmark the post as well. I hope that this post is worth sharing with everyone. If you have any doubts about anything to add then you are welcome to add the message in the discussion below. Will meet with you guys next time till then b-bye!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-articles-by-author"&gt;
  &lt;/a&gt;
  More Articles by Author
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/generate-your-own-favourite-tv-episode-using-python-1pb3"&gt;Generate your own favourite TV episode using python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#my-socials"&gt;
  &lt;/a&gt;
  My Socials
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Yash_Makan"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
