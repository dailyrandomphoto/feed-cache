<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Why we shipped a Next.js SDK, and how you can use it</title>
      <author>Rahul Chhabria</author>
      <pubDate>Thu, 10 Jun 2021 23:07:25 +0000</pubDate>
      <link>https://dev.to/sentry/why-we-shipped-a-next-js-sdk-and-how-you-can-use-it-14jp</link>
      <guid>https://dev.to/sentry/why-we-shipped-a-next-js-sdk-and-how-you-can-use-it-14jp</guid>
      <description>&lt;p&gt;As you could probably tell from the title, we shipped an &lt;a href="https://docs.sentry.io/platforms/javascript/guides/nextjs/"&gt;SDK for Next.js&lt;/a&gt;. This means you can capture errors, measure performance, manage releases, configure suspect commits, and automatically upload sourcemaps to view unminified JavaScript and TypeScript with zero(-ish) configuration.&lt;/p&gt;

&lt;p&gt;Why was Next.js next on our list? Well, it’s one of the fastest-growing &lt;a href="https://docs.sentry.io/platforms/javascript/guides/react/"&gt;React&lt;/a&gt; frameworks and developers love it. Next.js provides a developer experience that helps with building features rapidly, seeing local changes quickly, and reducing build times.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"Next.js turns traditionally complex decisions into simple implementation details. Spinning up new pages with our existing React components and Material UI went from days to hours with Next."&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;– &lt;em&gt;Sean Parmelee, Applications Architect, Care.com&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To monitor Next.js projects in the past, you had to install our &lt;code&gt;@sentry/node&lt;/code&gt; and &lt;code&gt;@sentry/react&lt;/code&gt; SDKs — installing both and configuring your environment correctly was time-consuming and literally no fun. The new Next.js SDK does all that for you, and works swimmingly with our &lt;a href="https://www.npmjs.com/package/@sentry/webpack-plugin"&gt;Webpack Plugin&lt;/a&gt; or &lt;a href="https://docs.sentry.io/product/cli/"&gt;&lt;code&gt;sentry-cli&lt;/code&gt;&lt;/a&gt; to upload your source maps.&lt;/p&gt;

&lt;p&gt;To get started with Sentry for Next.js, simply install the SDK:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add @sentry/nextjs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And then configure:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx @sentry/wizard -i nextjs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Configure &lt;a href="https://docs.sentry.io/platforms/javascript/guides/nextjs/performance/"&gt;performance monitoring&lt;/a&gt; by setting a &lt;code&gt;tracesSampleRate&lt;/code&gt; when you initialize the SDK, in both &lt;code&gt;sentry.client.config.js&lt;/code&gt; &amp;amp; &lt;code&gt;sentry.server.config.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Sentry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="na"&gt;tracesSampleRate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you’ve done that, frontend transactions will be captured automatically. To capture API request transactions, wrap your handlers in our &lt;code&gt;withSentry&lt;/code&gt; helper. (Hint: If you’re already using our SDK to capture errors in those routes, you will have already done this. No extra configuration needed.)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Sentry&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;sentry&lt;/span&gt;&lt;span class="sr"&gt;/nextjs’&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="nx"&gt;Sentry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Sentry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withSentry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can quickly track down poor-performing APIs or slow database queries. With new features like Quick Trace, &lt;a href="https://docs.sentry.io/product/sentry-basics/tracing/trace-view/"&gt;Trace View&lt;/a&gt;, and Suspect Tags, Sentry connects frontend issues to root causes in the backend and vice versa.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Ji1alr---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzfsry36iupbld0zq32p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Ji1alr---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzfsry36iupbld0zq32p.png" alt="frontend to backend root causes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Trace View gives a waterfall view of a given transaction and dependencies across all projects on a single screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6hWAciTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fozvaqzcaty2v32ffjd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6hWAciTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fozvaqzcaty2v32ffjd.jpeg" alt="trace view of transactions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Early adopters of our SDK — like Stefen Alper, Co-Founder of eesel, a content search and centralization tool — are already using Sentry for Next.js to capture errors. Now they (and you) can also capture performance data.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"We moved to Next.js for the dev experience and the scalability. As longtime users of Sentry’s error monitoring offering, we’re looking forward to start monitoring performance and managing releases with Sentry’s new Next.js SDK."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;–&lt;em&gt;Stefen Alper, Co-Founder, eesel.app&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Install our &lt;a href="https://sentry.io/for/nextjs"&gt;Next.js SDK&lt;/a&gt; and get a pretty good idea of which commit caused the issue and who is likely responsible, and automatically upload source maps so your stack trace looks like the original code you wrote. Also, &lt;a href="https://us06web.zoom.us/webinar/register/4016233661429/WN_znhaqwALTXWf-3Rqtf8mBQ"&gt;join us&lt;/a&gt; on June 24th, 2021 for a live workshop on how to build, deploy, and monitor Next.js applications with Sentry and Netlify.&lt;/p&gt;

</description>
      <category>monitoring</category>
      <category>nextjs</category>
      <category>devops</category>
      <category>performance</category>
    </item>
    <item>
      <title>Understanding CORS</title>
      <author>Anvil Engineering</author>
      <pubDate>Thu, 10 Jun 2021 22:28:24 +0000</pubDate>
      <link>https://dev.to/useanvil/understanding-cors-5gm5</link>
      <guid>https://dev.to/useanvil/understanding-cors-5gm5</guid>
      <description>&lt;p&gt;CORS, or &lt;em&gt;Cross-Origin Resource Sharing&lt;/em&gt;, is one thing that can bite a developer&lt;br&gt;
early on when creating a web app or backend service. It’s a check by modern&lt;br&gt;
browsers which provides added security for the browser user. It’s important to&lt;br&gt;
note that this is purely enforced by the browser, although as a whole, both&lt;br&gt;
web servers and web browsers play a part.&lt;/p&gt;

&lt;p&gt;For example, CORS can help prevent a malicious case where a website executes an&lt;br&gt;
HTTP request (via the Fetch API or &lt;code&gt;XMLHttpRequest&lt;/code&gt;) to a different&lt;br&gt;
site/domain where a user may be logged in. Without CORS, that malicious website&lt;br&gt;
can receive a fully authenticated response containing session data, cookies,&lt;br&gt;
and/or other potentially (hopefully encrypted!) sensitive data.&lt;/p&gt;

&lt;p&gt;Let’s take a look at how that would work in a world without CORS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A user just visited "&lt;a href="https://mybank.example"&gt;https://mybank.example&lt;/a&gt;", one of the most popular
banking websites, to complete a few transactions.&lt;/li&gt;
&lt;li&gt;The user, maybe on another tab, visits "&lt;a href="http://not-suspicious.example"&gt;http://not-suspicious.example&lt;/a&gt;".&lt;/li&gt;
&lt;li&gt;Unknown to the user, &lt;code&gt;not-suspicious.example&lt;/code&gt; contains a script that
sends requests to a list of endpoints from very popular banking sites. This
is all done in the background.&lt;/li&gt;
&lt;li&gt;If a response comes back containing user session data or other sensitive
user data, the malicious site now has the means to impersonate the user.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now the same example, but on a browser with CORS enabled:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A user just visited "&lt;a href="https://mybank.example"&gt;https://mybank.example&lt;/a&gt;", one of the most popular
banking websites, to complete a few transactions.&lt;/li&gt;
&lt;li&gt;The user, maybe on another tab, visits "&lt;a href="http://not-suspicious.example"&gt;http://not-suspicious.example&lt;/a&gt;".&lt;/li&gt;
&lt;li&gt;Unknown to the user, &lt;code&gt;not-suspicious.example&lt;/code&gt; contains a script that
&lt;em&gt;attempts&lt;/em&gt; to send requests to a list of endpoints.&lt;/li&gt;
&lt;li&gt;Before each request, however, the user’s browser sends a request known as a
"preflight request" to check if the request is possible.&lt;/li&gt;
&lt;li&gt;Now, let’s assume all banks are up-to-date with security. Each API server
responds and tells the browser that &lt;code&gt;not-suspicious.example&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; an
origin that it trusts.&lt;/li&gt;
&lt;li&gt;At this point, the browser considers the preflight request as failed,
which also stops the real request from executing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the last three points of the CORS-enabled example, the browser has done its&lt;br&gt;
job and prevented the attack. However, that also highlights one of its&lt;br&gt;
weaknesses: the browser is key, but it can be easily disabled (i.e.&lt;br&gt;
the &lt;code&gt;--disable-web-security&lt;/code&gt; flag for Chrome and via an extension on Firefox).&lt;br&gt;
CORS should be treated as another mechanism to prevent certain attacks, and cases&lt;br&gt;
where it’s disabled should be considered as well. It should be only a part of a&lt;br&gt;
more comprehensive solution to secure your servers and to protect your users'&lt;br&gt;
data.&lt;/p&gt;

&lt;p&gt;On the last three points of the CORS-enabled example, the browser&lt;br&gt;
has done its job and prevented the attack. However, that also highlights one&lt;br&gt;
of its weaknesses: the browser is key, but CORS enforcement can also be&lt;br&gt;
disabled. This mechanism should be treated as another mechanism to prevent&lt;br&gt;
certain attacks and should be part of a more comprehensive solution to secure&lt;br&gt;
your servers and to protect your users’ data.&lt;/p&gt;

&lt;p&gt;Now that we know what can happen without CORS, let’s step into how someone might&lt;br&gt;
discover this during development and dig into how to get your app ready.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;You have a project idea that will probably work well as a web app. You also &lt;br&gt;
want it to be modern — who wants a plain HTML site in 2021, right? That means&lt;br&gt;
you’ll need Javascript. You decide on a simple architecture consisting of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A backend server - Node.js, Python, PHP, etc.&lt;/li&gt;
&lt;li&gt;A Javascript/HTML/CSS frontend maybe with a framework - React, Vue.js, Angular, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Perfect. Let’s whip up a quick prototype. See &lt;a href="https://jsfiddle.net/allananvil/4u150obq/4/"&gt;JSFiddle here&lt;/a&gt; for full&lt;br&gt;
HTML, CSS and JS files, and &lt;a href="https://gist.github.com/aalmazan/4b47861f1f0126fc5f9987de474abc6b"&gt;this GitHub Gist&lt;/a&gt; for the backend.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;API_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:8000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;do-something&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getResultEl&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;result&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleResponse&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Something went wrong&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
    &lt;span class="c1"&gt;// Put our data in a list&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/li&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// Or tell us it failed&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;li&amp;gt;Could not get response&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="nx"&gt;getResultEl&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;ul&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/ul&amp;gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Make our button send a request to our backend API&lt;/span&gt;
&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;xhr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;API_URL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/items`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRequestHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;// Also set any custom headers if you need, such as authentication headers&lt;/span&gt;
  &lt;span class="c1"&gt;// xhr.setRequestHeader('X-My-Custom-Header', 'some-data')&lt;/span&gt;
  &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onreadystatechange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;handleResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Send some optional data&lt;/span&gt;
  &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#checking-our-work"&gt;
  &lt;/a&gt;
  Checking our work
&lt;/h2&gt;

&lt;p&gt;Now that everything’s set up, let’s double-check that our endpoint works fine&lt;br&gt;
when we call it from our site. What does &lt;code&gt;cURL&lt;/code&gt; say?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl  &lt;span class="s2"&gt;"localhost:8000/items"&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; GET /items HTTP/1.1
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; Host: localhost:8000
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; User-Agent: curl/7.64.1
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; Accept: &lt;span class="k"&gt;*&lt;/span&gt;/&lt;span class="k"&gt;*&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; &lt;span class="nb"&gt;date&lt;/span&gt;: Mon, 07 Jun 2021 21:16:05 GMT
&amp;lt; server: uvicorn
&amp;lt; content-length: 48
&amp;lt; content-type: application/json

&lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;:&lt;span class="s2"&gt;"One"&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;:&lt;span class="s2"&gt;"Two"&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;:&lt;span class="s2"&gt;"Three"&lt;/span&gt;&lt;span class="o"&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looking good. Onto the browser… but it doesn’t work when you hit the button.&lt;br&gt;
Why? Let’s check our browser’s Developer Tools. In this case, we’ll be using&lt;br&gt;
Firefox below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jxXnr4TP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56jpaw21j49swqt4tlk6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jxXnr4TP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56jpaw21j49swqt4tlk6.png" alt="CORS Blocked Firefox"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A few things just happened:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In our Javascript file, we send an HTTP request to our API server at &lt;code&gt;http://localhost:8000&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;There’s not one, but two requests that were sent and they both returned
error responses from our server.&lt;/li&gt;
&lt;li&gt;Checking our API logs we also have an error*:

&lt;ul&gt;
&lt;li&gt;Technically, this can be resolved by explicitly allowing and handling
the OPTIONS HTTP verb, but will still yield the same result.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;INFO: 127.0.0.1:54748 - &lt;span class="s2"&gt;"OPTIONS /items HTTP/1.1"&lt;/span&gt; 405 Method Not Allowed
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;A quick look at the request headers on the first request also shows CORS&lt;br&gt;
headers (the ones that begin with “Access-Control-Request-”).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YglegZU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x60wbzj808q25hxqdji7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YglegZU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x60wbzj808q25hxqdji7.png" alt="CORS Blocked Firefox"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That sequence of events was your browser’s CORS enforcement at work.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#so-what-is-the-browser-doing"&gt;
  &lt;/a&gt;
  So what is the browser doing?
&lt;/h2&gt;

&lt;p&gt;Going back to the definition: CORS stands for &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;“Cross-Origin Resource Sharing”&lt;/a&gt;.&lt;br&gt;
As seen in the example, the browser is trying to make a request from&lt;br&gt;
&lt;code&gt;localhost:63342&lt;/code&gt; (the frontend) to &lt;code&gt;localhost:8000&lt;/code&gt; (the backend). These two&lt;br&gt;
hosts are considered different "origins" (&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Origin"&gt;see MDN’s full definition for "origin"&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Once a cross-origin request is detected, the browser sends a preflight request&lt;br&gt;
before each cross-origin HTTP request to make sure the actual request can be&lt;br&gt;
handled properly. This is why the first request in our example was an&lt;br&gt;
&lt;code&gt;OPTIONS&lt;/code&gt; request that we never called for in the Javascript code.&lt;/p&gt;

&lt;p&gt;On Chrome’s DevTools, you can also see this happen more clearly as it combines&lt;br&gt;
the request and the preflight request:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w5RObpdE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsew4263lrqw0vdeywzw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w5RObpdE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsew4263lrqw0vdeywzw.png" alt="CORS Blocked Chrome"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-your-backend-ready"&gt;
  &lt;/a&gt;
  Getting your backend ready
&lt;/h2&gt;

&lt;p&gt;The good news: depending on how your backend is developed, handling CORS can be&lt;br&gt;
as simple as installing a package and/or changing a few configs.&lt;/p&gt;

&lt;p&gt;As examples, in the Javascript world, koa and express both have middleware&lt;br&gt;
packages that have quick setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://expressjs.com/en/resources/middleware/cors.html#installation"&gt;https://expressjs.com/en/resources/middleware/cors.html#installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/koajs/cors"&gt;https://github.com/koajs/cors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the example here, I’ll be using a snippet from a FastAPI app as it&lt;br&gt;
demonstrates the headers more succinctly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi.middleware.cors&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CORSMiddleware&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_middleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;# We add the middleware here
&lt;/span&gt;    &lt;span class="n"&gt;CORSMiddleware&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;# These are the options we give the middleware and they map easily to their
&lt;/span&gt;    &lt;span class="c1"&gt;# associated CORS headers
&lt;/span&gt;    &lt;span class="n"&gt;allow_origins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'http://localhost:63342, ‘http://localhost’],
    allow_methods=['&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="s"&gt;', '&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="s"&gt;']
)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keep in mind that the same domain with a different port requires a new entry.&lt;br&gt;
In the snippet above under &lt;code&gt;allow_origins&lt;/code&gt;, we’ve added &lt;code&gt;localhost&lt;/code&gt; and&lt;br&gt;
&lt;code&gt;localhost:63342&lt;/code&gt; since those are the URLs where we might call our backend API&lt;br&gt;
for data.&lt;/p&gt;

&lt;p&gt;Also under &lt;code&gt;allow_methods&lt;/code&gt;, you can see that we can finely tune our backend to&lt;br&gt;
only accept certain methods. You could, for example, lock down this API service&lt;br&gt;
further by only accepting &lt;code&gt;GET&lt;/code&gt; requests, if it’s a simple service that provides&lt;br&gt;
data without requiring user input -- like an API that provides business hours&lt;br&gt;
for a specified store.&lt;/p&gt;

&lt;p&gt;With that ready, let’s try making the request again. Below is the preflight&lt;br&gt;
request (&lt;code&gt;OPTIONS&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;Perfect. It’s now allowing our origin, and shows us the allowed methods. Also,&lt;br&gt;
it shows which headers are allowed in the requests. The allowed headers listed&lt;br&gt;
are typical defaults, but if you need to use other headers for your use-case,&lt;br&gt;
you can allow all of them completely with &lt;code&gt;access-control-allow-headers: *&lt;/code&gt; or&lt;br&gt;
explicitly list all the headers you want to support.&lt;/p&gt;

&lt;p&gt;For a more detailed listing of CORS-related headers, take a look at &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#the_http_response_headers"&gt;Mozilla’s documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hopefully this brings clarity and demystifies any questions that you may have&lt;br&gt;
had with CORS, its effects, and getting a simple app to support it. Having a&lt;br&gt;
sound CORS policy should only be considered as a small cog in the complex&lt;br&gt;
world of web security. Since this only protects one specific attack vector,&lt;br&gt;
one should stay vigilant to keep their servers and users’ data secure.&lt;/p&gt;

&lt;p&gt;If you’re developing something exciting with PDFs and/or paperwork, we’d love&lt;br&gt;
to hear from you. Let us know at &lt;a href="//mailto:developers@useanvil.com"&gt;developers@useanvil.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>security</category>
      <category>node</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>My TPRCiC 2021 review</title>
      <author>Tib</author>
      <pubDate>Thu, 10 Jun 2021 22:02:34 +0000</pubDate>
      <link>https://dev.to/thibaultduponchelle/tprcic-2021-review-56k3</link>
      <guid>https://dev.to/thibaultduponchelle/tprcic-2021-review-56k3</guid>
      <description>&lt;p&gt;Last year I wrote a &lt;a href="https://dev.to/thibaultduponchelle/my-tprcic-2020-review-1187"&gt;(poignant?) review of TPRCiC&lt;/a&gt; as one of my first blog posts.&lt;/p&gt;

&lt;p&gt;Once again this year, I attended &lt;a href="https://perlconference.us/tprc-2021-cloud/"&gt;The Perl and Raku Conference in the Cloud&lt;/a&gt; (and I even talked 😱 🙊), so here we go again for the review!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fresh-starters"&gt;
  &lt;/a&gt;
  Fresh starters
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#elasticsearch-data-exploration-in-your-terminal"&gt;
  &lt;/a&gt;
  Elasticsearch Data Exploration in Your Terminal
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/reyjrar"&gt;Brad Lhotsky&lt;/a&gt; came with a very &lt;strong&gt;solid&lt;/strong&gt; &lt;a href="https://youtu.be/cexwpN3N2j0"&gt;talk&lt;/a&gt;... 👍&lt;/p&gt;

&lt;p&gt;With a live demo (he's mad). That worked! (he's &lt;del&gt;lucky&lt;/del&gt; good 😁) &lt;/p&gt;

&lt;p&gt;And the overall was very nice to listen (he's maybe experimented at this exercise - EDIT: yes he is).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dT7Gfj_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lfos8wi3z01nl4wqav9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dT7Gfj_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lfos8wi3z01nl4wqav9.png" alt="Brad"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I enjoyed the topic (&lt;a href="https://www.elastic.co/elasticsearch/"&gt;ElasticSearch&lt;/a&gt;), the comparisons and expertise about this technology and other related ones.&lt;/p&gt;

&lt;p&gt;And... Yes... A working &lt;em&gt;live&lt;/em&gt; demo... What else?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#openfoodfacts"&gt;
  &lt;/a&gt;
  OpenFoodFacts
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://fr.openfoodfacts.org/"&gt;OpenFoodFacts&lt;/a&gt; well deserved his &lt;a href="https://youtu.be/imugl2dSdnU"&gt;lightning talk&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/stephanegigandet"&gt;Stephane Giganded&lt;/a&gt; presented this project (does it really need to be introduced?) discussed about GSOC (or similar) and sent a call to volunteers!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Fu4GHXB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3qhk2gr3zinrj7qc1hq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Fu4GHXB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3qhk2gr3zinrj7qc1hq.png" alt="Stephane"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#main-dishes"&gt;
  &lt;/a&gt;
  Main dishes
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#perlimports"&gt;
  &lt;/a&gt;
  perlimports
&lt;/h3&gt;

&lt;p&gt;I love when programming languages are doing cross pollination. This was the beginning of the story about &lt;a href="https://metacpan.org/dist/App-perlimports/view/script/perlimports"&gt;perlimports&lt;/a&gt; from &lt;a href="https://www.olafalders.com/"&gt;Olaf Alders&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;His &lt;a href="https://youtu.be/fKqxdTbGxYY"&gt;talk&lt;/a&gt; was very comprehensive from basic importing concepts to the implementation problems through vim integration and various features of his &lt;strong&gt;must have&lt;/strong&gt; new tool!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vS5oV1E_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmsbs0yhrqcktgjagtw7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vS5oV1E_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmsbs0yhrqcktgjagtw7.png" alt="Olaf"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think I prefered this talk over his last year talk... Sorry to the "&lt;em&gt;last-year-olaf&lt;/em&gt;":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DfDzqFT8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/od7g3asdrzxe93s8svy1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DfDzqFT8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/od7g3asdrzxe93s8svy1.jpeg" alt="Olaf"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-new"&gt;
  &lt;/a&gt;
  What's new
&lt;/h3&gt;

&lt;p&gt;One of our pumpkings &lt;a href="https://github.com/rjbs"&gt;rjbs&lt;/a&gt; gave a very common (in programming languages conferences) &lt;strong&gt;"what's new"&lt;/strong&gt; &lt;a href="https://youtu.be/FlGpiS39NMY"&gt;talk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you follow the status of Perl, you know it has been a difficult year for the language. I won't go into details. I never talked about it on this blog so far (and will probably never do). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bYQ6-iLH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l5mbgi22ht9op4ek54q1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bYQ6-iLH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l5mbgi22ht9op4ek54q1.png" alt="Rik"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rik highlighted this state of things very well and did it very transparently. I personally feel like he is very diplomatic and has a strong sense of duty.&lt;/p&gt;

&lt;p&gt;The second part of the talk was about changelog, there is &lt;code&gt;try/catch&lt;/code&gt; 🎉 and various smaller things that are still cool when explained by Rik!&lt;/p&gt;

&lt;p&gt;(everything is cool when explained by rik ❤️ #fanboy)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#raku-syntax-i-miss-in-other-languages"&gt;
  &lt;/a&gt;
  Raku syntax I miss in other languages
&lt;/h3&gt;

&lt;p&gt;I also enjoyed very much this talk. I know a little bit of Raku, and I have to admit that it's clearly a super powerful language.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--01HNN1iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k93l3k6hydmyn87p0yrn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--01HNN1iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k93l3k6hydmyn87p0yrn.png" alt="Leon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Leont"&gt;Leon Timmermans&lt;/a&gt; delivered a very nice talk and he's really good at spotlighting the features of &lt;a href="https://www.raku.org/"&gt;Raku&lt;/a&gt; like named arguments, zip operator, junction, smart match etc etc etc... (there is so much)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#local-setup-for-a-complex-app-using-dockercompose"&gt;
  &lt;/a&gt;
  Local setup for a complex app using docker-compose
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://youtu.be/ARpLPQWblAM"&gt;presentation&lt;/a&gt; from &lt;a href="https://github.com/domm"&gt;Thomas Klausner&lt;/a&gt; is for me the perfect example of &lt;strong&gt;"Simple slides... Great presentation!"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---qq7n37L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61t9c8055hpewzzylbgq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---qq7n37L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61t9c8055hpewzzylbgq.png" alt="Domm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;He described how he managed a multi-tier application with docker-compose (it's more about service description than containerization) for reproducible local setup.&lt;/p&gt;

&lt;p&gt;And he delivered his talk in a very &lt;em&gt;pleasant&lt;/em&gt; way... Congrats 👍&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dessert"&gt;
  &lt;/a&gt;
  Dessert
&lt;/h2&gt;

&lt;p&gt;I loved last year &lt;strong&gt;octology&lt;/strong&gt; lightning talk and &lt;a href="https://github.com/pip"&gt;pip&lt;/a&gt; striked again!&lt;/p&gt;

&lt;p&gt;This time with a 20min &lt;a href="https://youtu.be/FgS6IXq-xVE"&gt;talk&lt;/a&gt;. I have to admit I didn't understood everything, it's always a kind of mystic/psychedelic art... And that's what I love.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--opycpMn0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2zmbzxm0m4sh8iecogn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--opycpMn0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2zmbzxm0m4sh8iecogn.png" alt="Pip"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#im-not-hungry-anymore-but"&gt;
  &lt;/a&gt;
  I'm not hungry anymore but...
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#rummaging-in-the-clooset"&gt;
  &lt;/a&gt;
  Rummaging in the clOOset
&lt;/h3&gt;

&lt;p&gt;One of the most important talk of this conference is definitely the &lt;a href="https://youtu.be/FO5ift28RyE"&gt;Rummaging in the clOOset&lt;/a&gt; talk from &lt;a href="https://ovid.github.io/"&gt;Curtis "Ovid" Poe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_wjYxjPP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwby0ph9kzkae8h8b0w6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_wjYxjPP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwby0ph9kzkae8h8b0w6.png" alt="Ovid"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;His talk discussed Object Oriented and Corinna (the incoming core Object Oriented implementation). Taking example from other languages and from important leaders then going more into details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UsVTMeP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rdramy3zyn5vbnu9ver.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UsVTMeP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rdramy3zyn5vbnu9ver.png" alt="Mixins"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sadly the beginning of the talk was a bit choppy but it does not ruined anything!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#even-you-can-release-perl"&gt;
  &lt;/a&gt;
  Even you can release Perl
&lt;/h3&gt;

&lt;p&gt;A very nice &lt;a href="https://youtu.be/LaNZu1aBEzE"&gt;talk&lt;/a&gt; from &lt;a href="https://github.com/Corion"&gt;Max Maischein&lt;/a&gt; around release management, pumpking and perl packaging... From the inside! &lt;/p&gt;

&lt;p&gt;With the real manual administrative details 👍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZoAOYVaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ej14v4y31sxd9omeqwme.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZoAOYVaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ej14v4y31sxd9omeqwme.png" alt="Max"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Very interesting 😄&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#perls-amazing-time-machine"&gt;
  &lt;/a&gt;
  Perl's Amazing Time Machine
&lt;/h3&gt;

&lt;p&gt;And finally the &lt;a href="https://youtu.be/Kc_bP73xNyM"&gt;talk&lt;/a&gt; from &lt;a href="http://leonerds-code.blogspot.com/"&gt;Paul Evans&lt;/a&gt; 🎉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pbPXlTdb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/joz73lgtbte8a1ji9q4m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pbPXlTdb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/joz73lgtbte8a1ji9q4m.png" alt="Paul"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AMAZING!&lt;/p&gt;

&lt;p&gt;Always very smart and technical!&lt;/p&gt;

&lt;p&gt;I feel smarter when I listen to his presentations 😁&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crossplatform-native-guis-tradepayoffs-integradistribution"&gt;
  &lt;/a&gt;
  Cross-platform native GUIs: {trade,pay}offs, {integra,distribu}tion
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/zmughal"&gt;Zaki Mughal&lt;/a&gt; delivered an impressive, comprehensive and fun (even a song) &lt;a href="https://youtu.be/En49kYRDbsg"&gt;talk&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YHTfSKZ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4f9z575mowzca7v8kvrm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YHTfSKZ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4f9z575mowzca7v8kvrm.png" alt="Zaki"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The topic was GUI, human interactions, how to build...In a multiplatforms way... A lot of things actually! 😁&lt;/p&gt;

&lt;p&gt;Ok I'm &lt;em&gt;biaised&lt;/em&gt; since &lt;strong&gt;sivoais&lt;/strong&gt; (his nickname) is also a kind of "buddy" of mine 😁&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#folklore"&gt;
  &lt;/a&gt;
  Folklore
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#cut-by-the-gong"&gt;
  &lt;/a&gt;
  Cut by the gong
&lt;/h3&gt;

&lt;p&gt;Leonerd gave a talk about errors to avoid when doing a slide deck. While it was very interesting, it was kind of ironic that his slide about managing time was cut by the gong! (meaning the end of 5 minutes lightning talk)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TD6aqjX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imvao0y21lux0tfwyfu9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TD6aqjX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imvao0y21lux0tfwyfu9.png" alt="Gong"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the beginning I thought it was prepared 😁&lt;/p&gt;

&lt;p&gt;And for the record, the master of the gong:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZptBcp1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsfac5wwps4rk6fkkmji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZptBcp1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsfac5wwps4rk6fkkmji.png" alt="Master of the gong"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#esperanto"&gt;
  &lt;/a&gt;
  Esperanto
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#how-to-pronounce-perl-openfoodfact"&gt;
  &lt;/a&gt;
  How to pronounce Perl (OpenFoodFact)
&lt;/h4&gt;

&lt;p&gt;French people (including me) tends to say "pairl" for Perl when American (or just all others 😄) say more something like "Purl". But it is far from "Paul" which would more pronounce like "Pol" 😀&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-back-slash-affair-exploring-textbased-protocols-iirc"&gt;
  &lt;/a&gt;
  The &lt;strong&gt;back&lt;/strong&gt; slash affair (Exploring Text-Based Protocols IIRC)
&lt;/h4&gt;

&lt;p&gt;Could we decide once for all? 😁 &lt;/p&gt;

&lt;p&gt;south-west to north-est / is "slash"&lt;br&gt;
north-west to south-est \ is "&lt;strong&gt;back&lt;/strong&gt; slash"&lt;/p&gt;

&lt;p&gt;Anyway the &lt;a href="https://youtu.be/8fjYawHyNZY"&gt;talk&lt;/a&gt; from &lt;a href="http://jberger.github.io/"&gt;Joel Berger&lt;/a&gt; was very interesting 👍&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Once again, I enjoyed so much these 3 great days of conference!&lt;br&gt;
I'm very proud for having joined the speaker side (have you seen?).&lt;/p&gt;

&lt;p&gt;Kudos to organizers and sponsors.&lt;/p&gt;

</description>
      <category>perl</category>
      <category>tpc</category>
      <category>yapcna</category>
      <category>review</category>
    </item>
    <item>
      <title>May: Forem Twitch Events Roundup 👾</title>
      <author>Christina Gorton</author>
      <pubDate>Thu, 10 Jun 2021 21:41:44 +0000</pubDate>
      <link>https://dev.to/devteam/may-forem-twitch-events-roundup-h78</link>
      <guid>https://dev.to/devteam/may-forem-twitch-events-roundup-h78</guid>
      <description>&lt;p&gt;In May, Nick Taylor and I had the privilege to speak with 4 awesome guests. This is a round up of all the wonderful guests who joined us and a special pair programming episode where Nick and I talk about GitHub and contributing to open source projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#walkthrough-wednesday-with-jerome-hardaway"&gt;
  &lt;/a&gt;
  Walkthrough Wednesday with Jerome Hardaway
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9I2WHfz6spI"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Nick Taylor and Jerome Hardaway discussed &lt;a href="https://vetswhocode.io/"&gt;Vets Who Code&lt;/a&gt;, job hunting during the pandemic, habits, and more. &lt;/p&gt;

&lt;p&gt;Places to follow Jerome:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/JeromeHardaway"&gt;Personal Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/vetswhocode"&gt;Vets Who Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#walkthrough-wednesday-with-nick-and-christina"&gt;
  &lt;/a&gt;
  Walkthrough Wednesday with Nick and Christina
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/npDJGF1-w3w"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Nick and I talked about the DEV community Bug Smash, Contributing to open source, and some important  features of GitHub, and Git.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A few of the links mentioned in the stream:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.iamdeveloper.com/pages/talks/#heading-getting-the-most-out-of-open-source"&gt;Talk by Nick Taylor on Getting the Most Out of Open Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.forem.com/"&gt;Forem Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/cli/cli"&gt;GitHub CLI&lt;/a&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/coffeecraftcode" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yuBMmi-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--u8pzDZEU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/129358/190252c3-ce2d-4df8-b4b1-b42f7ae7d08a.png" alt="coffeecraftcode image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devteam/join-us-for-the-first-dev-community-bug-smash-3plm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Join Us For the First DEV Community Bug Smash!&lt;/h2&gt;
      &lt;h3&gt;Christina Gorton ・ May 4 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devbugsmash&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#forem&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#contributorswanted&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;div class="ltag__link"&gt;
  &lt;a href="/ceeoreo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CnpPqWlY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--xZCqZv2b--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/102841/e1a65308-9b86-49be-8dec-3a6ecac71489.jpeg" alt="ceeoreo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/codesandboxio/how-to-make-your-first-open-source-contribution-2oim" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Make Your First Open Source Contribution&lt;/h2&gt;
      &lt;h3&gt;Ceora Ford ・ May 6 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#coding&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;div class="ltag__link"&gt;
  &lt;a href="/unseenwizzard" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hzk0539K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hYHvcMVy--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/174788/1936146d-3e26-41a7-a0d2-c679ab0719fe.jpg" alt="unseenwizzard image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/unseenwizzard/learn-git-concepts-not-commands-4gjc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn git concepts, not commands&lt;/h2&gt;
      &lt;h3&gt;Nico Riedmann ・ Jun 2 '19 ・ 36 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#git&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#walkthrough-wednesday-with-aisha-blake-and-pachi-carlson"&gt;
  &lt;/a&gt;
  Walkthrough Wednesday with Aisha Blake and Pachi Carlson
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1fxgct-6zd4"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Nick and I had so much fun talking toAisha Blake and Pachi Carlson – two members of New Relic’s DevRel team. We discussed DevRel, &lt;a href="https://www.therelicans.com/"&gt;The Relicans&lt;/a&gt;, streaming on Twitch and more. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Places to find Aisha:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/AishaBlake"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twitch.tv/AishaCodes"&gt;Twitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/aishablake"&gt;DEV&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Places to find Pachi:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/pachicodes"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twitch.tv/pachicodes"&gt;Twitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/pachicodes"&gt;DEV&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pair-programming-with-meg-gutshall"&gt;
  &lt;/a&gt;
  Pair Programming with Meg Gutshall
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lpdzrcx60Ho"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Nick Taylor and I were joined by Meg Gutshall to work on a Liquid tag issue on Forem. Check out the video to see Meg work through &lt;a href="https://github.com/forem/forem/issues/11880"&gt;this issue&lt;/a&gt; and explain her method for debugging and contributing to open source. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Places to follow Meg:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/meg-gutshall"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/meghan-gutshall/"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/meg_gutshall"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Organizations she suggests:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rubyforgood.org/"&gt;Ruby for Good&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Women-Who-Code-Philly/"&gt;Women Who Code Philadelphia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Free-Code-Camp-Philly/"&gt;freeCodeCamp Philly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/Philadelphia-Self-Taught-Developers-Meetup-Group/"&gt;Meetup Self-Taught Software Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to all our viewers who joined the streams and chatted with us this month! &lt;/p&gt;

&lt;p&gt;Be sure to follow the &lt;a href="https://www.twitch.tv/thepracticaldev"&gt;ThePracticalDev Twitch&lt;/a&gt; channel to be notified when future streams begin and check out all the great guests we have joining us every Wednesday this month. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our June guests currently include:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/cassidoo"&gt;Cassidy Williams&lt;/a&gt;, Principal Developer Experience Engineer at Netlify, &lt;a href="https://cassidoo.co/newsletter/"&gt;newsletter curator&lt;/a&gt; and maker of &lt;a href="https://twitter.com/cassidoo/status/1284201376516435968"&gt;wonderful tech TikToks&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/hirokonishimura"&gt;Hiroko Nishimura&lt;/a&gt; AWS Hero, Founder of &lt;a href="https://twitter.com/awsnewbies"&gt;AWS Newbies&lt;/a&gt;, and instructor at LinkedIn and Egghead.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>opensource</category>
      <category>meta</category>
    </item>
    <item>
      <title>Using Inheritance So You Don't Repeat Yourself &amp; Notes.</title>
      <author>Randy Rivera</author>
      <pubDate>Thu, 10 Jun 2021 21:34:42 +0000</pubDate>
      <link>https://dev.to/rthefounding/using-inheritance-so-you-don-t-repeat-yourself-ba8</link>
      <guid>https://dev.to/rthefounding/using-inheritance-so-you-don-t-repeat-yourself-ba8</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;There's a principle in programming called Don't Repeat Yourself (DRY). The reason repeated code is a problem is because any change requires fixing code in multiple places. This usually means more work for programmers and more room for errors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Notice in the example below that the &lt;code&gt;eat&lt;/code&gt; method is shared by &lt;code&gt;Cat&lt;/code&gt; and &lt;code&gt;Bear&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Cat(name) {
  this.name = name;
}

Cat.prototype = {
  constructor: Cat,
  eat: function() {
    console.log("nom nom nom");
  }
};

function Bear(name) {
  this.name = name;
}

Bear.prototype = {
  constructor: Bear,
  eat: function() {
    console.log("nom nom nom");
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;eat&lt;/code&gt; method is repeated in two places. The code can be edited to follow the DRY principle by creating a &lt;code&gt;supertype&lt;/code&gt; (or parent) called &lt;code&gt;Animal&lt;/code&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Animal() { }

Animal.prototype = {
  constructor: Animal,
  eat: function() {
    console.log("nom nom nom");
  }

};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Since &lt;code&gt;Animal&lt;/code&gt; includes the &lt;code&gt;eat&lt;/code&gt; method, you can remove it from &lt;code&gt;Cat&lt;/code&gt; and &lt;code&gt;Bear&lt;/code&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Cat(name) {
  this.name = name;
}

Cat.prototype = {
  constructor: Cat
};

function Bear(name) {
  this.name = name;
}

Bear.prototype = {
  constructor: Bear

};

function Animal() { }

Animal.prototype = {
  constructor: Animal,
  eat: function() {
    console.log("nom nom nom");
  }

};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We just edited the code in the spirit of DRY by moving the &lt;code&gt;eat&lt;/code&gt; method to the &lt;code&gt;Animal&lt;/code&gt; &lt;code&gt;supertype&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#inherit-behaviors-from-a-supertype"&gt;
  &lt;/a&gt;
  Inherit Behaviors from a Supertype
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;In the previous post, we created a &lt;code&gt;supertype&lt;/code&gt; called &lt;code&gt;Animal&lt;/code&gt; that defined behaviors shared by all animals:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Animal() { }
Animal.prototype.eat = function() {
  console.log("nom nom nom");
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;This and the next part will cover how to reuse &lt;code&gt;Animal's&lt;/code&gt; methods inside &lt;code&gt;Dog&lt;/code&gt; without defining them again. It uses a technique called inheritance. This challenge covers the first step: make an instance of the &lt;code&gt;supertype&lt;/code&gt; (or parent).
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let animal = Object.create(Animal.prototype);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;You could also use this,
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let animal = new Animal();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;but there are some disadvantages when using this syntax for inheritance, which are too complex for the scope of this example.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Object.create(obj)&lt;/code&gt; creates a new object, and sets &lt;code&gt;obj&lt;/code&gt; as the new object's &lt;code&gt;prototype&lt;/code&gt;. Recall that the &lt;code&gt;prototype&lt;/code&gt; is like the "recipe" for creating an object. By setting the &lt;code&gt;prototype&lt;/code&gt; of &lt;code&gt;animal&lt;/code&gt; to be &lt;code&gt;Animal's&lt;/code&gt; &lt;code&gt;prototype&lt;/code&gt;, you are effectively giving the &lt;code&gt;animal&lt;/code&gt; instance the same "recipe" as any other instance of &lt;code&gt;Animal&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Animal() { }

Animal.prototype = {
  constructor: Animal,
  eat: function() {
    console.log("nom nom nom");
  }
};

let beagle = Object.create(Animal.prototype)

beagle.eat(); // will display nom nom nom 
console.log(beagle instanceof Animal); // will display true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#setting-the-childs-prototype-to-an-instance-of-the-parent"&gt;
  &lt;/a&gt;
  Setting the Child's Prototype to an Instance of the Parent
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In the previous section you saw the first step for inheriting behavior from the &lt;code&gt;supertype&lt;/code&gt; (or parent) &lt;code&gt;Animal&lt;/code&gt;: making a new instance of &lt;code&gt;Animal&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This post covers the next step: set the &lt;code&gt;prototype&lt;/code&gt; of the &lt;code&gt;subtype&lt;/code&gt; (or child)—in this case, &lt;code&gt;Dog&lt;/code&gt;—to be an instance of &lt;code&gt;Animal&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Dog.prototype = Object.create(Animal.prototype);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Remember that the &lt;code&gt;prototype&lt;/code&gt; is like the "recipe" for creating an object. In a way, the recipe for &lt;code&gt;Dog&lt;/code&gt; now includes all the key "ingredients" from &lt;code&gt;Animal&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Animal() { }

Animal.prototype = {
  constructor: Animal,
  eat: function() {
    console.log("nom nom nom");
  }
};

function Dog() { }

Dog.prototype = Object.create(Animal.prototype); // &amp;lt;----

let beagle = new Dog();
beagle.eat(); // will display when console.log nom nom nom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;beagle&lt;/code&gt; inherits all of &lt;code&gt;Animal's&lt;/code&gt; properties, including the &lt;code&gt;eat&lt;/code&gt; method.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#resetting-an-inherited-constructor-property"&gt;
  &lt;/a&gt;
  Resetting an Inherited Constructor Property
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When an object inherits its &lt;code&gt;prototype&lt;/code&gt; from another object, it also inherits the supertype's constructor property.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Here's an example:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Dog() { }
Dog.prototype = Object.create(Animal.prototype);
let beagle = new Dog();
beagle.constructor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;But &lt;code&gt;beagle&lt;/code&gt; and all instances of &lt;code&gt;Dog&lt;/code&gt; should show that they were constructed by &lt;code&gt;Dog&lt;/code&gt; and not &lt;code&gt;Animal&lt;/code&gt;. To do so, you can manually set &lt;code&gt;Dog's&lt;/code&gt; constructor property to the Dog object:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Animal() { }
function Dog() { }

Dog.prototype = Object.create(Animal.prototype);

Dog.prototype.constructor = Dog;

let beagle = new Dog();

console.log(beagle.constructor); // will display [Function: Dog]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#add-methods-after-inheritance"&gt;
  &lt;/a&gt;
  Add Methods After Inheritance
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;A constructor function that inherits its &lt;code&gt;prototype&lt;/code&gt; object from a &lt;code&gt;supertype&lt;/code&gt; constructor function can still have its own methods in addition to inherited methods.&lt;/li&gt;
&lt;li&gt;For example, &lt;code&gt;Dog&lt;/code&gt; is a constructor that inherits its &lt;code&gt;prototype&lt;/code&gt; from Animal:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Animal() { }
Animal.prototype.eat = function() { console.log("nom nom nom"); };

function Dog() { }
Dog.prototype = Object.create(Animal.prototype);
Dog.prototype.constructor = Dog;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In addition to what is inherited from &lt;code&gt;Animal&lt;/code&gt;, you want to add behavior that is unique to &lt;code&gt;Dog&lt;/code&gt; objects. Here, &lt;code&gt;Dog&lt;/code&gt; will get a &lt;code&gt;bark()&lt;/code&gt; function. Functions are added to &lt;code&gt;Dog's&lt;/code&gt; &lt;code&gt;prototype&lt;/code&gt; the same way as any constructor function:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Dog.prototype.bark = function() {
  console.log("Woof!")
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now instances of &lt;code&gt;Dog&lt;/code&gt; will have both &lt;code&gt;eat()&lt;/code&gt; and &lt;code&gt;bark()&lt;/code&gt; methods.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Animal() { }
Animal.prototype.eat = function() { console.log("nom nom nom"); };

function Dog() { }

Dog.prototype = Object.create(Animal.prototype);
Dog.prototype.constructor = Dog;
Dog.prototype.bark = function() {  // &amp;lt;----
  console.log("Woof!")
}

let beagle = new Dog();
beagle.eat();
beagle.bark()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;beagle.eat()&lt;/code&gt; would display the string &lt;code&gt;nom nom nom&lt;/code&gt; in the console, and &lt;code&gt;beagle.bark()&lt;/code&gt; would display the string &lt;code&gt;Woof!&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>devops</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Understanding Where an Object’s Prototype Comes From</title>
      <author>Randy Rivera</author>
      <pubDate>Thu, 10 Jun 2021 21:19:36 +0000</pubDate>
      <link>https://dev.to/rthefounding/understanding-where-an-object-s-prototype-comes-from-4a64</link>
      <guid>https://dev.to/rthefounding/understanding-where-an-object-s-prototype-comes-from-4a64</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Just like people inherit genes from their parents, an object inherits its &lt;code&gt;prototype&lt;/code&gt; directly from the constructor function that created it. For example, here the &lt;code&gt;Dog&lt;/code&gt; constructor creates the &lt;code&gt;beagle&lt;/code&gt; object:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Dog(name) {
  this.name = name;
}

let beagle = new Dog("Snoopy");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;beagle&lt;/code&gt; inherits its &lt;code&gt;prototype&lt;/code&gt; from the &lt;code&gt;Dog&lt;/code&gt; constructor function. You can show this relationship with the &lt;code&gt;isPrototypeOf&lt;/code&gt; method:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Dog.prototype.isPrototypeOf(beagle);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;This would return &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#understand-the-prototype-chain"&gt;
  &lt;/a&gt;
  Understand the Prototype Chain
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;All objects in JavaScript (with a few exceptions) have a &lt;code&gt;prototype&lt;/code&gt;. Also, an object’s &lt;code&gt;prototype&lt;/code&gt; itself is an object.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Dog(name) {
  this.name = name;
}

typeof Dog.prototype; // yields object
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Because a &lt;code&gt;prototype&lt;/code&gt; is an object, a &lt;code&gt;prototype&lt;/code&gt; can have its own &lt;code&gt;prototype&lt;/code&gt;! In this case, the &lt;code&gt;prototype&lt;/code&gt; of &lt;code&gt;Bird.prototype&lt;/code&gt; is &lt;code&gt;Object.prototype&lt;/code&gt;:&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How is this useful? You may recall the &lt;code&gt;hasOwnProperty&lt;/code&gt; method from a previous post:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let beagle = new Dog("Snoopy");
beagle.hasOwnProperty("name");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;hasOwnProperty&lt;/code&gt; method is defined in &lt;code&gt;Object.prototype&lt;/code&gt;, which can be accessed by &lt;code&gt;Dog.prototype&lt;/code&gt;, which can then be accessed by beagle. This is an example of the &lt;code&gt;prototype&lt;/code&gt; chain. In this &lt;code&gt;prototype&lt;/code&gt; chain, &lt;code&gt;Dog&lt;/code&gt; is the &lt;code&gt;supertype&lt;/code&gt; for &lt;code&gt;beagle&lt;/code&gt;, while &lt;code&gt;beagle&lt;/code&gt; is the &lt;code&gt;subtype&lt;/code&gt;. &lt;code&gt;Object&lt;/code&gt; is a &lt;code&gt;supertype&lt;/code&gt; for both &lt;code&gt;Dog&lt;/code&gt; and &lt;code&gt;beagle&lt;/code&gt;. &lt;code&gt;Object&lt;/code&gt; is a &lt;code&gt;supertype&lt;/code&gt; for all objects in JavaScript. Therefore, any object can use the &lt;code&gt;hasOwnProperty&lt;/code&gt; method.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>devops</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Crafting a React/Next.js Single Page Application Optimized for SEO</title>
      <author>Colby Fayock</author>
      <pubDate>Thu, 10 Jun 2021 20:59:21 +0000</pubDate>
      <link>https://dev.to/colbyfayock/crafting-a-react-next-js-single-page-application-optimized-for-seo-54fk</link>
      <guid>https://dev.to/colbyfayock/crafting-a-react-next-js-single-page-application-optimized-for-seo-54fk</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;In a rush? Skip to &lt;a href="#tutorial"&gt;tutorial steps&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What's the first thing you do when you are looking for something?&lt;/p&gt;

&lt;p&gt;If you're like me, you probably pull out your phone and search for it on Google. It makes optimizing websites for search engines more important than ever. And as a developer, I get it, SEO is a critical part of any business’ online presence. It's my job to be sure our tools can support that effort of being easily visible on search engine results pages. &lt;/p&gt;

&lt;p&gt;And since React is the &lt;a href="https://medium.com/javascript-scene/top-javascript-frameworks-and-tech-trends-for-2021-d8cb0f7bda69"&gt;most popular JavaScript framework&lt;/a&gt;, these tools will most likely be related to it or React frameworks like Next.js.&lt;/p&gt;

&lt;p&gt;But, how can we be sure our React dynamic applications are SEO-friendly for our favorites robot crawlers to understand?&lt;/p&gt;

&lt;p&gt;That's when the real work comes in. Stop googling: "SEO with react" 'cause you're are at the right place to get started, my friends!&lt;/p&gt;

&lt;p&gt;It’s exactly what we'll explore today. How Next.js can help give an SEO boost to our React-powered SPA.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k2wg_lW4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205868/seo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k2wg_lW4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205868/seo.png" alt="Single Page Application SEO Next.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, I’ll walk through the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What’s a SPA?&lt;/li&gt;
&lt;li&gt;What are the challenges with SPA SEO?&lt;/li&gt;
&lt;li&gt;Why is SEO important?&lt;/li&gt;
&lt;li&gt;What is Next.js?&lt;/li&gt;
&lt;li&gt;How to get started building SEO-friendly React apps with Next.js?&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;For more tech-agnostic info about single-page application SEO, check out this &lt;a href="https://snipcart.com/spa-seo"&gt;in-depth guide&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-spa"&gt;
  &lt;/a&gt;
  What is a SPA?
&lt;/h2&gt;

&lt;p&gt;A SPA (or Single Page Application) is a type of web application that provides a dynamic and interactive experience all from one point of entry.&lt;/p&gt;

&lt;p&gt;Traditionally, you might be more familiar with a server-side approach, where each page of your website has its own “route” (or page URL), but with a SPA, you have a single route that loads up the entire website in the browser using &lt;a href="https://snipcart.com/blog/javascript-beginner-intro-exercises"&gt;JavaScript&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s a little easier to get your head around it with an example. If you’re building a React application, React needs to "mount" onto a page element. You can do this by serving a page like index.html to your visitor, then in the browser, React will provide that mounting action based on your instructions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G2l3VVBY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205856/create-react-app-mounting-point.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G2l3VVBY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205856/create-react-app-mounting-point.png" alt="Create React App mount point"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once that page mounts, React kicks in and enables you to do whatever you want. Whether it’s providing simple things for the visitor to interact with or providing some routing mechanism to change pages, in this example, that entire experience originated from that single page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-makes-singlepage-application-seo-challenging"&gt;
  &lt;/a&gt;
  What makes single-page application SEO challenging?
&lt;/h2&gt;

&lt;p&gt;Part of the issue of serving an entire application based on a single entry point (index.html) is when Google is trying to look at that URL, they’re only ever going to be able to see the content and metadata from that single initial page.&lt;/p&gt;

&lt;p&gt;This limits what pages you can make available to Google, ultimately hurting your ability to index more content. It’s that indexed content that makes your website or application discoverable by search engines.&lt;/p&gt;

&lt;p&gt;Also, traditionally, a single-page application leans heavily on JavaScript to provide a dynamic experience. For many simple use cases, this might be completely fine, as &lt;a href="https://developers.google.com/search/docs/guides/javascript-seo-basics"&gt;Google can support&lt;/a&gt; a limited amount of JavaScript when crawling the page, but this isn't true of all search engines.&lt;/p&gt;

&lt;p&gt;With these challenges, we start to lose our competitive advantage when trying to make use of one of the biggest potential traffic sources on the web.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-seo-important"&gt;
  &lt;/a&gt;
  Why is SEO important?
&lt;/h2&gt;

&lt;p&gt;SEO (Search Engine Optimization) is the practice of helping search engines more easily read and understand what your website or application is about.&lt;/p&gt;

&lt;p&gt;This is critical if your goal is to bring as many people as you can to your website. The goal of people researching on the internet is to ultimately find something, and that something can be your business or the content you’re trying to promote. More traffic (visitors) means more potential sales (or customers) for your business.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CoEHRrAe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205866/snipcart-seo-google.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CoEHRrAe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205866/snipcart-seo-google.png" alt="SEO for “Add a Shopping Cart to Any Websites in Minutes”"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Search engines are constantly getting smarter, with hardworking teams at Google, Bing, Duck Duck Go, and other engines constantly fine-tuning search algorithms. But we wouldn’t need to write this article if they were perfect. While they might be able to figure out what your blog post is broadly about or what types of products your business sells, it’s limited by what information you provide and how you provide it.&lt;/p&gt;

&lt;p&gt;If you’re solely relying on a SPA that is hard to crawl and doesn’t give much information on that first and only page that Google can see, you’re missing out on potential opportunities. People could have found your content instead of your competitors when searching.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-nextjs-and-how-does-it-help-with-seo"&gt;
  &lt;/a&gt;
  What is Next.js, and how does it help with SEO?
&lt;/h2&gt;

&lt;p&gt;The awesome thing about the web is that not only are search engines getting smarter, but the tools we can use as developers are becoming more mature. It gives us ways to solve our SEO needs without sacrificing any functionality that makes a SPA great.&lt;/p&gt;

&lt;p&gt;Next.js is a web framework that sits on top of React, providing a bunch of features out of the box that can take our applications to another level.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jFPmS3Ha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205864/nextjs-homepage-features.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jFPmS3Ha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205864/nextjs-homepage-features.png" alt="Next.js homepage features list"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the example of our traditional SPA, we had a single index.html file. React would mount the application in the browser and handle any interactions and page navigation in that file.&lt;/p&gt;

&lt;p&gt;A different approach would be to have .html files for all of our pages. For each visited page, React would mount the application and content for that particular page (e.g., About page, Contact page) rather than loading from the initial homepage.&lt;/p&gt;

&lt;p&gt;To do that, Next.js has a few different techniques and APIs that developers can interface with to make sure we’re providing as much SEO value as we can.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#static-site-generation"&gt;
  &lt;/a&gt;
  Static Site Generation
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://snipcart.com/blog/choose-best-static-site-generator"&gt;Static Site Generation (SSG)&lt;/a&gt; is the practice of pre-rendering some or all of the pages of a website/application ahead of the browser at compile time. The index.html would include most, if not all, of the experience that will get loaded in the browser.&lt;/p&gt;

&lt;p&gt;This works wherever the website or application is compiled from, that server or environment will bring in any data sources and use React to build the website just like it would inside the browser, but export it into an HTML file. This file would then get served to the visitor.&lt;/p&gt;

&lt;p&gt;React would still “hydrate” the page and provide the ability to add a more dynamic experience. However, by pre-rendering, you’re able to reduce the amount of work the browser has to do to get your visitor the experience you want to give them.&lt;/p&gt;

&lt;p&gt;Each of these pages is located in individual “routes,” like mentioned before. Visitors, or in our case, search engine crawlers, would then be able to go directly to the page and see the content specific to that page.&lt;/p&gt;

&lt;p&gt;This means that not only can we have page-specific metadata, like a title and description, but the search engine can also read and understand that page’s content and recommend it to people based on their searches.&lt;/p&gt;

&lt;p&gt;Nevertheless, rendering pages at compile time comes with its limitation. The information that can be sent immediately to the browser is limited because of its static nature. While we can still load that dynamically in the browser, some use cases may need a completely dynamic experience that could be challenging to accomplish.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serverside-rendering"&gt;
  &lt;/a&gt;
  Server-side Rendering
&lt;/h3&gt;

&lt;p&gt;Server-side Rendering (SSR) provides a similar concept to Static Site Generation. Still, instead of compiling each page ahead of time into static files, that experience will be rendered by React at request time. For instance, if your visitor is trying to visit the Contact page (/contact), the server will recognize the route that is being visited, fetch all information related to that page, compile the HTML, and return it as part of the initial response.&lt;/p&gt;

&lt;p&gt;Similar to SSG, using this technique, you can leverage the ability to provide page-specific information and context to both our visitors and search engines. This way, we make sure our content is as searchable as it can be.&lt;/p&gt;

&lt;p&gt;While both options work well for providing good SEO, there are some tradeoffs with SSG and SSR. We won't get into this article, but it should be considered when &lt;a href="https://www.netlify.com/blog/2020/12/02/next.js-should-i-use-ssr-or-ssg/"&gt;making the decision&lt;/a&gt; for your website or application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nextjs-head-component"&gt;
  &lt;/a&gt;
  Next.js Head Component
&lt;/h3&gt;

&lt;p&gt;Regardless of the option you choose, a challenging part of using tools like React for building a web page is that these applications get mounted into the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body"&gt;&lt;/a&gt; of an HTML page. This means that you don’t have direct access, without &lt;a href="https://github.com/nfl/react-helmet"&gt;additional tools&lt;/a&gt;, to make any changes to places like the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head"&gt;&lt;/a&gt; of a website. It’s traditionally where a lot of key metadata lives for describing your content to search engines.&lt;/p&gt;

&lt;p&gt;This includes things like your title, description, and any Open Graph data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Add a Shopping Cart to Any Website in Minutes - Snipcart&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Add a shopping cart to your site in minutes. Works with any site builder, CMS, and framework. 20 000+ merchants trust our e-commerce solution for their website. Join them!"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Add a Shopping Cart to Any Website in Minutes - Snipcart"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Add a shopping cart to your site in minutes. Works with any site builder, CMS, and framework. 20 000+ merchants trust our e-commerce solution for their website. Join them!"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:url"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https://snipcart.com/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:type"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"website"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Luckily, Next.js ships with a &lt;a href="https://nextjs.org/docs/api-reference/next/head"&gt;H&lt;/a&gt;&lt;a href="https://nextjs.org/docs/api-reference/next/head"&gt;ead component&lt;/a&gt; out of the box that we can leverage to make sure all of our pages include those important details that need to get rendered into our page.&lt;/p&gt;

&lt;p&gt;You can first import the head component to make it work, then include it as a child of a Next.js page. You can then add anything you want to the Head.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;IndexPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Add a Shopping Cart to Any Website in Minutes - Snipcart&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Add a shopping cart to your site in minutes. Works with any site builder, CMS, and framework. 20 000+ merchants trust our e-commerce solution for their website. Join them!"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Add a Shopping Cart to Any Website in Minutes - Snipcart"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Add a shopping cart to your site in minutes. Works with any site builder, CMS, and framework. 20 000+ merchants trust our e-commerce solution for their website. Join them!"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:url"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://snipcart.com/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:type"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"website"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next.js will recognize that metadata and do the hard work of lifting it up to the right location in your HTML document when the page is being rendered.&lt;/p&gt;

&lt;p&gt;This lets us end up with both the power of dynamic React pages and the ability to craft that information for Google carefully!&lt;/p&gt;

&lt;h2 id="tutorial"&gt; Getting started with building SEO-friendly React apps with Next.js &lt;/h2&gt;

&lt;p&gt;Now let’s see how this works in action!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Feel free to follow the steps in this video!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8BrZeaw3sLQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you enjoy this, feel free to like, share &amp;amp; subscribe to his channel! :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We’ll start by building a React application from scratch then using the Next.js Head component to add metadata to our pages.&lt;/p&gt;

&lt;p&gt;Because we gain the ability to manage that metadata through various pages with Next.js, we’ll look at how we can customize it for new static pages and generate that metadata for dynamic pages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-0-creating-a-new-react-app-with-nextjs"&gt;
  &lt;/a&gt;
  Step 0: Creating a new React app with Next.js
&lt;/h3&gt;

&lt;p&gt;We can start by creating a new Next.js application from scratch using &lt;a href="https://nextjs.org/docs/api-reference/create-next-app"&gt;Create Next App&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In your terminal, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    yarn create next-app my-seo-app
    &lt;span class="c"&gt;# or&lt;/span&gt;
    npx create-next-app my-seo-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: you can update &lt;code&gt;my-seo-app&lt;/code&gt; to whatever name you'd like to give the project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After running this command, Next.js will make a local copy of a starter application template and install the dependencies to get the project ready to go.&lt;/p&gt;

&lt;p&gt;Once it’s finished, you can navigate to that directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    &lt;span class="nb"&gt;cd &lt;/span&gt;my-seo-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you can start up your Next.js development server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    yarn dev
    &lt;span class="c"&gt;# or&lt;/span&gt;
    npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When loaded, Next.js will let you know the server is running at &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;. If you open that up in your browser, you can see your new Next.js site!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TaMR94w9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205857/new-nextjs-app.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TaMR94w9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205857/new-nextjs-app.png" alt="New Next.js app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, feel free to look around the code inside of your new project and get ready for the next step!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-updating-nextjs-homepage-seo-metadata"&gt;
  &lt;/a&gt;
  Step 1: Updating Next.js homepage SEO metadata
&lt;/h3&gt;

&lt;p&gt;When creating a new Next.js application, the framework starts with a homepage that includes some sample content.&lt;/p&gt;

&lt;p&gt;Additionally, its conventionality includes the Next.js Head component out of the box, first imported at the top of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As well as a few sample pieces of metadata:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Create Next App&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Generated by create next app"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/favicon.ico"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’re making our Head component available in this instance, then adding a title, description, and a &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Favicon"&gt;favicon&lt;/a&gt;. If we view this page's source code in the browser, we can see this metadata as well as other things that Next.js is managing for us:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eVC890nR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205861/nextjs-default-metadata.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eVC890nR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205861/nextjs-default-metadata.png" alt="HTML Head managed by Next.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we wanted to update this with our own title and description, we can easily do so by simply changing those values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My Clothing Store&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Come to my store for great apparel!"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/favicon.ico"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MERL9GTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205860/nextjs-custom-metadata.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MERL9GTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205860/nextjs-custom-metadata.png" alt="Updated metadata in Next.js head"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we can see, Next.js is now using the values that we updated in our code.&lt;/p&gt;

&lt;p&gt;We can even change the image for our favicon located at &lt;code&gt;public/favicon.ico&lt;/code&gt; or completely change the link!&lt;/p&gt;

&lt;p&gt;If we wanted, we could also add more fields, such as the Open Graph title and description we saw earlier:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My Clothing Store&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Come to my store for great apparel!"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"My Clothing Store"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Come to my store for great apparel!"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:url"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://myclothingstore.com/"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:type"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"website"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/favicon.ico"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And just like before, Next.js updates that metadata.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XUiXj0Fo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205865/nextjs-open-graph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XUiXj0Fo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205865/nextjs-open-graph.png" alt="Updated metadata in Next.js app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This gives us the ability to craft our page's metadata exactly how we'd like it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/colbyfayock/my-seo-app/commit/77b3d5dee371dc4e95269887c58e36daa9839999"&gt;Follow along with the commit on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-creating-a-new-page-with-custom-seo-metadata-in-nextjs"&gt;
  &lt;/a&gt;
  Step 2: Creating a new page with custom SEO metadata in Next.js
&lt;/h3&gt;

&lt;p&gt;As we’ve seen earlier, one of the main benefits of Next.js, when it comes to SEO, is the ability to provide direct links to individual pages. It’s giving us the ability to customize the metadata on that page for Google and our visitors.&lt;/p&gt;

&lt;p&gt;To do that, we can create a new page and see exactly how that works!&lt;/p&gt;

&lt;p&gt;Create a new file inside of the &lt;code&gt;pages&lt;/code&gt; directory called &lt;code&gt;about.js&lt;/code&gt;. Inside &lt;code&gt;pages/about.js&lt;/code&gt;, add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/Home.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              About My Clothing Store
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a new page called “About” at the route &lt;code&gt;/about&lt;/code&gt;. We can test this out by opening up our browser and visiting &lt;a href="http://localhost:3000/about"&gt;http://localhost:3000/about&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A_Pi1sxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205859/nextjs-about-page.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A_Pi1sxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205859/nextjs-about-page.png" alt="New about page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While this page is simple, you can see that we could easily create a new page that can be accessed directly by the URL.&lt;/p&gt;

&lt;p&gt;Since we’re still inside React, we keep the same SPA capabilities, but we can additionally create content specific to each page without sacrificing SEO or user experience.&lt;/p&gt;

&lt;p&gt;To see how this works with metadata, let’s add the Next.js Head component. At the top of &lt;code&gt;pages/about.js&lt;/code&gt; import the Head component by adding:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, inside of our wrapper &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element, let's add our Head component along with some metadata for our page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About - My Clothing Store&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"The story behind My Clothing Store!"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"About - My Clothing Store"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"The story behind My Clothing Store!"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:url"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://myclothingstore.com/about"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:type"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"website"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/favicon.ico"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just like on our homepage, we’re adding a title, description, some Open Graph data, and even the same favicon as before.&lt;/p&gt;

&lt;p&gt;If we now open this up in our browser and look at the source, we can now see that our About page shows the metadata specific to that page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--szoyjXJZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205858/nextjs-about-page-metadata.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--szoyjXJZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205858/nextjs-about-page-metadata.png" alt="Metadata specific to our About page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By taking advantage of Next.js’s ability to have multiple pages with custom content and metadata, we’re able to help Google understand what each of our pages is about!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/colbyfayock/my-seo-app/commit/4ec773c6bf731b52388b033dbc967e131ae6e516"&gt;Follow along with the commit on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-generating-seo-metadata-for-dynamic-pages-in-nextjs"&gt;
  &lt;/a&gt;
  Step 3: Generating SEO metadata for dynamic pages in Next.js
&lt;/h3&gt;

&lt;p&gt;Adding a new static page with Next.js is relatively straightforward. We create a new file with the route we’d like to be available and generate a React component with the content. However, dynamic pages are a little trickier in that they’re dynamic.&lt;/p&gt;

&lt;p&gt;While we’re not going to get super deep into how &lt;a href="https://www.dummies.com/web-design-development/dynamic-web-pages-work/"&gt;dynamic pages work&lt;/a&gt;, we can still go through a basic example to get an idea of how we can dynamically manage the metadata on our page.&lt;/p&gt;

&lt;p&gt;Let’s get started by creating a new folder called &lt;code&gt;products&lt;/code&gt;, and inside of that folder, create a new file called &lt;code&gt;[productId].js&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: that’s not a typo. The filename should have the brackets around the &lt;code&gt;productId&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This will create a &lt;a href="https://nextjs.org/docs/routing/dynamic-routes"&gt;dynamic route&lt;/a&gt; in Next.js, allowing us to manage the way multiple pages look and work by defining which pages we want available and the dynamic data inside of it.&lt;/p&gt;

&lt;p&gt;Inside of &lt;code&gt;products/[productId].js&lt;/code&gt; add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../styles/Home.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;productId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Product ID: &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;productId&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;productId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;productId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Product &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;productId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;productId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we’re creating an example of routes inside Next.js with getStaticPaths to show how we can manage our dynamic metadata. Typically the paths would be built based on dynamic content, such as an API request or data file.&lt;/p&gt;

&lt;p&gt;A quick breakdown of what we’re doing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We're creating a new page with content similar to Step 2.&lt;/li&gt;
&lt;li&gt;We’re defining &lt;a href="https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation"&gt;getStaticProps&lt;/a&gt;, which takes an argument including the dynamic value of a parameter. This parameter has the same name as the filename we created, &lt;code&gt;productId.js&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When receiving that parameter value, we’re defining a simple title and productId, which will be passed in as props to our page component.&lt;/li&gt;
&lt;li&gt;We’re defining &lt;a href="https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation"&gt;getStaticPaths&lt;/a&gt;, where we’re using a new array to simulate a list of dynamic data.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: understanding how getStaticProps and getStaticPaths work isn't critical to understanding the use of dynamic data in our page component, but it will help follow along with the example!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Save that file, restart your development server, and now open &lt;code&gt;/products/5&lt;/code&gt; at &lt;a href="http://localhost:3000/products/5"&gt;http://localhost:3000/products/5&lt;/a&gt; in your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qaSO6qhS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205863/nextjs-dynamic-product-page.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qaSO6qhS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205863/nextjs-dynamic-product-page.png" alt="Dynamic page with product #5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see that we’re passing in the title and product ID dynamically from our page!&lt;br&gt;
Similarly, if we go to &lt;code&gt;/products/3&lt;/code&gt; (or any number between 1-5 in this example), we’ll see a similar page.&lt;/p&gt;

&lt;p&gt;Now that we’re using dynamic data on our page, we can use that same data to create our metadata.&lt;/p&gt;

&lt;p&gt;Just like before, first import the Next.js Head component at the top of the page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add the following to the page component of &lt;code&gt;pages/[productId].js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt; - My Clothing Store&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`Learn more about &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; - My Clothing Store`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`Learn more about &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:url"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`https://myclothingstore.com/products/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;productId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:type"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"website"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/favicon.ico"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this snippet, we’re adding the metadata to the Head component. However, this time, we’re dynamically setting all of our values’ metadata using our product’s title and product ID.&lt;/p&gt;

&lt;p&gt;If we open up the browser, we can see that our Head has those dynamic values!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4smBgsEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205862/nextjs-dynamic-page-metadata.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4smBgsEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205862/nextjs-dynamic-page-metadata.png" alt="Screen Shot 2021-05-31 at 17.29.02.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/colbyfayock/my-seo-app/commit/8d0ce71f0bc0a3f87037826f3f887f3bf1ba1196"&gt;Follow along with the commit on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Live demo &lt;a href="https://my-seo-app.netlify.app/"&gt;here&lt;/a&gt;&lt;br&gt;
GitHub repo &lt;a href="https://github.com/colbyfayock/my-seo-app"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-else-can-we-do-for-better-seo"&gt;
  &lt;/a&gt;
  What else can we do for better SEO?
&lt;/h2&gt;

&lt;p&gt;Using the Next.js Head component along with its page creation strategies can help us carefully craft our experience for both our visitors and Google. Still, there’s more we can do to make sure we’re always maximizing our SEO efforts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#analyze-and-monitor-with-google-webmaster-tools-and-webdev"&gt;
  &lt;/a&gt;
  Analyze and monitor with Google Webmaster Tools and web.dev
&lt;/h3&gt;

&lt;p&gt;One of the first things we can always do is a test to make sure our website or application covers the basics.&lt;/p&gt;

&lt;p&gt;Luckily Google provides some free tools to handle this, including the &lt;a href="https://search.google.com/search-console/about"&gt;Search Console&lt;/a&gt; and &lt;a href="https://web.dev/"&gt;web.dev&lt;/a&gt; which will also test performance and accessibility. Performance and accessibility also happen to help SEO.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-a-sitemap"&gt;
  &lt;/a&gt;
  Adding a sitemap
&lt;/h3&gt;

&lt;p&gt;Adding a sitemap to your website probably isn’t as critical as it used to be. Google can crawl your site pretty efficiently, but it’s still a helpful way to make sure all of your content is getting hit.&lt;/p&gt;

&lt;p&gt;While you can’t do this out of the box with Next.js, there are plugins to help, such as the &lt;a href="https://github.com/IlusionDev/nextjs-sitemap-generator"&gt;Next.js Sitemap Generator&lt;/a&gt; or a custom approach like the one I added to my &lt;a href="https://github.com/colbyfayock/next-wordpress-starter/blob/main/plugins/sitemap.js"&gt;Next.js WordPress Starter&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optimizing-for-social-media-with-open-graph"&gt;
  &lt;/a&gt;
  Optimizing for social media with Open Graph
&lt;/h3&gt;

&lt;p&gt;We lightly touched on Open Graph in the tutorial, but there’s a wide variety of metadata tags and use cases that make Open Graph an important part of your SEO work.&lt;/p&gt;

&lt;p&gt;Websites like Facebook and Twitter and apps like Discord and Slack all use Open Graph tags to pull in metadata, including what the link is about and which image they show.&lt;/p&gt;

&lt;p&gt;By optimizing your Open Graph tags, you can make sure those big images show up in social feeds whenever your website content is shared.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts
&lt;/h2&gt;

&lt;p&gt;SEO is a critical part of bringing in traffic to your website/application and, ultimately, your business. Ensuring things are working and looking as they should is an important part of how your business appears on search result pages.&lt;/p&gt;

&lt;p&gt;While React alone tends to struggle with providing a good overall SEO experience, we have many tools in our belt to help, like Next.js. These tools give us powerful frameworks to provide both a great experience to our customers and the search engines trying to crawl our websites.&lt;/p&gt;

&lt;p&gt;Regardless of the tools you use, be sure to test your SEO periodically. Just like maintaining any physical aspect of a business, we want to make sure our online presence is working for us as hard as it can!&lt;/p&gt;

</description>
      <category>react</category>
      <category>nextjs</category>
      <category>seo</category>
    </item>
    <item>
      <title>JavaScript "plain" Object</title>
      <author>Romeo Agbor Peter</author>
      <pubDate>Thu, 10 Jun 2021 20:27:30 +0000</pubDate>
      <link>https://dev.to/romeopeter/javascript-plain-object-52eh</link>
      <guid>https://dev.to/romeopeter/javascript-plain-object-52eh</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;small&gt;&lt;b&gt;NOTE:&lt;/b&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;The term "object" denotes two kinds of objects: the &lt;strong&gt;key-value data structure&lt;/strong&gt; in JavaScript, and the popular but opinionated programming methodology: &lt;strong&gt;OOP&lt;/strong&gt; . This article is about the latter type of object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#object-data-type"&gt;
  &lt;/a&gt;
  Object data type
&lt;/h2&gt;

&lt;p&gt;In JavaScript, [almost] everything is an object. To understand the language in-depth, you first have to know what objects are and how they work.&lt;/p&gt;

&lt;p&gt;An object is used to store key-value data. It allows for various data and complex entities to be stored. Entities within an object are known as properties. A property is a "key-value" pair, where the &lt;strong&gt;key&lt;/strong&gt; is the property name and &lt;strong&gt;value&lt;/strong&gt; can be anything&lt;/p&gt;

&lt;p&gt;To create an object, the curly braces &lt;code&gt;{...}&lt;/code&gt; is used with a list of optional properties. It's possible to initialize an empty object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Empty object using "object literal" syntax&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="c1"&gt;// Empty object using "object constructor" syntax&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When declaring an object, the curly braces {...} are preferred over the "object constructor". This is known as &lt;em&gt;Object literal.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#object-literal"&gt;
  &lt;/a&gt;
  Object Literal
&lt;/h2&gt;

&lt;p&gt;Inside the curly braces, we can put in properties separated by commas. All properties have a property name which is the key followed by a colon, and then the property value which can be anything.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// The object&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Romeo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// key "name" store value of "Romeo"&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// key "age" store value of 22&lt;/span&gt;
    &lt;span class="na"&gt;work&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Went to work&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;// key "work" store value of "Went to work"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reading a property that doesn't exist will return an undefined value. This means the property hasn't been declared or defined yet. Property values are accessed using the dot &lt;code&gt;.&lt;/code&gt; notation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Romeo&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is possible to add, remove and assign a value to a property. Values are removed or deleted using the &lt;code&gt;delete&lt;/code&gt; keyword. Values are assigned using the &lt;code&gt;=&lt;/code&gt; operator. If a property value already exists, it will replace it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Add a bolean value&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isChristian&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Delete property&lt;/span&gt;
&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;work&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// "work" property is deleted&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;work&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, property names that do not follow valid binding name have to be quoted, in other words, a property name can be multi worded. To access multi worded property names, the square bracket is used &lt;code&gt;[]&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#square-brackets"&gt;
  &lt;/a&gt;
  Square Brackets
&lt;/h2&gt;

&lt;p&gt;Square brackets are used to access multi worded property names in an object. The dot &lt;code&gt;.&lt;/code&gt; does not work for multi-word names.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Set property using square brackets&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;likes dogs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Access property using dot notation&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;likes&lt;/span&gt; &lt;span class="nx"&gt;dogs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Syntax Error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;user.likes dogs&lt;/code&gt; will throw an error because JavaScript reads &lt;code&gt;user.likes&lt;/code&gt; first, which is valid, but throws an error when it  gets to  &lt;code&gt;dogs&lt;/code&gt;. This is because when using dot notation, the property name can not contain spaces, numbers and special characters (_ and $ are allowed).&lt;/p&gt;

&lt;p&gt;The square brackets should be used for property names containing spaces (multi-word names).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Get property name&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;likes dogs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="c1"&gt;// Delete property name&lt;/span&gt;
&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;likes dogs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Square brackets allow accessing property names using expression. for instance, a variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;likes dogs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the square bracket notation, the properties of an object can be accessed by user input. Such flexibility can not be achieved with the dot notation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Zeus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Pitbull&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;What do you want to know about my pet? &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// access properties&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pet&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// "Pitbull" if user enter 'breed'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The square bracket gives more flexibility when accessing object properties, but more often than not you should be using the dot notation because of its simplicity and readability. Only use a square bracket when the need arises.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#object-property-shorthand"&gt;
  &lt;/a&gt;
  Object property short-hand
&lt;/h2&gt;

&lt;p&gt;When working on or reading an actual codebase, property names and values are often the same. This is due to accepting values from variables. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myPet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;breed&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;age&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myPet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Zeus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Pitbull&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Zeus&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, the object properties have the same values as the variables (function parameters). This is a common use-case but there is shorthand for it.&lt;/p&gt;

&lt;p&gt;Instead of having a  &lt;code&gt;type:type&lt;/code&gt; property of an object,  you can just have a &lt;code&gt;type&lt;/code&gt; and JavaScript will understand that the single value represents both the property name and property value.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myPet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// Property value shorthand&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Normal object and shorthand togethter is valid&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// same breed:breed&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#property-test"&gt;
  &lt;/a&gt;
  Property test.
&lt;/h2&gt;

&lt;p&gt;Accessing an object property that is not available or does not exist return an &lt;code&gt;undefined&lt;/code&gt; value. unlike other programming languages, JavaScript does not halt the program and throw an error.&lt;/p&gt;

&lt;p&gt;You can test if a property exist or not:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="nx"&gt;consolg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propertDoesNotExist&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns "true." property does not exist&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JavaScript has a special &lt;code&gt;in&lt;/code&gt; operator for testing if properties exist.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Pitbull&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;pet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// logs "Dog" pet.type exists&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;age&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;pet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// logs "undfined" pet.age doesn't exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why the &lt;code&gt;in&lt;/code&gt; operator is preferred for testing properties instead of comparing against &lt;code&gt;undefined&lt;/code&gt; is because property can exist but store undefined as the value.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pet&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Zeus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// type is "undefine" ...no such property&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;pet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// logs "true" Property exists&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;pet.type&lt;/code&gt; property above technically exist, but the &lt;code&gt;if (pet.type)&lt;/code&gt; test for a true or false condition didn't pass because the property name type is set to "undefined" explicitly.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;undefined&lt;/code&gt; values should not be explicitly set. you should prefer using null for unknown values.&lt;/p&gt;

&lt;p&gt;the &lt;code&gt;key in object&lt;/code&gt; condition will always work as long the key exists in the object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Let's go over what you've learned so far about JavaScript Object.&lt;/p&gt;

&lt;p&gt;An object is a data structure for storing key-value data.&lt;/p&gt;

&lt;p&gt;Data stored in an object are called properties, where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Property key or name must be string or symbol (_ and  $)&lt;/li&gt;
&lt;li&gt;Property value can be of any type&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To access  object properties, use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The dot notation &lt;code&gt;object.property&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The square bracket notation &lt;code&gt;object["property"]&lt;/code&gt;. You can take keys from expression using the square bracket&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additional Object operators:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;delete&lt;/code&gt; operator is used for deleting properties: &lt;code&gt;delete object.property&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;in&lt;/code&gt; operator is a special type of operator for testing object properties: &lt;code&gt;"key" in object&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To iterate over an object: &lt;code&gt;for (let key in obj)&lt;/code&gt; loop. (&lt;em&gt;Reserved for future update&lt;/em&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the basics that should be known for anybody starting JavaScript programming. The language has other built-in objects, like the Date, Array, Math and Error object. Understanding how they work isn't much of a brainer when you how the "plain" object works.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>systems</category>
    </item>
    <item>
      <title>Github actions tweaks</title>
      <author>Achilles Moraites</author>
      <pubDate>Thu, 10 Jun 2021 19:54:41 +0000</pubDate>
      <link>https://dev.to/achimoraites/github-actions-tweaks-23pa</link>
      <guid>https://dev.to/achimoraites/github-actions-tweaks-23pa</guid>
      <description>&lt;p&gt;Here there are some cool tricks you can do to improve your Github Actions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caching-your-packages"&gt;
  &lt;/a&gt;
  Caching your packages
&lt;/h2&gt;

&lt;p&gt;How many times you have re-installed all of your packages in your actions even when no packages were changed?&lt;br&gt;
This is not only time consuming but it can actually cost you more money as &lt;strong&gt;Github actions&lt;/strong&gt; are charged based on the time they actually run;&lt;br&gt;
you can &lt;a href="https://github.com/pricing"&gt;have a look here&lt;/a&gt; in case you are interested 😉&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How
&lt;/h3&gt;

&lt;p&gt;To cache our modules we will use the &lt;a href="https://github.com/actions/cache"&gt;&lt;code&gt;actions/cache@v2&lt;/code&gt;&lt;/a&gt; action&lt;/p&gt;

&lt;p&gt;Here is an example of caching npm dependencies for Linux/MacOS&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cache node_modules 📦&lt;/span&gt;
  &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
  &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;~/.npm&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}&lt;/span&gt;
    &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
      &lt;span class="s"&gt;${{ runner.os }}-node-&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/achimoraites/achimoraites.github.io/blob/master/.github/workflows/deploy-gh.yaml#L24-L31"&gt;Here you can see it in a Github Action used for deploying my svelte-kit powered blog to gh-pages&lt;/a&gt;&lt;/strong&gt; 🚀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-strings-based-on-env-variables"&gt;
  &lt;/a&gt;
  Create strings based on env variables
&lt;/h2&gt;

&lt;p&gt;There are times where you need to be able to create a string based on env variables.&lt;br&gt;
The most common case is when you want to create a path using one or more env variables;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;paths-printer 🦄&lt;/span&gt;

&lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;BASE_URL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;https://example.com/"&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;print-stuff&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create paths from env variables&lt;/span&gt;
        &lt;span class="c1"&gt;# this outputs "IMAGES_PATH: https://example.com/assets/img/"&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;echo  "IMAGES_PATH&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${env.IMAGES_PATH}"&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;IMAGES_PATH&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;env.BASE_URL&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}assets/img/"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#use-a-custom-npm-config"&gt;
  &lt;/a&gt;
  Use a custom npm config
&lt;/h2&gt;

&lt;p&gt;This is very handly when you are working with private packages 📦&lt;br&gt;
The idea is to store your PAT TOKEN for accessing your packages in your repository secrets and then use it on a custom npm config file.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;📝Note that we can just use the default &lt;code&gt;.npmrc&lt;/code&gt; but it is a good idea to keep the npm config for your github actions separated.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How
&lt;/h3&gt;

&lt;p&gt;In order for it to work we need to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;an npm config file 🦄

&lt;ul&gt;
&lt;li&gt;includes the configuration for our private github packages&lt;/li&gt;
&lt;li&gt;we will take the PAT TOKEN from an env variable&lt;/li&gt;
&lt;li&gt;we can name it anything that we want&lt;/li&gt;
&lt;li&gt;place it in the project root folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;set our action to use our npm config file ✨&lt;/li&gt;
&lt;li&gt;create a PAT TOKEN&lt;/li&gt;
&lt;li&gt;place the PAT TOKEN in our repository secrets&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lets have a look at a case where we are using private github packages&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Create the npm config file&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Create a file named &lt;code&gt;.ci.npmrc&lt;/code&gt; in the root folder of your project and place the following contents:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@your-scope:registry=https://npm.pkg.github.com
//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;💡 Remember to replace "@your-scope" with your scope&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Set the action to use our custom npm config file&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install dependencies ✨&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm ci&lt;/span&gt;
  &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;NPM_CONFIG_USERCONFIG&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.ci.npmrc&lt;/span&gt;
    &lt;span class="na"&gt;NODE_AUTH_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.PAT_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create your PAT TOKEN
Follow the &lt;a href="https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token"&gt;instructions here&lt;/a&gt;
When you are on the step 7 permissions and scopes:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;make sure to select the "write:packages" option!&lt;/li&gt;
&lt;li&gt;the "read:packages" is enabled as well
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nuJZvcRN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/080dgwlsui9wnrke1zec.jpg" alt="Github token scopes"&gt;
&lt;/li&gt;
&lt;li&gt;Continue to the next steps and keep your PAT TOKEN ready!&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Place the PAT TOKEN to your repo secrets&lt;/strong&gt;
Go to your repository on github:

&lt;ol&gt;
&lt;li&gt;Click on "⚙️settings" tab&lt;/li&gt;
&lt;li&gt;Select "Secrets"&lt;/li&gt;
&lt;li&gt;Click on "New repository secret"&lt;/li&gt;
&lt;li&gt;Set the "name" to be "&lt;strong&gt;PAT_TOKEN&lt;/strong&gt;"&lt;/li&gt;
&lt;li&gt;Paste your token in the "value"&lt;/li&gt;
&lt;li&gt;Select "Add secret"&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mKmDNLJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7bbz3gttu5ulziao31si.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mKmDNLJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7bbz3gttu5ulziao31si.jpg" alt="Github add secret"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary 👨🏻‍💻
&lt;/h3&gt;

&lt;p&gt;We have explored ways to improve the performance of our github actions using caching.&lt;/p&gt;

&lt;p&gt;Then we explored how we can create strings dynamically from env variables and finnaly we had a look in configuring our npm config for using private github packages in a secure and scalable way 😉.&lt;/p&gt;

&lt;p&gt;Happy coding 😄 !!!&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;The original post was published &lt;a href="https://achimoraites.github.io/blog/github-actions-tips-and-tricks/"&gt;here&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt;

</description>
      <category>github</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Normalization and Functional Dependencies in DBMS</title>
      <author>hebaShakeel</author>
      <pubDate>Thu, 10 Jun 2021 19:51:41 +0000</pubDate>
      <link>https://dev.to/hebashakeel/normalization-and-fds-in-dbms-3ac1</link>
      <guid>https://dev.to/hebashakeel/normalization-and-fds-in-dbms-3ac1</guid>
      <description>&lt;p&gt;&lt;strong&gt;Normalization&lt;/strong&gt; is the process of removing redundant(repetition) data from your tables in order to:&lt;br&gt;
1) improve storage efficiency&lt;br&gt;
2) data integrity and&lt;br&gt;
3) Scalability&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Normalization&lt;/strong&gt; is a technique to store data in database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anomalies(Problems) in DBMS&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Insert Anomaly:&lt;/strong&gt; Data cannot be inserted into a table because of another data due to some sort of violation.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WdMedKfj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tw2vs0h26lzj326grqf8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WdMedKfj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tw2vs0h26lzj326grqf8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Update Anomaly:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2TbEs2pH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfw6p4ktadlmo2ozpy8q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2TbEs2pH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfw6p4ktadlmo2ozpy8q.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Delete Anomaly:&lt;/strong&gt; In an attempt to delete some data, other useful data also gets deleted.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BqmHZr4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybis08p5hfh3eleec811.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BqmHZr4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybis08p5hfh3eleec811.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Functional Dependencies&lt;/strong&gt; :&lt;br&gt;
1) If an attribute or a set of attributes identify the whole tuple(row / record) uniquely then we can say it is functionally dependent.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aF9ienGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4x2jip85bwnvt49jjxm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aF9ienGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4x2jip85bwnvt49jjxm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
From this we can say X-&amp;gt;Y (X functionally determines Y).&lt;br&gt;
X : Determinant Attribute&lt;br&gt;
Y : Dependent Attribute&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Types of Functional Dependencies&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(i) Trivial Functional Dependency:&lt;/strong&gt;&lt;br&gt;
If X-&amp;gt;Y, and if Y is a subset of X, this is called a Trivial FD.&lt;br&gt;
Examples:&lt;br&gt;
 1) A-&amp;gt;A&lt;br&gt;
 2) A-&amp;gt;phi&lt;br&gt;
 3) AB-&amp;gt;B&lt;br&gt;
 4) ABC-&amp;gt;ABC&lt;br&gt;
 5) ABCD-&amp;gt;ACDB&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(ii) Non-Trivial Functional Dependency:&lt;/strong&gt;&lt;br&gt;
If X-&amp;gt;Y, and if Y is not a subset of X, this is called a Non-Trivial FD.&lt;br&gt;
Examples:&lt;br&gt;
 1) A-&amp;gt;BC&lt;br&gt;
 2) ABC-&amp;gt;BD&lt;br&gt;
 3) MNP-&amp;gt;JKL&lt;/p&gt;

&lt;p&gt;Stay tuned for the next topic!&lt;br&gt;
Thank You.&lt;/p&gt;

</description>
      <category>database</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Trying Your Best is really bad advice (and strategy)</title>
      <author>Zell Liew 🤗</author>
      <pubDate>Thu, 10 Jun 2021 19:48:32 +0000</pubDate>
      <link>https://dev.to/zellwk/how-and-when-to-use-async-and-defer-attributes-4hb7</link>
      <guid>https://dev.to/zellwk/how-and-when-to-use-async-and-defer-attributes-4hb7</guid>
      <description>&lt;p&gt;For a while I've been telling myself that it's okay as long as I tried my best. It's been a decent strategy for a long time, but it's not working for me anymore.   &lt;/p&gt;

&lt;p&gt;I want to explain why it doesn't work and what pitfalls you might want to watch out for if you use the same strategy in your life.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-rarely-try-our-best"&gt;
  &lt;/a&gt;
  We rarely try our best
&lt;/h2&gt;

&lt;p&gt;When have you actually tried your best? If you look back at your life, can you honestly tell yourself you've tried your best every time, especially for situations where you've failed? Can you count how many times you tried your best?   &lt;/p&gt;

&lt;p&gt;In my case, I only consider that I tried my best if I can be super focused on a piece of work, I get through it in one sitting and I don't stop no matter what challenges I face.   &lt;/p&gt;

&lt;p&gt;I have a second version of trying my best — and that's when sometimes I give up and take a break. When I come back, I put in more effort and try to get the work done, but I keep avoiding it. This repeats itself until I stop giving myself excuses and end up being focused.   &lt;/p&gt;

&lt;p&gt;In the second version, although I'm still exerting the same amount of effort, I kinda don't feel like I'm trying my best. That's because I'm avoiding my problems and I come back to them afterwards.   &lt;/p&gt;

&lt;p&gt;I also have a third version of trying my best — and that's when I do work until I'm completely exhausted. I may take scheduled breaks, but unless I collapse or get giddy from the work, I don't feel I'm doing my best yet. I can still push myself.   &lt;/p&gt;

&lt;p&gt;There's a fourth (and more extreme) version — &lt;strong&gt;If someone holds a gun to my head and makes me work, would I work faster and more effectively?&lt;/strong&gt; If I would, then I'm never really trying my best, am I?   &lt;/p&gt;

&lt;p&gt;The first three versions sound nice and logical. But I really use the fourth version when I'm evaluating whether I actually did my best. Most of the time, I would have to say no. Because if someone pointed a gun at me... I imagine I would forgo all of my obstacles and work like  crazy.   &lt;/p&gt;

&lt;p&gt;Here's the stupid part: &lt;strong&gt;I've never actually had someone put a gun to my head and made me work&lt;/strong&gt;, so I don't know what it actually feels like, and I don't know how I would work. &lt;strong&gt;But I do have an imagined version where I'm super productive and I use that version as my benchmark.&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;🤦‍♂️  &lt;/p&gt;

&lt;p&gt;So even when I exert lots of effort, I don't feel that I'm doing my best still. I feel there's more I can do, even though I'm already exhausted.   &lt;/p&gt;

&lt;p&gt;When I get the results of my work, I'm usually dissatisfied. &lt;strong&gt;I'm even dissatisfied when I get good results because I wished I could have put in more work&lt;/strong&gt; — and then maybe, just maybe, I could have yielded better results.   &lt;/p&gt;

&lt;p&gt;It's &lt;em&gt;a never-ending rabbit hole&lt;/em&gt;.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-wont-be-able-to-try-our-best-at-everything-all-at-once"&gt;
  &lt;/a&gt;
  We won't be able to try our best at everything all at once
&lt;/h2&gt;

&lt;p&gt;By my definition of trying my best, I would need to spend all my waking hours dedicated to one thing. I wouldn't have tried my best if I did any less.   &lt;/p&gt;

&lt;p&gt;But here's the problem: &lt;strong&gt;I have three important things at the top of my priority list&lt;/strong&gt; — personal development, work, and family. All three are important and I can't neglect one in favour of others.   &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If I need to spend time on all three priorities, how can I say I'm doing my best in each one?&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;I can, however, say I'm trying my best on everything at once.   &lt;/p&gt;

&lt;p&gt;But when I get results from any of these areas, &lt;strong&gt;I can't help but wonder what would have happened if I put in more effort in that one area&lt;/strong&gt;, maybe even at the expense of the other two... will I get more results? Maybe. And I'm scared that this is true because it means I'm not going all out yet.   &lt;/p&gt;

&lt;p&gt;So I'm always miserable because I feel I'm missing out on what's possible in my life. &lt;strong&gt;I'm perpetually living in FOMO&lt;/strong&gt; too.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-the-fact-is-we-cant-be-trying-our-best-all-the-time"&gt;
  &lt;/a&gt;
  But the fact is we can't be trying our best all the time
&lt;/h2&gt;

&lt;p&gt;If you studied statistics for a little bit, you know everything falls into a normal distribution curve. The amount of effort we put into our lives also falls into a normal distribution curve.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LhMQ1F0p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://zellwk.com/images/2021/trying-your-best/distribution-curve.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LhMQ1F0p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://zellwk.com/images/2021/trying-your-best/distribution-curve.png" alt="normal distribution curve line graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most of the time we'll spend our days putting in about 50% effort, plus minus ~35%. That means &lt;strong&gt;we spend between 15% and 85% effort on most things.&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;Sometimes we push ourselves harder than normal because that thing is important to us — like when we're rushing for a deadline before a holiday. We go beyond the amount of effort that we would normally put in.   &lt;/p&gt;

&lt;p&gt;On rare occasions, the stars align and we find something that's so important to us and that our emotions and motivations all align to the same thing. And we push extra hard. (Or well, perhaps when someone points a gun at my head I'll be this productive, maybe even more productive).   &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Statistics have already told use that we cannot be trying our best all the time. So trying our best is literally a strategy for failure — you can't succeed. It's impossible.&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;Trying your best means putting in effort that's above the 3 sigma level (far right of the curve). In a normal person's life, you'll only put in this amount of effort 0.2% of the time. You won't be able to sustain that effort for a long duration. It's like sprinting at top speed for a 100m race, but ensuring you consistently run at this speed for one month without rest.   &lt;/p&gt;

&lt;p&gt;Practically speaking, can you even do it? I know I can't.   &lt;/p&gt;

&lt;p&gt;Since we cannot possibly be putting in our best efforts all the time, can you honestly touch your heart and say you've tried your best? That you've given everything you got?   &lt;/p&gt;

&lt;p&gt;Unfortunately the answer is a clear no most of the time.   &lt;/p&gt;

&lt;p&gt;When no is the answer deep within, we know we haven't done what we intended to do. We slipped. We blame ourselves for not trying our best, which is why we're not getting the kind of results we want. All the blame goes onto us.   &lt;/p&gt;

&lt;p&gt;It's unhealthy and detrimental in the long run.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-create-false-upper-limits-if-you-fail"&gt;
  &lt;/a&gt;
  You create false upper limits if you fail
&lt;/h2&gt;

&lt;p&gt;If you believed (on any level) that you've done your best and the results you've achieved is less than what you hope for — then &lt;strong&gt;you would also believe that your (failed) results is the upper limit of what you can achieve&lt;/strong&gt;.   &lt;/p&gt;

&lt;p&gt;When you hit this upper limit again, you become dispirited and want to give up because you already believed you couldn't get past it — even at your best — so why try again? Why set yourself up for failure again when you know you're going to fail?   &lt;/p&gt;

&lt;p&gt;This limit assumes you're already at your best when you tried it before. Thankfully, humans aren't static creatures. We can evolve and grow. We can eventually break the upper limits as long as we continue working towards it.   &lt;/p&gt;

&lt;p&gt;But if you have labelled this upper limit as "your best", then &lt;strong&gt;it takes even more effort to break out of this limit&lt;/strong&gt; going forward. It would take tremendous courage, faith, and persistence to break any upper-boundaries you've set from the failure.   &lt;/p&gt;

&lt;p&gt;If it takes so much effort for you to get there, &lt;strong&gt;how much more effort would it take to go 1% more?&lt;/strong&gt; You'll feel dread thinking about pushing for an extra 1% every time.   &lt;/p&gt;

&lt;p&gt;So growth doesn't seem very possible. It seems daunting and exhausting. It doesn't seem fun at all. But we know we have to continue growing, so we go through life dreading and cursing at how we're not already good enough.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-impossible-to-try-and-relax-at-the-same-time"&gt;
  &lt;/a&gt;
  It's impossible to try and relax at the same time
&lt;/h2&gt;

&lt;p&gt;Trying is the act of applying force while relaxation is the act of removing force (hence removing tension).   &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can't try to relax. It's an oxymoron&lt;/strong&gt;. It's like telling someone to push and pull a door at the same time. So should they push more or should they pull more?  &lt;/p&gt;

&lt;p&gt;You're giving confused signals to your body when you're trying to relax. The most likely result is you toss and turn in bed, getting frustrated, never really resting, but wasting a lot of time and energy. What's the point?  &lt;/p&gt;

&lt;p&gt;Resting is an important part of sustainable effectiveness. If we cannot rest, we're shortchanging ourselves of the recovery needed for maximum productivity. We can't try to rest. We have to relax and let the rest settle in.   &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We can't work hard, play hard, rest hard.&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We need to work hard, play hard, and rest well.&lt;/strong&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-whats-a-better-alternative"&gt;
  &lt;/a&gt;
  So what's a better alternative?
&lt;/h2&gt;

&lt;p&gt;I don't have a clear answer, but I'm thinking about the normal distribution curve again.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LhMQ1F0p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://zellwk.com/images/2021/trying-your-best/distribution-curve.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LhMQ1F0p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://zellwk.com/images/2021/trying-your-best/distribution-curve.png" alt="normal distribution curve line graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we're putting in average amounts of effort most of the time, why don't we surrender ourselves to this fact? Why don't we &lt;strong&gt;allow ourselves to perform at our average&lt;/strong&gt; instead?   &lt;/p&gt;

&lt;p&gt;I can think of several benefits that I've experienced from consciously trying to use average effort — it all hinges on the space we create for ourselves when we're relaxed.   &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#we-still-get-similar-results-when-were-performing-with-average-effort"&gt;
  &lt;/a&gt;
  We still get similar results when we're performing with average effort
&lt;/h3&gt;

&lt;p&gt;Derek Sivers shared a &lt;a href="https://sive.rs/relax"&gt;bike ride experience&lt;/a&gt; a while back that resonated with me a lot.   &lt;/p&gt;

&lt;p&gt;In his article, Derek mentioned that he was able to cycle 7.5miles in 43 minutes if he pushes himself. One day, he decided to relax and take it easy, and he finished that ride in 45 minutes. Since he was relaxed, he was also able to enjoy the scenery while achieving similar results.   &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So apparently all of that exhausting, red-faced, full-on push-push-push I had been doing had given me only a &lt;strong&gt;4 percent&lt;/strong&gt; boost. I could just take it easy and get &lt;strong&gt;96 percent of the results&lt;/strong&gt;. — Derek Sivers  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we get similar results whether we relax or push ourselves, why use the extra effort and create more stress for ourselves?   &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#we-begin-to-learn-the-mechanics-of-how-things-work"&gt;
  &lt;/a&gt;
  We begin to learn the mechanics of how things work
&lt;/h3&gt;

&lt;p&gt;If we believe that it's okay as long as we've tried our best, then we believe the effort counts more than the results — we failed; it's okay; we tried.   &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Effort is important, but they don't count. The results matter instead.&lt;/strong&gt;   &lt;/p&gt;

&lt;p&gt;If you can deliver the same results with minimal effort, nobody will screw you for it. But if you can't deliver results even when you put in your best effort, you're still screwed.   &lt;/p&gt;

&lt;p&gt;But when you try your best, push yourself to the limit, and still fail to deliver results, you can't separate the results from your effort — the effort is all you see. You'll automatically blame yourself for not being smart enough, not being fast enough, not working hard enough. This counterforce prevents us from seeing the bigger picture.   &lt;/p&gt;

&lt;p&gt;So we continue to get stuck in the effort loop, thinking we need to put in more effort and everything will be solved. But we still can't get the results when we put in effort, so the loop continues.   &lt;/p&gt;

&lt;p&gt;This is insanity.   &lt;/p&gt;

&lt;p&gt;And in the developing world there's an insanity around tutorial hell that's happening because of this mindset — people pour their hearts into learning through tutorials but they can't seem to code. So they spend more time and energy to look for more tutorials, hoping the next one will be their salvation.   &lt;/p&gt;

&lt;p&gt;It doesn't work this way. If these people can pull back a bit, they would be able to see they're lacking the skills to resolve problems step by step — in other words they're lacking the &lt;a href="https://zellwk.com/blog/think-like-a-programmer/"&gt;ability to think like a developer&lt;/a&gt; — which can only be learned if they &lt;a href="https://zellwk.com/blog/figure-it-out/"&gt;sit down and figure it out&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;:::note&lt;br&gt;
A tutorial that guides them through every step of the way certainly helps, but these tutorials are rarely seen. Maybe one of the rare exceptions is this blog? 🤔🥳&lt;br&gt;&lt;br&gt;
:::&lt;/p&gt;

&lt;p&gt;To pull back, we need to be less invested in the results. To become less invested in the results, we need to reduce the apparent amount of effort we put in.   &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If we work with average effort, we don't care (as much) about what results we create.&lt;/strong&gt; We know the results will achieve their maximum potential since we're not putting in maximum effort anyway.   &lt;/p&gt;

&lt;p&gt;When we have this distance, &lt;strong&gt;we can look at things with more ease&lt;/strong&gt;. &lt;strong&gt;We can begin to see what's actually working vs what's not working&lt;/strong&gt; (and the frustrations we have are telltale signs). We can then begin to make improvements or changes based on what we see. This allows us to reorient ourselves constantly so we're moving towards the direction we want to go in.   &lt;/p&gt;

&lt;p&gt;When the opportunity arises where it makes sense to go all in — we can still go all in with maximum effort. The important part is to spot this opportunity so our efforts are not wasted.   &lt;/p&gt;

&lt;p&gt;There's a balance. &lt;strong&gt;There's a right time to relax and there's a right time to push. We have to find this balance&lt;/strong&gt; and we can't find it if we're constantly pushing ourselves.   &lt;/p&gt;

&lt;p&gt;We need to build a discipline for maintaining enough relaxation, the discipline for pushing, and also the discipline for looking at the bigger picture. We can't do without any of these disciplines.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#we-have-more-fun-love-joy-patience-peace-and-synchronicity"&gt;
  &lt;/a&gt;
  We have more fun, love, joy, patience, peace, and synchronicity
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;When we're trying our best&lt;/strong&gt; — making a beeline for the goal — &lt;strong&gt;we see everything else as obstacles.&lt;/strong&gt; We become impatient and angry all the time.   &lt;/p&gt;

&lt;p&gt;We get frustrated if someone interrupts us — even if this is a loved one. We might yell at them and destroy our relationships inadvertently. Our loved ones become afraid to bother us when we're working. But that's not love, that's simply fear. What if they had something really important they need to talk about? They would think twice before approaching you.   &lt;/p&gt;

&lt;p&gt;We get frustrated when things don't go our way. Sometimes we get frustrated at our code for not working and we desperately try to fix things up by doing something random without figuring out the actual source of the error.   &lt;/p&gt;

&lt;p&gt;We panic when we can't find the source of the problems we're suffering from, we feel helpless about it. In our panic, we sometimes lash out at people and things around us.   &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If we allow ourselves to perform at our average effort, we are more relaxed. We allow room for things to happen.&lt;/strong&gt;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We allow for ideas to pop up that may solve the problems we're facing
&lt;/li&gt;
&lt;li&gt;We allow loved ones to interrupt us, to play with us, to have fun with us, to share with us what they're concerned about and how we can help. (Try having a kid around when you're trying to work. I guarantee it's a lot of fun 😂).
&lt;/li&gt;
&lt;li&gt;We give our colleagues more patience and we walk them through their obstacles instead of blaming them for being stupid.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;We create lots more joy, love, fun, and laughter&lt;/strong&gt; when we don't try so hard. &lt;strong&gt;We can also be more relaxed and take ourselves less seriously.&lt;/strong&gt; When we take ourselves less seriously, we can have more fun! 🤪  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#doing-your-average-doesnt-mean-youre-actually-average"&gt;
  &lt;/a&gt;
  Doing your average doesn't mean you're actually average
&lt;/h3&gt;

&lt;p&gt;One fear of being the average you is you're going to deliver average results.   &lt;/p&gt;

&lt;p&gt;But this fear is unfounded.   &lt;/p&gt;

&lt;p&gt;Consider high performing people like Elon Musk and Tony Robbins. Do you think they're constantly at the top of their game, putting in all the effort they can muster into everything they do?  &lt;/p&gt;

&lt;p&gt;I don't know them, but it sounds highly impossible too (see above argument). I don't know anyone who doesn't need downtime. I don't know anyone who doesn't need to sleep either. Maybe they can push themselves further than most people, but that's because their internal can handle it — they've trained themselves and built their capabilities so they can run at that speed, even though that's their average performance.   &lt;/p&gt;

&lt;p&gt;We can consider two normal distribution curves stacked on top of each other. One is your average results at your average capacity, while the other is the world's average results.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uPY5s0_b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://zellwk.com/images/2021/trying-your-best/two-distribution-curves.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uPY5s0_b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://zellwk.com/images/2021/trying-your-best/two-distribution-curves.png" alt="normal distribution curve showing your average results vs the worlds average results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So &lt;strong&gt;we can still perform better than average even though we're putting in average effort&lt;/strong&gt;. What we need is training in the skills that will streamline our systems and help us get more results. We can continue to improve ourselves consistently and we create more and more results with our average effort.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;In summary, trying your best has its merits, but it's a surefire way to be perpetually impatient, angry and sad. The alternative is to relax a little and perform at your average.   &lt;/p&gt;

&lt;p&gt;When you perform at your average, you have distance from the results. You can see clearer. You can respond better. You have room to manoeuvre and reorient yourself towards what matters more to you in life.   &lt;/p&gt;

&lt;p&gt;If you're trying your best, I hope you consider relaxing a little and try your average for a week. Let me know how it works out for you!&lt;/p&gt;




&lt;p&gt;Thanks for reading. This article was originally posted on &lt;a href="https://zellwk.com/blog/trying-your-best/"&gt;my blog&lt;/a&gt;. Sign up for &lt;a href="https://zellwk.com"&gt;my newsletter&lt;/a&gt; if you want more articles to help you become a better frontend developer.&lt;/p&gt;

</description>
      <category>philosophy</category>
      <category>learning</category>
    </item>
    <item>
      <title>WebPageTest live audits - Thursdays on Twitch</title>
      <author>Jeena</author>
      <pubDate>Thu, 10 Jun 2021 19:17:34 +0000</pubDate>
      <link>https://dev.to/jeenaj/webpagetest-live-audits-thursdays-on-twitch-2l69</link>
      <guid>https://dev.to/jeenaj/webpagetest-live-audits-thursdays-on-twitch-2l69</guid>
      <description>&lt;p&gt;Our team at &lt;a href="https://webpagetest.org/"&gt;WebPageTest&lt;/a&gt; tried our hand at Twitch recently and realized it can be more than just a gamer platform! The power of a live streaming platform is truly remarkable especially when you have like- minded professionals in the web performance space coming together, learning together and sharing their insights with everyone else. &lt;/p&gt;

&lt;p&gt;And we are just getting started here with performance audits. Coming soon are building integrations, and even hosting experts and fellow community members. &lt;/p&gt;

&lt;p&gt;We just completed our second session today talking about advanced features on WebPageTest and used the Catchpoint (our company) website as well as Allbirds &lt;em&gt;(yes to the shoes!)&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can check out today's broadcast &lt;a href="https://www.twitch.tv/videos/1051949599"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In our first session, &lt;a href="https://twitter.com/tkadlec"&gt;Tim Kadlec&lt;/a&gt; deconstructed a web performance session for &lt;a href="https://joybird.com/"&gt;Joybird&lt;/a&gt;, custom furniture and home décor site using WebPageTest per their request. Be right back - This couch in Bentley Daisey color has caught my attention!  &lt;/p&gt;

&lt;p&gt;These live performance sessions on Twitch are turning out to be quite enjoyable, with fun banters among our live streamers as well as serious performance insights for the sites we reviews. &lt;em&gt;It’s all in the chat if you don’t believe me!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://clips.twitch.tv/embed?autoplay=false&amp;amp;clip=CogentMuddyTriangleVoteNay-s9gvLlJus5q_AV3X&amp;amp;parent=dev.to" height="399" width="710"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://clips.twitch.tv/embed?autoplay=false&amp;amp;clip=LongBumblingMageCorgiDerp-E5ccINp4x5gyJ4tu&amp;amp;parent=dev.to" height="399" width="710"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://clips.twitch.tv/embed?autoplay=false&amp;amp;clip=StormyElatedDonutPoooound-aNDvW0x2pzQ2PYM3&amp;amp;parent=dev.to" height="399" width="710"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you want to follow along the sessions Tim used, here are the WebPageTest test result URLs: &lt;br&gt;
&lt;a href="https://www.webpagetest.org/result/210527_BiDc63_fb4c52e37ef883124ad9db3eba6c4940/"&gt;Desktop&lt;/a&gt; &lt;br&gt;
&lt;a href="https://www.webpagetest.org/result/210527_AiDcQ6_e9f4005c75530e129eb91c1356d4a737/"&gt;Mobile&lt;/a&gt; &lt;br&gt;
&lt;a href="https://www.webpagetest.org/result/210527_AiDc8N_968332695195ce2a7bc31996668bec37/"&gt;Scroll&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You may be wondering “Why Twitch, why not YouTube Live?” If you prefer YouTube Live, please let us know and we’ll figure something out. Also, are you wondering “Why Tim Kadlec, why not me or my friend Jane?” Absolutely! Just let us know who and what topic via &lt;strong&gt;&lt;a href="https://twitter.com/RealWebPageTest"&gt;DM on Twitter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When’s the next session, you ask? It’s every other Thursday! So go ahead and sign up for alerts and share it with your &lt;strong&gt;&lt;a href="https://www.twitch.tv/webpagetest"&gt;fellow team members and friends&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Looking forward to testing and building with you!  &lt;/p&gt;

</description>
      <category>webperf</category>
      <category>webdev</category>
      <category>performance</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
