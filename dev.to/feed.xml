<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>In 7 lines of code, you can turn any Database into Airtable-like spreadsheet using NocoDB!  </title>
      <author>o1lab</author>
      <pubDate>Tue, 28 Sep 2021 10:31:37 +0000</pubDate>
      <link>https://dev.to/o1lab/in-7-lines-of-code-you-can-turn-any-database-into-airtable-like-spreadsheet-using-nocodb-51ah</link>
      <guid>https://dev.to/o1lab/in-7-lines-of-code-you-can-turn-any-database-into-airtable-like-spreadsheet-using-nocodb-51ah</guid>
      <description>&lt;h2&gt;
  &lt;a href="#so-what-is-airtable-"&gt;
  &lt;/a&gt;
  So what is Airtable ?
&lt;/h2&gt;

&lt;p&gt;Airtable is a low-code platform for building collaborative apps. It works like a part spreadsheet &amp;amp; part database.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#what-is-nocodb-"&gt;
  &lt;/a&gt;
  What is NocoDB ?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/nocodb/nocodb"&gt;NocoDB is a free &amp;amp; open source Airtable alternative&lt;/a&gt; - that  turns your existing MySQL/Postgres databases into a smart and beautiful spreadsheets. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Jo1mE5_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fv98dny7q93srxetpi7e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Jo1mE5_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fv98dny7q93srxetpi7e.png" alt="NocoDB - The Open Source Airtable"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#now-show-me-the-code"&gt;
  &lt;/a&gt;
  Now, show me the code.
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Noco&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nocodb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Noco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;({}));&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Visit : localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/dashboard`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
    &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#lets-break-down-the-7-lines"&gt;
  &lt;/a&gt;
  Let's break down the 7 lines.
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// require express &lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;

    &lt;span class="c1"&gt;// require nocodb&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Noco&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nocodb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// mount nocodb as a middleware&lt;/span&gt;
    &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Noco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;({}));&lt;/span&gt;

    &lt;span class="c1"&gt;// print &lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Visit : localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/dashboard`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    

    &lt;span class="c1"&gt;// listen to a port &lt;/span&gt;
    &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Yes, that is it - simple, minimalistic &amp;amp; boring. Like the way it should be.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#so-how-to-try-this-quickly-"&gt;
  &lt;/a&gt;
  So how to try this quickly ?
&lt;/h2&gt;

&lt;p&gt;You can get started with just one command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-nocodb-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -d --name nocodb -p 8080:8080 nocodb/nocodb:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#where-can-i-find-more-about-the-project-"&gt;
  &lt;/a&gt;
  Where can I find more about the project ?
&lt;/h2&gt;

&lt;p&gt;Please find it below -&amp;gt; &lt;a href="https://github.com/nocodb/nocodb"&gt;fork it&lt;/a&gt; / &lt;a href="https://github.com/nocodb/nocodb"&gt;star it&lt;/a&gt; / &lt;a href="https://github.com/nocodb/nocodb"&gt;twist it&lt;/a&gt; / &lt;a href="https://github.com/nocodb/nocodb"&gt;turn it&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/nocodb"&gt;
        nocodb
      &lt;/a&gt; / &lt;a href="https://github.com/nocodb/nocodb"&gt;
        nocodb
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🔥 🔥  The Open Source Airtable alternative  - Powered by Vue.js 🚀 🚀  
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
    &lt;b&gt;
        &lt;a href="https://www.nocodb.com" rel="nofollow"&gt;NocoDB&lt;/a&gt;&lt;br&gt;
    &lt;/b&gt;
    ✨ The Open Source Airtable Alternative ✨ &lt;br&gt;
&lt;/h1&gt;
&lt;p&gt;
Turns any MySQL, PostgreSQL, SQL Server, SQLite &amp;amp; MariaDB into a smart-spreadsheet
&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://travis-ci.com/github/NocoDB/NocoDB" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4e084bac046962268fcf7a8aaf3d4ac422d3327564f9685c9d1b57aa56b142e9/68747470733a2f2f7472617669732d63692e6f72672f6477796c2f657374612e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="http://nodejs.org/download/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/78a6449b07220242899619ce10cd5c39cc1e74992b768d308bd98f2a7e9995ae/68747470733a2f2f62616467656e2e6e65742f6e706d2f6e6f64652f6e657874" alt="Node version"&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/NocoDB" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ec77e5fb18e5c0eef7b879f7b1473bc68ce6a354bdfdb9510c3bf70ad168eded/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f68747470732f747769747465722e636f6d2f4e6f636f44422e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f772532302534304e6f636f4442" alt="Twitter"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
    &lt;a href="http://www.nocodb.com" rel="nofollow"&gt;&lt;b&gt;Website&lt;/b&gt;&lt;/a&gt; •
    &lt;a href="https://discord.gg/5RgZmkW" rel="nofollow"&gt;&lt;b&gt;Discord&lt;/b&gt;&lt;/a&gt; •
    &lt;a href="https://twitter.com/nocodb" rel="nofollow"&gt;&lt;b&gt;Twitter&lt;/b&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133762127-e94da292-a1c3-4458-b09a-02cd5b57be53.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PB_59gfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133762127-e94da292-a1c3-4458-b09a-02cd5b57be53.png" alt="OpenSourceAirtableAlternative"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div&gt;
&lt;p&gt;&lt;a href="https://github.com/nocodb/nocodbmarkdown/readme/chinese.md"&gt;🇨🇳   读我&lt;/a&gt; •
&lt;a href="https://github.com/nocodb/nocodbmarkdown/readme/french.md"&gt;🇫🇷   Lisez-moi&lt;/a&gt; •
&lt;a href="https://github.com/nocodb/nocodbmarkdown/readme/german.md"&gt;🇩🇪    Liesmich&lt;/a&gt; •
&lt;a href="https://github.com/nocodb/nocodbmarkdown/readme/spanish.md"&gt;🇲🇽    Léame&lt;/a&gt; •
&lt;a href="https://github.com/nocodb/nocodbmarkdown/readme/portuguese.md"&gt;🇵🇹   Leia-me&lt;/a&gt; •
&lt;a href="https://github.com/nocodb/nocodbmarkdown/readme/italian.md"&gt;🇮🇹   Leggi&lt;/a&gt; •
&lt;a href="https://github.com/nocodb/nocodbmarkdown/readme/dutch.md"&gt;🇳🇱    Leesmij&lt;/a&gt; •
&lt;a href="https://github.com/nocodb/nocodbmarkdown/readme/japanese.md"&gt;🇯🇵   私を読む&lt;/a&gt; •
&lt;a href="https://github.com/nocodb/nocodbmarkdown/readme/korean.md"&gt;🇰🇷   소개글&lt;/a&gt; •
&lt;a href="https://github.com/nocodb/nocodbmarkdown/readme/russian.md"&gt;🇷🇺   Прочти меня&lt;/a&gt; •
&lt;a href="https://github.com/nocodb/nocodbmarkdown/readme/indonesian.md"&gt;🇮🇩   Baca aku&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/62d299d2b7261e4c5f757e5ac9bc313ef9203b9b819dedf340db82138f8da065/68747470733a2f2f7374617469632e73636172662e73682f612e706e673f782d707869643d63313261373763632d383535652d343630322d386130662d363134623264306461353661"&gt;&lt;img src="https://camo.githubusercontent.com/62d299d2b7261e4c5f757e5ac9bc313ef9203b9b819dedf340db82138f8da065/68747470733a2f2f7374617469632e73636172662e73682f612e706e673f782d707869643d63313261373763632d383535652d343630322d386130662d363134623264306461353661"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.producthunt.com/posts/nocodb?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-nocodb" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9cff91c3d5ada7906ec16f4adbde10de461bf84718d3cfbb0d37c8ca1ffc2a2d/68747470733a2f2f6170692e70726f6475637468756e742e636f6d2f776964676574732f656d6265642d696d6167652f76312f66656174757265642e7376673f706f73745f69643d323937353336267468656d653d6461726b" alt="NocoDB - The Open Source Airtable alternative | Product Hunt" width="250" height="54"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
Quick try&lt;/h1&gt;

&lt;h3&gt;
1-Click Deploy&lt;/h3&gt;
&lt;h4&gt;
Heroku&lt;/h4&gt;
&lt;a href="https://heroku.com/deploy?template=https://github.com/npgia/nocodb-seed-heroku" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/6979881d5a96b7b18a057083bb8aeb87ba35fc279452e29034c1e1c49ade0636/68747470733a2f2f7777772e6865726f6b7563646e2e636f6d2f6465706c6f792f627574746f6e2e737667" width="300px" alt="Deploy NocoDB to Heroku with 1-Click"&gt;
&lt;/a&gt;
&lt;br&gt;
&lt;h3&gt;
Using Docker&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;docker run -d --name nocodb -p 8080:8080 nocodb/nocodb:latest&lt;/pre&gt;

&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;To persist data you can mount volume at &lt;code&gt;/usr/app/data/&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
Using Npm&lt;/h3&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;npx create-nocodb-app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;
Using Git&lt;/h3&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;git clone https://github.com/nocodb/nocodb-seed
cd nocodb-seed
npm install
npm start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;
GUI&lt;/h3&gt;
&lt;p&gt;Access Dashboard using : &lt;a href="http://localhost:8080/dashboard" rel="nofollow"&gt;http://localhost:8080/dashboard&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Join Our Community&lt;/h1&gt;
&lt;a href="https://discord.gg/5RgZmkW" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/8a7e4d7b3342da59bf8e778636f0860c8045593cc8003a834f88b0315782760e/68747470733a2f2f696e7669646765742e737769746368626c6164652e78797a2f3552675a6d6b57" alt="Join NocoDB : Free &amp;amp; Open Source Airtable Alternative"&gt;
&lt;/a&gt;
&lt;br&gt;
&lt;h1&gt;
Screenshots&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133759229-4275b934-873b-4a9b-9f23-96470fec9775.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rdup1vIP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133759229-4275b934-873b-4a9b-9f23-96470fec9775.png" alt="2"&gt;&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133759218-f8b0bffc-707f-451c-82f2-b5ba2573d6a6.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6LATNShL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133759218-f8b0bffc-707f-451c-82f2-b5ba2573d6a6.png" alt="1"&gt;&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133759245-a536165b-55f1-46a8-a74e-1964e7e481c6.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wv2SIY6A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133759245-a536165b-55f1-46a8-a74e-1964e7e481c6.png" alt="7"&gt;&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133759240-dd3f2509-aab7-4bd1-9a58-4c2dff08f2f2.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zao1XzmB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133759240-dd3f2509-aab7-4bd1-9a58-4c2dff08f2f2.png" alt="5"&gt;&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133759242-2311a127-17c8-406c-b865-1a2e9c8ee398.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6vTK1eTn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133759242-2311a127-17c8-406c-b865-1a2e9c8ee398.png" alt="6"&gt;&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133759234-9b539029-be36-4a35-b55a-bee3ebd0e010.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AcJfIMgr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133759234-9b539029-be36-4a35-b55a-bee3ebd0e010.png" alt="3"&gt;&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133759236-dc182129-3768-4e23-874e-98f5f32e962c.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fdapWRRj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133759236-dc182129-3768-4e23-874e-98f5f32e962c.png" alt="4"&gt;&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133759253-bb9bc729-ee28-4f86-ab95-7d112c0815f2.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ve3FcC51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133759253-bb9bc729-ee28-4f86-ab95-7d112c0815f2.png" alt="11"&gt;&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133759250-ebd75ecf-31db-4a17-b2d7-2c43af78a54e.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aS0r1Yof--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133759250-ebd75ecf-31db-4a17-b2d7-2c43af78a54e.png" alt="10"&gt;&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133759248-3a7141e0-4b7d-4079-a5f9-cf8611d00bc5.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qWJU8PJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133759248-3a7141e0-4b7d-4079-a5f9-cf8611d00bc5.png" alt="8"&gt;&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/5435402/133759249-8c1a85c2-a55c-48f6-bd58-aa6b4195cce7.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fXwYsZln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5435402/133759249-8c1a85c2-a55c-48f6-bd58-aa6b4195cce7.png" alt="9"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Features&lt;/h1&gt;
&lt;h3&gt;
Rich Spreadsheet Interface&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
⚡  Search, sort, filter, hide columns with uber ease&lt;/li&gt;
&lt;li&gt;
⚡  Create Views : Grid, Gallery, Kanban, Gantt, Form&lt;/li&gt;
&lt;li&gt;
⚡  Share Views : public &amp;amp; password protected&lt;/li&gt;
&lt;li&gt;
⚡  Personal &amp;amp; locked Views&lt;/li&gt;
&lt;li&gt;
⚡  Upload images to cells (Works…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/nocodb/nocodb"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#do-you-have-a-video-demo-"&gt;
  &lt;/a&gt;
  Do you have a video demo ?
&lt;/h2&gt;

&lt;p&gt;We do!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#using-npx"&gt;
  &lt;/a&gt;
  Using npx
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/K-UEecQyiOk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-docker"&gt;
  &lt;/a&gt;
  Using docker
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/v6Nn75P1p7I"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;

</description>
      <category>node</category>
      <category>database</category>
      <category>webdev</category>
    </item>
    <item>
      <title>I have built Zero: Fast and high performance Python RPC framework to build microservices</title>
      <author>Azizul Haque Ananto</author>
      <pubDate>Tue, 28 Sep 2021 10:18:18 +0000</pubDate>
      <link>https://dev.to/ananto30/i-have-built-zero-fast-and-high-performance-python-rpc-framework-to-build-microservices-3j55</link>
      <guid>https://dev.to/ananto30/i-have-built-zero-fast-and-high-performance-python-rpc-framework-to-build-microservices-3j55</guid>
      <description>&lt;p&gt;Zero is actually a RPC like framework that uses ZeroMQ under the hood for communication over tcp. That's why it's fast and super lightweight.&lt;/p&gt;

&lt;p&gt;Without going into details let's just get started, cause one of the philosophy behind Zero is &lt;strong&gt;Zero Learning Curve&lt;/strong&gt; 😃&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Ensure Python 3.8+&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install Zero
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install zeroapi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Sadly the &lt;code&gt;zero&lt;/code&gt; package is already there&lt;/em&gt; 🙁&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a &lt;code&gt;server.py&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;zero&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ZeroServer&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"hello world"&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ZeroServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5559&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_rpc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_rpc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please note that server &lt;strong&gt;RPC methods' args are type hinted&lt;/strong&gt;. Type hint is &lt;strong&gt;must&lt;/strong&gt; in Zero server.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See the method type async or sync, doesn't matter.&lt;/em&gt; 😃&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run it
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python -m server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Call the rpc methods
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;zero&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ZeroClient&lt;/span&gt;

&lt;span class="n"&gt;zero_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ZeroClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5559&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zero_client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"echo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Hi there!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zero_client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello_world"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is it! Tell me about the learning curve 😉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-bit-of-background"&gt;
  &lt;/a&gt;
  A bit of background
&lt;/h2&gt;

&lt;p&gt;After working on large systems (with 50M+ users) over the years, one of the realization is - we waste a good amount of time writing boilerplate code and clients when working on microservices. And also we mostly use HTTP to communicate among them. This is really fine and usual but http has some overheads (headers, separate tcp connection every request etc). In case of microservice communications we can avoid these to get better performance. &lt;br&gt;
Another thing is usual web frameworks are bulky and has a learning curve. So I was looking for something to reduce these costs and overheads.&lt;/p&gt;

&lt;p&gt;Zero is still an idea, though the package is there already 😜 Zero solves the boilerplate code problem by using RPC like structure, you can just focus on the business logic. And use ZeroMQ rather HTTP to solve the overhead and reconnection problem. Though not both of them are solved explicitly, Zero is still a baby to learn more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros-and-cons-of-zero-over-flask-or-fastapi"&gt;
  &lt;/a&gt;
  Pros and Cons of Zero over Flask or FastAPI
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Inter-service communication is faster as using ZeroMQ and raw TCP under the hood.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Simple and easy to learn and use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extremely lightweight.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Super flexible zero can be used only for network communication and you can structure your codebase independently.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Not an HTTP framework, not so much traditional like Flask of FastAPI. People need to understand the actual usage. Like if you have fairly large microservice architecture and there are independent services that communicate among them, zero is a good substitute to reduce network overhead and other framework complexity. But if you only have a few services that communicate directly with the client/frontend, zero is not that much of a use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Only Python based framework. Zero server can only be connected with Python zero client for now. (I have plan to introduce Go, in distant future btw)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You always need another HTTP framework as a gateway if your frontend communicates over HTTP, which is the usual and extremely common way.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#i-will-be-back"&gt;
  &lt;/a&gt;
  I will be back!
&lt;/h2&gt;

&lt;p&gt;There are more, I will write more about Zero in coming weeks. For now I will be looking towards comments, opinions and suggestions 🙏&lt;/p&gt;

&lt;p&gt;GitHub: &lt;a href="https://github.com/Ananto30/zero"&gt;https://github.com/Ananto30/zero&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>microservices</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Building a Dating App with MERN</title>
      <author>Collins Mbathi</author>
      <pubDate>Tue, 28 Sep 2021 09:51:38 +0000</pubDate>
      <link>https://dev.to/collins87mbathi/building-a-dating-app-with-mern-478h</link>
      <guid>https://dev.to/collins87mbathi/building-a-dating-app-with-mern-478h</guid>
      <description>&lt;p&gt;we are going to build a dating app using mern stack, the web app has a simple functionality a screenshot of  the finished app below, all the data comes from a MongoDB database, with Api endpoints set in Node.js&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UBN5boaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aog9s34skeuj3nmyau41.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UBN5boaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aog9s34skeuj3nmyau41.PNG" alt="cover"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s review the React front end and then move to the back end. Open your terminal &lt;br&gt;
and create a dating-app-mern folder. Inside it, use &lt;strong&gt;create-react-app&lt;/strong&gt; to create a new app &lt;br&gt;
called dating-app-frontend. The following are the commands to do this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd dating-app-mern
npx create-react-app dating-app-frontend

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#react-basic-setup"&gt;
  &lt;/a&gt;
  React Basic Setup
&lt;/h4&gt;

&lt;p&gt;Return to the React project and cd to the dating-app-frontend directory. Start the React &lt;br&gt;
app with npm start.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd dating-app-frontend
npm start

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next delete some of the files that you don't need.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PfhK3EOZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1z9fzfsn3fcone8vma4c.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PfhK3EOZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1z9fzfsn3fcone8vma4c.PNG" alt="perez"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#creating-a-header-component"&gt;
  &lt;/a&gt;
  Creating a Header Component
&lt;/h4&gt;

&lt;p&gt;Let's create a header component. First, you must install Material .since its going to provide for us the icons we are going to use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i @material-ui/core @material-ui/icons
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, create a components folder inside the src folder. Create two files—Header.jsx &lt;br&gt;
and Header.css—inside the components folder. Header.js has two things: a person &lt;br&gt;
icon and a forum icon.&lt;/p&gt;

&lt;p&gt;The following is the Header.jsx file's content.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BAmwI4Hw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsye32gzwjf3syvdf3ph.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BAmwI4Hw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsye32gzwjf3syvdf3ph.PNG" alt="article2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;include the Header component in the App.js file&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FcczmzVQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iilrav9uii5yydrwstc6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FcczmzVQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iilrav9uii5yydrwstc6.PNG" alt="article3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;the header.css file contain the following content&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9RNpbhM8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9dwdirvxbykc187ri5r.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9RNpbhM8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9dwdirvxbykc187ri5r.PNG" alt="css"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#creating-the-dating-cards-component"&gt;
  &lt;/a&gt;
  Creating the Dating Cards Component
&lt;/h4&gt;

&lt;p&gt;Let’s now work on the second component. Create two files—DatingCards.js and &lt;br&gt;
DatingCards.css—inside the components folder. Then include the DatingCards component in the App.js file.&lt;/p&gt;

&lt;p&gt;Before moving forward, you need to install a react-tinder-card package. This &lt;br&gt;
package has a feature that provides the swipe effect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-tinder-card
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, put the content in DatingCards.js. Here, inside a people state variable, you store &lt;br&gt;
the name and images of four people. Next, import DatingCard and use it as a component. &lt;br&gt;
Here, you use the props mentioned in the react-tinder-card documentation.&lt;br&gt;
The swiped and outOfFrame functions are required. When looping through each &lt;br&gt;
person, use the imgUrl background image and display the name in the h3 tag.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2jnscdzE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5vaqypp3bsgnmvn96is.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2jnscdzE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5vaqypp3bsgnmvn96is.PNG" alt="dating1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WyH6H1rG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nune45e3nkx9lcrro84l.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WyH6H1rG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nune45e3nkx9lcrro84l.PNG" alt="dating2"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#creating-the-swipe-buttons-component"&gt;
  &lt;/a&gt;
  Creating the Swipe Buttons Component
&lt;/h6&gt;

&lt;p&gt;Let’s now create the Swipe component, which are the buttons in the footer. &lt;br&gt;
These buttons add to the app’s styling. They won’t be functional since it’s a simple app. &lt;br&gt;
Create two files : Swipe.jsx and Swipe.css inside the components&lt;br&gt;
folder. You also need to include it in the App.js file.&lt;/p&gt;

&lt;p&gt;The content in Swiper.jsx&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p8cw4liw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8egnn6cpxzvynr0sehck.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p8cw4liw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8egnn6cpxzvynr0sehck.PNG" alt="dating"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, is styling the buttons and the code of styling them is here below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TWRBKdYs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pb570vuld5gosmwyieuv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TWRBKdYs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pb570vuld5gosmwyieuv.PNG" alt="dating2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we are now through with the frontend part ...&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#initial-backend-setup"&gt;
  &lt;/a&gt;
  Initial Back-End Setup
&lt;/h4&gt;

&lt;p&gt;Let’s move to the back end by starting with the Node.js code.create another folder and name it api&lt;/p&gt;

&lt;p&gt;Next, create a package.json file by entering the &lt;code&gt;npm init -y&lt;/code&gt; command in the terminal. &lt;/p&gt;

&lt;p&gt;After that, You need to install two packages before starting. Open the terminal and install &lt;br&gt;
Express and Mongoose in the api folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i express mongoose
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;after this open the mongoDb and copy the link to link to our project.&lt;/p&gt;

&lt;p&gt;Before moving forward, install nodemon in the api folder. Whenever &lt;br&gt;
you make any changes to the code in the index.js file, the Node server restarts &lt;br&gt;
instantaneously.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i nodemon
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#initial-route-setup"&gt;
  &lt;/a&gt;
  Initial Route Setup
&lt;/h4&gt;

&lt;p&gt;Let’s create the initial route, which generally checks whether everything is set up &lt;br&gt;
correctly. The Express package in Node.js allows you to create routes, which is how most &lt;br&gt;
of the Internet works. Most back-end languages like Node.js, Java offer capabilities to &lt;br&gt;
create these routes, which interact with the databases. The initial route doesn’t interact &lt;br&gt;
with the database and simply returns a text when you go to it, using a GET request.&lt;/p&gt;

&lt;p&gt;Create a index.js file in the api folder. Here, you import the Express &lt;br&gt;
and the Mongoose packages first. Next, use Express to create a port variable to run on &lt;br&gt;
port 5001.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const mongoose = require('express');
//App Config
const app = express()
const port = process.env.PORT || 5001
//Middleware
//DB Config
//API Endpoints

//Listener
app.listen(port, () =&amp;gt; console.log(`Listening on localhost: ${port}`))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#database-user-and-network-access"&gt;
  &lt;/a&gt;
  Database User and Network Access
&lt;/h4&gt;

&lt;p&gt;In MongoDB, you need to create a database user and provide network access.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vFlBsBAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lur5pkoovw14m309u6d8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vFlBsBAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lur5pkoovw14m309u6d8.PNG" alt="database"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mongodb-schema-and-routes"&gt;
  &lt;/a&gt;
  MongoDB Schema and Routes
&lt;/h4&gt;

&lt;p&gt;MongoDB stores data in a JSON format instead of the regular table structure found in a &lt;br&gt;
traditional database like Oracle. You create the schema file required by MongoDB. It tells &lt;br&gt;
you how fields are stored in MongoDB.&lt;/p&gt;

&lt;p&gt;Here, cards is considered a collection name, and you store a value like cardSchema in &lt;br&gt;
the database. It consists of an object with a name and imgUrl keys. These are the names &lt;br&gt;
that you use in MongoDB. Create a Cards.js file and put the following content in it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zU1t67qg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/raedhxjb2fnbsu3g2vwv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zU1t67qg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/raedhxjb2fnbsu3g2vwv.PNG" alt="database1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You now use the schema to create the endpoint that adds data to the database. The &lt;br&gt;
MVC pattern is followed here; it is the traditional flow of a web application.&lt;/p&gt;

&lt;p&gt;Next, use a POST request that takes any data from the user and sends it to the &lt;br&gt;
database. You can use any endpoint. For example, if you write an article on Dev.to &lt;br&gt;
and hit the POST button, your article is saved in the Dev.to database once the POST &lt;br&gt;
request is made.&lt;br&gt;
The GET endpoints fetch all the data from the database. Again, you can give any &lt;br&gt;
endpoint. For example, when you browse through the posts in Dev.to, a GET request is &lt;br&gt;
sent to the endpoint, which in turn fetches all posts from the Dev.to database.&lt;/p&gt;

&lt;p&gt;Create a folder and name it routes in the routes folder create a file and call it Card.js In Card.js, create a POST request to the /dating/cards endpoint. The load is &lt;br&gt;
in req.body to MongoDB. Then you use create() to send dbCard. If it’s a success, you &lt;br&gt;
receive status 201; otherwise, you receive status 500. The updated content is marked in &lt;br&gt;
bold.&lt;br&gt;
Next, create the GET endpoint to /dating/cards to get the data from the database. &lt;br&gt;
You are using find() here and receive a status 200 on success (otherwise, status 500). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uVGMcI9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ycgtvsz305iyya41915a.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uVGMcI9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ycgtvsz305iyya41915a.PNG" alt="router"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;as you can see in the image i have used router ..so as to make work easier to connect it in the index.js&lt;br&gt;
To check the routes,let's use the postman app&lt;/p&gt;

&lt;p&gt;Before moving forward with the POST request, you need to complete two things. &lt;br&gt;
First, implement CORS; otherwise, you get cross-origin errors later when you deploy the &lt;br&gt;
app.&lt;/p&gt;

&lt;p&gt;open the terminal and install CORS&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i cors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In index.js, import CORS and use it in with app.use(). You also need to use the &lt;br&gt;
express.json() middleware. It is required because you need it to parse the incoming &lt;br&gt;
JSON object from MongoDB to read the body.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cxsQFtXJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5v287oo1zfrohocsg8dn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cxsQFtXJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5v287oo1zfrohocsg8dn.PNG" alt="index"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#integrating-the-backend-with-the-frontend"&gt;
  &lt;/a&gt;
  Integrating the backend  with the frontend
&lt;/h4&gt;

&lt;p&gt;Let’s hook the back end to the front end. Use the axios package to call from the front &lt;br&gt;
end. Axios is a JavaScript library that makes the API request to the REST endpoint. You &lt;br&gt;
just created two endpoints in the back end. To access them, you need Axios. Open the client &lt;br&gt;
and install it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, create a new axios.js file , and then create an &lt;br&gt;
instance of axios. The URL is &lt;code&gt;http://localhost:5001&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import axios from 'axios'
const instance = axios.create({
 URL: "http://localhost:5001"
})
export default instance

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In DatingCards.js, get rid of the hard-coded stuff in the people state. Then import &lt;br&gt;
the local axios and use the useEffect hook to do the API call to the /dating/cards&lt;br&gt;
endpoint. Once you receive the data, reset it using the setPeople() function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState, useEffect } from 'react'
import DatingCard from 'react-tinder-card'
import './DatingCards.css'
import axios from './axios'
const DatingCards = () =&amp;gt; {
 const [people, setPeople] = useState([])
 useEffect(() =&amp;gt; {
 async function fetchData() {
 const req = await axios.get("/dating/cards")
 setPeople(req.data)
 }
 fetchData()
 }, [])
 const swiped = (direction, nameToDelete) =&amp;gt; {
 console.log("receiving " + nameToDelete)
 }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sVNwskwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/el1lhrbghri5rx6uxhql.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sVNwskwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/el1lhrbghri5rx6uxhql.PNG" alt="end"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we have completed our dating app project hope you enjoyed it and learnt alot .&lt;br&gt;
we will be talking about how to deploy the app in heroku in our next article&lt;/p&gt;

</description>
      <category>express</category>
      <category>react</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Flask User Authentication - Includes Free Sample</title>
      <author>Sm0ke</author>
      <pubDate>Tue, 28 Sep 2021 09:34:17 +0000</pubDate>
      <link>https://dev.to/sm0ke/flask-user-authentication-includes-free-sample-12g5</link>
      <guid>https://dev.to/sm0ke/flask-user-authentication-includes-free-sample-12g5</guid>
      <description>&lt;p&gt;Hello coders! &lt;/p&gt;

&lt;p&gt;This article explains how to code a simple &lt;a href="https://blog.appseed.us/flask-user-authentication-free-sample/"&gt;Flask User Authentication&lt;/a&gt; system using &lt;code&gt;Flask-Login&lt;/code&gt; and &lt;code&gt;Bootstrap 5&lt;/code&gt;. Being able to distinguish one user from another web apps can be improved substantially in terms of features and control. For instance, we can split the project structure into public/private sections and also empower users to perform specific actions based on their profiles. For newcomers, &lt;strong&gt;Flask&lt;/strong&gt; is a lightweight framework crafted on top of Python used for any kind of project and web apps: simple sites, APIs, microservices, or even complex eCommerce solutions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Section #1&lt;/strong&gt; - The general view of the project&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Section #2&lt;/strong&gt; - What is Flask&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Section #3&lt;/strong&gt; - Flask-Login library&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Section #4&lt;/strong&gt; - Code the project&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Section #5&lt;/strong&gt; - Login, Logout, Registration routes&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Section #6&lt;/strong&gt; - Full Source code (published on Github)
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MnDVdQak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3qmqu7b7xt00wayb428.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MnDVdQak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3qmqu7b7xt00wayb428.gif" alt="Flask User Authentication - Animated Presentation."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-project-overview"&gt;
  &lt;/a&gt;
  1# - Project Overview
&lt;/h2&gt;

&lt;p&gt;Authentication might not be necessary for simple presentation sites but mandatory for other types of projects where the project design requires to know when a user is authenticated and what resources to be accessed based on his credentials (username, profiles .. etc). The project we will code provides a simple codebase structure, SQLite persistence, and three pages (index, login, register) styled with Bootstrap 5. Here are the project dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Flask&lt;/code&gt; - the framework that powers the app&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Flask-Login&lt;/code&gt; - a popular library used to manage the sessions&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Flask-Bcrypt&lt;/code&gt; - used for password encryption&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Flask-SqlAlchemy&lt;/code&gt; - a popular library to access the database&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;Codebase structure&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&amp;lt; PROJECT ROOT &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   |
   |-- app/
   |    |-- static/
   |    |    |-- &amp;lt;css, JS, images&amp;gt;    &lt;span class="c"&gt;# CSS files, Javascripts files&lt;/span&gt;
   |    |
   |    |-- templates/
   |    |    |
   |    |    |-- index.html           &lt;span class="c"&gt;# Index File&lt;/span&gt;
   |    |    |-- login.html           &lt;span class="c"&gt;# Login Page&lt;/span&gt;
   |    |    |-- register.html        &lt;span class="c"&gt;# Registration Page&lt;/span&gt;
   |    |    
   |    |
   |   config.py                      &lt;span class="c"&gt;# Provides APP Configuration &lt;/span&gt;
   |   forms.py                       &lt;span class="c"&gt;# Defines Forms (login, register) &lt;/span&gt;
   |   models.py                      &lt;span class="c"&gt;# Defines app models &lt;/span&gt;
   |   views.py                       &lt;span class="c"&gt;# Application Routes &lt;/span&gt;
   |
   |-- requirements.txt
   |-- run.py
   |
   |-- &lt;span class="k"&gt;**************************************&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#2-what-is-flask"&gt;
  &lt;/a&gt;
  2# - &lt;a href="https://docs.appseed.us/content/what-is/flask"&gt;What is Flask&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Flask is a popular Python Framework designed to a project quick and easy, with the ability to scale up to complex applications. Flask can be used to code from simple one-page sites to APIs and complex eCommerce solutions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kDwI35h8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8e4pqlqpca7wndkzhheo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kDwI35h8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8e4pqlqpca7wndkzhheo.png" alt="Flask - Open-source Python Framework."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The easiest way to install Flask is to use PIP, the official package manager shipped with Python.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;Flask
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;During the setup, a basic set of core dependencies are also installed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Werkzeug&lt;/code&gt; implements WSGI, the standard Python interface between applications and servers.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Jinja&lt;/code&gt; is a template language that renders the pages your application serves.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Click&lt;/code&gt; is a framework for writing command-line applications. It provides the flask command and allows adding custom management commands.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the installation is finished we can open an editor and code our first Flask app with a few lines of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, Flask Authentication!'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#3-flasklogin-library"&gt;
  &lt;/a&gt;
  #3 - Flask-Login Library
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Flask-Login&lt;/code&gt;, probably the most popular authentication library for Flask, provides user session management and handles the common tasks of logging in, logging out, and remembering your users’ sessions over extended periods of time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Install Flask-Login&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;flask-login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The most important part of an application that uses &lt;code&gt;Flask-Login&lt;/code&gt; is the &lt;code&gt;LoginManager&lt;/code&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;login_manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LoginManager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the Flask application object has been created, you can configure it for login with a single line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;login_manager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;How it Works&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The app needs to provide a &lt;strong&gt;user_loader&lt;/strong&gt; callback. This callback is used to reload the user object from the user ID stored in the session.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;login_manager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_loader&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above core principles of &lt;code&gt;Flask-Login&lt;/code&gt; cover the basic implementation of a simple authentication system that we will code in full in the next section.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-coding-the-project"&gt;
  &lt;/a&gt;
  #4 - Coding the project
&lt;/h2&gt;

&lt;p&gt;Before we actually code the features, let's visualize again the structure and mention the most relevant files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;run.py&lt;/code&gt; - is the entry point in our project&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app&lt;/code&gt; directory bundles all files and assets used in our  project&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app/config.py&lt;/code&gt; - isolates the app configuration in a single place&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app/forms.py&lt;/code&gt; - defines SignIN, SignUP forms&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app/models.py&lt;/code&gt; - defines the Users table&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app/views.py&lt;/code&gt; - handles the app routing like login, logout and register
&lt;/li&gt;
&lt;/ul&gt;






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&amp;lt; PROJECT ROOT &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   |
   |-- app/
   |    |-- static/
   |    |    |-- &amp;lt;css, JS, images&amp;gt;    &lt;span class="c"&gt;# CSS files, Javascripts files&lt;/span&gt;
   |    |
   |    |-- templates/
   |    |    |
   |    |    |-- index.html           &lt;span class="c"&gt;# Index File&lt;/span&gt;
   |    |    |-- login.html           &lt;span class="c"&gt;# Login Page&lt;/span&gt;
   |    |    |-- register.html        &lt;span class="c"&gt;# Registration Page&lt;/span&gt;
   |    |    
   |    |
   |  __init__.py                     &lt;span class="c"&gt;# Bundle APP as package &lt;/span&gt;
   |   config.py                      &lt;span class="c"&gt;# Provides APP Configuration &lt;/span&gt;
   |   forms.py                       &lt;span class="c"&gt;# Defines Forms (login, register) &lt;/span&gt;
   |   models.py                      &lt;span class="c"&gt;# Defines app models &lt;/span&gt;
   |   views.py                       &lt;span class="c"&gt;# Application Routes &lt;/span&gt;
   |
   |-- requirements.txt
   |-- run.py
   |
   |-- &lt;span class="k"&gt;**************************************&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;run.py&lt;/strong&gt; - source code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The file is a super simple loader of the &lt;code&gt;APP&lt;/code&gt; package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;app/config.py&lt;/strong&gt; - APP Configuration&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For easier access, all variables are exposed by a &lt;code&gt;Config&lt;/code&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="n"&gt;CSRF_ENABLED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="c1"&gt;# Set up the App SECRET_KEY
&lt;/span&gt;    &lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'SECRET_KEY'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'S#perS3crEt_007'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# This will create a file in &amp;lt;app&amp;gt; FOLDER
&lt;/span&gt;    &lt;span class="n"&gt;SQLALCHEMY_DATABASE_URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'sqlite:///db.sqlite3'&lt;/span&gt;
    &lt;span class="n"&gt;SQLALCHEMY_TRACK_MODIFICATIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;SECRET_KEY&lt;/code&gt; variable is used to encrypt the session information and &lt;code&gt;SQLALCHEMY_DATABASE_URI&lt;/code&gt; is used to locate the SQLite database (basically a file).&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;app/forms.py&lt;/strong&gt; - Login and registration forms&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoginForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FlaskForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s"&gt;'Username'&lt;/span&gt;  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DataRequired&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PasswordField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s"&gt;'Password'&lt;/span&gt;  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DataRequired&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RegisterForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FlaskForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s"&gt;'Name'&lt;/span&gt;      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s"&gt;'Username'&lt;/span&gt;  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DataRequired&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PasswordField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s"&gt;'Password'&lt;/span&gt;  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DataRequired&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s"&gt;'Email'&lt;/span&gt;     &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DataRequired&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The login form requires a username and a password to authenticate and the registration form has an extra email field.  &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;app/models.py&lt;/strong&gt; Defined the &lt;code&gt;Users&lt;/code&gt; table&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UserMixin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Users'&lt;/span&gt;

    &lt;span class="nb"&gt;id&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="n"&gt;unique&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All above sections are bundled to build the Flask app in a special file saved in the app directory: "&lt;strong&gt;init&lt;/strong&gt;.py"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                       &lt;span class="c1"&gt;# constructs the Flask app
&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'app.config.Config'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# injects the configuration
&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# flask-sqlalchemy   # connects to SQLite DB
&lt;/span&gt;
&lt;span class="n"&gt;lm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LoginManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;   &lt;span class="p"&gt;)&lt;/span&gt;                      &lt;span class="c1"&gt;# flask-loginmanager
&lt;/span&gt;&lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                            &lt;span class="c1"&gt;# init the login manager
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#5-authentication-routes"&gt;
  &lt;/a&gt;
  5 - Authentication routes
&lt;/h1&gt;

&lt;p&gt;All app routes are provided by the &lt;code&gt;views.py&lt;/code&gt; file saved in &lt;code&gt;app&lt;/code&gt; directory.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;/register&lt;/code&gt; &lt;strong&gt;route&lt;/strong&gt; - handles the onboarding of the new users&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The pseudocode implemented by the method is pretty simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the request type is GET, serve the registration page to the user&lt;/li&gt;
&lt;li&gt;If the user submitted the information, the method performs the checks&lt;/li&gt;
&lt;li&gt;Once the data is validated, the User password is hashed&lt;/li&gt;
&lt;li&gt;The User object is created and saved into the database
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/register'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="c1"&gt;# declare the Registration Form
&lt;/span&gt;    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RegisterForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;'register.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# check if both http method is POST and form is valid on submit
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_on_submit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

        &lt;span class="c1"&gt;# assign form data to variables
&lt;/span&gt;        &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="n"&gt;email&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'email'&lt;/span&gt;   &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

        &lt;span class="n"&gt;pw_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate_password_hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pw_hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;msg&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'User created'&lt;/span&gt;     
        &lt;span class="n"&gt;success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Input error'&lt;/span&gt;     

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;'register.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;     
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;/login&lt;/code&gt; &lt;strong&gt;route&lt;/strong&gt; - authenticate registered users&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/login'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="c1"&gt;# Declare the login form
&lt;/span&gt;    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LoginForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Flask message injected into the page, in case of any errors
&lt;/span&gt;    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="c1"&gt;# check if both http method is POST and form is valid on submit
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_on_submit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

        &lt;span class="c1"&gt;# assign form data to variables
&lt;/span&gt;        &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

        &lt;span class="c1"&gt;# filter User out of database through username
&lt;/span&gt;        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;bc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_password_hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;login_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'index'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Wrong password. Please try again."&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Unknown user"&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;'login.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;/logout&lt;/code&gt; &lt;strong&gt;route&lt;/strong&gt; - delete the session data associated to the user&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Logout user
&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/logout'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;logout_user&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'index'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#6-full-source-code"&gt;
  &lt;/a&gt;
  6# - Full Source Code
&lt;/h2&gt;

&lt;p&gt;The source code explained in this article can be downloaded from Github (MIT license) and used for hobby and commercial projects.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/app-generator/flask-user-authentication"&gt;Flask User Authentication&lt;/a&gt; - source code&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MnDVdQak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3qmqu7b7xt00wayb428.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MnDVdQak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3qmqu7b7xt00wayb428.gif" alt="Flask User Authentication - Animated Presentation."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/flask"&gt;Flask Dashboards&lt;/a&gt; - free &amp;amp; commercial products&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Free Admin Dashboards&lt;/a&gt; - a curated list provided by AppSeed&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>flask</category>
      <category>webdev</category>
      <category>authentication</category>
      <category>appseed</category>
    </item>
    <item>
      <title>Announcing 'Beautiful CSS'</title>
      <author>Rui Sousa</author>
      <pubDate>Tue, 28 Sep 2021 08:37:41 +0000</pubDate>
      <link>https://dev.to/itzami/announcing-beautiful-css-3p26</link>
      <guid>https://dev.to/itzami/announcing-beautiful-css-3p26</guid>
      <description>&lt;p&gt;This week I launched a tool,  &lt;a href="https://beautifulcss.dev/"&gt;Beautiful CSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You just have to click on any of the components and it will copy its style to your clipboard so you can use it freely!&lt;/p&gt;

&lt;p&gt;I intend to increase its library so that it becomes the ultimate front-end developer tool!&lt;/p&gt;

&lt;p&gt;It's also on ProductHunt if you want to upvote it 👉 &lt;a href="https://www.producthunt.com/posts/beautiful-css"&gt;https://www.producthunt.com/posts/beautiful-css&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Any feedback is very much appreciated! 🤘&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>css</category>
      <category>showdev</category>
    </item>
    <item>
      <title>HTTPS for Developers</title>
      <author>Sebastián Ramírez</author>
      <pubDate>Tue, 28 Sep 2021 08:27:34 +0000</pubDate>
      <link>https://dev.to/tiangolo/https-for-developers-1774</link>
      <guid>https://dev.to/tiangolo/https-for-developers-1774</guid>
      <description>&lt;p&gt;This article lives in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/tiangolo/https-for-developers-1774"&gt;Dev.to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tiangolo.medium.com/https-for-developers-5e42dcf7d4db"&gt;Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tiangolo/blog-posts/blob/master/https-for-developers/README.md"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fastapi.tiangolo.com/deployment/https/"&gt;The FastAPI docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Here's a brief introduction to &lt;strong&gt;HTTPS for developers&lt;/strong&gt;. 🔒&lt;/p&gt;

&lt;p&gt;This article is extracted from the &lt;a href="https://fastapi.tiangolo.com/deployment/https/"&gt;FastAPI docs about HTTPS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I just upgraded those docs with several explanations and diagrams, and I thought the end result is &lt;strong&gt;generic&lt;/strong&gt; and &lt;strong&gt;useful&lt;/strong&gt; enough for many other developers (even in other &lt;strong&gt;languages&lt;/strong&gt; and &lt;strong&gt;frameworks&lt;/strong&gt;) to also publish it as a post, so here it is. 🤓&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-is-this-for"&gt;
  &lt;/a&gt;
  Who Is This For
&lt;/h2&gt;

&lt;p&gt;If you are a &lt;strong&gt;user&lt;/strong&gt;, your only interaction with HTTPS is with the &lt;strong&gt;browser&lt;/strong&gt; opening URLs, then you are better off just reading &lt;a href="https://howhttps.works/"&gt;How HTTPS Works&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are a &lt;strong&gt;cryptography researcher&lt;/strong&gt;, you are better off studying the cryptographic primitives and then reading the standards (RFCs).&lt;/p&gt;

&lt;p&gt;But if you are a &lt;strong&gt;developer&lt;/strong&gt; (programmer, coder) and want to know &lt;strong&gt;enough technical details&lt;/strong&gt; to understand how it works and &lt;strong&gt;how to use HTTPS&lt;/strong&gt; in your applications without going into the depths of cryptography and web standards, then this is for you! 🎉👇&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-https"&gt;
  &lt;/a&gt;
  About HTTPS
&lt;/h2&gt;

&lt;p&gt;It is easy to assume that HTTPS is something that is just "enabled" or not.&lt;/p&gt;

&lt;p&gt;But it is way more complex than that.&lt;/p&gt;

&lt;p&gt;To &lt;strong&gt;learn the basics of HTTPS&lt;/strong&gt;, from a consumer perspective, check &lt;a href="https://howhttps.works/"&gt;&lt;/a&gt;&lt;a href="https://howhttps.works/"&gt;https://howhttps.works/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, from a &lt;strong&gt;developer's perspective&lt;/strong&gt;, here are several things to have in mind while thinking about HTTPS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For HTTPS, &lt;strong&gt;the server&lt;/strong&gt; needs to &lt;strong&gt;have "certificates"&lt;/strong&gt; generated by a &lt;strong&gt;third party&lt;/strong&gt;.

&lt;ul&gt;
&lt;li&gt;Those certificates are actually &lt;strong&gt;acquired&lt;/strong&gt; from the third party, not "generated".&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Certificates have a &lt;strong&gt;lifetime&lt;/strong&gt;.

&lt;ul&gt;
&lt;li&gt;They &lt;strong&gt;expire&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;And then they need to be &lt;strong&gt;renewed&lt;/strong&gt;, &lt;strong&gt;acquired again&lt;/strong&gt; from the third party.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;The encryption of the connection happens at the &lt;strong&gt;TCP level&lt;/strong&gt;.

&lt;ul&gt;
&lt;li&gt;That's one layer &lt;strong&gt;below HTTP&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;So, the &lt;strong&gt;certificate and encryption&lt;/strong&gt; handling is done &lt;strong&gt;before HTTP&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;TCP doesn't know about "domains"&lt;/strong&gt;. Only about IP addresses.

&lt;ul&gt;
&lt;li&gt;The information about the &lt;strong&gt;specific domain&lt;/strong&gt; requested goes in the &lt;strong&gt;HTTP data&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;HTTPS certificates&lt;/strong&gt; "certify" a &lt;strong&gt;certain domain&lt;/strong&gt;, but the protocol and encryption happen at the TCP level, &lt;strong&gt;before knowing&lt;/strong&gt; which domain is being dealt with.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;By default&lt;/strong&gt;, that would mean that you can only have &lt;strong&gt;one HTTPS certificate per IP address&lt;/strong&gt;.

&lt;ul&gt;
&lt;li&gt;No matter how big your server is or how small each application you have on it might be.&lt;/li&gt;
&lt;li&gt;There is a &lt;strong&gt;solution&lt;/strong&gt; to this, however.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;There's an &lt;strong&gt;extension&lt;/strong&gt; to the &lt;strong&gt;TLS&lt;/strong&gt; protocol (the one handling the encryption at the TCP level, before HTTP) called &lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Server_Name_Indication"&gt;SNI&lt;/a&gt;&lt;/strong&gt;.

&lt;ul&gt;
&lt;li&gt;This SNI extension allows one single server (with a &lt;strong&gt;single IP address&lt;/strong&gt;) to have &lt;strong&gt;several HTTPS certificates&lt;/strong&gt; and serve &lt;strong&gt;multiple HTTPS domains/applications&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;For this to work, a &lt;strong&gt;single&lt;/strong&gt; component (program) running on the server, listening on the &lt;strong&gt;public IP address&lt;/strong&gt;, must have &lt;strong&gt;all the HTTPS certificates&lt;/strong&gt; in the server.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;After&lt;/strong&gt; obtaining a secure connection, the communication protocol is &lt;strong&gt;still HTTP&lt;/strong&gt;.

&lt;ul&gt;
&lt;li&gt;The contents are &lt;strong&gt;encrypted&lt;/strong&gt;, even though they are being sent with the &lt;strong&gt;HTTP protocol&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is a common practice to have &lt;strong&gt;one program/HTTP server&lt;/strong&gt; running on the server (the machine, host, etc.) and &lt;strong&gt;managing all the HTTPS parts&lt;/strong&gt;: receiving the &lt;strong&gt;encrypted HTTPS requests&lt;/strong&gt;, sending the &lt;strong&gt;decrypted HTTP requests&lt;/strong&gt; to the actual HTTP application running in the same server (the &lt;strong&gt;FastAPI&lt;/strong&gt; application, in this case), take the &lt;strong&gt;HTTP response&lt;/strong&gt; from the application, &lt;strong&gt;encrypt it&lt;/strong&gt; using the appropriate &lt;strong&gt;HTTPS certificate&lt;/strong&gt; and sending it back to the client using &lt;strong&gt;HTTPS&lt;/strong&gt;. This server is often called a &lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/TLS_termination_proxy"&gt;TLS Termination Proxy&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Some of the options you could use as a TLS Termination Proxy are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Traefik (that can also handle certificate renewals)&lt;/li&gt;
&lt;li&gt;Caddy (that can also handle certificate renewals)&lt;/li&gt;
&lt;li&gt;Nginx&lt;/li&gt;
&lt;li&gt;HAProxy&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lets-encrypt"&gt;
  &lt;/a&gt;
  Let's Encrypt
&lt;/h2&gt;

&lt;p&gt;Before Let's Encrypt, these &lt;strong&gt;HTTPS certificates&lt;/strong&gt; were sold by trusted third parties.&lt;/p&gt;

&lt;p&gt;The process to acquire one of these certificates used to be cumbersome, require quite some paperwork and the certificates were quite expensive.&lt;/p&gt;

&lt;p&gt;But then &lt;strong&gt;&lt;a href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt;&lt;/strong&gt; was created.&lt;/p&gt;

&lt;p&gt;It is a project from the Linux Foundation. It provides &lt;strong&gt;HTTPS certificates for free&lt;/strong&gt;, in an automated way. These certificates use all the standard cryptographic security, and are short-lived (about 3 months), so the &lt;strong&gt;security is actually better&lt;/strong&gt; because of their reduced lifespan.&lt;/p&gt;

&lt;p&gt;The domains are securely verified and the certificates are generated automatically. This also allows automating the renewal of these certificates.&lt;/p&gt;

&lt;p&gt;The idea is to automate the acquisition and renewal of these certificates so that you can have &lt;strong&gt;secure HTTPS, for free, forever&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#https-for-developers-by-example"&gt;
  &lt;/a&gt;
  HTTPS for Developers by Example
&lt;/h2&gt;

&lt;p&gt;Here's an example of how an HTTPS API could look like, step by step, paying attention mainly to the ideas important for developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#domain-name"&gt;
  &lt;/a&gt;
  Domain Name
&lt;/h3&gt;

&lt;p&gt;It would probably all start by you &lt;strong&gt;acquiring&lt;/strong&gt; some &lt;strong&gt;domain name&lt;/strong&gt;. Then, you would configure it in a DNS server (possibly your same cloud provider).&lt;/p&gt;

&lt;p&gt;You would probably get a cloud server (a virtual machine) or something similar, and it would have a fixed &lt;strong&gt;public IP address&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the DNS server(s) you would configure a record (an "&lt;code&gt;A record&lt;/code&gt;") to point &lt;strong&gt;your domain&lt;/strong&gt; to the public &lt;strong&gt;IP address of your server&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You would probably do this just once, the first time, when setting everything up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: This Domain Name part is way before HTTPS, but as everything depends on the domain and the IP address, it's worth mentioning it here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dns"&gt;
  &lt;/a&gt;
  DNS
&lt;/h3&gt;

&lt;p&gt;Now let's focus on all the actual HTTPS parts.&lt;/p&gt;

&lt;p&gt;First, the browser would check with the &lt;strong&gt;DNS servers&lt;/strong&gt; what is the &lt;strong&gt;IP for the domain&lt;/strong&gt;, in this case, &lt;code&gt;someapp.example.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The DNS servers would tell the browser to use some specific &lt;strong&gt;IP address&lt;/strong&gt;. That would be the public IP address used by your server, that you configured in the DNS servers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oul2c5AA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tiangolo/blog-posts/raw/master/https-for-developers/img/https01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oul2c5AA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tiangolo/blog-posts/raw/master/https-for-developers/img/https01.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tls-handshake-start"&gt;
  &lt;/a&gt;
  TLS Handshake Start
&lt;/h3&gt;

&lt;p&gt;The browser would then communicate with that IP address on &lt;strong&gt;port 443&lt;/strong&gt; (the HTTPS port).&lt;/p&gt;

&lt;p&gt;The first part of the communication is just to establish the connection between the client and the server and to decide the cryptographic keys they will use, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LyFaYMyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tiangolo/blog-posts/raw/master/https-for-developers/img/https02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LyFaYMyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tiangolo/blog-posts/raw/master/https-for-developers/img/https02.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This interaction between the client and the server to establish the TLS connection is called the &lt;strong&gt;TLS handshake&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tls-with-sni-extension"&gt;
  &lt;/a&gt;
  TLS with SNI Extension
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Only one process&lt;/strong&gt; in the server can be listening on a specific &lt;strong&gt;port&lt;/strong&gt; in a specific &lt;strong&gt;IP address&lt;/strong&gt;. There could be other processes listening on other ports in the same IP address, but only one for each combination of IP address and port.&lt;/p&gt;

&lt;p&gt;TLS (HTTPS) uses the specific port &lt;code&gt;443&lt;/code&gt; by default. So that's the port we would need.&lt;/p&gt;

&lt;p&gt;As only one process can be listening on this port, the process that would do it would be the &lt;strong&gt;TLS Termination Proxy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The TLS Termination Proxy would have access to one or more &lt;strong&gt;TLS certificates&lt;/strong&gt; (HTTPS certificates).&lt;/p&gt;

&lt;p&gt;Using the &lt;strong&gt;SNI extension&lt;/strong&gt; discussed above, the TLS Termination Proxy would check which of the TLS (HTTPS) certificates available it should use for this connection, using the one that matches the domain expected by the client.&lt;/p&gt;

&lt;p&gt;In this case, it would use the certificate for &lt;code&gt;someapp.example.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fsB2fo0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tiangolo/blog-posts/raw/master/https-for-developers/img/https03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fsB2fo0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tiangolo/blog-posts/raw/master/https-for-developers/img/https03.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The client already &lt;strong&gt;trusts&lt;/strong&gt; the entity that generated that TLS certificate (in this case Let's Encrypt, but we'll see about that later), so it can &lt;strong&gt;verify&lt;/strong&gt; that the certificate is valid.&lt;/p&gt;

&lt;p&gt;Then, using the certificate, the client and the TLS Termination Proxy &lt;strong&gt;decide how to encrypt&lt;/strong&gt; the rest of the &lt;strong&gt;TCP communication&lt;/strong&gt;. This completes the &lt;strong&gt;TLS Handshake&lt;/strong&gt; part.&lt;/p&gt;

&lt;p&gt;After this, the client and the server have an &lt;strong&gt;encrypted TCP connection&lt;/strong&gt;, this is what TLS provides. And then they can use that connection to start the actual &lt;strong&gt;HTTP communication&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And that's what &lt;strong&gt;HTTPS&lt;/strong&gt; is, it's just plain &lt;strong&gt;HTTP&lt;/strong&gt; inside a &lt;strong&gt;secure TLS connection&lt;/strong&gt; instead of a pure (unencrypted) TCP connection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: Notice that the encryption of the communication happens at the &lt;strong&gt;TCP level&lt;/strong&gt;, not at the HTTP level.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#https-request"&gt;
  &lt;/a&gt;
  HTTPS Request
&lt;/h3&gt;

&lt;p&gt;Now that the client and server (specifically the browser and the TLS Termination Proxy) have an &lt;strong&gt;encrypted TCP connection&lt;/strong&gt;, they can start the &lt;strong&gt;HTTP communication&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So, the client sends an &lt;strong&gt;HTTPS request&lt;/strong&gt;. This is just an HTTP request through an encrypted TLS connection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0E45qsVE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tiangolo/blog-posts/raw/master/https-for-developers/img/https04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0E45qsVE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tiangolo/blog-posts/raw/master/https-for-developers/img/https04.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#decrypt-the-request"&gt;
  &lt;/a&gt;
  Decrypt the Request
&lt;/h3&gt;

&lt;p&gt;The TLS Termination Proxy would use the encryption agreed to &lt;strong&gt;decrypt the request&lt;/strong&gt;, and would transmit the &lt;strong&gt;plain (decrypted) HTTP request&lt;/strong&gt; to the process running the application (for example a process with Uvicorn running the FastAPI application).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LmRef5dO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tiangolo/blog-posts/raw/master/https-for-developers/img/https05.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LmRef5dO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tiangolo/blog-posts/raw/master/https-for-developers/img/https05.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#http-response"&gt;
  &lt;/a&gt;
  HTTP Response
&lt;/h3&gt;

&lt;p&gt;The application would process the request and send a &lt;strong&gt;plain (unencrypted) HTTP response&lt;/strong&gt; to the TLS Termination Proxy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iC3RxaVr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tiangolo/blog-posts/raw/master/https-for-developers/img/https06.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iC3RxaVr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tiangolo/blog-posts/raw/master/https-for-developers/img/https06.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#https-response"&gt;
  &lt;/a&gt;
  HTTPS Response
&lt;/h3&gt;

&lt;p&gt;The TLS Termination Proxy would then &lt;strong&gt;encrypt the response&lt;/strong&gt; using the cryptography agreed before (that started with the certificate for &lt;code&gt;someapp.example.com&lt;/code&gt;), and send it back to the browser.&lt;/p&gt;

&lt;p&gt;Next, the browser would verify that the response is valid and encrypted with the right cryptographic key, etc. It would then &lt;strong&gt;decrypt the response&lt;/strong&gt; and process it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NtixEBq5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tiangolo/blog-posts/raw/master/https-for-developers/img/https07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NtixEBq5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tiangolo/blog-posts/raw/master/https-for-developers/img/https07.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The client (browser) will know that the response comes from the correct server because it is using the cryptography they agreed using the &lt;strong&gt;HTTPS certificate&lt;/strong&gt; before.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiple-applications"&gt;
  &lt;/a&gt;
  Multiple Applications
&lt;/h3&gt;

&lt;p&gt;In the same server (or servers), there could be &lt;strong&gt;multiple applications&lt;/strong&gt;, for example, other API programs or a database.&lt;/p&gt;

&lt;p&gt;Only one process can be handling the specific IP and port (the TLS Termination Proxy in our example) but the other applications/processes can be running on the server(s) too, as long as they don't try to use the same &lt;strong&gt;combination of public IP and port&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fRamF7Lx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tiangolo/blog-posts/raw/master/https-for-developers/img/https08.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fRamF7Lx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tiangolo/blog-posts/raw/master/https-for-developers/img/https08.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That way, the TLS Termination Proxy could handle HTTPS and certificates for &lt;strong&gt;multiple domains&lt;/strong&gt;, for multiple applications, and then transmit the requests to the right application in each case.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#certificate-renewal"&gt;
  &lt;/a&gt;
  Certificate Renewal
&lt;/h3&gt;

&lt;p&gt;At some point in the future, each certificate would &lt;strong&gt;expire&lt;/strong&gt; (about 3 months after acquiring it).&lt;/p&gt;

&lt;p&gt;And then, there would be another program (in some cases it's another program, in some cases it could be the same TLS Termination Proxy) that would talk to Let's Encrypt, and renew the certificate(s).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nFPP7Y_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tiangolo/blog-posts/raw/master/https-for-developers/img/https.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nFPP7Y_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tiangolo/blog-posts/raw/master/https-for-developers/img/https.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;TLS certificates&lt;/strong&gt; are &lt;strong&gt;associated with a domain name&lt;/strong&gt;, not with an IP address.&lt;/p&gt;

&lt;p&gt;So, to renew the certificates, the renewal program needs to &lt;strong&gt;prove&lt;/strong&gt; to the authority (Let's Encrypt) that it indeed &lt;strong&gt;"owns" and controls that domain&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To do that, and to accommodate different application needs, there are several ways it can do it. Some popular ways are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Modify some DNS records&lt;/strong&gt;.

&lt;ul&gt;
&lt;li&gt;For this, the renewal program needs to support the APIs of the DNS provider, so, depending on the DNS provider you are using, this might or might not be an option.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Run as a server&lt;/strong&gt; (at least during the certificate acquisition process) on the public IP address associated with the domain.

&lt;ul&gt;
&lt;li&gt;As we said above, only one process can be listening on a specific IP and port.&lt;/li&gt;
&lt;li&gt;This is one of the reasons why it's very useful when the same TLS Termination Proxy also takes care of the certificate renewal process.&lt;/li&gt;
&lt;li&gt;Otherwise, you might have to stop the TLS Termination Proxy momentarily, start the renewal program to acquire the certificates, then configure them with the TLS Termination Proxy, and then restart the TLS Termination Proxy. This is not ideal, as your app(s) will not be available during the time that the TLS Termination Proxy is off.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All this renewal process, while still serving the app, is one of the main reasons why you would want to have a &lt;strong&gt;separate system to handle HTTPS&lt;/strong&gt; with a TLS Termination Proxy instead of just using the TLS certificates with the application server directly (e.g. Uvicorn).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;Having &lt;strong&gt;HTTPS&lt;/strong&gt; is very important, and quite &lt;strong&gt;critical&lt;/strong&gt; in most cases. Most of the effort you as a developer have to put around HTTPS is just about &lt;strong&gt;understanding these concepts&lt;/strong&gt; and how they work.&lt;/p&gt;

&lt;p&gt;But once you know the basic information of &lt;strong&gt;HTTPS for developers&lt;/strong&gt; you can easily combine and configure different tools to help you manage everything in a simple way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-more"&gt;
  &lt;/a&gt;
  Learn More
&lt;/h2&gt;

&lt;p&gt;This article is extracted from the &lt;a href="https://fastapi.tiangolo.com/deployment/https/"&gt;FastAPI documentation about deployments and HTTPS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to learn concrete examples of some tools you can use and how to configure them to deploy a FastAPI application, check out the next chapters in the &lt;a href="https://fastapi.tiangolo.com/deployment/"&gt;FastAPI documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About me
&lt;/h2&gt;

&lt;p&gt;Hey! 👋 I'm Sebastián Ramírez (&lt;a href="https://tiangolo.com"&gt;tiangolo&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;You can follow me, contact me, see what I do, or use my open source code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tiangolo"&gt;GitHub: tiangolo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/tiangolo"&gt;Twitter: tiangolo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/tiangolo/"&gt;LinkedIn: tiangolo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/tiangolo"&gt;Dev: tiangolo.to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tiangolo.medium.com/"&gt;Medium: tiangolo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tiangolo.com"&gt;Web: tiangolo.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>https</category>
      <category>fastapi</category>
      <category>devops</category>
    </item>
    <item>
      <title>API Testing - XML Requests and Response Validation in vREST NG</title>
      <author>Dheeraj Aggarwal</author>
      <pubDate>Tue, 28 Sep 2021 07:55:52 +0000</pubDate>
      <link>https://dev.to/dheerajaggarwal/api-testing-xml-requests-and-response-validation-in-vrest-ng-1fmb</link>
      <guid>https://dev.to/dheerajaggarwal/api-testing-xml-requests-and-response-validation-in-vrest-ng-1fmb</guid>
      <description>&lt;p&gt;Watch our video #tutorial on how you may invoke SOAP requests or send XML payloads and validate XML responses easily within few seconds using the #vREST NG Application.&lt;/p&gt;

&lt;p&gt;Video Link: &lt;a href="https://youtu.be/rAQZv-SMJpk"&gt;https://youtu.be/rAQZv-SMJpk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Playlist: &lt;a href="https://youtube.com/playlist?list=PLmua155_WrDzt1AbB6iV5Lsw_Z7QrzZZ0"&gt;https://youtube.com/playlist?list=PLmua155_WrDzt1AbB6iV5Lsw_Z7QrzZZ0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;vREST NG is an enterprise-ready application for Automated API Testing. You can download and install the vREST NG application directly on Windows, OSX, and Linux via our website.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Important Links:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://vrest.io/?utm_source=devto&amp;amp;utm_medium=devto-desc&amp;amp;utm_campaign=video"&gt;vREST NG Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//support@vrest.io"&gt;Contact Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discord.gg/NtRa7kw"&gt;Community Chat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://meetings.hubspot.com/dheeraj-aggarwal"&gt;Book a Live Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please do like and share if you found this video helpful and let the voice heard by the testing community. Also, let us know your feedback by commenting on this post.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>vrestng</category>
      <category>apitesting</category>
    </item>
    <item>
      <title>Why do we trust blockchain as a technology?</title>
      <author>Mojtaba khodami</author>
      <pubDate>Tue, 28 Sep 2021 07:55:11 +0000</pubDate>
      <link>https://dev.to/mojtaba/why-do-we-trust-blockchain-as-a-technology-44he</link>
      <guid>https://dev.to/mojtaba/why-do-we-trust-blockchain-as-a-technology-44he</guid>
      <description>&lt;p&gt;&lt;strong&gt;Blockchain&lt;/strong&gt; is a young tech introduced by “Satoshi Nakamoto” as a decentralized, distributed and cryptographically hashed tamper-proof ledger! (Wait, what?)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;THIS ARTICLE WAS FIRST PUBLISHED ON &lt;a href="https://medium.com/@mjtbkh/blockchain-why-do-we-trust-it-d95c36cfabaa"&gt;@MJTBKH ON MEDIUM&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Simply explained, it’s a new database architecture in which the data is cryptographically hashed and stored on various hosts also called “nodes” in the world of blockchain and cryptography. Blockchain stores data on entities called block; each block has a signature or hash which is unique and is an identicator specific to that block.&lt;br&gt;
The data being a bitcoin transaction in our case is picked by the node (better say miner) and evaluated to see if data is consisted of valid transactions. Then if it’s valid, the miner will sign it (hash it) to be emitted to all other nodes present in network.&lt;br&gt;
Hashes generated by bitcoin blockchain algorithm (SHA-256) are 64-digit hexadecimal numbers, highly randomized and unpredictable; meaning you can’t guess what will be the hash of a block going to be mined containing 2000 transactions, unless you calculate the hash. Neither you can’t guess the outcome of adding 1 more transaction or replacing 1 with other.&lt;br&gt;
The hash generated for a specific data will always be the same and it can’t be reversed, meaning you wouldn’t know what the actual data was even if you have the hash. A phenomenon named “Avalanche effect” makes the hashes so unpredictable; meaning the hash for “hello, world” will be totally different from the hash for “Hello, world”.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sha-256 hash of “hello, world”: 09ca7e4eaa6e8ae9c7d261167129184883644d07dfba7cbfbc4c8a2e08360d5b
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sha-256 hash of “Hello, world” : 4ae7c3b6ac0beff671efa8cf57386151c06e58ca53a78d83f36107316cec125f
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try your self: &lt;a href="https://tools.superdatascience.com/blockchain/hash/"&gt;hashing tool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition to transactions, there multiple other parameters involved in generating a hash; one them being the hash of previous block. Miner should pick a bunch of transactions and get the hash of previous mined block and begin generating as many hashes as possible until it finds a hash which is equal or less then a hexadecimal number indicated by the blockchain it self. This number is called “difficulty of network”, calculated by the blockchain based on the number of current miners (hashing power) active in the network.&lt;br&gt;
Now imagine a dumb miner trying to manipulate a block in the blockchain mined 2 years ago by adding a fake transaction to the block. By doing so, the previous hash of block becomes invalid. No he mines a new hash for that block, but here comes the Avalanche effect; the hash of next block becomes invalid too, and in a chain reaction the hash of blocks mined after the manipulated block become invalid. Now let’s imagine our fool friend has mined new hash for every block, it’s now time to emit the blocks and their hashed to other nodes in the network. The blockchain has now to decide the healthy chain, and here comes the “Consensus protocol”, all other healthy nodes/miners reject the emitted chain and since the majority of nodes in the blockchain are going to reject the new manipulated chain, the process of manipulating the blockchain fails. The distribution and decentrality of blockchain avoids it to relay on one central copy of the whole network which demonstrates what is right and what is not. This is the tamper-proof nature of blockchain that gives us trust.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simple-example-to-better-understand-blockchain"&gt;
  &lt;/a&gt;
  Simple example to better understand blockchain
&lt;/h2&gt;

&lt;p&gt;Imagine a small city without any banks, where people rely on 7 accountants to record their transactions. Each accountant is responsible to record the list of transaction in his ledger and by the end of day, other 6 accountants will write a copy of the list in their own ledger.&lt;br&gt;
Thus, there are 7 copies of all transactions since the day 1 in the city. Whenever someone is going to send a transaction for another citizen, accountant is responsible to see if the person has enough balance to do the transaction, and if so, the accountant approves the transaction. When other accountants are going to record the list generated by the other accountant, they'll be also verifying if the transactions recorded by the responsible accountant are valid.&lt;br&gt;
This is a simple example of a non-digital, non-cryptographically hashed distributed ledger. Using blockchain we can achieve an even more secure distributed ledger to keep transaction data and avoid fraud.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>bitcoin</category>
      <category>consensus</category>
    </item>
    <item>
      <title>Facebook and Google Authentication with Node.js and Doppler</title>
      <author>Ekekenta Odioyenfe .C</author>
      <pubDate>Tue, 28 Sep 2021 07:53:41 +0000</pubDate>
      <link>https://dev.to/zion/facebook-and-google-authentication-with-node-js-and-doppler-maf</link>
      <guid>https://dev.to/zion/facebook-and-google-authentication-with-node-js-and-doppler-maf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Facebook and Google login is widely used as an authentication module in our modern web application. There are API keys assigned to every application created using these platforms.&lt;br&gt;
Managing these secrets in our application can be a nightmare when building large-scale applications that require a lot of secret keys.&lt;br&gt;
With Doppler, you don't have to worry about the security and management of your API secret keys.&lt;br&gt;
In this tutorial, we will learn how to create a user authentication in Node.js using Facebook and Google login, manage and secure our API secrets with Doppler.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goals"&gt;
  &lt;/a&gt;
  Goals
&lt;/h2&gt;

&lt;p&gt;In this tutorial, we will authenticate users using Facebook, and Google authentication. We will manage and secure our API secrets with Doppler.&lt;br&gt;
We will look at how to create a Doppler project, Facebook app, and google app. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Doppler has significantly changed and increased the productivity of our applications since its release. No need to subject our secrets to vulnerabilities by storing them in a &lt;strong&gt;.env&lt;/strong&gt; file located in our project directory. Over time, I have had to make the mistake of hosting my applications alongside my &lt;strong&gt;.env&lt;/strong&gt;  on Github. But thanks to Doppler, all that is a thing of the past. &lt;br&gt;
Doppler has a CLI tool that runs on every operating system, to enable you to configure your applications easily, giving you access to your secrets from your development, staging to your production environment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-doppler"&gt;
  &lt;/a&gt;
  Setting up Doppler
&lt;/h2&gt;

&lt;p&gt;To manage your secrets using Doppler, you need to create a Doppler account. To get started, go to the  &lt;a href="https://www.doppler.com/"&gt;Doppler&lt;/a&gt; official website and create an account for free. Sign up with your full name, email, and password. After creating an account, Doppler will need a confirmation on your email. So go to your Gmail, and confirm your email address.&lt;br&gt;
Next, create a workspace for your project. For this tutorial, we’ll call our workspace &lt;code&gt;authWithDoppler&lt;/code&gt;.   After creating a workspace, Doppler provides you with an example project to get started. &lt;br&gt;
Next, you need to install the Doppler CLI to access your secrets in your development environment. Check out the Doppler &lt;a href="https://docs.doppler.com/docs/cli"&gt;documentation&lt;/a&gt; for the installation guide on your operating system. On Ubuntu, below are the installation commands.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Install pre-reqs
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -y apt-transport-https ca-certificates curl gnupg

# Add Doppler's GPG key
curl -sLf --retry 3 --tlsv1.2 --proto "=https" 'https://packages.doppler.com/public/cli/gpg.DE2A7741A397C129.key' | sudo apt-key add -

# Add Doppler's apt repo
echo "deb https://packages.doppler.com/public/cli/deb/debian any-version main" | sudo tee /etc/apt/sources.list.d/doppler-cli.list

# Fetch and install latest doppler cli
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install doppler
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, verify the Doppler CLI is installed by checking its version with the command below:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;doppler --version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If everything went well, you should see the version printed on your terminal.&lt;br&gt;
Finally, Login into your Doppler account from the Doppler CLI with the command below:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;doppler login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You’ll be asked for confirmation to open the authorization page on your browser. Type &lt;strong&gt;Y&lt;/strong&gt; and hit the &lt;strong&gt;Enter&lt;/strong&gt; key. Doppler will open the authorization page in your browser, sign in with your account details. Then proceed to your terminal, copy and paste the auth code on the auth form in your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mo3BYMIy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/pwQQ1uuR3VMgKGHsUFn69rIorLOB3ZjfAYCEa9r7hXyq2IMqWbE8oNMjITawQbseoCb28nWMZiIuvYlN23Tc9IGRu_vzv6bQRPvzC_FyqquwajLrruaBC4JR09lFX2q-6NMrofeq%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mo3BYMIy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/pwQQ1uuR3VMgKGHsUFn69rIorLOB3ZjfAYCEa9r7hXyq2IMqWbE8oNMjITawQbseoCb28nWMZiIuvYlN23Tc9IGRu_vzv6bQRPvzC_FyqquwajLrruaBC4JR09lFX2q-6NMrofeq%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything went well, you see a welcome message on your terminal. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-doppler-project"&gt;
  &lt;/a&gt;
  Creating a Doppler Project
&lt;/h2&gt;

&lt;p&gt;We will be creating a Doppler project for our application. To get started, go back to the Doppler Dashboard on your browser, click on the plus icon to create a new project. For this tutorial, we will call it &lt;code&gt;authwithdoppler&lt;/code&gt;, add a little description if you want, but that’s optional.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vvby8b-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/auJBErHbdIiDK078kNkYbThDmNZ2CifCM5BPdtTGBCip1V7EeOguPxeW82P0jOWOozd23bIY7b7zO1sA71CjHevd_PQRkmZthHk1ai-hu06-yMU16cl2lVzMdL9UnemF70M8JFXV%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vvby8b-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/auJBErHbdIiDK078kNkYbThDmNZ2CifCM5BPdtTGBCip1V7EeOguPxeW82P0jOWOozd23bIY7b7zO1sA71CjHevd_PQRkmZthHk1ai-hu06-yMU16cl2lVzMdL9UnemF70M8JFXV%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Doppler runs on three environments, which are development, staging, and production environments. We will cover the demonstration in a development environment. Check out the Doppler &lt;a href="https://docs.doppler.com/docs/enclave-installation"&gt;documentation&lt;/a&gt; to know how docker works in other environments. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-facebook-app"&gt;
  &lt;/a&gt;
  Creating a Facebook App
&lt;/h2&gt;

&lt;p&gt;At this point, our Doppler is ready for our project secrets. To authenticate users using Facebook authentication in your application, you need to get your application registered on Facebook. So go to &lt;a href="https://developers.facebook.com/"&gt;Facebook Developers&lt;/a&gt; and create an App for your project. Then select &lt;strong&gt;Consumer&lt;/strong&gt; depending on your application use case.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nXdF2SAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/RuitT2w5pw-lgLWOlfJlaQTj8yAKY9vhjZDfXjHHDv6pkfIS31UYgSVPkbFmGkfMhJX0WHUyXDClgQ6Bu1TfVn5APTe8-7ZoKDrlIume8XTVco8d3rLFau3w0m3m9x_IORP0Gus4%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nXdF2SAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/RuitT2w5pw-lgLWOlfJlaQTj8yAKY9vhjZDfXjHHDv6pkfIS31UYgSVPkbFmGkfMhJX0WHUyXDClgQ6Bu1TfVn5APTe8-7ZoKDrlIume8XTVco8d3rLFau3w0m3m9x_IORP0Gus4%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, add your application details, add a display name. For this tutorial, we'll call it &lt;code&gt;authWithDoppler&lt;/code&gt;, enter your email address, and hit the &lt;strong&gt;Create App&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tq0EfuzW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/aQ8IndAe0-N73niWP21ubChjE63cRKGjvm0tLwaVQRyO-bT4KqPrWhRdvbxI-L3ZtJH0SF1R5tHgfWpQX9-CCn7nZ2biP3Q7rioq03dBB4ODHKK-Ldj-GTrni2ASTBntgIWJf9kZ%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tq0EfuzW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/aQ8IndAe0-N73niWP21ubChjE63cRKGjvm0tLwaVQRyO-bT4KqPrWhRdvbxI-L3ZtJH0SF1R5tHgfWpQX9-CCn7nZ2biP3Q7rioq03dBB4ODHKK-Ldj-GTrni2ASTBntgIWJf9kZ%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, add products to the App. Since you are handling user authentication, you’ll be setting up a Facebook Login product. So click the &lt;strong&gt;set up&lt;/strong&gt; on the Facebook Login tab. Then choose a website as your platform. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i4VuHmnw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/JTs4j1M7Uf3Vqkyx08awaNuH0dLx-cvIdFvzU6QN-iJcrpAJ0TqIWtauv1nUFNVBDzGzUfa2rW82V2dR86S1i5iHZuwxV6TpAQZRRD-eJtynmQyjFZPkvoTQPKNR4jZrCIYAxy75%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i4VuHmnw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/JTs4j1M7Uf3Vqkyx08awaNuH0dLx-cvIdFvzU6QN-iJcrpAJ0TqIWtauv1nUFNVBDzGzUfa2rW82V2dR86S1i5iHZuwxV6TpAQZRRD-eJtynmQyjFZPkvoTQPKNR4jZrCIYAxy75%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, you'll be asked for the details of your website. If you are testing the application on localhost, then add your host address, save and continue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zM3m9rKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/yMy-lmXs1GDcclcQG_oGnU1UQQ0cAos4qkHUYxJorqQoYGKkiilI8_dbiVKigCvLavnx4Nep5tvP0OF_Ozk20a38SFioJk1_2fm-zvghjCYwm7QYpnw1zQx05FpvE3mpNx883UTr%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zM3m9rKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/yMy-lmXs1GDcclcQG_oGnU1UQQ0cAos4qkHUYxJorqQoYGKkiilI8_dbiVKigCvLavnx4Nep5tvP0OF_Ozk20a38SFioJk1_2fm-zvghjCYwm7QYpnw1zQx05FpvE3mpNx883UTr%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, your Facebook app is ready. Now click on &lt;strong&gt;Settings &amp;gt; Basic&lt;/strong&gt; to see your App secrets. Leave it open for now while we create a Google App.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-google-app"&gt;
  &lt;/a&gt;
  Creating a Google App
&lt;/h2&gt;

&lt;p&gt;Creating a Google App is a straightforward process. To get started, you need to get Google credentials for your application. So go to &lt;a href="https://console.developers.google.com/"&gt;Google Developers Console&lt;/a&gt; and create an App for your project. On the Google developers dashboard, create a new project for your application, choose a name for the project. For this tutorial, we will call it &lt;code&gt;authWithDoppler&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oCJtJopG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/GnWDD6CKUebkAKgntZAyfjjQA4yhqa3U2ftrio7F-UJK8f5F02F7QMW12sdkxsdFydbrnORy15NhAoHiuTAZF6eRQh_p5a6vJC1xr8x_RySkooBVpBxlpTu5zlIxPrjoehF5RgKL%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oCJtJopG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/GnWDD6CKUebkAKgntZAyfjjQA4yhqa3U2ftrio7F-UJK8f5F02F7QMW12sdkxsdFydbrnORy15NhAoHiuTAZF6eRQh_p5a6vJC1xr8x_RySkooBVpBxlpTu5zlIxPrjoehF5RgKL%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, configure your OAuth consent screen, which provides you with OAuth client ID. Then choose how you want to configure and register your app. Choose external since you are using it to authenticate your app users.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hzGdcjME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/MuIFKemN3sAWEDk7IInPH7cZZbB0aDEjVBab7yjI6mgYTaN1Rs_1TzRH7QiPH8XpnoAa0AkHbjoOMaVTw0Wiwah5984tY9zIgUgcFLuck20G-wdkC0ZZYWLMdb_MLPV-pUtTeVKz%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hzGdcjME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/MuIFKemN3sAWEDk7IInPH7cZZbB0aDEjVBab7yjI6mgYTaN1Rs_1TzRH7QiPH8XpnoAa0AkHbjoOMaVTw0Wiwah5984tY9zIgUgcFLuck20G-wdkC0ZZYWLMdb_MLPV-pUtTeVKz%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, fill in the information of your application, give it the name &lt;code&gt;authWithDoppler&lt;/code&gt;. Provide your email address, and your app logo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F8lt9131--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/eOTiCIWi2RiUx5hamG8mVONqeq6XH0bkx24PQwdNn-iIUrCMPIyhFk84_mbtthV0obWw58daOTHSfRP_pddt8d60UXqppMXy6poJ6Z_YcTVq2_9dIG0tW-U8qIV_ux23INuffXQW%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F8lt9131--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/eOTiCIWi2RiUx5hamG8mVONqeq6XH0bkx24PQwdNn-iIUrCMPIyhFk84_mbtthV0obWw58daOTHSfRP_pddt8d60UXqppMXy6poJ6Z_YcTVq2_9dIG0tW-U8qIV_ux23INuffXQW%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, create your App credentials. On the credentials page, create an OAuth client ID credential for your App.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cYHSNZye--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/Tw7vhWcwa9GQp-kcMUzn4oGWyIrZHSB5trUQ72PtTJyuYAWffzvNljpPoWz0KFW2DdcDxhwNqDWsUn_9oOiI-D5yLIqiEUZfIvPRVC71_HKrRT6ax4KBlS88F4gvVPrMRcjsnlDW%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cYHSNZye--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/Tw7vhWcwa9GQp-kcMUzn4oGWyIrZHSB5trUQ72PtTJyuYAWffzvNljpPoWz0KFW2DdcDxhwNqDWsUn_9oOiI-D5yLIqiEUZfIvPRVC71_HKrRT6ax4KBlS88F4gvVPrMRcjsnlDW%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, select web application as your application type. Add this line as the &lt;code&gt;https://localhost:4000&lt;/code&gt; as the &lt;strong&gt;authorized javascript origins&lt;/strong&gt;, and &lt;code&gt;http://localhost:4000/auth/google/callback&lt;/code&gt; as the &lt;strong&gt;authorized redirect URLs&lt;/strong&gt;.&lt;br&gt;
After creating the App, Google will pop up a modal containing your App credentials, still leave it open while we move back to our Doppler dashboard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#save-our-app-secret-on-doppler"&gt;
  &lt;/a&gt;
  Save Our App Secret on Doppler
&lt;/h2&gt;

&lt;p&gt;Our aim of using Doppler is to secure our application secrets by replacing the &lt;strong&gt;.env&lt;/strong&gt; file. So instead of saving all our secrets in a .env file, we will save them on Doppler. To get started, &lt;br&gt;
select the &lt;strong&gt;authwithdoppler&lt;/strong&gt; project we created, then click on the &lt;strong&gt;dev&lt;/strong&gt; tab to save our secrets in a development environment.&lt;br&gt;
Next, save your application secrets in the Doppler secret tab. Go back to your Facebook &lt;strong&gt;Settings &amp;gt; Basic&lt;/strong&gt;, copy your App ID and App Secret, and save them on Doppler.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3bwYQ_IC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/2Q9kg-kPY5_TeCAr6W1qWFer7Zgf8qXVtXAwyy4hW9bAI419cWppa6QWABPi-p41Sqjznj__AOdKFyMys_NrLMNPF6-tifWy_aFMKSi81UBQKiKRtDtlloRKyiReB5HH19Q-tunx%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3bwYQ_IC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/2Q9kg-kPY5_TeCAr6W1qWFer7Zgf8qXVtXAwyy4hW9bAI419cWppa6QWABPi-p41Sqjznj__AOdKFyMys_NrLMNPF6-tifWy_aFMKSi81UBQKiKRtDtlloRKyiReB5HH19Q-tunx%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, go back to your Google credentials page, copy your client ID and Client Secret and save them on Doppler.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2GWDBDQS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/reP1_QQrQrFtPJSkm5eAx2o8bHitiYhuPExDslJKeZ6HP5HcqAF5fLWamf1ECOOFdJvb_EgFPwasrLrtEse_aJy-d_cqcpY1Ojn9aiEXTJwkQf8HEdJa0S07yJLfxEiCx_ZFmYId%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2GWDBDQS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/reP1_QQrQrFtPJSkm5eAx2o8bHitiYhuPExDslJKeZ6HP5HcqAF5fLWamf1ECOOFdJvb_EgFPwasrLrtEse_aJy-d_cqcpY1Ojn9aiEXTJwkQf8HEdJa0S07yJLfxEiCx_ZFmYId%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click on the save button to save the secrets. At this point, our application secrets are saved on Doppler.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-our-nodejs-server"&gt;
  &lt;/a&gt;
  Setting our Node.js Server
&lt;/h2&gt;

&lt;p&gt;We have successfully created a Google and a Facebook App for our project. We also saved our secrets in Doppler. So let’s move on to our server setup. I have hosted the UI for this project on my Github page. To follow along, be sure you’ve cloned the &lt;a href="https://github.com/icode247/authWithDoppler"&gt;repository&lt;/a&gt;.&lt;br&gt;
After cloning the repository to your development environment, install the dependencies by running the command:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Then run the command below to start the project:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;So, here is the project structure of our application.&lt;/p&gt;

&lt;p&gt;📦Authentication&lt;br&gt;
┣ 📂controllers&lt;br&gt;
┃ ┣ 📜googleAuth.js&lt;br&gt;
┃ ┗ 📜passportAuth.js&lt;br&gt;
┣ 📂middlewares&lt;br&gt;
┃ ┗ 📜authMiddleware.js&lt;br&gt;
┣ 📂public&lt;br&gt;
┃ ┣ 📂css&lt;br&gt;
┃ ┃ ┗ 📜style.css&lt;br&gt;
┃ ┗ 📂img&lt;br&gt;
┃ ┃ ┗ 📜undraw_settings_tab_mgiw.svg&lt;br&gt;
┣ 📂views&lt;br&gt;
┃ ┣ 📂includes&lt;br&gt;
┃ ┃ ┗ 📜header.ejs&lt;br&gt;
┃ ┣ 📜app.ejs&lt;br&gt;
┃ ┗ 📜signin.ejs&lt;br&gt;
┣ 📜.gitignore&lt;br&gt;
┣ 📜doppler.yaml&lt;br&gt;
┣ 📜index.js&lt;br&gt;
┣ 📜package-lock.json&lt;br&gt;
┗ 📜package.json&lt;/p&gt;

&lt;p&gt;Now let’s move over to handling our user's authentication with Google and Facebook Authentication.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-passport"&gt;
  &lt;/a&gt;
  Configuring Passport
&lt;/h2&gt;

&lt;p&gt;To authenticate your users with Passport, you need to install some packages. To get started, install these packages with the command below :&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install passport passport-google-oauth20 passport-facebook cookie-parser express-session
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Wait for the installation to finish.&lt;br&gt;
Next, open the root &lt;strong&gt;index.js&lt;/strong&gt; file, and import the modules into the application.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const passport = require('passport')
const session = require('express-session')
const cookieParser = require('cookie-parser')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;After that, we need to set up our session middlewares for passports to authenticate and save our users' sessions.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//configure app sessions
app.use(cookieParser());
app.use(passport.initialize());
app.use(session({
   secret: 'keep it screet',
   resave: false,
   saveUninitialized: false
}));
app.use(passport.session());
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#creating-our-routes"&gt;
  &lt;/a&gt;
  Creating our Routes
&lt;/h2&gt;

&lt;p&gt;We will be adding two more routes to the application, one for the success login success page and the user logout. But first, we need to create a middleware to protect the success page from unauthorized users. So create a &lt;strong&gt;middleware/authMiddleware.js&lt;/strong&gt; file, then add the code below to it.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//confirm user is logged in
exports.confirmAuthentication = (req, res, next) =&amp;gt; {
   if (req.isAuthenticated()) {
       return next();
   }
   res.redirect('/')
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, create the logout and the success page routes. Open your &lt;strong&gt;index.js&lt;/strong&gt; root file and add this code below to it.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.get('/app', authMiddleware.confirmAuthentication, (req, res) =&amp;gt; {
   res.render("app.ejs")
})
app.get('/logout', (req, res)=&amp;gt;{
   req.logout()
   res.redirect('/')
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, create the routes for your both Facebook and Google authentication with the code below:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Google Auth routes
app.get('/auth/google', passport.authenticate('google', { scope: 'email' }));
app.get('/auth/google/callback',
   passport.authenticate('google', {
       successRedirect: '/app', failureRedirect: '/'
   }));

//Facebook Auth routes
app.get('/auth/facebook', passport.authenticate('facebook', { scope: 'email' }));
app.get('/auth/facebook/callback',
   passport.authenticate('facebook', {
       successRedirect: '/app', failureRedirect: '/'
   }))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Finally, let's create the view for the success page. Open the views directory, and create an app.ejs file. Then add the code below to it.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;%- include('./includes/header') -%&amp;gt;
&amp;lt;body&amp;gt;
   &amp;lt;div id="container"&amp;gt;
      &amp;lt;div class="details"&amp;gt;
          &amp;lt;h4&amp;gt;Success!, You are logged in&amp;lt;/h4&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;a href="/logout" class="btn btn-danger"&amp;gt;Logout&amp;lt;/a&amp;gt;
   &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#creating-google-authentication"&gt;
  &lt;/a&gt;
  Creating Google Authentication
&lt;/h2&gt;

&lt;p&gt;Now that we have created our authentication routes, the next step is to configure the passport to authenticate our users with Google. &lt;br&gt;
First, we need to load our environment variables from Doppler to our Node.js environment. To do that, you need to create a &lt;strong&gt;doppler.yaml&lt;/strong&gt; file in your project root directory. Then add the code below to it.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setup:
  project: authwithdoppler
  config: dev 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We just created a Doppler repo configuration file, specifying our project name, and environment.&lt;br&gt;
Now, open your terminal and run the command below on your application root directory.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;doppler setup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Doppler will ask if you want to use the settings from the repos config file, press &lt;strong&gt;Y&lt;/strong&gt; and the &lt;strong&gt;Enter&lt;/strong&gt; key.&lt;br&gt;
Finally, create a &lt;strong&gt;controller/googleAuth.js&lt;/strong&gt; file. Then add the code below to it.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const passport = require("passport");
const FacebookStrategy = require('passport-google-oauth20').Strategy

const configGoogleAuth = () =&amp;gt; {

   passport.use(new FacebookStrategy({
       clientID: process.env.GOOGLE_CLIENT_ID,
       clientSecret: process.env.GOOGLE_CLIENT_SECRET,
       callbackURL: 'http://localhost:4000/auth/google/callback',
   },
       function (accessToken, refreshToken, profile, done) {
           return done(null, profile)
       }
   ));

   // Passport session setup.
   passport.serializeUser(function (user, done) {
       done(null, user);
   });

   passport.deserializeUser(function (id, done) {
       done(null, id);
   });

}
module.exports = configGoogleAuth;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#creating-facebook-authentication"&gt;
  &lt;/a&gt;
  Creating Facebook Authentication
&lt;/h2&gt;

&lt;p&gt;Now we are done with Google authentication. So let's move over to Facebook. On your controller directory, create a new file &lt;strong&gt;facebookAuth.js&lt;/strong&gt;. Then add the code below to it.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const passport = require("passport");
const FacebookStrategy = require('passport-facebook').Strategy

const configFacebookAuth = () =&amp;gt; {

   passport.use(new FacebookStrategy({
       clientID: process.env.FACEBOOK_APP_ID,
       clientSecret: process.env.FACEBOOK_APP_SECRET,
       callbackURL: "http://localhost:4000/auth/facebook/callback"
   },
       function (accessToken, refreshToken, profile, done) {
           return done(null, profile)
       }
   ));

   // Passport session setup.
   passport.serializeUser(function (user, done) {
       done(null, user);
   });

   passport.deserializeUser(function (id, done) {
       done(null, id);
   });
}
module.exports = configFacebookAuth;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;At this point, our Facebook and Google authentication application is ready. Go ahead, restart the server and test the application on &lt;a href="https://localhosts.mobi/4000"&gt;localhost:4000&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RSpH8qO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/Ab6Qh_sUGXHqio4a2GxkYNmd2ineGh0I9QoLpu-1vuLp1Bl3etUFS4xFS07WdqG8gbHErIrLnNYB5-gu84NW2y3G9Bst5Mc5FLnG7AztpSVVqf9p2CUna0S6uN9QxG2efBpYLXnd%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RSpH8qO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/Ab6Qh_sUGXHqio4a2GxkYNmd2ineGh0I9QoLpu-1vuLp1Bl3etUFS4xFS07WdqG8gbHErIrLnNYB5-gu84NW2y3G9Bst5Mc5FLnG7AztpSVVqf9p2CUna0S6uN9QxG2efBpYLXnd%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Throughout this tutorial, you’ve learned how to create user authentication with Facebook and Google authentication. You created a Dopper account, installed the Doppler CLI. You’ve also known how to Create a Google and a Facebook App for your applications.&lt;br&gt;
Now how would you manage secrets in your application? Perhaps you can learn more about secret management with Doppler. &lt;br&gt;
&lt;strong&gt;&lt;em&gt;Related:&lt;/em&gt;&lt;/strong&gt; &lt;a href="https://dev.to/umavictor6/intro-to-doppler-real-life-use-case-4g1a"&gt;https://dev.to/umavictor6/intro-to-doppler-real-life-use-case-4g1a&lt;/a&gt;&lt;/p&gt;

</description>
      <category>security</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to retry and log the final result in Bash</title>
      <author>rinaxsumomo</author>
      <pubDate>Tue, 28 Sep 2021 07:23:22 +0000</pubDate>
      <link>https://dev.to/rinaxsumomo/how-to-retry-and-log-the-final-result-in-bash-17f0</link>
      <guid>https://dev.to/rinaxsumomo/how-to-retry-and-log-the-final-result-in-bash-17f0</guid>
      <description>&lt;p&gt;I know there are lots of how-to write retry logic in Bash, such as &lt;a href="https://stackoverflow.com/questions/12321469/retry-a-bash-command-with-timeout"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I've decided to use the one in the accepted answer above.&lt;br&gt;
However I wanted to add another logic to log the final result  as well, so I needed to modify this snippet as  &lt;em&gt;sleep&lt;/em&gt; always returns exit code 0 at last that logging depending on the exit code would not work as it always returns 0, even the command to be retried ended up with failure.&lt;/p&gt;

&lt;p&gt;So here is my snippet. Below runs YOUR_COMMAND until success, 4 times for the maximum, and echo the result based on the exit code. This might not work depending on how YOUR_COMMAND returns a result, but it worked in my case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;NEXT_WAIT_TIME=0
RESULT=0
until [ ${NEXT_WAIT_TIME} -eq 4 ] || YOUR_COMMAND
do
    sleep $(( NEXT_WAIT_TIME++ ))
done
if [[ ${NEXT_WAIT_TIME} -eq 4 ]]; then
    RESULT=1
fi
if [[ ${RESULT} -eq 0 ]]; then
    echo "Command Successful"
else
    echo "Command Failed"
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>bash</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What are your best projects to date?</title>
      <author>Madza</author>
      <pubDate>Tue, 28 Sep 2021 07:21:47 +0000</pubDate>
      <link>https://dev.to/madza/what-are-your-best-projects-to-date-1p5p</link>
      <guid>https://dev.to/madza/what-are-your-best-projects-to-date-1p5p</guid>
      <description>&lt;p&gt;What are some of the best projects that you have built? Pick like 1-3 projects of yours and tell us why you feel proud of them!&lt;/p&gt;

&lt;p&gt;Personally, I am happy on how &lt;a href="https://www.madza.dev/"&gt;My portfolio&lt;/a&gt;, &lt;a href="https://quizzes.madza.dev/"&gt;devQuizzes&lt;/a&gt; and &lt;a href="https://audioplayer.madza.dev/"&gt;Audio Player&lt;/a&gt; turned out due to the amount of work spent and their practical usability.&lt;/p&gt;

&lt;p&gt;What are some of the highlighted projects in your portfolio?&lt;br&gt;
Share your creations down below! 👇&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>coding</category>
      <category>project</category>
    </item>
    <item>
      <title>Storybook in ReactJs</title>
      <author>HasOne</author>
      <pubDate>Tue, 28 Sep 2021 07:09:23 +0000</pubDate>
      <link>https://dev.to/hasone/storybook-in-reactjs-4k9k</link>
      <guid>https://dev.to/hasone/storybook-in-reactjs-4k9k</guid>
      <description>&lt;p&gt;Storybook is javascript package that helps developer to create organize UI that's self documented, make the developing and building process efficient. once we have created component and we add it to story, so we have example of how our component looks like and the features we can add and help us improve the component. if other developer working on the same team, in case her/she need &lt;code&gt;search&lt;/code&gt; component, and you have already made &lt;code&gt;search&lt;/code&gt; component, so he can  use it and can change according he/her need. it helps to stop  recreate same component. so let's get started;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  installation
&lt;/h2&gt;

&lt;p&gt;let's install the storybook in our in react project, assuring you already have installed react.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npx sb init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;once it's done you will see a &lt;code&gt;stories&lt;/code&gt; directory insdie &lt;code&gt;src/&lt;/code&gt;, this is where we will create our stories. now let's spin up the storybook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn storybook
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;it will open up a new tab similar like this &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fVnpscQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyx7sjkwaa0he87zyp7o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fVnpscQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyx7sjkwaa0he87zyp7o.png" alt="Screenshot 2021-09-19 at 03.32.56"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#button-component-code"&gt;
  &lt;/a&gt;
  Button Component Code
&lt;/h3&gt;

&lt;p&gt;great, now let's create a button component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;makeStyles&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@material-ui/core/styles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prop-types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CustomButton&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@material-ui/core/Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;GridItem&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@material-ui/core/Grid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;LoopIcon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@material-ui/icons/Loop&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;styleContainer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;fullWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;classNameContainer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;startIcon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStyles&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;GridItem&lt;/span&gt; &lt;span class="na"&gt;item&lt;/span&gt; &lt;span class="na"&gt;lg&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;lg&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;md&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;md&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;sm&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;sm&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;classNameContainer&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CustomButton&lt;/span&gt;
                &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="na"&gt;fullWidth&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fullWidth&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="na"&gt;startIcon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;startIcon&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LoopIcon&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;CustomButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;GridItem&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useStyles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeStyles&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;marginBottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$rotateIcon 1s infinite linear&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@keyframes rotateIcon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rotate(0)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rotate(359deg)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fullWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;secondary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contained&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fullWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#story-code"&gt;
  &lt;/a&gt;
  Story Code
&lt;/h3&gt;

&lt;p&gt;Now exciting moment, let's create story inside &lt;code&gt;stories&lt;/code&gt; directory with the same name as component's name and plus &lt;code&gt;.stories&lt;/code&gt;, so it becomes like &lt;code&gt;Button.stories.js&lt;/code&gt;. we should put &lt;code&gt;stories.js&lt;/code&gt; after name: &lt;code&gt;x.stories.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../components/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Example/Button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Primary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
&lt;span class="nx"&gt;Primary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The default export metadata controls how the Storybook lists your stories.&lt;br&gt;
Use the named exports of a &lt;a href="https://storybook.js.org/docs/react/api/csf"&gt;CSF (Component Story Format)&lt;/a&gt; file to define your story. &lt;code&gt;args&lt;/code&gt; is argument (&lt;code&gt;props&lt;/code&gt;) pass  in  to component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yHaUUz7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0d50c74eqih6501jxka4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yHaUUz7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0d50c74eqih6501jxka4.gif" alt="1"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#indepth"&gt;
  &lt;/a&gt;
  in-depth
&lt;/h3&gt;

&lt;p&gt;let's create some advance story, where we do everything&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@storybook/addon-actions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AddIcon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@material-ui/icons/Add&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../components/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Example/Button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;argTypes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;clicked&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;primary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;control&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;select&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;primary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;secondary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;fullWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contained&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;control&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;select&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contained&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;outlined&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Primary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
&lt;span class="nx"&gt;Primary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
&lt;span class="nx"&gt;Icon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Add New Item&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;startIcon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AddIcon&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;argTyps&lt;/em&gt;&lt;/strong&gt; Component Level args will apply to all stories, unless it's overwritten.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;DefaultValue&lt;/em&gt;&lt;/strong&gt; you can provide default value by &lt;code&gt;defaultValue: 'some value'&lt;/code&gt; inside object and assign it to props's name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;onClick&lt;/em&gt;&lt;/strong&gt; if you want to detect the onClick listener, you have to import the &lt;code&gt;action&lt;/code&gt; addon &lt;code&gt;import { action } from "@storybook/addon-actions";&lt;/code&gt;, and the the story it's action. now you will see logs when you click on the button.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;control&lt;/em&gt;&lt;/strong&gt; if you have multiple value and you want to render it in dropdown, control object comes into play. control object takes: &lt;code&gt;type&lt;/code&gt; property which type it should be. we need "select" and &lt;code&gt;options&lt;/code&gt; property where we have multiple values in array.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;control&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;select&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;primary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;secondary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BUby6P_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jybu6yx0xx5jhwt63c2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BUby6P_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jybu6yx0xx5jhwt63c2.gif" alt="2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Storybook is new way to create component and share across the team, you can see how your component looks like and what the improve you need to add. making the re-usable component easy and maintainable. Storybook becomes important part of front-end developer.&lt;/p&gt;

&lt;p&gt;I hope you learnt some today. Thank you so much for reading my article, if you have anything let me know.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://storybook.js.org/docs/react/get-started/introduction"&gt;https://storybook.js.org/docs/react/get-started/introduction&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>frontend</category>
    </item>
  </channel>
</rss>
