<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Developer Burnout — Signs, Impact, and Prevention</title>
      <author>Geoff Stevens</author>
      <pubDate>Tue, 02 Nov 2021 16:58:14 +0000</pubDate>
      <link>https://dev.to/thegeoffstevens/developer-burnout-signs-impact-and-prevention-47a8</link>
      <guid>https://dev.to/thegeoffstevens/developer-burnout-signs-impact-and-prevention-47a8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-burnout"&gt;
  &lt;/a&gt;
  What is burnout?
&lt;/h2&gt;

&lt;p&gt;Burnout is an increasingly widespread and destructive mental health challenge for knowledge workers across professions and industries. Left unchecked, it is a silent killer of productivity, happiness, and team success.&lt;/p&gt;

&lt;p&gt;Unlike other types of stress, burnout is typically chronic and workplace-related. It is a result of unresolved and persistent stress that leaves workers feeling drained and unable to reach their full potential. According to the &lt;a href="https://www.who.int/news/item/28-05-2019-burn-out-an-occupational-phenomenon-international-classification-of-diseases"&gt;World Health Organization&lt;/a&gt;:  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Burn-out is a syndrome conceptualized as resulting from chronic workplace stress that has not been successfully managed."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Burnout manifests in different ways for different people. For many workers, burnout is often associated with feelings of tiredness, helplessness, cynicism, and a drop in performance and motivation. &lt;/p&gt;

&lt;p&gt;The World Health Organization's definition of burnout specifies three key dimensions of burnout: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;feelings of energy depletion or exhaustion;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;increased mental distance from one's job, or feelings of negativism or cynicism related to one's job; and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;reduced professional efficacy.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-common-is-software-engineer-burnout"&gt;
  &lt;/a&gt;
  How common is software engineer burnout?
&lt;/h2&gt;

&lt;p&gt;Burnout is an especially prevalent challenge for engineering teams and tech workers. Developers frequently navigate fast-paced and high-growth work environments, building mission-critical software—often without the systems, processes, and culture needed to support their work. &lt;/p&gt;

&lt;p&gt;Recent &lt;a href="https://www.gallup.com/workplace/288539/employee-burnout-biggest-myth.aspx"&gt;Gallup surveys&lt;/a&gt; reveal most workers, about 76%, experience burnout. More specifically, 28% of workers responded that they experience burnout very often or always. Less than a quarter of workers feel they rarely or never experience burnout.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--taWTV6_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6527hysgck1qrnj508wc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--taWTV6_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6527hysgck1qrnj508wc.png" alt="Developer burnout" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In certain industries, such as game development, engineers are expected to work long hours and against strict deadlines. They often need to make last-minute changes before launch during a frenzied period of work infamously dubbed "crunch time." In one example at Rockstar Games, management admits to perpetuating a culture of burnout and hardship. According to &lt;a href="https://time.com/5603329/e3-video-game-creators-union/"&gt;Time&lt;/a&gt;: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The chief executive of Rockstar Games, publisher of the hugely popular Red Dead Redemption 2, bragged in an interview last year that people there were working 100-hour weeks to finish that game in time for its scheduled release date.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Chaotic release schedules and deployment setbacks are surprisingly prevalent across the world of software development. Companies rely heavily on engineers to ship code faster and provide value to customers, but often lack the DevOps practices to support them. Instead, developers often face delays, deployment pains, and organizational fear and mistrust that disrupt their team's flow. &lt;/p&gt;

&lt;p&gt;Such recurring organizational hurdles lead to chronic frustration—and ultimately developer burnout.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-causes-software-engineer-burnout"&gt;
  &lt;/a&gt;
  What causes software engineer burnout?
&lt;/h2&gt;

&lt;p&gt;Burnout often arises from issues within the organization, rather than the individual. Many engineering teams fail to sufficiently address the causes of burnout because they focus on fixing people and not the systems that support them—or fail to support them. &lt;/p&gt;

&lt;p&gt;According to &lt;em&gt;Accelerate&lt;/em&gt;, a research-backed guide to building high performing technology teams, the six main organizational risk factors for developer burnout are work overload, lack of control, insufficient rewards, breakdown of community, absence of fairness, and value conflicts. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Work overload&lt;/strong&gt; arises from unrealistic expectations about the quantity or quality of work developers need to satisfy. Impossible deadlines, poor project timeline estimates, and insufficient planning push developers to work beyond what is physically and mentally sustainable. Developers who work long hours, nights, and weekends are more likely to burn out than those with better work-life balance.&lt;/p&gt;

&lt;p&gt;Workload, however, is not the only risk factor for burnout. Contrary to popular belief, teams with balanced workloads can still experience serious developer burnout. Developers can burn out working 100 hours per week, but they can also burn out working just 20 or 30 hours per week.&lt;/p&gt;

&lt;p&gt;In situations with manageable workloads but poor workplace culture, other organizational risk factors can lead to chronic stress and create unpleasant work environments. These risk factors disrupt an individual or team's development flow, making work consistently and unnecessarily difficult or challenging. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lack of control&lt;/strong&gt; in decision making processes leads to detachment from an organization's mission. When developers feel an inability to influence or contribute to decisions that affect them and their work, it breeds mistrust and creates distance between workers and managers.&lt;/p&gt;

&lt;p&gt;For example, developers are sometimes  forced to use tools they find ineffective. Developers can be at the mercy of slow workflows across the stack, from change approval boards to code reviews to data requests. In some organizations, development and operations may be making decisions about team practices without input from each other, creating organizational tension. &lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;breakdown of community&lt;/strong&gt; also leads to an unsupportive, hypercompetitive, and stressful workplace. Moreover, harassment and bullying leave developers feeling isolated and fearful. Without community support or unbiased feedback, developers must grapple with additional stressors that detract from their quality of life.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Absence of fairness&lt;/strong&gt; (a lack of fairness in decision making) and &lt;strong&gt;insufficient rewards&lt;/strong&gt;, (a lack of positive reinforcement and feedback) also leave developers feeling not in control of their work and outcomes. &lt;/p&gt;

&lt;p&gt;Cultures that rely on blame—not organizational learning—perpetuate a lack of fairness and recognition. Rather than solving underlying system weaknesses, organizations sometimes blame and shame developers for engineering challenges, such as buggy code, change failures, or missed deadlines. &lt;/p&gt;

&lt;p&gt;Lastly, &lt;strong&gt;value conflicts&lt;/strong&gt; that result in a mismatch between organization, team, and individual values create chronic stress. For example, a developer who values individual privacy working on ad tracking software can be worn down by the constant internal tug-of-war between her personal values and her company's mission.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-cost-of-developer-burnout"&gt;
  &lt;/a&gt;
  What is the cost of developer burnout?
&lt;/h2&gt;

&lt;p&gt;Stanford researchers &lt;a href="https://www.gsb.stanford.edu/insights/why-your-workplace-might-be-killing-you"&gt;estimate&lt;/a&gt; burnout leads to nearly $190 billion in healthcare costs each year and contributes to more than 120,000 deaths.&lt;/p&gt;

&lt;p&gt;In addition to healthcare costs, burnout leads to lost productivity, sick time, costly disabilities, and turnover. It's estimated that &lt;a href="https://hbr.org/2019/12/burnout-is-about-your-workplace-not-your-people"&gt;workplace stress costs&lt;/a&gt; the U.S. economy more than $500 billion per year. Researchers believe nearly 550 million work days each year are lost due to stress and burnout.&lt;/p&gt;

&lt;p&gt;For engineering teams, developer burnout leads to slower delivery speed, lower quality code, poorer project outcomes, and higher turnover. In the long run, burnout can also stifle innovation, creativity, and organizational learning.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-managers-spot-signs-of-developer-burnout"&gt;
  &lt;/a&gt;
  How can managers spot signs of developer burnout?
&lt;/h2&gt;

&lt;p&gt;It's important to understand that people react differently to burnout. Workers can experience several symptoms all at once, or just one or two at a time. Some workers experience mostly mental symptoms, while others experience physical and bodily changes. &lt;/p&gt;

&lt;p&gt;It's also important to remember that burnout is not a binary state. Instead, workers move up and down a 'burnout gradient' depending on their changing environment and workload. &lt;/p&gt;

&lt;p&gt;Mental and emotional symptoms of burnout include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tiredness or exhaustion&lt;/strong&gt;: You feel too emotionally drained to engage fully with your work or coworkers. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cynicism or negativism&lt;/strong&gt;: You view your role as increasingly stressful and frustrating. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Detachment and alienation&lt;/strong&gt;: You feel distant from coworkers and the company mission. You feel "numb" about your work. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reduced performance or productivity&lt;/strong&gt;: You are less effective at completing tasks on time. Your quality of work noticeably decreases. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Physical symptoms are also common. Developers experiencing burnout may notice that they are more fatigued and exhausted than normal, yet may also suffer from sleeplessness. They may also be experiencing frequent headaches, loss of appetite, gastrointestinal issues, or dizziness. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-you-detect-burnout-through-metrics-and-data-sources"&gt;
  &lt;/a&gt;
  Can you detect burnout through metrics and data sources?
&lt;/h2&gt;

&lt;p&gt;By looking more closely at their DevOps metrics, teams can spot early signs of burnout, developer frustration, and deployment pain.&lt;/p&gt;

&lt;p&gt;Teams should watch for indicators that their work is needlessly challenging or painful to complete. They should watch for signs that their engineering systems—i.e. organizational workflows and processes—are ineffective at providing developers with fast feedback, avoiding delays, and preventing toil. &lt;/p&gt;

&lt;p&gt;Long &lt;a href="https://www.software.com/1000x-system/lead-time"&gt;lead time&lt;/a&gt;, low &lt;a href="https://www.software.com/1000x-system/commit-frequency"&gt;delivery frequency&lt;/a&gt;, and low &lt;a href="https://www.software.com/1000x-system/lines-of-code-merged"&gt;code volume&lt;/a&gt; can reveal friction during the development process. In such scenarios, engineers are likely experiencing roadblocks and bottlenecks disrupting their development flow.&lt;/p&gt;

&lt;p&gt;At the DevOps Enterprise Summit 2014, David Ashman, former Chief Architect at Blackboard, recalls how his engineering organization became less agile and stagnant due to mounting technical debt. Ashman's red flag was &lt;a href="https://www.youtube.com/watch?v=SSmixnMpsI4"&gt;a significant change&lt;/a&gt; in the number of code commits.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[The codebase] is growing at such a pace that is becoming this enormous product with so much complexity, so much insurmountable debt that we were running into problems both in development and operations of significant failures in releases and problems with developers taking far too long for these products to get built out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Such challenges can leave developers struggling to achieve their goals, fighting against the system, and potentially working longer hours to overcome it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6oY94n7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zta79vkxc48furmzzb1n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6oY94n7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zta79vkxc48furmzzb1n.png" alt="Engineering team burnout danger" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;
An example of developers fighting the system, &lt;a href="https://www.youtube.com/watch?v=SSmixnMpsI4"&gt;David Ashman&lt;/a&gt;



&lt;p&gt;Teams should also watch for signs of high workloads and disruptive schedules. High &lt;a href="https://www.software.com/1000x-system/meeting-time"&gt;meeting time&lt;/a&gt; can pull developers away from meaningful work and fragment their day, leading to dissatisfaction with daily work. Spending less time in flow during the workday and more time coding on nights and weekends puts teams at risk of burnout and poor work-life balance.&lt;/p&gt;

&lt;p&gt;Operating above 100% of team capacity for too long—without breaks or downtime—can wear down even the most productive team. Code volume, measured by pull requests and commits, can be one approximation for workload.  &lt;/p&gt;

&lt;p&gt;Similar to other engineering metrics, context matters. It's important to understand teams and individuals in their day-to-day life to attain a clearer understanding of the situation. There is no single 'burnout' metric. Instead, teams should rely on several indicators of team frustration and pain. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-prevent-developer-burnout"&gt;
  &lt;/a&gt;
  How to prevent developer burnout
&lt;/h2&gt;

&lt;p&gt;Avoiding burnout requires teams to reduce firefighting, hardship, and toil. The goal should be to alleviate deployment pain and enable the fast flow of work from code to production, as well as to create a culture of learning, psychological safety, and fairness. &lt;/p&gt;

&lt;p&gt;It starts with improving the organization's DevOps practices. According to &lt;em&gt;Accelerate&lt;/em&gt;: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Burnout can be prevented or reversed, and DevOps can help. Organizations can fix the conditions that lead to burnout by fostering a supportive work environment, by ensuring work is meaningful, and ensuring employees understand how their own work ties to strategic objectives. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Investments in DevOps strengthen the organization's developer experience, improving daily work. Over the long-term, better DevOps minimize several key risk factors for developer burnout. &lt;/p&gt;

&lt;p&gt;To prevent burnout, teams should first embrace the principle of &lt;em&gt;continuous improvement&lt;/em&gt;. Continuous improvement is a core idea in Lean methodology that advocates for incremental improvement in an organization's performance through continuous measuring, learning, and experimentation. It creates a culture that measures and improves daily work, identifying potential development pains and prioritizing their fixes. &lt;/p&gt;

&lt;p&gt;Second, teams should create an environment that prioritizes psychological safety. They should provide engineers with the safety needed to experiment and learn from mistakes, instead of resorting to blame or finger pointing. Developers must be a part of the decision making process when it directly affects their work. &lt;/p&gt;

&lt;p&gt;Third, teams must invest in the developer experience. Doing so requires teams to enable fast feedback, minimize thrash, and reduce fear. &lt;/p&gt;

&lt;p&gt;In particular, organizations can reduce chronic stress by providing guardrails that improve the flow of work and remove fear and pain from deployments. Developers can quickly and confidently make changes to code when they have automated tests and environments, telemetry for performance visibility, loosely coupled architecture to isolate failures, and version control for fast rollbacks. Teams can also tackle technical debt on a recurring basis to avoid development stagnation and fear. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-hybrid-or-remote-work-help-prevent-burnout"&gt;
  &lt;/a&gt;
  Can hybrid or remote work help prevent burnout?
&lt;/h2&gt;

&lt;p&gt;Workplaces are quickly changing as the world grapples with a shift from office to remote or hybrid work. Such a seismic shift will likely change how teams identify and prevent burnout. &lt;/p&gt;

&lt;p&gt;Remote work reduces time spent commuting and provides workers with greater control over their schedules. They benefit from more flexibility, which allows them to spend more time with family and friends or pursue activities outside of work. &lt;/p&gt;

&lt;p&gt;Remote work can also lead to fewer distractions and more time spent in flow to work on meaningful tasks. Developers are interrupted less frequently by shoulder taps and open offices. &lt;/p&gt;

&lt;p&gt;While remote and hybrid workplaces can remove certain stressors, they can also create new ones. Workers may face unfamiliar challenges, such as a lack of face time with coworkers and less rigid work-life boundaries. Without cultural changes to grapple with their new work environment, newly remote teams increase their risk for burnout.&lt;/p&gt;

&lt;p&gt;Engineering teams switching to remote work can also face DevOps issues during their transition. They need to grapple with new requirements, particularly around hardware and team communication. &lt;/p&gt;

&lt;p&gt;For a successful transition, teams should monitor for changes in the development process to ensure their tools and practices still work well in their new workplace. If not, they should adopt new ones that cater better to asynchronous communication and remote development.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>development</category>
    </item>
    <item>
      <title>Tips to become a great programmer [ Beginner - Pro]</title>
      <author>John</author>
      <pubDate>Tue, 02 Nov 2021 16:39:55 +0000</pubDate>
      <link>https://dev.to/jdks/tips-to-become-a-great-programmer-beginner-pro-5coi</link>
      <guid>https://dev.to/jdks/tips-to-become-a-great-programmer-beginner-pro-5coi</guid>
      <description>&lt;p&gt; A good programmer is someone who always looks both ways before crossing a one-way street. ~Doug Linder&lt;/p&gt;

&lt;p&gt;Let me start by saying that I do not consider myself to be a competent coder. I consider my coding abilities to be mediocre, and I am still learning and have a long way to go before I am even remotely satisfied with them.Yes, I am better at programming than a lot of others, but that is just because they are lazy and choose to sit about idle all day instead of programming. Their dreadful abilities make my less dreadful abilities appear fantastic.&lt;/p&gt;

&lt;p&gt;So most of the tips I will mention below are lessons learnt from failed endeavours, they are what I have wanted to be and I am not. So lets dive in. &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/tips-to-become-a-great-programmer/"&gt;Tips to become a great programmer [ Beginner - Pro]&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>100+ AI Projects for Beginners – Easy Ideas to Get Started [Beginners - Advance]</title>
      <author>John</author>
      <pubDate>Tue, 02 Nov 2021 16:38:13 +0000</pubDate>
      <link>https://dev.to/jdks/100-ai-projects-for-beginners-easy-ideas-to-get-started-beginners-advance-1lj</link>
      <guid>https://dev.to/jdks/100-ai-projects-for-beginners-easy-ideas-to-get-started-beginners-advance-1lj</guid>
      <description>&lt;p&gt;Artificial Intelligence has made a significant impact on our daily lives. Every time you scroll through social media, open Spotify, or do a quick Google search, you are using an application of AI. The AI industry has expanded massively in the past few years and is predicted to grow even further, reaching around 126 billion U.S. dollars by 2025. Multinational companies like IBM, Accenture, and Apple are actively hiring AI practitioners. The median salary of an AI engineer as of 2021 is $171, 715 that can go over $250,000.&lt;/p&gt;
&lt;p&gt;The field of AI is vast, and there are many areas within the industry that you can choose to specialise. Say , if you are intrigued by facial recognition systems and image generation, you can choose to work in the field of computer vision. If you’d like to build models that can converse with people and learn human language, you can work in the field of NLP (Natural Language Processing).&lt;/p&gt;
&lt;p&gt;There is a lot of work being done today for the advancement of Artificial Intelligence. Companies need AI specialists who can build and deploy scalable models to meet growing industry demands. It isn’t tough to get started in the field of AI. While there is the complexity involved in building machine learning models from scratch, most AI jobs in the industry today don’t require you to know the math behind these models. Many companies require individuals who can build AI solutions, scale them, and deploy them for the end-user. Many high-level libraries and frameworks can help you do this without an in-depth knowledge of how the models work. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/artificial-intelligence-project-for-beginners/"&gt;100+ AI Projects for Beginners – Easy Ideas to Get Started [Beginners - Advance]&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>40+ GitHub Projects for Beginners – Easy Ideas to Get Started [Beginners - Advance]</title>
      <author>John</author>
      <pubDate>Tue, 02 Nov 2021 16:34:07 +0000</pubDate>
      <link>https://dev.to/jdks/40-github-projects-for-beginners-easy-ideas-to-get-started-beginners-advance-9o5</link>
      <guid>https://dev.to/jdks/40-github-projects-for-beginners-easy-ideas-to-get-started-beginners-advance-9o5</guid>
      <description>&lt;p&gt;&lt;span&gt;&lt;span&gt;There's a good chance you've heard of GitHub if you're in the tech space, even if you're not a developer by trade. &lt;/span&gt;&lt;span&gt;You might have even stumbled across a GitHub repository or two when learning about software or web development.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;Still, GitHub can seem perplexing if you've never used it. &lt;/span&gt;&lt;span&gt;Is it a cloud storage site? &lt;/span&gt;&lt;span&gt;A social networking site for programmers? &lt;/span&gt;&lt;span&gt;A code-sharing site? &lt;/span&gt;&lt;span&gt;As it turns out, the answer to all of these is yes, and more. &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/15-trending-projects-on-github-for-web-developers/&amp;amp;ved=2ahUKEwi7ho2M5sbzAhWIzDgGHbvgBM0QFnoECAUQBQ&amp;amp;usg=AOvVaw1tzvt3qcNHOwLUl5Faka7s"&gt;40+ GitHub Projects for Beginners – Easy Ideas to Get Started [Beginners - Advance]&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>40+ Frontend Projects for Beginners – Easy Ideas to Get Started Coding Frontend [Beginners - Advance]</title>
      <author>John</author>
      <pubDate>Tue, 02 Nov 2021 16:33:10 +0000</pubDate>
      <link>https://dev.to/jdks/40-frontend-projects-for-beginners-easy-ideas-to-get-started-coding-frontend-beginners-advance-4g0g</link>
      <guid>https://dev.to/jdks/40-frontend-projects-for-beginners-easy-ideas-to-get-started-coding-frontend-beginners-advance-4g0g</guid>
      <description>&lt;p&gt;&lt;span&gt;If you are a developer or just getting started with the process, then you must already be aware of how important the role of &lt;/span&gt;&lt;span&gt;developing live projects&lt;/span&gt;&lt;span&gt; are. It will not only improve your coding skills but will also help you develop a passion for it. You can start by taking up online tutorials to learn a skill or two, but it must lead to starting to build the programs eventually.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/9-projects-you-can-do-to-become-a-front-end-master/&amp;amp;ved=2ahUKEwilofe-rvjzAhVGbysKHR-RCv4QFnoECAUQAQ&amp;amp;usg=AOvVaw2t7-_QAPDVzRhEVlb4h7WW"&gt;40+ Frontend Projects for Beginners – Easy Ideas to Get Started Coding Frontend [Beginners - Advance]&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>40+ Nodejs Projects for Beginners – Easy Ideas to Get Started Coding Nodejs [Beginners - Advance] </title>
      <author>John</author>
      <pubDate>Tue, 02 Nov 2021 16:23:29 +0000</pubDate>
      <link>https://dev.to/jdks/40-nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-nodejs-beginners-advance-3k80</link>
      <guid>https://dev.to/jdks/40-nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-nodejs-beginners-advance-3k80</guid>
      <description>&lt;p&gt;If you have decided to build your career in &lt;span&gt;NodeJS &lt;/span&gt;development, we have gathered a list of &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; for all node enthusiasts to build highly scalable &lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1" rel="noreferrer noopener"&gt;web applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These best &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; will help you gain knowledge about core node concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it’s highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn &lt;em&gt;git&lt;/em&gt; and show your coding expertise to future employers. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1"&gt;40+ Nodejs Projects for Beginners – Easy Ideas to Get Started Coding Nodejs &lt;/a&gt;&lt;/b&gt; &lt;/p&gt;






</description>
    </item>
    <item>
      <title>Systems Programming Paradigms</title>
      <author>Birk Skyum</author>
      <pubDate>Tue, 02 Nov 2021 16:19:32 +0000</pubDate>
      <link>https://dev.to/birkskyum/systems-programming-paradigms-43p4</link>
      <guid>https://dev.to/birkskyum/systems-programming-paradigms-43p4</guid>
      <description>&lt;p&gt;Making software that talks to the hardware are known as systems programming. Because applications run on top of a system, like an operating system, the performance, and safety of the system itself are key. This also goes for high-performance applications of course. The two most important metrics are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;A low runtime overhead&lt;/strong&gt; - This is achieved by leaving out garbage collection (see note below), and keeping the standard library small.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A high hardware utilization&lt;/strong&gt; - This is achieved through parallelization.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Garbage Collection (GC):&lt;/strong&gt; When a variable is assigned, some memory is allocated, and thus we need to figure out when it can be deallocated again. A common approach is tracing, where the GC tries try to figure out when a resource it's no longer reachable. Previously, reference counting was quite common, where the memory was released, when the number of references fell to zero. This convenient process of garbage collection clearly takes resources, and while it's common practice in application development, the systems programmer can rarely afford it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Only a few programming languages have gained mass adoption in this area because any new language would need to bring major advancements over the current standard in order to become relevant.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1949-assembly"&gt;
  &lt;/a&gt;
  1949 - Assembly
&lt;/h4&gt;

&lt;p&gt;The first of these languages is Assembly, which on top of what resembles line-by-line machine code instructions allows for the convenience of &lt;strong&gt;constants, macros, labels, and comments&lt;/strong&gt;. These features made assembly the de facto standard for years.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1972-c"&gt;
  &lt;/a&gt;
  1972 - C
&lt;/h4&gt;

&lt;p&gt;The C language has an advantage over Assembly by being structured. The &lt;strong&gt;structured programming&lt;/strong&gt; came in the form of better control flow through branching (if/else/or/switch), blocks, and loops (do/while). Other important additions were the &lt;strong&gt;lexical variable scopes, recursion, and static types&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1985-c"&gt;
  &lt;/a&gt;
  1985 - C++
&lt;/h4&gt;

&lt;p&gt;C++ as a superset of C, initially brought &lt;strong&gt;classes, the ability to make new types, function overloading, reference variables, try/catch blocks&lt;/strong&gt;, and more. This allowed for &lt;strong&gt;object-oriented programming&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Through time has C++ gained much more functionality and moved way beyond systems programming. In the 2020 edition, C++ brought modules and other long-awaited features, so the momentum is sure to be kept into the foreseeable future.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2010-rust"&gt;
  &lt;/a&gt;
  2010 - Rust
&lt;/h4&gt;

&lt;p&gt;The lack of garbage collection means that memory safety has always been a big concern in systems programming. This is because the developer is tasked to deallocate the memory, which is error-prone, and parallelization only makes matters worse. In fact, a &lt;a href="https://github.com/microsoft/MSRC-Security-Research/blob/master/presentations/2019_02_BlueHatIL/2019_01%20-%20BlueHatIL%20-%20Trends%2C%20challenge%2C%20and%20shifts%20in%20software%20vulnerability%20mitigation.pdf"&gt;2019 study by Microsoft (Page 10)&lt;/a&gt; showed that ~70% of all common vulnerabilities and exposures (CVEs) every year from 2006 to 2018 were rooted in memory safety.&lt;/p&gt;

&lt;p&gt;Rust resolves this entire category of issues through a concept called &lt;strong&gt;borrow checking&lt;/strong&gt;. This allows the compiler to guarantee that &lt;strong&gt;only memory-safe code is compiled successfully, even with parallelization&lt;/strong&gt;. Sometimes the compiler blocks code that you know is safe, but Rust can guarantee it, and in this case, there is an "unsafe" flag to disable the check. &lt;/p&gt;

&lt;p&gt;Rust has gained quite a reputation lately, as the &lt;em&gt;most loved language&lt;/em&gt; for 6 consecutive years in &lt;a href="https://insights.stackoverflow.com/survey/2021#technology-most-loved-dreaded-and-wanted"&gt;StackOverflow Developer Survey&lt;/a&gt; (2016-2021). There's also no lack of backing for the project, which in 2021 became clear when Microsoft, Google, Amazon, Mozilla, Facebook, and Huawei in a collaborative effort decided to form the &lt;a href="https://foundation.rust-lang.org/posts/2021-02-08-hello-world/"&gt;Rust Foundation&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#future"&gt;
  &lt;/a&gt;
  Future
&lt;/h4&gt;

&lt;p&gt;It's great to have competition because it accelerates innovation, and now time will tell if Rust will be bringing a new memory-safe paradigm, or if C++ can become safer and fend off the competition. Either way, it will be exciting to see what’s next to this story.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Kotlin for Server-Side</title>
      <author>Victor Loveday</author>
      <pubDate>Tue, 02 Nov 2021 16:19:27 +0000</pubDate>
      <link>https://dev.to/vicviral/kotlin-for-server-side-2hmg</link>
      <guid>https://dev.to/vicviral/kotlin-for-server-side-2hmg</guid>
      <description>&lt;p&gt;With &lt;strong&gt;Kotlin&lt;/strong&gt;, we can create different applications for different platforms. Server-side applications are no exception. Similarly to Java, Kotlin can be used to set up and run server side applications. Several frameworks like &lt;strong&gt;Spark&lt;/strong&gt; and &lt;strong&gt;Spring&lt;/strong&gt; which is used with Java also have support for Kotlin. I will show you four of them as we proceed. But first;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ktor"&gt;
  &lt;/a&gt;
  Ktor
&lt;/h3&gt;

&lt;p&gt;Ktor (pronounced Kay-tor) is an asynchronous open source framework for creating micro services and web applications. It was developed with Kotlin by Jetbrains. The framework is lightweight and has a great support for coroutines and KMM (Kotlin Multi Platform).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#four-frameworks-for-serverside-development-with-kotlin"&gt;
  &lt;/a&gt;
  Four frameworks for server-side development with Kotlin
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Spring Boot:&lt;/strong&gt; This framework is widely used for creating stand-alone Spring Based Applications. Applications created with Spring Boot are of large-scale, production-grade, while you just need to trigger the run button.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Javalin:&lt;/strong&gt; This framework is referred to as the most lightweight for Kotlin and Java server-side development. Javalin supports network configuration components such as Web Sockets, HTTP2 and async requests and so on. Javalin was initiated as a clone of Java. Although it was not anticipated by its developers, still Javalin emerged into a wider framework. It was moulded into a ground-up rewrite, with reference to the JavaScript framework koa.js.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Spark:&lt;/strong&gt; Spark is one of the earliest expressive Kotlin or Java web framework built for rapid development. It can also be used in higher-level Kotlin development. It is not so popular. Spark is not so trusted with respect to micro-services.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Vert.X:&lt;/strong&gt; Just like Java and Kotlin, Vert.X is an ecosystem used for building reactive applications in different programming languages. Vert.X comes with a powerful set of tools. However, it is not advisable for everyone. It comes with detailed documentation and is thoroughly compatible with Kotlin libraries. It creates reactive Web applications for the Java Virtual Machine.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#why-ktor-"&gt;
  &lt;/a&gt;
  Why Ktor ?
&lt;/h3&gt;

&lt;p&gt;It is a very lightweight framework that reduces the effort required to create web applications in Kotlin. It doesn’t manipulate the underlying technologies of a project and is compatible with most of them, with very rare exceptions.&lt;/p&gt;

&lt;p&gt;It is highly reliable, as it is a product of the Kotlin team, itself. It allows developers to rapidly create both, client and server-side applications that target multiple platforms. Ktor exploits Kotlin Coroutines for providing high scalability and offers an efficient and idiomatic API for developers.&lt;/p&gt;

&lt;p&gt;It works on a minimum memory footprint and comes in as a lightweight thread. It is analogous to Javalin, it is also a real micro-framework plus it's simplicity. Left to me, I'd say it's the most suitable for prototyping. &lt;/p&gt;

</description>
      <category>todayilearned</category>
      <category>kotlin</category>
      <category>webservice</category>
      <category>backend</category>
    </item>
    <item>
      <title>Understanding React Proptypes</title>
      <author>AidanMargo</author>
      <pubDate>Tue, 02 Nov 2021 16:18:42 +0000</pubDate>
      <link>https://dev.to/aidanmargo/understanding-react-proptypes-e6a</link>
      <guid>https://dev.to/aidanmargo/understanding-react-proptypes-e6a</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-proptypes"&gt;
  &lt;/a&gt;
  What is "Proptypes"
&lt;/h1&gt;

&lt;p&gt;Proptypes is a react hook that makes debugging your programs a &lt;em&gt;lot&lt;/em&gt; easier, namely when there's a conflict amongst data types. &lt;/p&gt;

&lt;p&gt;You may remember Mousseboy if you've stopped by my page before. If not, here he is. We're gonna use him for our demonstration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cOhwZ-0V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jstrqd53kwi91cw4wysn.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cOhwZ-0V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jstrqd53kwi91cw4wysn.jpeg" alt="MousseBoy" width="880" height="641"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#starter-code"&gt;
  &lt;/a&gt;
  Starter Code
&lt;/h3&gt;

&lt;p&gt;Here's some really basic, unstyled react code that we're using for this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Mousseboy from './Mousseboy'


function App() {
  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;Mousseboy name='Mousseboy' age={'12'}/&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Mousseboy ({name, age}) {
  return (
    &amp;lt;&amp;gt;
    &amp;lt;h3&amp;gt;{name} will be {age + 3} years old in 3 years!&amp;lt;/h3&amp;gt;
    &amp;lt;/&amp;gt;
    )}

export default Mousseboy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What should we expect to see when we run this code? Since we passed the 'age' prop down with a value of 12, we would hope to see 15 come back to us, right?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X17_KhHP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o51cok1c5folc5bi2cy9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X17_KhHP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o51cok1c5folc5bi2cy9.png" alt="Mousseboy 123" width="461" height="67"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not exactly! We passed down the age prop with a value of 12, but &lt;strong&gt;as a string&lt;/strong&gt;. This causes the '3' to be tacked on to the end of the string '12.' He may be a grandpa, but he's not that old!&lt;/p&gt;

&lt;p&gt;This is a really common bug that comes up, especially in large programs and applications. This is where &lt;em&gt;proptypes&lt;/em&gt; comes in, to help us catch the issues when they arise.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-proptypes"&gt;
  &lt;/a&gt;
  Using Proptypes
&lt;/h3&gt;

&lt;p&gt;First thing's first, we need to install the package so we can use it in our program. Run this code in the directory for your project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm i proptypes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assuming the install went as planned, you can now use the prop-types hook in your program! We're gonna use this in our "Mousseboy" component. Import "PropTypes" at the top of your component.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;import PropTypes from 'prop-types'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And we're off! So prop-types is really great for catching unintended data-type errors in our code. Here's how we use it:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;call &lt;strong&gt;.proptypes&lt;/strong&gt; on the component you're working in and set it to an &lt;strong&gt;object&lt;/strong&gt;. It will need to be called after the return.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import PropTypes from 'prop-types'

function Mousseboy ({name, age}) {
  return (
    &amp;lt;&amp;gt;
    &amp;lt;h3&amp;gt;{name} will be {age + 3} years old in 3 years!&amp;lt;/h3&amp;gt;

    &amp;lt;/&amp;gt;
    )}

    Mousseboy.propTypes = {

    }
export default Mousseboy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;We're going to need to add some keys and proptype values. Inside of our empty object, we're going to target the name and age props, and tell PropTypes what data type we're looking for.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    Mousseboy.propTypes = {
      name: PropTypes.string,
      age: PropTypes.number
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Now open up the devtools in your browser, and check out the error we get.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EyVYDbBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxck831rb9v8tvj1pvuu.png" alt="Proptype error" width="880" height="339"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Awesome! This error is letting us know that the &lt;em&gt;age&lt;/em&gt; prop was passed down as a string, but we were expecting a number.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tips-and-tricks"&gt;
  &lt;/a&gt;
  Tips and tricks
&lt;/h3&gt;

&lt;p&gt;*There are a few ways we can use this on a bit of a deeper level. For example, if we were to remove the 'age' key from our .proptypes object, there would be no error! &lt;/p&gt;

&lt;p&gt;To ensure we're notified of something not being passed down correctly, we can add &lt;strong&gt;.isRequired&lt;/strong&gt; after our proptype(string, number, etc.)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I took out the age prop in our App component and added .isrequired to it in our proptype object.&lt;/em&gt; It looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mousseboy.propTypes = {
      name: PropTypes.string,
      age: PropTypes.number.isRequired
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is the error message we get:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f65WJZgx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bid94qqbgtyu1c1y8uqf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f65WJZgx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bid94qqbgtyu1c1y8uqf.png" alt="age required" width="880" height="257"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;*We can use this with multiple datatypes! Here are a few examples:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Proptypes.bool&lt;/li&gt;
&lt;li&gt;Proptypes.object&lt;/li&gt;
&lt;li&gt;Proptypes.symbol&lt;/li&gt;
&lt;li&gt;Proptypes.function&lt;/li&gt;
&lt;li&gt;Proptypes.any (rarely used, but if you do, add .isRequired !)&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;We can also add multiple options by using .oneOfType. Try this out:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mousseboy.propTypes = {
      stringOrNumber: PropTypes.oneOfType ([
        Proptypes.string,
        Proptypes.number
      ]),
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to update your passed props up in App!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Do we have to deal with too much complexity?</title>
      <author>Matthieu Cneude</author>
      <pubDate>Tue, 02 Nov 2021 16:08:52 +0000</pubDate>
      <link>https://dev.to/phantas0s/do-we-have-to-deal-with-too-much-complexity-3faj</link>
      <guid>https://dev.to/phantas0s/do-we-have-to-deal-with-too-much-complexity-3faj</guid>
      <description>&lt;p&gt;I've been coding for 10+ years professionally (20 as a hobby) and something strikes me hard: it seems that our job gets more and more complex.&lt;/p&gt;

&lt;p&gt;To be a software engineer, we need to know how databases work, trendy programming languages, the 39020 services proposed by the cloud, containerization and orchestration (docker &amp;amp; kubernetes), the command line, algorithms, good practices... the list goes on. On top, most opinions about software development are just that: opinions. Nobody really agree, we just speak forever about what to do without empirical arguments. &lt;/p&gt;

&lt;p&gt;Is it possible nowadays to have one server, put a monolith on it, and maintain it as long as possible?&lt;/p&gt;

&lt;p&gt;Is it possible to bring back simplicity in this ocean of tools, practices, workflow, and opinions?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>complexity</category>
    </item>
    <item>
      <title>CSS Pseudo Elements</title>
      <author>Avinash Gupta</author>
      <pubDate>Tue, 02 Nov 2021 16:00:58 +0000</pubDate>
      <link>https://dev.to/tier3guy/css-pseudo-elements-3npb</link>
      <guid>https://dev.to/tier3guy/css-pseudo-elements-3npb</guid>
      <description>&lt;p&gt;Hey friend, are you finding CSS pseudo-elements difficult?&lt;br&gt;
No worries, I was also finding it difficult when I was new to this CSS. In this doc I will be explaining you &lt;code&gt;CSS pseudo-elements&lt;/code&gt; in a very easy manner. So lets start,&lt;br&gt;
Suppose I have given you a task to design only the first letter of a word in your &lt;code&gt;HTML&lt;/code&gt; page. How will you do this? One will say that okay I will apply a span tag to that letter, and then I will style it. But my friend its 2021 are you thinking that is it a good practice. At the end it's a single word then why will you apply &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Right?&lt;/p&gt;

&lt;p&gt;Here comes the role of this &lt;code&gt;pseudo-elements&lt;/code&gt;. Pseudo-elements is used to customize any specific part of any element.&lt;br&gt;
Till now you have understood that okay &lt;strong&gt;a CSS pseudo-element is used to style specified parts of an element&lt;/strong&gt;. But I you don't know how to do that. &lt;br&gt;
Before jumping into that let me explain you the different types of &lt;em&gt;CSS pseudo-elements&lt;/em&gt; present.&lt;/p&gt;

&lt;p&gt;There are majorly 6 pseudo-elements available and they are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;::before&lt;/li&gt;
&lt;li&gt;::after&lt;/li&gt;
&lt;li&gt;::first-letter&lt;/li&gt;
&lt;li&gt;::first-line&lt;/li&gt;
&lt;li&gt;::marker&lt;/li&gt;
&lt;li&gt;::selection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let just discuss them one by one.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;::before&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p::before{
   content: 'Hello world';
   color: blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, before is used to add a content before any class or element. In the above written example &lt;code&gt;Hello world&lt;/code&gt; will be embedded before the paragraph with blue color. Now you can customize it according to your choice.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;::after&lt;/strong&gt;&lt;br&gt;
There is no difference in &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; but as their name suggests before adds content before any element while after will embed it after the element.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;::first-letter&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p::first-letter{
   color: blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is used customize the first letter of any element as we have discussed in the example.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;::first-line&lt;/strong&gt;&lt;br&gt;
Again there is no difference between ::first-line and ::first-letter but as their name is suggesting it is used to customize the first line of any element.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;::marker&lt;/strong&gt;&lt;br&gt;
The marker is used to style the markers of the list item.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;::selection&lt;/strong&gt;&lt;br&gt;
Honestly talking this is my favourite pseudo-element, as it helps to customize the area that has been selected/high-lighted by the user on the dom.&lt;br&gt;
Example speaks: means by default if you high-light any text on the browser the background color changes to blue, but now you customize it by your own. Isn't it amazing. I think you will agree with me.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, this is was all about the pseudo-elements, hope you liked it and get some new knowledge. &lt;br&gt;
Thank you!&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Get started with Medusa: the open-source alternative to Shopify</title>
      <author>Shahed Nasser</author>
      <pubDate>Tue, 02 Nov 2021 15:53:36 +0000</pubDate>
      <link>https://dev.to/medusajs/get-started-with-medusa-the-open-source-alternative-to-shopify-305j</link>
      <guid>https://dev.to/medusajs/get-started-with-medusa-the-open-source-alternative-to-shopify-305j</guid>
      <description>&lt;p&gt;There are many popular ecommerce platforms that come to developers’ minds first, and one of these is Shopify. Shopify established itself as one of the go-to platforms to create an ecommerce store for any business. However, it has a lot of disadvantages including the fact that it is not free and it has minimal customizability. This is where Medusa comes in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.medusa-commerce.com"&gt;Medusa&lt;/a&gt; is an open-source headless commerce engine that is fast and customizable. As Medusa is split into 3 core components - the headless commerce part that exposes the REST APIs for your store, the frontend of your store, and the admin panel - you are free to use the platform as a whole, or use the parts that you need for your ecommerce store.&lt;/p&gt;

&lt;p&gt;In this tutorial series, you will learn how to create an ecommerce store with Medusa. This includes setting up your development environment, adding features and plugins to your backend, frontend, and admin panel each, and everything you might need to set up your ecommerce store with Medusa.&lt;/p&gt;

&lt;p&gt;In this part of the tutorial series, you will learn how to install and run each part of the platform separately, and you will learn the structure of each part to understand where you need to do what. Then, you will learn how to set up all the different parts together with a single command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-medusa"&gt;
  &lt;/a&gt;
  Why Medusa
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#customization-abilities"&gt;
  &lt;/a&gt;
  Customization Abilities
&lt;/h3&gt;

&lt;p&gt;Shopify is a great choice if you are creating a basic store with no need for customization, or you are not a tech-savvy person. However, you should not use Shopify if you are looking to own your tech stack and make changes per your business requirements. When you choose Shopify, you are stuck with the features and architecture that the platform provides out of the box.&lt;/p&gt;

&lt;p&gt;On the other hand, Medusa’s main feature is its flexibility and extendibility. You can use all of the 3 core components together, or take some of them and couple or integrate them with other technologies or systems.&lt;/p&gt;

&lt;p&gt;You can still use it as a whole and you will get a great development and user experience. The backend is built on Node.js, Express, and by default SQLite when you first install the server with the option to use &lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; and &lt;a href="https://redis.io"&gt;Redis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the frontend, you have the option to use a starter storefront built with either &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; or &lt;a href="https://www.gatsbyjs.com"&gt;Gatsby&lt;/a&gt;. As with both options, you will end up with a static website that connects to the headless server, the speed of your website is almost guaranteed to be fast.&lt;/p&gt;

&lt;p&gt;As for the backend, it is also built with Gatsby and connects to your server just like the frontend.&lt;/p&gt;

&lt;p&gt;This sets Medusa apart from other ecommerce platforms that are tightly coupled, complex and slow. Medusa offers a lot of features out of the box and is built to allow you to customize it based on your needs. Compared to Shopify, which provides less ownership over your tech stack, it allows you to completely own your tech stack.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Suggested Read: &lt;a href="https://blog.shahednasser.com/medusa-create-fast-and-highly-customizable-ecommerce-store/"&gt;Medusa: Create A Fast and Highly Customizable E-Commerce Store&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h3&gt;

&lt;p&gt;Shopify’s pricing models can be a big disadvantage as there are a lot of other alternatives, including Medusa, that offer their ecommerce platform for free.&lt;/p&gt;

&lt;p&gt;Not only do you have to pay to use and deploy the platform, but also it is hard to find plugins or themes for free. In addition, installing plugins is not easy due to the platform’s inflexibility.&lt;/p&gt;

&lt;p&gt;This is where open-source shines. You are free to use and deploy Medusa free of charge. You also have an open-source community backing you up, providing free plugins for you to use. Due to Medusa’s flexibility, installing plugins is very easy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#business-use-cases"&gt;
  &lt;/a&gt;
  Business Use Cases
&lt;/h3&gt;

&lt;p&gt;As mentioned earlier, Shopify is not flexible and is hard to customize. This means that a lot of business use cases, including B2B, market places, custom shopping experiences, and more are not available or possible with Shopify. &lt;/p&gt;

&lt;p&gt;If you are sure that your business will just sell products with the conventional ecommerce experience, that might not be a problem for you. However, if you are already planning for the growth of your business and need an ecommerce platform that can grow and extend as needed with your business use cases, then choosing Shopify will prove to be a hassle.&lt;/p&gt;

&lt;p&gt;Medusa’s headless APIs and flexibility allow you to easily create plugins to customize the shopping experience to your use case or integrate Medusa with other services as needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before we start, make sure you install &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt; if you have not. You will also need &lt;a href="https://www.npmjs.com"&gt;NPM&lt;/a&gt; but it will install with Node.js when you install it.&lt;/p&gt;

&lt;p&gt;To check if you have Node.js and NPM installed you can run these commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node &lt;span class="nt"&gt;-v&lt;/span&gt;
npm &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the output of each of the commands shows a number version, then you have them installed. Otherwise, you need to install them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-medusa"&gt;
  &lt;/a&gt;
  Set Up Medusa
&lt;/h2&gt;

&lt;p&gt;At its core, Medusa is the backend that exposes the REST APIs, which will allow your frontend or admin panel to retrieve or modify the data. You can replace the storefront or admin panel with a platform of your own that connects to the APIs, but you at least need this part of Medusa in your system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-medusa"&gt;
  &lt;/a&gt;
  Install Medusa
&lt;/h3&gt;

&lt;p&gt;Installing Medusa is easy. First, you need to install the CLI tool that allows you to set up the server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; @medusajs/medusa-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once this part is done, you can use the CLI to set up a new Medusa store on your machine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;medusa new my-store &lt;span class="nt"&gt;--seed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a new Medusa installation in the directory my-store. You can change the name of the store or directory by changing my-store. By applying the --seed option, it will seed the database with basic data including a demo product.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#run-medusa"&gt;
  &lt;/a&gt;
  Run Medusa
&lt;/h3&gt;

&lt;p&gt;Once this command is done, you are ready to run your server! First, change to the directory of the medusa store:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;my-store
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, run the &lt;code&gt;develop&lt;/code&gt; command using the CLI tool to run the server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;medusa develop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will run the server by default at &lt;code&gt;localhost:9000&lt;/code&gt;. You can test it by going to &lt;code&gt;localhost:9000/store/products&lt;/code&gt; in your browser and you should see a JSON array of products. It will include just one product as the seeder adds just one.&lt;/p&gt;

&lt;p&gt;You can check the full list of &lt;a href="https://docs.medusa-commerce.com/api/store/auth"&gt;API endpoints in the documentation&lt;/a&gt;. For the storefront, all endpoints are prefixed with &lt;code&gt;/store&lt;/code&gt;, whereas for the admin panel, all endpoints are prefixed with &lt;code&gt;/admin&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#structure-overview"&gt;
  &lt;/a&gt;
  Structure Overview
&lt;/h3&gt;

&lt;p&gt;Let us take a look at the directory structure for the server. It should look something like this:&lt;/p&gt;

&lt;p&gt;As you can see we have the following directories:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XUbyNDS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5pf3w9kemzshbz74akdr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XUbyNDS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5pf3w9kemzshbz74akdr.png" alt="Structure Overview" width="540" height="656"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;data&lt;/code&gt;: This directory holds the data that will be used to seed the database. It has the file &lt;code&gt;seed.json&lt;/code&gt; which includes the configuration for the basic store. These data are the data added to your store when you add the &lt;code&gt;--seed&lt;/code&gt; option which we did.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dist&lt;/code&gt;: This directory will hold the build of your server when you run &lt;code&gt;npm run build&lt;/code&gt;. When you deploy your server, you will run this command and the compiled files in the &lt;code&gt;dist&lt;/code&gt; directory will be used.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;src&lt;/code&gt;: Inside the &lt;code&gt;src&lt;/code&gt; directory, you can add any of the plugins or changes you might need to make. Inside the &lt;code&gt;api&lt;/code&gt; subdirectory, you can add new endpoints to your store. Inside the &lt;code&gt;services&lt;/code&gt; subdirectory, you can add new services which you can use globally in different endpoints. Inside the &lt;code&gt;subscribers&lt;/code&gt; subdirectory, you can add event listeners to different events e.g., when an order is placed.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;uploads&lt;/code&gt;: will include any files to be uploaded like product images.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#set-up-the-storefront"&gt;
  &lt;/a&gt;
  Set Up the Storefront
&lt;/h2&gt;

&lt;p&gt;Next, we'll install and set up the storefront. As mentioned earlier, you can use the &lt;a href="https://github.com/medusajs/gatsby-starter-medusa"&gt;Gatsby&lt;/a&gt; starter or &lt;a href="https://github.com/medusajs/nextjs-starter-medusa"&gt;Next.js&lt;/a&gt; starter. For this tutorial, we'll use the Next.js starter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-the-storefront"&gt;
  &lt;/a&gt;
  Install the Storefront
&lt;/h3&gt;

&lt;p&gt;To install the Next.js storefront just run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app &lt;span class="nt"&gt;-e&lt;/span&gt; https://github.com/medusajs/nextjs-starter-medusa my-storefront
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a Next.js storefront in the directory my-storefront. If you want to name it something else you can change the name in the command.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#run-the-storefront"&gt;
  &lt;/a&gt;
  Run the Storefront
&lt;/h3&gt;

&lt;p&gt;Before running the storefront, make sure that the server is running first as the storefront will connect to the server to retrieve the data of the store. To run the server, you can follow the steps in the previous section.&lt;/p&gt;

&lt;p&gt;To run the storefront, first change to the directory of the storefront:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;my-storefront
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, run the following command to run the storefront:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will run the storefront at &lt;code&gt;localhost:8000&lt;/code&gt; by default. If you open it, you should see a basic storefront with links to different documentations. You can also see the products and try out the full checkout experience.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0F9f-gc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q4ww6jvs6ei0jpgsnvf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0F9f-gc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q4ww6jvs6ei0jpgsnvf.png" alt="Medusa Storefront" width="880" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-stripe-integration"&gt;
  &lt;/a&gt;
  Add Stripe Integration
&lt;/h3&gt;

&lt;p&gt;To add the &lt;a href="https://stripe.com"&gt;Stripe&lt;/a&gt; integration, first copy the &lt;code&gt;.env.template&lt;/code&gt; to &lt;code&gt;.env.local&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mv&lt;/span&gt; .env.template .env.local
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, change the environment variable for Stripe's public key:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;NEXT_PUBLIC_STRIPE_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;pk_test_something
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#structure-overview"&gt;
  &lt;/a&gt;
  Structure Overview
&lt;/h3&gt;

&lt;p&gt;The structure of the directory should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bZpAEA2S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7u0vyffglxyx22koc0e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bZpAEA2S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7u0vyffglxyx22koc0e.png" alt="Structure Overview" width="536" height="728"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;components&lt;/code&gt;: This directory includes different components in the storefront like the cart, checkout, navigation bar, and more. Here you can make changes to the components if needed.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;context&lt;/code&gt;: This includes some easy to toggle or change settings for your store through the context. For example, you can toggle showing the full cart in &lt;code&gt;context/display-context.js&lt;/code&gt; by changing the value of &lt;code&gt;cartView&lt;/code&gt; in the &lt;code&gt;defaultDisplayContext&lt;/code&gt; object.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pages&lt;/code&gt;: This includes the different pages in the storefront. By default, the storefront will have 3 pages: Checkout, Product page, and landing page. You can add more pages to your store here.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;public&lt;/code&gt;: You can add the public assets like images here.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;styles&lt;/code&gt;: This directory holds all the styles of the store and you can make changes here to change the styles of the storefront.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;utils&lt;/code&gt;: This includes helper functions like getting Stripe's public key, helper functions, configurations, and more.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#set-up-the-admin-panel"&gt;
  &lt;/a&gt;
  Set Up the Admin Panel
&lt;/h2&gt;

&lt;p&gt;Finally, we'll install and set up the admin panel. The admin panel is built with Gatsby. Through the admin panel, you can use the APIs exposed by the server to view or make changes to the data in the store. This includes viewing and adding products, orders, customers, and more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-the-admin-panel"&gt;
  &lt;/a&gt;
  Install the Admin Panel
&lt;/h3&gt;

&lt;p&gt;To set up the admin panel, first, clone &lt;a href="https://github.com/medusajs/admin"&gt;the repository of the admin panel&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/medusajs/admin my-admin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, change to the directory of the admin panel, which is my-admin. You can change that by changing it in the command above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;my-admin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, you need to install the dependencies with NPM:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#run-the-admin-panel"&gt;
  &lt;/a&gt;
  Run the Admin Panel
&lt;/h3&gt;

&lt;p&gt;Once all the dependencies are installed, we are ready to run the admin panel:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will open the admin panel at &lt;code&gt;localhost:7000&lt;/code&gt; by default. When you first open it, you will be asked to log in. To log in you can use the email "&lt;a href="mailto:admin@medusa-test.com"&gt;admin@medusa-test.com&lt;/a&gt;" with the password "supersecret".&lt;/p&gt;

&lt;p&gt;When you log in, you will see an admin panel with a sidebar that you can use to view orders, customers, products, and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Aa6x8Vyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f63nku8x3selobtumzh6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Aa6x8Vyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f63nku8x3selobtumzh6.png" alt="Medusa Admin" width="880" height="337"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#structure-overview"&gt;
  &lt;/a&gt;
  Structure Overview
&lt;/h3&gt;

&lt;p&gt;The structure of the directory should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NVhekaBI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/800zajsxaalkcoupi1cl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NVhekaBI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/800zajsxaalkcoupi1cl.png" alt="Structure Overview" width="546" height="916"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;src&lt;/code&gt;: Here you will find the main code for the admin panel. You can edit components, pages, context, and more. Any edits or additions to the admin panel can be done here.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;public&lt;/code&gt;: This will include the build generated by Gatsby for the admin panel.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;static&lt;/code&gt;: The public static assets you will need for the admin panel like images.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As mentioned, this admin panel is built with Gatsby. Although you do not necessarily need to learn Gatsby to set it up and run it, making changes to it would require some understanding of how Gatsby works, depending on the kind of change you will be making.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternative-solution-create-medusa-app"&gt;
  &lt;/a&gt;
  Alternative Solution: Create Medusa App
&lt;/h2&gt;

&lt;p&gt;As mentioned, Medusa decouples the three core components of the platform to give you the flexibility and ability to customize the platform as fitting for you. However, if you will use the three components, you can install them all at once.&lt;/p&gt;

&lt;p&gt;Medusa introduces &lt;a href="https://docs.medusa-commerce.com/how-to/create-medusa-app"&gt;create-medusa-app&lt;/a&gt;. If you've used &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; before, before, you will notice that this is similar to &lt;a href="https://create-react-app.dev"&gt;create-react-app&lt;/a&gt;. by using this tool, you will be able to set up the 3 components of the platform all at once.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-up-medusa-app"&gt;
  &lt;/a&gt;
  Set Up Medusa App
&lt;/h3&gt;

&lt;p&gt;In your terminal, you just need to run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-medusa-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will then be asked some questions related to naming your store, what technologies you want to use for the different parts of the platform and more.&lt;/p&gt;

&lt;p&gt;Once the installation is done, you will have 3 directories ready. One for the server which will be called &lt;code&gt;backend&lt;/code&gt;, one for the storefront which will be called &lt;code&gt;storefront&lt;/code&gt;, and one for the admin which will be called &lt;code&gt;admin&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#run-the-medusa-app"&gt;
  &lt;/a&gt;
  Run the Medusa App
&lt;/h3&gt;

&lt;p&gt;Similar to the instructions of each component in the first method, when we install them separately, you will have to run each component separately.&lt;/p&gt;

&lt;p&gt;The Medusa server is required for both the storefront and the admin panel, so make sure that it is running before running either of them.&lt;/p&gt;

&lt;p&gt;To run the Medusa server you need to change to the backend directory then run it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;backend
npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run the Medusa storefront you need to change to the storefront directory then run it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;storefront
npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run the Medusa admin you need to change to the admin directory then run it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;admin
npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Although no one can deny Shopify’s popularity and many advantages, it is also good to recognize some of its disadvantages and what other options or alternatives you have. &lt;/p&gt;

&lt;p&gt;Its lack of extendibility and ownership are disadvantages that should not be taken lightly when choosing an ecommerce platform for your system.&lt;/p&gt;

&lt;p&gt;Medusa is a great alternative when it comes to these cons. Medusa is an open-source platform that will provide you with an extensible and fast development experience, as you have probably seen from this tutorial. Its setup is quick, and you can easily make changes or additions to any part of its components.&lt;/p&gt;

&lt;p&gt;In addition to all that, the team behind Medusa is always happy to assist you with any questions you might have regarding how to set up Medusa on &lt;a href="https://discord.gg/F87eGuwkTp"&gt;the Discord&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;In the next part of the series, you will see how to make changes to the server. This includes how to add API endpoints, services, and more. As we go through the tutorial series you will be able to master and understand each component of Medusa to help you build your ecommerce store.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>opensource</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
