<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How do you Invoice your clients?</title>
      <author>Madza</author>
      <pubDate>Thu, 09 Sep 2021 07:42:26 +0000</pubDate>
      <link>https://dev.to/madza/what-do-you-use-for-invoicing-4af7</link>
      <guid>https://dev.to/madza/what-do-you-use-for-invoicing-4af7</guid>
      <description>&lt;p&gt;Professional looking, convenient and fastly delivered invoices can leave a great impression on your clients, that can strengthen your business relations for possible returning future deals.&lt;/p&gt;

&lt;p&gt;When it comes to your side as a freelancer, you have to be in full control of organizing them and create a workflow that fits you.&lt;/p&gt;

&lt;p&gt;Here are some of the ways on how you can handle this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create a dedicated space in your PC or use a cloud solution like &lt;a href="https://www.google.com/drive/"&gt;Google Drive&lt;/a&gt;. This requires to do all the work (creating new templates, numbering and filling in the data) manually. Also keep in mind that you must track each and every invoice afterwards. This might still work if you send out very small amount of invoices (like 3-5 each month).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use built-in Invoicing solutions in Accounting software like (&lt;a href="https://www.freshbooks.com/"&gt;FreshBooks&lt;/a&gt;, &lt;a href="https://quickbooks.intuit.com/global/"&gt;QuickBooks&lt;/a&gt;, &lt;a href="https://www.waveapps.com/"&gt;Wave&lt;/a&gt;, &lt;a href="https://www.xero.com/"&gt;Xero&lt;/a&gt;, &lt;a href="https://www.zoho.com/books/"&gt;Zoho Books&lt;/a&gt;, &lt;a href="https://www.freeagent.com/"&gt;FreeAgent&lt;/a&gt;). This solution creates templates and numbering automatically and lets you add the data easily with interactive forms. Also it is easy to track the status (sent, viewed, paid or overdue) of each invoice. Depending on the software you use, you might have to upgrade to paid plans to use the invoicing features.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Many online payment solutions such as &lt;a href="https://paypal.com"&gt;PayPal&lt;/a&gt; and &lt;a href="https://stripe.com"&gt;Stripe&lt;/a&gt; also come with some built in Invoicing solutions. With these you often get the same Invoicing solutions as in the Accounting software, plus you have your direct finance flow and invoices all in one place. Again, most payment solutions might apply some extra charges for you to be able to use the Invoicing features.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How often do you send invoices and what solutions do you use?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>business</category>
      <category>finance</category>
      <category>invoicing</category>
    </item>
    <item>
      <title>Progressive Web Apps vs Responsive Websites</title>
      <author>Chris Fowler</author>
      <pubDate>Thu, 09 Sep 2021 07:35:02 +0000</pubDate>
      <link>https://dev.to/dsvdeveloper88/progressive-web-apps-vs-responsive-websites-4dm2</link>
      <guid>https://dev.to/dsvdeveloper88/progressive-web-apps-vs-responsive-websites-4dm2</guid>
      <description>&lt;p&gt;Most e-commerce sites are not optimized for mobile. Also, it seems unlikely that prospective buyers would download a native app just to buy something off an online store. As the number of mobile consumers rises, it is expected that almost 54% of e-commerce sales by 2021 will happen on mobile instead of traditional websites.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c_FYU4bK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ib00lxhagpik0i18t0iv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c_FYU4bK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ib00lxhagpik0i18t0iv.jpeg" alt="responsive websites"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So how do &lt;a href="https://www.designveloper.com/blog/ecommerce-business-101/"&gt;eCommerce business&lt;/a&gt; ensure that they get their leads to convert, and their prospects to buy? Well, they have two options to ensure that their digital store gets attention online.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-difference-of-pwas-and-responsive-website"&gt;
  &lt;/a&gt;
  The difference of PWAs and Responsive website
&lt;/h2&gt;

&lt;p&gt;It also quickly became an essential requirement for new websites. In comparison, a responsive site is developed once, and the onus falls on different mobile devices to display the website according to the screen size.&lt;/p&gt;

&lt;p&gt;But responsive websites couldn’t offer advanced functionalities like offline support, push messages, and other native app-like features that customers have to expect on their smartphones.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pwas-vs-responsive-websites"&gt;
  &lt;/a&gt;
  PWAs vs Responsive websites
&lt;/h2&gt;

&lt;p&gt;Responsive websites couldn’t offer advanced functionalities like offline support, push messages, and other native app-like features that customers have to expect on their smartphones. While a progressive app mimics the behavior of an app. It is developed using CSS, HTML5, or JavaScript for specific screen sizes only.&lt;/p&gt;

&lt;p&gt;Both are designed to provide a smooth web experience for users on different devices – so which one works better? Here are a few ways to differentiate between the two:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-pwas-are-faster-than-responsive-design"&gt;
  &lt;/a&gt;
  1. PWAs are faster than Responsive design
&lt;/h3&gt;

&lt;p&gt;A progressive app is the next step after a &lt;a href="https://www.designveloper.com/blog/responsive-web-design/"&gt;responsive website&lt;/a&gt;. In all probability, your business already has a website or web app, and you can make it load faster on different mobile devices.&lt;/p&gt;

&lt;p&gt;The good news about PWAs is that older browsers support them and that they incorporate modern features like offline support, push notification, native video, and audio capturing capabilities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-pwas-offer-the-ability-to-work-offline"&gt;
  &lt;/a&gt;
  2. PWAs offer the ability to work offline
&lt;/h3&gt;

&lt;p&gt;There’s no need for an internet connection to use a progressive web app because of this feature. The application cache feature allows websites to store a large amount of data offline, giving PWAs much of the functionality of &lt;a href="https://www.designveloper.com/blog/mobile-web-app-development/"&gt;native apps&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-pwas-are-expensive-to-make-and-maintain"&gt;
  &lt;/a&gt;
  3. PWAs are expensive to make and maintain
&lt;/h3&gt;

&lt;p&gt;This undoubtedly makes PWAs the more expensive of the two options. It can be costly to maintain the web app in the long run as compared to a responsive website.&lt;/p&gt;

&lt;p&gt;The screen size of the user’s device is a vital consideration for developing &lt;a href="https://www.designveloper.com/blog/why-progressive-web-apps/"&gt;progressive web apps&lt;/a&gt;, which means that the website needs to be developed several times over for different devices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-stellar-app-experience-without-the-development-costs-with-pwas"&gt;
  &lt;/a&gt;
  4. Stellar app experience without the development costs with PWAs
&lt;/h3&gt;

&lt;p&gt;Progressive web apps allow different features like file access, task scheduling, SMS/MMS capability, offline storage, location, and device position&lt;/p&gt;

&lt;p&gt;Progressive web apps make your website feel like a high-quality, well-developed, and expensive app. That’s excellent value for your money because PWAs don’t cost as much as apps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-both-work-well-with-seo-sem-to-ensure-discoverability"&gt;
  &lt;/a&gt;
  5. Both work well with SEO, SEM to ensure discoverability
&lt;/h3&gt;

&lt;p&gt;Businesses can promote both progressive web apps and responsive websites through paid search engine marketing. Responsive websites and progressive apps are great for SEO and SEM because they are essentially websites.&lt;/p&gt;

&lt;p&gt;All the content present on websites and &lt;a href="https://www.designveloper.com/blog/7-awesome-web-app-ideas-for-web-developer/"&gt;web apps&lt;/a&gt; is still crawled and indexed by search engines. They can play a crucial role in the website’s overall rank in the search results.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Hopefully, the information in this blog post will help you decide between progressive web apps vs responsive websites. &lt;/p&gt;

&lt;p&gt;Many factors go into planning and developing a custom website that suits your business needs and appeals to the target audience. As users and customers express their needs and preferences, businesses must learn to pick up on these cues and quickly adapt to the developments, so their products and services stay relevant.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>webrtc</category>
      <category>mobile</category>
      <category>webmonetization</category>
    </item>
    <item>
      <title>My Journey through Bootcamp</title>
      <author>Angela Lam</author>
      <pubDate>Thu, 09 Sep 2021 07:15:45 +0000</pubDate>
      <link>https://dev.to/anglam/my-journey-through-bootcamp-4gpd</link>
      <guid>https://dev.to/anglam/my-journey-through-bootcamp-4gpd</guid>
      <description>&lt;p&gt;For the past ten months, I have been enrolled in Flatiron's online part-time software engineering course. This blog post marks my completion of my final project in Flatiron and the beginning of my job hunt in the tech field. Throughout my time in bootcamp, I've been asked by many how my bootcamp experience was and some showed interest in joining a bootcamp as well. Today, I'm going to share my experience and honest opinion about the curriculum. &lt;/p&gt;

&lt;p&gt;I want to note that I have very close people who have gone through the in-person flatiron curriculum that takes four months to complete, so there will be some comparing and contrasting to that curriculum.&lt;/p&gt;

&lt;p&gt;The part-time program is essentially two one-hour lectures and one pod meeting (a small group of students solving problems or asking questions with the instructor) per week including a bunch of labs/modules to complete on Canvas. From my friend who graduated from the on-campus full-time course, they had to be in class from 8am to 5pm (not exactly sure about the exact time, but basically from waking up to late afternoon). When I first heard about her curriculum, I thought I was got the bad end of the stick. She was definitely going to have a better curriculum than my part-time curriculum. But that wasn't the case... I think. It's hard to exactly compare and contrast the full-time on-campus to the part-time online. Overall, I think I learned just as much as the full-time on-campus students in regards to the languages and coding. Although the curriculum should be similar, there are some pros and cons about each.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full-time on-campus&lt;/strong&gt;&lt;br&gt;
Pros:&lt;br&gt;
-Pair-programming for projects&lt;br&gt;
-Code-challenge&lt;br&gt;
Cons:&lt;br&gt;
-Less requirements for projects&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part-time online&lt;/strong&gt;&lt;br&gt;
Pros:&lt;br&gt;
-Stricter on project&lt;br&gt;
-Live code challenge for project&lt;br&gt;
Cons:&lt;br&gt;
-No pair-programming&lt;/p&gt;

&lt;p&gt;For the full-time on-campus, they must pass a code-challenge about the material they learned. After passing, they start on projects which are actually done in pairs, so they get to collaborate and learn how to merge branches and make pull requests. I hate to admit it, but I barely know anything about pair-programming. The part-time online course is all about you and yourself. The projects are solo projects, which forces you to learn everything and solve all your bugs on your own without a partner. This is great but also stressful. After completing your project, you have a review where you are asked general questions about the material and your project, then the reviewer gives you a live-coding challenge on the spot. When I discussed project requirements with my friend who was enrolled in the full-time on-campus (but technically online because &lt;em&gt;covid&lt;/em&gt;), he had it way easier than I did. He had an easier rubric than the part-time online course. I honestly see this as a pro for me, since a stricter requirement for projects would force me to learn more and make a better application. Honestly, the only thing I'm salty about is the lack of pair-programming in the part-time online course. Unsure how the full-time online course runs. &lt;/p&gt;

&lt;p&gt;Overall, my experience with Flatiron has been great. I've connected with some of my fellow cohort students and became friends. The curriculum is not lacking and learned a lot about Ruby, Ruby on Rails, Javascript, React, and Redux. The only negative thing I have to say is the lack of pair-programming. Learning how to code with a fellow programmer is so important in the real world. When you head into a job, you're not going to be building your own application from the ground up. I do recommend Flatiron, whether it's the full-time on-campus or the part-time online. &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Why I Love Polywork as a Software Developer
</title>
      <author>Sunil Kumar</author>
      <pubDate>Thu, 09 Sep 2021 07:11:57 +0000</pubDate>
      <link>https://dev.to/sunilc_/why-i-love-polywork-as-a-software-developer-lf6</link>
      <guid>https://dev.to/sunilc_/why-i-love-polywork-as-a-software-developer-lf6</guid>
      <description>&lt;p&gt;If you haven't heard about Polywork yet you're definitely missing out on something exciting. I recently saw someone talking about Polywork on Twitter a month ago and was intrigued to see what it was all about.&lt;/p&gt;

&lt;p&gt;Soon after this, I got the invite code from one of my friends on Twitter and I signed up on the platform instantly.&lt;/p&gt;

&lt;p&gt;My initial impression was that Polywork was just another social media platform for software developers that will die soon. But as I started using it more, Polywork proved me wrong.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-what-is-polywork"&gt;
  &lt;/a&gt;
  So, What is Polywork?
&lt;/h3&gt;

&lt;p&gt;Polywork is a professional social media platform that helps you highlight your achievements, journal your work, events, network with like-minded people, and also get more work in your interested domain.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But how does it differ from LinkedIn?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;LinkedIn is more of a social network around your job. It helps you create your presence around your resume, your job titles, and your work experiences.&lt;br&gt;
But resumes often do not reflect all the achievements we do. They do not tell our whole story.&lt;/p&gt;

&lt;p&gt;We are more than our job or education. We all do a wide variety of wonderful things, both in our 9–5 and outside of 9-5. We are creators, podcasters, YouTubers, investors, and more. All these different aspects create our professional identity.&lt;br&gt;
But none of the existing social media platforms help us highlight these parts of our identity. &lt;/p&gt;

&lt;p&gt;That's where Polywork comes in!&lt;/p&gt;

&lt;p&gt;Polywork can be used to highlight anything you have done as part of your work and even outside of your work. It's not tied to any one type of work. It could be joining a company in a role, speaking at a conference, live streaming a video, releasing an eBook, etc. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;It's a place to showcase all of your achievements!&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#heres-how-im-using-polywork-and-why-i-love%C2%A0it"&gt;
  &lt;/a&gt;
  Here's how I'm using Polywork and why I love it:
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#1-highlights"&gt;
  &lt;/a&gt;
  1. Highlights
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MM7liEh2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631167237766/yk1LKVBZ0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MM7liEh2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631167237766/yk1LKVBZ0.jpeg" alt="polywork-titan.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of my favorite features on the platform is highlights. Highlights let me track all my achievements as milestones on my profile. It provides a way to let people know about the different things I'm working on. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;But how is it different from posts/tweets on LinkedIn/Twitter respectively you may ask?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I have a job. I build SaaS products. I love content creation. I create eBooks. I write articles. I do a lot of things and I want to highlight all of them in one place. Polywork lets me do this in a much better way compared to other professional platforms.&lt;/p&gt;

&lt;p&gt;I have a huge audience on Twitter and I do share my milestones there. But they get lost eventually because of the number of tweets I post. On the other hand, Highlights on Polywork helps me keep only the important events and milestones as a timeline. For example, these are some of the highlights I have on my Polywork profile:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reached 30K followers milestone on Twitter&lt;/li&gt;
&lt;li&gt;Started a new role at Unacademy&lt;/li&gt;
&lt;li&gt;Reached 20K followers milestone on Twitter&lt;/li&gt;
&lt;li&gt;Published an eBook&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2lYZEKw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631167309006/XFymNxJkm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2lYZEKw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631167309006/XFymNxJkm.png" alt="Screenshot 2021-09-09 at 11.25.14 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These highlights help me showcase my milestones to visitors and let me know what I'm up to. It helps me get more work in the future.&lt;/p&gt;

&lt;p&gt;Some of the other achievements that others generally highlight on the platform are like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Finished reading a book&lt;/li&gt;
&lt;li&gt;Hosted a conference&lt;/li&gt;
&lt;li&gt;Spoke at a conference&lt;/li&gt;
&lt;li&gt;Did a YouTube live stream&lt;/li&gt;
&lt;li&gt;Wrote an article, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are just some examples. You can highlight anything you want to showcase to others.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-multiverse"&gt;
  &lt;/a&gt;
  2. Multiverse
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N3LNsUeW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631167362744/FwzjSKkX3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N3LNsUeW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631167362744/FwzjSKkX3.jpeg" alt="polywork-connected.jpeg"&gt;&lt;/a&gt;&lt;br&gt;
Multiverse is a place to find other people in your interested domain, network with them, and see what they've been doing. Highlights from everyone in your interested domain appear here.&lt;/p&gt;

&lt;p&gt;You can even filter Highlights based on trending Badges. For example, you can see Featured People and all the highlights from Software Engineering Badge. This is a great place to find like-minded people and connect with them.&lt;/p&gt;

&lt;p&gt;I often find myself looking through interesting badges like Book Worm, Software Developer, Lifelong Learner, Writer, etc hoping to network with other people who are interested in these topics as well. Polywork makes it really easy to find such people. Badges are at the center of it.&lt;/p&gt;

&lt;p&gt;The one thing where multiverse is a game-changer for me is that it gives me a lot of ideas on how people are building businesses and making money on the internet. &lt;br&gt;
One of the main reasons for us to not try something new is that we just don't know that it exists. I couldn't make money on the internet for years for this same reason. Once I started following the right people on Twitter I was able to make a good amount of money by applying the same approach they followed. &lt;/p&gt;

&lt;p&gt;The What everyone's doing section gives a very good idea about what others are doing and how they are doing it. I have been learning about new ways to build multiple income streams, developer advocacy, etc just by following the right people on Polywork.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Space Station&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xsCR8JBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631167401333/X7GUufu-I.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xsCR8JBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631167401333/X7GUufu-I.png" alt="polywork-space1.png"&gt;&lt;/a&gt;&lt;br&gt;
Space Station is a relatively new feature centered around collaborations. It makes it really easy for you to find people to collaborate with on anything. Be it finding a mentor, hiring for a role, finding a partner for a side project, finding an investor, etc.&lt;/p&gt;

&lt;p&gt;Everyone knows how important Networking is. Space Station is really powerful to network if used correctly.&lt;/p&gt;

&lt;p&gt;For example, I have a huge audience on Twitter and I'm planning to release more info products in the future. I can write an eBook on a topic I know about. I'm confident I can put together a great book with a lot of value. &lt;/p&gt;

&lt;p&gt;But I lack knowledge in certain areas like marketing, designing, branding, etc. I can totally find people who are open to collaborations on these things and make my eBook a huge success.&lt;/p&gt;

&lt;p&gt;If you're not a developer but have an idea to build a SaaS product. Space Station is the right place to find developers who are open to collaborate on our project.&lt;/p&gt;

&lt;p&gt;If you already have a company and are looking to scale it by getting investments, Polywork will help you connect with investors who are open to collaborate.&lt;/p&gt;

&lt;p&gt;The opportunities are just endless.&lt;/p&gt;




&lt;p&gt;If you're not on Polywork yet, you should get on it soon and check it out. Here is my  &lt;a href="https://www.polywork.com/invite/sunilc_-jigglypuff"&gt;VIP link&lt;/a&gt;  you can use to sign up!&lt;/p&gt;

&lt;p&gt;Connect with me on Polywork  &lt;a href="https://www.polywork.com/sunilc_"&gt;here&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;The article was originally published on my blog &lt;a href="https://sunilkumarc.in/why-i-love-polywork-as-a-software-developer"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>career</category>
      <category>startup</category>
      <category>webdev</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>How do you handle your Accounting?</title>
      <author>Madza</author>
      <pubDate>Thu, 09 Sep 2021 06:52:28 +0000</pubDate>
      <link>https://dev.to/madza/how-do-you-handle-your-accounting-2l6</link>
      <guid>https://dev.to/madza/how-do-you-handle-your-accounting-2l6</guid>
      <description>&lt;p&gt;Freelance is not about just getting clients and delivering your services. Since you are the boss for yourself, you have to think about other things in parallel. One of them is being accountable for your finance flow.&lt;/p&gt;

&lt;p&gt;When it comes to handling this, I've seen different approaches:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Some use standard spreadsheets like Excel or similar solutions on cloud like &lt;a href="https://www.google.com/sheets/about/"&gt;Google Sheets&lt;/a&gt;. There are built-in templates for accounting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Others use Accounting software (usually paid for advanced features) like &lt;a href="https://www.freshbooks.com/"&gt;FreshBooks&lt;/a&gt;, &lt;a href="https://quickbooks.intuit.com/global/"&gt;QuickBooks&lt;/a&gt;, &lt;a href="https://www.waveapps.com/"&gt;Wave&lt;/a&gt;, &lt;a href="https://www.xero.com/"&gt;Xero&lt;/a&gt;, &lt;a href="https://www.zoho.com/books/"&gt;Zoho Books&lt;/a&gt;, &lt;a href="https://www.freeagent.com/"&gt;FreeAgent&lt;/a&gt;, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Or do you hire a professional to handle all of that, so you can fully concentrate with interactions with your clients and your business logic? &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What's your approach on handling your Accounting and how much do you spend on it monthly?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>business</category>
      <category>finance</category>
      <category>accounting</category>
    </item>
    <item>
      <title>What is Imposter Syndrome?</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Thu, 09 Sep 2021 06:34:07 +0000</pubDate>
      <link>https://dev.to/rainboestrykr/what-is-imposter-syndrome-2b8m</link>
      <guid>https://dev.to/rainboestrykr/what-is-imposter-syndrome-2b8m</guid>
      <description>&lt;p&gt;Every person, sooner or later, is going to suffer from this thing which we label “imposter syndrome”.&lt;/p&gt;

&lt;p&gt;You might have this feeling now, but you don’t know that it has a name attached.&lt;/p&gt;

&lt;p&gt;Let me describe some situations where you might find imposter syndrome in the wild.&lt;/p&gt;

&lt;ul&gt; 
&lt;li&gt; You are a developer, have no Computer Science degree, and you feel people that have the CS degree know a lot more than you, and you should get one too in order to be called a developer
&lt;/li&gt;
&lt;li&gt;You work on a project and you call it a little side project, not a real project, because - you know - it’s just a simple app
&lt;/li&gt;
&lt;li&gt;You think other developers know a lot more than you do.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now sometimes I think the solution is to tell yourself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;everyone’s winging it
&lt;/li&gt;
&lt;li&gt;no one really knows what they are doing
&lt;/li&gt;
&lt;li&gt;people you look up to like to show themselves as overconfident publicly, but under the hood they’re not really like that
&lt;/li&gt;
&lt;li&gt;things will always be like this
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But this is still very self-deprecating.&lt;/p&gt;

&lt;p&gt;The real response to all this thinking is to realize how far you went from when you started.&lt;/p&gt;

&lt;p&gt;Look back.&lt;/p&gt;

&lt;p&gt;There was a day when you could not even figure out how to start the computer. What code even was. You didn’t know you could actually create programs and make the computer do what you want.&lt;/p&gt;

&lt;p&gt;Look at you now.&lt;/p&gt;

&lt;p&gt;You are the best version of yourself and yet you are perfectly sure that tomorrow you’ll be an even better version.&lt;/p&gt;

&lt;p&gt;You are improving. Just like your code.&lt;/p&gt;

&lt;p&gt;The only way to stop feeling like an impostor is to stop thinking like an impostor.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Break the silence. 
&lt;/li&gt;
&lt;li&gt;Separate feelings from fact. 
&lt;/li&gt;
&lt;li&gt;Recognize when you should feel fraudulent. 
&lt;/li&gt;
&lt;li&gt;Accentuate the positive. 
&lt;/li&gt;
&lt;li&gt;Develop a healthy response to failure and mistake making. 
&lt;/li&gt;
&lt;li&gt;Right the rules.
&lt;/li&gt;
&lt;li&gt;Develop a new script.
&lt;/li&gt;
&lt;li&gt;Visualize success.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But you know you are not perfect at your craft, and I think that this is a feeling that might never go away. After all programming is such an enormous field.&lt;/p&gt;

&lt;p&gt;And we all know that person that is very overconfident, and will deprecate others just because they don’t know that specific thing they happen to know a lot about… well, don’t be that person.&lt;/p&gt;

&lt;p&gt;Find your sweet spot.&lt;/p&gt;

&lt;p&gt;I’m sure you’ll even get better at your craft if you start believing more that you were made for it.&lt;/p&gt;

&lt;p&gt;The hardest part of solving a bug is identifying that bug. The rest comes easier.&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>beginners</category>
      <category>career</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to build a personalized image social sharing app with Cloudinary and Next.js</title>
      <author>Salma Alam-Naylor</author>
      <pubDate>Thu, 09 Sep 2021 05:57:44 +0000</pubDate>
      <link>https://dev.to/whitep4nth3r/how-to-build-a-personalized-image-social-sharing-app-with-cloudinary-and-next-js-2640</link>
      <guid>https://dev.to/whitep4nth3r/how-to-build-a-personalized-image-social-sharing-app-with-cloudinary-and-next-js-2640</guid>
      <description>&lt;p&gt;Have you seen &lt;a href="https://tickets.contentful.com/fastforward2021?name=Salma&amp;amp;shared=true"&gt;Contentful’s event website that generates customized and shareable ticket images&lt;/a&gt; that we released for our annual conference &lt;a href="https://www.contentful.com/fast-forward"&gt;Fast Forward&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UaLd2ymq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y39n29cr192syicblhs8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UaLd2ymq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y39n29cr192syicblhs8.png" alt='A screenshot from the Fast Forward ticket website with the text "Salma is going!", a personalised ticket image, and a sign up CTA.'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As events continue to evolve in the digital landscape, you might have seen some fun and engaging personalized event tickets shared on social media for &lt;a href="https://graphqlconf.org/ticket/salma-alam-naylor-002351"&gt;GraphQL Conf&lt;/a&gt; and &lt;a href="https://nextjs.org/conf/tickets/jun21/whitep4nth3r#room-mszfy"&gt;Next.js Conf&lt;/a&gt; in 2021. I love this idea — not only for the fun factor. It also showcases just how many great low-cost services and capabilities exist in web development.&lt;/p&gt;

&lt;p&gt;In this post, we’re going to build a front-end application with &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; and &lt;a href="https://cloudinary.com/"&gt;Cloudinary&lt;/a&gt; that creates a personalized image of a ticket based on URL parameters to share on Twitter and LinkedIn.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gyVeKOGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5dgftmzilos20nk6w9ax.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gyVeKOGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5dgftmzilos20nk6w9ax.png" alt="A collage of GraphQL conf, Nextjs Conf and Fast Forward Conf social sharing event tickets in a range of desktop and mobile views."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ll also configure the app to behave differently for the ticket holder and anyone else who views the ticket. The beauty of this approach is that the possibilities for dynamic image sharing are endless. Previously, I wrote about Three ways to use Puppeteer and Node.js to screenshot web pages and generate dynamic Open Graph images for social sharing. However, building this functionality with Cloudinary was so much simpler that I’m thinking of switching to this method for the Open Graph images on my blog! 🙈&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/contentful" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XBFNG6UL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--leQM9WN9--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/390/6233b08f-25c6-4d56-98bb-10a1ea51bad0.png" alt="Contentful"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gFhxX9YI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--89x-qD1I--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/492757/d64f2cf8-616d-4a73-af1c-17273b0c8545.png" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/contentful/three-ways-to-use-puppeteer-and-node-js-to-screenshot-web-pages-and-generate-dynamic-open-graph-images-for-social-sharing-5fjj" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Three ways to use Puppeteer and Node.js to screenshot web pages and generate dynamic Open Graph images for social sharing&lt;/h2&gt;
      &lt;h3&gt;Salma Alam-Naylor for Contentful ・ Mar 17 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Here’s a sneak preview of what we’ll build. The name parameter in the URL provides a name to embed on the image itself via the Cloudinary API rather than being overlaid via HTML and CSS. We’ll also generate a random ticket number and configure the app to behave differently for viewers who aren’t ticket holders.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4gj2ZAbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8ylhri9t390iova06fp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4gj2ZAbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8ylhri9t390iova06fp.png" alt="A screenshot of the Fast Forward ticket app, showing how the parameters from the URL translate to the content on the page. You can see that the name parameter from the URL is embedded onto the image of the ticket, and the random ticket number is also highlighted at the right of the ticket."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The only thing you’ll need for this tutorial is an image you’d like to personalize. Let’s get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sign-up-for-cloudinary"&gt;
  &lt;/a&gt;
  Sign up for Cloudinary
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://cloudinary.com/"&gt;Cloudinary&lt;/a&gt; is an image and video asset management service that provides an API for customizing your media on the fly. Add text to your images, style it with colors and custom fonts, crop, rotate, resize, recolour, detect faces… it's pretty powerful!&lt;/p&gt;

&lt;p&gt;Head on over to Cloudinary and click &lt;a href="https://cloudinary.com/users/register/free"&gt;sign up for free&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Flee4t_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a90phh4g9pcfonh0m307.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Flee4t_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a90phh4g9pcfonh0m307.png" alt="A screenshot of the Cloudinary sign up form."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you’ve confirmed your email address, log in to Cloudinary and you’ll be greeted with a welcome screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_VdgtLbN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4a1vsk5wa5rm609o5t6g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_VdgtLbN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4a1vsk5wa5rm609o5t6g.png" alt="A screenshot of the Cloudinary welcome screen that you see after you log in to a fresh account."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#upload-your-assets-to-cloudinary"&gt;
  &lt;/a&gt;
  Upload your assets to Cloudinary
&lt;/h2&gt;

&lt;p&gt;Click on the Media Library navigation item and click Upload in the top right corner. Select your template image and after a second or two, you’ll see the new image asset in your dashboard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eBQ3xrqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ib4w0htigil258r11n47.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eBQ3xrqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ib4w0htigil258r11n47.png" alt="A screenshot of the media upload area in Cloudinary, showing a blue border around the new ticket image I just uploaded."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your asset will be uploaded with an auto-generated suffix. Click on the asset to open it in the preview pane to change the file name so that it’s easier for you to recognize the image name in the code later on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NwiXgS8R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ik8i7ukqsj3fn5j8wxyu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NwiXgS8R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ik8i7ukqsj3fn5j8wxyu.png" alt="A screenshot of the Cloudinary media upload screen, showing the new image asset just uploaded selected. On the right, an edit panel is revealed, showing that I edited the auto-generated image name for ease of use later."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also uploaded some custom fonts to Cloudinary to ensure the image personalizations were on brand for Contentful. Given that you can use a variety of Google fonts with the Cloudinary API, I won’t cover fonts in this post, but you can learn how to upload custom fonts via the Cloudinary media library from &lt;a href="https://www.learnwithjason.dev/blog/upload-custom-font-cloudinary-media-library/"&gt;this post by Jason Lengstorf&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now our image asset is stored safely in Cloudinary. Let’s get coding!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-new-nextjs-app"&gt;
  &lt;/a&gt;
  Create a new Next.js app
&lt;/h2&gt;

&lt;p&gt;I chose Next.js for this application to harness the power of server-side rendering using URL parameters, which will power the image personalization.&lt;/p&gt;

&lt;p&gt;To spin up a new Next.js application, run the following command in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app ticket-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command creates a new directory that includes all code to get started. The output below is what you should see after you run the command in your terminal. (I’ve truncated the output a little with ‘/* more things happen here */’ but what you’re looking for is ✨ Done!)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hQOHR7Bk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2bclz3r4u0w1ciob829a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hQOHR7Bk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2bclz3r4u0w1ciob829a.png" alt="A screenshot of a terminal window showing the truncated output of the create next app command."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Navigate to the root of your project directory and start the development server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;ticket-app
npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Navigate to &lt;a href="https://localhost:3000/"&gt;https://localhost:3000&lt;/a&gt; in your browser and you’ll see your fresh Next.js app in action.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hyBStGYv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jztyyto9wcu1tipsnrmm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hyBStGYv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jztyyto9wcu1tipsnrmm.png" alt='A screenshot of the index page of a fresh Next.js app. The heading reads "Welcome to Next.js" and below are some links to documentation.'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s build our page for the ticket!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-your-page"&gt;
  &lt;/a&gt;
  Build your page
&lt;/h2&gt;

&lt;p&gt;In a Next.js application, any JavaScript file you add to the pages directory becomes a route on the front end. You can choose to work on &lt;code&gt;index.js&lt;/code&gt; or create a new file in the pages directory. In the final implementation, I created &lt;code&gt;fast-forward.js&lt;/code&gt; inside the pages directory to allow for the fact that the app will be used for future events. To account for this, I made sure all requests for the index were redirected to the current event page. For the purpose of this tutorial, we’ll work on index.js and serve the generated tickets under the root URL &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h8tre_F5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e02fsuo8qs800wpmdgwv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h8tre_F5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e02fsuo8qs800wpmdgwv.png" alt="A screenshot of the file tree in VS code. It shows a pages folder with index.js highlight inside it."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#start-with-a-blank-slate"&gt;
  &lt;/a&gt;
  Start with a blank slate
&lt;/h3&gt;

&lt;p&gt;Delete most of the boilerplate code from index.js until you’re left with a nice blank canvas to work with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* We'll write some functions here! */&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* We'll configure the event data here! */&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;awesome&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/title&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* We'll build our page here! */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configure-the-serverside-props"&gt;
  &lt;/a&gt;
  Configure the server-side props
&lt;/h3&gt;

&lt;p&gt;The image stored in Cloudinary will be personalized with the name of the ticket holder, grabbed from a URL parameter. Here’s the URL we’ll be working with in development.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://localhost:3000?name=whitep4nth3r
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In a pure JavaScript application, you can process the URL parameter on the client-side to build the page content — but with Next.js we can use &lt;code&gt;getServerSideProps()&lt;/code&gt; to render the page on the server using the value of the URL parameter. This prevents visitors to your page from seeing a flash of undefined content or having to show a loading state as the parameter is read by the browser. &lt;a href="https://nextjs.org/docs/basic-features/data-fetching#getserversideprops-server-side-rendering"&gt;Read more about getServerSideProps() on the Next.js documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Add the following &lt;code&gt;getServersideProps()&lt;/code&gt; function to the bottom of your index.js file. This function will be called with a context object, from which we can destructure the query parameters. We’ll display the &lt;code&gt;name&lt;/code&gt; query parameter on the ticket, and we’ll use the &lt;code&gt;isShared&lt;/code&gt; parameter to configure how the page looks depending on whether the page has been visited by the ticket holder, or shared and visited via social media.&lt;/p&gt;

&lt;p&gt;Next, configure the Index component to take in the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;isShared&lt;/code&gt; props.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* We'll write some functions here! */&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isShared&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* We'll configure the event data here! */&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="cm"&gt;/* … */&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;shared&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isShared&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;shared&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// return the properties so they are available in the `Index` component&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;decodeURI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;isShared&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let’s set up a few event variables to reuse in a few places to avoid lots of copying and pasting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configure-your-event-details"&gt;
  &lt;/a&gt;
  Configure your event details
&lt;/h3&gt;

&lt;p&gt;Set up the following variables inside your Index component: &lt;code&gt;eventName&lt;/code&gt;, &lt;code&gt;ticketAppUrl&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt;. We’ll use these values later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* We'll write some functions here! */&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isShared&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* Event info config */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eventName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My awesome event&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ticketAppUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://my-awesome-ticket-app.dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;decodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt; is Going! | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`Join &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; at &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. Grab your free ticket on &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ticketAppUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#optional-generate-a-ticket-number-if-you-dont-have-one"&gt;
  &lt;/a&gt;
  Optional: generate a ticket number (if you don’t have one)
&lt;/h3&gt;

&lt;p&gt;I didn’t have access to legitimate ticket numbers for the Fast Forward 2021 event, but I still wanted to include a unique-ish ticket number in the design to make the personalized tickets look more official. The code in the final implementation generates a number from any given string, and the return value is prefixed with 000. Each unique string produces a unique number — the only caveat to this method being that if more than one person named “whitep4nth3r” receives a ticket to Fast Forward, then their ticket numbers will be the same. You get the gist. 🙈 &lt;/p&gt;

&lt;p&gt;For the purposes of this tutorial, we can use &lt;code&gt;Math.random()&lt;/code&gt; to generate a ticket number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isShared&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* Event info config... */&lt;/span&gt;

  &lt;span class="cm"&gt;/* Generate a fake ticket number */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ticketNo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`000&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we’ve configured the data, we need to personalize the image using Cloudinary. Let’s get to the fun stuff!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#personalize-your-cloudinary-image"&gt;
  &lt;/a&gt;
  Personalize your Cloudinary image
&lt;/h2&gt;

&lt;p&gt;The Cloudinary API lets you make all sorts of image customizations via URL parameters. As an example, here’s the URL generated for my own Fast Forward ticket. Cloudinary accepts an image URL (&lt;code&gt;fastforward2021.png&lt;/code&gt;) with prepended parameters separated by commas.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://res.cloudinary.com/devrelcontentful/image/upload/w_831,h_466,c_fill,q_auto,f_auto,r_20/w_760,c_fit,co_rgb:ffffff,g_south_west,x_46,y_239,l_text:avenirdemi.otf_48:whitep4nth3r/w_760,c_fit,co_rgb:2a3039,a_90,g_north_east,x_84,y_100,l_text:avenirreg.otf_16:NO./w_760,c_fit,co_rgb:2a3039,a_90,g_north_east,x_55,y_140,l_text:avenirreg.otf_56:0007964/fastforward2021.png
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The URL is built up of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cloudinary base URL — &lt;strong&gt;&lt;a href="https://res.cloudinary.com"&gt;https://res.cloudinary.com&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Cloudinary cloud name — &lt;strong&gt;devrelcontentful&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Asset type — &lt;strong&gt;image/upload&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Width — &lt;strong&gt;w_831&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Height — &lt;strong&gt;h_466&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Crop mode — &lt;strong&gt;c_fill&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Automatic asset format selection for best browser experience — &lt;strong&gt;f_auto&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Rounded corners of 20px — &lt;strong&gt;r_20&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Text area width of 760px — &lt;strong&gt;w_760&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Name text area crop mode — &lt;strong&gt;c_fit&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Name text color (as a hex code without the #) — &lt;strong&gt;ffffff&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Name text gravity — &lt;strong&gt;g_south_west&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Name text position coordinates — &lt;strong&gt;x_46,y_239&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Name font and size — &lt;strong&gt;l_text:avenirdemi.otf_48&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Name text value — &lt;strong&gt;:whitep4nth3r&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;The same is repeated for the ticket number text&lt;/li&gt;
&lt;li&gt;Finally, the URL ends with the name of the image as stored in Cloudinary — &lt;strong&gt;fastforward2021.png&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s take a look at some JavaScript code used to generate a URL like this. At first glance, it might look overwhelming. But, once you understand how it all pieces together, you’ll want to personalize images at every opportunity! Big thanks to Jason Lengstorf for &lt;a href="https://github.com/jlengstorf/get-share-image"&gt;this repository&lt;/a&gt;, which provided some inspiration and insight to some common gotchas when working with Cloudinary URLs. &lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;generateImageUrl()&lt;/code&gt; below takes a number of required and optional parameters to build up a Cloudinary image URL like we explored above, to generate a personalized image. Depending on your image and how you want it personalized, you’ll want to play around with the default input parameters of &lt;code&gt;generateImageUrl()&lt;/code&gt;, most notably the offset values, colors, font sizes and gravity values. Note that I’ve used the font “Arial” instead of the custom font used in the URL above.&lt;/p&gt;

&lt;p&gt;For more information on how to configure these values, refer to the &lt;a href="https://cloudinary.com/documentation/image_transformations"&gt;Cloudinary image transformations documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, add an &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt; tag to your Index component and add the &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;alt&lt;/code&gt; attributes to render your personalized image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* Encode characters for Cloudinary URL */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cleanText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/%&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;23|2C|2F|3F|5C&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%25$1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* CONFIG vars */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CLOUD_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;the-claw&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;IMG_WIDTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;831&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;IMG_HEIGHT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;466&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* Build the Cloudinary Image URL */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateImageUrl&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ticketNo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;imagePublicID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;cloudinaryUrlBase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://res.cloudinary.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;imageWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;IMG_WIDTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;imageHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;IMG_HEIGHT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;textAreaWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;760&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="nx"&gt;ticketNoFont&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Arial&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ticketNoGravity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;north_east&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ticketNoLeftOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ticketNoTopOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;140&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ticketNoColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2a3039&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ticketNoFontSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="nx"&gt;noFont&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Arial&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;noGravity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;north_east&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;noLeftOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;noTopOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;noColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2a3039&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;noFontSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="nx"&gt;nameFont&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Arial&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;nameGravity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;south_west&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;nameBottomOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;239&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;nameLeftOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;nameColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ffffff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;nameFontSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// configure social media image dimensions, quality, and format&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imageConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;`w_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;imageWidth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`h_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;imageHeight&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c_fill&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;q_auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;f_auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;r_20&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// configure the name text&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nameConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;`w_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;textAreaWidth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c_fit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`co_rgb:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;nameColor&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;textColor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`g_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;nameGravity&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`x_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;nameLeftOffset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`y_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;nameBottomOffset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`l_text:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;nameFont&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;nameFontSize&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;cleanText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;//configure the "NO." text&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;noConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s2"&gt;`w_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;textAreaWidth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c_fit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;`co_rgb:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;noColor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;`a_90`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;`g_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;noGravity&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;`x_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;noLeftOffset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;`y_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;noTopOffset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;`l_text:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;noFont&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;noFontSize&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:NO.`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;// configure the ticketNo text&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ticketNoConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ticketNo&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;`w_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;textAreaWidth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c_fit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;`co_rgb:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ticketNoColor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;`a_90`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;`g_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ticketNoGravity&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;`x_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ticketNoLeftOffset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;`y_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ticketNoTopOffset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;`l_text:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ticketNoFont&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ticketNoFontSize&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;cleanText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ticketNo&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// combine all the pieces required to generate a Cloudinary URL&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;urlParts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;cloudinaryUrlBase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;CLOUD_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;upload&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;imageConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;nameConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;noConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;ticketNoConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;imagePublicID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;// remove any falsy sections of the URL (e.g. an undefined version)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validParts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;urlParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// join all the parts into a valid URL to the generated image&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;validParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isShared&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* Event info config... */&lt;/span&gt;
  &lt;span class="cm"&gt;/* Generate a fake ticket number... */&lt;/span&gt;

  &lt;span class="cm"&gt;/* Build the Cloudinary image URL */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imageUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateImageUrl&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;ticketNo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ticketNo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;imagePublicID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ticket_template.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* … */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My ticket&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;imageUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Woo! We’ve got a personalized image via the Cloudinary API as a URL! Next, let’s use this to show a preview of the ticket when attendees share your event on social media.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-open-graph-meta-for-social-sharing"&gt;
  &lt;/a&gt;
  Configure Open Graph meta for social sharing
&lt;/h2&gt;

&lt;p&gt;The power behind those ticket previews you see on Twitter and LinkedIn is all down to the magic of the &lt;a href="https://opengraphprotocol.org/"&gt;Open Graph protocol&lt;/a&gt;. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--c5sw6Syw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1354397337020473347/3wtvj84L_normal.jpg" alt="⚡️ Salma | whitep4nth3r profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        ⚡️ Salma | whitep4nth3r
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/whitep4nth3r"&gt;@whitep4nth3r&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I just got my ticket to &lt;a href="https://twitter.com/hashtag/fastforward2021"&gt;#fastforward2021&lt;/a&gt;!&lt;br&gt;&lt;br&gt;Grab your free ticket and join me and other builders creating the next generation of digital experiences. &lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/ITrWezZZpG"&gt;tickets.contentful.com/fastforward202…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      10:34 AM - 04 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1422868499421085699" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1422868499421085699" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1422868499421085699" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Click on the Tweet above to show the Open Graph preview in action!&lt;/p&gt;

&lt;p&gt;The Open Graph (OG) protocol was created at Facebook in 2010 to enable web page links to become rich objects with similar functionality and appearance to other content posted on Facebook. &lt;/p&gt;

&lt;p&gt;Open Graph meta tags are used in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of an HTML page to expose information about web pages to social media platforms and other applications that unfurl URL metadata. OG meta tags are identified in the HTML by an attribute prefixed with &lt;code&gt;og&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https://example.com/image.png"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OG meta tags can also be used to customize the appearance of your web pages according to the platform it’s shared on. For example, Twitter rolled out their own custom implementation of this, built on the OG protocol, and the following code tells Twitter to show the large image web page previews.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:card"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"summary_large_image"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt;
    &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:image"&lt;/span&gt;
    &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https://example.com/image.png"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Next Head component — imported at the top of the file and rendered inside the Index component — will add the meta tags we define inside it to the head of the resulting HTML page. &lt;/p&gt;

&lt;p&gt;Define an &lt;code&gt;ogUrl&lt;/code&gt; variable above the return statement of the Index component as &lt;code&gt;${ticketAppUrl}?name=${name}&amp;amp;shared=true&lt;/code&gt;. Notice that we’re adding a second URL parameter onto the end of the URL — &lt;code&gt;shared&lt;/code&gt; — which we configured in &lt;code&gt;getSeverSideProps()&lt;/code&gt; earlier. This will become important in the next couple of steps.&lt;/p&gt;

&lt;p&gt;Add the relevant OG meta tags inside the Next Head component tags to enable a fancy image preview with a title and description to show on Twitter and LinkedIn. You’ll notice we’re making good use of those event configuration variables we defined earlier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* ... */&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isShared&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* Event info config... */&lt;/span&gt;
  &lt;span class="cm"&gt;/* Generate a fake ticket number... */&lt;/span&gt;
  &lt;span class="cm"&gt;/* Build the Cloudinary image URL... */&lt;/span&gt;

  &lt;span class="cm"&gt;/* Configure Open Graph URL */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ogUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ticketAppUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?name=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;shared=true`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/title&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;twitter:card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;summary_large_image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;twitter:site&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ticketAppUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;twitter:creator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@your_twitter_username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;og:url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ogUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;og:type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;website&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;og:title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;og:description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;og:locale&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;en_US&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;og:image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;imageUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;og:image:alt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;og:image:width&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;IMG_WIDTH&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;og:image:height&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;IMG_HEIGHT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;og:site_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="cm"&gt;/* ... */&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let’s create those social share links for your attendees to generate some excitement for your event!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-twitter-and-linkedin-social-sharing-links"&gt;
  &lt;/a&gt;
  Add Twitter and LinkedIn social sharing links
&lt;/h2&gt;

&lt;p&gt;This is where all of the magic we conjured above comes together. We’re going to build a Twitter Web Intent URL and LinkedIn share URL that,  &lt;strong&gt;when your website is live (and this is the important part!)&lt;/strong&gt;, will pull in the image you personalized via Cloudinary via the Open Graph &lt;code&gt;og:image&lt;/code&gt; meta tag in your HTML &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The code below shows examples of how to create Twitter and LinkedIn share URLs. Things to bear in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you want to use line breaks (&lt;code&gt;/n&lt;/code&gt;) in your tweet, make sure you wrap your tweet text in &lt;code&gt;encodeURIComponent()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Ensure you include &lt;code&gt;&amp;amp;shared=true&lt;/code&gt; on your share URLs — you’ll see why in the next step!&lt;/li&gt;
&lt;li&gt;Make sure to convert all equals (=) symbols in the LinkedIn share URL to the HTML character code &lt;code&gt;%3D&lt;/code&gt; — otherwise the link won’t work correctly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, add anchor links to the Index component below the image tag, with your configured Twitter and LinkedIn share URLs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* ... */&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isShared&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* Event info config... */&lt;/span&gt;
  &lt;span class="cm"&gt;/* Generate a fake ticket number... */&lt;/span&gt;
  &lt;span class="cm"&gt;/* Build the Cloudinary image URL... */&lt;/span&gt;
  &lt;span class="cm"&gt;/* Configure Open Graph URL... */&lt;/span&gt;

  &lt;span class="cm"&gt;/* Twitter Config */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tweetText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I just got my ticket to an awesome event!&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;Grab your free ticket and join me!&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;twitterShareUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ticketAppUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?name=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;shared=true`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;twitterShareHref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://twitter.com/intent/tweet?url=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;twitterShareUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;text=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;tweetText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="cm"&gt;/* LinkedIn Config */&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;linkedInShareUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ticketAppUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?name%3D&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;shared%3Dtrue`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;linkedInShareHref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://www.linkedin.com/sharing/share-offsite/?url=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;linkedInShareUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My ticket&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;imageUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;twitterShareHref&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_blank&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;noreferrer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Share&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;Twitter&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;linkedInShareHref&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_blank&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;noreferrer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Share&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;LinkedIn&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There’s just one more step. Finally, let’s configure the web page for visitors to your site who clicked on a link from social media.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-your-web-page-for-social-clicks"&gt;
  &lt;/a&gt;
  Configure your web page for social clicks
&lt;/h2&gt;

&lt;p&gt;Remember the &lt;code&gt;isShared&lt;/code&gt; prop we captured in &lt;code&gt;getServerSideProps()&lt;/code&gt;? Here’s where it comes into play.&lt;/p&gt;

&lt;p&gt;Compare my Fast Forward ticket confirmation URL with the link shared on Twitter below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-ticket-confirmation"&gt;
  &lt;/a&gt;
  My ticket confirmation
&lt;/h3&gt;

&lt;p&gt;This is the full URL with a name parameter only: &lt;a href="https://tickets.contentful.com/fastforward2021?name=Salma"&gt;https://tickets.contentful.com/fastforward2021?name=Salma&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1-_Q3ahr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4urz9t4ux59z3utbqgd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1-_Q3ahr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4urz9t4ux59z3utbqgd.png" alt="A screenshot of my Fast Forward ticket confirmation with the headline &amp;quot;You're in!&amp;quot; and sharing CTAs to Twitter and LinkedIn, and an add to calendar button."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-people-see-when-they-click-on-the-link-in-my-tweet"&gt;
  &lt;/a&gt;
  What people see when they click on the link in my tweet
&lt;/h3&gt;

&lt;p&gt;This is the full URL with a &lt;code&gt;name&lt;/code&gt; parameter and &lt;code&gt;shared&lt;/code&gt; parameter: &lt;a href="https://tickets.contentful.com/fastforward2021?name=Salma&amp;amp;shared=true"&gt;https://tickets.contentful.com/fastforward2021?name=Salma&amp;amp;shared=true&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WLQUBdFV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3z8opf9jdohibeznosg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WLQUBdFV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3z8opf9jdohibeznosg.png" alt='A screenshot from the Fast Forward ticket website with the text "Salma is going!", a personalised ticket image, and a sign up CTA.'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use the code below to configure a different headline and subtitle depending on the value of the &lt;code&gt;isShared&lt;/code&gt; parameter received by the Index component. Furthermore, non-attendees of the event see a call to action to sign up for the event, rather than sharing it on social media.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* ... */&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isShared&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* ... */&lt;/span&gt;

  &lt;span class="cm"&gt;/* Page text config */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isShared&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is going!`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You're in!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subtitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isShared&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`Don't miss out! Sign up to register and join &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; at &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Add the event to your calendar and invite your friends to join you at &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;headline&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;subtitle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isShared&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://my-awesome-ticket-app.dev/sign-up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Sign&lt;/span&gt; &lt;span class="nx"&gt;up&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isShared&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;twitterShareHref&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_blank&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;noreferrer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nx"&gt;Share&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;Twitter&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;linkedInShareHref&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_blank&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;noreferrer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nx"&gt;Share&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;LinkedIn&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)}&lt;/span&gt;

      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#thats-a-wrap"&gt;
  &lt;/a&gt;
  That’s a wrap!
&lt;/h2&gt;

&lt;p&gt;Don’t forget — if you want to make sure your Open Graph images work as expected — you’ll need to deploy your application to a live URL. Vercel makes it really easy to go live with your Next.js application in just a few seconds. &lt;a href="https://vercel.com/signup"&gt;Sign up to Vercel&lt;/a&gt; and connect your project via GitHub — and you’re away! &lt;/p&gt;

&lt;p&gt;Cloudinary is pretty magical, and I can’t wait to explore its possibilities even further. What’s more, I’m excited to build similar apps in the future for different events I might run for my Discord and streaming community. If you’d like to explore the code demonstrated in this post, &lt;a href="https://github.com/whitep4nth3r/ticket-app-demo"&gt;check out the GitHub repository&lt;/a&gt; here (it contains zero CSS so go wild with your designs!).&lt;/p&gt;

&lt;p&gt;And lastly, make sure to sign up to &lt;a href="https://www.contentful.com/fast-forward"&gt;Fast Forward 2021&lt;/a&gt; to receive your free ticket! We’ve got three days of events dedicated to those building the next generation of digital experiences, from developers to architects, engineers, creatives and technology enthusiasts alike. Don’t forget to share your ticket on social media — it’ll be even more fun now you know how it works! 😉&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>Deploy Docker Containers on Amazon ECS</title>
      <author>Bacancy Technology</author>
      <pubDate>Thu, 09 Sep 2021 05:53:00 +0000</pubDate>
      <link>https://dev.to/bacancy_technology/deploy-docker-containers-on-amazon-ecs-1558</link>
      <guid>https://dev.to/bacancy_technology/deploy-docker-containers-on-amazon-ecs-1558</guid>
      <description>&lt;p&gt;Hello, Are you looking to deploy Docker containers on Amazon ECS and facing the issues? If Yes, we are here to help you with a wonderful AWS ECS Tutorial. &lt;/p&gt;

&lt;p&gt;Let's have a look at a small introduction about Docker and Amazon ECS, as if you are not that familiar with it, read the step-by-step guidance of deploying Docker containers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Amazon ECS?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Elastic Container is an AWS cloud service that is used for managing the containers. It allows developers to run their application on the cloud without configuring an environment to run the code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here are few advantages of Amazon ECS&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cost-efficient&lt;/li&gt;
&lt;li&gt;Extensible&lt;/li&gt;
&lt;li&gt;Improved Security&lt;/li&gt;
&lt;li&gt;Improved compatibility&lt;/li&gt;
&lt;li&gt;Easily Scalable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What is Docker?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With the help of Docker, developers can develop the applications based on small and lightweight containers. Docker shares the kernel OS but still runs isolated. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feature of Docker:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Isolated Application&lt;/li&gt;
&lt;li&gt;High Scalability and efficiency&lt;/li&gt;
&lt;li&gt;Reusable data volume&lt;/li&gt;
&lt;li&gt;Short boot-up time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Steps to deploy Docker containers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1) Login into AWS management console and Go to ECS service&lt;br&gt;
2) Click on Get Started Button.&lt;br&gt;
3) Select the Container definition which you want to deploy and click on the Next button.&lt;br&gt;
4) Select Application Load Balancer if you want a load balancer; otherwise, select None and click Next Button. &lt;br&gt;
5) Enter your cluster name and click on Next.&lt;br&gt;
6) Review all the details of the cluster and click on the Create button.&lt;br&gt;
7) Your cluster will be created. Click the View Service button to view your cluster.&lt;br&gt;
8) Go to Task and click on Task ID.&lt;br&gt;
9) Copy Public IP and Paste in the browser to run your Nginx application.&lt;/p&gt;

&lt;p&gt;We also share the technical or coding aspects of the tutorial in our article, if you want to express more about &lt;a href="https://www.bacancytechnology.com/blog/deploy-docker-containers-on-amazon-ecs/"&gt;Deploy Docker Containers on Amazon ECS&lt;/a&gt;, here our original article.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>ecs</category>
      <category>docker</category>
      <category>deploy</category>
    </item>
    <item>
      <title>Div in Center using only 2 lines of  CSS code |  part-2</title>
      <author>Shubham Jadhav</author>
      <pubDate>Thu, 09 Sep 2021 05:52:12 +0000</pubDate>
      <link>https://dev.to/dev_shubham/div-in-center-using-only-2-lines-of-css-code-part-2-5hd0</link>
      <guid>https://dev.to/dev_shubham/div-in-center-using-only-2-lines-of-css-code-part-2-5hd0</guid>
      <description>&lt;p&gt;Hello, Coders... &lt;br&gt;
  Today, I am showing you how to put an empty div in center in just Two lines of css code. &lt;br&gt;
  So, let's begin our second part of this series. Let's build... &lt;/p&gt;

&lt;p&gt;As always we need a code editor ,a html file and css file. &lt;/p&gt;

&lt;p&gt;First we make a empty div and give a 'box' as class name. As following &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4LetUp5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qegvk4nkn3wrnnhjt3ms.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4LetUp5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qegvk4nkn3wrnnhjt3ms.jpg" alt="empty div code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, make a div visible by add following code in our css file. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6n2pPsY6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qo7c7be1v64fvm5jr6v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6n2pPsY6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qo7c7be1v64fvm5jr6v.jpg" alt="box css code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now add two magical code to put our div in center of page. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iKe-oNEl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qw37rdn6loymdn2vguh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iKe-oNEl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qw37rdn6loymdn2vguh.jpg" alt="magical code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I put this code in body tag but you can add any other parent element. &lt;/p&gt;

&lt;p&gt;👉 Hope you guys this code is &lt;br&gt;
   helpful for you,and please &lt;br&gt;
   like and give some feedback &lt;br&gt;
   for more improvement. &lt;br&gt;
🙏 Thank you for reading...&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Descriptive Statistics Part 1</title>
      <author>Ambarish Ganguly</author>
      <pubDate>Thu, 09 Sep 2021 04:58:54 +0000</pubDate>
      <link>https://dev.to/ambarishg/descriptive-statistics-part-1-3pke</link>
      <guid>https://dev.to/ambarishg/descriptive-statistics-part-1-3pke</guid>
      <description>&lt;p&gt;This is the 1st video in the Descriptive Statistics playlist. This is an introduction to Descriptive Statistics in a very simple manner.We will discuss the following&lt;br&gt;
💎 Mean , Median , Mode&lt;br&gt;&lt;br&gt;
💎 Variance and Standard Deviation&lt;br&gt;&lt;br&gt;
💎 Covariance and Correlation &lt;/p&gt;

&lt;p&gt;I enjoyed creating this video and hope all of you will like it.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2rk-dpfOGTU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
    </item>
    <item>
      <title>补充一个对象数组去重</title>
      <author>打coding的奥特曼</author>
      <pubDate>Thu, 09 Sep 2021 04:27:17 +0000</pubDate>
      <link>https://dev.to/kongfuboy123/-k1j</link>
      <guid>https://dev.to/kongfuboy123/-k1j</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const _ = require('lodash') ;
const arr = [{a:1},{b:1},{c:1},{c:1},{e:1},{a:1}];
const res = _.uniqWith(arr,_.isEqual);
console.log(res);//[ { a: 1 }, { b: 1 }, { c: 1 }, { e: 1 } ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>Django REST Framework and DataTable Tutorial</title>
      <author>Kostja</author>
      <pubDate>Thu, 09 Sep 2021 04:15:21 +0000</pubDate>
      <link>https://dev.to/kostjapalovic/django-rest-framework-and-datatable-tutorial-1n5a</link>
      <guid>https://dev.to/kostjapalovic/django-rest-framework-and-datatable-tutorial-1n5a</guid>
      <description>&lt;p&gt;In this tutorial we are going to build API as a data source for a DataTable jQuery plugin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;There is this awesome plugin I have used recently for displaying and sorting data &lt;a href="https://datatables.net"&gt;https://datatables.net&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is very easy to start using.&lt;/p&gt;

&lt;p&gt;You just make an HTML table, add a loop in Django template to display contents of table and then initialize this table with a JavaScript call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;table id="myDataTable"&amp;gt;
... table contents
&amp;lt;/table&amp;gt;

&amp;lt;script&amp;gt;
$(document).ready( function () {
    $('#myDataTable').DataTable();
} );
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sounds fun and easy until you need to display a lot of data.&lt;/p&gt;

&lt;p&gt;At the point where there are at least a thousand rows the size of the page will be huge, it will take a very long time and resources (CPU/RAM) to generate that page. Also page load time will be long killing user experience.&lt;/p&gt;

&lt;p&gt;Thankfully, there is a solution to this problem.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ServerSide&lt;/code&gt; mode for DataTable.&lt;/p&gt;

&lt;p&gt;From DataTables documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Server-side processing&lt;/p&gt;

&lt;p&gt;There are times when reading data from the DOM is simply too slow or unwieldy, particularly when dealing with many thousands or millions of data rows. To address this DataTables' server-side processing feature provides a method to let all the "heavy lifting" be done by a database engine on the server-side (they are after all highly optimised for exactly this use case!), and then have that information drawn in the user's web-browser. Consequently, you can display tables consisting of millions of rows with ease.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://datatables.net/manual/server-side"&gt;https://datatables.net/manual/server-side&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this article I want to show how to build the Django API with Django REST Framework that can be used as source for Datatables.&lt;/p&gt;

&lt;p&gt;For this tutorial I will make a new repository from our Djangitos template and cloning it to my machine.&lt;/p&gt;

&lt;p&gt;Go to Djangitos GitHub repository &lt;a href="https://github.com/appliku/djangitos"&gt;https://github.com/appliku/djangitos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click button "Use this template"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g2e93yWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_2xu7M4x.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g2e93yWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_2xu7M4x.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Give a name to the new repository and click the "Create repository from template" button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---TQo2Z3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_2AnFGNf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---TQo2Z3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_2AnFGNf.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When new repository is ready, copy the path and use it to clone repo on your machine with &lt;code&gt;git clone&lt;/code&gt;, in this case &lt;code&gt;git clone git@github.com:appliku/tutorial_jquery_datatable_api.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GNjXO50Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_ITUPrbZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GNjXO50Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_ITUPrbZ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Switch to directory of the project with &lt;code&gt;cd tutorial_jquery_datatable_api&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pY3X0Tk7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_v8Yemws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pY3X0Tk7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_v8Yemws.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create an &lt;code&gt;.env&lt;/code&gt; file with the following contents:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DATABASE_URL=postgresql://djangito:djangito@db/djangito
REDIS_URL=redis://redis/0
DJANGO_SECRET_KEY=123
DJANGO_DEBUG=True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is needed in order to run our project with docker-compose.&lt;/p&gt;

&lt;p&gt;Now you can open your editor or IDE, for pycharm on mac you can type &lt;code&gt;open -a pycharm .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now let's create an django application where we will put models, views and templates for this tutorial.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose run web python manage.py startapp datatable
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a directory in the root of our project &lt;code&gt;datatable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gp4WSn9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_MxA2Qmk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gp4WSn9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_MxA2Qmk.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's add the app to &lt;code&gt;INSTALLED_APPS&lt;/code&gt; setting, so Django recognizes it.&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;djangito/settings.py&lt;/code&gt; and add &lt;code&gt;'datatable'&lt;/code&gt; to &lt;code&gt;PROJECT_APPS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pehqtJI6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_XdW28TM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pehqtJI6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_XdW28TM.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-models"&gt;
  &lt;/a&gt;
  Create models
&lt;/h2&gt;

&lt;p&gt;I want to make this tutorial complex enough so there is chance to illustrate where can be performance issues and how to solve them and generally have a chance to talk about adjacent topics.&lt;/p&gt;

&lt;p&gt;As an example we'll use an imaginary service company that does certain work for clients.&lt;/p&gt;

&lt;p&gt;They need to track statuses of their work orders, what should be done and who are their clients.&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;datatable/models.py&lt;/code&gt;. Put these models in this file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
from django.db import models

from datatable.tuples import ORDER_STATUSES


class Client(models.Model):
    name = models.CharField(max_length=255)
    phone = models.CharField(max_length=255)
    email = models.EmailField()

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "Client"
        verbose_name_plural = "Clients"
        ordering = ('name',)


class Order(models.Model):
    STATUS_CHOICES = (
        (ORDER_STATUSES.proposal, 'Proposal'),
        (ORDER_STATUSES.in_progress, 'In Progress'),
        (ORDER_STATUSES.done, 'Done'),
        (ORDER_STATUSES.rejected, 'Rejected'),
    )
    name = models.CharField(max_length=255)
    client = models.ForeignKey(Client, on_delete=models.CASCADE)
    address = models.CharField(max_length=255)
    state = models.CharField(max_length=255)
    zip_code = models.CharField(max_length=10)
    status = models.IntegerField(choices=STATUS_CHOICES, default=ORDER_STATUSES.proposal)
    date_start = models.DateField()
    date_end = models.DateField()

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "Order"
        verbose_name_plural = "Orders"
        ordering = ('date_end',)


class OrderLine(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE)
    name = models.CharField(max_length=255, )
    description = models.TextField()
    unit_price = models.DecimalField(max_digits=10, decimal_places=2)
    quantity = models.IntegerField()

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "Order Line"
        verbose_name_plural = "Order Lines"
        ordering = ('name',)


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Edit &lt;code&gt;datatable/admin.py&lt;/code&gt; to register our models in Django Admin:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.contrib import admin
from datatable.models import Order, OrderLine, Client

admin.site.register(Order)
admin.site.register(OrderLine)
admin.site.register(Client)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For statuses we'll use &lt;code&gt;namedtuple&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create a file &lt;code&gt;datatable/tuples.py&lt;/code&gt; with this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from collections import namedtuple

ORDER_STATUSES = namedtuple('ORDER_STATUSES', 'proposal in_progress done rejected')._make(range(4))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Namedtuples are great for preventing errors and also provides code completion in IDE.&lt;/p&gt;

&lt;p&gt;Now let's make migrations for these models. Run this command in the root of your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose run web python manage.py makemigrations
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's the output you should expect:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PtBJHAnp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_KbETsDA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PtBJHAnp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_KbETsDA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's apply migrations, in order to do that, run the &lt;code&gt;migrate&lt;/code&gt; management command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose run web python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also we need a superuser. Let's create one.&lt;/p&gt;

&lt;p&gt;Appliku Djangitos template comes with a simplified way to create superuser, the management command called &lt;code&gt;makesuperuser&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose run web python manage.py makesuperuser
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will generate a super user with email/username &lt;a href="mailto:admin@example.com"&gt;admin@example.com&lt;/a&gt; and a random password.&lt;/p&gt;

&lt;p&gt;Find the password in the output of this command, we'll need it in a few moments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/tutorial_jquery_datatable_api % docker-compose run web python manage.py makesuperuser
Creating tutorial_jquery_datatable_api_web_run ... done
Using selector: EpollSelector
admin user not found, creating one
===================================
A superuser was created with email admin@example.com and password NDTbnmPuyieX
===================================
admin@example.com
src/tutorial_jquery_datatable_api %
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's start our project with this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you see this, then our app is running.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;web_1       | Watching for file changes with StatReloader
web_1       | Watching for file changes with StatReloader
web_1       | Performing system checks...
web_1       |
web_1       | System check identified no issues (0 silenced).
web_1       | April 30, 2021 - 07:27:51
web_1       | Django version 3.1.6, using settings 'djangito.settings'
web_1       | Starting development server at http://0.0.0.0:8060/
web_1       | Quit the server with CONTROL-C.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the app in your browser at &lt;a href="http://0.0.0.0:8060/admin/"&gt;http://0.0.0.0:8060/admin/&lt;/a&gt; and log in with &lt;code&gt;admin@example.com&lt;/code&gt; and the password that was generated for you my &lt;code&gt;makesuperuser&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;On the admin dashboard you can find our models.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--prqW3lPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_vn0EftL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--prqW3lPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_vn0EftL.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can go crazy now and create dozen orders with multiple line items so we have data to work with in the next steps.&lt;/p&gt;

&lt;p&gt;I recommend creating several different clients so we can test sorting and search features of datatable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qDCP9zJK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_237IuhU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qDCP9zJK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_237IuhU.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#datatable-with-server-rendered-table"&gt;
  &lt;/a&gt;
  Datatable with server rendered table
&lt;/h2&gt;

&lt;p&gt;For the purpose of illustration of what Datatable can do and comparison later let's first create a page where datatable works with server rendered table.&lt;/p&gt;

&lt;p&gt;Create a directory and a file &lt;code&gt;datatable/templates/base.html&lt;/code&gt; where we include all the common structure and resources for our views.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ryR333bR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_bJL7uxx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ryR333bR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_bJL7uxx.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;DataTable&amp;lt;/title&amp;gt;
    &amp;lt;link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6" crossorigin="anonymous"&amp;gt;
    &amp;lt;link rel="stylesheet" href="//cdn.datatables.net/1.10.24/css/jquery.dataTables.min.css"&amp;gt;
    {% block extra_head %}
    {% endblock %}
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
&amp;lt;div class="container mt-5"&amp;gt;
    {% block content %}

    {% endblock %}
&amp;lt;/div&amp;gt;
&amp;lt;script src="https://code.jquery.com/jquery-3.6.0.min.js"
        integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-JEW9xMcG8R+pH31jmWH6WWP0WintQrMb4s7ZOdauHnUtxwoG2vI5DkLtS3qm9Ekf"
        crossorigin="anonymous"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src="//cdn.datatables.net/1.10.24/js/jquery.dataTables.min.js"&amp;gt;&amp;lt;/script&amp;gt;
{% block extra_js %}
{% endblock %}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's make a template for our first view with static datatable. Let's call it &lt;code&gt;datatable_static.html&lt;/code&gt; and full path will be &lt;code&gt;datatable/template/datatable_static.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KnPdruD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_xqJTabN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnPdruD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_xqJTabN.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{% extends "datatable/base.html" %}

{% block content %}
    &amp;lt;table id="myStaticDatatable"&amp;gt;
        &amp;lt;thead&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;ID&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;ORDER&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;CLIENT&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;TOTAL&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;STATUS&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;
        &amp;lt;tbody&amp;gt;
        {% for order in order_list %}
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;{{ order.id }}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;
                    {{ order.name }}
                    &amp;lt;br&amp;gt;
                    {{ order.address }} {{ order.state }} {{ order.zip_code }}
                &amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;
                    {{ order.client.name }}
                    &amp;lt;br&amp;gt;{{ order.client.phone }}
                    {{ order.client.email }}
                &amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;{{ order.amount }}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;{{ order.get_status_display }}&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        {% endfor %}
        &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;
{% endblock %}


{% block extra_js %}
    &amp;lt;script&amp;gt;
        $(document).ready(function () {
            $('#myStaticDatatable').DataTable();
        });
    &amp;lt;/script&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the file &lt;code&gt;datatable/views.py&lt;/code&gt;, let's create our first view here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.db.models import Sum, F, DecimalField
from django.shortcuts import render

from datatable.models import Order


def datatable_static(request, *args, **kwargs):
    orders_qs = Order.objects.all().select_related('client').annotate(
        amount=Sum(
            F('orderline__unit_price') * F('orderline__quantity'),
            output_field=DecimalField())
    )
    return render(
        request=request,
        template_name="datatable/datatable_static.html",
        context={
            "order_list": orders_qs
        })


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create &lt;code&gt;datatable/urls.py&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.urls import path

from datatable.views import datatable_static

urlpatterns = [
    path('static', datatable_static, name='datatable_static'),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Edit project's &lt;code&gt;urls.py&lt;/code&gt;: &lt;code&gt;djangito/urls.py&lt;/code&gt;. Add a line to include our &lt;code&gt;datatable&lt;/code&gt; urls.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;path('datatable/', include('datatable.urls')),
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zLdicc56--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_YTqIsHF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zLdicc56--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_YTqIsHF.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now if we open our page at &lt;a href="http://0.0.0.0:8060/datatable/static"&gt;http://0.0.0.0:8060/datatable/static&lt;/a&gt; we'll see our table:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--thNv2inM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_0HbXfAP.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--thNv2inM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_0HbXfAP.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's summarise points you should pay attention to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We made a base template that includes all resources and for our view we made template that extends the base one&lt;/li&gt;
&lt;li&gt;We used &lt;code&gt;.annotate()&lt;/code&gt; to calculate total amount of order on the database level. If we'd do it on python level it would require fetching all OrderLines and calculating them and it will be a massive performance hit.&lt;/li&gt;
&lt;li&gt;Finally, we made an HTML table in our template, filled it with out data using for-loop and made it a datatable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let's make it not static, but server-rendered via API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#django-rest-framework-api-for-datatable"&gt;
  &lt;/a&gt;
  Django REST Framework API for Datatable
&lt;/h2&gt;

&lt;p&gt;To make our API we need another View, a line in urls.py and a serializer.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;datatable/serializers.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will create only one serializer, because we only need a flat object to display in datatable. We could use nested objects with datatable too, but I see no reason to make our code more complex.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from rest_framework import serializers

from datatable.models import Order


class OrderSerializer(serializers.ModelSerializer):
    amount = serializers.DecimalField(max_digits=10, decimal_places=2)
    client_name = serializers.ReadOnlyField(source='client.name')
    client_email = serializers.ReadOnlyField(source='client.email')
    client_phone = serializers.ReadOnlyField(source='client.phone')
    status = serializers.SerializerMethodField()

    class Meta:
        model = Order
        fields = (
            'id', 'name', 'address',
            'state', 'zip_code', 'status',
            'date_start', 'date_end',
            'client_name', 'client_phone', 'client_email', 'amount')

    def get_status(self, obj: Order):
        return obj.get_status_display()


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now add a new class based view to our &lt;code&gt;datatable/views.py&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;

class DataTableAPIView(ListAPIView):
    serializer_class = OrderSerializer

    def get_queryset(self):
        return Order.objects.all().select_related('client').annotate(
        amount=Sum(
            F('orderline__unit_price') * F('orderline__quantity'),
            output_field=DecimalField())
    )

    def filter_for_datatable(self, queryset):
        # filtering
        search_query = self.request.query_params.get('search[value]')
        if search_query:
            queryset = queryset.annotate(
                search=SearchVector(
                    'name',
                    'client__name',
                    'address', 'zip_code')
            ).filter(search=search_query)
        # ordering
        ordering_column = self.request.query_params.get('order[0][column]')
        ordering_direction = self.request.query_params.get('order[0][dir]')
        ordering = None
        if ordering_column == '0':
            ordering = 'id'
        if ordering_column == '1':
            ordering = 'name'
        if ordering and ordering_direction == 'desc':
            ordering = f"-{ordering}"
        if ordering:
            queryset = queryset.order_by(ordering)
        return queryset

    def list(self, request, *args, **kwargs):
        draw = request.query_params.get('draw')
        queryset = self.filter_queryset(self.get_queryset())
        recordsTotal = queryset.count()
        filtered_queryset = self.filter_for_datatable(queryset)
        try:
            start = int(request.query_params.get('start'))
        except ValueError:
            start = 0
        try:
            length = int(request.query_params.get('length'))
        except ValueError:
            length = 10
        end = length + start
        serializer = self.get_serializer(filtered_queryset[start:end], many=True)
        response = {
            'draw': draw,
            'recordsTotal': recordsTotal,
            'recordsFiltered': filtered_queryset.count(),
            'data': serializer.data
        }
        return Response(response)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add 2 more items to &lt;code&gt;datatable/urls.py&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    path('dynamic', TemplateView.as_view(template_name='datatable/datatable_dynamic.html'), name='datatable_dynamic'),
    path('data', DataTableAPIView.as_view(), name='datatable_data'),
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;dynamic&lt;/code&gt; refers to a generic &lt;code&gt;TemplateView&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt; refers to our class based view.&lt;/p&gt;

&lt;p&gt;Add the template for our dynamic table, &lt;code&gt;datatable/templates/datatable/datatable_dynamic.html&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{% extends "datatable/base.html" %}

{% block content %}
    &amp;lt;table id="myStaticDatatable"&amp;gt;
        &amp;lt;thead&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;ID&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;ORDER&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;CLIENT&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;TOTAL&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;STATUS&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;
        &amp;lt;tbody&amp;gt;

        &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;
{% endblock %}


{% block extra_js %}
    &amp;lt;script&amp;gt;
        let data_url = '{% url "datatable_data" %}';
        $(document).ready(function () {
            $('#myStaticDatatable').DataTable({
                'order': [[1, 'desc']],
                'processing': false,
                'serverSide': true,
                'ajax': {
                    url: data_url,
                    dataSrc: 'data'
                },
                columns: [
                    {
                        data: 'id',
                        orderable: true
                    },
                    {
                        data: null,
                        render: function (data, type, row) {
                            return `${row.name}&amp;lt;br&amp;gt;${row.address} ${row.state} ${row.zip_code}`;
                        },
                        orderable: true
                    },
                    {
                        data:null,
                        render: function (data, type, row){
                            return `${row.client_name}&amp;lt;br/&amp;gt;${row.client_phone}&amp;lt;br/&amp;gt;${row.client_email}`
                        },
                        orderable: false
                    },
                    {
                        data: 'amount',
                        orderable: false
                    },
                    {
                        data: 'status',
                        orderable: false
                    }

                ]
            });
        });
    &amp;lt;/script&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change from the static table template is that we removed data for-loop, added an URL to our API &lt;code&gt;data_url&lt;/code&gt; and initialized the table with more configuration options.&lt;/p&gt;

&lt;p&gt;Let's go over initialization of the datatable:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;order&lt;/code&gt; is default ordering for the table, it will be the second column, descending order.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;processing&lt;/code&gt; is disabled, I didn't want the "Processing" label to appear while table is loading. It just looks ugly.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;serverSide&lt;/code&gt; is what makes datatable rely on server to load results according to sorting, filtering, page&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ajax&lt;/code&gt; is an object that tells where our API resides. &lt;code&gt;ajax.url&lt;/code&gt; is the API endpoint URL and &lt;code&gt;data&lt;/code&gt; is object in endpoint response JSON that contains actual data&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;columns&lt;/code&gt; defines how to display data in columns from the JSON endpoint returns. The &lt;code&gt;data&lt;/code&gt; attribute tells to use a field from JSON for response. &lt;code&gt;render&lt;/code&gt; is a function to render the column cell and we use it to build a piece of HTML based on several fields of our JSON, &lt;code&gt;data&lt;/code&gt; should be &lt;code&gt;null&lt;/code&gt; in this case. &lt;code&gt;orderable&lt;/code&gt; when enabled allows user to sort by this column.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go to the page &lt;a href="http://0.0.0.0:8060/datatable/dynamic"&gt;http://0.0.0.0:8060/datatable/dynamic&lt;/a&gt; and see the table that works the same way as before, but it sources data from API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DKmSHop9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_U3Zr8oT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DKmSHop9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2352fi1ctpa7b.cloudfront.net/media/post_images/image_U3Zr8oT.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Full source of the project for this article can be found here: &lt;a href="https://github.com/appliku/tutorial_jquery_datatable_api"&gt;https://github.com/appliku/tutorial_jquery_datatable_api&lt;/a&gt;&lt;/p&gt;

</description>
      <category>django</category>
      <category>jquery</category>
    </item>
  </channel>
</rss>
