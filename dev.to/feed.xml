<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Building A New Programming Language In Ruby: The Interpreter</title>
      <author>Honeybadger Staff</author>
      <pubDate>Tue, 20 Jul 2021 22:18:44 +0000</pubDate>
      <link>https://dev.to/honeybadger/building-a-new-programming-language-in-ruby-the-interpreter-3ke4</link>
      <guid>https://dev.to/honeybadger/building-a-new-programming-language-in-ruby-the-interpreter-3ke4</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally written by &lt;a href="https://www.honeybadger.io/blog/building-interpreter-ruby/#authorDetails"&gt;Alex Braha Stoll&lt;/a&gt; on the &lt;a href="https://www.honeybadger.io/blog/building-interpreter-ruby/"&gt;Honeybadger Developer Blog&lt;/a&gt;.&lt;/em&gt;  &lt;/p&gt;

&lt;blockquote&gt;
&lt;h2&gt;
  &lt;a href="#full-source-on-github"&gt;
  &lt;/a&gt;
  Full Source on Github
&lt;/h2&gt;

&lt;p&gt;A complete implementation of the Stoffle programming language is available at &lt;a href="https://github.com/alexbrahastoll/stoffle"&gt;GitHub&lt;/a&gt;. Feel free to open an issue if you find bugs or have questions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this blog post, we're going to start implementing the interpreter for Stoffle, a toy programming language built entirely in Ruby. You can read more about this project in the &lt;a href="https://www.honeybadger.io/blog/stoffle-introduction/"&gt;first part of this series&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The interpreter we are going to build is commonly referred to as a tree-walk interpreter. In the previous post of this series, we built a parser to transform a flat sequence of tokens into a tree data structure (an abstract syntax tree, or AST for short). As you might be imagining, our interpreter has the job of going through the AST created by our parser and breathing life into a Stoffle program. I find this last step the most exciting one of this language implementation journey. When building the interpreter, everything finally clicks, and we are able to see Stoffle programs running for real!&lt;/p&gt;

&lt;p&gt;I'm going to show and explain the interpreter's implementation in two parts. In this first part, we are going to get the basics working: variables, conditionals, unary and binary operators, data types, and printing to the console. We are reserving the more meaty stuff (function definition, function calling, loops, etc.) for the second and last post on implementing our interpreter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-quick-recap-of-the-lexer-and-parser"&gt;
  &lt;/a&gt;
  A Quick Recap of the Lexer and Parser
&lt;/h2&gt;

&lt;p&gt;Before we dive in and start implementing the interpreter, let's quickly remind ourselves what we did in the previous posts of this series. First, we built the lexer, which transforms raw source code into tokens. Then, we implemented the parser, the component responsible for morphing tokens into a tree structure (the AST). To sum up, here are the transformations we have observed so far:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;State 0: Source&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my_var = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;State 1: Lexer transforms raw source code into tokens&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[:identifier, :'=', :number]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;State 2: Parser transforms tokens into an Abstract Syntax Tree&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RtmnrqNq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/building-interpreter-ruby/stoffle-ast-var-binding.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RtmnrqNq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/building-interpreter-ruby/stoffle-ast-var-binding.png" alt="The AST for a variable binding"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-all-about-walking"&gt;
  &lt;/a&gt;
  It's All About Walking
&lt;/h2&gt;

&lt;p&gt;Now that we have an AST, our job is to write code to walk this structure. We have to write Ruby code that can give life to what each node in our AST describes. If we have a node that describes a variable binding, for example, our task is to write Ruby code that is able to somehow store the result of the right-hand side of our variable binding expression and to have this storage space associated with (and accessible through) the name given to the variable.&lt;/p&gt;

&lt;p&gt;As we did in previous parts of this series, we are going to explore the implementation by going through all the important lines of code involved in handling an example program. The piece of Stoffle code we have to interpret is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;num = -2
if num &amp;gt; 0
  println("The number is greater than zero.")
else
  println("The number is less than or equal to zero.")
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the AST produced for the same program:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QDYvhwqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/building-interpreter-ruby/stoffle-ast-interpreter-part-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QDYvhwqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/building-interpreter-ruby/stoffle-ast-interpreter-part-1.png" alt="Sample Program's AST"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-first-step-in-our-walk"&gt;
  &lt;/a&gt;
  The First Step in Our Walk
&lt;/h2&gt;

&lt;p&gt;As you probably remember from the last post in this series, a Stoffle AST always has as its root an &lt;code&gt;AST::Program&lt;/code&gt; node. This root generally has multiple children. Some of them will be shallow (think of the AST produced for a simple variable assignment). Other children can be the root of quite deep subtrees (think of a loop with many lines inside its body). This is the Ruby code we need to start walking through the AST that was passed in to our interpreter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Stoffle&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Interpreter&lt;/span&gt;
    &lt;span class="nb"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:env&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;
      &lt;span class="vi"&gt;@output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
      &lt;span class="vi"&gt;@env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;interpret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@program&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;

      &lt;span class="n"&gt;interpret_nodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expressions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kp"&gt;private&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;interpret_nodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;last_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;

      &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;last_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;interpret_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="n"&gt;last_value&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;interpret_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;interpreter_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"interpret_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
      &lt;span class="nb"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;interpreter_method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;#...&lt;/span&gt;

  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When a new &lt;code&gt;Interpreter&lt;/code&gt; is instantiated, right from the get-go we create two instance variables: &lt;code&gt;@output&lt;/code&gt; and &lt;code&gt;@env&lt;/code&gt;. The former's responsibility is to store, in chronological sequence, everything our program has printed out. Having this information at hand is very useful when writing automated tests or debugging. The responsibility of &lt;code&gt;@env&lt;/code&gt; is a bit different. We named it as such as a reference to "environment". As the name may suggest, its function is to hold the state of our running program. One of its functions will be to implement the binding between an identifier (e.g., a variable name) and its current value.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;#interpret_nodes&lt;/code&gt; method loops through all the children of the root node (&lt;code&gt;AST::Program&lt;/code&gt;). Then, it calls &lt;code&gt;#interpret_node&lt;/code&gt; for each individual node.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#interpret_node&lt;/code&gt; is simple but nonetheless interesting. Here, we use a bit of Ruby metaprogramming to call the appropriate method for handling the node type currently at hand. For example, for an &lt;code&gt;AST::VarBinding&lt;/code&gt; node, the &lt;code&gt;#interpret_var_binding&lt;/code&gt; method is the one that gets called.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#invariably-we-have-to-talk-about-variables"&gt;
  &lt;/a&gt;
  Invariably, We Have to Talk About Variables
&lt;/h2&gt;

&lt;p&gt;The first node we have to interpret in the AST of the example program we are going through is an &lt;code&gt;AST::VarBinding&lt;/code&gt;. Its &lt;code&gt;@left&lt;/code&gt; is an &lt;code&gt;AST::Identifier&lt;/code&gt;, and its &lt;code&gt;@right&lt;/code&gt; is an &lt;code&gt;AST::UnaryOperator&lt;/code&gt;. Let's take a look at the method responsible for interpreting a variable binding:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;interpret_var_binding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var_binding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;var_binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;var_name_as_str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;interpret_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var_binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, it's pretty straightforward. We add (or overwrite) a key-value pair to the &lt;code&gt;@env&lt;/code&gt; Hash.&lt;/p&gt;

&lt;p&gt;The key is the name of the variable (&lt;code&gt;#var_name_as_str&lt;/code&gt; is just a helper method equivalent to &lt;code&gt;var_binding.left.name&lt;/code&gt;). At the moment, all variables are global. We will handle scoping in the next post.&lt;/p&gt;

&lt;p&gt;The value is the result of interpreting the expression on the right-hand side of the assignment. To do that, we use &lt;code&gt;#interpret_node&lt;/code&gt; again. Since we have an &lt;code&gt;AST::UnaryOperator&lt;/code&gt; on the right-hand side, the next method that gets called is &lt;code&gt;#interpret_unary_operator&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;interpret_unary_operator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unary_op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;unary_op&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;operator&lt;/span&gt;
  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:'-'&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;interpret_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unary_op&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;operand&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="c1"&gt;# :'!'&lt;/span&gt;
    &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;interpret_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unary_op&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;operand&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The semantics of Stoffle's supported unary operators (&lt;code&gt;-&lt;/code&gt; and &lt;code&gt;!&lt;/code&gt;) are the same as in Ruby. As a consequence, the implementation could not be simpler: we apply Ruby's &lt;code&gt;-&lt;/code&gt; operator to the result of interpreting the operand. The usual suspect, &lt;code&gt;#interpret_node&lt;/code&gt;, appears yet again here. As you may remember from the AST of our program, the operand for &lt;code&gt;-&lt;/code&gt; is an &lt;code&gt;AST::Number&lt;/code&gt; (the number &lt;code&gt;2&lt;/code&gt;). This means our next stop is at &lt;code&gt;#interpret_number&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;interpret_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The implementation of &lt;code&gt;#interpret_number&lt;/code&gt; is a piece of cake. Our decision to adopt a Ruby float as the representation of number literals (this happens in the lexer!) pays off here. The &lt;code&gt;@value&lt;/code&gt; of the &lt;code&gt;AST::Number&lt;/code&gt; node already holds our desired internal representation of numbers, so we just retrieve it.&lt;/p&gt;

&lt;p&gt;With that, we finish interpreting the first direct child of &lt;code&gt;AST::Program&lt;/code&gt;. Now, to conclude interpreting our program, we must handle its other, more hairy, child: a node of type &lt;code&gt;AST::Conditional&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#terms-and-conditions-may-apply"&gt;
  &lt;/a&gt;
  Terms and Conditions May Apply
&lt;/h2&gt;

&lt;p&gt;Back in &lt;code&gt;#interpret_nodes&lt;/code&gt;, our best friend &lt;code&gt;#interpret_node&lt;/code&gt; is called again to interpret the next direct child of &lt;code&gt;AST::Program&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;interpret_nodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;last_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;

  &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;last_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;interpret_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;last_value&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The method responsible for interpreting an &lt;code&gt;AST::Conditional&lt;/code&gt; is &lt;code&gt;#interpret_conditional&lt;/code&gt;. Before taking a look at it, however, let's refresh our memories by reviewing the implementation of &lt;code&gt;AST::Conditional&lt;/code&gt; itself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Stoffle::AST::Conditional&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Stoffle&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Expression&lt;/span&gt;
  &lt;span class="nb"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:condition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:when_true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:when_false&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cond_expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;true_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;false_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@condition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cond_expr&lt;/span&gt;
    &lt;span class="vi"&gt;@when_true&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;true_block&lt;/span&gt;
    &lt;span class="vi"&gt;@when_false&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;false_block&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;==&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;children&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;children&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;when_true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;when_false&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, so &lt;code&gt;@condition&lt;/code&gt; holds an expression that will either be truthy or falsey; &lt;code&gt;@when_true&lt;/code&gt; holds a block with one or more expressions to be executed in case the &lt;code&gt;@condition&lt;/code&gt; is truthy, and &lt;code&gt;@when_false&lt;/code&gt; (the &lt;code&gt;ELSE&lt;/code&gt; clause) holds the block to be run in case &lt;code&gt;@condition&lt;/code&gt; happens to be falsey.&lt;/p&gt;

&lt;p&gt;Now, let's take a look at &lt;code&gt;#interpret_condition&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;interpret_conditional&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conditional&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;evaluated_cond&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;interpret_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conditional&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# We could implement the line below in a shorter way, but better to be explicit about truthiness in Stoffle.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;evaluated_cond&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;evaluated_cond&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;conditional&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;when_false&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;nil?&lt;/span&gt;

    &lt;span class="n"&gt;interpret_nodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conditional&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;when_false&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expressions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;interpret_nodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conditional&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;when_true&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expressions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Truthiness in Stoffle is the same as in Ruby. In other words, in Stoffle, only &lt;code&gt;nil&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; are falsey. Any other input to a condition is truthy.&lt;/p&gt;

&lt;p&gt;We first evaluate the condition by interpreting the expression being held by &lt;code&gt;conditional.condition&lt;/code&gt;. Let's take a look at the AST of our program again to figure out what node we are dealing with:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QDYvhwqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/building-interpreter-ruby/stoffle-ast-interpreter-part-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QDYvhwqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/building-interpreter-ruby/stoffle-ast-interpreter-part-1.png" alt="Sample Program's AST"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It turns out that we have an &lt;code&gt;AST::BinaryOperator&lt;/code&gt; (the &lt;code&gt;&amp;gt;&lt;/code&gt; used in &lt;code&gt;num &amp;gt; 0&lt;/code&gt;). Okay, it’s the same path again: first &lt;code&gt;#interpret_node&lt;/code&gt;, which calls &lt;code&gt;#interpret_binary_operator&lt;/code&gt; this time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;interpret_binary_operator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;binary_op&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;operator&lt;/span&gt;
  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:and&lt;/span&gt;
    &lt;span class="n"&gt;interpret_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_op&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;interpret_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_op&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:or&lt;/span&gt;
    &lt;span class="n"&gt;interpret_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_op&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;interpret_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_op&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;interpret_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_op&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;left&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_op&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;interpret_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_op&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;right&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our logical operators (&lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt;) can be considered binary operators, so we handle them here as well. Since their semantic is equivalent to Ruby's &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt;, the implementation is plain sailing, as you can see above.&lt;/p&gt;

&lt;p&gt;Next is the section of the method we are most interested in; this section handles all other binary operators (including &lt;code&gt;&amp;gt;&lt;/code&gt;). Here, we can leverage Ruby's dynamism in our favor and come up with a very concise solution. In Ruby, binary operators are available as methods in the objects participating in an operation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;           &lt;span class="c1"&gt;# is equivalent to&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:'&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# this&lt;/span&gt;
&lt;span class="c1"&gt;# and the following line would be a general solution,&lt;/span&gt;
&lt;span class="c1"&gt;# very similar to what we have in the interpreter&lt;/span&gt;
&lt;span class="n"&gt;operand_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;operand_2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h2&gt;
  &lt;a href="#a-verbose-implementation-of-binary-operators"&gt;
  &lt;/a&gt;
  A Verbose Implementation of Binary Operators
&lt;/h2&gt;

&lt;p&gt;As you saw, our implementation of binary operators is very concise. If Ruby was not such a dynamic language, or the semantics of the operators were different between Ruby and Stoffle, we could not have coded the solution in this fashion.&lt;/p&gt;

&lt;p&gt;If you ever find yourself in such a position as a language designer/implementer, you can always fall back on a simple (but not that elegant) solution: using a switch construct. In our case, the implementation would look somewhat like this:&lt;/p&gt;


&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ... inside #interpret_binary_operator ...&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;binary_op&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;operator&lt;/span&gt;
&lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:'+'&lt;/span&gt;
  &lt;span class="n"&gt;interpret_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_op&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;interpret_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_op&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# ... other operators&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;Before going back to &lt;code&gt;#interpret_conditional&lt;/code&gt;, let's take a quick detour to make sure nothing is overlooked. If you remember the program we are interpreting, the &lt;code&gt;num&lt;/code&gt; variable is used in the comparison (using the binary operator &lt;code&gt;&amp;gt;&lt;/code&gt;) we just explored together. How did we retrieve the left operand (i.e., the value stored in the &lt;code&gt;num&lt;/code&gt; variable) of that comparison? The method responsible for that is &lt;code&gt;#interpret_identifier&lt;/code&gt;, and its implementation is easy-peasy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;interpret_identifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;has_key?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="c1"&gt;# Undefined variable.&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;Stoffle&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Runtime&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;UndefinedVariable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, back to &lt;code&gt;#interpret_conditional&lt;/code&gt;. In the case of our little program, the condition evaluated to a Ruby &lt;code&gt;false&lt;/code&gt; value. We use this value to determine whether we have to execute the IF or the ELSE branch of the conditional structure. We proceed to interpret the ELSE branch, whose associated block of code is stored in &lt;code&gt;conditional.when_false&lt;/code&gt;. Here, we have an &lt;code&gt;AST::Block&lt;/code&gt;, which is very similar to the root node of our AST (&lt;code&gt;AST::Program&lt;/code&gt;). The block, likewise, potentially has a bunch of expressions that need to be interpreted. For this purpose, we also use &lt;code&gt;#interpret_nodes&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;interpret_conditional&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conditional&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;evaluated_cond&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;interpret_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conditional&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# We could implement the line below in a shorter way, but better to be explicit about truthiness in Stoffle.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;evaluated_cond&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;evaluated_cond&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;conditional&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;when_false&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;nil?&lt;/span&gt;

    &lt;span class="n"&gt;interpret_nodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conditional&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;when_false&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expressions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;interpret_nodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conditional&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;when_true&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expressions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next AST node we have to handle is an &lt;code&gt;AST::FunctionCall&lt;/code&gt;. The method responsible for interpreting a function call is &lt;code&gt;#interpret_function_call&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;interpret_function_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn_call&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn_call&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we discussed in the beginning of the article, function definition and function calling will be covered in the next post in this series. Therefore, we are only implementing a special case of function calling. In our tiny toy language, we provide &lt;code&gt;println&lt;/code&gt; as part of the runtime and implement it directly in the interpreter here. It's a good enough solution, considering the objectives and scope of our project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn_call&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fn_call&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;function_name_as_str&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;'println'&lt;/span&gt;

  &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;interpret_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn_call&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;
  &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
  &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first and only argument of our &lt;code&gt;AST::FunctionCall&lt;/code&gt; is an &lt;code&gt;AST::String&lt;/code&gt;, which gets handled by &lt;code&gt;#interpret_string&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;interpret_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;#interpret_string&lt;/code&gt;, we have the exact same case of &lt;code&gt;#interpret_number&lt;/code&gt;. An &lt;code&gt;AST::String&lt;/code&gt; already holds a ready-to-use Ruby string value, so we just have to retrieve it.&lt;/p&gt;

&lt;p&gt;Now, back to &lt;code&gt;#println&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn_call&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fn_call&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;function_name_as_str&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;'println'&lt;/span&gt;

  &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;interpret_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn_call&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;
  &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
  &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After storing the function argument (converted to a Ruby string) in &lt;code&gt;result&lt;/code&gt;, we have two more steps to complete. First, we store what we are about to print to the console in &lt;code&gt;@output&lt;/code&gt;. As explained previously, the idea here is to be able to easily inspect what was printed (and in what order). Having this at hand makes our life easier when debugging or testing the interpreter. Finally, to implement printing something to the console, we use Ruby's &lt;code&gt;puts&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#execution-matters"&gt;
  &lt;/a&gt;
  Execution Matters
&lt;/h2&gt;

&lt;p&gt;Now that we have explored everything that is necessary to implement the bare-bones of Stoffle, let's create a very basic executable to see our interpreter in action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span class="nb"&gt;require_relative&lt;/span&gt; &lt;span class="s1"&gt;'../lib/stoffle'&lt;/span&gt;

&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;lexer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Stoffle&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Lexer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Stoffle&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lexer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start_tokenization&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;interpreter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Stoffle&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Interpreter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;

&lt;span class="n"&gt;interpreter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;interpret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP:&lt;/strong&gt; To use Stoffle's interpreter from anywhere, remember to add the executable to your PATH.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's finally time to run our program. If everything works well, we should see the string "The number is less than or equal to zero" printed to the console. This is exactly what happens when we run the interpreter:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yg1lqeSg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/building-interpreter-ruby/stoffle-interpreter-running.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yg1lqeSg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/building-interpreter-ruby/stoffle-interpreter-running.png" alt="Stoffle Interpreter Running"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP:&lt;/strong&gt; If you have the interpreter installed, try changing the &lt;code&gt;num&lt;/code&gt; variable in our sample program so that it holds a number greater than zero. As expected, now the IF branch will get executed, and the string "The number is greater than zero" will be printed out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;In this post, we saw the beginnings of Stoffle's interpreter. We implemented enough of the interpreter for it to handle some of the language basics: variables, conditionals, unary and binary operators, data types, and printing to the console. In the next and final part on the interpreter, we will tackle the remaining bits required for us to have our little toy language working as designed: variable scoping, function definition, function calling, and loops. I hope you had fun reading the article (I certainly had fun writing it!), and we’ll see you soon in the next post in the series!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-honeybadger"&gt;
  &lt;/a&gt;
  About Honeybadger
&lt;/h2&gt;

&lt;p&gt;Honeybadger has your back when it counts. We're the only error tracker that combines exception monitoring, uptime monitoring, and cron monitoring into a single, simple to use platform.  &lt;/p&gt;

&lt;p&gt;Our mission: to tame production and make you a better, more productive developer. &lt;a href="https://www.honeybadger.io/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
    </item>
    <item>
      <title>5 tools for Designing,  Developing, and Testing Accessibility </title>
      <author>⚡️Ren⚡️</author>
      <pubDate>Tue, 20 Jul 2021 19:58:47 +0000</pubDate>
      <link>https://dev.to/stories_of_ren/5-tools-for-designing-developing-and-testing-accessibility-5a0d</link>
      <guid>https://dev.to/stories_of_ren/5-tools-for-designing-developing-and-testing-accessibility-5a0d</guid>
      <description>&lt;p&gt;No matter what you are working on, considering accessibility is definitely a best practice.  Below is a list of five tools to help get you started with accessibility in your projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stark"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.getstark.co/"&gt;Stark&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This tool provides a wide array of color and contrast checking abilities along with simulators to test you design again visual disabilities.
&lt;/li&gt;
&lt;li&gt;Stark has plugins to go in various design tools, but also in chrome.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---KegI8P2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6jtdfwoy1kym5vrms02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---KegI8P2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6jtdfwoy1kym5vrms02.png" alt="Stark as a Google Chrome extension"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deques-dev-tools-axe-extension"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.deque.com/axe/devtools/"&gt;Deque's Dev tools AXE extension&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There are extensions/add-ons for &lt;a href="https://chrome.google.com/webstore/detail/axe-devtools-web-accessib/lhdoppojpmngadmnindnejefpokejbdd?hl=en"&gt;Chrome&lt;/a&gt;, &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/axe-devtools/"&gt;Firefox&lt;/a&gt;, and &lt;a href="https://microsoftedge.microsoft.com/addons/detail/axe-devtools-web-access/kcenlimkmjjkdfcaleembgmldmnnlfkn"&gt;Edge.&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Additionally, &lt;a href="https://developers.google.com/web/tools/lighthouse/"&gt;Lighthouse&lt;/a&gt; accessibility checks are powered by AXE Core as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FIHlUuLp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tl7jufa9gkcxz6hnmv9n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FIHlUuLp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tl7jufa9gkcxz6hnmv9n.png" alt="Axe dev tools check results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EmpUxQK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0hk18pw63uiail9z66p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EmpUxQK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0hk18pw63uiail9z66p.png" alt="lighthouse results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wave"&gt;
  &lt;/a&gt;
  &lt;a href="https://wave.webaim.org/"&gt;WAVE&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;WAVE is powered by &lt;a href="https://webaim.org/"&gt;WebAim&lt;/a&gt; and functions similarly to Deque's AXE extensions.&lt;/li&gt;
&lt;li&gt;An interesting element of WAVE's functionality is that it give an accessibility markup over the entire site. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FQiNveAe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dirlecnq0rbvwn4lgrzb.png" alt="wave accessibility markup"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#andi-accessibility-testing-tool"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.ssa.gov/accessibility/andi/help/install.html"&gt;ANDI - Accessibility Testing Tool&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ANDI (Accessible Name &amp;amp; Description Inspector) is a free accessibility testing tool.

&lt;ul&gt;
&lt;li&gt;ANDI allows you to inspect your page on the basis of accessible names which come in handy especially if you're working with interactive elements.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NCFJlKr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8kpa67wkvct4b0dkc8m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NCFJlKr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8kpa67wkvct4b0dkc8m.png" alt="focusable elements"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linting"&gt;
  &lt;/a&gt;
  Linting
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#vs-code-axe-accessibility-linter"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=deque-systems.vscode-axe-linter"&gt;VS Code AXE Accessibility Linter&lt;/a&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Checks React (&lt;code&gt;.js&lt;/code&gt;, .&lt;code&gt;jsx&lt;/code&gt;, &lt;code&gt;.ts&lt;/code&gt;, &lt;code&gt;.tsx&lt;/code&gt;), Vue (&lt;code&gt;.vue&lt;/code&gt;), HTML (&lt;code&gt;.html&lt;/code&gt;, &lt;code&gt;.htm&lt;/code&gt;), and Markdown (&lt;code&gt;.md&lt;/code&gt;, &lt;code&gt;.markdown&lt;/code&gt;) files so you can avoid common accessibility defects. Angular (&lt;code&gt;HTML&lt;/code&gt;) is not currently supported.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OSFhjYCC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzn1pgcqlpw2rq7fx1wg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OSFhjYCC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzn1pgcqlpw2rq7fx1wg.png" alt="targeting code that is not accessible"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#eslint-accessibility-plugins"&gt;
  &lt;/a&gt;
  ESlint Accessibility Plugins
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;There several different plugin depending on what framework/ tech stack you're working with.

&lt;ul&gt;
&lt;li&gt;I work a lot in React so my team frequently uses this plugin:

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/eslint-plugin-jsx-a11y"&gt;eslint-plugin-jsx-a11y&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>a11y</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>One of the most important interview questions many interviewees fail to answer correctly</title>
      <author>Oliver Jumpertz</author>
      <pubDate>Tue, 20 Jul 2021 19:16:42 +0000</pubDate>
      <link>https://dev.to/oliverjumpertz/one-of-the-most-important-interview-questions-many-interviewees-fail-to-answer-correctly-24c2</link>
      <guid>https://dev.to/oliverjumpertz/one-of-the-most-important-interview-questions-many-interviewees-fail-to-answer-correctly-24c2</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;"Are there any questions left we can answer?"&lt;/p&gt;

&lt;p&gt;-&amp;gt; Your interviewer&lt;/p&gt;

&lt;p&gt;"No, not right now, thank you."&lt;/p&gt;

&lt;p&gt;-&amp;gt; You&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Have you ever encountered this situation in a (tech) interview and responded like above? I'm sorry, but you've given away an awesome opportunity to make a lasting impression.&lt;/p&gt;

&lt;p&gt;Don't worry. Interview processes are a science for themselves. There are so many "techniques" interviewers try to use to determine whether you are the perfect or at least the right person for the job that you cannot learn them all in a lifetime. At least not as long as you don't work in HR.&lt;/p&gt;

&lt;p&gt;Gladly, there is a right way to handle this question, and this article will show you how.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#foreword"&gt;
  &lt;/a&gt;
  Foreword
&lt;/h2&gt;

&lt;p&gt;I've been on both sides of the interview table for a few years now.&lt;/p&gt;

&lt;p&gt;I've interviewed for positions, and I've interviewed quite a few awesome engineers.&lt;/p&gt;

&lt;p&gt;I can only give you my perspective and opinion. It does not necessarily need to be fitting each situation.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-this-question-is-an-opportunity"&gt;
  &lt;/a&gt;
  Why this question is an opportunity
&lt;/h2&gt;

&lt;p&gt;Although there is a shortage of software developers right and left, many companies still want to make sure they hire the right people. Even the best engineers may not be the best fit for a company and its culture.&lt;/p&gt;

&lt;p&gt;A question like "Are there any questions left we can answer?" is both an offer from your interviewer and an indicator for them.&lt;/p&gt;

&lt;p&gt;An interview is always two-sided. The offer enables you to gather more information so &lt;strong&gt;YOU&lt;/strong&gt; can actually find out whether the company fits you. You decide to spend your time at this company and to create value for them. And you will usually be paid pretty well to do your job, but even the highest salary in the world doesn't make up for a company or a culture you don't like. Whatever there may be left in your head, make sure to ask and get a clear answer. You want as much information as possible to make a good decision. Who likes to regret the choice they made after a week or a month at a new job? I'd say not too many people.&lt;/p&gt;

&lt;p&gt;The indicator part is important for the company you interview at. They also need to make a decision. And they want to see whether you are the right hire. Have you paid close attention to the interview? Are you interested in the company and the job at all? Based on your questions, interviewers can pretty easily perceive how interested you really are. An interviewer's job is to hire people who really want to work for the company. Candidates who already show a lot of interest have a high chance of becoming motivated employees later. The hope is that those employees will do their best for the company. Those employees might bring great ideas and collaborate with others well.&lt;/p&gt;

&lt;p&gt;Some interviewers expect you to ask at least one to two questions. Others don't expect you to do so but give you plus points if you ask a few. I'd usually expect interviewers to anticipate at least one to two questions they can answer.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#which-questions-to-ask"&gt;
  &lt;/a&gt;
  Which questions to ask
&lt;/h2&gt;

&lt;p&gt;The questions you could ask can be divided into two rough categories.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Real questions&lt;/li&gt;
&lt;li&gt;Strategic questions&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#real-questions"&gt;
  &lt;/a&gt;
  Real questions
&lt;/h3&gt;

&lt;p&gt;Those are the most important ones. You ask them because you want to get a certain answer.&lt;/p&gt;

&lt;p&gt;The answers given to those questions help you decide whether this company is the right one for you and whether you really want to work there.&lt;/p&gt;

&lt;p&gt;Real questions can be further divided into two sub-categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Context-based questions&lt;/li&gt;
&lt;li&gt;Context-less questions&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#contextbased-questions"&gt;
  &lt;/a&gt;
  Context-based questions
&lt;/h4&gt;

&lt;p&gt;These questions arise from the context of the interview. Your interviewer(s) talked about something but didn't cover something you would have been highly interested in.&lt;/p&gt;

&lt;p&gt;A typical context-based question pattern goes like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"You have mentioned something in this interview. I have a question regarding this."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This shows: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You paid attention to the interview&lt;/li&gt;
&lt;li&gt;You want to know more because you are interested&lt;/li&gt;
&lt;/ol&gt;

&lt;h5&gt;
  &lt;a href="#an-example"&gt;
  &lt;/a&gt;
  An Example
&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;"When we talked about your development process, you told me that you usually expect code reviews to be taken seriously because they are an important part of your QA process. Does this mean that they are more important than feature development?"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#contextless-questions"&gt;
  &lt;/a&gt;
  Context-less questions
&lt;/h4&gt;

&lt;p&gt;These are questions that you would love to ask because you are very interested in a specific topic regarding the job or the company. During your interview, however, you didn't get the chance to talk about this topic. These questions are not triggered through the interview (thus context-less) but would still give you valuable answers, which in return help you to decide whether this company and job is the right one for you.&lt;/p&gt;

&lt;p&gt;A typical context-less question pattern goes like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"I'd really like to know something. Can you tell me about this?"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This shows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You are interested&lt;/li&gt;
&lt;li&gt;You care for something specifically&lt;/li&gt;
&lt;/ol&gt;

&lt;h5&gt;
  &lt;a href="#an-example"&gt;
  &lt;/a&gt;
  An Example
&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;"How important are code reviews for you? How highly do you value them? And how important are they relative to daily bug fixing and feature development?"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#strategic-questions"&gt;
  &lt;/a&gt;
  Strategic questions
&lt;/h3&gt;

&lt;p&gt;These questions should be your last resort. You throw them in because you want to ask something, at least. They can still give you valuable insights, but they are also often cliché and might be something interviewers hear regularly.&lt;/p&gt;

&lt;p&gt;Honestly speaking, you should avoid having to ask strategic questions as much as possible. You need to make them up and sometimes become pretty creative not to sound like you already prepared them before your interview.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#some-examples-of-strategic-questions"&gt;
  &lt;/a&gt;
  Some examples of strategic questions:
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;"Are there any other income streams for your company other than the project work you do? Do you have core software that you license out?"&lt;/li&gt;
&lt;li&gt;"How many other teams do you have at your company, and with how many of them will I interact daily? How interlinked is the team I interview for with the others?"&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#how-to-come-up-with-good-questions"&gt;
  &lt;/a&gt;
  How to come up with good questions
&lt;/h2&gt;

&lt;p&gt;There is actually an (imho) pretty simple hack that helps you to ask good questions at the end of an interview:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bring a notebook and a pen, pay attention, take notes!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It might sound a little strange to sit at the interview table and take notes as an interviewee, but actually, it isn't. At least one of your interviewers (if they are well organized) will also have a pen and paper there or an electronic device with which they take notes. Why shouldn't you do the same?&lt;/p&gt;

&lt;p&gt;It gives you something you can read through later, after your interview, when you need to decide whether you want to continue the process or even take an offer. And throughout the whole interview, you can already mark points in your notes that you didn't cover deep enough. When your interviewer asks you if you have any further questions, you can quickly go through your notes and form a question based on those marks.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion-and-recap"&gt;
  &lt;/a&gt;
  Conclusion and recap
&lt;/h2&gt;

&lt;p&gt;Often, inconspicuous questions like "Any further questions?" can make a huge difference in interviews. They can give you the edge over another candidate and help you make a lasting impression.&lt;/p&gt;

&lt;p&gt;Especially the question covered here is a pretty simple way for you to get plus points if you approach the whole interview in the right way. And this one also serves &lt;strong&gt;YOU&lt;/strong&gt; very well. It gives you the chance to get as much information as possible. In the end, this information can help you decide whether the company is the right fit for you. Because you should never forget: Interviews are two-sided.&lt;/p&gt;

&lt;p&gt;To quickly recap what we covered:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Bring a pen and a notebook&lt;/li&gt;
&lt;li&gt;Pay close attention to the interview&lt;/li&gt;
&lt;li&gt;Take notes&lt;/li&gt;
&lt;li&gt;Mark points you'd like to get more information on&lt;/li&gt;
&lt;li&gt;At the end of your interview, when asked whether you have any further questions, ask as many real questions as possible&lt;/li&gt;
&lt;li&gt;Only pick strategic questions if you can't come up with real questions&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#before-you-leave"&gt;
  &lt;/a&gt;
  Before You Leave
&lt;/h2&gt;

&lt;p&gt;If you would love to read even more content like this, feel free to visit me on &lt;a href="https://twitter.com/intent/follow?screen_name=oliverjumpertz"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/oliverjumpertz/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I'd love to count you as my ever-growing group of awesome friends!&lt;/p&gt;

</description>
      <category>interview</category>
      <category>techinterview</category>
    </item>
    <item>
      <title>Forem Self-Host is Now Officially Supported</title>
      <author>Ben Halpern</author>
      <pubDate>Tue, 20 Jul 2021 19:10:28 +0000</pubDate>
      <link>https://dev.to/devteam/forem-self-host-is-now-officially-supported-16h0</link>
      <guid>https://dev.to/devteam/forem-self-host-is-now-officially-supported-16h0</guid>
      <description>&lt;h3&gt;
  &lt;a href="#today-the-playbook-for-selfhosting-your-own-forem-community-is-officially-live-read-all-about-this-news-here"&gt;
  &lt;/a&gt;
  Today, the playbook for self-hosting your own Forem community is officially live. Read all about this news &lt;a href="https://forem.dev/foremteam/introducing-forem-self-host-246k"&gt;here&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;This is &lt;em&gt;day one&lt;/em&gt; of Forem as a supported product out in the wild, meaning that we are going to find a lot of new things that need fixing. That being said, this code has been running in production for years and there is a lot to love.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/forem"&gt;
        forem
      &lt;/a&gt; / &lt;a href="https://github.com/forem/selfhost"&gt;
        selfhost
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Selfhost your Forem Community on your own infrastructure 🎉
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#wait-what-is-forem"&gt;
  &lt;/a&gt;
  Wait, what is Forem?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://forem.com"&gt;Forem&lt;/a&gt; is the open source software that powers the DEV community (this very site). We’ve spent the last few years gradually building towards a future where this code could be re-used to run any application of this class. With Forem, you will be able to build your very own modern and independent community – think of it as a decentralized alternative to Facebook Groups, a disaggregated Reddit, specialized LinkedIn or any other variation in your own mental model that speaks to an authentic and extensible space.&lt;/p&gt;

&lt;p&gt;Since DEV content is popular and freely distributed on the web, our analytics show that it’s likely that we reach pretty much every developer on earth at least occasionally.  There is a lot of work that goes on under the hood to make that happen, from query optimization to caching strategies that ensure a reliable experience, to features which enable swifter moderation and more relevant home feeds.  When you build your community with Forem, you benefit from all of these same platform dynamics that have helped DEV grow.&lt;/p&gt;

&lt;p&gt;If you moderate a gardening subreddit and want the opportunity to turn it into your full-time business, start your own Forem. If your engineering organization wants to invest vertically in your devrel strategy, please start your own Forem. &lt;strong&gt;We are here to support a world where your podcast audience or your church group aggregates in a space you &lt;em&gt;own&lt;/em&gt;, curate, and moderate.&lt;/strong&gt; We want a world where you browse around for the perfect domain name, even if the best you can find is &lt;code&gt;.pizza&lt;/code&gt;. We want you to benefit from the ongoing improvements to user experience, security, optimizations and newly adopted technology from the open source community, but we want you to have agency and scrutiny over what you ultimately host.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Community building is easier said than done&lt;/strong&gt;, but we are here to be your partner in every way possible. You should be prepared to have some growing pains, but you should also be prepared to receive full support from the Forem team. You can bet that we will promote the heck out of any Forems which add value to the broader community— and for those who do not, there is inherent value in our lack of strict authoritarian control. We will collectively work to return the Internet to its community roots, to fight abuse vectors the open-source way, and to operate with an appreciation for diplomacy and transparency.&lt;/p&gt;

&lt;p&gt;Forems allow for independent and direct relationships with end users and, crucially, &lt;strong&gt;Forems don’t share data with other Forems&lt;/strong&gt;. Your relationship with one Forem might be akin to the relationship with the small businesses in your neighborhood. Your barber might know that you just got engaged and your mail carrier might know the name of your dog and which magazines you subscribe to, but nobody will be following you around 24/7 to put it all together. &lt;strong&gt;We advocate for an end to broad surveillance capitalism, and this mission is built into every layer of the stack.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-business-model-and-commitment"&gt;
  &lt;/a&gt;
  Our business model and commitment
&lt;/h2&gt;

&lt;p&gt;We have made the commitment to being the Forem company, and to develop a success-based business model. The “obvious” way to turn DEV into a massive return on investment is to capitalize on developer attention and spin it into profits in a very lucrative space— but where does that end? As companies grow, pressures to keep that growth rolling are immense. It’s not exactly written on the walls of corporate headquarters, but the playbook in high-growth enterprises is to seek out monopolies and milk them dry.&lt;/p&gt;

&lt;p&gt;Our focus on Forem is not an abdication of our duties to our shareholders— quite the opposite. We are building a company which puts us in the business of other peoples’ success. We want to empower the next AWS (or current AWS!) to invest vertically in their communities without having to leak SEO juice to DEV or leak followers to Twitter. We want TikTokers and newsletter writers to get sick of the strictly one-to-many content creation grind and to start building authentic communities (the way we originally did when we expanded from &lt;a href="https://twitter.com/thepracticaldev"&gt;@thepracticaldev&lt;/a&gt; on Twitter to DEV).&lt;/p&gt;

&lt;p&gt;This announcement is an encouragement to start hosting your own communities &lt;em&gt;today&lt;/em&gt;, for the lowest possible cost on AWS, DigitalOcean or Google Cloud (with more vendors to be supported, feel free to help!). If you are a potential &lt;em&gt;pro or enterprise&lt;/em&gt; customer and want our fully hosted offering, we are also live with &lt;strong&gt;Forem Cloud&lt;/strong&gt;. We’re currently offering Forem Cloud as a value-add hosting service that also includes priority support — so it’s currently designed for larger companies that can invest at premium pricing — but we eventually want Forem Cloud to be available via one-click deploy for everyone.&lt;/p&gt;

&lt;p&gt;Fill out the &lt;a href="https://formkeep.com/p/cfa67316d1c12d23ecb3c08b359f944b"&gt;Forem Cloud interest form&lt;/a&gt; if you think your organization may have interest in investing in the Forem community ecosystem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-will-ever-adopt-decentralized-facebook-groups"&gt;
  &lt;/a&gt;
  Who will ever adopt “Decentralized Facebook Groups”? 🤨
&lt;/h2&gt;

&lt;p&gt;If you’re skeptical that your tech-phobic cousin will ever care &lt;em&gt;even slightly&lt;/em&gt; about the value of an open web or their own data privacy, then we agree. We anticipate a gradual adoption curve and a ton of supporting features and utilities coming up the rear to support the long term goals of Forem.&lt;/p&gt;

&lt;p&gt;Our recommendation is that you trust the process and personally claim some space in the Forem ecosystem around a passion of yours. 😉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-now"&gt;
  &lt;/a&gt;
  What now?
&lt;/h2&gt;

&lt;p&gt;If you know what Forem you want to build, please follow the instructions and go live — again, the &lt;a href="https://github.com/forem/selfhost"&gt;Self-Host instructions are available here&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;If you’re not totally sure where you want to fit into the Forem ecosystem, please consider joining our meta Forem at &lt;a href="https://forem.dev"&gt;forem.dev&lt;/a&gt; to stay looped in. You’ll find out about new features there and generally be able to keep up with the pulse for how the project continues to evolve.&lt;/p&gt;

&lt;p&gt;In the meantime, discovering new Forem communities and interacting with your favorite ones (like DEV) has never been more streamlined. We recently &lt;a href="https://dev.to/devteam/forem-for-ios-is-here-4g3f"&gt;launched Forem for iOS&lt;/a&gt;, a mobile application for interacting with the Forem of your choice. We’re working on Android now, and plan to follow with utilities for more easily managing your identity within the Forem ecosystem in a private, but pseudo-centralized way for optional convenience.&lt;/p&gt;

&lt;p&gt;As we continue to refine the process of self-hosting your own Forem, we look forward to improving your experience within the Forem communities you’re already a part of in every way we can. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/forem"&gt;
        forem
      &lt;/a&gt; / &lt;a href="https://github.com/forem/forem"&gt;
        forem
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      For empowering community 🌱
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Lastly, if you want to support the work we’re doing to empower community, give the core &lt;a href="https://github.com/forem/forem"&gt;Forem repo&lt;/a&gt; a star on GitHub.&lt;/p&gt;

&lt;p&gt;Happy hosting 🌱&lt;/p&gt;

</description>
      <category>forem</category>
      <category>opensource</category>
      <category>news</category>
      <category>meta</category>
    </item>
    <item>
      <title>Refactoring to Laravel 8 Class Model Factories</title>
      <author>C.S. Rhymes</author>
      <pubDate>Tue, 20 Jul 2021 19:00:07 +0000</pubDate>
      <link>https://dev.to/chrisrhymes/refactoring-to-laravel-8-class-model-factories-20f4</link>
      <guid>https://dev.to/chrisrhymes/refactoring-to-laravel-8-class-model-factories-20f4</guid>
      <description>&lt;p&gt;Laravel 8 introduced new class based model factories and if you have an existing project you can use the legacy factories package to keep using the old factories. I have tended to keep the factories as they were and continue development, but after working on a fresh Laravel 8 project and using the new class based syntax I decided to go back and update the factories in the older Laravel apps. This article explains how I went about refactoring the factories to classes.&lt;/p&gt;

&lt;p&gt;In this scenario we have a Laravel app that allows you to create a post. The post has a title, content, author and is either published or not published.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#original-factory"&gt;
  &lt;/a&gt;
  Original Factory
&lt;/h2&gt;

&lt;p&gt;Here is the PostFactory in the previous format. It defines the default state, with the publish value set to false. It has a state called published where the publish value is set to true.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;// database/factories/PostFactory.php

&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="cd"&gt;/** @var \Illuminate\Database\Eloquent\Factory $factory */&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Post&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Faker\Generator&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nc"&gt;Faker&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$factory&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Faker&lt;/span&gt; &lt;span class="nv"&gt;$faker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'title'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$faker&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;words&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;'content'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$faker&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'author_id'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;'publish'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nv"&gt;$factory&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'published'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Faker&lt;/span&gt; &lt;span class="nv"&gt;$faker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'publish'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is a very basic example showing the factory being used in a test, using the factory() helper method. The second test in the example has the published state applied to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;// tests/Unit/PostTest.php

&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Tests\Unit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Post&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Tests\TestCase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostTest&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;TestCase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;test_post_is_not_published&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;make&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$post&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;published&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;test_published_post_is_published&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'published'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;make&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$post&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;published&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#refactoring-the-factory"&gt;
  &lt;/a&gt;
  Refactoring the Factory
&lt;/h2&gt;

&lt;p&gt;There are a few changes that are needed to refactor to the new factory class, so let’s go through them one by one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#namespace"&gt;
  &lt;/a&gt;
  Namespace
&lt;/h3&gt;

&lt;p&gt;First we can remove the &lt;code&gt;@var&lt;/code&gt; declaration and replace it with a namespace.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Remove&lt;/span&gt;
&lt;span class="cd"&gt;/** @var \Illuminate\Database\Eloquent\Factory $factory */&lt;/span&gt;

&lt;span class="c1"&gt;// Add&lt;/span&gt;
&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Database\Factories&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#class"&gt;
  &lt;/a&gt;
  Class
&lt;/h3&gt;

&lt;p&gt;The new factories are classes so we need to define the class and make it extend the factory class.&lt;/p&gt;

&lt;p&gt;Ensure you extend &lt;code&gt;Illuminate\Database\Eloquent\Factories\Factory;&lt;/code&gt; and not the old factory &lt;code&gt;Illuminate\Database\Eloquent\Factory&lt;/code&gt;. This caught me out more than once.&lt;/p&gt;

&lt;p&gt;To define that this factory is to be used with the Post model we need to add the protected model property, setting the value as the Post::class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Database\Factories&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Post&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Faker\Generator&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nc"&gt;Faker&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Factories\Factory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostFactory&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Factory&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fakerphp"&gt;
  &lt;/a&gt;
  FakerPHP
&lt;/h3&gt;

&lt;p&gt;If you have an older Laravel app you may be using &lt;code&gt;fzaninotto/Faker&lt;/code&gt; in your composer.json file, which is now archived. Take this opportunity to update your composer.json to use &lt;code&gt;fakerphp/faker&lt;/code&gt; and run &lt;code&gt;composer update&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the old factories we passed in Faker into the functions, but now faker is available using &lt;code&gt;$this-&amp;gt;faker&lt;/code&gt; from the parent Factory class. This means we can also remove the following line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Remove&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Faker\Generator&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nc"&gt;Faker&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#factory-definition"&gt;
  &lt;/a&gt;
  Factory definition
&lt;/h3&gt;

&lt;p&gt;Now we are ready to provide our factory definition. This is done via a &lt;code&gt;definition&lt;/code&gt; method on the class.&lt;/p&gt;

&lt;p&gt;We still return an array, like the previous factory did, but we need to update &lt;code&gt;$faker&lt;/code&gt; to &lt;code&gt;$this-&amp;gt;faker&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We also need to update the relationship for the author_id so it no longer uses the &lt;code&gt;factory()&lt;/code&gt; helper, from &lt;code&gt;factory(User::class)&lt;/code&gt; to &lt;code&gt;User::factory()&lt;/code&gt;. This means that we will also have to update the UserFactory.php to use the new class based approach.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;definition&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'title'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;faker&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;words&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;'content'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;faker&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'author_id'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
        &lt;span class="s1"&gt;'publish'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#factory-state"&gt;
  &lt;/a&gt;
  Factory State
&lt;/h3&gt;

&lt;p&gt;Previously we defined our published state using the &lt;code&gt;$factory-&amp;gt;state()&lt;/code&gt; syntax. Now we can create a new method on the class which returns &lt;code&gt;$this-&amp;gt;state()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;published&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$attributes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'publish'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#updating-the-model"&gt;
  &lt;/a&gt;
  Updating the Model
&lt;/h2&gt;

&lt;p&gt;Before we can use the factory in our test, we need to update our Post model to tell it to use the HasFactory trait. This helps connect the model to the new factory class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Post&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Factories\HasFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;HasFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#composerjson-changes"&gt;
  &lt;/a&gt;
  Composer.json Changes
&lt;/h2&gt;

&lt;p&gt;To use the new factories you need to add the namespace for the database factories to the autoload section of the composer.json.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"autoload"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"psr-4"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"App\\"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"app/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"Database\\Factories\\"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"database/factories/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"Database\\Seeders\\"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"database/seeders/"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can then run &lt;code&gt;composer dump-autoload&lt;/code&gt; to update the autoloader.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#updating-the-test"&gt;
  &lt;/a&gt;
  Updating The Test
&lt;/h2&gt;

&lt;p&gt;Finally, we are ready to update our test to use the new factory class.&lt;/p&gt;

&lt;p&gt;We start by removing the &lt;code&gt;factory()&lt;/code&gt; helper and use the &lt;code&gt;Model::factory()&lt;/code&gt; syntax instead. So &lt;code&gt;factory(Post::class)&lt;/code&gt; becomes &lt;code&gt;Post::factory()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next we can update the way we set states by chaining the published state method we created. So &lt;code&gt;factory(Post::class)-&amp;gt;state('published')&lt;/code&gt; becomes &lt;code&gt;Post::factory()-&amp;gt;published()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;// tests/Unit/PostTest.php

&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Tests\Unit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Post&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Tests\TestCase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostTest&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;TestCase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;test_post_is_not_published&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;make&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nf"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$post&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;published&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;test_published_post_is_published&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;published&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;make&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nf"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$post&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;published&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#updating-all-tests"&gt;
  &lt;/a&gt;
  Updating All Tests
&lt;/h2&gt;

&lt;p&gt;I use PHP Storm and have found that the &lt;code&gt;Replace in files&lt;/code&gt; function is very useful replacing &lt;code&gt;factory(Post::class)&lt;/code&gt; with &lt;code&gt;Post::factory()&lt;/code&gt; over many files.&lt;/p&gt;

&lt;p&gt;Where it gets a bit more tricky is when you have to apply states, updating &lt;code&gt;-&amp;gt;state('published')&lt;/code&gt; to &lt;code&gt;-&amp;gt;published()&lt;/code&gt;. To be honest, I ended up changing the states manually.&lt;/p&gt;

&lt;p&gt;The other difficulty I found was when creating multiple factories. The syntax for this changed quite a lot from &lt;code&gt;factory(Post::class, 3)&lt;/code&gt; to &lt;code&gt;Post::factory()-&amp;gt;count(3)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let me know in the comments if you have a reliable way of updating states and multiples.&lt;/p&gt;

&lt;p&gt;For more information on &lt;a href="https://laravel.com/docs/8.x/database-testing#defining-model-factories"&gt;Model Factories&lt;/a&gt; check out the Laravel docs website.&lt;/p&gt;

</description>
      <category>php</category>
      <category>laravel</category>
      <category>testing</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Winning Wars (Literally) with Agile &amp; DevOps w/ Adam Furtado of Kessel Run</title>
      <author>Conor Bronsdon</author>
      <pubDate>Tue, 20 Jul 2021 18:54:25 +0000</pubDate>
      <link>https://dev.to/linearb/winning-wars-literally-with-agile-devops-w-adam-furtado-of-kessel-run-2bhf</link>
      <guid>https://dev.to/linearb/winning-wars-literally-with-agile-devops-w-adam-furtado-of-kessel-run-2bhf</guid>
      <description>&lt;p&gt;The wars of the future will be fought with software and system architecture, as much as any other weapon. That’s why the US armed forces needed to start applying modern software methodologies at scale. &lt;/p&gt;

&lt;p&gt;The beginning of this incredible digital transformation began in 2017 when the US Air Force started a project called Kessel Run. Leading the project then, and now Chief of Platform of over 400 Kessel Run developers, is Adam Furtado.&lt;/p&gt;

&lt;p&gt;Translating engineering to executives is a regular challenge for many of us, but I can almost guarantee translating engineering to military officials is way harder. When he’s not explaining why DevOps matters to his higher ups, Adam spends his time scaling Kessel Run operations by building systems of systems. This week’s episode of &lt;a href="https://devinterrupted.com/podcast/winning-wars-literally-with-agile-devops/"&gt;Dev Interrupted&lt;/a&gt; chronicles everything Adam has learned during his journey from 5 developers to over 400. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/1yEGsyHYL7BJlNcYG0vQ0b"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Effective tactics for translating engineering to non-technical people&lt;/li&gt;
&lt;li&gt;Why having a mission driven culture is critical to success&lt;/li&gt;
&lt;li&gt;How to continue the momentum of early wins for organization success&lt;/li&gt;
&lt;li&gt;When you need to start thinking about metrics and visibility while scaling&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1200 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.gg/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>agile</category>
      <category>culture</category>
      <category>metrics</category>
    </item>
    <item>
      <title>Laravel 8.0 CRUD Tutorial Using Mysql Database
</title>
      <author>devcse</author>
      <pubDate>Tue, 20 Jul 2021 18:28:30 +0000</pubDate>
      <link>https://dev.to/jewelcse/laravel-8-0-crud-tutorial-using-mysql-database-4ecf</link>
      <guid>https://dev.to/jewelcse/laravel-8-0-crud-tutorial-using-mysql-database-4ecf</guid>
      <description>&lt;p&gt;Hello Artisan,&lt;/p&gt;

&lt;p&gt;Today we will create a CRUD application in Laravel using Mysql Database. CRUD extends Create, Read, Update, Delete. We performing This operation in our new fresh laravel project. So, let’s start.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Laravel Project first, run this command&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;composer create-project --prefer-dist laravel/laravel blog&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After completion the creation of laravel project, lets go…&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Make databse Connection  *&lt;/em&gt;&lt;br&gt;
create a databse in the mysql database after that go to the .env file&lt;/p&gt;

&lt;p&gt;and add the code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laravel_crud
DB_USERNAME=root
DB_PASSWORD=
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set your Databasae name,username and password.&lt;/p&gt;

&lt;p&gt;Now, run this command to migrate&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php artisan migrate&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create Product model&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php artisan make:model Product&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create migration for products table, run this command&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php artisan make:migration create_products_table --create=products&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;let’s add products table column propertise to the migration file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Schema::create('products', function (Blueprint $table) {
    $table-&amp;gt;id();
    $table-&amp;gt;string('title');
    $table-&amp;gt;text('details');
    $table-&amp;gt;timestamps();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create Controller, run this command&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php artisan make:controller ProductController --resource&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In web.php add our route, &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;web.php&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\ProductController;
use App\Http\Controllers\UserController;
/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the "web" middleware group. Now create something great!
|
*/

Route::get('/', function () {
    return view('index');
});

Route::resource('product',ProductController::class);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To see out all route, run this command&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php artisan route:list&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;p&gt;FULL CRUD GET HERE: &lt;a href="https://codesnipeet.com/laravel-8-crud-tutorial-using-mysql-database/"&gt;Link&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Security best practices in IAM.. Summarized. </title>
      <author>Mohamed Zahra</author>
      <pubDate>Tue, 20 Jul 2021 18:22:26 +0000</pubDate>
      <link>https://dev.to/mohamed_zahra_/security-best-practices-in-iam-summarized-2ma2</link>
      <guid>https://dev.to/mohamed_zahra_/security-best-practices-in-iam-summarized-2ma2</guid>
      <description>&lt;p&gt;&lt;strong&gt;Lock away your AWSaccount root user access keys&lt;/strong&gt;&lt;br&gt;
Do not use your AWSaccount root user access key to make programmatic requests to Amazon Web Services (AWS). The access key for your AWS account root user gives full access to all your resources for all services, including your billing information. You cannot reduce the permissions associated with this key and must protect it like you would your credit card numbers or other sensitive secret.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you don't already have an access key for your AWS account root user, don't create one. Instead, use your account email address and password to sign in to the AWSManagement Console and create an IAM user for yourself that has administrative permissions. If you do need to create a new account, you can do so by signing into your existing account.&lt;/li&gt;
&lt;li&gt;If you do have an access key for your AWS account root user, delete it. If you must keep it, rotate (change) the access key regularly. To delete or rotate your root user access keys, go to the My Security Credentials page in the AWSManagement Console.&lt;/li&gt;
&lt;li&gt;Never share your AWSaccount root user password or access keys with anyone. The remaining sections of this document discuss various ways to avoid having to share your account's root user credentials with other users. They also explain how to avoid embedding them in an application.&lt;/li&gt;
&lt;li&gt;Use a strong password to help protect account-level access to the AWSManagement Console. For information about managing your AWSaccount root user password, see Changing the AWS account root user password.&lt;/li&gt;
&lt;li&gt;Enable AWS multi-factor authentication (MFA) on your AWSaccount root user account. For more information, see Using multi-factor authentication (MFA) in AWS.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Create individual IAM users&lt;/strong&gt;&lt;br&gt;
       Don't give your AWS account  credentials to anyone else. &lt;br&gt;
  Instead, create individual users for anyone who needs access to &lt;br&gt;
  your account. Create an IAM user for yourself as well, give that &lt;br&gt;
  user administrative permissions and use it for all your work. &lt;br&gt;
     You can create individual IAM users for people who access &lt;br&gt;
  your account. Each IAM user has a unique set of security &lt;br&gt;
  credentials, and you can grant different permissions to them. If &lt;br&gt;
  necessary, you can change or revoke an I AM user's permissions &lt;br&gt;
  anytime. It is possible to revoke the root user's password if &lt;br&gt;
  you don't want to give it to someone else. AWS recommends that &lt;br&gt;
  you create new users without permissions and require them to &lt;br&gt;
  change their password immediately. After they sign in for the &lt;br&gt;
  first time, you can add policies to the user.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use user groups to assign permissions to IAM users&lt;/strong&gt;&lt;br&gt;
   You can create user groups that relate to job functions &lt;br&gt;
   (administrators, developers, accounting, etc.) Next, define the &lt;br&gt;
   relevant permissions for each user group. All the users in an &lt;br&gt;
   IAM zser group inherit the permissions of the user group they &lt;br&gt;
   belong to. That way, you can make changes for everyone in a &lt;br&gt;
   user group in just one place.&lt;br&gt;
&lt;strong&gt;Grant least privilege&lt;/strong&gt;&lt;br&gt;
    When you create IAM policies, follow the standard security &lt;br&gt;
    advice of granting least privilege, or granting only the &lt;br&gt;
    permissions required to perform a task. This is more secure &lt;br&gt;
    than starting with too many permissions and then trying to &lt;br&gt;
    tighten them later. It's important to start with a minimum set &lt;br&gt;
    of permissions and grant additional permissions as necessary.&lt;br&gt;
  &lt;strong&gt;A.Understand access level groupings&lt;/strong&gt;&lt;br&gt;
   You can use access level groupings to understand the level of &lt;br&gt;
   access that a policy grants. Policy actions are classified as &lt;br&gt;
   List, Read, Write, Permissions management, or Tagging. For &lt;br&gt;
   example, you can choose actions from the List and Read access &lt;br&gt;
   levels to grant read-only access to your users.&lt;br&gt;
  &lt;strong&gt;B.Validate your policies&lt;/strong&gt;&lt;br&gt;
   IAM Access Analyzer provides over 100 policy checks to validate &lt;br&gt;
   your policies. It generates security warnings when a statement &lt;br&gt;
   in your policy allows access we consider overly permissive. You &lt;br&gt;
   can use the actionable recommendations that are provided &lt;br&gt;
   through the security warnings as you work toward granting least &lt;br&gt;
   privilege.&lt;br&gt;
 &lt;strong&gt;C.Generate a policy based on access activity&lt;/strong&gt;&lt;br&gt;
  You can create a policy based on the access activity for an IAM &lt;br&gt;
  entity. IAM Access Analyzer reviews your CloudTrail logs and &lt;br&gt;
  generates a policy template that contains the permissions that &lt;br&gt;
  have been used by the entity in your specified time frame. You &lt;br&gt;
  can use the template to create a managed policy with fine- &lt;br&gt;
  grained permissions.&lt;br&gt;
 &lt;strong&gt;D.Use last accessed information&lt;/strong&gt;&lt;br&gt;
   Last accessed information includes information about the &lt;br&gt;
  actions that were last accessed for some services, such as &lt;br&gt;
  Amazon EC2,IAM, Lambda, and Amazon S3. View this information on &lt;br&gt;
  the Access Advisor tab on the IAM console details page for an &lt;br&gt;
  IAM user, group, role, or policy. You can use this information &lt;br&gt;
  to identify unnecessary permissions so that you can refine your &lt;br&gt;
  IAM or Organizations policies to better adhere to the principle &lt;br&gt;
 of least privilege.&lt;br&gt;
&lt;strong&gt;E.Review account events in AWS CloudTrail&lt;/strong&gt;&lt;br&gt;
   To further reduce permissions, you can view your account's &lt;br&gt;
   events in AWS CloudTrail Event history. CloudTrail event logs &lt;br&gt;
   include detailed event information that you can use to reduce &lt;br&gt;
   the policy's permissions. The logs include only the actions and &lt;br&gt;
   resources that your IAM entities need.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get started using permissions with AWS managed policies&lt;/strong&gt;&lt;br&gt;
  AWS managed policies can give your employees the permissions &lt;br&gt;
  they need to get started. These policies are already available &lt;br&gt;
  in your account and are maintained and updated by AWS. To get &lt;br&gt;
  started quickly, you can use AWS managed policies to give your &lt;br&gt;
  employee access to the services they want or need.AWS managed &lt;br&gt;
  policies are designed to provide permissions for many common use &lt;br&gt;
  cases. Full access AWS managed policies define permissions for &lt;br&gt;
  service administrators by granting full access to a service. &lt;br&gt;
  Power-user policies such as AWSCodeCommitPowerUser and &lt;br&gt;
  AWSKeyManagementServicePowerUser provide multiple levels of &lt;br&gt;
  access to services without allowing permissions management &lt;br&gt;
  permissions. Partial-access policies like &lt;br&gt;
  AmazonMobileAnalyticsWriteOnlyAccess and AmazonEC2ReadOnlyAccess &lt;br&gt;
  provide specific levels of permission for users, user groups, &lt;br&gt;
  and roles.&lt;br&gt;
&lt;strong&gt;Validate your policies&lt;/strong&gt;&lt;br&gt;
  It is a best practice to validate the policies that you create. &lt;br&gt;
  You can perform policy validation when you create and edit JSON &lt;br&gt;
  policies. IAM identifies any JSON syntax errors, while IAM &lt;br&gt;
  Access Analyzer provides over 100 policy checks and actionable &lt;br&gt;
  recommendations to help you author secure and functional &lt;br&gt;
  policies. We recommend that you review and validate all of your &lt;br&gt;
  existing policies&lt;br&gt;
&lt;strong&gt;Use customer managed policies instead of inline policies&lt;/strong&gt;&lt;br&gt;
  For custom policies, we recommend that you use managed policies &lt;br&gt;
  instead of inline policies. A key advantage of using these &lt;br&gt;
  policies is that you can view all of your managed policies in &lt;br&gt;
  one place in the console. You can also view this information &lt;br&gt;
  with a single AWS CLI or AWS API operation. Inline policies are &lt;br&gt;
  policies that exist only on an IAM identity (user, user group, &lt;br&gt;
  or role). Managed policies are separate IAM resources that you &lt;br&gt;
  can attach to multiple identities.&lt;br&gt;
 &lt;strong&gt;Use access levels to review IAM permissions&lt;/strong&gt;&lt;br&gt;
  AWS categorizes each service action into one of five access &lt;br&gt;
  levels based on what each action does: List, Read, Write, &lt;br&gt;
  Permissions management, or Tagging. You can use these access &lt;br&gt;
  levels to determine which actions to include in your policies. &lt;br&gt;
  Make sure that your policies grant the least privilege that is &lt;br&gt;
  needed to perform only the necessary actions.&lt;br&gt;
&lt;strong&gt;Configure a strong password policy for your users&lt;/strong&gt;&lt;br&gt;
  If you allow users to change their own passwords, create a &lt;br&gt;
  custom password policy that requires them to create strong &lt;br&gt;
  passwords and rotate their passwords periodically. You can &lt;br&gt;
  upgrade from the default password policy to define password &lt;br&gt;
  requirements, such as minimum length, minimum length and &lt;br&gt;
  whether it requires nonalphabetic characters. For more &lt;br&gt;
  information, see Setting an account password policy for IAM &lt;br&gt;
  users.&lt;br&gt;
 &lt;strong&gt;Enable MFA&lt;/strong&gt;&lt;br&gt;
  For extra security, we recommend that you require multi-factor &lt;br&gt;
  authentication (MFA) for all users in your account. With MFA, &lt;br&gt;
  users have a device that generates a response to an &lt;br&gt;
  authentication challenge. Both the user's credentials and the &lt;br&gt;
  device-generated response are required to complete the sign-in &lt;br&gt;
  process. If a user's password or access keys are compromised, &lt;br&gt;
  your account resources are still secure because of the &lt;br&gt;
  additional authentication requirement.&lt;br&gt;
      The response is generated in one of the following ways:&lt;br&gt;
 1.Virtual and hardware MFA devices generate a code that you view &lt;br&gt;
   on the app or device and then enter on the sign-in screen.&lt;br&gt;
 2.U2F security keys generate a response when you tap the device. &lt;br&gt;
   The user does not manually enter a code on the sign-in screen.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use roles for applications that run on Amazon EC2 instances&lt;/strong&gt;&lt;br&gt;
  Amazon EC2 is a cloud computing platform that allows you to run &lt;br&gt;
  applications on an Amazon EC2 instance. When you launch an EC2 &lt;br&gt;
  server, you can specify a role for the instance as a launch &lt;br&gt;
  parameter. Roles provide temporary credentials to the EC2 &lt;br&gt;
  instances and these credentials are automatically rotated for &lt;br&gt;
  you. The role's permissions determine what the application is &lt;br&gt;
  allowed to do.&lt;br&gt;
&lt;strong&gt;Use roles to delegate permissions&lt;/strong&gt;&lt;br&gt;
  Don't share security credentials between accounts to allow users &lt;br&gt;
  from another AWS account to access resources in your AWS &lt;br&gt;
  account. Instead, use IAM roles. You can define a role that &lt;br&gt;
  specifies what permissions the IAM users in the other account &lt;br&gt;
  are allowed. You can also designate which AWS accounts have the &lt;br&gt;
  IAM users that are allowed to assume the role.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do not share access keys&lt;/strong&gt;&lt;br&gt;
  Do not embed access keys within unencrypted code or share these &lt;br&gt;
  security credentials between users in your AWS account. For &lt;br&gt;
  applications that need access to AWS, configure the program to &lt;br&gt;
  retrieve temporary security credentials using an IAM role. To &lt;br&gt;
  allow your users individual programmatic access, create a user &lt;br&gt;
  with personal access keys.&lt;br&gt;
&lt;strong&gt;Rotate credentials regularly&lt;/strong&gt;&lt;br&gt;
  If a password or access key is compromised without your &lt;br&gt;
  knowledge, you limit how long the credentials can be used to &lt;br&gt;
  access your resources. Change your own passwords and access keys &lt;br&gt;
  regularly, and make sure that all IAM users in your account do &lt;br&gt;
  as well. You can apply a custom password policy to your account &lt;br&gt;
  to require all your IAM user to rotate their IAM passwords.&lt;br&gt;
&lt;strong&gt;Remove unnecessary credentials&lt;/strong&gt;&lt;br&gt;
  You can find unused passwords or access keys using the console, &lt;br&gt;
  using the CLI or API, or by downloading the credentials report. &lt;br&gt;
  Passwords and access keys that have not been used recently might &lt;br&gt;
  be good candidates for removal. If you created an IAM user for &lt;br&gt;
  an application that does not use the console then the IAM &lt;br&gt;
  doesn't need a password.&lt;br&gt;
&lt;strong&gt;Use policy conditions for extra security&lt;/strong&gt;&lt;br&gt;
  You can define the conditions under which your IAM policies &lt;br&gt;
  allow access to a resource. For example, you can write &lt;br&gt;
  conditions to specify a range of allowable IP addresses that a &lt;br&gt;
  request must come from. You can also set conditions that require &lt;br&gt;
  the use of SSL or MFA (multi-factor authentication).&lt;br&gt;
&lt;strong&gt;Monitor activity in your AWS account&lt;/strong&gt;&lt;br&gt;
  Logging features are available in the following AWS services:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Amazon CloudFront.&lt;/li&gt;
&lt;li&gt;AWS CloudTrail.&lt;/li&gt;
&lt;li&gt;Amazon CloudWatch.&lt;/li&gt;
&lt;li&gt;AWS Config.&lt;/li&gt;
&lt;li&gt;Amazon Simple Storage Service&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>aws</category>
      <category>cloudskills</category>
      <category>security</category>
    </item>
    <item>
      <title>Loan Calculator Library</title>
      <author>Stephen</author>
      <pubDate>Tue, 20 Jul 2021 18:15:20 +0000</pubDate>
      <link>https://dev.to/knock/loan-calculator-library-4ogg</link>
      <guid>https://dev.to/knock/loan-calculator-library-4ogg</guid>
      <description>&lt;p&gt;As part of Knock’s mission to make home buying and selling easy, we launched the Knock &lt;a href="https://blog.knock.com/knock-home-swap/"&gt;Home Swap&lt;/a&gt;™ almost exactly one year ago. Offering competitive financial products to our clients brought with it a host of opportunities, challenges, and new features for Knockstars to develop!&lt;/p&gt;

&lt;p&gt;For example, take this Home Swap interest rates card from Knock HomePro (&lt;a href="https://play.google.com/store/apps/details?id=com.knockpoc&amp;amp;hl=en_US&amp;amp;gl=US"&gt;Android&lt;/a&gt; / &lt;a href="https://apps.apple.com/us/app/knock-homepro/id1446291303"&gt;iOS&lt;/a&gt;), our app for Real Estate agents:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jv_TRKpV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r22g18fdr5khom1obga0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jv_TRKpV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r22g18fdr5khom1obga0.png" alt="Screen Shot 2021-07-20 at 9.53.25 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We brought mortgage rates into the HomePro app to show agents and their customers that we offer competitive interest rates. We are also legally required to show the Annual Percentage Rate (APR) whenever we provide an interest rate. This gives agents and customers a uniform metric to compare interest rates and fees across lenders.&lt;/p&gt;

&lt;p&gt;To our surprise, it was difficult to find a simple &lt;a href="https://www.npmjs.com/"&gt;NPM&lt;/a&gt; module to convert an interest rate to APR the way that innumerable online calculators do (&lt;a href="https://www.calculator.net/apr-calculator.html"&gt;1&lt;/a&gt;, &lt;a href="https://www.calculatorsoup.com/calculators/financial/apr-calculator.php"&gt;2&lt;/a&gt;, &lt;a href="https://www.calculatestuff.com/financial/apr-calculator"&gt;3&lt;/a&gt;, the list goes on!). In particular, we could not find a module that would properly account for the various parameters (payment frequency, loaned fees, upfront fees, etc.) which are readily available in many of the online tools.&lt;/p&gt;

&lt;p&gt;And so, we created this open source module: &lt;a href="https://npm.im/@knockaway/loan-calculator"&gt;@knockaway/loan-calculator&lt;/a&gt;. The goal of this project is to make loan calculations as simple as using any one of the free online loan calculators. Just inputs and outputs! The first release includes methods to calculate APR, APY, periodic payments, and to convert compounding frequencies.&lt;/p&gt;

&lt;p&gt;Have an idea for a new loan calculator function? Visit our &lt;a href="https://github.com/knockaway/loan-calculator"&gt;GitHub&lt;/a&gt; page to make a contribution or feature request. Happy calculating!&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>node</category>
    </item>
    <item>
      <title> Top Javascript Project For Beginners</title>
      <author>Rocky</author>
      <pubDate>Tue, 20 Jul 2021 18:05:33 +0000</pubDate>
      <link>https://dev.to/codelivly/top-javascript-project-for-beginners-2ca4</link>
      <guid>https://dev.to/codelivly/top-javascript-project-for-beginners-2ca4</guid>
      <description>&lt;p&gt; &lt;span&gt;This page lists over &lt;/span&gt;&lt;span&gt;10 JavaScript projects for beginners&lt;/span&gt;&lt;span&gt;! There are no frameworks and each completed project includes the description, my summary, and the source files to download. We've compiled the list with over 100 JavaScript projects for beginners because the key to becoming a great JavaScript Developer is to practice, practice, practice. You know this, and I know this.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;10 Days of Code challenges you to code for 10 days. Wouldn't it be nice if you actually built a new JavaScript project each day? It's very difficult to find a comprehensive list of JavaScript projects for beginners on the internet.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;So, how do you, as a beginner to intermediate JavaScript developer begin to find projects for #100DaysofCode to consistently code for 100 days? Where do you get your motivation to make your own JavaScript projects?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;It's a tough decision.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I know.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;This is why I created this site with over &lt;/span&gt;&lt;span&gt;10 JavaScript projects for beginners&lt;/span&gt;&lt;span&gt;! I wanted you to no longer have to endlessly surf the internet to find 100 projects in 100 different locations that you could do as a JavaScript beginner!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;This list is composed of over 100 recommended JavaScript projects for beginners and intermediate JavaScript developers alike! In other words, now you have no more excuses! You're going to do better because &lt;/span&gt;&lt;span&gt;you are determined to be the best JavaScript developer in your field&lt;/span&gt;&lt;span&gt;. And because you've come across this page looking for JavaScript projects for beginners, boy do I have a list of JavaScript projects for you!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;You'll find more than 10 small to medium sized JavaScript projects that I challenge you to build BEFORE you jump to learning a new Framework such as React, Angular, or Vue. And you should definitely do each and every one of the projects on this list of JavaScript projects for beginners &lt;/span&gt;&lt;span&gt;before&lt;/span&gt;&lt;span&gt; moving on to client-side scripting with Node.js.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;List of 10+ JavaScript Projects for Beginners&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Follow the link to read the project's objective, see it in action, and to download the source files. &lt;/span&gt;&lt;span&gt;If no link, I haven't completed it&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;yet&lt;/span&gt;&lt;span&gt;. But you can get all the projects and the video solutions from the recommended courses below this list on this page.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;span&gt;Read More: &lt;a href="https://www.codelivly.com/the-best-beginner-javascript-projects-for-2021/"&gt;Javascript Project For Beginners&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>IBM Cloud Deployment 4 Ways: IBM Cloud Kubernetes Service</title>
      <author>Jenna Ritten</author>
      <pubDate>Tue, 20 Jul 2021 17:52:57 +0000</pubDate>
      <link>https://dev.to/ibmdeveloper/ibm-cloud-deployment-4-ways-ibm-cloud-kubernetes-service-4if</link>
      <guid>https://dev.to/ibmdeveloper/ibm-cloud-deployment-4-ways-ibm-cloud-kubernetes-service-4if</guid>
      <description>&lt;h1&gt;
  &lt;a href="#welcome-back-to-tutorial-tuesday"&gt;
  &lt;/a&gt;
  Welcome back to Tutorial Tuesday!
&lt;/h1&gt;

&lt;p&gt;This week we'll be exploring cloud and hybrid &lt;strong&gt;Platform-as-a-Service&lt;/strong&gt; (&lt;strong&gt;PaaS&lt;/strong&gt;) deployment models, and we'll take a look at the IBM PaaS products and offerings. If you're new to cloud computing, you might have been put off by the overbearing amount of acronyms used. Just about everything is sold as a service (aaS) these days, even transportation. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nIjTqXWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2xdacd0x0uggnp22ozl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nIjTqXWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2xdacd0x0uggnp22ozl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To clarify some of the deployment models, let’s have a look at some of these aaS acronyms. IaaS is Infrastructure-as-a-Service, PaaS is Platform-as-a-Service, CaaS is Containers-as-a-Service, and FaaS is Serverless, which is also known as Function-as-a-Service.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#platformasaservice-paas"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.ibm.com/cloud/learn/paas"&gt;Platform-as-a-Service&lt;/a&gt; (&lt;strong&gt;PaaS&lt;/strong&gt;)
&lt;/h2&gt;

&lt;p&gt;PaaS, or Platform-as-a-Service, is a cloud computing model that provides customers a complete platform—hardware, software, and infrastructure—for developing, running, and managing applications without the cost, complexity, and inflexibility of building and maintaining that platform on-premises.&lt;/p&gt;

&lt;p&gt;The PaaS provider hosts everything—servers, networks, storage, operating system software, databases—at their data center; the customer uses it all for a for a monthly fee based on usage and can purchase more resources on-demand as needed. In this way, PaaS lets your development teams to build, test, deploy, maintain, update, and scale applications (and to innovate in response to market opportunities and threats) much more quickly and less expensively than they could if you had to build out and manage your own on-premises platform.&lt;/p&gt;

&lt;p&gt;IBM PaaS &lt;a href="https://www.ibm.com/cloud/learn/paas"&gt;Products &amp;amp; Offerings&lt;/a&gt;: &lt;a href="https://www.ibm.com/cloud/kubernetes-service"&gt;IBM Cloud Kubernetes Service&lt;/a&gt;, &lt;a href="https://www.ibm.com/cloud/cloud-foundry"&gt;IBM Cloud Foundry&lt;/a&gt; &amp;amp; &lt;a href="https://www.ibm.com/cloud/openshift"&gt;Red Hat OpenShift on IBM Cloud&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pros to &lt;strong&gt;PaaS&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Faster Time to Market&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Faster, Easier, Less-Risky Adoption of a Wider Range of Resources&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Easy, Cost-Effective Scalability&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lower Costs&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ibm-cloud-kubernetes-service"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.ibm.com/cloud/kubernetes-service"&gt;IBM Cloud Kubernetes Service&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Deploy secure, highly available clusters in a native Kubernetes experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-ibm-cloud-kubernetes-service"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.ibm.com/cloud/kubernetes-service"&gt;What is IBM Cloud Kubernetes Service&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;IBM Cloud Kubernetes Service is a managed offering built for creating a Kubernetes cluster of compute hosts to deploy and manage containerized apps on IBM Cloud. A certified Kubernetes solution, it provides intelligent scheduling, self-healing, horizontal scaling and more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.ibm.com/cloud/kubernetes-service/features"&gt;Benefits&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Drive innovation, security and scale.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Native Kubernetes&lt;/strong&gt;&lt;br&gt;
Use tools and APIs you know for a consistent experience, even working across cloud infrastructures.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Secure Clusters&lt;/strong&gt;&lt;br&gt;
Guard your cluster infrastructure, isolate compute resources and ensure compliance in deployments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leverage IBM Watson&lt;/strong&gt;&lt;br&gt;
Integrate cognitive solutions with a variety of IBM Watson® APIs to extend the power of your apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Intelligent Scheduling&lt;/strong&gt;&lt;br&gt;
Automatically deploy containers on compute hosts based on available resources across the cluster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-Healing Containers&lt;/strong&gt;&lt;br&gt;
Configure a custom Kubernetes cluster that autoscales and recovers containers per defined policies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Logging &amp;amp; Monitoring&lt;/strong&gt;&lt;br&gt;
Use the built-in logging and metrics service to monitor the performance of clusters and containers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#addon-capabilities"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.ibm.com/cloud/kubernetes-service/features"&gt;Add-On Capabilities&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Open source technologies to add to your Kubernetes cluster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Istio on IBM Cloud&lt;/strong&gt;&lt;br&gt;
Connect, manage and secure networks of microservices — regardless of platform, source or vendor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Knative on IBM Cloud&lt;/strong&gt;&lt;br&gt;
Build, deploy and run cloud-native, serverless applications on Kubernetes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tekton on IBM Cloud&lt;/strong&gt;&lt;br&gt;
Create Kubernetes-native CI/CD pipelines with maximum speed and flexibility.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#try-it-out"&gt;
  &lt;/a&gt;
  &lt;a href="https://ibm.biz/cloud-sign-up"&gt;Try It Out!&lt;/a&gt;
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#create-a-kubernetes-cluster-for-free"&gt;
  &lt;/a&gt;
  Create a Kubernetes Cluster for FREE!
&lt;/h2&gt;

&lt;p&gt;Create one IBM Cloud Kubernetes Service cluster at no charge, available for 30 days. Plus, get access to over 40 always-free products, a USD 200 credit, and try Kubernetes-native integrations to extend the capabilities of your cluster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dev-setup"&gt;
  &lt;/a&gt;
  Dev Setup
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Sign Up for a Free &lt;a href="https://ibm.biz/cloud-sign-up"&gt;IBM Cloud Account&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-your-free-kubernetes-cluster"&gt;
  &lt;/a&gt;
  Set Up Your Free Kubernetes Cluster
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O7_v8bE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gni7c2ucc5ojgt8kibp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O7_v8bE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gni7c2ucc5ojgt8kibp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find &lt;strong&gt;Kubernetes Service&lt;/strong&gt; from the search bar and click on it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GVyKWzT9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnv3morrdab0j0jw5bfa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GVyKWzT9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnv3morrdab0j0jw5bfa.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Free&lt;/strong&gt; from the Pricing Plan dropdown menu.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6xts4hvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dvn04e1a16uf05or93e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6xts4hvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dvn04e1a16uf05or93e.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gx7uYF6g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/coonwytbtkco39shtp7f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gx7uYF6g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/coonwytbtkco39shtp7f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wait for your Kubernetes cluster to be deployed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RGdkg-Zy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/828d86goj0147096pzu5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGdkg-Zy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/828d86goj0147096pzu5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scroll down to view the &lt;strong&gt;Capabilities Add-Ons&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#addons"&gt;
  &lt;/a&gt;
  Add-Ons
&lt;/h2&gt;

&lt;p&gt;Enhance your cluster's capabilities by installing add-ons.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z94BDejn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro48xlc0n3f4vkhwndka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z94BDejn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro48xlc0n3f4vkhwndka.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One-click install capabilities add-ons.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#kubernetes-dashboard"&gt;
  &lt;/a&gt;
  Kubernetes Dashboard
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RGdkg-Zy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/828d86goj0147096pzu5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGdkg-Zy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/828d86goj0147096pzu5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Kubernetes dashboard&lt;/strong&gt; to access the Kubernetes Dashboard.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#complete-the-kubernetes-on-ibm-cloud-open-labs-to-earn-your-kubernetes-certification-badge-for-free"&gt;
  &lt;/a&gt;
  Complete the &lt;a href="https://developer.ibm.com/openlabs/iks"&gt;Kubernetes on IBM Cloud Open Labs&lt;/a&gt; to Earn Your Kubernetes Certification Badge for FREE!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-phL4m4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71te5w7i6q1rmzzdauad.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-phL4m4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71te5w7i6q1rmzzdauad.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#congratulations"&gt;
  &lt;/a&gt;
  CONGRATULATIONS!
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EnI1C-97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8tvevzwh914dfudp224.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EnI1C-97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8tvevzwh914dfudp224.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tune in next week for our next Tutorial Tuesday post.&lt;/p&gt;

&lt;p&gt;Connect w Me!&lt;br&gt;
&lt;a href="https://linktr.ee/jritten"&gt;https://linktr.ee/jritten&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to send the authorization header using Axios
</title>
      <author>devcse</author>
      <pubDate>Tue, 20 Jul 2021 17:51:07 +0000</pubDate>
      <link>https://dev.to/jewelcse/how-to-send-the-authorization-header-using-axios-a70</link>
      <guid>https://dev.to/jewelcse/how-to-send-the-authorization-header-using-axios-a70</guid>
      <description>&lt;p&gt;Axios is mostly used javascript promise-based HTTP client for end-to-end requesting resources from the serve side application. Generally, in simple application we don’t have to put the header for any get or post request. but most of the cases, security is a big issue sometimes we need to add authorization header to get resources from the server or save resource to the server. That’s why we need to add the headers with request.&lt;/p&gt;

&lt;p&gt;So, let’s create a header object according you needs:&lt;/p&gt;

&lt;p&gt;const token = "your_token"&lt;/p&gt;

&lt;p&gt;let headers = {&lt;br&gt;
        "Content-type": "application/json; charset=UTF-8",&lt;br&gt;
        "Authorization": 'Bearer ' + token&lt;br&gt;
 };&lt;/p&gt;

&lt;p&gt;Learn more: &lt;a href="https://codesnipeet.com/how-to-send-the-authorization-header-using-axios/"&gt;https://codesnipeet.com/how-to-send-the-authorization-header-using-axios/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
