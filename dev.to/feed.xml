<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Merge sort algorithm</title>
      <author>Aya Bouchiha</author>
      <pubDate>Wed, 23 Jun 2021 21:38:31 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/merge-sort-algorithm-1l55</link>
      <guid>https://dev.to/ayabouchiha/merge-sort-algorithm-1l55</guid>
      <description>&lt;h2&gt;
  &lt;a href="#definition-of-the-merge-sort-algorithm"&gt;
  &lt;/a&gt;
  Definition of the merge sort algorithm
&lt;/h2&gt;

&lt;p&gt;merge sort is an efficient algorithm, and one of Divide and Conquer algorithms that splits the giving array into two halves, and then merge them in a sorted manner.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time-complexity-of-merge-sort"&gt;
  &lt;/a&gt;
  Time complexity of merge sort
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;best-case&lt;/th&gt;
&lt;th&gt;average case&lt;/th&gt;
&lt;th&gt;worst-case&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;O(n log n)&lt;/td&gt;
&lt;td&gt;O(n log n)&lt;/td&gt;
&lt;td&gt;O(n log n)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#space-complexity"&gt;
  &lt;/a&gt;
  Space complexity
&lt;/h2&gt;

&lt;p&gt;The space complexity of merge sort is &lt;strong&gt;O(n)&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-using-merge-sort-algorithm"&gt;
  &lt;/a&gt;
  Advantages of using merge sort algorithm
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Fast for large arrays unlike selection, insertion, and bubble sort it doesn't go through the whole array many times.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-using-merge-sort-algorithm"&gt;
  &lt;/a&gt;
  Disadvantages of using merge sort algorithm
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;extra space to store subarrays&lt;/li&gt;
&lt;li&gt;slow for small arrays&lt;/li&gt;
&lt;li&gt;the algorithm does the whole process even the array is already sorted&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#implementation-of-merge-sort-using-python"&gt;
  &lt;/a&gt;
  Implementation of merge sort using python
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;MergeSortAlgorithm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
        [ name ] =&amp;gt; merge sort
        [ type ] =&amp;gt; sorting algorithms
        [ time complexity ] =&amp;gt; O(n log n)
        [ space complexity ] =&amp;gt; O(n)
        [ params ] =&amp;gt; ( 
            arr {list} list to sort
        )
    """&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;#getting the middle of the giving array 
&lt;/span&gt;        &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="c1"&gt;# left half 
&lt;/span&gt;        &lt;span class="n"&gt;leftHalf&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="c1"&gt;# right half
&lt;/span&gt;        &lt;span class="n"&gt;rightHalf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
        &lt;span class="c1"&gt;# sort left half
&lt;/span&gt;        &lt;span class="n"&gt;MergeSortAlgorithm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leftHalf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# sort right half
&lt;/span&gt;        &lt;span class="n"&gt;MergeSortAlgorithm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rightHalf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leftHalf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rightHalf&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;leftHalf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rightHalf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rightHalf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;leftHalf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="c1"&gt;# inserting to the sortedArray the rest of the leftHalf
&lt;/span&gt;        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leftHalf&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;leftHalf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="c1"&gt;# inserting to the sortedArray the rest of the rightHalf
&lt;/span&gt;        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rightHalf&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rightHalf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#references-and-useful-resources"&gt;
  &lt;/a&gt;
  References and useful resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://getrevising.co.uk/grids/merge-sort-advantages-and-disadvantages"&gt;https://getrevising.co.uk/grids/merge-sort-advantages-and-disadvantages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tutorialspoint.com/data_structures_algorithms/merge_sort_algorithm.htm"&gt;https://www.tutorialspoint.com/data_structures_algorithms/merge_sort_algorithm.htm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/merge-sort/"&gt;https://www.geeksforgeeks.org/merge-sort/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.interviewbit.com/tutorial/merge-sort-algorithm/#:~:text=Merge%20sort%20is%20one%20of,results%20into%20a%20sorted%20list."&gt;https://www.interviewbit.com/tutorial/merge-sort-algorithm/#:~:text=Merge%20sort%20is%20one%20of,results%20into%20a%20sorted%20list.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you so much for your time! :)&lt;br&gt;
#day_11&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>beginners</category>
      <category>computerscience</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to integrate i18next Internationalization with your React project?</title>
      <author>Brayan Arrieta</author>
      <pubDate>Wed, 23 Jun 2021 21:31:36 +0000</pubDate>
      <link>https://dev.to/brayanarrieta/how-to-integrate-i18next-internationalization-with-your-react-project-2368</link>
      <guid>https://dev.to/brayanarrieta/how-to-integrate-i18next-internationalization-with-your-react-project-2368</guid>
      <description>&lt;p&gt;When are working on several projects and countries the language is one of the most important facts that we need to keep in mind, especially if our application was developed with the goal of having an international market. &lt;/p&gt;

&lt;p&gt;In some cases handle the internationalization in the projects is difficult and complicated, there are different tools that can be used with different approaches. For that reason with the post, I will explain to you about the &lt;strong&gt;react-i18next&lt;/strong&gt; framework is a useful tool that can help us to integrate internationalization to our &lt;strong&gt;React&lt;/strong&gt; project in a quick and awesome way.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i18next"&gt;
  &lt;/a&gt;
  i18next
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;I18next is an internationalization framework written in and for JavaScript. But it's much more than that. I18next goes beyond just providing the standard i18n features such as (plurals, context, interpolation, format). It provides you with a complete solution to localize your product from web to mobile and desktop.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see i18next is a framework that will help us to apply internationalization features to our Javascript projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reacti18next"&gt;
  &lt;/a&gt;
  react-i18next
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;react-i18next is a powerful internationalization framework for React / React Native which is based on i18next. The module provides multiple components eg. to assert that needed translations get loaded or that your content gets rendered when the language changes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;react-i18next is the best option when you want to add internationalization to your React project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-do-it"&gt;
  &lt;/a&gt;
  Let's do it
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#create-react-project"&gt;
  &lt;/a&gt;
  Create React project
&lt;/h3&gt;

&lt;p&gt;First of all, we need to create a React project with the next command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app react-i18next-example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-dependencies"&gt;
  &lt;/a&gt;
  Install dependencies
&lt;/h3&gt;

&lt;p&gt;After that, we need to install the project dependencies&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install react-i18next i18next --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see we have installed also &lt;strong&gt;i18next&lt;/strong&gt; when we will use &lt;strong&gt;react-i18next&lt;/strong&gt; the reason is that &lt;strong&gt;i18next&lt;/strong&gt; is the core that provides all translation functionality while &lt;strong&gt;react-i18next&lt;/strong&gt; gives some extra power for proper use in React&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configure"&gt;
  &lt;/a&gt;
  Configure
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#i18njs"&gt;
  &lt;/a&gt;
  i18n.js
&lt;/h4&gt;

&lt;p&gt;We need to create a new file &lt;strong&gt;i18n.js&lt;/strong&gt; beside our index.js containing the following content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;i18n&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;i18next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;initReactI18next&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-i18next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;en&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;translation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome to React&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome to React and react-i18next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;translation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome to React&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bienvenue à React et react-i18next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;i18n&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initReactI18next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;interpolation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;escapeValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The interesting part here is by &lt;code&gt;i18n.use(initReactI18next)&lt;/code&gt; we pass the i18n instance to &lt;strong&gt;react-i18next&lt;/strong&gt; which will make it available for all the components via the context API.&lt;/p&gt;

&lt;p&gt;After that, we need to import the &lt;strong&gt;i18n.js&lt;/strong&gt; file into our index.js file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./i18n&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we that done the previous steps we can start to use &lt;strong&gt;react-i18next&lt;/strong&gt;, for example, we can use the useTranslation hook.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#appjs"&gt;
  &lt;/a&gt;
  App.js
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useTranslation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-i18next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTranslation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome to React&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, you will the next page based on the location language English or French&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#translate-your-content-with-different-options"&gt;
  &lt;/a&gt;
  Translate your content with different options
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;react-i18next&lt;/strong&gt; offers some different options when we need to use internationalization in our project, some of them are&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-usetranslation-hook"&gt;
  &lt;/a&gt;
  Using useTranslation hook
&lt;/h3&gt;

&lt;p&gt;Using the hook in functional components is one of the options you got. The &lt;strong&gt;t&lt;/strong&gt; function is the main function in &lt;strong&gt;i18next&lt;/strong&gt; to translate content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useTranslation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-i18next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTranslation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Welcome to React&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Learn more about the hook &lt;a href="https://react.i18next.com/latest/usetranslation-hook"&gt;useTranslation&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-withtranslation-hoc"&gt;
  &lt;/a&gt;
  Using withTranslation HOC
&lt;/h3&gt;

&lt;p&gt;Using higher order components is one of the most used methods to extend existing components by passing additional props to them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;withTranslation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-i18next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Welcome to React&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;withTranslation&lt;/span&gt;&lt;span class="p"&gt;()(&lt;/span&gt;&lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Learn more about the higher order component &lt;a href="https://react.i18next.com/latest/withtranslation-hoc"&gt;withTranslation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-render-prop"&gt;
  &lt;/a&gt;
  Using the render prop
&lt;/h3&gt;

&lt;p&gt;The render prop enables you to use the t function inside your component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Translation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-i18next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Translation&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Welcome to React&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Translation&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Learn more about the render prop &lt;a href="https://react.i18next.com/latest/translation-render-prop"&gt;Translation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-trans-component"&gt;
  &lt;/a&gt;
  Using the Trans component
&lt;/h3&gt;

&lt;p&gt;The Trans component is the best way to translate a JSX tree into one translation. This enables you to eg. easily translate text containing a link component or formatting like &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Trans&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-i18next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Trans&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;H1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/H1&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;Trans&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h4&gt;

&lt;p&gt;The translation key and content, in this case, should be declared with the tags as the next example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"&amp;lt;0&amp;gt;Welcome to React&amp;lt;/0&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;0&amp;gt;Welcome to React and react-i18next&amp;lt;/0&amp;gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#interpolation"&gt;
  &lt;/a&gt;
  Interpolation
&lt;/h2&gt;

&lt;p&gt;Interpolation is one of the most used functionalities in I18N. It allows the integration of dynamic values into your translations. Per default, interpolation values get escaped to mitigate XSS attacks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;With &lt;strong&gt;i18next&lt;/strong&gt; we can pass params to our translations that will be integrated with the final translation render to do that we need to add the keys are strings surrounded by curly brackets:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{{what}} is {{how}}"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So when we call that translation we can pass the params to the &lt;strong&gt;t&lt;/strong&gt; function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import "./styles.css";
import { useTranslation } from "react-i18next";

export default function App() {
  const { t } = useTranslation();
  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;h1&amp;gt;{t("key", { what: "interpolation", how: "great" })}&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see the example more detailed here&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/react-i18next-example-interpolation-jee12?autoresize=1&amp;amp;fontsize=14&amp;amp;hidenavigation=1&amp;amp;moduleview=1&amp;amp;theme=dark"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pzpI10jk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codesandbox.io/static/img/play-codesandbox.svg" alt="Edit react-i18next-example-interpolation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-with-data-models"&gt;
  &lt;/a&gt;
  Working with data models
&lt;/h2&gt;

&lt;p&gt;Another awesome thing that can be used with interpolation is pass data models, we need to declare the translation key in a next way&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"I am {{author.name}}"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the case of the React Component you just need to pass the &lt;code&gt;author&lt;/code&gt; data to the interpolation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useTranslation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-i18next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTranslation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Brayan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;github&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Arrieta&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt; &lt;span class="p"&gt;})}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you see &lt;strong&gt;react-i18next&lt;/strong&gt; and &lt;strong&gt;i18next&lt;/strong&gt; provides some awesome features that can be used in our projects in the case that our application wants to have an international market.&lt;/p&gt;

&lt;p&gt;I hope you find this article really helpful to use internationalization in your &lt;strong&gt;React&lt;/strong&gt; projects. I will be updating this post based on your comments and recommendations so let me know in any case. Thanks! 👍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/brayanarrieta"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bs6qmXj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dbrayanarrieta%26button_colour%3D5F7FFF%26font_colour%3Dffffff%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://react.i18next.com"&gt;react-i18next&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.i18next.com/"&gt;i18next&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to change the git commit author?</title>
      <author>Brayan Arrieta</author>
      <pubDate>Wed, 23 Jun 2021 21:24:58 +0000</pubDate>
      <link>https://dev.to/brayanarrieta/how-to-change-the-git-commit-author-56mg</link>
      <guid>https://dev.to/brayanarrieta/how-to-change-the-git-commit-author-56mg</guid>
      <description>&lt;p&gt;Becoming a &lt;strong&gt;Git&lt;/strong&gt; master could be complicated, due that there are several options that &lt;strong&gt;Git&lt;/strong&gt; provides us and some of them need to be used based on the rules that the team defines around the process of the project that we are working on right now.&lt;/p&gt;

&lt;p&gt;Everyone at some moment has needed help with &lt;strong&gt;Git&lt;/strong&gt;, so the main idea is to try to recompile that tips or common problems that you can have with Git.&lt;/p&gt;

&lt;p&gt;In this post, we will see what you can do in the case that an error committed with a wrong git user, email, or something like that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#change-last-commit-author"&gt;
  &lt;/a&gt;
  Change last commit author
&lt;/h2&gt;

&lt;p&gt;This is the easiest scenery that you can a front, basically, we just need to run the next command in the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit --amend --author="&amp;lt;name&amp;gt; &amp;lt;email&amp;gt;" --no-edit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-commit-was-pushed-remotely"&gt;
  &lt;/a&gt;
  The commit was pushed remotely?
&lt;/h3&gt;

&lt;p&gt;In the case that the commit was pushed remotely we need to run an extra commit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push -f origin &amp;lt;branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, you can do just a &lt;code&gt;git log&lt;/code&gt; command and check in the history that the change was applied.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#change-more-than-a-commit"&gt;
  &lt;/a&gt;
  Change more than a commit
&lt;/h2&gt;

&lt;p&gt;For these cases, the best option could be to apply a rebase of the branch that you are working on right now. First of all please make sure that you are in the branch that you want to change.&lt;/p&gt;

&lt;p&gt;For example, we have a branch called &lt;strong&gt;feature/test&lt;/strong&gt; and the last two commits were pushed with the wrong email. So we need to change the author information for the commits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2c6eececec35ece0dc52c683de2dbc34553b283b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;1c6eececec35ece0dc52c683de2dbc34553b283b&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;commit 2c6eececec35ece0dc52c683de2dbc34553b283b &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; feature/test, origin/feature/test&lt;span class="o"&gt;)&lt;/span&gt;
Author: Brayan Arrieta &amp;lt;wrong-email&amp;gt;
Date:   Tue Jun 22 16:06:10 2021 &lt;span class="nt"&gt;-0600&lt;/span&gt;

    Feat: change some stuff

commit 1c6eececec35ece0dc52c683de2dbc34553b283b &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; feature/test, origin/feature/test&lt;span class="o"&gt;)&lt;/span&gt;
Author: Brayan Arrieta &amp;lt;wrong-email&amp;gt;
Date:   Tue Jun 22 16:04:10 2021 &lt;span class="nt"&gt;-0600&lt;/span&gt;

    Feat: change server

commit 4d133f673250ed628e58371a8b246d68171fbbf9 &lt;span class="o"&gt;(&lt;/span&gt;origin/master, origin/HEAD, master&lt;span class="o"&gt;)&lt;/span&gt;
Merge: 144c453125 cb1ac7e774
Author: Other User &amp;lt;otheruser@email.com&amp;gt;
Date:   Tue Jun 22 13:40:43 2021 &lt;span class="nt"&gt;-0500&lt;/span&gt;

    Merge branch &lt;span class="s1"&gt;'feature/test2'&lt;/span&gt; into &lt;span class="s1"&gt;'master'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To fix that first of all we need to do the &lt;strong&gt;rebase&lt;/strong&gt; of the branch with the next command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git rebase -i -p &amp;lt;previous-commit-id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the param &lt;strong&gt;previous-commit-id&lt;/strong&gt; we need to pass the previous commit id before the commits that we want to fix, for example in this case the command will be &lt;code&gt;git rebase -i -p 4d133f673250ed628e58371a8b246d68171fbbf9&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After that will see something similar to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pick 2c6eece Feat: change some stuff
pick 1c6eece Feat: change server

# Rebase 4d133f6..2c6eece onto 4d133f6 (4 commands)
#
# Commands:
# p, pick &amp;lt;commit&amp;gt; = use commit
# r, reword &amp;lt;commit&amp;gt; = use commit, but edit the commit message
# e, edit &amp;lt;commit&amp;gt; = use commit, but stop for amending
# s, squash &amp;lt;commit&amp;gt; = use commit, but meld into previous commit
# f, fixup &amp;lt;commit&amp;gt; = like "squash", but discard this commit's log message
# x, exec &amp;lt;commit&amp;gt; = run command (the rest of the line) using shell
# d, drop &amp;lt;commit&amp;gt; = remove commit
# l, label &amp;lt;label&amp;gt; = label current HEAD with a name
# t, reset &amp;lt;label&amp;gt; = reset HEAD to a label
# m, merge [-C &amp;lt;commit&amp;gt; | -c &amp;lt;commit&amp;gt;] &amp;lt;label&amp;gt; [# &amp;lt;oneline&amp;gt;]
# .       create a merge commit using the original merge commit's
# .       message (or the oneline, if no original merge commit was
# .       specified). Use -c &amp;lt;commit&amp;gt; to reword the commit message.
#
# These lines can be re-ordered; they are executed from top to bottom.
#
".git/rebase-merge/git-rebase-todo" 28L, 1267C
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that just make sure that all the commit that has the wrong author have the &lt;strong&gt;p&lt;/strong&gt; or &lt;strong&gt;pick&lt;/strong&gt; in the commit list. In the case that needs to change something just type with your keyboard &lt;strong&gt;i&lt;/strong&gt; to enter in insert mode, apply the change, and &lt;strong&gt;ESC&lt;/strong&gt;. After that, we just need to type &lt;strong&gt;:wq&lt;/strong&gt; on our keyboard to save that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Commands&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;i&lt;/strong&gt;: Enter to insert mode&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ESC&lt;/strong&gt;: Exit of the insert mode&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;:wq&lt;/strong&gt;: Write and quit&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;:q&lt;/strong&gt;: Quit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After that &lt;strong&gt;Git&lt;/strong&gt; will be processing the rebase and in the commit that you put the &lt;strong&gt;pick&lt;/strong&gt; will be displayed a message something like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Stopped at 1c6eece... Feat: change server
You can amend the commit now, with

    git commit --amend

Once you are satisfied with your changes, run

    git rebase --continue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When that appears that message mention we have some options to change the author or just continue with the command &lt;code&gt;git rebase --continue&lt;/code&gt;. In the case that we want to change the author need to execute the next commit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit --amend --author="Brayan Arrieta &amp;lt;correct-email&amp;gt;" --no-edit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that just continue to the next commit with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git rebase --continue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Something important to mention is that the previous steps mentioned need to be applied to every commit with the pick option. At you will see a message something like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Successfully rebased and updated refs/heads/feature/test.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that just need to execute a push command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push origin &amp;lt;branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-commits-were-pushed-remotely"&gt;
  &lt;/a&gt;
  The commits were pushed remotely?
&lt;/h3&gt;

&lt;p&gt;In the case that the commits were pushed remotely we need to run instead of the &lt;code&gt;git push origin &amp;lt;branch-name&amp;gt;&lt;/code&gt; command the next command, which will change the Git history of our branch with the fix.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push -f origin &amp;lt;branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you see we can change the commit author with some simple commands so go ahead in the case that afront that issue. I hope you find this article really helpful. I will be updating this post based on your comments and recommendations so let me know in any case. Thanks! 👍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/brayanarrieta"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bs6qmXj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dbrayanarrieta%26button_colour%3D5F7FFF%26font_colour%3Dffffff%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>PNG files can be animated via network latency</title>
      <author>Ben Halpern</author>
      <pubDate>Wed, 23 Jun 2021 21:07:01 +0000</pubDate>
      <link>https://dev.to/ben/png-files-can-be-animated-via-network-latency-2oeh</link>
      <guid>https://dev.to/ben/png-files-can-be-animated-via-network-latency-2oeh</guid>
      <description>&lt;p&gt;I saw this online and thought it was pretty neat. Check out this image:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.da.vidbuchanan.co.uk/adamation/image.png"&gt;https://www.da.vidbuchanan.co.uk/adamation/image.png&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's not overly useful, but you might learn something. &lt;a href="https://pyokagan.name/blog/2019-10-14-png/"&gt;Here is an interesting post&lt;/a&gt; related to the subject.&lt;/p&gt;

&lt;p&gt;Happy coding. ❤️&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>png</category>
    </item>
    <item>
      <title>Arrow Functions</title>
      <author>Shreyas Pahune</author>
      <pubDate>Wed, 23 Jun 2021 20:39:49 +0000</pubDate>
      <link>https://dev.to/shreyazz/arrow-functions-4d77</link>
      <guid>https://dev.to/shreyazz/arrow-functions-4d77</guid>
      <description>&lt;p&gt;Hey everyone 👋🏻, in this blog we are going discuss about :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arrow Functions V/S Regular Functions&lt;/li&gt;
&lt;li&gt;Advantages and Disadvantages of using Arrow Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Like I said in my &lt;a href="https://dev.to/shreyazz/es6-features-1ao8"&gt;previous blog&lt;/a&gt;, the arrow function is not a new concept, it is just a syntax revamp of the regular function in JS. The new syntax is very very easy, it is just a sugar coating around the old function syntax so without wasting anymore time let's start learning about arrow functions!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-arrow-functions-vs-regular-functions"&gt;
  &lt;/a&gt;
  1. Arrow Functions V/S Regular Functions
&lt;/h3&gt;

&lt;p&gt;We are going to discuss 4 different types of functions and we'll transform them from the old rusty ES5 syntax to ES6 syntax. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4 different types are going to be:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;  1. A named function with no parameters.&lt;br&gt;
    2. A named function with one parameter.&lt;br&gt;
    3. A named function with two parameters.&lt;br&gt;
    4. An unnamed function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Named function with no parameters :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pKfRmwF0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1fqt455qii416tcvwbj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pKfRmwF0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1fqt455qii416tcvwbj.png" alt="nameFunctionNoParam"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;As you can see in the above photo, we have to give the name of the function as a variable name and after an equal symbol &lt;code&gt;=&lt;/code&gt;  an opening and closing parenthesis &lt;code&gt;( )&lt;/code&gt; which will denote the function, leading with an arrow  &lt;code&gt;=&amp;gt;&lt;/code&gt; which is nothing but an equal sign and angular bracket. &lt;/p&gt;

&lt;p&gt;There is another way of making an one liner arrow function, you just have to give the function name as a variable name and &lt;code&gt;=&lt;/code&gt; sign leading with &lt;code&gt;=&amp;gt;&lt;/code&gt; arrow and the statement you want to return.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Named function with one parameter :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3QFSr2sM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izexel95gc0dsvmajz55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3QFSr2sM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izexel95gc0dsvmajz55.png" alt="nameFunctionOneParam"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;There is no change except in the parenthesis &lt;code&gt;( )&lt;/code&gt;  in which we will pass our parameters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Named function with two parameters :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wR6YC1k8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjeetfq6qtvh1q1xpsev.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wR6YC1k8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjeetfq6qtvh1q1xpsev.png" alt="nameFunctionTwoParam"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Unnamed function :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xie9NJOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/095g64q6944lpenxudop.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xie9NJOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/095g64q6944lpenxudop.png" alt="unamedFunction"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Isn't this cool??&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-advantages-and-disadvantages-of-using-arrow-functions"&gt;
  &lt;/a&gt;
  2.  Advantages and Disadvantages of using Arrow Functions
&lt;/h3&gt;

&lt;p&gt;Arrow functions make our code more concise and increases the readability of the code, the new syntax is really easy to adopt and takes no time to understand things.&lt;/p&gt;

&lt;p&gt;Apart from writing less and doing more Arrow Function can help us with &lt;code&gt;this&lt;/code&gt; keyword and scoping of variables, let me show you how.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SSGPj9tz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4mbz12bortj1u7hgatbj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SSGPj9tz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4mbz12bortj1u7hgatbj.png" alt="classThis"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here in this above image I have made a class with 2 member functions, arrow and regular which consists of &lt;code&gt;setTimeout&lt;/code&gt; to make a block of code so that we can see the scope of  &lt;code&gt;this&lt;/code&gt;  keyword using arrow functions v/s regular function.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here we will receive the name(Shreyas) and age(18) in the arrow function, as inside this function &lt;code&gt;this&lt;/code&gt; keyword will use the scope where it was created ( i.e. inside the class ) but on the other hand the regular function will use the scope where it is invoked or called i.e. which is outside the class and since  there is no name and age defined outside the class, we will receive &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One disadvantage I feel is, we can not use arrow function to define constructor. &lt;/p&gt;

&lt;p&gt;A constructor is a special function which is to be made inside every class, which basically sets default values and initializes them.&lt;/p&gt;

&lt;p&gt;In the above example you can see I have made a constructor function, but with normal function's syntax.&lt;/p&gt;




&lt;p&gt;Thank you so much for reading the whole blog 🎉! I hope you learnt something and if you did, do implement it, it would make your code more concise and readable. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Blockchain and its applications</title>
      <author>Vinayak Rawat</author>
      <pubDate>Wed, 23 Jun 2021 20:37:35 +0000</pubDate>
      <link>https://dev.to/vinayak27raw/blockchain-and-its-applications-nea</link>
      <guid>https://dev.to/vinayak27raw/blockchain-and-its-applications-nea</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hPoNWCxf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuuna18hsb831lcewliu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hPoNWCxf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuuna18hsb831lcewliu.png" alt="bl3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You might have heard about &lt;strong&gt;Bitcoin&lt;/strong&gt; but do you exactly know what's the main reason behind it? How it's being controlled what all process goes at the backend to make it work?&lt;br&gt;
While the answer to that is &lt;strong&gt;Blockchain&lt;/strong&gt;, you might have heard this word but let me help you to understand this in a simple way lets go&lt;/p&gt;

&lt;p&gt;So taking about Blockchain it's a technique to store information in a &lt;strong&gt;decentralized&lt;/strong&gt; manner, in simple words decentralization means no central authority can control the data, for example, &lt;strong&gt;Bitcoin&lt;/strong&gt; is based on blockchain no central agencies can control it. &lt;br&gt;
Now when we talk about storing the information we can simply write it down on paper or we can make an excel file on our computer, it will store data based on tables.&lt;br&gt;
When we say how blockchain stores information, it stored in blocks, let us understand it&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I2N8U_iK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xlrwouce43l9m8ok2oeu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I2N8U_iK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xlrwouce43l9m8ok2oeu.png" alt="hj"&gt;&lt;/a&gt;&lt;br&gt;
The upper face of this cube represents the data storing the block,&lt;br&gt;
the side face represents Hash, it is a unique identification of that particular block,&lt;br&gt;
and the face opposite to that represents the hash of the previous block let's understand that by a diagram&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kDvonKBc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7axmrfjbmt0x9gig7gi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kDvonKBc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7axmrfjbmt0x9gig7gi.png" alt="hk"&gt;&lt;/a&gt;&lt;br&gt;
You can see here the second block contains the same hash identification code.&lt;br&gt;
Now a very interesting thing here you can notice is if you try to manipulate data from a single block its identification code is changed and the same changes will be done to other blocks as well, which makes us come to a big advantage of &lt;strong&gt;blockchain&lt;/strong&gt; it is almost impossible to tamper data here because due to decentralization if someone tries to manipulate the data it will automatically be noticed by the other.&lt;br&gt;
Lets discuss a very important part of blockchain &lt;strong&gt;Miners&lt;/strong&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uBk-6Q6w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xchfo6usw1ao8k37fmxy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uBk-6Q6w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xchfo6usw1ao8k37fmxy.png" alt="678"&gt;&lt;/a&gt;&lt;br&gt;
The role of Miners is to verify the data which is added to the blockchain, in favor the systems working on blockchain get rewarded and if the data is misplaced they are punished too.&lt;br&gt;
Let's talk about a &lt;strong&gt;Real-life application&lt;/strong&gt; for blockchain.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9yVmHiQS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/40ollk5gr356d460s1e5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9yVmHiQS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/40ollk5gr356d460s1e5.png" alt="bl5"&gt;&lt;/a&gt;&lt;br&gt;
Let us say you board exam results after you clear your boards the results are kept in a digital locker now this locker data is decentralized means once the data is uploaded no one can tamper the data only the data can be added and it will be known to the system.&lt;br&gt;
Taking about some advantages&lt;br&gt;
1.Write-only, immutable, transparent data storage&lt;br&gt;
2.Resistant against malicious participants&lt;br&gt;
3.Open to everyone&lt;br&gt;
4.Decentralized, no need for intermediaries&lt;br&gt;
5.Consistent state across all participants&lt;/p&gt;

&lt;p&gt;In the end, I want to say that, Blockchain technology has far-reaching applications across many industries. Blockchain is already used to facilitate identity management, smart contracts, supply chain analysis, and much more. The full potential of blockchain technology likely remains to be discovered.&lt;br&gt;
If you want to explore more about its future do read this article&lt;br&gt;
&lt;a href="https://www.upgrad.com/blog/reasons-why-blockchain-technology-is-the-future/"&gt;Upgrad post&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for Reading&lt;br&gt;
Vinayak Rawat&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>database</category>
    </item>
    <item>
      <title>React Pagination Guide And Best React Pagination Libraries</title>
      <author>Nastassia Ovchinnikova</author>
      <pubDate>Wed, 23 Jun 2021 20:10:20 +0000</pubDate>
      <link>https://dev.to/flatlogic/react-pagination-guide-and-best-react-pagination-libraries-24nm</link>
      <guid>https://dev.to/flatlogic/react-pagination-guide-and-best-react-pagination-libraries-24nm</guid>
      <description>&lt;p&gt;Pagination is an integral part of any modern web and mobile application. In this article, we will look at how to implement pagination into a table that shows weather data. We’ll be using react, node.js, the OpenWeatherMap API, as well as the react-paginate library itself.&lt;/p&gt;

&lt;p&gt;In the tutorial, you will learn how to set up a server, make API requests, work with the state in react, work with the react pagination library. After successfully completing the react pagination tutorial, you will be able to implement pagination to your application.&lt;/p&gt;

&lt;p&gt;Also in the second part of the article, we will describe several other ready-made solutions in order to work with react pagination.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-react-pagination"&gt;
  &lt;/a&gt;
  What Is React Pagination?
&lt;/h2&gt;

&lt;p&gt;Pagination is an important feature of any application where we need to handle large amounts of data into smaller chunks. As data grows it becomes essential for a developer to load data from API in chunks and show it in UI. It’s always a good practice to fetch data in a small &amp;amp; precise manner to improve the efficiency &amp;amp; performance of the application. Doing such things also reduces the latency &amp;amp; load time of a server.&lt;/p&gt;

&lt;p&gt;In today’s world, most web applications cannot show all the data they need to show to their users at once and there are good reasons to not show all the data at once. So in that cases, developers use pagination – separate pages that render a piece of information. Thus react pagination is the pagination made with React.js technology.&lt;/p&gt;

&lt;p&gt;Pagination is mostly implemented in coordination with the server-side code that allows the client applications to request the data in the form of groups. For example, a client could ask the server for a list of the first 20 products.&lt;/p&gt;

&lt;p&gt;So pagination allows applications to provide a better user experience and allows users to navigate through the data easily. Pagination also helps to make requests to the server in parts, which subsequently has a beneficial effect on the speed of the web application.&lt;/p&gt;

&lt;p&gt;Should I develop a component like react pagination myself? Not in our opinion unless you need very deep customization. Instead, you can better do more important things.&lt;/p&gt;

&lt;p&gt;So let’s go to our tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;In order for you to successfully complete this guide, you need to be familiar with the following technologies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic javascript;&lt;/li&gt;
&lt;li&gt;You should be familiar with all the basic concepts of react;&lt;/li&gt;
&lt;li&gt;You should know what npm and webpack are;&lt;/li&gt;
&lt;li&gt;You must have node.js installed;&lt;/li&gt;
&lt;li&gt;You should know how to make simple requests to the server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#react-pagination-guide"&gt;
  &lt;/a&gt;
  React Pagination Guide
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#step-1-setting-up-a-project"&gt;
  &lt;/a&gt;
  Step 1 – Setting up a project
&lt;/h3&gt;

&lt;p&gt;We’ll start by installing the boilerplate of react node.js application. For this, we will take a ready-made application – &lt;a href="https://github.com/crsandeep/simple-react-full-stack"&gt;https://github.com/crsandeep/simple-react-full-stack&lt;/a&gt;. This is a simple full-stack React application with a Node.js and Express backend. Client-side code is written in React and the backend API is written using Express. We need the backend in order to make an API request and send data to the client.&lt;/p&gt;

&lt;p&gt;For a quick start please type the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Clone the repository
git clone https://github.com/crsandeep/simple-react-full-stack

# Go inside the directory
cd simple-react-full-stack

# Install dependencies
yarn (or npm install)

# Start development server
yarn dev (or npm run dev)

# Build for production
yarn build (or npm run build)

# Start production server
yarn start (or npm start)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything went well you will see something like this on your computer screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bR1sNlK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/A5MbjSiwb4O41rsBB9Wewg4KvSJcijmI4xusYayGuAWCIIeq6e5o2ItTKM0XcL0oiuwFwogz-TphSJK8tBjX_XBnSJXvt1uxEfmimeSE0Hk_ZYeN5bvrltYNplxCIL8GZTRPK-eR" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bR1sNlK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/A5MbjSiwb4O41rsBB9Wewg4KvSJcijmI4xusYayGuAWCIIeq6e5o2ItTKM0XcL0oiuwFwogz-TphSJK8tBjX_XBnSJXvt1uxEfmimeSE0Hk_ZYeN5bvrltYNplxCIL8GZTRPK-eR" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that you’ve started the application, development can begin. Notice that a browser tab has been opened for you with live reloading functionality to keep in sync with the application as you develop.&lt;/p&gt;

&lt;p&gt;Also, before starting development, go to the project folder and familiarize yourself with the structure. The most important part for us is the /src folder, which contains 2 client folders – this is ours react application and the server folder, where the file for working with the index.js backend is located.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-server-setup"&gt;
  &lt;/a&gt;
  Step 2 – Server setup
&lt;/h3&gt;

&lt;p&gt;In order to display data in our application, we will use the OpenWeatherMap API – &lt;a href="https://openweathermap.org/current"&gt;https://openweathermap.org/current&lt;/a&gt;. We will use the section in the API documentation where we need to make a query to display data for several cities – Call current weather data for several cities. API returns the data from cities within the defined rectangle specified by the geographic coordinates. The request will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;api.openweathermap.org/data/2.5/box/city?bbox={bbox}&amp;amp;appid={API key}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C9px4eFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/uD1b48jzi9eD_UOvalrShK93DBCU9x-NwZGsRihpcSR_SX8CeNwNxasmxDPxV7kqrjC0H494krk6Vy-ZXUV612ZKk9W6b_HKAVntVDgG3aJQiGvubQUy0HRRF56TstcszoBVfo71" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C9px4eFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/uD1b48jzi9eD_UOvalrShK93DBCU9x-NwZGsRihpcSR_SX8CeNwNxasmxDPxV7kqrjC0H494krk6Vy-ZXUV612ZKk9W6b_HKAVntVDgG3aJQiGvubQUy0HRRF56TstcszoBVfo71" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we’ll start working with the index.js file in the server folder. Before starting work, we advise you to check if all libraries are installed – for example, express. We will also need the following libraries to work with the server:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cors – it allows you to enable CORS with several options;&lt;/li&gt;
&lt;li&gt;Axios – for API requests;&lt;/li&gt;
&lt;li&gt;Body-parser – allows you to parse incoming request bodies in a middleware before your handlers.
In order to install these libraries, enter the following commands in the terminal one by one:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install cors
$ npm install axios
$ npm install body-parser
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;index.js file&lt;/code&gt;, we initialize these libraries:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const axios = require('axios');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s declare an app variable to work with express:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const app = express();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we directly make a request to the openweathermap API by entering the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.use(cors());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
app.use(express.static('dist'));
app.get('/list', async (req, res) =&amp;gt; {
 try{
   let result = await axios.get("http://api.openweathermap.org/data/2.5/box/city?bbox=12,32,15,37,10&amp;amp;appid=476787c5ccaf8b0949ff8b5bc02cdecc");
   res.json(result.data);
 } catch(e) {
   console.log(e);
 }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use &lt;code&gt;express.static(‘dist’)&lt;/code&gt; to serve static files from the &lt;code&gt;‘dist’&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;And then we directly configure routing using the get method. We also use try-catch to not allow the server to crash if any error will arise.&lt;/p&gt;

&lt;p&gt;After we have made requests to the API using app.listen, we start the server and specify the port that we will listen to. As a result, our file will look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const axios = require('axios');

const app = express();

app.use(cors());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
app.use(express.static('dist'));
app.get('/list', async (req, res) =&amp;gt; {
 try{
   let result = await axios.get("http://api.openweathermap.org/data/2.5/box/city?bbox=12,32,15,37,10&amp;amp;appid=476787c5ccaf8b0949ff8b5bc02cdecc");
   res.json(result.data);
 } catch(e) {
   console.log(e);
 }
});

app.listen(process.env.PORT || 8080, () =&amp;gt; console.log(`Listening on port ${process.env.PORT || 8080}!`));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations you just made a server to display data for our pagination application! Let’s work with the client part.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-developing-client-part-of-the-application"&gt;
  &lt;/a&gt;
  Step 3 – Developing client part of the application
&lt;/h3&gt;

&lt;p&gt;In this part, we will start building the front-end part of the application. We will develop a table where we will display our data. To do this, go to the client folder and open the app.js file.&lt;/p&gt;

&lt;p&gt;Note, we will use a ready-made library called react-paginate to create the pagination component – &lt;a href="https://github.com/AdeleD/react-paginate"&gt;https://github.com/AdeleD/react-paginate&lt;/a&gt;. Please install this library for yourself by typing the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install react-paginate --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, note that we will be doing pagination without lazy loading.&lt;/p&gt;

&lt;p&gt;In our file, we import the following libraries:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import axios from 'axios';
import ReactPaginate from 'react-paginate';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we will also start developing our table and pagination by initializing the initial state of our component, for this, we add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class App extends Component {

 state = {
   list: [],
   perPage: 3,
   page: 0,
   pages: 0,
  };
 };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;List&lt;/code&gt; serves as an array that will store our data that will come from the server.&lt;br&gt;
&lt;code&gt;perPage&lt;/code&gt; is the number of rows that we will show in our table.&lt;br&gt;
&lt;code&gt;Page&lt;/code&gt; is the start page from which our table will begin.&lt;br&gt;
&lt;code&gt;Pages&lt;/code&gt; are how many pages are in the table initially.&lt;/p&gt;

&lt;p&gt;The next step is to make a request to our created server. To do this, we will add the following code to our file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class App extends Component {

 state = {
   list: [],
   perPage: 3,
   page: 0,
   pages: 0,
  };

 componentDidMount() {
  this.makeHttpRequest();
 }

 makeHttpRequest = async() =&amp;gt; {
  let res = await axios.get('http://localhost:8080/list').catch(err =&amp;gt; console.log(err));

  const {perPage} = this.state;
  const {list} = res.data;
  this.setState({
    list,
    pages: Math.floor(list.length / perPage)
   });
  };
 };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please note that we determine how many pages will eventually be shown already at the request level by assigning the state pages by dividing the length of the list array by the number of items per page, recall that we have it equal to 3.&lt;/p&gt;

&lt;p&gt;We also make API requests in &lt;code&gt;componentDidMount&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, let’s move on to the render method and finally do our table and pagination.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;render() {
 const {page, perPage, pages, list} = this.state;
 let items = list.slice(page * perPage, (page + 1) * perPage);
 let weathers = items.map(item =&amp;gt; {
   const { id, name, main } = item;
   const { temp, humidity, pressure } = main;
   const { speed } = item.wind;
   return (
     &amp;lt;tr key={id}&amp;gt;
       &amp;lt;td&amp;gt;{name}&amp;lt;/td&amp;gt;
       &amp;lt;td&amp;gt;{temp}&amp;lt;/td&amp;gt;
       &amp;lt;td&amp;gt;{humidity}&amp;lt;/td&amp;gt;
       &amp;lt;td&amp;gt;{pressure}&amp;lt;/td&amp;gt;
       &amp;lt;td&amp;gt;{speed}&amp;lt;/td&amp;gt;
     &amp;lt;/tr&amp;gt;
   )
 }) || '';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we take a closer look at this code, we will see the following. &lt;/p&gt;

&lt;p&gt;We created the items variable and used the slice method to split our array and only show 3 rows on each page.&lt;/p&gt;

&lt;p&gt;We also created the weathers variable and used the map method to pull out the data and the list array we need, namely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;City name;&lt;/li&gt;
&lt;li&gt;Temperature;&lt;/li&gt;
&lt;li&gt;Humidity;&lt;/li&gt;
&lt;li&gt;Atmosphere pressure;&lt;/li&gt;
&lt;li&gt;Wind speed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, let’s make our table, which will finally show our data, for this we add the following block of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return (
 &amp;lt;&amp;gt;
   &amp;lt;table className='Table'&amp;gt;
     &amp;lt;thead&amp;gt;
     &amp;lt;tr&amp;gt;
       &amp;lt;th&amp;gt;Name of the city&amp;lt;/th&amp;gt;
       &amp;lt;th&amp;gt;Temperature&amp;lt;/th&amp;gt;
       &amp;lt;th&amp;gt;Humidity&amp;lt;/th&amp;gt;
       &amp;lt;th&amp;gt;Pressure&amp;lt;/th&amp;gt;
       &amp;lt;th&amp;gt;Wind Speed&amp;lt;/th&amp;gt;
     &amp;lt;/tr&amp;gt;
     &amp;lt;/thead&amp;gt;
     &amp;lt;tbody&amp;gt;
     {weathers}
     &amp;lt;/tbody&amp;gt;
   &amp;lt;/table&amp;gt;
&amp;lt;/&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this stage, if you are familiar with React, I hope there is no need to explain much, except that in the &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt; we put our variable weather, which will show our data. As a result, you should have the following table.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1jGDsHU1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/IWjlOIDunf_i0BIK7sO7QEughuDCBv84cJ4STS48OVQiQKveGcQPYl-PT3DVrg0nXdASFKA4CAErCuIntD5SU0YUInFo_dpjxNyzlKrK3TLhB2LXGvu9h3RwelkR-Wai6oQC0EQf" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1jGDsHU1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/IWjlOIDunf_i0BIK7sO7QEughuDCBv84cJ4STS48OVQiQKveGcQPYl-PT3DVrg0nXdASFKA4CAErCuIntD5SU0YUInFo_dpjxNyzlKrK3TLhB2LXGvu9h3RwelkR-Wai6oQC0EQf" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s go to the main thing and add the Pagination component. Add it after the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ReactPaginate
 previousLabel={'prev'}
 nextLabel={'next'}
 pageCount={pages}
 onPageChange={this.handlePageClick}
 containerClassName={'pagination'}
 activeClassName={'active'}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we saw that we need to add the &lt;code&gt;handlePageClick&lt;/code&gt; method. It will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;handlePageClick = (event) =&amp;gt; {
 let page = event.selected;
 this.setState({page})
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s it – we have finished creating the pagination for our table. Let’s take a look at the whole &lt;code&gt;App.js&lt;/code&gt; file to get the big picture.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { Component } from 'react';
import './app.css';
import axios from 'axios';
import ReactPaginate from 'react-paginate';

class App extends Component {

 state = {
   list: [],
   perPage: 3,
   page: 0,
   pages: 0,
 };

 componentDidMount() {
   this.makeHttpRequest();
 }

 makeHttpRequest = async() =&amp;gt; {
   let res = await axios.get('http://localhost:8080/list').catch(err =&amp;gt; console.log(err));

   const {perPage} = this.state;
   const {list} = res.data;
   this.setState({
     list,
     pages: Math.floor(list.length / perPage)
   });
 };

 handlePageClick = (event) =&amp;gt; {
   let page = event.selected;
   this.setState({page})
 }

 render() {
   const {page, perPage, pages, list} = this.state;
   let items = list.slice(page * perPage, (page + 1) * perPage);
   let weathers = items.map(item =&amp;gt; {
     const { id, name, main } = item;
     const { temp, humidity, pressure } = main;
     const { speed } = item.wind;
     return (
       &amp;lt;tr key={id}&amp;gt;
         &amp;lt;td&amp;gt;{name}&amp;lt;/td&amp;gt;
         &amp;lt;td&amp;gt;{temp}&amp;lt;/td&amp;gt;
         &amp;lt;td&amp;gt;{humidity}&amp;lt;/td&amp;gt;
         &amp;lt;td&amp;gt;{pressure}&amp;lt;/td&amp;gt;
         &amp;lt;td&amp;gt;{speed}&amp;lt;/td&amp;gt;
       &amp;lt;/tr&amp;gt;
     )
   }) || '';

   return (
     &amp;lt;&amp;gt;
       &amp;lt;table className='Table'&amp;gt;
         &amp;lt;thead&amp;gt;
         &amp;lt;tr&amp;gt;
           &amp;lt;th&amp;gt;Name of the city&amp;lt;/th&amp;gt;
           &amp;lt;th&amp;gt;Temperature&amp;lt;/th&amp;gt;
           &amp;lt;th&amp;gt;Humidity&amp;lt;/th&amp;gt;
           &amp;lt;th&amp;gt;Pressure&amp;lt;/th&amp;gt;
           &amp;lt;th&amp;gt;Wind Speed&amp;lt;/th&amp;gt;
         &amp;lt;/tr&amp;gt;
         &amp;lt;/thead&amp;gt;
         &amp;lt;tbody&amp;gt;
         {weathers}
         &amp;lt;/tbody&amp;gt;
       &amp;lt;/table&amp;gt;
       &amp;lt;ReactPaginate
         previousLabel={'prev'}
         nextLabel={'next'}
         pageCount={pages}
         onPageChange={this.handlePageClick}
         containerClassName={'pagination'}
         activeClassName={'active'}
       /&amp;gt;
     &amp;lt;/&amp;gt;
   );
 }
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you did everything correctly, then the following result should come out (here we have already styled the table right away, we will show how to do this in the next step).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aXVe4eme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/YbSDKi_DlOaF31cewURtoY52QNkClq4JA_1LGlm7rrz5fiZRZYJbkqbsmtvEIrd3Q5HU8nk9pBcJbpBaNn9xQDl7E_FMbVxCMWIPdM1PHjvqxdxoKIgcm8qQUruvyODjHNZF_w1A" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aXVe4eme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/YbSDKi_DlOaF31cewURtoY52QNkClq4JA_1LGlm7rrz5fiZRZYJbkqbsmtvEIrd3Q5HU8nk9pBcJbpBaNn9xQDl7E_FMbVxCMWIPdM1PHjvqxdxoKIgcm8qQUruvyODjHNZF_w1A" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-custom-styles"&gt;
  &lt;/a&gt;
  Step 4 – custom styles
&lt;/h3&gt;

&lt;p&gt;In this step, we will add styles to our project. This step can be done a little earlier, depending on what kind you prefer to work with. We’ll be changing the styles fairly straightforwardly. To do this, find the &lt;code&gt;App.css&lt;/code&gt; file in the &lt;code&gt;/src&lt;/code&gt; folder of your project and add the following styles to make the table look like in the screenshot:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.Table {
 border-spacing: 20px;
 border: 1px solid #6c7ac9;
 border-radius: 5px;
 margin-top: 50px;
}

body {
 margin: 0;
 font-family: sans-serif;
 color: #6c7ac9;
}

#root {
 display: flex;
 align-items: center;
 flex-direction: column;
}

.pagination {
 display: flex;
 justify-content: space-between;
 list-style: none;
 margin-top: 20px;
 padding: 0;
}

.pagination a {
 cursor: default;
 padding: 10px;
 border-radius: 5px;
 border: 1px solid #6c7ac9;
 color: #6c7ac9;
 margin-left: 10px;
}

.pagination li:not(.disabled) a:hover {
 background-color: bisque;
 cursor: pointer;
}

.pagination li a {
 font-weight: bold;
}

.pagination li.active a {
 color: #fff;
 background: #6c7ac9;
}

.pagination li.disabled a {
 pointer-events: none;
 color: rgb(198, 197, 202);
 border: 1px solid rgb(198, 197, 202);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations, you’ve now completed building your own React project with pagination. At the end of the article, we will post a link to GitHub, where you can download the project and install it for yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-react-pagination-example"&gt;
  &lt;/a&gt;
  Best React Pagination Example
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#materialui-pagination-component"&gt;
  &lt;/a&gt;
  Material-Ui Pagination component
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n2rxVH_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/lvSi8V6D9hET1zsde0Y2UAzQLSz4t21JhVgHBZfxQkVwt9ytQ2Gf6b2JGYTkn9oqbHHPow4Cb3GQZ291nHmyiOMxmwF3EDBpBnYCfTh2hr8DtfR-IWDGohltPfvy50pRS-6TKTaF" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n2rxVH_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/lvSi8V6D9hET1zsde0Y2UAzQLSz4t21JhVgHBZfxQkVwt9ytQ2Gf6b2JGYTkn9oqbHHPow4Cb3GQZ291nHmyiOMxmwF3EDBpBnYCfTh2hr8DtfR-IWDGohltPfvy50pRS-6TKTaF" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Material UI is a component library for React teeming with powerful components that you should be using in your projects. If you’re just looking to create a good-looking app, Material UI can provide you with solid pre-styled components that will get the job done.&lt;/p&gt;

&lt;p&gt;For enabling pagination using Material-UI, you need to &lt;code&gt;import Pagination from '@material-ui/lab/Pagination'&lt;/code&gt; and use &lt;code&gt;&amp;lt;Pagination /&amp;gt;&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;The library provides several types of design of pagination:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic pagination;&lt;/li&gt;
&lt;li&gt;Outlined pagination;&lt;/li&gt;
&lt;li&gt;Rounded pagination.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also set pagination size and range. Additionally, you can add buttons and use Table pagination.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-paginate"&gt;
  &lt;/a&gt;
  React paginate
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--atWy3EzS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/iI7DLd1_iqwV_ZN-lTXhoBxX1aN-fq1iVIVCQPk4tutmCiu4wn50Q67alSXJkVWgyaNf6j6O7dwuKebuTRl8KGV9RLU5KSr0TRH0LeO2pBcu7unOkXUVg9v478No7HwUgkzt-pHw" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--atWy3EzS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/iI7DLd1_iqwV_ZN-lTXhoBxX1aN-fq1iVIVCQPk4tutmCiu4wn50Q67alSXJkVWgyaNf6j6O7dwuKebuTRl8KGV9RLU5KSr0TRH0LeO2pBcu7unOkXUVg9v478No7HwUgkzt-pHw" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React paginate is one of the most popular pagination components to use while developing the tables or other pages where you need pagination.&lt;/p&gt;

&lt;p&gt;The library is easy to install and use. It also has good options to deeply customize it. There are more than 25 options on how you can customize your pagination component using React paginate library.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reactbootstrap-pagination-component"&gt;
  &lt;/a&gt;
  React-bootstrap pagination component
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e5hM1TnY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/gF4hBI4rYV0vk7uVRTrdMxSSEmRx67gp40gycZnzp3N07OPxwsCmYu_yDownxtrKeAaeHT5AM7f7zzMKrbdQsKhd5RkjUxyMLyR7i7vpHHBU-5SLsJZi7nVebt8E12BhDq3tVgVF" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e5hM1TnY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/gF4hBI4rYV0vk7uVRTrdMxSSEmRx67gp40gycZnzp3N07OPxwsCmYu_yDownxtrKeAaeHT5AM7f7zzMKrbdQsKhd5RkjUxyMLyR7i7vpHHBU-5SLsJZi7nVebt8E12BhDq3tVgVF" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React-bootstrap is a very useful library that replaces jQuery code in Bootstrap. Each component is built with React. React-bootstrap gives all the components that you have in the original Bootstrap (alerts, buttons, tables), so you can use them without pain.&lt;/p&gt;

&lt;p&gt;React-bootstrap gives you a full set of options for pagination setup – it has already built &lt;code&gt;&amp;lt;Pagination /&amp;gt;&lt;/code&gt; components that you can customize for your needs. It also has a basic API for set upping a size of pagination and styles.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pagination-react-component"&gt;
  &lt;/a&gt;
  Pagination React Component
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pQxBJbIq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/OiHdDxryRttRjVIhuGE8IEuYNePs1HxBY_ZUQa2qGRxhWnz2SZy8zLcKRZwKWqPmXmMBUhBktgUZxSQ8tUglHu6A1nwxEVRC9lNXas4l-Osx_BmgWlV1WET4z4Gcg4N47GWbH4Kh" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pQxBJbIq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/OiHdDxryRttRjVIhuGE8IEuYNePs1HxBY_ZUQa2qGRxhWnz2SZy8zLcKRZwKWqPmXmMBUhBktgUZxSQ8tUglHu6A1nwxEVRC9lNXas4l-Osx_BmgWlV1WET4z4Gcg4N47GWbH4Kh" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React Component pagination is a part of ant.design foundation library. It gives you a simple pagination component for your existing react application. The library can be installed in a couple of commands and it has a wide variety of API options. It also has several styles of pagination:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic;&lt;/li&gt;
&lt;li&gt;Jumper;&lt;/li&gt;
&lt;li&gt;Sized;&lt;/li&gt;
&lt;li&gt;Locate;&lt;/li&gt;
&lt;li&gt;Fewer pages and others.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#semanticui-react-pagination-component"&gt;
  &lt;/a&gt;
  Semantic-UI react pagination component
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NPC_8D59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/M6Zl-2SP8sXbLo4cjw_E7_2NDPbf5MhdasOJX-kyFMn4YIT1oz06GGXAIp0Bm-L8G3y-1ShpozkZCEKMnAZ4KP6FoRLY_Z7mIPky0goKw6E09MqmDq-UjybmD8XZhC9FjXZHrY43" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NPC_8D59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/M6Zl-2SP8sXbLo4cjw_E7_2NDPbf5MhdasOJX-kyFMn4YIT1oz06GGXAIp0Bm-L8G3y-1ShpozkZCEKMnAZ4KP6FoRLY_Z7mIPky0goKw6E09MqmDq-UjybmD8XZhC9FjXZHrY43" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Semantic UI React is the official React integration for Semantic UI. The library has the following great features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jQuery Free;&lt;/li&gt;
&lt;li&gt;Declarative API;&lt;/li&gt;
&lt;li&gt;Augmentation;&lt;/li&gt;
&lt;li&gt;Shorthand Props;&lt;/li&gt;
&lt;li&gt;Sub Components;&lt;/li&gt;
&lt;li&gt;Auto Controlled State.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The pagination component has a good simple design and integrates to the existing app very smoothly. It also has several options on how to developer pagination:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A pagination component can be disabled;&lt;/li&gt;
&lt;li&gt;Pagination can be a controlled component;&lt;/li&gt;
&lt;li&gt;Pagination has configurable options;&lt;/li&gt;
&lt;li&gt;Pagination is a wrapper for the Menu component, you can use * Menu props with Pagination;&lt;/li&gt;
&lt;li&gt;Pagination has support for a shorthand API for its items.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#rsuite-js-react-pagination-component"&gt;
  &lt;/a&gt;
  Rsuite Js react pagination component
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SabI0zrR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/Gy04tAts--d0095sR9Mukp3kne-Sfx29uItsmz3zHMrXzqH1nn_0lMi5tSmrYNU2f2Qd1fcCAIxr4JrbKgfALLxkgF11y0lgtf8QeBu_fUm1SaaFmKHI4JHRipaqchSbQRw7S1_U" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SabI0zrR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/Gy04tAts--d0095sR9Mukp3kne-Sfx29uItsmz3zHMrXzqH1nn_0lMi5tSmrYNU2f2Qd1fcCAIxr4JrbKgfALLxkgF11y0lgtf8QeBu_fUm1SaaFmKHI4JHRipaqchSbQRw7S1_U" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React Suite is a library of React components, designed for the middle platform and back-end products. Committed to creating intimate interactive designs while providing developers with a friendly development experience. The library is pretty popular and has almost 6k stars on Github.&lt;/p&gt;

&lt;p&gt;As for the pagination component it is very simple but yet good for use in the basic react applications with the following options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can change the size of the pagination component;&lt;/li&gt;
&lt;li&gt;You can disable it;&lt;/li&gt;
&lt;li&gt;You can also use some of the advanced features like adding boundary links, showing last and first pages, and adding arrows;&lt;/li&gt;
&lt;li&gt;There are also dozens of props available.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#react-table-pagination-component"&gt;
  &lt;/a&gt;
  React table pagination component
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--snN8sLaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/UtSRK0X2QcvSpphBNJDFB2Qab4g2yo5dhEa_UQNzWwArrdBh8WxLpy0LhOAFoyWK7OJ0TmrNZFoMCKBMUKTxiZaSGQ46-aAp6rTcIttvcmrKT8YrUtDcDeFpFLur_xcfEorhmMzr" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--snN8sLaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/UtSRK0X2QcvSpphBNJDFB2Qab4g2yo5dhEa_UQNzWwArrdBh8WxLpy0LhOAFoyWK7OJ0TmrNZFoMCKBMUKTxiZaSGQ46-aAp6rTcIttvcmrKT8YrUtDcDeFpFLur_xcfEorhmMzr" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React Table is one of the most popular table libraries in React. It has almost 15,000 stars on GitHub. The react-table library is very lightweight and offers all the basic features necessary for any simple table. Now, after version 7 was released, it also supports Hooks.&lt;/p&gt;

&lt;p&gt;The pagination components in this library are a part of the options available when you are developing a react table. Thus, you can use this react pagination component only with react table library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this tutorial, you have made a react pagination component using a ready-made library. You also learned how to make a request to the server and set up a basic full-stack react application.&lt;/p&gt;

&lt;p&gt;We have also attached the source code of our application so that you can use it in your further development.&lt;/p&gt;

&lt;p&gt;Additionally you can check how we developed react pagination components in our ready-made React Templates.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#about-flatlogic"&gt;
  &lt;/a&gt;
  About Flatlogic
&lt;/h1&gt;

&lt;p&gt;At Flatlogic, we help businesses to speed up web development with our beautifully designed web &amp;amp; mobile application templates built with &lt;a href="https://flatlogic.com/templates/react"&gt;React&lt;/a&gt;, &lt;a href="https://flatlogic.com/templates/vue"&gt;Vue&lt;/a&gt;, &lt;a href="https://flatlogic.com/templates/angular"&gt;Angular&lt;/a&gt;, &lt;a href="https://flatlogic.com/templates/react-native"&gt;React Native&lt;/a&gt;, and &lt;a href="https://flatlogic.com/templates/bootstrap"&gt;Bootstrap&lt;/a&gt;. During the last several years we have successfully delivered more than 100 custom dashboards and data management solutions to various clients starting from innovative startups to established and respected enterprises.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WpVQsS-Bb3U"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;You might also like these articles:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://dev.to/flatlogic/javascript-tabs-save-space-examples-of-tabbed-widgets-3d1i"&gt;Javascript Tabs: Save Space! Examples Of Tabbed Widgets&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/flatlogic/react-table-guide-and-best-react-table-examples-56n1"&gt;React Table Guide And Best React Table Examples&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/flatlogic/12-javascript-image-manipulation-libraries-for-your-next-web-app-1e0d"&gt;12 JavaScript Image Manipulation Libraries For Your Next Web App&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A first look at Qwik - the HTML first framework</title>
      <author>Miško Hevery</author>
      <pubDate>Wed, 23 Jun 2021 19:48:31 +0000</pubDate>
      <link>https://dev.to/mhevery/a-first-look-at-qwik-the-html-first-framework-af</link>
      <guid>https://dev.to/mhevery/a-first-look-at-qwik-the-html-first-framework-af</guid>
      <description>&lt;p&gt;At &lt;a href="http://builder.io"&gt;Builder.io&lt;/a&gt;, we empower non-developers to build and edit blazing fast sites with a powerful visual editor. One of the cool things about our visual editor is that we can generate the same sites in different technologies—everything from Angular to WebComponents and every framework in between. The code we output is optimized for speed, and our sites are faster than the vast majority of hand-crafted sites. We are very proud of that. Our product focuses on eCommerce, and eCommerce loves speed!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-good-timetointeractive-is-hard"&gt;
  &lt;/a&gt;
  Getting good time-to-interactive is hard
&lt;/h2&gt;

&lt;p&gt;Even with the most optimized code, it is hard for eCommerce sites to reach a 100 out of 100 score on &lt;a href="https://developers.google.com/speed/pagespeed/insights/"&gt;PageSpeed Insights&lt;/a&gt; unless they serve only static HTML. This is why most eCommerce sites are around 20 and in the red. Only the very best, who can afford to focus on speed, can get their site to the 50s to 60s and into the yellow. Using Builder.io will also get your sites into the yellow 50s to 60s. But we want to do better!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hNfE5FAv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5zttsnsvx80ic0y3v4wa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hNfE5FAv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5zttsnsvx80ic0y3v4wa.png" alt="one"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pure-html-is-fast"&gt;
  &lt;/a&gt;
  Pure HTML is fast
&lt;/h2&gt;

&lt;p&gt;Well, we can do better if we serve static HTML. That will almost certainly give us a 100 out of 100 score. After all, PageSpeed Insights shows a score measured based on the amount of code the browser must execute before the page becomes interactive. By removing all of the JavaScript execution we can get a perfect score of 100 and pass with flying green colors! But, therein lies the problem. These pages are static. We need our pages to deliver content dynamically, full of interaction and life. How can we serve static HTML to receive high scores, but at the same time provide rich interaction?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VCPVUPTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/inff3jmvl300d1yaxaya.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VCPVUPTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/inff3jmvl300d1yaxaya.png" alt="speed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-qwik-the-html-first-framework"&gt;
  &lt;/a&gt;
  Introducing Qwik - the HTML first framework
&lt;/h2&gt;

&lt;p&gt;Introducing Qwik, an open-source DOM-centric, resumable web-app framework designed for best possible time-to-interactive, by focusing on resumability of server-side-rendering of HTML and fine-grained lazy-loading of code. OK, that is a lot to unpack and a lot more than we could possibly cover in this blog post. So, we will break this up into a series of blog posts, which we will post over the next few weeks. But, the basic goal of Qwik is to focus on the time-to-interactive metric by delaying JavaScript as much as possible to take advantage of the browser’s lazy loading capabilities. This is in stark contrast to existing frameworks that treat server-side-rendering and time-to-interactive more as an afterthought rather than a primary goal, which drives all other design decisions. Qwik’s goal is to crush time-to-interactive to a blink of an eye on the slowest mobile device. We want to serve static pages to the user so that they are fast, but retain all of their interactivity. We want to have our cake and eat it too!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vNxZwFXl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dy3wa5ewpz9o9xoa87ys.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vNxZwFXl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dy3wa5ewpz9o9xoa87ys.png" alt="graphic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#replayable-frameworks-do-too-much-work"&gt;
  &lt;/a&gt;
  Replayable frameworks do too much work
&lt;/h2&gt;

&lt;p&gt;There is a reason why virtually no eCommerce site scores 100 on PageSpeed Insights. The reason is that all existing frameworks are not designed with time-to-interactive in mind. They have complex bootstrap processes which require a lot of code to be downloaded and executed before the page can become interactive. Yes, most support server-side-rendering to get a quick flash of initial content, but the first thing they need to do is to download all of the templates on the page and execute them to rehydrate the page and make it interactive. This download and execute is what keeps existing real-world sites from scoring 100. The current set of frameworks are replayable, as they need to replay all of the work of server-side-rendering on the client to get the site interactive. And, as your site becomes more complicated, so will the replayability cost.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PdQoT-lX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqgpauzo2i23f3zhhke8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PdQoT-lX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqgpauzo2i23f3zhhke8.png" alt="two"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resumability-to-the-rescue"&gt;
  &lt;/a&gt;
  Resumability to the rescue
&lt;/h2&gt;

&lt;p&gt;The basic idea behind Qwik is that it is resumable. It can continue where the server left off. There is but the tiniest amount of code to execute on the client. The qwikloader, which takes the static HTML generated from server-side-rendering and resumes it, is less than 1kb and will execute in under 1ms. I think you may want to go and re-read the last sentence. Yes, the amount of code that we need to execute is amazingly small, and it executes in less than a blink of an eye. The best part is that this code will stay constant no matter how big your application becomes. All the other interactivity of your website is downloaded lazily as you interact with the site in the smallest possible chunks. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ufFUjYds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/550d4im90829stbvbvs0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ufFUjYds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/550d4im90829stbvbvs0.png" alt="stuff"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#find-out-more"&gt;
  &lt;/a&gt;
  Find out more
&lt;/h2&gt;

&lt;p&gt;Our primary focus is to develop this technology for our customers. But the technology will be developed in open-source and can be used by anyone for any purpose. While it will be designed as a general-purpose web framework, we will be prioritizing what we need for our customers first. &lt;/p&gt;

&lt;p&gt;I am sure you are dying to find out more. We invite you to play with a StackBlitz web-container &lt;a href="https://stackblitz.com/edit/qwik-todo-demo"&gt;demo&lt;/a&gt;. (How cool from StackBlitz folks that they were able to run node.js in the browser and allow us to demonstrate the server-side-rendering, which is a key part of the framework. Hats off to them!) You can also find the open-source repo &lt;a href="https://github.com/builderio/qwik"&gt;here&lt;/a&gt;. To set expectations, the repo is very much in the proof of concept stage and is not ready for general consumption, as we expect many things to change over time. Nevertheless, we want to know what you think. So, please join us for a &lt;a href="https://discord.gg/JHVpZmqSs4"&gt;chat on our Discord server&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Over the next few weeks, we will be diving into many of the unique ideas behind Qwik to explain how it ticks and what makes it unique. Stay tuned!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BXDPo5t9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6mwuf8a8vxemy69ktoqf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BXDPo5t9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6mwuf8a8vxemy69ktoqf.png" alt="final"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>frameworks</category>
      <category>webdev</category>
      <category>performance</category>
    </item>
    <item>
      <title>A Visual Guide To: Computer Vision in Azure</title>
      <author>Nitya Narasimhan</author>
      <pubDate>Wed, 23 Jun 2021 19:34:20 +0000</pubDate>
      <link>https://dev.to/azure/a-visual-guide-to-computer-vision-in-azure-ddo</link>
      <guid>https://dev.to/azure/a-visual-guide-to-computer-vision-in-azure-ddo</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Three resources to jumpstart your learning:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;📄 Read the &lt;a href="https://aka.ms/visual/azure-computer-vision/blog"&gt;blog post&lt;/a&gt; for the Visual Guide.&lt;/li&gt;
&lt;li&gt;🎓 Complete the related &lt;a href="https://aka.ms/visual/azure-computer-vision/learn"&gt;learning path&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;🔖 Bookmark &amp;amp; visit my &lt;a href="https://docs.microsoft.com/en-us/users/nityan/collections/r3m4s45x1g53g2?WT.mc_id=mobile-30244-ninarasi"&gt;evolving collection&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#whats-a-visual-guide"&gt;
  &lt;/a&gt;
  What's a Visual Guide?
&lt;/h2&gt;

&lt;p&gt;It's a poster-sized (high resolution) single-page sketchnote (visual notes) summarizing the content in some associated talk, tutorial, or (as in this case) learning path.&lt;/p&gt;

&lt;p&gt;Many of us are visual learners who can scan and process information faster using visual cues like colors, fonts, and illustrations. Visual notes can help us detect patterns or make connections in new ways that help with retention and recall of that information.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Check out my &lt;a href="https://twitter.com/sketchthedocs"&gt;@SketchTheDocs&lt;/a&gt; account for more examples of visual guides!&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-focus-on-computer-vision"&gt;
  &lt;/a&gt;
  Why focus on Computer Vision?
&lt;/h2&gt;

&lt;p&gt;Every project has an origin story. Mine started with seeing Limor Fried (from Adafruit) do this amazing computer vision inspired demo at Microsoft Build.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hCF7KqCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1336782118924455944/K4ZDwHHg_normal.png" alt="Nitya Narasimhan | 🙏🏽 👩🏽‍💻 🎨 🌎 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nitya Narasimhan | 🙏🏽 👩🏽‍💻 🎨 🌎
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nitya"&gt;@nitya&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      One of my favorite demos at &lt;a href="https://twitter.com/hashtag/MSBuild"&gt;#MSBuild&lt;/a&gt;  from &lt;a href="https://twitter.com/adafruit"&gt;@adafruit&lt;/a&gt; - has the three elements that are critical to building real world solutions:&lt;br&gt;&lt;br&gt;"things" (IOT)&lt;br&gt;"intelligence" (AI/ML)&lt;br&gt;"software" (dev kits)&lt;br&gt;&lt;br&gt;Starring this repo and hope to check it out!&lt;br&gt;&lt;a href="https://t.co/c9xfWkpoQw"&gt;github.com/lobe/lobe-adaf…&lt;/a&gt; &lt;a href="https://t.co/CdkHpBIUfX"&gt;twitter.com/pete_codes/sta…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:26 PM - 26 May 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Pete Gallagher - Azure #MVPBuzz
          &lt;/span&gt;
          &lt;a class="mentioned-user" href="https://dev.to/pete_codes"&gt;@pete_codes&lt;/a&gt;

        &lt;/div&gt;
        Love @lobe_ai! Fab demo by @adafruit using a @Raspberry_Pi and the #BrainCraft HAT... #MSBuild @MSIoTDevs @MicrosoftIoT https://t.co/DrDxKtCvpk
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1397605112718233600" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1397605112718233600" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1397605112718233600" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;In the demo she:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;used &lt;a href="https://www.lobe.ai/"&gt;Lobe.AI&lt;/a&gt; to train a custom vision model for pastry identification - with no code!&lt;/li&gt;
&lt;li&gt;downloaded the model to a Raspberry Pi (with a camera module interfaced) and built a smart checkout app for the Internet of Things!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Check out the lobe-adafruit-kit repository &lt;a href="https://t.co/c9xfWkpoQw?amp=1"&gt;here&lt;/a&gt;&lt;/em&gt; to learn more about the hardware and software involved.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#computer-vision-and-me"&gt;
  &lt;/a&gt;
  Computer Vision and Me!
&lt;/h2&gt;

&lt;p&gt;That got me thinking!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lobe.AI is a no-code approach to creating simple custom vision models. Even a 12yo could do it - and I happened to have a 12yo at home 😄.&lt;/li&gt;
&lt;li&gt; The Adafruit demo used Python (which the 12yo is familiar with) and &lt;a href="http://aka.ms/julyot"&gt;#JulyOT&lt;/a&gt; was right around the corner, so it was perfect time to explore IOT projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All we needed was a real-world problem or idea for which we could find (or create) an image dataset. He found one that motivated him!&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7SYdxGbR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E2o_837X0Agz9Ah.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hCF7KqCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1336782118924455944/K4ZDwHHg_normal.png" alt="Nitya Narasimhan | 🙏🏽 👩🏽‍💻 🎨 🌎 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nitya Narasimhan | 🙏🏽 👩🏽‍💻 🎨 🌎
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nitya"&gt;@nitya&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      2/2&lt;br&gt;&lt;br&gt;Context: we have a Nespresso machine and one container for *all* pods (that 12yo fills from shipments). We have decaf, flavors, types .. and pods have no markings. Only 12yo knows so we have to keep asking him.&lt;br&gt;&lt;br&gt;His plan: train a model to recognize the type from pod .. 🥳🎉 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:53 PM - 30 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1399000951105769475" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1399000951105769475" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1399000951105769475" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;And coincidentally, so did I.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
    &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__two-pics"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NDIgNigW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E2_RIKZXwAIaHUB.jpg" alt="unknown tweet media content"&gt;
    &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hCF7KqCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1336782118924455944/K4ZDwHHg_normal.png" alt="Nitya Narasimhan | 🙏🏽 👩🏽‍💻 🎨 🌎 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nitya Narasimhan | 🙏🏽 👩🏽‍💻 🎨 🌎
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nitya"&gt;@nitya&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Tried an interesting experiment with &lt;a href="https://t.co/JSWXHy272U"&gt;Lobe.AI&lt;/a&gt;. &lt;br&gt;&lt;br&gt;Question:&lt;br&gt;Can I train a model to recognize a specific sketchnote given diverse orientation, zoom levels.&lt;br&gt;&lt;br&gt;Experiment:&lt;br&gt;200 images of 2 sketchnotes captured using an iPad on a lazy Susan to get angles/zoom. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:39 PM - 03 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1400567959953813506" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1400567959953813506" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1400567959953813506" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;But first, we had a great discussion on what exactly computer vision was, how it worked, and what other applications we could build given the right tools and resources. It was that learning journey that led to this visual guide.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#computer-vision-and-azure"&gt;
  &lt;/a&gt;
  Computer Vision and Azure
&lt;/h2&gt;

&lt;p&gt;Lobe.AI is a great starting point for a no-code approach to experimenting with simple custom vision models. However, it is limited in feature and scale. &lt;/p&gt;

&lt;p&gt;When working with real-world applications or use cases, we need technologies that can operate at cloud-scale, and provide us both pre-built computer vision models (that we can use with simple APIs) and support the ability to create custom vision models (tailored to our domain-specific data or requirements).&lt;/p&gt;

&lt;p&gt;Azure's suite of &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/computer-vision/?WT.mc_id=mobile-30244-ninarasi"&gt;computer vision&lt;/a&gt; services can help. And this &lt;a href="https://aka.ms/visual/azure-computer-vision/learn"&gt;learning path&lt;/a&gt; does a fantastic job of walking you through 6 relevant usage scenarios, with hands-on coding exercises. The visual guide below provides a sketchnote summary of that entire learning path.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dSmSIuV9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/am1vnnya12lyysxvhf3l.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dSmSIuV9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/am1vnnya12lyysxvhf3l.jpg" alt="The image is a poster-sized sketchnote with a green border enclosing handwritten notes and illustrations summarizing the 6 learning modules in the learning path for computer vision in Azure."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#using-the-visual-guide"&gt;
  &lt;/a&gt;
  Using the Visual Guide
&lt;/h2&gt;

&lt;p&gt;The above image is a low-resolution version of the visual guide. Visit &lt;a href="https://acloudguru.com/blog/engineering/a-visual-guide-to-computer-vision-in-azure"&gt;this blog post&lt;/a&gt; for a link to a poster-sized (high resolution) version and a detailed description of the guide and takeaways from the learning path.&lt;/p&gt;

&lt;p&gt;Use the visual guide to bookend your learning journey.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://aka.ms/visual/azure-computer-vision/download"&gt;Scan it&lt;/a&gt;. Get familiar with terms, workflow.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://acloudguru.com/blog/engineering/a-visual-guide-to-computer-vision-in-azure"&gt;Read it&lt;/a&gt;. Learn how services relate.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aka.ms/visual/azure-computer-vision/learn"&gt;Code it&lt;/a&gt;. Complete hands-on exercises!&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aka.ms/visual/azure-computer-vision/download"&gt;Re-scan it&lt;/a&gt;. Test your recall &amp;amp; understanding.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope you found this useful! &lt;em&gt;Follow &lt;a href="https://twitter.com/sketchthedocs"&gt;@SketchTheDocs&lt;/a&gt; or &lt;a href="https://dev.to/nitya/series/11040"&gt;bookmark this series&lt;/a&gt; to discover more visual guides as they are released&lt;/em&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Three resources to jumpstart your learning:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;📄 Read the &lt;a href="https://aka.ms/visual/azure-computer-vision/blog"&gt;blog post&lt;/a&gt; for the Visual Guide.&lt;/li&gt;
&lt;li&gt;🎓 Complete the related &lt;a href="https://aka.ms/visual/azure-computer-vision/learn"&gt;learning path&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;🔖 Bookmark &amp;amp; visit my &lt;a href="https://docs.microsoft.com/en-us/users/nityan/collections/r3m4s45x1g53g2?WT.mc_id=mobile-30244-ninarasi"&gt;evolving collection&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

</description>
      <category>azure</category>
      <category>sketchnote</category>
      <category>machinelearning</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Who Founded DeFiFarms?</title>
      <author>DefiFarms Non-Fungible Yearn</author>
      <pubDate>Wed, 23 Jun 2021 19:31:22 +0000</pubDate>
      <link>https://dev.to/defifarms/who-founded-defifarms-5a06</link>
      <guid>https://dev.to/defifarms/who-founded-defifarms-5a06</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6la0fMquxhM"&gt;
&lt;/iframe&gt;
&lt;br&gt;
An experienced team of data scientists and blockchain and database engineers built DEFIFARMS. They are passionate about improving and scaling blockchain technologies. Cesar Deandres, CEO, and Co-founder is a physicist by training and started his career. Zackhary Brown-CMO, and Co-founder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow us on Social Media&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Website : &lt;a href="https://defifarms.org/"&gt;https://defifarms.org/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Telegram : &lt;a href="https://t.me/DeFiFarmsNFT"&gt;https://t.me/DeFiFarmsNFT&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Media : &lt;a href="https://t.me/DefifarmsNFTs"&gt;https://t.me/DefifarmsNFTs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Twitter : &lt;a href="https://twitter.com/DeFiFarmsNFTs"&gt;https://twitter.com/DeFiFarmsNFTs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Medium : &lt;a href="https://medium.com/@DeFiFarmsNFTs"&gt;https://medium.com/@DeFiFarmsNFTs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Reddit : &lt;a href="https://www.reddit.com/r/DeFiFarms/"&gt;https://www.reddit.com/r/DeFiFarms/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Githud : &lt;a href="https://github.com/defifarms"&gt;https://github.com/defifarms&lt;/a&gt;
✅Contract: &lt;a href="https://bscscan.com/token/0x2307DfB065CF1c9c5bC0f3435b49830C0AB86847"&gt;https://bscscan.com/token/0x2307DfB065CF1c9c5bC0f3435b49830C0AB86847&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>defifarms</category>
      <category>defiy</category>
      <category>defif</category>
      <category>defi</category>
    </item>
    <item>
      <title>Techniques for learning to program anything and learn programming faster (without programming ease)</title>
      <author>Caio Gomes Braga</author>
      <pubDate>Wed, 23 Jun 2021 19:10:00 +0000</pubDate>
      <link>https://dev.to/caiobraga/techniques-for-learning-to-program-anything-and-learn-programming-faster-without-programming-ease-1f98</link>
      <guid>https://dev.to/caiobraga/techniques-for-learning-to-program-anything-and-learn-programming-faster-without-programming-ease-1f98</guid>
      <description>&lt;p&gt;Link to the original article (Portuguese): &lt;a href="https://programador-de-quintal.webnode.com/l/tecnicas-para-aprender-a-programar-qualquer-coisa-sem-ter-facilidade-com-a-programacao/"&gt;https://programador-de-quintal.webnode.com/l/tecnicas-para-aprender-a-programar-qualquer-coisa-sem-ter-facilidade-com-a-programacao/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article we are going to discuss a little bit about the process of learning something in programming. If you follow the step by step and implement this way of thinking in your career as a programmer, your life will be much easier. I guarantee. This article was inspired by a video that changed the way I learn, all concepts were even tested in my life.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-dont-compare"&gt;
  &lt;/a&gt;
  1 - Don't compare
&lt;/h2&gt;

&lt;p&gt;Many people think that gift doesn't exist, and it really is a debatable subject. But the fact is, from the outside it seems like for some people your age or younger than you, programming comes naturally, and concepts you don't know seem to be obvious to those people. Talented or not, the fact is that comparing yourself with these people we feel unmotivated.&lt;/p&gt;

&lt;p&gt;Demotivation is bad for you, exclude thoughts like "I can't do it". Think differently, people will learn faster than you and that's normal. It doesn't mean you won't learn, just that you'll learn in your own time.&lt;/p&gt;

&lt;p&gt;Don't compare!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-expose-yourself-to-what-you-want-to-learn-even-without-understanding-anything"&gt;
  &lt;/a&gt;
  2 - Expose yourself to what you want to learn, even without understanding anything
&lt;/h2&gt;

&lt;p&gt;Read articles, watch videos and try programming something. When the feeling of "I don't understand anything" hits, CONGRATULATIONS! You are making progress. But and now? If feeling lost won't get you anywhere, so read more, see more videos and schedule more. No matter how long it takes, the truth is that eventually you will learn. Our brain was made to adapt, it has a characteristic that allows its own physical structure to change to adapt to the environment we play for it. So don't be afraid to expose your brain as much as possible to what you want to learn&lt;/p&gt;

&lt;p&gt;Expose yourself to what you want to learn, even without understanding anything&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-do-not-copy-and-paste-enter-your-code"&gt;
  &lt;/a&gt;
  3 - Do not copy and paste, enter your code
&lt;/h2&gt;

&lt;p&gt;In programming, we created the habit of copying and pasting from an early age, but this mania should be extinguished when it comes to learning something. Just the fact of writing makes you learn a little more. But my suggestion is:&lt;/p&gt;

&lt;p&gt;Write and ask yourself "What does this line of code do?"&lt;/p&gt;

&lt;p&gt;This habit will make you learn what you want faster.&lt;/p&gt;

&lt;p&gt;Do not copy and paste, enter your code&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-get-back-to-the-subject"&gt;
  &lt;/a&gt;
  4 - Get back to the subject
&lt;/h2&gt;

&lt;p&gt;After a few days you've learned a subject, come back to it or review your code, do you remember everything?&lt;/p&gt;

&lt;p&gt;review will help your long-term memory. Try to come back to the subject from time to time and you will see your learning improve a lot.&lt;/p&gt;

&lt;p&gt;back to the subject&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-the-honor-of-the-shirt"&gt;
  &lt;/a&gt;
  5 - The honor of the shirt
&lt;/h2&gt;

&lt;p&gt;What drives me forward in learning is this abstract concept of honoring the programmer's shirt. This part I admit will not make sense to everyone, but it made a lot of sense to me in the past and it still does.&lt;/p&gt;

&lt;p&gt;Imagine the programmers who came before us. They created the computers, the programming logic and they made the first programs without the sea of ​​content that the internet brings. When I think about it, the desire to learn arises, I honestly think our job is relatively easy compared to theirs. It makes me want to go further&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>braziliandevs</category>
      <category>learning</category>
    </item>
    <item>
      <title>DEV Pride &amp; Alan Turing: The Father of Modern Computing</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 23 Jun 2021 18:39:01 +0000</pubDate>
      <link>https://dev.to/devteam/dev-pride-alan-turing-the-father-of-modern-computing-39in</link>
      <guid>https://dev.to/devteam/dev-pride-alan-turing-the-father-of-modern-computing-39in</guid>
      <description>&lt;p&gt;Today, June 23, would be the 109th birthday of Alan Turing: brilliant English mathematician, computer scientist, and crypto-analyst who made some truly remarkable contributions to the field we all love. &lt;/p&gt;

&lt;p&gt;It's especially meaningful and poignant that Turing was born in June — a month that many countries now recognize as LGBTQIA+ Pride Month. That's because in addition to being a groundbreaking thinker and computer scientist, Alan Turing also happened to be a gay man born into a country that (like far too many) didn't decriminalize homosexuality until the late 1960s. &lt;/p&gt;

&lt;p&gt;Turing died at the age of 41 shortly after being abused at the hands of his own government and convicted as a criminal for his sexuality. Not only was Alan Turing's life cut violently short, but his dazzling accomplishments were stripped away, his reputation tarnished.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That's why each year during his birth month, we celebrate the life and legacy of Alan Turing. As a community of code-obsessed people, we know you'll love reading about a few of his inventions and history-making projects as much as we do...&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#decoding-the-encryption-of-nazi-enigma-machines"&gt;
  &lt;/a&gt;
  Decoding the Encryption of Nazi "Enigma" Machines
&lt;/h3&gt;

&lt;p&gt;During World War II, Turing worked in a high position with Britain’s code-breakers at Bletchley Park. He helped create the original design for the "bombe": an electro-mechanical device to help decipher German Enigma-machine-encrypted secret messages during World War II. This work helped reveal critical Nazi submarine pathways, contributing to the Allied forces eventual success. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-turing-test"&gt;
  &lt;/a&gt;
  The "Turing Test"
&lt;/h3&gt;

&lt;p&gt;In 1950, Turing published a thought experiment to explore  whether or not a computer could pass as a human being. The "Turing Test" required a human aid to pose questions to determine if the responses came from a computer or a human. While the test eventually revealed weaknesses, it became an critical milestone in the history of artificial intelligence.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#delilah-a-portable-secure-voice-communications-machine"&gt;
  &lt;/a&gt;
  Delilah: A Portable Secure Voice Communications Machine
&lt;/h3&gt;

&lt;p&gt;During his time at Bletchley Park, Turing also During this period, Turing also created the "Delilah" — a portable machine that could encode a voice message securely and is considered decades ahead of its time. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Note: You can read a complete a transcription of Turing's Delilah report &lt;a href="https://www.turing.org.uk/sources/delilah.html"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;... and much more. For an amazing and detailed look at Alan Turing's life, &lt;a href="https://www.nytimes.com/2019/06/05/obituaries/alan-turing-overlooked.html"&gt;this obituary&lt;/a&gt; from The New York Times' "Overlooked" collection is worth a read. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-alan-turings-life-can-teach-us-about-pride"&gt;
  &lt;/a&gt;
  What Alan Turing's Life Can Teach Us About Pride
&lt;/h3&gt;

&lt;p&gt;Despite obvious accomplishments and service to his country, Alan Turing's life and work was cut short due to bigoted views about his sexuality. It's too easy to look at black and white photos of figures like Turing and convince ourselves that these human atrocities took place in a bygone era that has no relationship to this current moment. &lt;/p&gt;

&lt;p&gt;But the truth is, Turing's conviction for "indecency" was just 69 years ago. A relative speck of time.&lt;/p&gt;

&lt;p&gt;As software developers, it is, of course, our duty to never let what happened to Alan Turing happen again. But it's also important to continuously celebrate the joy and genius of LGBTQIA+ technologists willing to share their authentic lives with us. As a future-oriented field, technology depends on the participation, safety, and empowerment of all people, regardless of race, gender, ethnicity, religion, or sexual-orientation. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#dev-pride"&gt;
  &lt;/a&gt;
  DEV Pride
&lt;/h2&gt;

&lt;p&gt;You might remember that earlier this month, we shared the following message on DEV:  &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devteam" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTihtlIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nJ87SGF6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png" alt="The DEV Team"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zg3sT9Js--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--vHKcEiTe--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/3/13d3b32a-d381-4549-b95e-ec665768ce8f.png" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devteam/happy-lgbtqia-pride-month-1j7b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Happy LGBTQIA+ Pride Month! ❤️ &lt;/h2&gt;
      &lt;h3&gt;dev.to staff for The DEV Team ・ Jun 1 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devpride&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;In the article, we invited our LGBTQIA+ community members to share their unique perspectives about and contributions to technology right here. &lt;/p&gt;

&lt;p&gt;In honor of Alan Turing's birthday and Pride Month, we'd like to share a few of those articles with you today...&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#krismally"&gt;
  &lt;/a&gt;
  &lt;a class="mentioned-user" href="https://dev.to/krismally"&gt;@krismally&lt;/a&gt;

&lt;/h4&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/krismally" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iRnJbFuL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zHhDSqAa--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/641234/8b7a0b7e-80a8-4d4c-be84-87db9418679c.jpeg" alt="krismally"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/krismally/my-journey-as-a-bi-trans-man-29k9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My Journey as a Bi Trans Man &lt;/h2&gt;
      &lt;h3&gt;Kris ・ Jun 2 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devpride&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#mordypython"&gt;
  &lt;/a&gt;
  &lt;a class="mentioned-user" href="https://dev.to/mordypython"&gt;@mordypython&lt;/a&gt;

&lt;/h4&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mordypython" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--05Rnwrks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--LbWQbLuH--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/584106/b9166177-7c0f-4c30-964c-a8e400022631.jpeg" alt="mordypython"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mordypython/happy-pride-month-programmers-2i9g" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Happy pride month programmers!&lt;/h2&gt;
      &lt;h3&gt;mordy-python ・ Jun 1 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devpride&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#lgbtq&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#baenencalin"&gt;
  &lt;/a&gt;
  &lt;a class="mentioned-user" href="https://dev.to/baenencalin"&gt;@baenencalin&lt;/a&gt;

&lt;/h4&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/baenencalin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E1AvSW17--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Ivkkw2GR--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/509599/8798f39d-3424-4d26-b612-3a5cddfb1663.png" alt="baenencalin"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/baenencalin/happy-pride-month-i-created-a-flag-compilation-video-to-celebrate-1k5o" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Happy Pride Month! I created a flag compilation video to celebrate!&lt;/h2&gt;
      &lt;h3&gt;Calin Baenen ・ Jun 3 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#lgbtq&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#pride&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devpride&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#jrohatiner"&gt;
  &lt;/a&gt;
  &lt;a class="mentioned-user" href="https://dev.to/jrohatiner"&gt;@jrohatiner&lt;/a&gt;

&lt;/h4&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jrohatiner" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nVdOzYpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--dad4zP1b--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/36142/24c07608-756b-4bfd-9393-b4b340c82ac2.jpg" alt="jrohatiner"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jrohatiner/a-little-history-1cgo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;A little history &lt;/h2&gt;
      &lt;h3&gt;Judith ・ Jun 2 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devpride&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#programazing"&gt;
  &lt;/a&gt;
  &lt;a class="mentioned-user" href="https://dev.to/programazing"&gt;@programazing&lt;/a&gt;

&lt;/h4&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/programazing" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UEjd8S5M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--S36bgmUx--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/400/59e06fa3-6abd-40c1-8e52-a43497fe3ca5.jpg" alt="programazing"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/programazing/don-t-worry-about-what-others-think-coming-out-of-the-closet-4bai" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Don't Worry About What Others Think: Coming Out of the Closet&lt;/h2&gt;
      &lt;h3&gt;Christopher C. Johnson ・ Jan 11 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#pride&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#lgbt&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#inclusion&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;If you would like to share a story with us in honor of Pride Month, we would love to read it. Just use the tag &lt;a href="//dev.to/t/devpride"&gt;#devpride&lt;/a&gt; so we can find it or use &lt;a href="//dev.to/new/devpride"&gt;this template&lt;/a&gt; as a jumping off point. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Happy Pride and Happy Birthday, Alan Turing!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  🏳️‍🌈
&lt;/h2&gt;

</description>
      <category>devpride</category>
    </item>
  </channel>
</rss>
