<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Tile Navigation - How to make navbar for web page with HTML CSS and JS in 2021</title>
      <author>Modern Web</author>
      <pubDate>Wed, 01 Sep 2021 09:57:35 +0000</pubDate>
      <link>https://dev.to/kunaal438/tile-navigation-how-to-make-navbar-for-web-page-with-html-css-and-js-in-2021-eap</link>
      <guid>https://dev.to/kunaal438/tile-navigation-how-to-make-navbar-for-web-page-with-html-css-and-js-in-2021-eap</guid>
      <description>&lt;p&gt;Hello, welcome. In today's blog, we'll see how to make awesome fully working tile navigation system for your website.&lt;/p&gt;

&lt;p&gt;Tile navigation is very unique navigation that you'll not found most. Make a good impression by using tile navigation on your portfolio. This navigation has good UX which makes better experience than normal navbar.&lt;/p&gt;

&lt;p&gt;For demo, code tutorial with explanation. You can watch the video below.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video Tutorial
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LeaWb_3UDK4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to miss more amazing upcoming projects. Make sure to subscribe me on youtube. It really motivates me.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, without wasting more time let's see how to code this.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;You can get my all project's source code in just 5$ membership on &lt;a href="https://www.patreon.com/modernweb"&gt;patreon&lt;/a&gt;. Support my work for more awesome and amazing projects. This is just a beginning.&lt;a href="https://www.patreon.com/posts/55615263"&gt;Source Code&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the tile navigation, we need 3 files - &lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;style.css&lt;/code&gt; and &lt;code&gt;app.js&lt;/code&gt;. And of course we have an &lt;code&gt;img&lt;/code&gt; folder for images.&lt;/p&gt;

&lt;p&gt;So let's start with simply making the NAVIGATION heading. Start by basic HTML Template and give title to it, link &lt;code&gt;style.css&lt;/code&gt; file and don't forget to add &lt;code&gt;app.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"heading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;navigation&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Style it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2f2f2f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'roboto'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.heading&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z8Ffu9Rp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81pxmts85q92gsh00v1i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z8Ffu9Rp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81pxmts85q92gsh00v1i.png" alt="Frame 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's make the important thing tiled navbar. For that make a container which will hold all the links.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- links --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"links-container hide"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And inside this container make &lt;code&gt;a&lt;/code&gt; tag as we use this to create links.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- links --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"links-container hide"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, maybe you don't know that we can give images inside &lt;code&gt;a&lt;/code&gt; to create images element. Well I didn't knew that before.&lt;/p&gt;

&lt;p&gt;So we need images as a links of course.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- links --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"links-container hide"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img/img 1.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just copy this &lt;code&gt;a&lt;/code&gt; tag 4 more time and change the image path.&lt;/p&gt;

&lt;p&gt;The output will look terrible because of the big images. So let's style the links.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.links-container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Give &lt;code&gt;links-container&lt;/code&gt; display to &lt;code&gt;flex&lt;/code&gt;. This will make the &lt;code&gt;link&lt;/code&gt; or &lt;code&gt;a&lt;/code&gt; side by side. And position &lt;code&gt;fixed&lt;/code&gt; because we want it to stay on the screen irrespective of scroll.&lt;/p&gt;

&lt;p&gt;Now style the &lt;code&gt;a&lt;/code&gt; tag along with its image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.link&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.link&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;object-fit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VenMv9np--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxe58tk1otir6akxjzq6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VenMv9np--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxe58tk1otir6akxjzq6.PNG" alt="Capture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's add hover effect to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.link&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-2deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;:hover&lt;/code&gt; this simply means when being hover. So, the whole line or selector simply means give these style to the &lt;code&gt;img&lt;/code&gt; element when &lt;code&gt;.link&lt;/code&gt; element is being hover.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We got the effect, but its very bright. And not looking that much appealing. So, let's make a black overlay to the &lt;code&gt;link&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For overlay we'll use &lt;code&gt;::after&lt;/code&gt; css pseudo element. You can find about this in detail &lt;a href="https://dev.to/kunaal438/all-about-css-before-and-after-element-css-pseudo-elements-5g1n"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.link&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.link&lt;/span&gt;&lt;span class="nd"&gt;:hover::after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mGXp8c05--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l3664esymrutixqj2w2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mGXp8c05--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l3664esymrutixqj2w2.gif" alt="Untitled design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now as you have seen in the demo, we have texts on the bottom also. So let's make them. To make text just add &lt;code&gt;p&lt;/code&gt; element inside &lt;code&gt;a&lt;/code&gt; tags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"links-container hide"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img/img 1.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;home&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img/img 2.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;project&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    +3 links more
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you see the page, You'll not able to see the text. Because texts are behind the images. To make them at top give some CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.link&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;220px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-120px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-90deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ixWmKuaU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9ovbzxybuepii4tzpp5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ixWmKuaU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9ovbzxybuepii4tzpp5.PNG" alt="Capture2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we have to create toggle button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- toggle btn --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toggle-btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Style the button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.toggle-btn&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2f2f2f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.toggle-btn&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.toggle-btn&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--izlJJlGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lacjqcdov22pdek0scq4.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--izlJJlGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lacjqcdov22pdek0scq4.PNG" alt="Capture3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now of course we want the cross X effect. For that rotate the spans by 45 deg when toggle button have &lt;code&gt;active&lt;/code&gt; class. Like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.toggle-btn.active&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.toggle-btn.active&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-45deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now add &lt;code&gt;active&lt;/code&gt; class to &lt;code&gt;toggle-btn&lt;/code&gt; to see the output.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dAg65coB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkx7k23gawahc2qdzyux.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dAg65coB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkx7k23gawahc2qdzyux.PNG" alt="Capture4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And to hide the links. We'll use &lt;code&gt;hide&lt;/code&gt; class for &lt;code&gt;links-container&lt;/code&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.links-container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;previous&lt;/span&gt; &lt;span class="err"&gt;styles&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;pointer-events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.links-container.hide&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;pointer-events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;pointer-events&lt;/code&gt; property is used to set elements pointer interactivity. In this case we are setting all kind of pointer interaction as a default. But setting no interaction when the links are hidden using &lt;code&gt;hide&lt;/code&gt; class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now of course we want JS here to make the classes toggle. We can make this whole effect with pure CSS using check boxes. But we'll do that some other day.&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;app.js&lt;/code&gt; and first select &lt;code&gt;toggle-btn&lt;/code&gt; and &lt;code&gt;links-container&lt;/code&gt; using &lt;code&gt;querySelector&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.toggle-btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;linksContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.links-container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And after that, add click event to &lt;code&gt;toggle-btn&lt;/code&gt; and toggle the classes inside that click event.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;toggleBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;toggleBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;linksContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cEhIE5_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvd8fiiwdcjxi552mr8q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cEhIE5_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvd8fiiwdcjxi552mr8q.gif" alt="Untitled design (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are done. I hope you understood each and everything. If you have doubt or I missed something let me know in the comments. I have made another tile navigation tutorial. But unfortunately that time I don't used to write blogs. You can check it &lt;a href="https://youtu.be/EsD3QY_wFm8"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#articles-you-may-find-useful"&gt;
  &lt;/a&gt;
  Articles you may find Useful
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/quick-css-make-infinity-loading-animation-for-your-next-website-187k"&gt;Infinte CSS loader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/css-the-best-css-effects-of-all-time-most-underrated-web-ux-2chj"&gt;Best CSS Effect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/create-awesome-wavy-button-hover-effect-pure-css-wavy-design-1722"&gt;Wave Button Hover Effect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/create-working-youtube-clone-with-search-box-youtube-api-2a6e"&gt;Youtube API - Youtube Clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/how-to-create-netflix-clone-netflix-clone-with-hmtl-css-js-989"&gt;TMDB - Netflix Clone&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I really appreciate if you can subscribe my youtube channel. I create awesome web contents.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/modern_web?sub_confirmation=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5gs5zBA7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jeitpawvax07cx7r9yoa.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks For reading.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Hello World with Go!</title>
      <author>M Fariz Wisnu prananda</author>
      <pubDate>Wed, 01 Sep 2021 09:11:15 +0000</pubDate>
      <link>https://dev.to/xvbnm48/hello-world-with-go-55d5</link>
      <guid>https://dev.to/xvbnm48/hello-world-with-go-55d5</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5-deKNP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dr91kmyorfo73w9e7g9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5-deKNP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dr91kmyorfo73w9e7g9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Hello everyone,&lt;/p&gt;

&lt;p&gt;today i will show you, how to print "hello World" with GoLang&lt;/p&gt;

&lt;p&gt;before starting this tutorial, make sure you have installed golang.&lt;/p&gt;

&lt;p&gt;i'll show you how to install golang firts.&lt;/p&gt;

&lt;p&gt;1.Download golang at web &lt;a href="https://golang.org"&gt;Golang&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qsr_99fg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t06fo4m0hz36jg8k9vxk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qsr_99fg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t06fo4m0hz36jg8k9vxk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
red for Windows, yellow for MacOs, and Green for Linux &lt;/p&gt;

&lt;p&gt;i'll show you how to install golang at Windows&lt;/p&gt;

&lt;p&gt;2.After you finished download go , setting gopath in your computer like this &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DDiYnTz0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq48vja7i8q39bkxeff4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DDiYnTz0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq48vja7i8q39bkxeff4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.Now you can start coding!&lt;/p&gt;

&lt;p&gt;4.Open Your VS Code , make new folder for code golang&lt;/p&gt;

&lt;p&gt;5.Open CMD with ctrl + j , and type like this &lt;br&gt;
&lt;code&gt;go mod init belajar-golang&lt;/code&gt; &lt;br&gt;
for make go mod&lt;/p&gt;

&lt;p&gt;6.after typing it, there are will be a new file called name &lt;strong&gt;go.mod&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JqwnH4hx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qm9m19v749kcmctvnzb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JqwnH4hx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qm9m19v749kcmctvnzb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;7.then create new file named &lt;strong&gt;main.go&lt;/strong&gt; &lt;br&gt;
8.then type code like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"fmt"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;9.and after type code , run the file main.go with command like this&lt;br&gt;
&lt;code&gt;go run main.go&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;10.The result will be like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--17oDWpig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8w4pon5vsqfsyjckypn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--17oDWpig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8w4pon5vsqfsyjckypn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that the way to print "Hello World" with Golang&lt;/p&gt;

</description>
      <category>go</category>
    </item>
    <item>
      <title>Gameboy running the Legend of Zelda link's awakening intro and the Pokemon Blue Intro.</title>
      <author>FRADAR</author>
      <pubDate>Wed, 01 Sep 2021 08:57:07 +0000</pubDate>
      <link>https://dev.to/fradar/gameboy-running-the-legend-of-zelda-link-s-awakening-intro-and-the-pokemon-blue-intro-4nim</link>
      <guid>https://dev.to/fradar/gameboy-running-the-legend-of-zelda-link-s-awakening-intro-and-the-pokemon-blue-intro-4nim</guid>
      <description>&lt;p&gt;I created a fully interactive Gameboy running the Legend of Zelda links awakening game demo. &lt;/p&gt;

&lt;p&gt;I have created 2 game intros, one is the Legend of Zelda links awakening  and the other is the Pokemon blue. For the pokemon blue intro change zelda to pokemonblue in line 6 in the Javascript window.&lt;/p&gt;

&lt;p&gt;This is my first time making a Gameboy, so I hope you like it!&lt;/p&gt;

&lt;p&gt;Try it here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR/full/poeqoNQ"&gt;https://codepen.io/FRADAR/full/poeqoNQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like my stuff?&lt;br&gt;
Want more?&lt;br&gt;
Follow me for more shenanigans!&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR"&gt;https://codepen.io/FRADAR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bye! And thanks!&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>gamedev</category>
      <category>showdev</category>
      <category>2d</category>
    </item>
    <item>
      <title>Permissions API &amp; Why should you start using it?</title>
      <author>Mohd Shahid</author>
      <pubDate>Wed, 01 Sep 2021 08:53:56 +0000</pubDate>
      <link>https://dev.to/sidmirza4/permissions-api-why-should-you-start-using-it-2k4d</link>
      <guid>https://dev.to/sidmirza4/permissions-api-why-should-you-start-using-it-2k4d</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hey-guys"&gt;
  &lt;/a&gt;
  Hey guys 👋
&lt;/h2&gt;

&lt;p&gt;In this article I will explain the usage, importance and use cases of Permissions API and why is it so important for user experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started 🚀
&lt;/h2&gt;



&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usage"&gt;Where can we use Permissions API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#accessApi"&gt;Accessing the API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#clipboardPermissions"&gt;Checking Clipboard permissions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#geolocationPermissions"&gt;Checking geolocation permissions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  &lt;a&gt;Introduction&lt;/a&gt; 🟢
&lt;/h3&gt;

&lt;p&gt;The Permissions API can be used to determine if permission to access a particular API has been granted ✅ or denied ❌.&lt;br&gt;&lt;br&gt;
The Permissions API provides the tools to allow us developers to implement a better user experience as far as permissions are concerned.&lt;br&gt;&lt;br&gt;
Which is vital to increase the accessibility and usability of the application.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Permissions API does not work in Safari and IE.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h3&gt;
  &lt;a href="#where-can-we-use-permissions-api-"&gt;
  &lt;/a&gt;
  &lt;a&gt;Where can we use permissions API 🤔?&lt;/a&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API"&gt;Clipbaord API&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API"&gt;Geolocation API&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API"&gt;Notification API&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Push_API"&gt;Push API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#accessing-the-permissions-api-"&gt;
  &lt;/a&gt;
  &lt;a&gt;Accessing the permissions API 🤔?&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;permissions&lt;/code&gt; object is available on &lt;code&gt;Navigator.permissions&lt;/code&gt; property 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;permissions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For checking the status of permission of a certain API &lt;code&gt;.query()&lt;/code&gt; method is used which is available on &lt;code&gt;permissions&lt;/code&gt; object.&lt;br&gt;&lt;br&gt;
&lt;code&gt;.query()&lt;/code&gt; accepts a parameter say &lt;code&gt;permissionDescriptor&lt;/code&gt; which is an object defining on which API query should fire on.&lt;br&gt;&lt;br&gt;
&lt;code&gt;.query()&lt;/code&gt; will return a promise which will resolve to &lt;code&gt;PermissionStatus&lt;/code&gt; object which will tell us about the status of the certain permission.  &lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#enogh-talk-lets-see-it-in-action"&gt;
  &lt;/a&gt;
  Enogh talk 😅, let's see it in action 👇
&lt;/h3&gt;

&lt;p&gt;-&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#using-permissions-api-for-checking-clipboard-permissions"&gt;
  &lt;/a&gt;
  &lt;a&gt;1️⃣ Using Permissions API for checking Clipboard permissions:&lt;/a&gt;
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;permissions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;clipboard-write&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cbWritePermission&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cbWritePermission&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "granted"&lt;/span&gt;

&lt;span class="c1"&gt;// clipboard-write permission is granted by the browser automatically&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the above example the &lt;code&gt;state&lt;/code&gt; property will tell us about the status of the permission. It can have following values:&lt;br&gt;&lt;br&gt;
&lt;code&gt;granted&lt;/code&gt;: Permission is granted.&lt;br&gt;&lt;br&gt;
&lt;code&gt;denied&lt;/code&gt;: Permission is denied.&lt;br&gt;&lt;br&gt;
&lt;code&gt;prompt&lt;/code&gt;: Permission is not yet asked.  &lt;/p&gt;

&lt;p&gt;Let's see an example of &lt;code&gt;clipboard-read&lt;/code&gt; permission 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// suppose a scnerio where you want to do &lt;/span&gt;
&lt;span class="c1"&gt;// something with the text before it get pasted by the user &lt;/span&gt;
&lt;span class="c1"&gt;// in your application. &lt;/span&gt;
&lt;span class="c1"&gt;// or you want to auto-capture copied text&lt;/span&gt;
&lt;span class="c1"&gt;// checking the item before doing anything&lt;/span&gt;
&lt;span class="c1"&gt;// with it is also good for security.&lt;/span&gt;

&lt;span class="c1"&gt;// reading text on a click&lt;/span&gt;
&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cbReadPermissionStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;clipboard-read&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;cbReadPermissionStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;granted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="nx"&gt;cbReadPermissionStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prompt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readText&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// do something with the text&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// show a nice error message, or ask for the permission nicely&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#checking-raw-geolocation-endraw-permissions-using-permissions-api"&gt;
  &lt;/a&gt;
  &lt;a&gt;2️⃣ Checking &lt;code&gt;geolocation&lt;/code&gt; permissions using Permissions API:&lt;/a&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;building an application where the current location of the user is important for a feature to work in your application? Then this one is for you.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the example below 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geoPermissionStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;geolocation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;geoPermissionStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;granted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="nx"&gt;geoPermissionStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prompt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geolocation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCurrentPosition&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// do something with the location&lt;/span&gt;
      &lt;span class="c1"&gt;// show friends around the user for eg&lt;/span&gt;
      &lt;span class="c1"&gt;// or move the map to the user's location&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// show warning that certain feature of the app&lt;/span&gt;
    &lt;span class="c1"&gt;// will not work if the location permission is not provided&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Others APIs permissions can be checked using the same procedure as defined above.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#thank-you-for-giving-it-a-read"&gt;
  &lt;/a&gt;
  Thank you for giving it a read. ❤️
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#please-follow-me-on-twitter"&gt;
  &lt;/a&gt;
  Please follow me on &lt;a href="https://www.twitter.com/sidmirza4"&gt;twitter&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#happy-coding"&gt;
  &lt;/a&gt;
  Happy Coding
&lt;/h4&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Say hello to sturmglas (a hackathon project)</title>
      <author>Simona Winnekes</author>
      <pubDate>Wed, 01 Sep 2021 07:50:59 +0000</pubDate>
      <link>https://dev.to/winnekes/say-hello-to-sturmglas-a-hackathon-project-3f43</link>
      <guid>https://dev.to/winnekes/say-hello-to-sturmglas-a-hackathon-project-3f43</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introducing-sturmglas-dont-weather-your-emotions-alone"&gt;
  &lt;/a&gt;
  Introducing sturmglas - don't weather your emotions alone.
&lt;/h2&gt;

&lt;p&gt;Hello everyone! With a few hours to spare, I am happy to share my contribution to the &lt;a href="https://townhall.hashnode.com/auth0-hackathon"&gt;Auth0/Hashnode&lt;/a&gt; hackathon!&lt;/p&gt;

&lt;p&gt;What a fun experience it has been in the last 25 days! I learned more about Next.js, IoT, and authentication/authorization.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  tl;dr
&lt;/h2&gt;

&lt;p&gt;Here are the links!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sturmglas.com"&gt;sturmglas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/winnekes/sturmglas"&gt;Sturmglas repository&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But keep reading to find out what these cuties are:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1GKzdwfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/jDi0Qay.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1GKzdwfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/jDi0Qay.gif" alt="Imgur"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inspiration"&gt;
  &lt;/a&gt;
  Inspiration 🌟
&lt;/h2&gt;

&lt;p&gt;Before &lt;a href="https://winnekes.hashnode.dev/from-scrubs-to-slacks"&gt;switching careers&lt;/a&gt; I was a nurse and specialised in cardiology and psychiatry. &lt;/p&gt;

&lt;p&gt;Mental health is such an important part of our life and wellbeing, but often neglected. My nephew for example can never express his feelings without the help of his toys.&lt;/p&gt;

&lt;p&gt;And maybe you just don't want to talk about how you feel or why you feel a certain way but still want the people around you to know. &lt;/p&gt;

&lt;p&gt;Introducing &lt;a href="https://winnekes.hashnode.dev/from-scrubs-to-slacks"&gt;sturmglas&lt;/a&gt; and Companions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video-demos"&gt;
  &lt;/a&gt;
  Video demos 📼
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Companion demo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;%[&lt;a href="https://youtu.be/8u_i7pVv38M"&gt;https://youtu.be/8u_i7pVv38M&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Desktop (app only, without companion)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;%[&lt;a href="https://youtu.be/lWHwMlVTJ20"&gt;https://youtu.be/lWHwMlVTJ20&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;Here's a picture with all the Companions! Happy to share more about them. You can find the STL files (the 3d printer files) in the repo as well. &lt;br&gt;
The following companions exist, in emoji form: 🐰🦊​ 🐙🍀☁️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gGRjLfpT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sH7Lk1o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gGRjLfpT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sH7Lk1o.jpg" alt="Imgur"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Add, edit, delete your mood!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rkLlv80m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/ekTyBcA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rkLlv80m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/ekTyBcA.gif" alt="Imgur"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Share your mood as downloadable png!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ImESDPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Uqt1oxk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ImESDPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Uqt1oxk.jpg" alt="Imgur"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;View insights/stats about your moods!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AigGmzNx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/hzhvb8a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AigGmzNx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/hzhvb8a.gif" alt="Imgur"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech stack 🖥️
&lt;/h2&gt;

&lt;p&gt;We have the PWA (installable web application) and the IoT companions.&lt;/p&gt;

&lt;p&gt;I always wanted to see how I can build a complete server on Next.js and figured out to use GraphQL instead of REST on the backend. type-graphql and TypeORM were a bit of a pain to setup, certain Babel configurations where necessary, but I managed in the end.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For the PWA (100% TypeScript):&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nextjs&lt;/li&gt;
&lt;li&gt;Auth0&lt;/li&gt;
&lt;li&gt;Chakra UI&lt;/li&gt;
&lt;li&gt;Chartjs&lt;/li&gt;
&lt;li&gt;Web Bluetooth API&lt;/li&gt;
&lt;li&gt;GraphQL (server and client)&lt;/li&gt;
&lt;li&gt;TypeORM&lt;/li&gt;
&lt;li&gt;PostgreSQL database (hosted on &lt;a href="https://supabase.io"&gt;supabase.io&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;For the IoT companions&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TTGO T-Display&lt;/li&gt;
&lt;li&gt;Pizo Buzzer&lt;/li&gt;
&lt;li&gt;LiPo battery (3.7v battery)&lt;/li&gt;
&lt;li&gt;3d-printed case, designed using OpenSCAD and printed on an Ender 3 in different filaments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here I used C++ to setup the Bluetooth connection, the buzzer sounds (when connecting and disconnecting) and the way of rendering the cute faces. 😊 &lt;br&gt;
My boyfriend is a wizard and (patiently) taught me a lot about hardware, batteries, memoryd buffer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-one-thing-i-would-change"&gt;
  &lt;/a&gt;
  What is the one thing I would change? 😢
&lt;/h2&gt;

&lt;p&gt;Looking back I believe I should have gone the native way.&lt;/p&gt;

&lt;p&gt;PWA are awesome and I believe they are the future! But they are far from a native app can deliver to the user. The Web Bluetooth API for example is still quite experimental and in early stages despite its age.&lt;/p&gt;

&lt;p&gt;I already see limitations - for example when I connect to a Companion my phone does not indicate that I am connected to a Bluetooth device. Further more I cannot be connected in the background - only while the web app is in the foreground can I interact with the Companion. &lt;/p&gt;

&lt;p&gt;We still can't automatically connect to a Bluetooth device after sucessful pairing - right now the user has to connect to their Companion every time they come back to the app. It is of course a security features so that malicious websites cannot hack into your devices.&lt;/p&gt;

&lt;p&gt;Say hello to refactoring!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-coming-next"&gt;
  &lt;/a&gt;
  What's coming next? ⌛
&lt;/h2&gt;

&lt;p&gt;As mentioned, I will most likely refactor the application to React Native after research Bluetooth more. I want to more use of Auth0's features, especially role-based access.&lt;/p&gt;

&lt;p&gt;Some of the features to come are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;The Companion&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The Companion is nothing more than a mirror of your emotions at the moment. The idea is that of a Tamagotchi in the future; you take care of the mental health of your Companion 💪&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Habits&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://sturmglas.com"&gt;sturmglas&lt;/a&gt; wants to help you build better habits and in turn improve your mental health and wellbeing. Say you want to stop smoking? Drink more water? &lt;a href="https://sturmglas.com"&gt;sturmglas&lt;/a&gt; and your companion will help you stay on track.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Mood prediction&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;So far I'm only collecting data and displaying it back to the user. I want to notice trends, suggest targeted challenges/habits/meditation that might help you feel better&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bonfires&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Start or join groups to discuss mental health, tips and tricks around those topics, share healthy habits and goals&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;For children&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Teaching children how to deal with feelings (especially negative ones) is not easy. With the help of the Companion they can express their emotions in a safe way&lt;/li&gt;
&lt;li&gt;A dashboard for parents if users are underage&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-get-a-companion-%E2%80%8B"&gt;
  &lt;/a&gt;
  "How do I get a Companion?" 🐰🦊​ 🐙🍀☁️
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1GKzdwfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/jDi0Qay.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1GKzdwfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/jDi0Qay.gif" alt="Imgur"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The little companions were completely manufactured by me. I listed the resources used, the STL files to print, and the code is available in the &lt;a href="https://github.com/winnekes/sturmglas/iot"&gt;repository&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If you want you could build your very own!&lt;/p&gt;

&lt;p&gt;That being said, should this idea have traction and people are requesting a companion I'll do my best to get that production line started for an initial alpha stage of &lt;a href="https://sturmglas.com"&gt;sturmglas&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please subscribe to my newsletter on &lt;a href="https://winnekes.hashnode.dev"&gt;Hashnode&lt;/a&gt;. if you haven't done so already, feel free to leave a comment if you want to receive updates - I will soon embed a dedicated newsletter on &lt;a href="https://sturmglas.com"&gt;sturmglas&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please try out the app and give me your honest feedback! &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>iot</category>
      <category>nextjs</category>
      <category>mentalhealth</category>
    </item>
    <item>
      <title>Learning Go by examples: part 8 - Automatically cross-compile &amp; release your Go app</title>
      <author>Aurélie Vache</author>
      <pubDate>Wed, 01 Sep 2021 07:31:03 +0000</pubDate>
      <link>https://dev.to/aurelievache/learning-go-by-examples-part-8-automatically-cross-compile-release-your-go-app-457a</link>
      <guid>https://dev.to/aurelievache/learning-go-by-examples-part-8-automatically-cross-compile-release-your-go-app-457a</guid>
      <description>&lt;p&gt;In previous articles we created an &lt;a href="https://dev.to/aurelievache/learning-go-by-examples-part-2-create-an-http-rest-api-server-in-go-1cdm"&gt;HTTP REST API server&lt;/a&gt;, a &lt;a href="https://dev.to/aurelievache/learning-go-by-examples-part-3-create-a-cli-app-in-go-1h43"&gt;CLI&lt;/a&gt;, a &lt;a href="https://dev.to/aurelievache/learning-go-by-examples-part-4-create-a-bot-for-discord-in-go-43cf"&gt;Bot for Discord&lt;/a&gt;, a &lt;a href="https://dev.to/aurelievache/learning-go-by-examples-part-6-create-a-grpc-app-in-go-2ja3"&gt;gRPC app&lt;/a&gt; ... and even a &lt;a href="https://dev.to/aurelievache/learning-go-by-examples-part-5-create-a-game-boy-advance-gba-game-in-go-5944"&gt;game for Nintendo Game Boy Advance&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;As we have already seen, Golang can be used for several of type of applications, but you know, I love creating CLI apps &amp;amp; tools, I love DevOps philosophy and I love Gophers. So in this article we'll create a little tool, with few Go best practices, and automatically generate cross-platform executable binaries and create GitHub releases through GitHub actions.&lt;/p&gt;

&lt;p&gt;Ready?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initialization"&gt;
  &lt;/a&gt;
  Initialization
&lt;/h2&gt;

&lt;p&gt;First, create our new repository in GitHub (in order to share and open-source it).&lt;/p&gt;

&lt;p&gt;For that, I logged in &lt;a href="https://github.com/"&gt;GitHub website&lt;/a&gt;, clicked on the &lt;strong&gt;repositories&lt;/strong&gt; link, click on "New" green button and then I created a new repository called &lt;a href="https://github.com/scraly/gophersay"&gt;gophersay&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, in your local computer, git clone this new repository where you want:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone https://github.com/scraly/gophersay.git
$ cd gophersay
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, we have to initialize Go modules (dependency management):&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go mod init github.com/scraly/gophersay
go: creating new go.mod: module github.com/scraly/gophersay
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will create a &lt;code&gt;go.mod&lt;/code&gt; file like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module github.com/scraly/gophersay

go 1.16
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Before starting to code our Desktop application, as good practices, we will create a simple code organization.&lt;/p&gt;

&lt;p&gt;Create the following folders organization:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
├── bin
├── README.md
└── go.mod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That's it? Yes, the rest of our code organization will be created shortly ;-).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-create-our-app"&gt;
  &lt;/a&gt;
  Let's create our app
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zLTrczfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrsfks6mf5eexmcqwex0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zLTrczfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrsfks6mf5eexmcqwex0.png" alt="Fox Gopher"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What do we want?&lt;/p&gt;

&lt;p&gt;Do you know "&lt;a href="https://fr.wikipedia.org/wiki/Cowsay"&gt;cowsay&lt;/a&gt;" application? It's a simple app that display your text said by a cow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c_VwKlC2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gvdm2adkdv0uln4yy2y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c_VwKlC2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gvdm2adkdv0uln4yy2y.png" alt="cowsay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I love cow, but I love more Gophers, so we want to create a "cowsay" version with a Gopher instead of a cow.&lt;br&gt;
The program will display a text written by the user and a Gopher, in ASCII, that say the text.&lt;/p&gt;

&lt;p&gt;This app may seem useless but you will see, it will allow us to see some good practices ;-).&lt;/p&gt;

&lt;p&gt;The first thing to do is to retrieve &lt;a href="https://github.com/scraly/gophersay/tree/main/gophers"&gt;Gophers in ASCII format&lt;/a&gt; I created and put them in a new &lt;code&gt;gophers&lt;/code&gt; folder. You need to have a folder like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── gophers
│   ├── gopher0.txt
│   ├── gopher1.txt
│   ├── gopher2.txt
│   └── gopher3.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Create a &lt;code&gt;main.go&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;First, we initialize the package, called &lt;code&gt;main&lt;/code&gt;, and all dependencies/librairies we need to import:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"math/rand"&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;
    &lt;span class="s"&gt;"strconv"&lt;/span&gt;
    &lt;span class="s"&gt;"strings"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;

    &lt;span class="s"&gt;"embed"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, we initialize our variable:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// Hey, I want to embed "gophers" folder in the executable binary&lt;/span&gt;
&lt;span class="c"&gt;// Use embed go 1.16 new feature (for embed gophers static files)&lt;/span&gt;
&lt;span class="c"&gt;//go:embed gophers&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;embedGopherFiles&lt;/span&gt; &lt;span class="n"&gt;embed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Thanks to awesome &lt;strong&gt;embed&lt;/strong&gt; feature included since &lt;a href="https://golang.org/doc/go1.16#library-embed"&gt;Go 1.16&lt;/a&gt; version, we tell that we embed &lt;code&gt;gophers/&lt;/code&gt; folder in the variable &lt;code&gt;embedGopherFiles&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's create the &lt;code&gt;main()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c"&gt;// Display usage/help message&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"-h"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"--help"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;usage&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"GopherSay is inspired by Cowsay program.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;GopherSay allow you to display a message said by a cute random Gopher.&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;Usage:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;   gophersay MESSAGE&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;Example:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;   gophersay hello Gopher lovers"&lt;/span&gt;

        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;nbChar&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;nbChar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt; "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" &amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"        &lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"         &lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;// Generate a random integer depending on get the number of ascii files&lt;/span&gt;
        &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnixNano&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;randInt&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getNbOfGopherFiles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;// Display random gopher ASCII embed files&lt;/span&gt;
        &lt;span class="n"&gt;fileData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;embedGopherFiles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"gophers/gopher"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Itoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randInt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;".txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error during read gopher ascii file"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileData&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It's time to explain the &lt;code&gt;main()&lt;/code&gt; function step by step.&lt;/p&gt;

&lt;p&gt;First, if the user execute our app/tool without argument, or with "-h" option and or "--help" option, we display an usage/a help message:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="c"&gt;// Display usage/help message&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"-h"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"--help"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;usage&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"GopherSay is inspired by Cowsay program.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;GopherSay allow you to display a message said by a cute random Gopher.&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;Usage:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;   gophersay MESSAGE&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;Example:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;   gophersay hello Gopher lovers"&lt;/span&gt;

        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, if user execute the &lt;code&gt;gophersay&lt;/code&gt; app with an argument, a text, we define a variable message that retrieve all arguments and a variable with the number of characters of the message.&lt;br&gt;
We print out this message surrounded by "bubble", like "cowsay" program does:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;nbChar&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;nbChar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt; "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" &amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"        &lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"         &lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After that, we generate a random integer between 0 and the number of gopher files we have -1 (4-1 at this time but I plan to add more):&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;        &lt;span class="c"&gt;// Generate a random integer depending on get the number of ascii files&lt;/span&gt;
        &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnixNano&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;randInt&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getNbOfGopherFiles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Wait... why do we execute &lt;code&gt;rand.Seed()&lt;/code&gt; function?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rand.Intn(int)&lt;/code&gt; returns a non negative pseudo-random number in [0,n]. It's cool, but … it produces a deterministic sequence of values!&lt;br&gt;
So the solution, in order to have "real" random number is to use &lt;code&gt;rand.Seed()&lt;/code&gt; in order to initialize the default source.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mWsJ-uoT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a385vkldksuvwfqov1p2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mWsJ-uoT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a385vkldksuvwfqov1p2.png" alt="crypto/rand"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's go back to our code, we then want to display our cute ASCII Gopher:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;        &lt;span class="c"&gt;// Display random gopher ASCII embed files&lt;/span&gt;
        &lt;span class="n"&gt;fileData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;embedGopherFiles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"gophers/gopher"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Itoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randInt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;".txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error during read gopher ascii file"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileData&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And finally, create the function that return the number of ASCII Gopher image files:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;getNbOfGopherFiles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;embedGopherFiles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadDir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"gophers"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error during reading gophers folder"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;nbOfFiles&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;nbOfFiles&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;nbOfFiles&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#ok-but-what-is-this-famous-embed"&gt;
  &lt;/a&gt;
  OK, but what is this famous embed??
&lt;/h3&gt;

&lt;p&gt;If we package only our &lt;code&gt;main.go&lt;/code&gt; file in an executable binary, when we will execute it, we'll have a problem because "gophers/" folder not exists in your computer.&lt;/p&gt;

&lt;p&gt;Before Go version 1.16, there were several solutions but not as easy as the new &lt;a href="https://golang.org/doc/go1.16#library-embed"&gt;&lt;code&gt;embed&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The new &lt;code&gt;embed&lt;/code&gt; package provides access to files embedded in the program during compilation using the new &lt;code&gt;//go:embed directive&lt;/code&gt;. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The new &lt;code&gt;//go:embed&lt;/code&gt; directive allow to embed static files and folders into application binary at compile-time without using an external tool.&lt;/p&gt;

&lt;p&gt;In order to use it, first we have to declare a variable for the embedded content. In our example we embed our &lt;code&gt;gophers/&lt;/code&gt; folder:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;//go:embed gophers&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;embedGopherFiles&lt;/span&gt; &lt;span class="n"&gt;embed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, we can read one file in this folder:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;fileData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;embedGopherFiles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"gophers/gopher"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Itoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randInt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;".txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And retrieve a list of the files in this folder:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;embedGopherFiles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadDir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"gophers"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can also embed a file directly:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;//go:embed gophers/gopher0.txt&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;myFile&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;/!\ If the embed pattern names a folder, all files are embedded (recursively), except the files with names beginning with "." or "_". &lt;br&gt;
If you want to embed them, you need to specify the folder like this: &lt;code&gt;myfolder/*&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Awesome!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#test-it"&gt;
  &lt;/a&gt;
  Test it!
&lt;/h2&gt;

&lt;p&gt;After code explanation, it's time to test our little app!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run main.go
GopherSay is inspired by Cowsay program.
GopherSay allow you to display a message said by a cute random Gopher.

Usage:
   gophersay MESSAGE

Example:
   gophersay hello Gopher lovers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;go run main.go &lt;span class="nt"&gt;--help&lt;/span&gt;
GopherSay is inspired by Cowsay program.
GopherSay allow you to display a message said by a cute random Gopher.

Usage:
   gophersay MESSAGE

Example:
   gophersay hello Gopher lovers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Cool, we have our usage message.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;go run main.go Hello Gopher lovers!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFghxKwH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv0q9ffp82llncebyzkc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFghxKwH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv0q9ffp82llncebyzkc.png" alt="gophersay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yeah! Our text is said by one of our cute ASCII Gophers!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#build-it"&gt;
  &lt;/a&gt;
  Build it!
&lt;/h2&gt;

&lt;p&gt;Your application is now ready, you can build it.&lt;/p&gt;

&lt;p&gt;In previous articles, we used &lt;a href="https://taskfile.dev/#/"&gt;Taskfile&lt;/a&gt; in order to automate our common tasks.&lt;/p&gt;

&lt;p&gt;I created a &lt;code&gt;Taskfile.yaml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3"&lt;/span&gt;

&lt;span class="na"&gt;tasks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
        &lt;span class="na"&gt;desc&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run the app&lt;/span&gt;
        &lt;span class="na"&gt;cmds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;GOFLAGS=-mod=mod go run main.go&lt;/span&gt;

    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;desc&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build the app&lt;/span&gt;
        &lt;span class="na"&gt;cmds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;GOFLAGS=-mod=mod go build -o bin/gophersay main.go&lt;/span&gt; 

    &lt;span class="na"&gt;clean&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;desc&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build the app&lt;/span&gt;
        &lt;span class="na"&gt;cmds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;rm -rf dist&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So, now we can build our app:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ task build
task: [build] GOFLAGS=-mod=mod go build -o bin/gophersay main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But... the executable binary is only for our environment, our OS, our platform, and I want to share my &lt;code&gt;gophersay&lt;/code&gt; worldwide so it's time to find a way to easily cross-compile our app!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#goreleaser"&gt;
  &lt;/a&gt;
  GoReleaser
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6MDvOWtJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nb7x7cs422mu5d886xrt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6MDvOWtJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nb7x7cs422mu5d886xrt.png" alt="GoReleaser"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With &lt;a href="https://goreleaser.com/"&gt;GoReleaser&lt;/a&gt;, it's possible to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cross-compile Go project&lt;/li&gt;
&lt;li&gt;Release to GitHub, GitLab and Gitea&lt;/li&gt;
&lt;li&gt;Create Docker images and manifests&lt;/li&gt;
&lt;li&gt;Create Linux packages and Homebrew taps&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oh, come on, it's exactly what do we want!&lt;/p&gt;

&lt;p&gt;First, we need to &lt;a href="https://goreleaser.com/install/"&gt;install GoReleaser&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For MacOS:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew install goreleaser/tap/goreleaser
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Run the init command to create a &lt;code&gt;.goreleaser.yml&lt;/code&gt; configuration file:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ goreleaser init
   • Generating .goreleaser.yml file
   • config created; please edit accordingly to your needs file=.goreleaser.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's watch this new generated file:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# This is an example .goreleaser.yml file with some sane defaults.&lt;/span&gt;
&lt;span class="c1"&gt;# Make sure to check the documentation at http://goreleaser.com&lt;/span&gt;
&lt;span class="na"&gt;before&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;hooks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# You may remove this if you don't use go modules.&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;go mod tidy&lt;/span&gt;
    &lt;span class="c1"&gt;# you may remove this if you don't need go generate&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;go generate ./...&lt;/span&gt;
&lt;span class="na"&gt;builds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;CGO_ENABLED=0&lt;/span&gt;
    &lt;span class="na"&gt;goos&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;linux&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;windows&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;darwin&lt;/span&gt;
&lt;span class="na"&gt;archives&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;replacements&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;darwin&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Darwin&lt;/span&gt;
      &lt;span class="na"&gt;linux&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Linux&lt;/span&gt;
      &lt;span class="na"&gt;windows&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Windows&lt;/span&gt;
      &lt;span class="na"&gt;386&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;i386&lt;/span&gt;
      &lt;span class="na"&gt;amd64&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;x86_64&lt;/span&gt;
&lt;span class="na"&gt;checksum&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name_template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;checksums.txt'&lt;/span&gt;
&lt;span class="na"&gt;snapshot&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name_template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;incpatch&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;.Version&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}-next"&lt;/span&gt;
&lt;span class="na"&gt;changelog&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;asc&lt;/span&gt;
  &lt;span class="na"&gt;filters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;^docs:'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;^test:'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It's pretty cool. Because we don't use &lt;code&gt;go generate&lt;/code&gt; in our application, we can remove the &lt;code&gt;- go generate ./...&lt;/code&gt; line ;-).&lt;/p&gt;

&lt;p&gt;Let's run a "local-only" release to generate a release of our Go app locally:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ goreleaser release --snapshot --skip-publish --rm-dist
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;/!\ Don't forget to call this &lt;code&gt;goreleaser release&lt;/code&gt; command with &lt;code&gt;--rm-dist&lt;/code&gt; option or you can execute &lt;code&gt;task clean&lt;/code&gt; target in order to remove &lt;strong&gt;dist/&lt;/strong&gt; folder. If not, you'll have an issue because this folder need to be empty ^^.&lt;/p&gt;

&lt;p&gt;If we take a look into new &lt;code&gt;dist/&lt;/code&gt; generated folder, we can see that GoReleaser generate, for us, cross-platform executable binaries, and checksum:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dist
├── checksums.txt
├── config.yaml
├── gophersay_0.0.1-next_Darwin_arm64.tar.gz
├── gophersay_0.0.1-next_Darwin_x86_64.tar.gz
├── gophersay_0.0.1-next_Linux_arm64.tar.gz
├── gophersay_0.0.1-next_Linux_i386.tar.gz
├── gophersay_0.0.1-next_Linux_x86_64.tar.gz
├── gophersay_0.0.1-next_Windows_i386.tar.gz
├── gophersay_0.0.1-next_Windows_x86_64.tar.gz
├── gophersay_darwin_amd64
│   └── gophersay
├── gophersay_darwin_arm64
│   └── gophersay
├── gophersay_linux_386
│   └── gophersay
├── gophersay_linux_amd64
│   └── gophersay
├── gophersay_linux_arm64
│   └── gophersay
├── gophersay_windows_386
│   └── gophersay.exe
└── gophersay_windows_amd64
    └── gophersay.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It's perfect!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#when-github-action-meet-goreleaser"&gt;
  &lt;/a&gt;
  When GitHub Action meet GoReleaser...
&lt;/h2&gt;

&lt;p&gt;And what about generate a new release automatically?&lt;/p&gt;

&lt;p&gt;Now, the next step is to execute GoReleaser, and publish a new associated Release in GitHub everytime we tag a new version of our application in our Git repository.&lt;/p&gt;

&lt;p&gt;Let's do this!&lt;/p&gt;

&lt;p&gt;Our Git repository is hosted in GitHub so we will use &lt;a href="https://docs.github.com/en/actions"&gt;GitHub Actions&lt;/a&gt; for our CI (Continuous Integration) pipeline.&lt;/p&gt;

&lt;p&gt;Create our workflow:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir .github/workflows
$ cd .github/workflows
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Inside it, create &lt;code&gt;goreleaser.yml&lt;/code&gt; file with this content:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;goreleaser&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;*'&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;goreleaser&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;fetch-depth&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set up Go&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-go@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;go-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.16&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run GoReleaser&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;goreleaser/goreleaser-action@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;distribution&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;goreleaser&lt;/span&gt;
          &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;latest&lt;/span&gt;
          &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;release --rm-dist&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This workflow contains one job that we'll checkout the repository, package our app with GoReleaser and generate a GitHub release.&lt;/p&gt;

&lt;p&gt;/!\ In order to release to GitHub, GoReleaser need a valid GitHub token with the &lt;code&gt;repo&lt;/code&gt; scope. Fortunately, GitHub automatically &lt;a href="https://docs.github.com/en/actions/reference/authentication-in-a-workflow#about-the-github_token-secret"&gt;creates a GITHUB_TOKEN secret&lt;/a&gt; to use in a workflow. &lt;/p&gt;

&lt;p&gt;After pushed your modification in the Git repository, now we can create a Git tag and push it:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git tag -a v1.0.0 -m "First release"

$ git push --tags
Énumération des objets: 1, fait.
Décompte des objets: 100% (1/1), fait.
Écriture des objets: 100% (1/1), 157 octets | 157.00 Kio/s, fait.
Total 1 (delta 0), réutilisés 0 (delta 0), réutilisés du pack 0
To https://github.com/scraly/gophersay.git
 * [new tag]         v1.0.0 -&amp;gt; v1.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's go in our GitHub repository, and click on &lt;a href="https://github.com/scraly/gophersay/actions"&gt;"Actions"&lt;/a&gt; tab in order to watch running, failed and successfull workflows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UwGSD_02--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gr8445ycbpm1ep9ij4d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UwGSD_02--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gr8445ycbpm1ep9ij4d.png" alt="Gh actions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perfect, our workflow successfully runned.&lt;/p&gt;

&lt;p&gt;A new GitHub release have been automatically created:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e0cL6Qki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xnzgk0uv3t5ogpfk9wg4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e0cL6Qki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xnzgk0uv3t5ogpfk9wg4.png" alt="GH release"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YxMQBcrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8600bo86sg2omork79k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YxMQBcrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8600bo86sg2omork79k.png" alt="GH release details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now, each time I will update my app and create a Git tag and push it, automatically a new (GitHub) GH release will be created with cross-platform binaries :-).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#thanks"&gt;
  &lt;/a&gt;
  Thanks
&lt;/h2&gt;

&lt;p&gt;If you like this article/tutorial and the cute &lt;code&gt;gophersay&lt;/code&gt; app, don't hesitate to add a star on GitHub :-)&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/scraly"&gt;
        scraly
      &lt;/a&gt; / &lt;a href="https://github.com/scraly/gophersay"&gt;
        gophersay
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      GopherSay allow you to display a message said by a cute random Gopher.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h3&gt;
GopherSay&lt;/h3&gt;
  &lt;p&gt;
    &lt;a href="https://github.com/scraly/gophersay/releases/latest"&gt;&lt;img alt="GitHub release" src="https://camo.githubusercontent.com/8b668cd7bb4acd91638ddbfc503694207a68b8fa1e26176d1145291e62f3f16d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f736372616c792f676f706865727361792e7376673f6c6f676f3d676974687562267374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
    &lt;a href="https://goreportcard.com/report/github.com/scraly/gophersay" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f8503ee18cf50db0ba88357f96a86286e6325350f669663012f042fd5b518789/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f736372616c792f676f70686572736179" alt="Code Status"&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;h1&gt;
About&lt;/h1&gt;
&lt;p&gt;Welcome in GopherSay!&lt;/p&gt;
&lt;p&gt;GopherSay is inspired by Cowsay program.&lt;/p&gt;
&lt;p&gt;GopherSay allow you to display a message said by a cute random Gopher.&lt;/p&gt;
&lt;h1&gt;
Installation&lt;/h1&gt;
&lt;p&gt;For MacOS:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;brew tap scraly/tools
brew install gophersay
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;
Pre-requisites&lt;/h1&gt;
&lt;p&gt;Install Go in 1.16 version minimum.&lt;/p&gt;
&lt;h1&gt;
Build the app&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;$ go build -o bin/gophersay main.go&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ task build&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;
Run the app&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;$ ./bin/gophersay&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ task run&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;
Test the app&lt;/h1&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;
&lt;pre&gt;&lt;code&gt;$ ./bin/gophersay Hello Gopher lovers
 ---------------------
&amp;lt; Hello Gopher lovers! &amp;gt;
 ---------------------
        \
         \
                                          ,
                             (%..**,,,,,.&amp;amp; .,,.**
                            ,%,*..,,,. .** **.,*,,**./
                           ./*,,.. .**,.,..,.,**.**..(.
                      .   (@.,*%.**.,,**,.,,%*..**,*,/(
                  ,..../../&amp;amp;&amp;amp;%................%///#.,***.....
                   /....,..........................@*@%...,.,
                     .....................................,
                    &amp;amp;*   #@................................
                 &amp;amp;           ...............................
                #             .........................%       @
               /@     @,      ........................*          *
              *.,            @.......................@    /@@
             /....%        ..........................&amp;amp;
            /........%@@..............................%         %
           ,....................................................*   *   .%
           .........................@,,,,,,,@...................* @   *****#
          *........................@,,,,,,/&amp;amp;(...................  /. ****,**
         ........................@,,,,,,,,,,,, ................/ #/////( ,*,
         //.....................@,,,,,,,,,,,,#................., #//////////
      ...........................,@@@   /  @................../....**//////(
      ...,.........................@@      @.......................///*//*/(
         ...........................&amp;amp;@@@@@@..................   @///////////
         ,..................................................*   @///////&amp;amp;* *
         /..................................................    @/@..,(@.&amp;amp; (
         ,.................................................     @ @/ .(#   .
          ................................................,     @ ,.%(#,**
          .............................................../      @ . @////*/&lt;/code&gt;&lt;/pre&gt;…&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/scraly/gophersay"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you have seen in this article and previous articles, it's possible to create multiple different applications in Go... and to automatize build and cross-compilation.&lt;br&gt;
This time we didn't use Cobra, Viper and other frameworks because I wanted to show you we ca do a very small CLI without it :-).&lt;/p&gt;

&lt;p&gt;All the code of our &lt;strong&gt;GopherSay&lt;/strong&gt; app in Go is available in: &lt;a href="https://github.com/scraly/gophersay"&gt;https://github.com/scraly/gophersay&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the following articles we will create others kind/types of applications in Go.&lt;/p&gt;

&lt;p&gt;Hope you'll like it.&lt;/p&gt;

</description>
      <category>go</category>
      <category>beginners</category>
      <category>github</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>GIT CHEATSHEET: ALL THE COMMANDS YOU NEED TO FAMILIARIZE WITH GIT</title>
      <author>Emma Donery</author>
      <pubDate>Wed, 01 Sep 2021 07:23:26 +0000</pubDate>
      <link>https://dev.to/emma_donery/git-cheatsheet-all-the-commands-you-need-to-familiarize-with-git-3imb</link>
      <guid>https://dev.to/emma_donery/git-cheatsheet-all-the-commands-you-need-to-familiarize-with-git-3imb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  INTRODUCTION
&lt;/h2&gt;

&lt;p&gt;Install git, check (&lt;a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git"&gt;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&lt;/a&gt;)  for easy and clear installation.&lt;/p&gt;

&lt;p&gt;After installation, ensure you configure your &lt;em&gt;username&lt;/em&gt; and &lt;em&gt;email&lt;/em&gt; before making any commit. It allows commits to have right author name and email associated to them. However, this has nothing to do with authentication when pushing to a remote repo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-your-user-name-and-email"&gt;
  &lt;/a&gt;
  SETTING YOUR USER NAME AND EMAIL
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Git config --global user.name "my_username"&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Git config --global user.email my_mail@example.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The above commands declares identity for all repositories, to declare an identity for a single repository, use git config inside a repo&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd my_repository
git config user.name "my_work_login"
git config user.email my_work_mail@example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remove a global identity&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global --remove-section user.name
git config --global --remove-section user.email
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, to force git to look for your identity only within a repository's settings, not in the global config&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.useConfigOnly true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Settings stored in a repository's config file will take precedence over the global config when you use that repository&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-adding-and-commiting-files"&gt;
  &lt;/a&gt;
  CREATING, ADDING AND COMMITING FILES
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git --version&lt;/code&gt; -  verifies if git is installed&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-user-information-initializing-and-cloning-repositories-starting-a-project"&gt;
  &lt;/a&gt;
  Configuring user information, initializing and cloning repositories (starting a project)
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git init&lt;/code&gt; – initiates or creates an empty repository. It creates a hidden folder(.git) necessary for git to work&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git clone&amp;lt;project_name&amp;gt;&lt;/code&gt; - copies an existing Git repository from a server to the local machine. It is followed by a url for the repository that is being cloned.&lt;/p&gt;

&lt;p&gt;Example: git clone &lt;a href="https://github.com/my_username/my_project.git"&gt;https://github.com/my_username/my_project.git&lt;/a&gt;&lt;br&gt;
NB: You can also use the ssh version of the command:&lt;br&gt;
git clone &lt;a href="mailto:git@github.com"&gt;git@github.com&lt;/a&gt;:my_username/my_project.git&lt;br&gt;
However, GitHub recommends using https rather than ssh.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#working-with-snapshots-and-the-git-staging-area"&gt;
  &lt;/a&gt;
  Working with snapshots and the Git staging area
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git status&lt;/code&gt; - checks what files Git will add to your new repository&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add &amp;lt;file&amp;gt;&lt;/code&gt; - tells Git which of the files to place into version control&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt; - tell Git place everything in the directories and the sub-directories into version control.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git reset &amp;lt;file&amp;gt;&lt;/code&gt; - unstage a file while retaining the changes in working directory&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git diff&lt;/code&gt; - difference of what is changed but not staged&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git diff --staged&lt;/code&gt; - difference of what is staged but not yet committed&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; create and populate a file named .gitignore before running the add command for files that you want to exclude from being tracked by Git&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m "Initial commit"&lt;/code&gt; – commits all the added files&lt;br&gt;
A commit creates a snapshot of your entire project. After a commit, the project is ready to upload to a remote repository&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git remote add origin &amp;lt;https://&amp;lt;your-git-service-address&amp;gt;/owner/repository.git&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;NB: You have to create a repository in your git service before adding the created remote.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#branching-and-merging"&gt;
  &lt;/a&gt;
  BRANCHING AND MERGING
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git branch&lt;/code&gt; - list your branches. a * will appear next to the currently active branch&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch [-a]&lt;/code&gt; - List all local branches in repository.With -a: show all branches(with remote).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch -d [name]&lt;/code&gt; - Remove selected branch, if it is already merged into any other. -D instead of -d forces deletion.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout [-b][branch_name]&lt;/code&gt; - Switch working directory to the specified branch. With -b: Git will create the specified branch if it does not exist.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch &amp;lt;branch-name&amp;gt;&lt;/code&gt; - create a new branch at the current commit&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout&lt;/code&gt; - switch to another branch and check it out into your working directory&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git merge &amp;lt;branch&amp;gt;&lt;/code&gt; - merge the specified branch’s history into the current one&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log branchB..branchA&lt;/code&gt; - show the commits on branchA that are not on branchB&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-the-upstream-remote"&gt;
  &lt;/a&gt;
  SETTING UP THE UPSTREAM REMOTE
&lt;/h2&gt;

&lt;p&gt;if you clone a fork, most probably you will not be able to push access to the upstream repo, so you need both your fork but be able to fetch the upstream repository.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git remote -v&lt;/code&gt; - check the remote names&lt;/p&gt;

&lt;p&gt;example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote -v 
origin https://github.com/myusername/repo.git (fetch)
origin https://github.com/myusername/repo.git (push)
upstream # this line may or may not be here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If upstream is there already, set the URL&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote set-url upstream https://github.com/projectusername/repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if it is not there, or you want to add a friend’s fork&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote add upstream https://github.com/projectusername/repo.git
git remote add emma_donery https://github.com/emma_donery/repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#finding-information-about-a-command"&gt;
  &lt;/a&gt;
  FINDING INFORMATION ABOUT A COMMAND
&lt;/h2&gt;

&lt;p&gt;The help command gives details about what the command does, available options and&lt;br&gt;
other documentation.&lt;br&gt;
Syntax:&lt;br&gt;
git command_name --help&lt;br&gt;
example&lt;br&gt;
&lt;code&gt;git push --help&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-updates-from-other-repos-and-updating-the-local-repository"&gt;
  &lt;/a&gt;
  GETTING UPDATES FROM OTHER REPOS AND UPDATING THE LOCAL REPOSITORY
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git remote add [alias] [url]&lt;/code&gt; - add a git URL as an alias&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git fetch [alias]&lt;/code&gt; - Fetch down all the branches from that Git remote&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git merge [alias]/[branch]&lt;/code&gt; - merge a remote branch into your current branch to bring it up to date&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push [alias] [branch]&lt;/code&gt; - Transmit local branch commits to the remote repository branch&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git pull&lt;/code&gt; - fetch and merge any commits from the tracking remote branch&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Where to Store Data for Your Applications in Azure? . Part 1</title>
      <author>AliKolahdoozan</author>
      <pubDate>Wed, 01 Sep 2021 06:54:32 +0000</pubDate>
      <link>https://dev.to/alikolahdoozan/where-to-store-data-for-your-applications-in-azure-part-1-5dp2</link>
      <guid>https://dev.to/alikolahdoozan/where-to-store-data-for-your-applications-in-azure-part-1-5dp2</guid>
      <description>&lt;p&gt;My name is &lt;strong&gt;Ali&lt;/strong&gt;.I am a .NET evangelist and an AZURE Architect. &lt;/p&gt;

&lt;p&gt;Most of applications in the world need to persist data somewhere. You can use a simple text file, any RDBMS or one of the NO-SQL concepts. &lt;/p&gt;

&lt;p&gt;If Azure is your choice of Cloud Provider, you would have multiple options to store data in this platform, but you should know the difference between the options to decide which is the best for your scenario. &lt;/p&gt;

&lt;p&gt;In this series of articles, I have a plan to go through all the options we have to store data for your application in the AZURE platform.&lt;/p&gt;

&lt;p&gt;I am going to follow these steps as I listed below : &lt;/p&gt;

&lt;p&gt;1- Introducing Data Storage Options in the AZURE&lt;br&gt;
2- The reason and usage of each &lt;br&gt;
3- Compare the options &lt;br&gt;
4- Giving you a working sample &lt;/p&gt;

&lt;p&gt;Lets go for the first item. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Introducing Data Storage Options in the AZURE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1- AZURE SQL Database&lt;/p&gt;

&lt;p&gt;If you are familiar with Microsoft SQL Server, you can work with this AZURE SQL very easy. The difference is that Microsoft will take care of Scalability, Performance and Safety of your data efficiently. It is one of the most famous Data stores in the AZURE. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mgiEBO1w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3harzo59w4cu6r7ibw2o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mgiEBO1w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3harzo59w4cu6r7ibw2o.png" alt="SQL AZURE DataBase"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2- AZURE Database for MySQL&lt;/p&gt;

&lt;p&gt;Totally same as SQL Server, if you are familiar with MySQL database, Microsoft just provides you the same but it helps you to have a very scalable , fast and safe version instance of MySQL on their VMs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gjZJ1ngj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m21a743jcpmy7d2cwm39.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gjZJ1ngj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m21a743jcpmy7d2cwm39.png" alt="MySQL on the AZURE"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3- AZURE Database for PostgreSQL&lt;/p&gt;

&lt;p&gt;PostgreSQL and MariaDB are also supported in the AZURE platform. Microsoft gives developers variety of options to use as a data store on its platform.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ol6L1Ftl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75blp67kmp62qxfeo315.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ol6L1Ftl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75blp67kmp62qxfeo315.png" alt="PostgreSQL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4- Azure Cosmos DB&lt;/p&gt;

&lt;p&gt;Azure Cosmos DB is a fully managed NoSQL database for modern app development. It is an evolution of AZURE document DB which offers several APIs to work with data including Table Storage, MongoDB and Graph. Single-digit millisecond response times, and automatic and instant scalability, guarantee speed at any scale. Business continuity is assured with SLA-backed availability and enterprise-grade security. App development is faster and more productive thanks to turnkey multi region data distribution anywhere in the world, open source APIs and SDKs for popular languages. As a fully managed service, Azure Cosmos DB takes database administration off your hands with automatic management, updates and patching. It also handles capacity management with cost-effective serverless and automatic scaling options that respond to application needs to match capacity with demand.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--drjnVWLY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3h14bdepyk7zik4hyals.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--drjnVWLY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3h14bdepyk7zik4hyals.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since the next option is AZURE Storage which is AZURE specific and has multiple components that should be well explained, lets continue the article in the next chapter which is part 2!.&lt;/p&gt;

&lt;p&gt;More to come soon....&lt;/p&gt;

&lt;p&gt;Ali &lt;/p&gt;

</description>
      <category>azure</category>
      <category>serverless</category>
      <category>infrastructure</category>
      <category>database</category>
    </item>
    <item>
      <title>The Ultimate Javascript Cheatsheet </title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Wed, 01 Sep 2021 06:49:27 +0000</pubDate>
      <link>https://dev.to/rainboestrykr/the-ultimate-javascript-cheatsheet-55j2</link>
      <guid>https://dev.to/rainboestrykr/the-ultimate-javascript-cheatsheet-55j2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#javascript-basics"&gt;
  &lt;/a&gt;
  JavaScript Basics
&lt;/h2&gt;

&lt;p&gt;Set of JavaScript basic syntax to add, execute and write basic programming paradigms in Javascript &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-page-script"&gt;
  &lt;/a&gt;
  On Page Script
&lt;/h3&gt;

&lt;p&gt;Adding internal JavaScript to HTML&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script type="text/javascript"&amp;gt; //JS code goes here &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#external-js-file"&gt;
  &lt;/a&gt;
  External JS File
&lt;/h3&gt;

&lt;p&gt;Adding external JavaScript to HTML&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="filename.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h3&gt;

&lt;p&gt;JavaScript Function syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function nameOfFunction () 
{
// function body 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dom-element"&gt;
  &lt;/a&gt;
  DOM Element
&lt;/h3&gt;

&lt;p&gt;Changing content of a DOM Element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementById("elementID").innerHTML = "Hello World!";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
This will print the value of a in JavaScript console&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(a);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conditional-statements"&gt;
  &lt;/a&gt;
  Conditional Statements
&lt;/h3&gt;

&lt;p&gt;Conditional statements are used to perform operations based on some conditions.&lt;/p&gt;

&lt;p&gt;If Statement&lt;br&gt;
The block of code to be executed, when the condition specified is true.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (condition) {
// block of code to be executed if the condition is true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If-else Statement&lt;br&gt;
If the condition for the if block is false, then the else block will be executed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (condition) {
// block of code to be executed if the condition is true
} else {
// block of code to be executed if the condition is false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Else-if Statement&lt;br&gt;
A basic if-else ladder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (condition1) {
// block of code to be executed if condition1 is true
} else if (condition2) {
// block of code to be executed if the condition1 is false and condition2 is true
} else {
// block of code to be executed if the condition1 is false and condition2 is false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Switch Statement&lt;br&gt;
Switch case statement in JavaScript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;switch(expression) {
case x:
// code block
break;
case y:
// code block
break;
default:
// code block
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#iterative-statements-loops"&gt;
  &lt;/a&gt;
  Iterative Statements (Loops)
&lt;/h3&gt;

&lt;p&gt;Iterative statement facilitates programmer to execute any block of code lines repeatedly and can be controlled as per conditions added by the programmer.&lt;/p&gt;

&lt;p&gt;For Loop&lt;br&gt;
For loop syntax in javascript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (statement 1; statement 2; statement 3) {
// code block to be executed
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While Loop&lt;br&gt;
Runs the code till the specified condition is true&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;while (condition) {
// code block to be executed
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do While Loop&lt;br&gt;
A do while loop is executed at least once despite the condition being true or false&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;do {
// run this code in block
i++;
} while (condition);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#strings"&gt;
  &lt;/a&gt;
  Strings
&lt;/h3&gt;

&lt;p&gt;The string is a sequence of characters that is used for storing and managing text data.&lt;/p&gt;

&lt;p&gt;charAt method&lt;br&gt;
Returns the character from the specified index.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str.charAt(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;concat method&lt;br&gt;
Joins two or more strings together.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str1.concat(str2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;index of method&lt;br&gt;
Returns the index of the first occurrence of the specified character from the string else -1 if not found.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str.indexOf('substr')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;match method&lt;br&gt;
Searches a string for a match against a regular expression.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str.match(/(chapter \d+(\.\d)*)/i;)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;replace method&lt;br&gt;
Searches a string for a match against a specified string or char and returns a new string by replacing the specified values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str1.replace(str2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;search method&lt;br&gt;
Searches a string against a specified value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str.search('term')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;split method&lt;br&gt;
Splits a string into an array consisting of substrings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str.split('\n')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;substring method&lt;br&gt;
Returns a substring of a string containing characters from the specified indices.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str.substring(0,5)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h3&gt;

&lt;p&gt;The array is a collection of data items of the same type. In simple terms, it is a variable that contains multiple values.&lt;/p&gt;

&lt;p&gt;variable&lt;br&gt;
Containers for storing data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var fruit = ["element1", "element2", "element3"];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;concat method&lt;br&gt;
Joins two or more arrays together.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;concat()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;indexOf method&lt;br&gt;
Returns the index of the specified item from the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;indexOf()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;join method&lt;br&gt;
Converts the array elements to a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;join()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;pop method&lt;br&gt;
Deletes the last element of the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pop()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;reverse method&lt;br&gt;
This method reverses the order of the array elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;reverse()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;sort method&lt;br&gt;
Sorts the array elements in a specified manner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sort()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;toString method&lt;br&gt;
Converts the array elements to a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;toString()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;valueOf method&lt;br&gt;
returns the relevant Number Object holding the value of the argument passed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;valueOf()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#number-methods"&gt;
  &lt;/a&gt;
  Number Methods
&lt;/h3&gt;

&lt;p&gt;JS math and number objects provide several constant and methods to perform mathematical operations.&lt;/p&gt;

&lt;p&gt;toExponential method&lt;br&gt;
Converts a number to its exponential form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;toExponential()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;toPrecision method&lt;br&gt;
Formats a number into a specified length.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;toPrecision()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;toString method&lt;br&gt;
Converts an object to a string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;toString()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;valueOf method&lt;br&gt;
Returns the primitive value of a number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;valueOf()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#maths-methods"&gt;
  &lt;/a&gt;
  Maths Methods
&lt;/h3&gt;

&lt;p&gt;ceil method&lt;br&gt;
Rounds a number upwards to the nearest integer, and returns the result&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ceil(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;exp method&lt;br&gt;
Returns the value of E^x.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exp(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;log method&lt;br&gt;
Returns the logarithmic value of x.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;log(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;pow method&lt;br&gt;
Returns the value of x to the power y.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pow(x,y)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;random method&lt;br&gt;
Returns a random number between 0 and 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;random()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;sqrt method&lt;br&gt;
Returns the square root of a number x&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sqrt(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dates"&gt;
  &lt;/a&gt;
  Dates
&lt;/h3&gt;

&lt;p&gt;Date object is used to get the year, month and day. It has methods to get and set day, month, year, hour, minute, and seconds.&lt;/p&gt;

&lt;p&gt;Pulling Date from the Date object&lt;br&gt;
Returns the date from the date object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getDate()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pulling Day from the Date object&lt;br&gt;
Returns the day from the date object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getDay()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pulling Hours from the Date object&lt;br&gt;
Returns the hours from the date object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getHours()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pulling Minutes from the Date object&lt;br&gt;
Returns the minutes from the date object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getMinutes()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pulling Seconds from the Date object&lt;br&gt;
Returns the seconds from the date object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getSeconds()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pulling Time from the Date object&lt;br&gt;
Returns the time from the date object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getTime()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#mouse-events"&gt;
  &lt;/a&gt;
  Mouse Events
&lt;/h3&gt;

&lt;p&gt;Any change in the state of an object is referred to as an Event. With the help of JS, you can handle events, i.e., how any specific HTML tag will work when the user does something.&lt;/p&gt;

&lt;p&gt;click&lt;br&gt;
Fired when an element is clicked&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('click', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;oncontextmenu&lt;br&gt;
Fired when an element is right-clicked&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('contextmenu', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;dblclick&lt;br&gt;
Fired when an element is double-clicked&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('dblclick', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;mouseenter&lt;br&gt;
Fired when an element is entered by the mouse arrow&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('mouseenter', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;mouseleave&lt;br&gt;
Fired when an element is exited by the mouse arrow&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('mouseleave', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;mousemove&lt;br&gt;
Fired when the mouse is moved inside the element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('mousemove', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keyboard Events&lt;br&gt;
keydown&lt;br&gt;
Fired when the user is pressing a key on the keyboard&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('keydown', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;keypress&lt;br&gt;
Fired when the user presses the key on the keyboard&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('keypress', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;keyup&lt;br&gt;
Fired when the user releases a key on the keyboard&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.addEventListener('keyup', ()=&amp;gt;{
// Code to be executed when the event is fired
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#errors"&gt;
  &lt;/a&gt;
  Errors
&lt;/h3&gt;

&lt;p&gt;Errors are thrown by the compiler or interpreter whenever they find any fault in the code, and it can be of any type like syntax error, run-time error, logical error, etc. JS provides some functions to handle the errors.&lt;/p&gt;

&lt;p&gt;try and catch&lt;br&gt;
Try the code block and execute catch when err is thrown&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;try {
Block of code to try
}
catch(err) {
Block of code to handle errors
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Window Methods&lt;br&gt;
Methods that are available from the window object&lt;/p&gt;

&lt;p&gt;alert method&lt;br&gt;
Used to alert something on the screen&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;alert()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;blur method&lt;br&gt;
The blur() method removes focus from the current window.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;blur()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;setInterval&lt;br&gt;
Keeps executing code at a certain interval&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setInterval(() =&amp;gt; {
// Code to be executed
}, 1000);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;setTimeout&lt;br&gt;
Executes the code after a certain interval of time&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setTimeout(() =&amp;gt; {
// Code to be executed
}, 1000);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;close&lt;br&gt;
The Window. close() method closes the current window&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;confirm&lt;br&gt;
The window.confirm() instructs the browser to display a dialog with an optional message, and to wait until the user either confirms or cancels&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.confirm('Are you sure?')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;open&lt;br&gt;
Opens a new window&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.open("https://www.google.com");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;prompt&lt;br&gt;
Prompts the user with a text and takes a value. Second parameter is the default value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var name = prompt("What is your name?", "Abhiraj");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;scrollBy&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.scrollBy(100, 0); // Scroll 100px to the right
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;scrollTo&lt;br&gt;
Scrolls the document to the specified coordinates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.scrollTo(500, 0); // Scroll to horizontal position 500
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;clearInterval&lt;br&gt;
Clears the setInterval. var is the value returned by setInterval call&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clearInterval(var)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;clearTimeout&lt;br&gt;
Clears the setTimeout. var is the value returned by setTimeout call&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clearTimeout(var)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;stop&lt;br&gt;
Stops the further resource loading&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stop()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#queryget-elements"&gt;
  &lt;/a&gt;
  Query/Get Elements
&lt;/h3&gt;

&lt;p&gt;The browser creates a DOM (Document Object Model) whenever a web page is loaded, and with the help of HTML DOM, one can access and modify all the elements of the HTML document.&lt;/p&gt;

&lt;p&gt;querySelector&lt;br&gt;
Selector to select first matching element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.querySelector('css-selectors')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;querySelectorAll&lt;br&gt;
A selector to select all matching elements&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.querySelectorAll('css-selectors', ...)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;getElementsByTagName&lt;br&gt;
Select elements by tag name&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementsByTagName('element-name')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;getElementsByClassName&lt;br&gt;
Select elements by class name&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementsByClassName('class-name')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get Element by Id&lt;br&gt;
Select an element by its id&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementById('id')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creating Elements&lt;br&gt;
Create new elements in the DOM&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;createElement
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.createElement('div')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;createTextNode&lt;br&gt;
Create a new text node&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.createTextNode('some text here')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Basics of the Git Workflow for a Code Newbie</title>
      <author>Dolamu Asipa</author>
      <pubDate>Wed, 01 Sep 2021 06:45:05 +0000</pubDate>
      <link>https://dev.to/deteekay/basics-of-the-git-workflow-for-a-code-newbie-23aa</link>
      <guid>https://dev.to/deteekay/basics-of-the-git-workflow-for-a-code-newbie-23aa</guid>
      <description>&lt;p&gt;Last month, I read up on the &lt;a href="https://git-scm.com/book/en/v2"&gt;Git version control system&lt;/a&gt;. I actually found it difficult to understand initially, but after reading several articles on Git, watched a lot of YouTube videos, and completed my &lt;a href="https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/git-basics"&gt;The Odin Project lesson&lt;/a&gt;, I think I have a clear idea now. Here is a summary of the git commands I learned, as a cheatsheet for future use by me - and any other fellow Git-beginners out there. But before we dive into all that, let's address this obvious question;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-exactly-is-git"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;What Exactly is Git?&lt;/em&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Git is a free and open-source distributed version control system. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Version_control"&gt;Version control&lt;/a&gt; systems (also known as revision control, source control, or source code management) are used to manage changes to &lt;a href="https://en.wikipedia.org/wiki/Computer_program"&gt;computer programs&lt;/a&gt;, documents, large &lt;a href="https://en.wikipedia.org/wiki/Website"&gt;web sites&lt;/a&gt;, and other collections of information. These systems provide an automatic way to track changes in projects thereby giving creators the power to view previous versions of &lt;a href="https://en.wikipedia.org/wiki/Computer_file"&gt;files&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Directory_(computing)"&gt;directories&lt;/a&gt;, securely back up the project and its history, and collaborate easily and conveniently with others. They are crucial for tracking edits made by others, correcting errors, and protecting against spam and vandalism. Distributed version control (also known as distributed revision control) is a form of version control in which the complete &lt;a href="https://en.wikipedia.org/wiki/Codebase"&gt;codebase&lt;/a&gt;, including its full history, is mirrored on every developer's computer. &lt;/p&gt;

&lt;p&gt;Git is acessed via a &lt;a href="http://www.linfo.org/command_line_program.html"&gt;command-line program&lt;/a&gt; called &lt;code&gt;git&lt;/code&gt; which lets users transform an ordinary directory into a &lt;a href="https://en.wikipedia.org/wiki/Software_repository"&gt;&lt;em&gt;repository&lt;/em&gt;&lt;/a&gt; (a sort of enhanced directory with the additional ability to track changes to every file and sub-directory). Here are some basic commands frequently used when running Git 👇&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-cheatsheet"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Git Cheatsheet&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;All Git commands consist of the command-line program &lt;code&gt;git&lt;/code&gt; followed by the name of the command, so for the full command to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;to check the version of git installed on your system, type 👉 &lt;code&gt;git --version&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to set your global configuration settings (i.e. your git name and username), type 👉 &lt;code&gt;git config --global user.name &amp;lt;yourname&amp;gt;&lt;/code&gt; and &lt;code&gt;git config --global user.email &amp;lt;email address&amp;gt;&lt;/code&gt;. To configure your local default git branch name to &lt;em&gt;main&lt;/em&gt; (rather than &lt;em&gt;master&lt;/em&gt; which has always been used), type 👉 &lt;code&gt;git config --global init.defaultBranch main&lt;/code&gt;. To check all your git configuration values, type 👉 &lt;code&gt;git config --list&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to initialize a git repository, type 👉 &lt;code&gt;git init&lt;/code&gt;. This creates a special hidden directory called .git where git stores the information it needs to track your project’s changes. (It’s the presence of a properly configured &lt;code&gt;.git&lt;/code&gt; directory that distinguishes a git repository from a regular directory.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to clone a remote repository on your computer, type 👉 &lt;code&gt;git clone &amp;lt;URL where the repository is&amp;gt;&lt;/code&gt;. To create a file in a git repository just use &lt;code&gt;touch&lt;/code&gt; like you would when creating a new file on the command line. To check if you've successfully connected your remote repository to your local machine, navigate to the cloned repository and confirm its URL by typing 👉 &lt;code&gt;git remote -v&lt;/code&gt;. To change the URL of your git remote origin, type 👉 &lt;code&gt;git remote set-url origin &amp;lt;newurl&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to hide files in your repository that you don't want others to see, create a git ignore file using touch, type 👉 &lt;code&gt;touch .gitignore&lt;/code&gt; and manually include the names of those files (or file patterns/extensions) you want ignored to the .gitignore text file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to check the status of your repository, use 👉 &lt;code&gt;git status&lt;/code&gt;. This enables you to see all &lt;em&gt;changes&lt;/em&gt; to files within the respository, displayed to show; files that are merely in your working directory (these are termed 'untracked files'), files that have been edited but not yet (re)staged for commit and files in the staging area (with &lt;em&gt;changes&lt;/em&gt; about to be committed to the repository).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to make a commit in git: first add the file (or files) you want to commit to the staging area, type 👉 &lt;code&gt;git add &amp;lt;filename&amp;gt;&lt;/code&gt; to add a single file or &lt;code&gt;git add .&lt;/code&gt; to add all unstaged files &lt;em&gt;in the current directory&lt;/em&gt; and &lt;code&gt;git add -A&lt;/code&gt; to add all untracked files and directories &lt;em&gt;in the repository&lt;/em&gt;. Then type 👉 &lt;code&gt;git commit -m &amp;lt;a message describing what you have done to make this snapshot different&amp;gt;&lt;/code&gt; to commit your changes. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to remove a single file from the staging area, type 👉 &lt;code&gt;git reset &amp;lt;filename&amp;gt;&lt;/code&gt; or &lt;code&gt;git restore --staged &amp;lt;filename&amp;gt;&lt;/code&gt; or &lt;code&gt;git rm --cached &amp;lt;filename&amp;gt;&lt;/code&gt;. To remove all files, simply type 👉 &lt;code&gt;git reset&lt;/code&gt;. To check the difference between the last commit and unstaged changes in your current project, type 👉 &lt;code&gt;git diff&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to upload/push your work to a remote repository, type 👉 &lt;code&gt;git push origin main&lt;/code&gt;.  To see the history of your commits, type 👉 &lt;code&gt;git log&lt;/code&gt;. This command shows only the commits messages which isn't particularyly detailed. To see the full diffs representated by each commit, use the &lt;code&gt;-p&lt;/code&gt; flag, type 👉 &lt;code&gt;git commit -p&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to commit &lt;em&gt;all changes&lt;/em&gt; in your currently existing files, pass the &lt;code&gt;-a&lt;/code&gt; flag to the &lt;code&gt;git commit&lt;/code&gt; command by typing 👉 &lt;code&gt;git commit -am &amp;lt;message&amp;gt;&lt;/code&gt;. The &lt;code&gt;-a&lt;/code&gt; flag commits &lt;em&gt;all pending changes&lt;/em&gt; to files in the repository. Always remember to type 👉 &lt;code&gt;git add -A&lt;/code&gt; when there are new files.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to see the difference between staged changes and the previous version of the repo, type 👉 &lt;code&gt;git diff --staged&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to correct an error in /update your last commit message, type 👉 &lt;code&gt;git commit --amend&lt;/code&gt;. To ascertain that your git commit message was properly updated, run &lt;code&gt;git log&lt;/code&gt; to  get the SHA of your last commit then view the diff using 👉 &lt;code&gt;git show &amp;lt;SHA&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Resources&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;I generally use the &lt;a href="https://www.theodinproject.com"&gt;The Odin Project&lt;/a&gt; curriculum to study. In addition to that, other resources I found useful while reading up on Git include:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.learnenough.com/git-tutorial"&gt;Learn Enough Git to be Dangerous&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Corey Schafer's &lt;a href="https://www.youtube.com/watch?v=HVsySz-h9r4"&gt;Git Tutorial for Beginners&lt;/a&gt; on Youtube&lt;/li&gt;
&lt;li&gt;Fireship's Youtube video on &lt;a href="https://www.youtube.com/watch?v=HkdAHXoRtos"&gt;Git It? How to use Git and Github&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hey, thanks for reading!  👋 👋&lt;/p&gt;

</description>
      <category>git</category>
      <category>codenewbie</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Pointer vs Reference in C++: The Final Guide</title>
      <author>ZigRazor</author>
      <pubDate>Wed, 01 Sep 2021 06:42:42 +0000</pubDate>
      <link>https://dev.to/zigrazor/pointer-vs-reference-in-c-the-final-guide-3475</link>
      <guid>https://dev.to/zigrazor/pointer-vs-reference-in-c-the-final-guide-3475</guid>
      <description>&lt;p&gt;A &lt;strong&gt;pointer&lt;/strong&gt; in C++ is a variable that holds the memory address of another variable.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;reference&lt;/strong&gt; is an alias for an already existing variable. Once a reference is initialized to a variable, it cannot be changed to refer to another variable. Hence, a reference is similar to a const pointer (not to be confused with a pointer to a constant value!).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-differences"&gt;
  &lt;/a&gt;
  Key differences
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#pointer"&gt;
  &lt;/a&gt;
  Pointer
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;pointer&lt;/strong&gt; can be initialized to any value anytime after it is declared.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int a = 5;
// some code
int *p = &amp;amp;a;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A &lt;strong&gt;pointer&lt;/strong&gt; can be assigned to point to a &lt;code&gt;NULL&lt;/code&gt; value.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pointers&lt;/strong&gt; need to be dereferenced with a &lt;code&gt;*&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A &lt;strong&gt;pointer&lt;/strong&gt; can be changed to point to any variable of the same type.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int a = 5;
int *p;
p = &amp;amp;a;
int b = 6;
p = &amp;amp;b;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;reference&lt;/strong&gt; must be initialized when it is declared.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int a = 5;
int &amp;amp;ref = a;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt; cannot be &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt; can be used ,simply, by name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once a &lt;strong&gt;reference&lt;/strong&gt; is initialized to a variable, it cannot be changed to refer to a variable object.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#other-differences"&gt;
  &lt;/a&gt;
  Other Differences
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#memory-details"&gt;
  &lt;/a&gt;
  Memory Details
&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;pointer&lt;/strong&gt; has its own memory address and size on the stack whereas a &lt;strong&gt;reference&lt;/strong&gt; shares the same memory address (with the original variable) but also takes up some space on the stack.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arithmetic-operations"&gt;
  &lt;/a&gt;
  Arithmetic operations
&lt;/h3&gt;

&lt;p&gt;Various arithmetic operations can be performed on &lt;strong&gt;pointers&lt;/strong&gt; whereas there is no such thing called &lt;strong&gt;Reference&lt;/strong&gt; Arithmetic.(but you can take the address of an object pointed by a reference and do pointer arithmetics on it as in &lt;code&gt;&amp;amp;obj + 6&lt;/code&gt;).)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-use-pointer-and-when-use-reference"&gt;
  &lt;/a&gt;
  When use Pointer and when use Reference
&lt;/h2&gt;

&lt;p&gt;The performances are exactly the same, as references are implemented internally as pointers. But still you can keep some points in your mind to decide when to use what :  &lt;/p&gt;

&lt;p&gt;Use references :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In function parameters and return types.
Use pointers: &lt;/li&gt;
&lt;li&gt;Use pointers if pointer arithmetic or passing NULL-pointer is needed. For example for arrays (Note that array access is implemented using pointer arithmetic).&lt;/li&gt;
&lt;li&gt;To implement data structures like linked list, tree, etc and their algorithms because to point different cell, we have to use the concept of pointers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As said in a &lt;a href="https://isocpp.org/wiki/faq/references#refs-vs-ptrs"&gt;C++ official FAQ&lt;/a&gt; :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Use references when you can, and pointers when you have to.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;References are usually preferred over pointers whenever you don’t need “reseating”. This usually means that references are most &amp;gt;useful in a class’s public interface. References typically appear &amp;gt;on the skin of an object, and pointers on the inside.&lt;/p&gt;

&lt;p&gt;The exception to the above is where a function’s parameter or return value needs a “sentinel” reference — a reference that does not refer to an object. This is usually best done by returning/taking a pointer, and giving the nullptr value this special significance (references must always alias objects, not a dereferenced null pointer).&lt;/p&gt;

&lt;p&gt;Note: Old line C programmers sometimes don’t like references since they provide reference semantics that isn’t explicit in the caller’s code. After some C++ experience, however, one quickly realizes this is a form of information hiding, which is an asset rather than a liability. E.g., programmers should write code in the language of the problem rather than the language of the machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#other-resources"&gt;
  &lt;/a&gt;
  Other Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://isocpp.org/wiki/faq/references#refs-vs-ptrs"&gt;isocpp.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;For More "The Final Guide" see the &lt;a href="https://dev.to/zigrazor/the-final-guide-index-4954"&gt;Index Page&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>codenewbie</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Docker over Qemu on a Mac</title>
      <author>Jilles van Gurp</author>
      <pubDate>Wed, 01 Sep 2021 06:40:05 +0000</pubDate>
      <link>https://dev.to/jillesvangurp/docker-over-qemu-on-a-mac-1ajp</link>
      <guid>https://dev.to/jillesvangurp/docker-over-qemu-on-a-mac-1ajp</guid>
      <description>&lt;p&gt;Yesterday, Docker announced that Docker for Mac is going to require a paid account for large companies soon. While this does not immediately impact me, I have been relying on docker desktop for mac for a while and that annoys me for several reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it's somewhat flaky. I've had loads of issues over the years where I had to wipe it out and reinstall.&lt;/li&gt;
&lt;li&gt;the update process is flaky&lt;/li&gt;
&lt;li&gt;it barfs a lot of stuff all over the file system making cleanup a PITA&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-alternative-dockerhost-amp-ssh"&gt;
  &lt;/a&gt;
  The Alternative: DOCKER_HOST &amp;amp; ssh
&lt;/h2&gt;

&lt;p&gt;Docker is a simple binary that acts as a client to the  docker daemon. Normally it connects to that via a socket that the locally running docker daemon creates.&lt;/p&gt;

&lt;p&gt;However, you can easily make it connect to a remotely running docker daemon by either using the &lt;code&gt;-H&lt;/code&gt; option or setting the &lt;code&gt;DOCKER_HOST&lt;/code&gt; environment variable. One of the supported protocols is &lt;code&gt;ssh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, I installed &lt;code&gt;qemu&lt;/code&gt; via homebrew, and created a vm running a linux distribution (&lt;a href="https://manjaro.org/"&gt;Manjaro&lt;/a&gt;), installed ssh &amp;amp; docker on that, and set up an authorized key so I can ssh into that from my mac terminal. I configured the networking to forward port 5555 to the ssh port 22 on the vm.&lt;/p&gt;

&lt;p&gt;Then I simply set this environment variable on my mac:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;DOCKER_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jilles@localhost:5555
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this all my docker commands (using the client that came with docker for mac; but of course you can install that via homebrew as well), go to the remote host, which is where all the docker containers run.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#docker-port-forwarding"&gt;
  &lt;/a&gt;
  Docker Port Forwarding
&lt;/h2&gt;

&lt;p&gt;The point of running docker is launching things like databases, web servers, etc. with the goal of actually connecting to these things. These things have ports that you might want to talk to. Normally what you do is forward those ports with the -p option. For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-p8080&lt;/span&gt;:80 nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;would run nginx and allow you to connect to that from localhost via port 8080. One minor problem: those ports will be inside the linux vm and not on your mac's localhost.&lt;/p&gt;

&lt;p&gt;There are various ways to address this. An easy one is to use ssh for this. To forward a port, you can use the &lt;code&gt;-L&lt;/code&gt; option with ssh:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh -L 8080:localhost:8080 -p 5555 jilles@localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this, you can access it in your browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-qemu-on-a-mac"&gt;
  &lt;/a&gt;
  Installing Qemu on a Mac
&lt;/h2&gt;

&lt;p&gt;You can make this work with any remote ssh; including cloud based options for this. But I wanted a locally running vm. There are ways to do this on mac. A nice OSS and lightweight option for this is qemu. But of course, you can probably make this work with parallels, virtualbox, vmware, or whatever else.&lt;/p&gt;

&lt;p&gt;You can install qemu via homebrew (or whatever else you prefer). Also make sure to install libvirt. I was not able to get networking going without it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;qemu libvirt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When that has finished and you've started the libvirt service (see instructions it dumps in your terminal when it installs), you can create a disk image and start qemu with a linux iso of your choice (or whatever OS you prefer).&lt;/p&gt;

&lt;p&gt;For reference, here's a script that I use to start qemu:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#  qemu-img create -f qcow2 manjaro.qcow2 30G
#   -cdrom  manjaro-xfce-21.1.1-210827-linux513.iso \

qemu-system-x86_64 \
  -m 4G \
  -vga virtio \
  -display default,show-cursor=on \
  -usb \
  -device usb-tablet \
  -machine type=q35,accel=hvf \
  -smp 2 \
  -drive file=manjaro.qcow2,if=virtio \
  -cpu Nehalem \
  -device e1000,netdev=net0 \
  -netdev user,id=net0,hostfwd=tcp::5555-:22 \
  -soundhw
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The commented first line is the command you use to create a disk image. The line below that is the command line option for qemu you use to mount the linux iso. After you've installed to your disk image, you can remove that and boot from the disk image. I went with manjaro, which was pretty hassle free to get going. The networking options are important as you need port forwarding for ssh.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-amp-down-sides"&gt;
  &lt;/a&gt;
  Benefits &amp;amp; Down Sides
&lt;/h2&gt;

&lt;p&gt;On the plus side:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I have a nice sandboxed linux vm that contains all my docker stuff. I can shut it down, upgrade it, wipe it out, etc.&lt;/li&gt;
&lt;li&gt;Docker command line works as normally and things like docker-compose work as well&lt;/li&gt;
&lt;li&gt;qemu is reasonably fast and uses a similar virtualization strategy as docker for mac uses&lt;/li&gt;
&lt;li&gt;I can uninstall docker for mac.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Downsides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This stuff needs memory and cpu. I noticed qemu struggling a bit with some of the things I normally run in docker for mac.&lt;/li&gt;
&lt;li&gt;While command line docker works fine, other things like some of our gradle build files assume docker is running locally. I may have to investigate forwarding a socket over ssh. Likewise docker port forwarding needs some manual work as well.&lt;/li&gt;
&lt;li&gt;You need some level of skills on the command line, setting up linux, getting qemu going. If you have that; great.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are all sorts of ways to make this more seamless but it works quite nicely like this already. Adding stuff like kubernetes support might be relevant for some. Making the port mapping less tedious might be doable with e.g. &lt;code&gt;sshuttle&lt;/code&gt; or setting up an ssh proxy.&lt;/p&gt;

&lt;p&gt;Let me know on twitter (&lt;a class="mentioned-user" href="https://dev.to/jillesvangurp"&gt;@jillesvangurp&lt;/a&gt;
) what you think about this.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>qemu</category>
    </item>
  </channel>
</rss>
