<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What the heck does an Architect do?</title>
      <author>Adam Crockett</author>
      <pubDate>Tue, 29 Jun 2021 15:56:43 +0000</pubDate>
      <link>https://dev.to/adam_cyclones/what-the-heck-does-an-architect-do-3lg8</link>
      <guid>https://dev.to/adam_cyclones/what-the-heck-does-an-architect-do-3lg8</guid>
      <description>&lt;p&gt;It's something I am curious to know about because I think I already do this job&lt;/p&gt;

</description>
      <category>help</category>
    </item>
    <item>
      <title>React CMS: The missing link</title>
      <author>Matteo Frana</author>
      <pubDate>Tue, 29 Jun 2021 15:39:18 +0000</pubDate>
      <link>https://dev.to/matfrana/react-cms-the-missing-link-3iok</link>
      <guid>https://dev.to/matfrana/react-cms-the-missing-link-3iok</guid>
      <description>&lt;p&gt;&lt;strong&gt;You are a developer. You love your headless CMS.&lt;/strong&gt; &lt;br&gt;
Having an API with no hassles and a modern front-end feels great.&lt;/p&gt;

&lt;p&gt;Do you think your users are happy too? &lt;strong&gt;Think again.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#what-content-creators-want"&gt;
  &lt;/a&gt;
  What content creators want
&lt;/h1&gt;

&lt;p&gt;Content creators want to have a solution that is &lt;strong&gt;easy and inspiring to use&lt;/strong&gt;, possibly with no instruction to read.&lt;br&gt;
Wix is such a tool, with its point and click interface.&lt;br&gt;
&lt;strong&gt;An headless CMS&lt;/strong&gt;, with its gray forms and complex interface, is &lt;strong&gt;neither easy nor inspiring&lt;/strong&gt;.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#what-about-designers"&gt;
  &lt;/a&gt;
  What about designers?
&lt;/h1&gt;

&lt;p&gt;Designers want to be able to express the &lt;strong&gt;corporate design system&lt;/strong&gt; and be sure that &lt;strong&gt;nobody will ever break it&lt;/strong&gt;.&lt;br&gt;
This is why they don't like visual editing, as it often implies too much freedom. Designers want &lt;strong&gt;flexibility&lt;/strong&gt; (for themselves) and &lt;strong&gt;constraints&lt;/strong&gt; (for content creators).&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#are-you-really-happy"&gt;
  &lt;/a&gt;
  Are you really happy?
&lt;/h1&gt;

&lt;p&gt;Do you like going back and forth between your headless CMS to define fields and your code to fetch these fields and use them in your React app?&lt;br&gt;
&lt;strong&gt;Wouldn't it be great if you could save time, stay in your editor&lt;/strong&gt; and define there your fields, as you do for the &lt;strong&gt;props of React components&lt;/strong&gt;?&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-missing-link"&gt;
  &lt;/a&gt;
  The missing link
&lt;/h1&gt;

&lt;p&gt;The missing link is a framework that has decoupled APIs as a service, but lets you define your &lt;strong&gt;content blocks as components&lt;/strong&gt; (for example React or Vue components), providing some &lt;em&gt;magic&lt;/em&gt; to enable visual editing over the texts and images. &lt;strong&gt;The props of this components enforce constraints&lt;/strong&gt; so that designers can be sure that nobody will break the design. As a plus, it would be great if the schema of components could &lt;strong&gt;self-document&lt;/strong&gt; itself.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#i-didnt-find-the-missing-link"&gt;
  &lt;/a&gt;
  I didn't find the missing link...
&lt;/h1&gt;

&lt;p&gt;... so I created it ;P&lt;br&gt;
Its name is &lt;strong&gt;&lt;a href="https://reactbricks.com"&gt;React Bricks&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#its-just-react"&gt;
  &lt;/a&gt;
  It’s just React
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Content blocks are React components&lt;/strong&gt;. No back and forth between the front-end and the headless CMS. Define the fields as props on your component, &lt;strong&gt;get visual editing for free&lt;/strong&gt; from React Bricks &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;RichText&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Image&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Repeater&amp;gt;&lt;/code&gt; components.&lt;br&gt;
Props like background or anything you need can be changed via &lt;strong&gt;sidebar controls&lt;/strong&gt; (you can choose a standard control like text, number, select, color, etc. or provide a custom component).&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Y0Odt3W6L48"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#great-editing-experience"&gt;
  &lt;/a&gt;
  Great editing experience
&lt;/h2&gt;

&lt;p&gt;The editing interface is very &lt;strong&gt;easy and familiar&lt;/strong&gt; with Visual editing and a Sidebar to change props, with &lt;strong&gt;no way to break the design&lt;/strong&gt;.&lt;br&gt;
In the Playground you get the &lt;strong&gt;documentation&lt;/strong&gt; for all of your content blocks for free.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/I8eL7HexnmQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-it-flexible-enough"&gt;
  &lt;/a&gt;
  Is it flexible enough?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;You can configure everything&lt;/strong&gt;: add custom fields on the page accessible via hooks, provide your own components for rich text rendering or for the sidebar controls, validate props, change ui like logo or responsive breakpoints, set user permissions...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-it-fast"&gt;
  &lt;/a&gt;
  Is it fast?
&lt;/h2&gt;

&lt;p&gt;You bet! The starter projects use the latest &lt;strong&gt;Next.js&lt;/strong&gt; versions with a &lt;strong&gt;blazing fast&lt;/strong&gt; statically generated website.&lt;br&gt;
&lt;strong&gt;Images are optimized&lt;/strong&gt; for responsive view and lazy load and served from a fast global &lt;strong&gt;CDN&lt;/strong&gt;.&lt;br&gt;
You can provide a &lt;strong&gt;build web hook&lt;/strong&gt; to let your editors trigger a rebuild on the server with the click of a button.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#developer-experience"&gt;
  &lt;/a&gt;
  Developer experience
&lt;/h2&gt;

&lt;p&gt;React Bricks is written in &lt;strong&gt;TypeScript&lt;/strong&gt; and fully typed.&lt;br&gt;
&lt;strong&gt;Scaffold a project in seconds using the CLI.&lt;/strong&gt;&lt;br&gt;
The &lt;a href="https://docs.reactbricks.com"&gt;Documentation&lt;/a&gt; is very complete.&lt;br&gt;
You may start from the &lt;a href="https://reactbricks.com/learn"&gt;Step-by-step Tutorial&lt;/a&gt; where you gain points... with a final surprise!&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#ok-but-you-are-biased"&gt;
  &lt;/a&gt;
  Ok, but you are biased!
&lt;/h1&gt;

&lt;p&gt;Of course I am, but I am sincere when I tell you that I love creating "bricks" of content in React and seeing our customers happy while creating content. &lt;br&gt;
But don't take my word for it. We have big startups like &lt;a href="https://capbase.com"&gt;CapBase&lt;/a&gt; and &lt;a href="https://casavo.com"&gt;Casavo&lt;/a&gt; powering their websites (and empowering their marketing) with React Bricks. And &lt;a href="https://twitter.com/Swizec"&gt;Swizec Teller&lt;/a&gt; wrote a &lt;a href="https://swizec.com/blog/react-bricks-visual-blocks-editor-for-nextjs-codewithswiz-22/"&gt;great post about React Bricks&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--SOcLbPY1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1201364751843905536/Q1XVVkab_normal.jpg" alt="Kyle Mathews profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Kyle Mathews
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/kylemathews"&gt;@kylemathews&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/matfrana"&gt;@matfrana&lt;/a&gt; &lt;a href="https://twitter.com/jaredpalmer"&gt;@jaredpalmer&lt;/a&gt; &lt;a href="https://twitter.com/ianstormtaylor"&gt;@ianstormtaylor&lt;/a&gt; &lt;a href="https://twitter.com/tannerlinsley"&gt;@tannerlinsley&lt;/a&gt; &lt;a href="https://twitter.com/rauchg"&gt;@rauchg&lt;/a&gt; &lt;a href="https://twitter.com/Gatsby"&gt;@Gatsby&lt;/a&gt; I think stuff like this is the future! Please DM me if you find ways that Gatsby can support you better.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:45 PM - 11 Mar 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1237872398889701378" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1237872398889701378" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1237872398889701378" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--JGJyj-jl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1364001393384718338/Vb4hjqrv_normal.jpg" alt="Laurie Voss profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Laurie Voss
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @seldo
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/matfrana"&gt;@matfrana&lt;/a&gt; &lt;a href="https://twitter.com/ReactBricks"&gt;@ReactBricks&lt;/a&gt; &lt;a href="https://twitter.com/wesbos"&gt;@wesbos&lt;/a&gt; &lt;a href="https://twitter.com/kentcdodds"&gt;@kentcdodds&lt;/a&gt; &lt;a href="https://twitter.com/mjackson"&gt;@mjackson&lt;/a&gt; &lt;a href="https://twitter.com/markdalgleish"&gt;@markdalgleish&lt;/a&gt; &lt;a href="https://twitter.com/JoshWComeau"&gt;@JoshWComeau&lt;/a&gt; &lt;a href="https://twitter.com/devdevcharlie"&gt;@devdevcharlie&lt;/a&gt; &lt;a href="https://twitter.com/swyx"&gt;@swyx&lt;/a&gt; &lt;a href="https://twitter.com/ken_wheeler"&gt;@ken_wheeler&lt;/a&gt; &lt;a href="https://twitter.com/jaredpalmer"&gt;@jaredpalmer&lt;/a&gt; &lt;a href="https://twitter.com/tlakomy"&gt;@tlakomy&lt;/a&gt; &lt;a href="https://twitter.com/tannerlinsley"&gt;@tannerlinsley&lt;/a&gt; &lt;a href="https://twitter.com/flybayer"&gt;@flybayer&lt;/a&gt; I've wanted to see something like this for a long time; will check it out.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:57 PM - 23 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1374480533955047424" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1374480533955047424" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1374480533955047424" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--sBRWI5_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1404087629314985985/_GBAJV-8_normal.jpg" alt="Ken Wheeler profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Ken Wheeler
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/ken_wheeler"&gt;@ken_wheeler&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/matfrana"&gt;@matfrana&lt;/a&gt; &lt;a href="https://twitter.com/ReactBricks"&gt;@ReactBricks&lt;/a&gt; &lt;a href="https://twitter.com/wesbos"&gt;@wesbos&lt;/a&gt; &lt;a href="https://twitter.com/kentcdodds"&gt;@kentcdodds&lt;/a&gt; &lt;a href="https://twitter.com/mjackson"&gt;@mjackson&lt;/a&gt; &lt;a href="https://twitter.com/markdalgleish"&gt;@markdalgleish&lt;/a&gt; &lt;a href="https://twitter.com/JoshWComeau"&gt;@JoshWComeau&lt;/a&gt; &lt;a href="https://twitter.com/devdevcharlie"&gt;@devdevcharlie&lt;/a&gt; &lt;a href="https://twitter.com/seldo"&gt;@seldo&lt;/a&gt; &lt;a href="https://twitter.com/swyx"&gt;@swyx&lt;/a&gt; &lt;a href="https://twitter.com/jaredpalmer"&gt;@jaredpalmer&lt;/a&gt; &lt;a href="https://twitter.com/tlakomy"&gt;@tlakomy&lt;/a&gt; &lt;a href="https://twitter.com/tannerlinsley"&gt;@tannerlinsley&lt;/a&gt; &lt;a href="https://twitter.com/flybayer"&gt;@flybayer&lt;/a&gt; Looks fuckin sweet
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:55 PM - 23 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1374479894692818950" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1374479894692818950" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1374479894692818950" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--lkey4fDv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/958030566963658752/aY-MDtd2_normal.jpg" alt="Swizec Teller published ServerlessHandbook.dev profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Swizec Teller published ServerlessHandbook.dev
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @swizec
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Okay &lt;a href="https://twitter.com/ReactBricks"&gt;@ReactBricks&lt;/a&gt; is the first visual website builder to make me reconsider markdown&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/RHx4LL7nvv"&gt;swizec.com/blog/react-bri…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:06 PM - 09 Feb 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1359186869402013699" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1359186869402013699" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1359186869402013699" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h1&gt;
  &lt;a href="#what-do-you-think-about-it"&gt;
  &lt;/a&gt;
  What do &lt;em&gt;you&lt;/em&gt; think about it?
&lt;/h1&gt;

&lt;p&gt;Please, let me know what do you think about &lt;a href="https://reactbricks.com"&gt;React Bricks&lt;/a&gt;.&lt;br&gt;
What do you like (or not) about it? What would you use it for? How may I help you start with a project?&lt;/p&gt;

</description>
      <category>react</category>
      <category>nextjs</category>
      <category>cms</category>
      <category>visualediting</category>
    </item>
    <item>
      <title>Elixir pattern matching in a nutshell</title>
      <author>Dung Nguyen</author>
      <pubDate>Tue, 29 Jun 2021 15:27:27 +0000</pubDate>
      <link>https://dev.to/bluzky/elixir-pattern-matching-in-a-nutshell-5fef</link>
      <guid>https://dev.to/bluzky/elixir-pattern-matching-in-a-nutshell-5fef</guid>
      <description>&lt;h1&gt;
  &lt;a href="#pattern-matching-in-a-nutshell"&gt;
  &lt;/a&gt;
  Pattern matching in a nutshell
&lt;/h1&gt;

&lt;p&gt;If you are new to Elixir, Pattern Matching may be something strange to you. When you get familiar with it, you will know how powerful it is. And I'm sure that you will definite love it.&lt;/p&gt;

&lt;p&gt;Pattern matching is used everywhere in your elixlir code . And I would bring it to other language that I use ( if I can :D)&lt;/p&gt;

&lt;p&gt;But it's not so hard. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-pattern-matching-do"&gt;
  &lt;/a&gt;
  What does Pattern Matching do?
&lt;/h2&gt;

&lt;p&gt;Give you a variable/value, you might want&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check if data type is match your expected data type&lt;/li&gt;
&lt;li&gt;Check if structure of data match your expected data structure&lt;/li&gt;
&lt;li&gt;Assign matching part of data to a variable&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And pattern matching do all these thing for you. Just look at some example. &lt;/p&gt;

&lt;p&gt;When you try these example, it will raise exception if data doesn't match against the pattern. In real Elixir app, you won't use it this way, check &lt;strong&gt;Where it is used&lt;/strong&gt; at the end of this article&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pattern-matching-with-mapstruct"&gt;
  &lt;/a&gt;
  Pattern matching with Map/Struct
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Check if this data is a map&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="p"&gt;%{}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Check if data is a map and has key &lt;code&gt;email&lt;/code&gt; and email value is &lt;code&gt;zoo@example.com&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="s2"&gt;"email"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"zoo@example.com"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Check if data is a map and has key &lt;code&gt;email&lt;/code&gt;, if matchs pattern, assign value of key &lt;code&gt;email&lt;/code&gt; to variable &lt;code&gt;my_email&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="s2"&gt;"email"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Check if data is a map and has key &lt;code&gt;email&lt;/code&gt;, I don't want to extract value&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;use &lt;code&gt;_&lt;/code&gt; to ignore value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="s2"&gt;"email"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Pattern matching nested map&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="s2"&gt;"address"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="s2"&gt;"city"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Check if data is type struct &lt;code&gt;User&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The rest is same with map. Struct is basically a map with atom key.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#pattern-matching-with-list"&gt;
  &lt;/a&gt;
  Pattern matching with List
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Check if data is empty lis&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Check if data is a list and not empty&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Check if data is exact list&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Check if data is list and extract first element and remaining&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;first_element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;remaining&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pattern-matching-with-tuple"&gt;
  &lt;/a&gt;
  Pattern matching with Tuple
&lt;/h2&gt;

&lt;p&gt;You don't have much pattern to match against tuple&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Check if data is tuple of 2 elements&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Check if data is tuple and has specific value&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;span class="c1"&gt;# you use this most of time&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#where-to-use-pattern-matching"&gt;
  &lt;/a&gt;
  Where to use pattern matching
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;case clause&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;is_active:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Log you in"&lt;/span&gt;
    &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;is_active:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Check your email"&lt;/span&gt;
    &lt;span class="n"&gt;_others&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Not a user"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;with clause&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# your code&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;function&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;is_admin&lt;/span&gt;&lt;span class="p"&gt;(%&lt;/span&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;role:&lt;/span&gt; &lt;span class="s2"&gt;"admin"&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;is_admin&lt;/span&gt;&lt;span class="p"&gt;(%&lt;/span&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;role:&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;is_admin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="s2"&gt;"Not a user"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>elixir</category>
    </item>
    <item>
      <title>My top 5 favourite React Hook libraries</title>
      <author>Xiaomin Zhu</author>
      <pubDate>Tue, 29 Jun 2021 15:24:11 +0000</pubDate>
      <link>https://dev.to/xiaominzhu88/my-top-5-favourite-react-hook-libraries-kaf</link>
      <guid>https://dev.to/xiaominzhu88/my-top-5-favourite-react-hook-libraries-kaf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#a-juniors-advice-give-it-a-try"&gt;
  &lt;/a&gt;
  A junior’s advice — give it a try.
&lt;/h2&gt;

&lt;p&gt;I have been in contact with &lt;strong&gt;React&lt;/strong&gt; for nearly 10 months and my opinion is that React hooks not only make code cleaner but also improves readability and reduces the amount of the code. For juniors like me who don’t have much experience, getting started is not difficult.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you haven’t used hooks yet, you should try and add them to your project, because it can really make your programming simple and interesting.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this blog, I would like to share 5 React hook libraries with you which I tried in some projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-usemedia"&gt;
  &lt;/a&gt;
  1. useMedia ✂️
&lt;/h3&gt;

&lt;p&gt;This hook provides a simple way to track CSS &lt;strong&gt;media queries&lt;/strong&gt; and it plays a vital role in responsive websites, it is helpful for rendering different components at different &lt;strong&gt;viewports&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For example, you might have a hamburger icon which you want to show with a dropdown list field only on smaller screens, but hide them on larger screens. &lt;strong&gt;useMedia&lt;/strong&gt; provides a quick solution to help solve this problem.&lt;br&gt;
Code example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MVVRVeXB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h53mxeiftxlu2ksiu61u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MVVRVeXB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h53mxeiftxlu2ksiu61u.png" alt="1_J5KzeEDpjJXi81CUXZbelQ"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Resize the screen and trigger different content.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-reacthookform"&gt;
  &lt;/a&gt;
  2. React-hook-form 📋
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://react-hook-form.com/"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No one likes to create and recreate complex forms with validation, including React developers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React-hook-form&lt;/strong&gt; is a hook about forms:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Performant, flexible and extensible forms with easy-to-use validation”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With its simpler syntax, speed, less re-rendering, and better maintainability, it started to reach the top in GitHub.&lt;/p&gt;

&lt;p&gt;To use react-hook-form, we only need to call the &lt;strong&gt;useForm&lt;/strong&gt; hook, when we do this, we will get an object from which we will deconstruct the &lt;strong&gt;register&lt;/strong&gt; property.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Register&lt;/strong&gt; is a function, it will accept the input value entered by the user and verify it, it will also pass each value to a function, which will be called when the form is submitted, so we need to connect it to each input as a &lt;strong&gt;ref&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In order for register to work properly, we need to provide an appropriate &lt;strong&gt;“name”&lt;/strong&gt; attribute for each input. For example, for user name input, its name is &lt;strong&gt;“username”&lt;/strong&gt;, the reason for this is that when we submit the form, we will get all the input values on a single object.&lt;br&gt;
Code Example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8DfV4UlP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxnhlm6p65nzw8bpnz5i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8DfV4UlP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxnhlm6p65nzw8bpnz5i.png" alt="1_Q74uRa7SgZtKxdhDU8EzeQ"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;The attributes of each object will be named according to the input name attribute we specified.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In order to handle submitting the form and receiving input data, we will add an &lt;strong&gt;onSubmit&lt;/strong&gt; to the form element and connect it to the local function of the same name.&lt;/p&gt;

&lt;p&gt;From &lt;strong&gt;useForm&lt;/strong&gt;, we will get a function named &lt;strong&gt;handleSubmit&lt;/strong&gt;, we wrap it around &lt;strong&gt;onSubmit&lt;/strong&gt; as a higher-order function, the &lt;strong&gt;handleSubmit&lt;/strong&gt; function will be responsible for collecting all the data entered into each input, and we will receive an object named data in &lt;strong&gt;onSubmit&lt;/strong&gt;.&lt;br&gt;
Code Example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ffxs883Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xy1jtphu9wywy9yksel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ffxs883Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xy1jtphu9wywy9yksel.png" alt="1_4_VkRTjN4ayM10RzBBr2FA"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;With console.log(data), we can see what we entered in each input of the same attribute.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To validating the form and adding constraints for each input value, we only need to pass the information to the &lt;strong&gt;register&lt;/strong&gt; function.&lt;/p&gt;

&lt;p&gt;The first attribute is &lt;strong&gt;required&lt;/strong&gt;. By default, it is set to &lt;strong&gt;false&lt;/strong&gt;, but we can set it &lt;strong&gt;true&lt;/strong&gt;to ensure that the form is not submitted when the form is not filled out.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RadL5tE7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmx21s6rlpn8p7p0y1ku.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RadL5tE7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmx21s6rlpn8p7p0y1ku.png" alt="1_u37hVAYVBtcHjmH90TF6UA"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;To apply this verification, username value is required, we can set the value length greater than 6 characters but less than 24 characters.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If we use number for this input (assuming this input is about the age of a person), we will use the attributes min and max instead of &lt;strong&gt;minLength&lt;/strong&gt; and &lt;strong&gt;maxLength&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-react-router"&gt;
  &lt;/a&gt;
  3. React router📍
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://reactrouter.com/web/guides/quick-start"&gt;Link&lt;/a&gt;&lt;br&gt;
React router is one of the most popular React libraries, it is used for routing and obtaining application URL history records.&lt;/p&gt;

&lt;p&gt;The most eye-catching hooks provided are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;useHistory&lt;/li&gt;
&lt;li&gt;useLocation&lt;/li&gt;
&lt;li&gt;useParams&lt;/li&gt;
&lt;li&gt;useRouteMatch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Its name speaks for itself:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;useHistory&lt;/strong&gt; will get the method of application history data.&lt;br&gt;
Code Example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vHnVRTc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uq4zy0qflqafemdcsb6b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vHnVRTc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uq4zy0qflqafemdcsb6b.png" alt="1_seOWADLhUU2F9YxSSStyAQ"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Click on the button, page will be navigated to “home” page.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;useLocation&lt;/strong&gt; will return an object representing the current URL.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TymZhdTk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vbg0vidzq5a6qw6qrunx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TymZhdTk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vbg0vidzq5a6qw6qrunx.png" alt="1_6Za82cZ4bNv2iWuC7DhskA"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Trigger a new “page view” event whenever a new page loads.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UseParams&lt;/strong&gt; will return the object of the key-value pairs of the URL parameters of the current route.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jrBWNxgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/de0crqil20ska4sbs38a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jrBWNxgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/de0crqil20ska4sbs38a.png" alt="1_m7KgVOQ9vkZwaXyoUfljOw"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;In this way, with “: id” you can access the parameters of the current route’s URL.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;useRouteMatch&lt;/strong&gt; will try to match the current URL with the given URL, which can be a string or an object with different options.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PSKvj67J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8f3lyjaqek3hoty5ip2p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PSKvj67J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8f3lyjaqek3hoty5ip2p.png" alt="1_IPwcmEVuB1B1t66eLELwsQ"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;“match” is an object which contains current path, url…&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-redux-hooks"&gt;
  &lt;/a&gt;
  4. Redux hooks 🛒
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://react-redux.js.org/api/hooks"&gt;Link&lt;/a&gt;&lt;br&gt;
Redux is used as a global state manager throughout the application. A few months after the Hook was released by the React community, Redux added Hook support. This Hook can be used to replace the previous high-level component method &lt;strong&gt;connect()&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The most eye-catching hooks provided are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;useSelector&lt;/li&gt;
&lt;li&gt;useDispatch&lt;/li&gt;
&lt;li&gt;useStore&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;useSelector&lt;/strong&gt; allows you to extract data from the Redux store state, using a selector function, may return any value as a result, not just an object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;useDispatch&lt;/strong&gt; returns a reference to the dispatch function from the Redux store. You may use it to dispatch actions as needed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;useStore&lt;/strong&gt; returns a reference to the same Redux store that was passed into the  component.&lt;/p&gt;

&lt;p&gt;My personal opinion is, the documentation is good but a bit complicated, to start using it, you still have to read the documentation, 🧩 until now I’m only in the elementary stage.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-useportal-%F0%9F%96%BC"&gt;
  &lt;/a&gt;
  5. usePortal 🖼
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/alex-cory/react-useportal"&gt;Link&lt;/a&gt;&lt;br&gt;
usePortal makes it easy to create drop-down menus, modal boxes, notification pop-up windows, bubble prompt boxes, etc…&lt;br&gt;
It provides a way to create elements outside the &lt;strong&gt;DOM&lt;/strong&gt; hierarchy of the application.&lt;br&gt;
Code Example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--baX-qsY0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txzir0xmszxu1lbo79rb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--baX-qsY0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txzir0xmszxu1lbo79rb.png" alt="1_imgcECn6skAkFaXdbgOCYQ"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;With “Open” button you can open Portal with a “Close Portal” button, hit ESC or click outside to close it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The examples above is just my personal suggestion. I have added a link below each hook title where you can directly refer to the original site, if you find anything that can be improved or corrected, please contact me.&lt;/p&gt;

&lt;p&gt;Thank you very much for reading! &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Do AWS Reserved Instances and Savings Plans really reduce costs?</title>
      <author>CAST AI</author>
      <pubDate>Tue, 29 Jun 2021 14:57:00 +0000</pubDate>
      <link>https://dev.to/castai/do-aws-reserved-instances-and-savings-plans-really-reduce-costs-1eph</link>
      <guid>https://dev.to/castai/do-aws-reserved-instances-and-savings-plans-really-reduce-costs-1eph</guid>
      <description>&lt;p&gt;Allocating cloud costs is hard, and forecasting them is even harder.&lt;/p&gt;

&lt;p&gt;Pinterest once committed to paying a smashing $170 million for AWS services in advance and was then forced to buy extra capacity at a much higher rate, &lt;strong&gt;spending some $20 million more than estimated&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How are you supposed to reserve capacity in advance when you have no idea how much of it your company is going to need one or three years from now?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is the core problem of products like AWS Reserved Instances and Savings Plans.&lt;/p&gt;

&lt;p&gt;Keep on reading to find out why they’re so risky and what you could be doing instead.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s a guide I prepared for you:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#awsreservedinstancesbasics"&gt;AWS Reserved Instances: the basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#howdoreservedinstanceswork"&gt;How do Reserved Instances work?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#howmuchcanyousavewithreservedinstances"&gt;How much can you save with Reserved Instances?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#risksofreservedinstances"&gt;Here’s what you risk with AWS Reserved Instances&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href="#paythepriceforchangingrequirements"&gt;You will pay a steep price for changing requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vendorlockin"&gt;You will get locked-in with AWS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#losingflexibility"&gt;You will lose all flexibility&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#reservedinstancessetupisdifficult"&gt;Also, setting up AWS Reserved Instances is super difficult&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#savingsplansarentasolution"&gt;And AWS Savings Plans aren’t going to save you&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#howtosolvethis"&gt;How to deal with that? Simple, avoid Reserved Instances and Savings Plans&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="awsreservedinstancesbasics"&gt;AWS Reserved Instances: the basics&lt;/h2&gt;

&lt;p&gt;Companies choose Reserved Instances because they come with substantial discounts compared to pay-as-you-go On-Demand pricing.&lt;/p&gt;

&lt;p&gt;All it takes is &lt;strong&gt;committing to a specified cloud capacity for a specified period of time&lt;/strong&gt;. In AWS, it’s one year or three years. In some cases, you also get a guarantee that certain resources will be available to you in a given hosting region. &lt;/p&gt;

&lt;h3 id="howdoreservedinstanceswork"&gt;How do Reserved Instances work? &lt;/h3&gt;

&lt;p&gt;It’s all just like regular instance purchases. Select an instance type, size, platform, and region - and you’re done! It’s like getting a voucher you can use to get a discount any time during your chosen reservation period, often sharing it among teams.&lt;/p&gt;

&lt;p&gt;And the larger your upfront payment, the larger the discount.&lt;/p&gt;

&lt;h2 id="howmuchcanyousavewithreservedinstances"&gt;How much can you save with Reserved Instances?&lt;/h2&gt;

&lt;p&gt;According to AWS, the EC2 Reserved Instances offer &lt;strong&gt;discounts of up to 75%&lt;/strong&gt; compared to On-Demand pricing. &lt;/p&gt;

&lt;p&gt;But there’s a catch. &lt;/p&gt;

&lt;p&gt;A Reserved Instance operates on a “use it or lose it” basis. Every hour that your instance goes unused is an hour lost (together with any financial benefits).&lt;/p&gt;

&lt;p&gt;To make the most of your Reserved Instance, you need to maximize your use of it. This means that you need to know exactly what your teams will need in advance. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Reserving capacity in advance to get the instances you use all the time at a discount seems like a smart move. After all, you’ll keep on using these cloud resources. But it comes at a price many teams aren’t aware of.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2 id="risksofreservedinstances"&gt;Here’s what you risk with AWS Reserved Instances&lt;/h2&gt;

&lt;h3 id="paythepriceforchangingrequirements"&gt;1. You will pay a steep price for changing requirements &lt;/h3&gt;

&lt;p&gt;When you commit to given resources or levels of usage, you’re basically assuming that your requirements aren’t going to change while the contract is running. &lt;/p&gt;

&lt;p&gt;But in the cloud world, a year of commitment is an eternity. &lt;/p&gt;

&lt;p&gt;Not even tech giants with entire departments dedicated to cost optimization are capable of making accurate forecasts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take Pinterest as an example. &lt;/strong&gt;During one holiday season, its users spent so much time on the platform that the company’s cloud bill &lt;a href="https://www.theinformation.com/articles/as-aws-use-soars-companies-surprised-by-cloud-bills"&gt;went flying over the initial estimates&lt;/a&gt;. At that point, Pinterest had already committed to paying $170 million to AWS. And then it had to get some extra capacity and ended up spending $20 million more than forecasted. &lt;/p&gt;

&lt;h3 id="vendorlockin"&gt;2. You will get locked-in with AWS&lt;/h3&gt;

&lt;p&gt;By entering into this type of contract with AWS, you’re running the risk of &lt;a href="https://cast.ai/blog/vendor-lock-in-and-how-to-break-free/"&gt;vendor lock-in&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This means that &lt;strong&gt;you'll become dependent on AWS&lt;/strong&gt; &lt;strong&gt;for one or three years&lt;/strong&gt;. Using the products and services of another provider won’t make any sense when you’ve already paid for services upfront. It would also generate substantial switching costs. &lt;/p&gt;

&lt;p&gt;But what if AWS doesn’t have a solution for a challenge your team is going to face in 10 months from the moment you sign the contract? &lt;/p&gt;

&lt;h3 id="losingflexibility"&gt;3. You will lose all flexibility&lt;/h3&gt;

&lt;p&gt;Your requirements might change in the future. When was the last time you had to deal with a requirement that stayed static for a year or two?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;When facing a new challenge, your team might have to commit to even more or get stuck with unused capacity that you’ve already paid for. Either way, you’re on the losing side.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You’ll have no flexibility of scaling or ability to configure multi-region/zone distribution easily.&lt;/p&gt;

&lt;h2 id="reservedinstancessetupisdifficult"&gt;Also, setting up AWS Reserved Instances is super difficult&lt;/h2&gt;

&lt;p&gt;Selecting the optimal Reserved Instance that will meet your application’s workload needs is very complicated, to say the least.&lt;/p&gt;

&lt;p&gt;Keeping pace with the latest AWS offerings and choosing from nearly &lt;a href="https://cast.ai/blog/400-ec2-instance-types-the-good-the-bad-and-the-ugly/"&gt;400 EC2 instance types&lt;/a&gt; is already a challenge. Add to it the need to analyze your application’s needs and workload patterns. &lt;/p&gt;

&lt;p&gt;Manual methods are time-consuming and imprecise, making the entire endeavor quite risky. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Using solutions for cloud bill analysis to determine your Reserved Instances or Savings Plans requirements is a bad idea. The insights they provide might lead you to reserving capacity based on the instance you’re using now, even if they’re the wrong type and size. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;When you reserve the wrong instances, you’ll end up overprovisioning your application and wasting a lot of money in the long run.&lt;/p&gt;

&lt;h2 id="savingsplansarentasolution"&gt;And AWS Savings Plans aren’t going to save you&lt;/h2&gt;

&lt;p&gt;A Savings Plan could be the answer to the lack of flexibility of Reserved Instances.&lt;/p&gt;

&lt;p&gt;When buying a Savings Plan, you’re committing to a specific amount of compute that your teams can use over 1 or 3 years. All the usage that's part of your commitment will be covered by your contract. Anything extra will incur additional payments at the On-Demand rate.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Sure, you’re not committing to specific instance types and configurations. But you’re still running the risk of locking yourself in with AWS. And you commit to paying for cloud resources that might make zero sense for your company in 1 or 3 years. &lt;/p&gt;&lt;/blockquote&gt;

&lt;h2 id="howtosolvethis"&gt;How to deal with that? Simple, avoid Reserved Instances and Savings Plans&lt;/h2&gt;

&lt;p&gt;Instead of falling into the trap of reserving capacity upfront for a discounted price, consider cloud cost optimization techniques such as rightsizing, autoscaling, and Spot Instances.&lt;/p&gt;

&lt;p&gt;They allow you to stay flexible and reduce your cloud bill by making sure that your teams provision just what they need. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try this free &lt;a href="https://cast.ai/eks-optimizer/"&gt;Savings Report&lt;/a&gt; before committing to a pricy Savings Plan to see how much you could potentially save while retaining the flexibility.&lt;/strong&gt;&lt;/p&gt;



</description>
      <category>aws</category>
      <category>devops</category>
      <category>kubernetes</category>
    </item>
    <item>
      <title>The Collab Lab TCL-23 Recap</title>
      <author>Yenly</author>
      <pubDate>Tue, 29 Jun 2021 14:56:32 +0000</pubDate>
      <link>https://dev.to/the-collab-lab/the-collab-lab-tcl-23-recap-1cde</link>
      <guid>https://dev.to/the-collab-lab/the-collab-lab-tcl-23-recap-1cde</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mtdqk0eg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tga0uwdo253n0hroo27v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mtdqk0eg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tga0uwdo253n0hroo27v.jpg" alt="TCL 23 Hamming it up!"&gt;&lt;/a&gt;&lt;br&gt;
Wow, what a way to kick off my first time mentoring a cohort with &lt;a href="https://the-collab-lab.codes/"&gt;The Collab Lab&lt;/a&gt;, founded by &lt;a href="https://twitter.com/segdeha"&gt;Andrew Hedges&lt;/a&gt; and &lt;a href="https://twitter.com/the_real_stacie"&gt;Stacie Taylor&lt;/a&gt;. This volunteer-driven non-profit connects early-career developers with mentors currently working in the field. For eight weeks, our developers completed a set of thirteen predefined user stories to make a smart shopping list application utilizing React and Firebase. Our mission is to provide a safe space for our developers to learn how to collaborate effectively on a software team in a remote environment. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The TCL-23 participants included:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.linkedin.com/in/apdsrocha"&gt;Ana Rocha&lt;/a&gt; has a keen understanding of user experience and brought her design expertise to the team. She inspired the team on the why and how to use Figma during their design process collaboration. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/MemRook"&gt;James Cox&lt;/a&gt; loves codes and brought a lot of energy to the team. He took many initiatives and pushed everyone to try new things. He has the self-awareness to pull back and help others level up.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.linkedin.com/in/jessicawoudsma"&gt;Jessica Woodsman&lt;/a&gt; led the charge with accessibility and was thorough in testing. She is excellent at self-reflection, and her focus on team communication and collaboration is on point.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.linkedin.com/in/zenziali"&gt;Zenzi Ali&lt;/a&gt; took on the thankless but super helpful job of story writing during the design sprint, which helped the team aligned on the goal. She wrote thorough PRs and was great at identifying potential bugs and accessibility improvements.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Mentors:&lt;/strong&gt; &lt;a href="https://www.linkedin.com/in/laurenkyu"&gt;Lauren Yu&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/skylershaw"&gt;Skyler Shaw&lt;/a&gt;, &amp;amp; &lt;a href="https://www.linkedin.com/in/yenlyma"&gt;Yenly Ma&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While each cohort shares guiding user stories of the TCL project, each team brings their perspectives, design choices, and skills to yield unique results. The TCL-23 crew excelled in accessibility (a11y),  design, peer support, and perseverance.&lt;/p&gt;

&lt;p&gt;On accessibility, the team reached well beyond what they learned in our a11y Learning Module session. In particular, Jessica employed various techniques and tools, including screen readers, to ensure that the project code, dependencies, and overall integration of the application covered as many tenets of accessibility as possible.&lt;/p&gt;

&lt;p&gt;Regarding design, the team burst into a flurry of collaborative design work in the final two weeks of the project. They struck an ideal balance between aesthetics and user experience. They iterated on a variety of image assets, color and font choices, responsive layouts, as well as user flows that aim to be both intuitive and delightful. They produced a charming and polished app. The polish of the UI, consideration for various device sizes, and the UX intention show care and consideration that is impressive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--25OwYFZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rwg7dleizsltubl58pio.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--25OwYFZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rwg7dleizsltubl58pio.jpg" alt="Honey Do Smart Shopping List App - Welcome page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Y7DjHc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkywaell03t02bjuq50b.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Y7DjHc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkywaell03t02bjuq50b.jpg" alt="Honey Do Smart Shopping List App Screen Capture - Empty List View"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--79PF9zJR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vhnjpxs0qr9lxdouvwbm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--79PF9zJR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vhnjpxs0qr9lxdouvwbm.jpg" alt="Honey Do Smart Shopping List App Screen Capture - Full List View"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, the TCL project is highly focused on the sustainable growth of its participants, even more so than the completion of the project itself. Ana, James, Jessica, and Zenzi committed to the team and each other. Life happens. Through family and personal needs, job interview demands, and other life events, they supported each other, picked up the slack where needed, and rallied together. Their cohesion as a team was admirable; you would be surprised that they were randomly put together just weeks prior!&lt;/p&gt;

&lt;p&gt;It has been a rewarding experience learning together with this team. We, mentors (Lauren,  Skyler, and I), are excited to see what you will do next!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4u7h3FqduAI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codequality</category>
      <category>collablab</category>
      <category>earlycareerdevelopers</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Essential AWS Landing Zone and Control Tower Resources</title>
      <author>Lee Wynne</author>
      <pubDate>Tue, 29 Jun 2021 14:37:21 +0000</pubDate>
      <link>https://dev.to/leewynne/essential-aws-landing-zone-and-control-tower-resources-2ifj</link>
      <guid>https://dev.to/leewynne/essential-aws-landing-zone-and-control-tower-resources-2ifj</guid>
      <description>&lt;p&gt;You are looking to get into AWS for the first time, you may know a bit about platform architecture such as Regions, Availability Zones, EC2, S3, VPN's etc but you may not know that there is a whole other space around procurement, billing, and AWS account, organization and OU structure that needs to be considered as part of any enterprise-grade service, especially at scale.&lt;/p&gt;

&lt;p&gt;Here are some useful resources to get you started down that path.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#useful-youtube-videos"&gt;
  &lt;/a&gt;
  Useful YouTube Videos
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#what-is-aws-control-tower"&gt;
  &lt;/a&gt;
  What is AWS Control Tower
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/daLvEb44d5Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-aws-control-tower-to-govern-multiaccount-aws-environments-grc313r"&gt;
  &lt;/a&gt;
  Using AWS Control Tower to Govern Multi-Account AWS Environments (GRC313-R)
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2t-VkWt0rKk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-aws-control-tower-to-govern-multiaccount-aws-environments-grc313r"&gt;
  &lt;/a&gt;
  Using AWS Control Tower to Govern Multi-Account AWS Environments (GRC313-R)
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1124VPrQiWo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-governance-at-scale-with-aws-control-tower"&gt;
  &lt;/a&gt;
  Build governance at scale with AWS Control Tower
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Zxrs6YXMidk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0aws-control-tower-tutorial-deep-dive-demo-implement-aws-landing-zone-using-aws-control-tower"&gt;
  &lt;/a&gt;
   AWS Control Tower Tutorial / Deep Dive / Demo - Implement AWS Landing zone using AWS Control Tower
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ih4_llUIED4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0provisioning-users-in-aws-control-tower-using-aws-sso"&gt;
  &lt;/a&gt;
   Provisioning Users in AWS Control Tower Using AWS SSO
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/y_n9xN5mg1g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-onboard-existing-aws-accounts-onto-aws-control-tower"&gt;
  &lt;/a&gt;
  How to onboard existing AWS accounts onto AWS Control Tower
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/43RBVFac7LU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-control-tower-well-architected-deployment"&gt;
  &lt;/a&gt;
  AWS Control Tower Well Architected Deployment
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_56QP_PK7iA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-control-tower-easiest-way-to-set-up-and-govern-aws-at-scale"&gt;
  &lt;/a&gt;
  AWS Control Tower: Easiest way to set up and govern AWS at scale
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/l2M4A_shquU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#programmatically-create-an-aws-account-with-aws-control-tower"&gt;
  &lt;/a&gt;
  Programmatically Create an AWS Account with AWS Control Tower
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/t0gxOsByOlA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#useful-articles-from-around-the-wen"&gt;
  &lt;/a&gt;
  Useful Articles from around the Wen
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#my-architecture-aws-control-tower-vs-aws-landing-zone"&gt;
  &lt;/a&gt;
  My Architecture: AWS Control Tower vs AWS Landing Zone
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Both Control Tower and Landing Zone help set up and manage secure multi-account AWS environments. Which one should customers use? Let's take a closer look and figure out together.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;[Read more]&lt;a href="https://www.mitocgroup.com/blog/my-architecture-aws-control-tower-vs-aws-landing-zone/"&gt;https://www.mitocgroup.com/blog/my-architecture-aws-control-tower-vs-aws-landing-zone/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-landing-zone-versus-aws-control-tower"&gt;
  &lt;/a&gt;
  AWS Landing Zone versus AWS Control Tower
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;AWS Landing Zone and AWS Control Tower help set up and govern a new, secure, multi-account AWS environment based on AWS best practices. Both consist of core accounts and resources which will implement an initial security baseline. The following table compares the managed service (AWS Control Tower) with the solution (AWS Landing Zone).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article also includes some great references&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://globaldatanet.com/blog/aws-landing-zone-versus-aws-control-tower"&gt;Read more&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-migrate-from-aws-landing-zone-to-aws-control-tower"&gt;
  &lt;/a&gt;
  When to Migrate from AWS Landing Zone to AWS Control Tower
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Landing zones have traditionally been how enterprises would address this concern, as they use a best practice security approach to help ensure the safe setup of AWS accounts. Yet, with the introduction of AWS Control Tower, enterprises may consider migrating from AWS Landing Zone to AWS Control Tower. Today we’ll walk you through why you might want to migrate, but first, we’ll start with a little background.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Amazon knows that when you have multiple AWS accounts, it can be hard to manage, control and secure all of them in one go. Enter AWS Control Tower. It combines power and simplicity, making it easy to set up, govern and secure your multiple accounts using built-in services from AWS like AWS Organizations, AWS Service Catalog, AWS Single Sign-on, AWS IAM, AWS Config, AWS Cloudtrail, and more. This combination of services makes life easy and secure for your AWS accounts. You can also provision new accounts very quickly using the Control Tower dashboard with limited steps. Last, it also provides built-in guardrails to protect your accounts.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uk.nttdataservices.com/en/blog/tech-blog/when-to-migrate-from-aws-landing-zone-to-aws-control-tower"&gt;Read more&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reddit-landing-zone-vs-control-tower"&gt;
  &lt;/a&gt;
  Reddit : Landing Zone vs. Control Tower?
&lt;/h2&gt;


&lt;div class="ltag__reddit--container"&gt;
  &lt;div class="ltag__reddit--title-container"&gt;
    
      &lt;div class="ltag__reddit--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCqI7Yj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/reddit-icon-c6851eed10026b5707e2e8c814b5bbcbb4823de68d5b611a6f4b99c8beed6f05.svg" alt="Reddit Logo"&gt;
          &lt;a href="https://www.reddit.com/r/aws/comments/bv86j6/landing_zone_vs_control_tower/" rel="noopener noreferrer"&gt;
            Landing Zone vs. Control Tower?
          &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__reddit--post-metadata"&gt;
          &lt;span&gt;May 31 '19&lt;/span&gt;
          &lt;span&gt;Author: Jjmc7&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--body"&gt;
    
&lt;p&gt;We are currently rolling out AWS Landing Zone but i have been seeing that Control Tower is essentially a service offering for Landing Zone and should be out soon. I was just wondering if anyone is testing one or the other and has any input. We are definitely going to use one or the other to execute our multi account…&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--btn--container"&gt;
    
      &lt;a href="https://www.reddit.com/r/aws/comments/bv86j6/landing_zone_vs_control_tower/" rel="noopener noreferrer"&gt;See Full Post&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#aws-control-tower-everything-you-need-to-know"&gt;
  &lt;/a&gt;
  AWS Control Tower: Everything You Need To Know
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You may have heard of AWS Control Tower, AWS Organizations and AWS Service Catalog – but what are these services and how do they integrate with one another?  What are the benefits of leveraging Control Tower and the underlying services?  If you’re interested to learn more, please read on and we’ll answer these questions and more below.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What Is AWS Control Tower?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AWS Control Tower automates the ‘ at scale’ build out of a multi account structure on AWS.  For large companies migrating to AWS, it makes sense to have a multi account architecture, as different business functions will have different access requirements, compliance requirements and so on – these functions can be segregated easily between accounts.  With AWS Control Tower, administrators can set up a new multi-account environment with a single click in the AWS Management Console.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AWS Control Tower creates an orchestration layer for other AWS services including AWS Organizations, AWS Service Catalog and AWS Single Sign-on – this Orchestration layer makes it easier for administrators who are managing more than a handful of AWS accounts.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.logicata.com/blog/aws-control-tower/"&gt;Read more&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-aws-landing-zone-with-aws-control-tower"&gt;
  &lt;/a&gt;
  Setting Up AWS Landing Zone with AWS Control Tower
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Many years ago, I was working in a company where everything had to be created from scratch. Defining the requirements, designing the Rack, configuring the firewall, routers, and storage to be able to save data, defining user management, how to create all the infrastructure, and the list went on and on. This was a definitive infrastructure that hosted all customers and then managed them. Today, the way of thinking and drawing the entire infrastructure has changed. It has become much simpler thanks to flexibility and automation tools, but many of the requirements are the same.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;When we start thinking about AWS and what customers want to do on AWS, we need to first think about requirements to better understand what the customers need. For example, which is the right service to use? What about security, governance, and baseline? How many accounts should I create for my customer based on own use cases? How many users, groups, and what permissions should they have?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let me introduce you to the concept of a Landing Zone and Control Tower, and why they work well together.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.mobiquity.com/insights/setting-up-aws-landing-zone-with-aws-control-tower"&gt;Read more&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-reddit-aws-control-tower-landing-zone-questions"&gt;
  &lt;/a&gt;
  More Reddit: AWS Control Tower Landing Zone questions
&lt;/h2&gt;


&lt;div class="ltag__reddit--container"&gt;
  &lt;div class="ltag__reddit--title-container"&gt;
    
      &lt;div class="ltag__reddit--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCqI7Yj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/reddit-icon-c6851eed10026b5707e2e8c814b5bbcbb4823de68d5b611a6f4b99c8beed6f05.svg" alt="Reddit Logo"&gt;
          &lt;a href="https://www.reddit.com/r/aws/comments/gmu14w/aws_control_tower_landing_zone_question/" rel="noopener noreferrer"&gt;
            AWS Control Tower Landing Zone question
          &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__reddit--post-metadata"&gt;
          &lt;span&gt;May 19 '20&lt;/span&gt;
          &lt;span&gt;Author: ixion&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--body"&gt;
    
&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;After looking at alternatives, I'm very heavily leaning toward AWS Control Tower Landing Zone, but I had some burning questions. I can't seem to find too much relevant or recent documentation on this. The landing zone pattern vs AWS Landing Zone vs AWS Control Tower Landing Zone definitely contributes to the confusion! I've read, for example, that you shouldn't…&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--btn--container"&gt;
    
      &lt;a href="https://www.reddit.com/r/aws/comments/gmu14w/aws_control_tower_landing_zone_question/" rel="noopener noreferrer"&gt;See Full Post&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag__reddit--container"&gt;
  &lt;div class="ltag__reddit--title-container"&gt;
    
      &lt;div class="ltag__reddit--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCqI7Yj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/reddit-icon-c6851eed10026b5707e2e8c814b5bbcbb4823de68d5b611a6f4b99c8beed6f05.svg" alt="Reddit Logo"&gt;
          &lt;a href="https://www.reddit.com/r/aws/comments/hwwy1u/managing_aws_accounts_for_an_organization_aws/" rel="noopener noreferrer"&gt;
            Managing AWS accounts for an organization: AWS Control Tower v.s. Landing Zone v.s. Terraform?
          &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__reddit--post-metadata"&gt;
          &lt;span&gt;Jul 24 '20&lt;/span&gt;
          &lt;span&gt;Author: thorn42&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--body"&gt;
    
&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;I'm looking into the best way to manage a relatively small number (&amp;lt;50) of AWS accounts in an organization. AWS is trying to push for Control Tower or Landing Zone, but I'm not sure of the added-value compared to Terraform.&lt;/p&gt;

&lt;p&gt;More precisely, I've PoC'ed managing the following with Terraform:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Master account: Organization, children accounts, OUs, service control policies, tagging…&lt;/li&gt;
&lt;/ul&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--btn--container"&gt;
    
      &lt;a href="https://www.reddit.com/r/aws/comments/hwwy1u/managing_aws_accounts_for_an_organization_aws/" rel="noopener noreferrer"&gt;See Full Post&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag__reddit--container"&gt;
  &lt;div class="ltag__reddit--title-container"&gt;
    
      &lt;div class="ltag__reddit--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCqI7Yj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/reddit-icon-c6851eed10026b5707e2e8c814b5bbcbb4823de68d5b611a6f4b99c8beed6f05.svg" alt="Reddit Logo"&gt;
          &lt;a href="https://www.reddit.com/r/aws/comments/cqa2jc/experience_with_control_tower_vs_managing/" rel="noopener noreferrer"&gt;
            Experience with Control Tower vs managing Organizations and access directly?
          &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__reddit--post-metadata"&gt;
          &lt;span&gt;Aug 14 '19&lt;/span&gt;
          &lt;span&gt;Author: CanyonSlim&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--body"&gt;
    
&lt;p&gt;I've started working with an organization that's only just getting their feet wet with AWS. A couple weeks before I came on board they started using Control Tower to manage multiple accounts and provision access to them. They're happy with it, and it seems relatively user friendly, but I have concerns about potential issues that could pop up long term…&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--btn--container"&gt;
    
      &lt;a href="https://www.reddit.com/r/aws/comments/cqa2jc/experience_with_control_tower_vs_managing/" rel="noopener noreferrer"&gt;See Full Post&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag__reddit--container"&gt;
  &lt;div class="ltag__reddit--title-container"&gt;
    
      &lt;div class="ltag__reddit--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCqI7Yj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/reddit-icon-c6851eed10026b5707e2e8c814b5bbcbb4823de68d5b611a6f4b99c8beed6f05.svg" alt="Reddit Logo"&gt;
          &lt;a href="https://www.reddit.com/r/aws/comments/capjnh/when_to_use_aws_control_tower/" rel="noopener noreferrer"&gt;
            When to use AWS Control Tower
          &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__reddit--post-metadata"&gt;
          &lt;span&gt;Jul  8 '19&lt;/span&gt;
          &lt;span&gt;Author: Flipphones&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--body"&gt;
    
&lt;p&gt;Hey all,&lt;/p&gt;

&lt;p&gt;&amp;amp;#x200B;&lt;/p&gt;

&lt;p&gt;I've been looking at using AWS Control Tower for the past few days. From what I'm reading with their documentation, you need a new AWS account to then launch service. &lt;/p&gt;

&lt;p&gt;I already have an existing multi-account infrastructure so would I be able to add these accounts to the new org?&lt;/p&gt;

    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--btn--container"&gt;
    
      &lt;a href="https://www.reddit.com/r/aws/comments/capjnh/when_to_use_aws_control_tower/" rel="noopener noreferrer"&gt;See Full Post&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag__reddit--container"&gt;
  &lt;div class="ltag__reddit--title-container"&gt;
    
      &lt;div class="ltag__reddit--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCqI7Yj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/reddit-icon-c6851eed10026b5707e2e8c814b5bbcbb4823de68d5b611a6f4b99c8beed6f05.svg" alt="Reddit Logo"&gt;
          &lt;a href="https://www.reddit.com/r/aws/comments/a1bm4u/aws_control_tower_govern_a_secure_compliant/" rel="noopener noreferrer"&gt;
            AWS Control Tower - govern a secure, compliant, multi-account environment
          &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__reddit--post-metadata"&gt;
          &lt;span&gt;Nov 28 '18&lt;/span&gt;
          &lt;span&gt;Author: ryankearney&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--body"&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__reddit--btn--container"&gt;
    
      &lt;a href="https://www.reddit.com/r/aws/comments/a1bm4u/aws_control_tower_govern_a_secure_compliant/" rel="noopener noreferrer"&gt;See Full Post&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#slide-shows"&gt;
  &lt;/a&gt;
  Slide shows
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#implementing-your-landing-zone"&gt;
  &lt;/a&gt;
  Implementing your landing zone
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/1bam8QhXycDHFY" alt="1bam8QhXycDHFY on slideshare.net" width="100%" height="450"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-landing-zone-step-by-step"&gt;
  &lt;/a&gt;
  AWS Landing Zone step by step
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/1F7KJqf6BG9Z8V" alt="1F7KJqf6BG9Z8V on slideshare.net" width="100%" height="450"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#architecting-security-amp-governance-across-your-aws-landing-zone"&gt;
  &lt;/a&gt;
  Architecting Security &amp;amp; Governance Across Your AWS Landing Zone
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/DpbH3Zch428ac0" alt="DpbH3Zch428ac0 on slideshare.net" width="100%" height="450"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-aws-control-tower-to-govern-multiaccount-aws-environments-at-scale"&gt;
  &lt;/a&gt;
  Using AWS Control Tower to govern multi-account AWS environments at scale
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/9gJsXTXNOi73D" alt="9gJsXTXNOi73D on slideshare.net" width="100%" height="450"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>aws</category>
    </item>
    <item>
      <title>How to build a Ruby on Rails app on AWS for beginners - Part 2.</title>
      <author>Lee Wynne</author>
      <pubDate>Tue, 29 Jun 2021 14:34:31 +0000</pubDate>
      <link>https://dev.to/leewynne/how-to-build-a-ruby-on-rails-app-on-aws-for-beginners-part-2-21al</link>
      <guid>https://dev.to/leewynne/how-to-build-a-ruby-on-rails-app-on-aws-for-beginners-part-2-21al</guid>
      <description>&lt;p&gt;Now it is time to provision our database. We are going to go with Postgres. &lt;/p&gt;

&lt;p&gt;There are 2 ways to do this on AWS, we can either install Postgres into our ec2 Linux host, or we can provision the database separately in AWS LightSail as a PaaS RDS database.&lt;/p&gt;

&lt;p&gt;In this example we are just going to install Postgres locally on our LightSail ec2 instance.&lt;/p&gt;

&lt;p&gt;This is a fairly simple process, first of lets install a recent version of Postgres.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install postgresql-11 libpq-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up we we are going to setup our DB user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo -u postgres createuser lee -s

# If you would like to set a password for the user, you can do the following

sudo -u postgres psql 
postgres=# \password lee
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it for installing and setting up PostGres within an EC2 instances.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-give-this-a-whirl-by-creating-your-first-rails-app"&gt;
  &lt;/a&gt;
  Let's give this a whirl by creating your first Rails App.
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails new mynewrailsapp -d postgresql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd mynewrailsapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails db:create
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Visit &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; to view your new rails app &lt;/p&gt;

&lt;p&gt;That should be it, you can then go ahead and create some of your models and migrations and start building your dreams.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>rails</category>
    </item>
    <item>
      <title>How to build a Ruby on Rails app on AWS for beginners - Part 1.</title>
      <author>Lee Wynne</author>
      <pubDate>Tue, 29 Jun 2021 14:28:28 +0000</pubDate>
      <link>https://dev.to/leewynne/how-to-build-a-ruby-on-rails-app-on-aws-for-beginners-part-1-p5n</link>
      <guid>https://dev.to/leewynne/how-to-build-a-ruby-on-rails-app-on-aws-for-beginners-part-1-p5n</guid>
      <description>&lt;p&gt;This is part one of a series of posts, this post covers the initial provisioning of a Ruby on Rails app on AWS using LightSail which is the simplest way of getting started with compute and databases on AWS. &lt;/p&gt;

&lt;p&gt;Let's get started by creating an AWS account and building a Linux host to run our Ruby on Rails app with AWS LightSail. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#provisioning-a-linux-instance-to-run-a-ruby-on-rails-app-on-aws-lightsail"&gt;
  &lt;/a&gt;
  Provisioning a Linux instance to run a Ruby on Rails app on AWS LightSail.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.theelastic.guru/lee/the-easiest-way-to-get-started-with-aws-regardless-of-your-background-1hhf"&gt;This post&lt;/a&gt; will guide you through getting started with your first AWS LightSail compute instance. &lt;strong&gt;Before&lt;/strong&gt; you follow the article though, you need to remember to choose Ubuntu as the OS as per below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mQ6KPCSN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/brtuup7673r0ztjr2r9r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mQ6KPCSN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/brtuup7673r0ztjr2r9r.png" alt="aws Ruby on Rails host"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then select your plan (I chose the $10 for now)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8AYpgllT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/7v88tobibx6vyfaj2z1h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8AYpgllT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/7v88tobibx6vyfaj2z1h.png" alt="aws Ruby on Rails host ec2 or lightsail"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, once that's done, click on the little command line icon next to you instance and you should get a new console tab, all logged in and ready to go.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--67RsrVx0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/xtm9tdrkcnxp1tq1mrxp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--67RsrVx0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/xtm9tdrkcnxp1tq1mrxp.png" alt="Screenshot 2021-02-17 at 12.33.07"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-node-and-yarn-to-support-webpacker-in-ruby-on-rails"&gt;
  &lt;/a&gt;
  Installing Node and Yarn to support Webpacker in Ruby on Rails.
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install curl
curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install git-core zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev software-properties-common libffi-dev nodejs yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#installing-rbenv-and-then-ruby"&gt;
  &lt;/a&gt;
  Installing rbenv and then Ruby
&lt;/h2&gt;

&lt;p&gt;Great, let's install a Ruby. We are going to install it using rbenv which allows you to run multiple versions of Ruby side by side if needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd
git clone https://github.com/rbenv/rbenv.git ~/.rbenv
echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &amp;gt;&amp;gt; ~/.bashrc
echo 'eval "$(rbenv init -)"' &amp;gt;&amp;gt; ~/.bashrc
exec $SHELL

git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' &amp;gt;&amp;gt; ~/.bashrc
exec $SHELL

rbenv install 3.0.0
rbenv global 3.0.0
ruby -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now all we need to do is install bundler&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gem install bundler

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up, installing Rails&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gem install rails -v 6.1.3.2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make the Rails executable available:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rbenv rehash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check you have everything installed (this should return the installed version):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Job done next up this series is installing PostgreSQL for the DB.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>rails</category>
    </item>
    <item>
      <title>Fast Fulltext Search With Postgres Gin Index </title>
      <author>Marcell Cruz</author>
      <pubDate>Tue, 29 Jun 2021 14:11:42 +0000</pubDate>
      <link>https://dev.to/____marcell/fast-fulltext-search-with-postgres-gin-index-22n5</link>
      <guid>https://dev.to/____marcell/fast-fulltext-search-with-postgres-gin-index-22n5</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;a href="#fake-data"&gt;Creating Fake Realistic Data&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#list-of-english-words"&gt;List Of English Words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#postgres-data-directory"&gt;Postgres Data Directory&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#generating-the-data"&gt;Generating The Data&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing-before-the-index"&gt;Testing Before The Index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-index"&gt;Creating The Index And Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#expression-indexes"&gt;Expression Indexes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first thing we need to do is to create a lot of fake data so we can test our indexex, it's also important to use real words dependending on the index that you're trying &lt;br&gt;
to use, there's a clever way of doing this on linux, if you're not on linux you can download &lt;br&gt;
a list of words &lt;a href="https://github.com/dwyl/english-words"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-fake-realistic-data"&gt;
  &lt;/a&gt;
  Creating Fake Realistic Data
&lt;/h2&gt;

&lt;p&gt;The first thing and maybe the most important part when dealing with indexes or any code for that matter is being able to test it, you need to play around with it to figure out what is the best index for &lt;em&gt;your&lt;/em&gt; specific query, to test indexes we need a lot of data otherwise the query planner &lt;br&gt;
won't use our index, if you wanna to know more about indexes you can read &lt;a href="https://dev.to/____marcell/postgres-indexes-4603"&gt;this&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#list-of-words"&gt;
  &lt;/a&gt;
  List Of Words
&lt;/h3&gt;

&lt;p&gt;In order to create realistic data we need a list of words, on Linux you can grab the word list generated by the spell checker utility on &lt;em&gt;/usr/share/dict/&lt;/em&gt;, the name of the file varies depending on the distribution, if you're not on linux you can grab your list of words &lt;a href="https://github.com/dwyl/english-words"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#postgres-data-directory"&gt;
  &lt;/a&gt;
  Postgres Data Directory
&lt;/h3&gt;

&lt;p&gt;Now that we have a list of words we need a way of reading this list into postgres so we can generate our data. the function &lt;em&gt;pg_read_file&lt;/em&gt; can read anything inside the data directory, you can find out where your data directory is running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="n"&gt;data_directory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result will probably be something like &lt;strong&gt;/var/lib/postgres/&lt;/strong&gt;, this also dependends on your OS,&lt;br&gt;
after getting the path you just need to copy your list of words to this directory so we can use &lt;em&gt;pg_read_file&lt;/em&gt;&lt;br&gt;
to read this list of words and generate our data.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#generating-the-data"&gt;
  &lt;/a&gt;
  Generating The Data
&lt;/h3&gt;

&lt;p&gt;Let's create a table called notes with two fields, title and description&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;serial&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can then create a function that will feed us the words&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="k"&gt;REPLACE&lt;/span&gt; &lt;span class="k"&gt;FUNCTION&lt;/span&gt; &lt;span class="n"&gt;getNArrayS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;RETURNS&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="err"&gt;$$&lt;/span&gt;
  &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;string_agg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array_length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;generate_series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="k"&gt;VOLATILE&lt;/span&gt;
&lt;span class="k"&gt;LANGUAGE&lt;/span&gt; &lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just copy and paste, press enter and things will work, I promise :P&lt;/p&gt;

&lt;p&gt;Now we can create the data, it will take some time so go grab some tea meanwhile.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_to_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pg_read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'words.list'&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;getNArrayS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ray&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;getNArrayS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ray&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;generate_series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're creating one million records [insert dr evil meme here] with real words in two fields, not bad, &lt;br&gt;
we can increase the amount of words in each field if you want you just need to change '3' in getNArrayS, 3 in this case is the number of words in each field, now we can test our indexes variations and easily change it depending on what query and index we want to test.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#testing-before-the-index"&gt;
  &lt;/a&gt;
  Testing Before The Index
&lt;/h2&gt;

&lt;p&gt;We need to test our query now and see how fast it's, so we can take note and compare later on after we create our index, unfortunatly as far as I know postgres don't have a way of forcing the query planner to use a specific index or not, so we need to test first then compare the times later.&lt;br&gt;
run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;timing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now every query will show the time it took to run.&lt;br&gt;
First let's test a simple like, we also need to choose one word from our word list ofc, I chose &lt;br&gt;
asimov.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Time: 615.921 ms&lt;/em&gt;&lt;br&gt;
with an &lt;em&gt;AND&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%gar%'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Time: 561.811 ms&lt;/em&gt;&lt;br&gt;
with a &lt;em&gt;OR&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%gar%'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Time: 1027.195 ms (00:01.027)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;concating the two fields&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;coalesce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;coalesce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%gar%'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Time: 810.602 ms&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ok, now let's create the index and compare the time afterwards for each query.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#create-index"&gt;Creating The Index And Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's first create the trigrams extensions, more about this later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;EXTENSION&lt;/span&gt; &lt;span class="n"&gt;IF&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="n"&gt;pg_trgm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's create an index just on the title field using the trigrams extension&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;notes_title_idx&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="n"&gt;gin_trgm_ops&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since it's very common to search for the first three letters of a word postgres has a trigrams(3 letters) that speed up just that, it creates a index with the first 3&lt;br&gt;
letters of the words in the field so our queries run even faster, now let's test our index with the same query that we used before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Time: 211.155 ms&lt;/em&gt;&lt;br&gt;
Almost three times faster, not bad, we can use EXPLAIN to see how the query planner is using our index&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;EXPLAIN&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;                                     &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;
&lt;span class="c1"&gt;-----------------------------------------------------------------------------------------&lt;/span&gt;
 &lt;span class="n"&gt;Bitmap&lt;/span&gt; &lt;span class="n"&gt;Heap&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;11682&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;82&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20204&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;Recheck&lt;/span&gt; &lt;span class="n"&gt;Cond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;~~*&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Bitmap&lt;/span&gt; &lt;span class="k"&gt;Index&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;notes_title_idx&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;195&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20204&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="k"&gt;Index&lt;/span&gt; &lt;span class="n"&gt;Cond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;~~*&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see that the query is using our index &lt;em&gt;notes_title_idx&lt;/em&gt;, subsequent runs will&lt;br&gt;
return even faster results since the index is already in memory, the second run was &lt;em&gt;51.841 ms&lt;/em&gt;&lt;br&gt;
more than 10x faster, the second run without the index woulnd't have made any difference.&lt;/p&gt;

&lt;p&gt;The second query that we want to test has an &lt;em&gt;AND&lt;/em&gt; using the description field, let's first run the query without a description index to see what happens.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%gar%'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Time: 51.215 ms&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Even though we don't have a index in description, our results are already 10x faster, that's because title is almost instant now, and the &lt;em&gt;and&lt;/em&gt; query on description don't need to scan the whole table, just the result set of the title index, before creating the index in the description field let's run the query with the &lt;em&gt;OR&lt;/em&gt; clause to see&lt;br&gt;
how it compares to the &lt;em&gt;and&lt;/em&gt; query&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%gar%'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Time: 1.059 ms&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The same time as before, what happened? with an &lt;em&gt;OR&lt;/em&gt; the query planner needs to scan the whole &lt;br&gt;
table again so it decides to not use the index, if we run with an EXPLAIN we can see that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;                                   &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;
&lt;span class="c1"&gt;-------------------------------------------------------------------------------------&lt;/span&gt;
 &lt;span class="n"&gt;Gather&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;20295&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;83&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20302&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;Workers&lt;/span&gt; &lt;span class="n"&gt;Planned&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
   &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Parallel&lt;/span&gt; &lt;span class="n"&gt;Seq&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;17265&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;62&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8459&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;~~*&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;~~*&lt;/span&gt; &lt;span class="s1"&gt;'%gar%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The query is not using &lt;em&gt;notes_title_idx&lt;/em&gt; because it would be even slower in this case, the reason is because&lt;br&gt;
the disc would have to be hit three times, one for the index read, one for the title read and one for the description. &lt;/p&gt;

&lt;p&gt;Now let's create the description index and see how it compares&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;notes_description_idx&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="n"&gt;gin_trgm_ops&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running the &lt;em&gt;OR&lt;/em&gt; query again we have a much better result &lt;em&gt;Time: 141.310 ms&lt;/em&gt; almost 10x faster again, we can use explain to see that both indexes are being used now&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;                                         &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;
&lt;span class="c1"&gt;--------------------------------------------------------------------------------------------------&lt;/span&gt;
 &lt;span class="n"&gt;Bitmap&lt;/span&gt; &lt;span class="n"&gt;Heap&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;222&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;11745&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20302&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;Recheck&lt;/span&gt; &lt;span class="n"&gt;Cond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;~~*&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;~~*&lt;/span&gt; &lt;span class="s1"&gt;'%gar%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;BitmapOr&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;222&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;222&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20304&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Bitmap&lt;/span&gt; &lt;span class="k"&gt;Index&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;notes_title_idx&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;195&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20204&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="k"&gt;Index&lt;/span&gt; &lt;span class="n"&gt;Cond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;~~*&lt;/span&gt; &lt;span class="s1"&gt;'%asi%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Bitmap&lt;/span&gt; &lt;span class="k"&gt;Index&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;notes_description_idx&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="k"&gt;Index&lt;/span&gt; &lt;span class="n"&gt;Cond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;~~*&lt;/span&gt; &lt;span class="s1"&gt;'%gar%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last query that we need to improve is the one where we concatenate the two fields title and description and search them, we could use an index on both fields together or use one in each like we did in the previous example, let's do both and see what's faster.&lt;/p&gt;

&lt;p&gt;To test for both we just need to run the query again since we already have two indexes one in each field&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;coalesce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;coalesce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;ilike&lt;/span&gt; &lt;span class="s1"&gt;'%gar%'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Time: 849.965 ms&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Using the coalesce the query planer doesn't use any of our indexes, now let's create an index on both fields and see what happens&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;index&lt;/span&gt; &lt;span class="n"&gt;notes_title_description_idx&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="n"&gt;gin_trgm_ops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="n"&gt;gin_trgm_ops&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the query again we get the same result, in order to speed up a query like this is much better to change the query to use a &lt;em&gt;OR&lt;/em&gt; and to use a expression index.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * from notes where title ilike '%gar%' or description ilike '%gar%';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with an &lt;em&gt;OR&lt;/em&gt; we get &lt;em&gt;126 ms&lt;/em&gt; and the query planer is using our multicolumn index &lt;em&gt;notes_title_description_idx&lt;/em&gt; that we just created, the results of using an multicolumn index are better but not by a lot and depending on how many fields you have in your table the index won't even be used, now let's try to create a concatenated index using the two fields that mimics the query that we tried.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#expression-indexes"&gt;
  &lt;/a&gt;
  Expression Indexes
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;notes_coales_title_description_idx&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;coalesce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;coalesce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;gin_trgm_ops&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need the extra parenteshis for the expression, now let's run the query again&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;select * from notes where coalesce(title, '') || ' ' || coalesce(description, '') ilike '%gar%';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Time: 103.706 ms&lt;/em&gt;&lt;br&gt;
10x faster again, postgres is smart enough to use our new index &lt;em&gt;notes_coales_title_description_idx&lt;/em&gt;, so that was faster than using the two different indexes in each field with an OR and faster than multicolumn index with an OR.&lt;/p&gt;

&lt;p&gt;The most important thing we can take from these tests is that is hard to predict what postgres will do so you should always test your indexes with the exact query that you're going to use, you should try different approaches to figure out what's the fastest for your query and don't be afraid of creating different indexes for different queries, and also using indexes for your queries makes them a LOT faster, 10x faster for all these queries that we tried, so you should definitely use them.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>posgres</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Introduction To MongoDB and How To Use It</title>
      <author>Boyan Iliev</author>
      <pubDate>Tue, 29 Jun 2021 14:08:16 +0000</pubDate>
      <link>https://dev.to/boiliev/introduction-to-mongodb-and-how-to-use-it-3no1</link>
      <guid>https://dev.to/boiliev/introduction-to-mongodb-and-how-to-use-it-3no1</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;MongoDB is a &lt;code&gt;NoSQL&lt;/code&gt; (not only SQL) database. In NoSQL databases, we store our data in a collection of documents. These documents are very similar to &lt;code&gt;JavaScript objects&lt;/code&gt; or &lt;code&gt;JSON objects&lt;/code&gt;. So if you are familiar with JavaScript, then you are going to like Mongo, because it will be easier to get the hang of it.&lt;/p&gt;

&lt;p&gt;MongoDB is very scalable. It has built-in replication and sharding. It's performant, it's fast, and mostly, it's very flexible. Because the data structure is like a JavaScript object, you don't have to map out your entire data structure beforehand as you do with relational databases. Unlike a relational database like &lt;code&gt;MySQL&lt;/code&gt;, where you have to create all your tables and all your columns, Mongo gives you the freedom to structure your data however we want through our application. This doesn't mean it's better than relational databases, it all depends on how you need to use your database.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-mongodb"&gt;
  &lt;/a&gt;
  Installing MongoDB
&lt;/h1&gt;

&lt;p&gt;We are going to install MongoDB through &lt;code&gt;Homebrew&lt;/code&gt;. If you don't have Homebrew installed, just run the code below in your terminal and that will install Homebrew.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you get Homebrew installed on your Mac, just run the three following commands. First, we run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew tap mongodb/brew
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install mongodb-community@4.4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then after that, we will want to run it as a service with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew services start mongodb-community@4.4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, we need to run the following command so that we can connect and start using MongoDB.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what you should see after running the command:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bE3UXkwM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/june2021/Mongo%2520-%2520Imgur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bE3UXkwM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/june2021/Mongo%2520-%2520Imgur.png" alt="Mongo - Imgur.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we have Mongo installed and ready, let's start with some of the main commands that you should know&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#commands"&gt;
  &lt;/a&gt;
  Commands
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#show-current-database"&gt;
  &lt;/a&gt;
  Show Current Database
&lt;/h3&gt;

&lt;p&gt;The command for seeing the current database is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#show-all-databases"&gt;
  &lt;/a&gt;
  Show All Databases
&lt;/h3&gt;

&lt;p&gt;In order to see all of the databases just run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;show dbs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#switching-and-creating-databases"&gt;
  &lt;/a&gt;
  Switching and Creating Databases
&lt;/h3&gt;

&lt;p&gt;If you want to switch which database you are using, just type in &lt;code&gt;use&lt;/code&gt; followed by the database name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use db_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to create a DB, just type in the &lt;code&gt;use&lt;/code&gt; command again, followed by your new DBs name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use new_db_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run &lt;code&gt;show dbs&lt;/code&gt; after creating a DB, the new DB won't show because it doesn't have anything in it, so don't worry when it doesn't show up after running the &lt;code&gt;show dbs&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dropping-a-database"&gt;
  &lt;/a&gt;
  Dropping a Database
&lt;/h3&gt;

&lt;p&gt;In order to drop a database, or in other words, delete it, you first need to switch to the database with the &lt;code&gt;use&lt;/code&gt; command, and after that, you need to type in the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db.dropDatabase()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-and-viewing-collections"&gt;
  &lt;/a&gt;
  Creating and Viewing Collections
&lt;/h3&gt;

&lt;p&gt;To create a collection in the DB that you are using, you just have to run the following command and set the name of your collection:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db.createCollection('collection_name')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if you want to view the collection, just run the &lt;code&gt;show&lt;/code&gt; command followed by &lt;code&gt;collections&lt;/code&gt; and that should print out the collections in your DB.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;show collections
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#inserting-rows"&gt;
  &lt;/a&gt;
  Inserting Rows
&lt;/h3&gt;

&lt;p&gt;Now in order to insert a row, just type in the &lt;code&gt;db&lt;/code&gt; followed by the name of the collection that you want to insert the row in, and then by &lt;code&gt;insert&lt;/code&gt;, which is then followed by parentheses&lt;code&gt;()&lt;/code&gt;. And in those parentheses, you pass in an object with whatever you want.&lt;/p&gt;

&lt;p&gt;Here is an example of how this should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db.users.insert({
    username: 'Batman_fan_44',
    followers: 3,
    following: [
        'Alred',
        'Robin'
    ],
    status: {
        name: 'Bruce Wayne',
        status: 'active'
    }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see this looks just like a normal JavaScript object. You can store strings, numbers, arrays and can also have embedded objects inside. This is why Mongo is liked by so many, because of how similar it is to JS and how easy it is to use.&lt;/p&gt;

&lt;p&gt;If you want to insert more than one row, instead of typing &lt;code&gt;insert&lt;/code&gt; after the collections name, type in &lt;code&gt;insertMany&lt;/code&gt; and then insert your rows in an array like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db.users.insertMany([
    {
        username: 'Tony Montana',
        followers: 1234
    },
    {
        username: 'Hannibal Lecter',
        followers: 5
    },
    {
        username: 'Rick Grimes',
        followers: 21
    }
])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These rows don't have as many stuff like likes or status. which our first row has, but that doesn't matter. Unlike relational databases, in Mongo, we don't have that strict data model that we have to follow. We can put whatever we want wherever we want, which is awesome!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#viewing-rows"&gt;
  &lt;/a&gt;
  Viewing Rows
&lt;/h3&gt;

&lt;p&gt;To view the rows of a certain collection, just run the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db.collection_name.find()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will print out the data, but it will be hard to read. Luckily there is a method called &lt;code&gt;pretty()&lt;/code&gt;, which formats all the rows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db.collection_name.find().pretty()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now it will be much easier to read.&lt;/p&gt;

&lt;p&gt;These are some of the main commands that you should know. I recommend that you check out this MongoDB Cheat Sheet and have a look at some other commands that might be useful to you:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/bradtraversy/f407d642bdc3b31681bc7e56d95485b6"&gt;https://gist.github.com/bradtraversy/f407d642bdc3b31681bc7e56d95485b6&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;As you can see MongoDB looks identical to JavaScript. They have similar syntax and are pretty easy to get the hang of.&lt;/p&gt;

&lt;p&gt;If you want to have a MongoDB database cluster production-ready, I strongly recommend using the new DigitalOcean managed MongoDB clusters which you can deploy with just the click of a button so that you won't have to worry about server maintenance, which can be very challenging sometimes.&lt;/p&gt;

&lt;p&gt;If you want you can use this referral code which gives you &lt;a href="https://m.do.co/c/122894dc3b82"&gt;free $100 DigitalOcean credit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you also want to learn more about SQL and how to use it, I highly recommend that you check out this &lt;a href="https://github.com/bobbyiliev/introduction-to-sql"&gt;Introduction to SQL&lt;/a&gt; opensource ebook. It helped me understand how to use SQL and I highly recommend it.&lt;/p&gt;

&lt;p&gt;I hope that this post has helped you get more comfortable with using MongoDB and getting the hang of it.&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>database</category>
      <category>hackathon</category>
    </item>
    <item>
      <title>Gradual method renaming in Perl</title>
      <author>Mark Gardner</author>
      <pubDate>Tue, 29 Jun 2021 14:00:00 +0000</pubDate>
      <link>https://dev.to/mjgardner/gradual-method-renaming-in-perl-fil</link>
      <guid>https://dev.to/mjgardner/gradual-method-renaming-in-perl-fil</guid>
      <description>&lt;p&gt;We have a huge codebase of over 700,000 lines of Perl spread across a couple dozen &lt;a href="https://www.git-scm.com/"&gt;Git&lt;/a&gt; repositories at &lt;a href="https://www.hostgator.com/"&gt;work&lt;/a&gt;. Sometimes &lt;a href="https://www.refactoring.com/"&gt;refactoring&lt;/a&gt; is easy if the classes and methods involved are confined to one of those repos, but last week we wanted to rename a method that was potentially used across many of them without having to QA and launch so many changes. After getting some help from &lt;a href="https://grinnz.net/"&gt;Dan Book&lt;/a&gt; and &lt;a href="https://www.simcop2387.info/"&gt;Ryan Voots&lt;/a&gt; on the &lt;a href="https://web.libera.chat/#perl"&gt;#perl libera.chat IRC channel&lt;/a&gt;, I arrived at the following solution.&lt;/p&gt;

&lt;p&gt;First, if all you want to do is alias the new method call to the old while making the least amount of changes, you can just do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;*new_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;&amp;amp;old_method&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This takes advantage of Perl’s &lt;a href="https://perldoc.pl/perldata#Typeglobs-and-Filehandles"&gt;typeglobs&lt;/a&gt; by assigning to the new method’s name in the symbol table a &lt;a href="https://perldoc.pl/perlref"&gt;reference&lt;/a&gt; (indicated by the &lt;code&gt;\&lt;/code&gt; character) to the old method. &lt;a href="https://perldoc.pl/perlobj#A-Method-is-Simply-a-Subroutine"&gt;Methods are just subroutines&lt;/a&gt; in Perl, and although you don’t need the &lt;code&gt;&amp;amp;&lt;/code&gt; character when calling one, you do need it if you’re passing a subroutine as an argument or creating a reference, as we’re doing above.&lt;/p&gt;

&lt;p&gt;I wanted to do a bit more, though. First, I wanted to log the calls to the old method name so that I could track just how widely it’s used and have a head start on renaming it elsewhere in our codebase. Also, I didn’t want to fill our logs with those calls—we have enough noise in there already. And lastly, I wanted future calls to go directly to the new method name without adding another stack frame when using &lt;code&gt;caller&lt;/code&gt; or &lt;a href="https://perldoc.pl/Carp"&gt;Carp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With all that in mind, here’s the result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;old_method&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;warn&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;old_method is deprecated&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="nb"&gt;no&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redefine&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="nv"&gt;*old_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;&amp;amp;new_method&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;goto&lt;/span&gt; &lt;span class="nv"&gt;&amp;amp;new_method&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;new_method&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# code from old_method goes here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Old (and not-so-old) hands at programming are probably leaping out of their seats right now yelling, “YOU’RE USING GOTO! GOTO IS &lt;a href="https://homepages.cwi.nl/~storm/teaching/reader/Dijkstra68.pdf"&gt;CONSIDERED HARMFUL&lt;/a&gt;!” And they’re right, but this isn’t Dijkstra’s goto. From the Perl manual:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;goto &amp;amp;NAME&lt;/code&gt; form is quite different from the other forms of &lt;a href="https://perldoc.pl/functions/goto"&gt;&lt;code&gt;goto&lt;/code&gt;&lt;/a&gt;. In fact, it isn’t a goto in the normal sense at all, and doesn’t have the stigma associated with other gotos. Instead, it exits the current subroutine (losing any changes set by &lt;a href="https://perldoc.pl/functions/local"&gt;&lt;code&gt;local&lt;/code&gt;&lt;/a&gt;) and immediately calls in its place the named subroutine using the current value of &lt;a href="https://perldoc.pl/perlvar#%40_"&gt;&lt;code&gt;@_&lt;/code&gt;&lt;/a&gt;. &lt;em&gt;[…]&lt;/em&gt; After the &lt;a href="https://perldoc.pl/functions/goto"&gt;&lt;code&gt;goto&lt;/code&gt;&lt;/a&gt;, not even &lt;a href="https://perldoc.pl/functions/caller"&gt;&lt;code&gt;caller&lt;/code&gt;&lt;/a&gt; will be able to tell that this routine was called first.&lt;/p&gt;

&lt;p&gt;&lt;cite&gt;&lt;a href="https://perldoc.pl/perlfunc"&gt;perlfunc&lt;/a&gt; manual page&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The bottom line is that this achieves our third goal above: immediately jumping to the new method as if it were originally called.&lt;/p&gt;

&lt;p&gt;The other tricky bit is in the line before, when we’re redefining &lt;code&gt;old_method&lt;/code&gt; to point to &lt;code&gt;new_method&lt;/code&gt; while we’re still inside &lt;code&gt;old_method&lt;/code&gt;. (Yes, you can do this.) If you’re running under &lt;code&gt;use warnings&lt;/code&gt; (and we are, and &lt;a href="https://perlmaven.com/always-use-warnings"&gt;you should&lt;/a&gt;), you first need to disable &lt;a href="https://perldoc.pl/perldiag#Subroutine-%25s-redefined"&gt;that warning&lt;/a&gt;. Later calls to &lt;code&gt;old_method&lt;/code&gt; will go straight to &lt;code&gt;new_method&lt;/code&gt; without logging anything.&lt;/p&gt;

&lt;p&gt;And that’s it. The next step after launching this change is to add a story to our &lt;a href="https://www.scaledagileframework.com/team-backlog/"&gt;backlog&lt;/a&gt; to monitor our logs for calls to the old method, and gradually refactor our other repositories. Then we can finally remove the old method wrapper.&lt;/p&gt;

</description>
      <category>oop</category>
      <category>perl</category>
      <category>refactoring</category>
    </item>
  </channel>
</rss>
