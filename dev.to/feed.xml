<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>7 Useful Tools Written in Haskell</title>
      <author>Catherine Galkina</author>
      <pubDate>Mon, 18 Oct 2021 14:18:22 +0000</pubDate>
      <link>https://dev.to/typeable/7-useful-tools-written-in-haskell-560d</link>
      <guid>https://dev.to/typeable/7-useful-tools-written-in-haskell-560d</guid>
      <description>&lt;p&gt;Author: Nikolay Rulev&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Haskell is a pure functional general-purpose programming language with static typing and lazy evaluation. It was created in 1990 and was named after Haskell Curry. At present, the GHC compiler is its main implementation.&lt;/p&gt;

&lt;p&gt;Here at Typeable we like this language very much and use it as our &lt;a href="https://typeable.io/blog/2021-05-11-languages-choice.html"&gt;main language for software development&lt;/a&gt;. Though Haskell is already quite widely used in the industry, it’s still sometimes believed to be an "academical" language used exclusively for scientific purposes. In this post, I’d like to tell you about several rather popular Haskell tools which may be of use to you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-tools-written-in-haskell"&gt;
  &lt;/a&gt;
  Useful tools written in Haskell
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-xmonad"&gt;
  &lt;/a&gt;
  1. Xmonad
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://xmonad.org/"&gt;Xmonad&lt;/a&gt; is a tile window manager for X Window System, written in Haskell. The distinctive feature of this tile manager is that it’s configured in Haskell, too, which allows us to use all features of the language. Thus, while configuring the window manager, you can add weather forecast data, measure the system condition, etc.&lt;/p&gt;

&lt;p&gt;Here is an example of configured system (&lt;a href="https://github.com/erikbackman/nixos-config"&gt;by erikbackman&lt;/a&gt;):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aHFlI1NM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/hasktools/xmonad.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aHFlI1NM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/hasktools/xmonad.jpg" alt="Xmonad screenshot by erikbackman"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A config example (only a part is shown, not the entire config):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xmonad&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;dynamicProjects&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;projects&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;ewmh&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;docks&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;polybar&lt;/span&gt;
  &lt;span class="kr"&gt;where&lt;/span&gt;
    &lt;span class="n"&gt;cfg&lt;/span&gt; &lt;span class="n"&gt;dbus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="n"&gt;def&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;manageHook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;App&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manageApps&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;+&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;manageSpawn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;logHook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dynamicLogWithPP&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;polybarHook&lt;/span&gt; &lt;span class="n"&gt;dbus&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="n"&gt;startupHook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myStartupHook&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;terminal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fromMaybe&lt;/span&gt; &lt;span class="s"&gt;"xterm"&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;App&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;terminal&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;modMask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mod4Mask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;borderWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keybinds&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="kt"&gt;KeybindConfig&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;handleEventHook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handleEventHook&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;+&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;fullscreenEventHook&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;layoutHook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myLayouts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;focusedBorderColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"#bd93f9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;normalBorderColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"#434C5E"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;workspaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myWS&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;apps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="n"&gt;defaultAppConfig&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kt"&gt;App&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;terminal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="s"&gt;"kitty"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="kt"&gt;App&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;launcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="s"&gt;"rofi -matching fuzzy -show drun -modi drun,run -show-icons"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="kt"&gt;App&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mailClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="s"&gt;"claws-mail"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;myStartupHook&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;X&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;myStartupHook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;setDefaultCursor&lt;/span&gt; &lt;span class="n"&gt;xC_left_ptr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find further information on the  &lt;a href="https://xmonad.org/TUTORIAL.html"&gt;xmonad&lt;/a&gt; website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-shellcheck"&gt;
  &lt;/a&gt;
  2. ShellCheck
&lt;/h3&gt;

&lt;p&gt;ShellCheck is a utility used to analyze bash scripts. It allows novices to fish out common errors when they just start learning this scripting language and helps more advanced users not to miss small bugs in large and complex scripts. The project is being constantly expanded and its large community is adding new rules. You can view the ShellCheck and try it out at &lt;a href="https://www.shellcheck.net/"&gt;its home page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s use the following script by way of example (try to find the errors in it without looking into the ShellCheck result):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c"&gt;## Example: ShellCheck can detect some&lt;/span&gt;
&lt;span class="c"&gt;## higher level semantic problems&lt;/span&gt;

&lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;getopts&lt;/span&gt; &lt;span class="s2"&gt;"nf:"&lt;/span&gt; param
&lt;span class="k"&gt;do
    case&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$param&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in
        &lt;/span&gt;f&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$OPTARG&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;;;&lt;/span&gt;
        v&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-x&lt;/span&gt; &lt;span class="p"&gt;;;&lt;/span&gt;
    &lt;span class="k"&gt;esac&lt;/span&gt;
&lt;span class="k"&gt;done

case&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
    &lt;span class="k"&gt;*&lt;/span&gt;.gz&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;gzip&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;;;&lt;/span&gt;
    &lt;span class="k"&gt;*&lt;/span&gt;.zip&lt;span class="p"&gt;)&lt;/span&gt; unzip &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;;;&lt;/span&gt;
    &lt;span class="k"&gt;*&lt;/span&gt;.tar.gz&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;tar &lt;/span&gt;xzf &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;;;&lt;/span&gt;
    &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Unknown filetype"&lt;/span&gt; &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="k"&gt;esac&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;(uname)"&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Linux"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Using Linux"&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It’s very easy to check the file: &lt;code&gt;shellcheck example.bash&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As the result, we’ll be informed about all potential errors in the script:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yWkN_Xy_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/hasktools/shellcheck.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yWkN_Xy_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/hasktools/shellcheck.png" alt="ShecllCheck finds even higher-level semantic problems"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-purescript"&gt;
  &lt;/a&gt;
  3. PureScript
&lt;/h3&gt;

&lt;p&gt;Haskell was used to develop several popular compiled functional languages for the frontend development which are eventually &lt;a href="https://typeable.io/blog/2021-04-05-js-transpilation.html"&gt;transpiled into JavaScript&lt;/a&gt;. Today we’re going to talk about PureScript. This language has a strict type system supporting algebraic data types, HKT (Higher-Kinded Types), and type classes with functional dependencies. It also supports several necessary and handy features such as FFI (Foreign Function Interface) with JS, and the resulting JS looks very much readable. The language has already acquired its own ecosystem: the package manager spago and IDE based on its own language server.&lt;/p&gt;

&lt;p&gt;Below you can find the example of a simple button component written in &lt;a href="https://purescript-halogen.github.io/purescript-halogen/"&gt;Halogen&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module Example.Basic.Button (component) where

import Prelude

import Halogen as H
import Halogen.HTML as HH
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties as HP

type State = { enabled :: Boolean }

data Action = Toggle

component :: forall q i o m. H.Component q i o m
component =
H.mkComponent
    { initialState
    , render
    , eval: H.mkEval $ H.defaultEval
        { handleAction = handleAction }
    }

initialState :: forall i. i -&amp;gt; State
initialState _ = { enabled: false }

render :: forall m. State -&amp;gt; H.ComponentHTML Action () m
render state =
let
    label = if state.enabled then "On" else "Off"
in
    HH.button
    [ HP.title label
    , HE.onClick \_ -&amp;gt; Toggle
    ]
    [ HH.text label ]

handleAction :: forall o m. Action
  -&amp;gt; H.HalogenM State Action () o m Unit
handleAction = case _ of
Toggle -&amp;gt;
    H.modify_ \st -&amp;gt; st { enabled = not st.enabled }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For further study, you can proceed to the &lt;a href="https://www.purescript.org/"&gt;official website&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-agda"&gt;
  &lt;/a&gt;
  4. Agda
&lt;/h3&gt;

&lt;p&gt;Haskell works really well when it comes to developing programming languages! Agda is another example.  This is a language with a strong theoretical background and dependent types whose syntax looks much like that of Haskell. Moreover, this is also an automated theorem proving system: logical assertions are expressed as types, and successful type checking is the proof of program correctness.&lt;/p&gt;

&lt;p&gt;What's this all for? First of all, this allows avoiding a vast number of run-time errors and to some extent prevents the programmer from writing incorrect code, as utopian as it may sound. Let’s consider a classic example: we’d like to rewrite the &lt;code&gt;head&lt;/code&gt; function that takes the list head but we want to make sure that we don’t pass an empty list to this function anywhere in our program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
-- Natural numbers in the form of
-- Peano numbers and their addition
data Nat : Set where
  zero : Nat
  suc  : Nat -&amp;gt; Nat

_+_ : Nat -&amp;gt; Nat -&amp;gt; Nat
 zero  + m = m
 suc n + m = suc (n + m)

-- Vector, dependent type whose length
-- is stored in the type
data Vec (A : Set) : Nat -&amp;gt; Set where
  []   : Vec A zero
  _::_ : {n : Nat} -&amp;gt; A -&amp;gt; Vec A n -&amp;gt; Vec A (suc n)

-- head that cannot be applied to an empty vector
head : {A : Set}{n : Nat} -&amp;gt; Vec A (suc n) -&amp;gt; A
head (x :: xs) = x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-postgrest"&gt;
  &lt;/a&gt;
  5. PostgREST
&lt;/h3&gt;

&lt;p&gt;PostgREST is an independent web server that will turn your database schema directly into RESTful API. This approach saves you the trouble of writing the boilerplate for CRUD and allows you to focus on the important details of business logic. The advantages include the use of PostgreSQL binary protocol and serialization of JSON directly to SQL to improve performance.&lt;/p&gt;

&lt;p&gt;Let’s take a simple city and country scheme as an example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iuP3Y_ZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/hasktools/db_schema.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iuP3Y_ZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/hasktools/db_schema.png" alt="PostgREST takes your database schema..."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the result, we get the following API for this scheme:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Q6owdAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/hasktools/db_api.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Q6owdAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/hasktools/db_api.png" alt="...and converts it into API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Documentation is &lt;a href="https://postgrest.org/en/v8.0/index.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-octopod"&gt;
  &lt;/a&gt;
  6. Octopod
&lt;/h3&gt;

&lt;p&gt;Octopod is a service we developed in Typeable that allows our team to use the entire Helm’s potential without the need for technical knowledge. Our solution makes it easier to manage dynamic environments for the whole team: DevOps, developers, testers, and project managers. All you need is to indicate the URL to the Helm repository and Octopod will automatically get the required configurations.&lt;/p&gt;

&lt;p&gt;We wrote about this service &lt;a href="https://typeable.io/blog/2021-02-18-octopod-release.html"&gt;earlier&lt;/a&gt;, and you can find more information on &lt;a href="https://typeable.io/octopod.html"&gt;Octopod home page&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-pandoc"&gt;
  &lt;/a&gt;
  7. Pandoc
&lt;/h3&gt;

&lt;p&gt;Pandoc is a multitool that allows converting data in one text format into a totally different format. The utility understands a lot of useful syntax extensions, including the document metadata: author, heading, dates, footnotes, tables, highlighting of code snippets, LaTex inserts with formulas, etc. Supported document formats include Markdown, epub, docs, RTF, ODT, HTML, LaTeX, various formats of wiki markdown and bibliography.&lt;/p&gt;

&lt;p&gt;You can download the tool and view all supported formats &lt;a href="https://pandoc.org/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I didn’t list all supported conversion options as it would’ve taken all the post. Just look at the graph showing what and how can be converted:&lt;br&gt;
&lt;a href="https://typeable.io/images/hasktools/pandoc.jpg"&gt;a big picture!&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Here I’ve listed the open-source projects which I believe to be the most interesting and useful for a wide circle of users. This list can be used as an answer to the question “Is there anything useful written in Haskell beyond the science?”&lt;/p&gt;

&lt;p&gt;Surely, the list is not exhaustive and can be extended. If you think that it should include a certain project or just want to share a cool Haskell tool – let us know and leave a comment!&lt;/p&gt;

</description>
      <category>haskell</category>
      <category>functional</category>
      <category>programming</category>
    </item>
    <item>
      <title>Create a backend in Javascript (part 7): NodeJS Events and Streams</title>
      <author>Eric The Coder</author>
      <pubDate>Mon, 18 Oct 2021 14:18:20 +0000</pubDate>
      <link>https://dev.to/ericchapman/create-a-backend-in-javascript-part-7-nodejs-events-and-streams-10fb</link>
      <guid>https://dev.to/ericchapman/create-a-backend-in-javascript-part-7-nodejs-events-and-streams-10fb</guid>
      <description>&lt;p&gt;Here is a series of articles to help you create backend applications in Javascript.&lt;/p&gt;

&lt;p&gt;Node.js is now a must, so it is essential for a developer to master it.&lt;/p&gt;

&lt;p&gt;I will publish a new article every two days and little by little you will learn everything there is to know about Node.js&lt;/p&gt;

&lt;p&gt;To not miss anything follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#events"&gt;
  &lt;/a&gt;
  Events
&lt;/h2&gt;

&lt;p&gt;Much of the Node.js kernel is built around an idiomatic event-driven asynchronous architecture in which certain types of objects (called "emitters") emit events that cause a "listeners" function call.&lt;/p&gt;

&lt;p&gt;The following example shows a simple EventEmitter with a single "listener" that occurs when, for example, a sale is made&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;events&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;myEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;newSale&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A new sale occur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;myEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;newSale&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The eventEmitter.on() method is used to register a "listeners", while the eventEmitter.emit() method is used to trigger the event.&lt;/p&gt;

&lt;p&gt;When the event is triggered, the content of the function callback will be executed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A new sale occur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#pass-arguments-to-listeners"&gt;
  &lt;/a&gt;
  Pass arguments to listeners
&lt;/h3&gt;

&lt;p&gt;The eventEmitter.emit () method allows an arbitrary set of arguments to be passed to "listeners" functions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;events&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;myEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;newSale&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`A new sale occur total of: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;myEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;newSale&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;599.99&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#nodejs-server-works-with-an-eventemitter"&gt;
  &lt;/a&gt;
  Node.js server works with an eventEmitter
&lt;/h3&gt;

&lt;p&gt;Now that we know about Node.js events. We are able to better understand the logic of the Node.js server object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// Create an event called "request"&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Execute this code when the "request" event is trigger&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Request received&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// this will loop and wait for events&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;127.0.0.1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Waiting for request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#streams"&gt;
  &lt;/a&gt;
  Streams
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-are-streams"&gt;
  &lt;/a&gt;
  What are Streams?
&lt;/h3&gt;

&lt;p&gt;Streams are used to process (read and write) data piece by piece (chunks) without completing the entire read and write operation and also without keeping all the data in memory.&lt;/p&gt;

&lt;p&gt;Youtube or Netflix are good examples of Streams. You don't need to wait for the video to fully load. The process is done piece by piece (chunks). So you can start watching the media even if the entire file is not yet downloaded.&lt;/p&gt;

&lt;p&gt;In Node.js, there are "readable" Streams and "writable" Streams. Readable Streams can for example be a read file or an http request for data.&lt;/p&gt;

&lt;p&gt;Writable Streams is the opposite of Readable Streams so for example an http response or a file to send&lt;/p&gt;

&lt;p&gt;Here is an example of reading a large data file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// No need to load the entire file to memory&lt;/span&gt;
    &lt;span class="c1"&gt;// fs.readFile('data.txt', (err, data) =&amp;gt; {&lt;/span&gt;
    &lt;span class="c1"&gt;//    if (err) console.log(err)&lt;/span&gt;
    &lt;span class="c1"&gt;//    res.end(data);&lt;/span&gt;
    &lt;span class="c1"&gt;// })&lt;/span&gt;

    &lt;span class="c1"&gt;// Create a Readable Streams&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;readable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createReadStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// Pipe the Stream chunk to a writable Stream&lt;/span&gt;
    &lt;span class="nx"&gt;readable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The readable.pipe() method attaches a "writeable" Stream to the "readable", which automatically switches it to fluid mode and transfers all of its data to the attached "writable". The data stream will be automatically managed so that the destination "writable" Stream is not overwhelmed by a faster "readable" Stream.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's all for today, follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt; to be notified of the publication of the next article (within two days).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Attributes of good REST APIs</title>
      <author>Abhinav Pandey</author>
      <pubDate>Mon, 18 Oct 2021 14:16:01 +0000</pubDate>
      <link>https://dev.to/abh1navv/attributes-of-good-rest-apis-4fbj</link>
      <guid>https://dev.to/abh1navv/attributes-of-good-rest-apis-4fbj</guid>
      <description>&lt;p&gt;APIs are the backbone of a successful application architecture and REST APIs are the most popular way of creating web services.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NJR3821s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FB_DkddVUAMq2UN%3Fformat%3Djpg%26name%3Dmedium" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NJR3821s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FB_DkddVUAMq2UN%3Fformat%3Djpg%26name%3Dmedium" alt='The genie says there are 3 rules - no wishing for death, no falling in love and no bring back dead people. The person asks, "I want to create a perfect backend without creating good APIs". The genie replies, "There are 4 rules"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below is a concise list of best practices to use while designing REST APIs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-consistency-of-http-methods"&gt;
  &lt;/a&gt;
  1. Consistency of HTTP methods
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;GET /api/v1/threads&lt;/code&gt;  - to get a list of all threads&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GET /api/v1/threads/14&lt;/code&gt;  - get a single thread with id 14&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;POST /api/v1/threads&lt;/code&gt;  - add a new thread to collection&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PUT /api/v1/threads/14&lt;/code&gt;  - update thread with id 14&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DELETE /api/v1/threads/14&lt;/code&gt; - update thread with id 14&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-versioning"&gt;
  &lt;/a&gt;
  2. Versioning
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Version is part of the endpoint &lt;/li&gt;
&lt;li&gt;This gives the possibility to support multiple live versions of the same API. E.g. Twitter has API versions 1.1 and 2.0 - both are live and accessible.&lt;/li&gt;
&lt;li&gt;Enables easy switching and rollback for consumers of the API&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-use-standard-http-error-codes"&gt;
  &lt;/a&gt;
  3. Use standard HTTP error codes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;HTTP response codes were created to describe the semantics of an API response.&lt;/li&gt;
&lt;li&gt;Return standard error codes and let the consumer handle the errors in their own way. Always include a message in your errors for troubleshooting purposes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---CaTCt0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FB_Dk_CUYAIRKTZ%3Fformat%3Djpg%26name%3Dmedium" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---CaTCt0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FB_Dk_CUYAIRKTZ%3Fformat%3Djpg%26name%3Dmedium" alt="Drake says no to 200 OK with and error message embedded in response. He says yes to 401 Unauthorized or any other semantic HTTP error code with an error detail embedded."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-endpoint-conventions"&gt;
  &lt;/a&gt;
  4. Endpoint conventions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Plural nouns for collections and no verbs&lt;br&gt;
E.g. "threads" is used instead of using verbs like /getThread, /updateThread&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resource nesting is visible in the endpoint&lt;br&gt;
E.g. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET /api/v1/threads/14/tweets&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET /api/v1/threads/14/tweets/2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#5-security"&gt;
  &lt;/a&gt;
  5. Security
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use TLS/SSL&lt;/li&gt;
&lt;li&gt;Use authentication and authorization to avoid malicious requests&lt;/li&gt;
&lt;li&gt;Set up rate limiting and caching to prevent against DoS attacks&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#6-performance"&gt;
  &lt;/a&gt;
  6. Performance
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Use caching(in-memory or CDN) to provide fast results for repeated GET requests&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A good API has pagination and filtering capabilities to reduce the amount of data being transferred. Data transfer objects should not include unnecessary fields.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#7-documentation"&gt;
  &lt;/a&gt;
  7. Documentation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The least requirements of a method documentation - description, request parameters, response, error scenarios.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Definitely include request/response samples to provide the full picture.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also check - &lt;a href="https://swagger.io/specification/"&gt;https://swagger.io/specification/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;My final suggestion is to make API designing process the starting point of your backend architecture and build other architectural components around it.&lt;/p&gt;




&lt;p&gt;Thanks for reading. &lt;/p&gt;

&lt;p&gt;I hope this was useful in providing a checklist of points to take care of while designing APIs. &lt;/p&gt;

&lt;p&gt;If you want to connect with me, you can find me on &lt;a href="https://www.twitter.com/abh1navv"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>architecture</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>.NET 6 is READY to launch!🚀 Revealing 5 NEW (and awesome) FEATURES 🤯</title>
      <author>Dotnetsafer</author>
      <pubDate>Mon, 18 Oct 2021 14:14:14 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/net-6-is-ready-to-launch-revealing-5-new-and-awesome-features-m60</link>
      <guid>https://dev.to/dotnetsafer/net-6-is-ready-to-launch-revealing-5-new-and-awesome-features-m60</guid>
      <description>&lt;p&gt;After many months of leaks, speculation and more, Microsoft &lt;strong&gt;officially&lt;/strong&gt; releases &lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-6-release-candidate-2/"&gt;.NET 6 RC2&lt;/a&gt;. This is the second of 2 versions to be “released” and supported in production.&lt;/p&gt;

&lt;p&gt;This version brings many new features, both new features and performance and optimization improvements. Let’s take a look at &lt;strong&gt;The 5 Most Important .NET 6 Features.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#c-10"&gt;
  &lt;/a&gt;
  🔥 C# 10
&lt;/h2&gt;

&lt;p&gt;C# 10 right now Microsoft calls it one of the &lt;strong&gt;most important&lt;/strong&gt; parts of &lt;strong&gt;.NET 6.&lt;/strong&gt; Primarily, C# 10 is the &lt;strong&gt;evolution&lt;/strong&gt; of what already exists, both in concepts and in capabilities and features, registries or patterns.&lt;/p&gt;

&lt;p&gt;To summarize a little what brings C# 10, the &lt;code&gt;global using&lt;/code&gt;, the namespaces with file scope and more very good characteristics that will allow to simplify the code and to write less repetitions.&lt;/p&gt;

&lt;p&gt;There are so many new features of C# 10 that would give for a whole article since this one is only focused on .NET 6. So &lt;strong&gt;if you want to discover&lt;/strong&gt; with me all the new features of C# 10, &lt;strong&gt;give me right now&lt;/strong&gt; an &lt;strong&gt;unicorn&lt;/strong&gt; 🦄. If I see many &lt;strong&gt;you will make my day&lt;/strong&gt; and I will publish an article &lt;strong&gt;EXCLUSIVELY&lt;/strong&gt; about what’s new in C# 10.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#record-structs"&gt;
  &lt;/a&gt;
  ✨ Record structs
&lt;/h2&gt;

&lt;p&gt;Finally the C# 10 release adds &lt;strong&gt;support&lt;/strong&gt; for &lt;strong&gt;registry structs&lt;/strong&gt;. To understand this new feature, it is very &lt;strong&gt;similar&lt;/strong&gt; to the &lt;strong&gt;records&lt;/strong&gt; that are in &lt;strong&gt;C# 9&lt;/strong&gt; version (class-based) but with quite a few differences.&lt;/p&gt;

&lt;p&gt;The biggest change is that &lt;strong&gt;registry structs&lt;/strong&gt; have been added for completeness, so structs can enjoy the same registry benefits as classes. But that’s not all, Microsoft did not only limit itself to &lt;strong&gt;struct records&lt;/strong&gt;, but also, they decided to &lt;strong&gt;align class records&lt;/strong&gt; as much as struct records with &lt;code&gt;ValueTuple&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The result of this? 🤔&lt;/p&gt;

&lt;p&gt;Well, the struct properties of records are &lt;strong&gt;mutable by default&lt;/strong&gt;, while the class properties of records are immutable. Although it is still possible to declare a &lt;code&gt;readonly record struct&lt;/code&gt;, which matches the semantics of the &lt;code&gt;record class&lt;/code&gt; and is immutable.&lt;/p&gt;

&lt;p&gt;To be clear, &lt;strong&gt;record structures DO NOT REPLACE record classes&lt;/strong&gt;. As Microsoft tells us, they do not “encourage” the migration from record classes to record structures. This guidance for the use of classes &lt;strong&gt;can be applied&lt;/strong&gt; equally to registry structs as to registry classes themselves.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In Microsoft’s own words👇&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“…In other words, the choice between classes and structs must be made before choosing to use registers…”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#record-structs-in-action"&gt;
  &lt;/a&gt;
  Record structs in action
&lt;/h3&gt;

&lt;p&gt;To understand the theory, what better way than to look at a practical example? Let’s do it 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;Battery&lt;/span&gt; &lt;span class="n"&gt;battery&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"CR2032"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.235&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;battery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;battery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RemainingCapacityPercentage&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;battery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RemainingCapacityPercentage&lt;/span&gt;&lt;span class="p"&gt;--;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;battery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Battery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;TotalCapacityAmpHours&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;RemainingCapacityPercentage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is what the executed code would return 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="n"&gt;Battery&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CR2032&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TotalCapacityAmpHours&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0.235&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RemainingCapacityPercentage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;Battery&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CR2032&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TotalCapacityAmpHours&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0.235&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RemainingCapacityPercentage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What you will notice now, is that it is &lt;strong&gt;very similar&lt;/strong&gt; to the record example in C# 9.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;Battery&lt;/span&gt; &lt;span class="n"&gt;battery&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"CR2032"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.235&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;battery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;battery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RemainingCapacityPercentage&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Battery&lt;/span&gt; &lt;span class="n"&gt;updatedBattery&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;battery&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;RemainingCapacityPercentage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;battery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RemainingCapacityPercentage&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="n"&gt;battery&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;updatedBattery&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;battery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Battery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;TotalCapacityAmpHours&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;RemainingCapacityPercentage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To repeat again what has already been said, the &lt;strong&gt;main&lt;/strong&gt; distinguishing &lt;strong&gt;feature&lt;/strong&gt; of &lt;strong&gt;record struct properties&lt;/strong&gt; (apart from the record struct syntax), is that they are mutable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-main-differences-between-struct-records-and-class-records"&gt;
  &lt;/a&gt;
  What are the main differences between struct records and class records? 🤔
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Record classes are defined with &lt;code&gt;record&lt;/code&gt; or &lt;code&gt;record class&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The properties of the &lt;code&gt;record class&lt;/code&gt; are immutable (get/init) by default.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Record struct properties are mutable (get/set) by default.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Records are defined with record &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;readonly record struct&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#why-do-struct-records-look-like-class-records"&gt;
  &lt;/a&gt;
  Why do Struct records look like Class records? 🤔
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Support &lt;code&gt;with&lt;/code&gt; expressions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They have the ability to customize member definitions (which is new in C# 10) to use fields instead of default property members.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The syntax used is the same (except &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; in the definition).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allow to customize member behavior, using &lt;code&gt;init&lt;/code&gt; or mutable properties.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#global-usings"&gt;
  &lt;/a&gt;
  💥 Global usings
&lt;/h2&gt;

&lt;p&gt;You can now use the &lt;code&gt;global&lt;/code&gt; modifier to any using directive. With this you can tell the compiler that the directive must be applied to all source files in the compilation.&lt;/p&gt;

&lt;p&gt;Perfect, but as before…&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-using-directive"&gt;
  &lt;/a&gt;
  What is the using directive? 🤔
&lt;/h3&gt;

&lt;p&gt;This directive allows you to &lt;strong&gt;use types defined&lt;/strong&gt; in a namespace without specifying the entire namespace of that type.&lt;/p&gt;

&lt;p&gt;To summarize, the &lt;code&gt;using&lt;/code&gt; directive imports all types from a single namespace, as shown in the following example 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can apply &lt;strong&gt;two modifiers&lt;/strong&gt; to a &lt;code&gt;using&lt;/code&gt; directive:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;global&lt;/code&gt; modifier has the same effect as adding the same &lt;code&gt;using&lt;/code&gt; directive to every source file in your project. This modifier was introduced in C# 10.0.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;static&lt;/code&gt; modifier imports the &lt;code&gt;static&lt;/code&gt; members and nested types from a single type rather than importing all the types in a namespace.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s look at different types of syntaxes 👇&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;global using System;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;global using static System.Console;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;global using E = System.Environment;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#filescoped-namespace-declaration"&gt;
  &lt;/a&gt;
  🏅 File-scoped namespace declaration
&lt;/h2&gt;

&lt;p&gt;You can now use &lt;strong&gt;the new namespace declaration&lt;/strong&gt; form to declare that all subsequently declared declarations are members of the declared namespace 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;NamespaceName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before it was like this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;NamespaceName&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This new syntax, which will be implemented in the new version of C# 10, &lt;strong&gt;will save both vertical and horizontal space&lt;/strong&gt; for the most common namespace declarations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-const-endraw-and-interpolated-strings"&gt;
  &lt;/a&gt;
  &lt;code&gt;Const&lt;/code&gt; and interpolated strings
&lt;/h3&gt;

&lt;p&gt;Now, interpolated strings can be assigned to const variables. These interpolated strings &lt;strong&gt;are intuitive to read and use&lt;/strong&gt;. They should be usable everywhere. They can now be used with const as long as the placeholder values are also const.&lt;/p&gt;

&lt;p&gt;Let’s look at the &lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-6-release-candidate-2/"&gt;Microsoft example&lt;/a&gt; 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Bar&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Bar"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;DoubleBar&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;_&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DoubleBar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#extended-property-patterns"&gt;
  &lt;/a&gt;
  ⚡ Extended property patterns
&lt;/h2&gt;

&lt;p&gt;Right now, within a property pattern, you can reference nested fields. The best example (before) to understand it is this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Prop1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Prop2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now it can be done perfectly well like this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Prop1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Prop2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see this more compact form used in the following example by Microsoft taken from &lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-6-release-candidate-2/"&gt;RC 2 of .NET 6&lt;/a&gt;, for example with &lt;code&gt;Reading.PM25&lt;/code&gt; 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;statuses&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;    
  &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Normal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;    
  &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Warning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;    
  &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Danger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;    
  &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Danger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;statuses&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;    
  &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="k"&gt;switch&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Normal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"Let the good times roll"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Warning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Reading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PM25&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="s"&gt;"Check the air filters"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Reading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PM25&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"There must be a fire somewhere.
&lt;/span&gt;    &lt;span class="n"&gt;Don&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;outside&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s"&gt;",
&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Reading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SmokeDetected&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"We have a fire!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Danger&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"Something is badly wrong"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"Unknown status"&lt;/span&gt;   
  &lt;span class="p"&gt;};&lt;/span&gt;     
  &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Reading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Temperature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;SmokeDetected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;PM25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Category&lt;/span&gt; &lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Reading&lt;/span&gt; &lt;span class="n"&gt;Reading&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;Category&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;    
  &lt;span class="n"&gt;Normal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;Warning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;Danger&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#net-6-conclusion"&gt;
  &lt;/a&gt;
  ✅ .NET 6 Conclusion
&lt;/h2&gt;

&lt;p&gt;The new features of .NET 6 are many, most of them have not been fully exploited (even though this is already the RC 2 Preview) and we will have to wait for Microsoft to talk about them in depth in the not too distant future as we are a couple of weeks away from the &lt;strong&gt;official release&lt;/strong&gt; in &lt;strong&gt;November.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Microsoft says:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“It’s inspiring to see the new features in .NET 6 that will lay the foundation for what’s coming next. These are big-bet features that will push the platform forward in both obvious and non-obvious ways.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you liked this article, don’t forget to FOLLOW US, so that you can be &lt;strong&gt;one of the first&lt;/strong&gt; to read what’s new in .NET.&lt;/p&gt;

&lt;p&gt;And if you are reading this, it means that you belong to the &lt;strong&gt;1% of the people&lt;/strong&gt; who read the articles UNTIL THE END, tell me how many coffees ☕ you need per day to continue programming, if I see many coffees ☕ I will not feel alone and &lt;strong&gt;you will make my day!!&lt;/strong&gt;! 😃👍&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>netcore</category>
      <category>csharp</category>
      <category>dotnet6</category>
    </item>
    <item>
      <title>⚡️ Free Next.js responsive landing page template for SaaS products made using JAMStack architecture.</title>
      <author>Bartłomiej Stefański</author>
      <pubDate>Mon, 18 Oct 2021 14:11:59 +0000</pubDate>
      <link>https://dev.to/bmstefanski/free-nextjs-responsive-landing-page-template-for-saas-products-made-using-jamstack-architecture-3dd3</link>
      <guid>https://dev.to/bmstefanski/free-nextjs-responsive-landing-page-template-for-saas-products-made-using-jamstack-architecture-3dd3</guid>
      <description>&lt;p&gt;✨ Free Next.js marketing website template for SaaS startups ✨&lt;/p&gt;

&lt;p&gt;Everything you need to build a &lt;strong&gt;great landing page&lt;/strong&gt; / marketing website for your startup. Great SEO metrics, Green WebVitals, 🚀 Performance, Clean &amp;amp; Pragmatic Codebase out of the box.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  🤩 Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;⚡ &lt;strong&gt;Next.js&lt;/strong&gt; - React framework for static rendering&lt;/li&gt;
&lt;li&gt;🤩 &lt;strong&gt;Best SEO setup&lt;/strong&gt; - Meta Tags, JSON-LD and Open Graph Tags&lt;/li&gt;
&lt;li&gt;✅ &lt;strong&gt;Optimized for Web Vitals&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;📜 &lt;strong&gt;Blog with MDX&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;📫 &lt;strong&gt;Mailchimp Integration&lt;/strong&gt; - for newsletters&lt;/li&gt;
&lt;li&gt;🗳 &lt;strong&gt;Sendgrid Integration&lt;/strong&gt; - for sending emails&lt;/li&gt;
&lt;li&gt;🌃 &lt;strong&gt;Dark mode&lt;/strong&gt; - and customizable themes!&lt;/li&gt;
&lt;li&gt;🧽 &lt;strong&gt;No UI library&lt;/strong&gt; - just styled components, so you don't have to learn any new syntax&lt;/li&gt;
&lt;li&gt;🖱 &lt;strong&gt;One click deployment&lt;/strong&gt; - with Vercel or any other serverless deployment environment&lt;/li&gt;
&lt;li&gt;🔍 &lt;strong&gt;Eslint&lt;/strong&gt; - with Next.js's recommended settings and imports sorting rule&lt;/li&gt;
&lt;li&gt;🕯 &lt;strong&gt;Prettier&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/Blazity/next-saas-starter"&gt;&lt;br&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RXUCAOPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/lHdWWLN.png"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Checkout the source code &lt;a href="https://github.com/Blazity/next-saas-starter"&gt;https://github.com/Blazity/next-saas-starter&lt;/a&gt; (stars are greatly appreciated :D).&lt;br&gt;
It contains far more pages and components than the ones showed on homepage, so please checkout other pages too :D&lt;/p&gt;

&lt;p&gt;Features: &lt;a href="https://next-saas-starter-ashy.vercel.app/features"&gt;https://next-saas-starter-ashy.vercel.app/features&lt;/a&gt;&lt;br&gt;
Pricing: &lt;a href="https://next-saas-starter-ashy.vercel.app/pricing"&gt;https://next-saas-starter-ashy.vercel.app/pricing&lt;/a&gt;&lt;br&gt;
Contact: &lt;a href="https://next-saas-starter-ashy.vercel.app/contact"&gt;https://next-saas-starter-ashy.vercel.app/contact&lt;/a&gt;&lt;br&gt;
Privacy policy: &lt;a href="https://next-saas-starter-ashy.vercel.app/privacy-policy"&gt;https://next-saas-starter-ashy.vercel.app/privacy-policy&lt;/a&gt;&lt;br&gt;
Blog index: &lt;a href="https://next-saas-starter-ashy.vercel.app/blog"&gt;https://next-saas-starter-ashy.vercel.app/blog&lt;/a&gt;&lt;br&gt;
Blog post: &lt;a href="https://next-saas-starter-ashy.vercel.app/blog/test-article-2"&gt;https://next-saas-starter-ashy.vercel.app/blog/test-article-2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(and try clicking &lt;code&gt;Sign up&lt;/code&gt; button :D)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#built-with"&gt;
  &lt;/a&gt;
  🧰 Built With
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Statically generated pages with &lt;a href="https://github.com/vercel/next.js"&gt;&lt;strong&gt;Next.js&lt;/strong&gt; &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/styled-components/styled-components/"&gt;Styled components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mdx-js/mdx"&gt;MDX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Microsoft/TypeScript"&gt;TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>nextjs</category>
      <category>jamstack</category>
    </item>
    <item>
      <title>Créer un backend en Javascript (partie 7) : Les Events et les Streams</title>
      <author> Eric Le Codeur</author>
      <pubDate>Mon, 18 Oct 2021 14:11:10 +0000</pubDate>
      <link>https://dev.to/ericlecodeur/creer-un-backend-en-javascript-partie-7-les-events-et-les-streams-1i56</link>
      <guid>https://dev.to/ericlecodeur/creer-un-backend-en-javascript-partie-7-les-events-et-les-streams-1i56</guid>
      <description>&lt;p&gt;Voici une série d'articles qui vous permettra créer des applications backend en Javascript.&lt;/p&gt;

&lt;p&gt;Node.js est aujourd'hui un incontournable, il est donc essentiel pour un développeur de le maitriser.&lt;/p&gt;

&lt;p&gt;Je vais donc publier un nouvel article environ au deux jours et petit à petit vous apprendrez tout ce qu'il y a à savoir sur Node.js&lt;/p&gt;

&lt;p&gt;Pour ne rien manquer suivez moi sur twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;https://twitter.com/EricLeCodeur&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#les-events"&gt;
  &lt;/a&gt;
  Les Events
&lt;/h2&gt;

&lt;p&gt;Une grande partie du noyau Node.js est construite autour d'une architecture asynchrone idiomatique axée sur les événements dans laquelle certains types d'objets (appelés « emitters ») émettent des événements qui provoquent l'appel de fonction « listeners ».&lt;/p&gt;

&lt;p&gt;L'exemple suivant montre un EventEmitter simple avec un seul "listener" qui se produit lorsque, par exemple, une vente est effectuée&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;events&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;myEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;newSale&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A new sale occur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;myEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;newSale&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La méthode eventEmitter.on() est utilisée pour enregistrer les "listeners", tandis que la méthode eventEmitter.emit() est utilisée pour déclencher l'événement.&lt;/p&gt;

&lt;p&gt;Lorsque l'événement est déclenché, le contenu de la callback fonction sera exécuté&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A new sale occur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#passer-des-arguments-aux-listeners"&gt;
  &lt;/a&gt;
  Passer des arguments aux "listeners"
&lt;/h3&gt;

&lt;p&gt;La méthode eventEmitter.emit() permet à un ensemble arbitraire d'arguments d'être transmis aux fonctions "listeners"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;events&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;myEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;newSale&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`A new sale occur total of: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;myEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;newSale&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;599.99&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#nodejs-server-travail-avec-un-eventemitter"&gt;
  &lt;/a&gt;
  Node.js server travail avec un eventEmitter
&lt;/h3&gt;

&lt;p&gt;Maintenant que nous connaissons les événements Node.js. Nous sommes en mesure de mieux comprendre la logique de l'objet serveur Node.js.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// Crétion d'un événment appelé "request"&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Exécuter ce code lorsque le event "request" sera déclenché&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Request received&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// this will loop and wait for events&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;127.0.0.1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Waiting for request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#les-streams"&gt;
  &lt;/a&gt;
  Les Streams
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#questce-que-sont-les-streams-"&gt;
  &lt;/a&gt;
  Qu'est-ce que sont les Streams ?
&lt;/h3&gt;

&lt;p&gt;Les Streams sont utilisés pour traiter (lire et écrire) des données morceau par morceau (chunks) sans terminer l'ensemble de l'opération de lecture et d'écriture et également sans conserver toutes les données en mémoire.&lt;/p&gt;

&lt;p&gt;Youtube ou Netflix sont de bons exemples de Streams. Vous n'avez pas besoin d'attendre le chargement complet de la vidéo. Le processus se fait pièce par pièce (chunks). Vous pouvez donc commencer à regarder le média même si le fichier entier n'est pas encore téléchargé&lt;/p&gt;

&lt;p&gt;Dans Node.js, il exisxte des Streams "readable" et des Streams "writable. Les Readable Streams peuvent par exemple être un fichier lu ou une requête http de données.&lt;/p&gt;

&lt;p&gt;Writable Streams est l'opposé des Readable Streams donc par exemple une réponse http ou un fichier à envoyer&lt;/p&gt;

&lt;p&gt;Voici un exemple de lecture d'un fichier de données volumineux.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// No need to load the entire file to memory&lt;/span&gt;
    &lt;span class="c1"&gt;// fs.readFile('data.txt', (err, data) =&amp;gt; {&lt;/span&gt;
    &lt;span class="c1"&gt;//    if (err) console.log(err)&lt;/span&gt;
    &lt;span class="c1"&gt;//    res.end(data);&lt;/span&gt;
    &lt;span class="c1"&gt;// })&lt;/span&gt;

    &lt;span class="c1"&gt;// Create a Readable Streams&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;readable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createReadStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// Pipe the Stream chunk to a writable Stream&lt;/span&gt;
    &lt;span class="nx"&gt;readable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La méthode readable.pipe() attache un Stream "writeable" au "readable", ce qui le fait basculer automatiquement en mode fluide et transfère toutes ses données vers le "writable" attaché. Le flux de données sera automatiquement géré afin que le Stream "writable" de destination ne soit pas submergé par un Stream "readable" plus rapide.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;C'est tout pour aujourd'hui, suivez moi sur twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;https://twitter.com/EricLeCodeur&lt;/a&gt; afin d'être avisé de la parution du prochain article (d'ici deux jours).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>express</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Array.prototype.slice() vs Array.prototype.splice()</title>
      <author>Eshwarben</author>
      <pubDate>Mon, 18 Oct 2021 14:10:02 +0000</pubDate>
      <link>https://dev.to/eshwarben/arrayprototypeslice-vs-arrayprototypesplice-2b9g</link>
      <guid>https://dev.to/eshwarben/arrayprototypeslice-vs-arrayprototypesplice-2b9g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction-of-javascript-array-slice-vs-array-splice"&gt;
  &lt;/a&gt;
  Introduction of JavaScript Array Slice Vs Array Splice:
&lt;/h2&gt;

&lt;p&gt;In this article, we will briefly discuss array slice method and array splice methods in Javascript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-array"&gt;
  &lt;/a&gt;
  What is array?
&lt;/h3&gt;

&lt;p&gt;An array is used to store a collection of data with similar data types.&lt;br&gt;
(or) &lt;br&gt;
In simple terms it can be defined as a group of elements having the same data type.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-array-slice-in-javascript"&gt;
  &lt;/a&gt;
  What is Array Slice in javascript?
&lt;/h3&gt;

&lt;p&gt;An array slice is a method of slicing the given array to obtain part of the array  as a new array.&lt;br&gt;
In Javascript, there is a method known as the slice() method for selecting part of the given elements and return as a new array without changing the original array.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qrClwXc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3f85du8iy5x2xk4ki5v.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qrClwXc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3f85du8iy5x2xk4ki5v.JPG" alt="arr.slice(start, end)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; &lt;strong&gt;start:&lt;/strong&gt; This argument is used to define the index of an array from where the function should start selecting the elements from the array.
&lt;em&gt;This parameter is optional&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;end:&lt;/strong&gt; This argument is used to define the index of an array at where the function should stop extracting the elements from the array. 
&lt;em&gt;This parameter is also optional&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Picture to describe array slice method&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vtypJRzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67bm5rwdwx5g50b9p4am.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vtypJRzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67bm5rwdwx5g50b9p4am.jpg" alt="slice method picture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#working-of-array-slice-method-with-examples"&gt;
  &lt;/a&gt;
  Working of Array slice() Method with Examples:
&lt;/h3&gt;

&lt;p&gt;In this section, we will see how the slice() method works on array in javascript.&lt;br&gt;
for example: let us take a variable and pass an array of five values "joe", "Rahul", "Carolyn", "Mike" and "Raj" to it. The array values are  stored in  index as shown below;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k__VTq6z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk2jkvzlasro3ap3xxvt.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k__VTq6z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk2jkvzlasro3ap3xxvt.JPG" alt="index values"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q: Now we want to slice out two values from the above array namely Rahul and Carolyn and we want to put those into a new array?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;for this, we have a function named "slice(start, end)". Now we have to pass two parameters in this i.e., Starting index and end index.&lt;br&gt;
As we want Rahul and Carolyn values into new array, then we will write take the index of 1 and 3(i.e., slice(1,3)).&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt;  We should give the end parameter 3 instead of 2 to get Carolyn value its because we want the upto 3 values but not 3rd value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NObbEpcE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0cvzibagvtcmcqel3bap.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NObbEpcE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0cvzibagvtcmcqel3bap.JPG" alt="image for above"&gt;&lt;/a&gt; &lt;strong&gt;Output:&lt;/strong&gt;  [ 'Rahul', 'Carolyn' ] &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 2&lt;/strong&gt;&lt;br&gt;
 &lt;strong&gt;what if i don't give the end parameter?&lt;/strong&gt; &lt;br&gt;
let's see below;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a7JBqD6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0fzjnucwjlx8pyqa1e4x.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a7JBqD6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0fzjnucwjlx8pyqa1e4x.JPG" alt="passing diff parameter"&gt;&lt;/a&gt; &lt;strong&gt;Output:&lt;/strong&gt;  [ 'Rahul', 'Carolyn', 'Mike', 'Raj' ]&lt;/p&gt;

&lt;p&gt;It means it give all the values starting from 1 to all the remaining values in to a new array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 3&lt;/strong&gt;&lt;br&gt;
 &lt;strong&gt;What if we pass some negative value to that function?&lt;/strong&gt; &lt;br&gt;
 lets see below;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rrXsBUNh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1xco6plwo0oui0gg77n.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rrXsBUNh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1xco6plwo0oui0gg77n.JPG" alt="passing diff para"&gt;&lt;/a&gt; &lt;strong&gt;Output:&lt;/strong&gt; [ 'Mike', 'Raj' ]&lt;/p&gt;

&lt;p&gt;Its because the whole index of arrays will become &lt;strong&gt;reverse&lt;/strong&gt; and will start from -1 as shown in below picture;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m_h6O8GK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kcvnm4y39wpbzzar5xuq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m_h6O8GK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kcvnm4y39wpbzzar5xuq.jpg" alt="Picture to explain indetail"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h3&gt;

&lt;p&gt;We conclude that the array slice() method is mainly used for slicing of elements of the given array. In this article, we saw what is syntax of slice and its parameters with its working examples. The slice() method has two parameters and both are optional. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#there-is-a-situation-where-we-have-to-put-two-new-values-somewhere-in-the-middle-of-the-same-array-or-delete-any-value-in-the-array-in-order-to-tackle-this-problem-we-have-a-function-called-array-splice"&gt;
  &lt;/a&gt;
  There is a situation where we have to put two new values somewhere in the middle of the same array or delete any value in the array? In order to tackle this problem we have a function called  &lt;strong&gt;"array splice()"&lt;/strong&gt;.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To put the new values in starting of the array or ending of the array, we already have functions like &lt;strong&gt;Push&lt;/strong&gt; and &lt;strong&gt;Unshift&lt;/strong&gt;.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-we-will-learn-about-arraysplice-method-in-javascript"&gt;
  &lt;/a&gt;
  Now we will learn about Array.splice() Method in Javascript:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-array-splice-in-javascript"&gt;
  &lt;/a&gt;
  What is Array Splice in javascript?
&lt;/h3&gt;

&lt;p&gt;Splice array in Javascript is a method that adds and removes items or data to or from the array. it's a method which changes the content by adding the new elements or removing the old once from an array.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PeDZ2Ex0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/os1376eijabi62ie2l39.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PeDZ2Ex0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/os1376eijabi62ie2l39.JPG" alt="syntax"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Index:&lt;/strong&gt; 
Index is an integer value which addresses on what position element need to be added or from which position element is to be removed.
&lt;em&gt;It is required every time in splice array&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;howmany:&lt;/strong&gt;
Howmany indicates how many items should be removed from the array. If it is set to zero than no element will be removed.
&lt;em&gt;Howmany is optional parameter value&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;New value&lt;/strong&gt;
This parameter indicates new value to be added in the array. 
&lt;em&gt;It is also an optional parameter&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Start:&lt;/strong&gt;
Index/start performs same function.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Delete:&lt;/strong&gt; 
Delete also performs similar fuction kust like howmany in the below syntax i.e., how many items to be removed from the array.
&lt;em&gt;It is Optional parameter value&lt;/em&gt;
### Working of Array slice() Method with Examples:
Let us consider a variable of three array values "Joe", "Rahul" and "raj".&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example 1&lt;/strong&gt;&lt;br&gt;
Add "Carolyn" and "mike" after "Rahul" and before joe?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hVjyhGsX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7m1iusldijx2k6c9q66g.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hVjyhGsX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7m1iusldijx2k6c9q66g.JPG" alt="input"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
[ 'joe', 'Rahul', 'Carolyn', 'Mike', 'Raj' ]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 2&lt;/strong&gt;&lt;br&gt;
remove "Raj" and add "Carolyn" and "mike"?&lt;br&gt;
&lt;strong&gt;Input:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hfaPSN5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgeylzkkr4ewcsxubd8d.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hfaPSN5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgeylzkkr4ewcsxubd8d.JPG" alt="Input"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
[ 'joe', 'Rahul', 'Carolyn', 'Mike' ]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 3&lt;/strong&gt;&lt;br&gt;
Pass the negative value  to add  two values and also delete "Rahul"?&lt;br&gt;
&lt;strong&gt;Input:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b_HuTirW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63aa0p6iw5rxw3zki7xs.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b_HuTirW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63aa0p6iw5rxw3zki7xs.JPG" alt="Input"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
[ 'joe', 'Carolyn', 'Mike', 'Raj' ]&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h3&gt;

&lt;p&gt;We conclude that the array splice() changes the contents of an array by  removing or replacing existing elements and/or adding new elements in place. In this article, we saw what is syntax of splice and its parameters with its working examples. The splice() method has three parameters and two parameters are optional. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overall-final-conclusion-between-arrayprototypeslice-vs-arrayprototypesplice-is"&gt;
  &lt;/a&gt;
  Overall Final Conclusion between Array.prototype.slice() vs Array.prototype.splice() is:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Slice&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Does not Changes the content of original array&lt;/li&gt;
&lt;li&gt;Returns new copy array&lt;/li&gt;
&lt;li&gt;Non-destructive function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Splice&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Changes the content&lt;/li&gt;
&lt;li&gt;mutates&lt;/li&gt;
&lt;li&gt;No new array&lt;/li&gt;
&lt;li&gt;Destructive function&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#reference-and-recommended-video-for-more-detailed-information"&gt;
  &lt;/a&gt;
  Reference and  Recommended video for more detailed information:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Most recommended video of Steve's&lt;/strong&gt;&lt;br&gt;
&lt;a href="http://www.youtube.com/watch?v=u1ZCQfXQprE"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hEl-5Tf0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://img.youtube.com/vi/u1ZCQfXQprE/0.jpg" alt="Steve video"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Getting Started with Blast – Storybook for Laravel Blade</title>
      <author>Tim Brook</author>
      <pubDate>Mon, 18 Oct 2021 14:08:33 +0000</pubDate>
      <link>https://dev.to/area17/getting-started-with-blast-storybook-for-laravel-blade-c5c</link>
      <guid>https://dev.to/area17/getting-started-with-blast-storybook-for-laravel-blade-c5c</guid>
      <description>&lt;p&gt;In this guide we'll show you how to set up a component library within your Laravel app using &lt;a href="https://github.com/area17/blast"&gt;Blast&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-of-all-what-is-blast"&gt;
  &lt;/a&gt;
  First of all, what is Blast?
&lt;/h2&gt;

&lt;p&gt;At AREA 17, we've been using &lt;a href="https://storybook.js.org/"&gt;Storybook&lt;/a&gt; for many years with both &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt; and &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; and we love it, but our core technology is &lt;a href="https://laravel.com/"&gt;Laravel&lt;/a&gt;, and we want to be able to work with Storybook in that environment too. We've been able to in the past using the Twig loader, but our heart is closer to Blade. When Quentin, our Engineering Group Director, realized Storybook Server was a thing, and what the &lt;a href="https://orbit.love/blog/building-a-component-library-in-rails-with-storybook"&gt;Rails community was able to do with it&lt;/a&gt;, he started to dream big and threw a quick prototype at it. We then worked together to make that prototype a reality and it became &lt;strong&gt;&lt;a href="https://github.com/area17/blast"&gt;Blast – Storybook for Laravel Blade&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Blast is a Laravel package which allows you render examples of your app's components using the Blade templating engine and Storybook Server within your Laravel application. It's designed to be low maintenance and simple to set up whilst offering a solid set of features and customizations. Blast can be used with new or existing Laravel projects - we timed it and it took less than 90s to install into an existing project and have our first component rendering in Storybook!&lt;/p&gt;

&lt;p&gt;It comes with a lot of the tools we use at AREA 17 like the Controls, Accessibility testing and Design tabs as well as statuses and a page component for more global things like documentation.&lt;/p&gt;

&lt;p&gt;Now that the introduction is over, let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;You can get started by installing Blast using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require area17/blast
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a &lt;code&gt;stories&lt;/code&gt; and a &lt;code&gt;data&lt;/code&gt; directory for your story Blade files and any associated data&lt;/li&gt;
&lt;li&gt;Publish assets used by Blast to the application's public directory&lt;/li&gt;
&lt;li&gt;Create a route from which to load your component examples&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Blast ships with 4 tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;blast:launch&lt;/code&gt; - installs all dependencies, generates stories, watches directories and fires up Storybook Server&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;blast:generate-stories&lt;/code&gt; - can be used to regenerate the stories.json files for each component outside of the &lt;code&gt;blast:launch&lt;/code&gt; task&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;blast:demo&lt;/code&gt; - creates a demo button component to help get you started&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;blast:publish&lt;/code&gt; - generates a static Storybook instance and publishes it to your application's public directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More information can be found about those tasks in the &lt;a href="https://github.com/area17/blast#readme"&gt;official documentation&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-stories"&gt;
  &lt;/a&gt;
  Creating Stories
&lt;/h2&gt;

&lt;p&gt;Once you've installed Blast you can launch it by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan blast:launch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For this demo we'll create a basic button component and stories.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup-components"&gt;
  &lt;/a&gt;
  Setup Components
&lt;/h3&gt;

&lt;p&gt;For this guide we're going to need some basic components. We're going to need a &lt;code&gt;button&lt;/code&gt;, &lt;code&gt;button-box&lt;/code&gt; and some icons. You can find everything you'll need &lt;a href="https://github.com/mrtimbrook/blast-guide-components"&gt;in this repo&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;When you're done, your &lt;code&gt;components&lt;/code&gt; directory should now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;resources/views/components/
├── button/
│   └── primary.blade.php
├── button-box/
│   └── primary.blade.php
└── icon/
    ├── help-24.blade.php
    ├── menu-24.blade.php
    └── plus-24.blade.php
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-a-story"&gt;
  &lt;/a&gt;
  Create a Story
&lt;/h3&gt;

&lt;p&gt;Time to create your first story! When initially launching Blast, it created the directories to store your story blade files in &lt;code&gt;resources/views/stories&lt;/code&gt; so, inside that directory, create &lt;code&gt;button/primary.blade.php&lt;/code&gt; containing the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;x-button.primary&amp;gt;&lt;/span&gt;
    Primary Button
&lt;span class="nt"&gt;&amp;lt;/x-button.primary&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hit save and Blast will automatically generate the stories for the component and reload storybook in your browser. Go check it out. Pretty cool huh? Maybe, but it's fairly basic and doesn't show what our button is capable of.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-args"&gt;
  &lt;/a&gt;
  Adding args
&lt;/h3&gt;

&lt;p&gt;Let's create some Storybook controls to set the button label, icon and icon position.&lt;/p&gt;

&lt;p&gt;Blast uses a &lt;code&gt;@storybook&lt;/code&gt; directive to customize your story. You can read more about the options in the &lt;a href="https://github.com/area17/blast#readme"&gt;Blast docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enter the following at the top of your &lt;code&gt;stories/button/primary.blade.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;storybook&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;'args'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'label'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Button'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'href'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'icon'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'menu-24'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'iconPosition'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'after'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Everything within the &lt;code&gt;args&lt;/code&gt; array becomes a variable that you can reference within the same story blade file.&lt;/p&gt;

&lt;p&gt;Update the component beneath the &lt;code&gt;@storybook&lt;/code&gt; directive with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;x-button.primary&lt;/span&gt;
    &lt;span class="na"&gt;:href=&lt;/span&gt;&lt;span class="s"&gt;"$href ?? null"&lt;/span&gt;
    &lt;span class="na"&gt;:icon=&lt;/span&gt;&lt;span class="s"&gt;"$icon ?? null"&lt;/span&gt;
    &lt;span class="na"&gt;:iconPosition=&lt;/span&gt;&lt;span class="s"&gt;"$iconPosition ?? null"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ $label ?? null }}
&lt;span class="nt"&gt;&amp;lt;/x-button.primary&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Blast will automatically regenerate the story and reload Storybook. The 'Controls' panel beneath your component will now contain text fields to edit all of the &lt;code&gt;args&lt;/code&gt; and update the component view.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introducing-raw-argtypes-endraw-"&gt;
  &lt;/a&gt;
  Introducing &lt;code&gt;argTypes&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Being able to edit some of the fields with a text field is great, but using a text field for things like icons or the icon position is a bit of a pain so let's fix that by setting some &lt;code&gt;argTypes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;argTypes&lt;/code&gt; allow us to further configure the control for each of the &lt;code&gt;args&lt;/code&gt;. You can read more about &lt;code&gt;argTypes&lt;/code&gt; and the available options in the &lt;a href="https://storybook.js.org/docs/react/essentials/controls"&gt;official Storybook docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Update the &lt;code&gt;@storybook&lt;/code&gt; in your &lt;code&gt;primary.blade.php&lt;/code&gt; to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;storybook&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;'args'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'label'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Button'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'href'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'icon'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'menu-24'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'iconPosition'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'after'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;'argTypes'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'iconPosition'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'options'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'before'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'after'&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'control'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'radio'&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s1"&gt;'icon'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'options'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'help-24'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'menu-24'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'plus-24'&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'control'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'select'&lt;/span&gt;

            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will update the &lt;code&gt;iconPosition&lt;/code&gt; fild to use &lt;code&gt;radio&lt;/code&gt; buttons for the 'before' and 'after' options as well as updating the &lt;code&gt;icon&lt;/code&gt; field to use a &lt;code&gt;select&lt;/code&gt;. Much better!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rename-the-story"&gt;
  &lt;/a&gt;
  Rename the story
&lt;/h3&gt;

&lt;p&gt;Blast uses the filename to create the story name. This could be fine for most of our components but sometimes we want to give our story a more descriptive name.&lt;/p&gt;

&lt;p&gt;We can do that with the &lt;code&gt;name&lt;/code&gt; parameter in our &lt;code&gt;@storybook&lt;/code&gt; directive.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;storybook&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Button with Icon'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mf"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Storybook should now be showing the updated name in the sidebar.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-a-status"&gt;
  &lt;/a&gt;
  Setting a status
&lt;/h3&gt;

&lt;p&gt;Blast ships with the &lt;a href="https://storybook.js.org/addons/@etchteam/storybook-addon-status"&gt;Status Addon&lt;/a&gt; by Etch. This allows you to add custom status indicators to each component in the sidebar and above the story canvas area. The predefined statuses are &lt;code&gt;deprecated&lt;/code&gt;, &lt;code&gt;wip&lt;/code&gt;, &lt;code&gt;readyForQA&lt;/code&gt; and &lt;code&gt;stable&lt;/code&gt;. These can be edited/removed in &lt;code&gt;config/blast.php&lt;/code&gt;. You can read more about customizing the statues in the &lt;a href="https://github.com/area17/blast#readme"&gt;Blast docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's flag that our button component has passed QA and is ready for use by setting the status to &lt;code&gt;stable&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;storybook&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;'status'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'stable'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mf"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Storybook will now be showing a green status indicator in the sidebar and a green tag above the canvas area.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-a-figma-design"&gt;
  &lt;/a&gt;
  Adding a Figma Design
&lt;/h3&gt;

&lt;p&gt;Blast also installs the &lt;a href="https://storybook.js.org/addons/storybook-addon-designs"&gt;design addon&lt;/a&gt; to allow you to embed Figma designs into your stories.&lt;/p&gt;

&lt;p&gt;To embed a design, copy the URL from Figma or use the URL below and update your &lt;code&gt;@storybook&lt;/code&gt; directive with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;storybook&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;'design'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'https://www.figma.com/file/z3UTaD2Lt7d92J3n7fHKWI/Blast-Guide-Components?node-id=1%3A2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mf"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Blast will regenerate the story and reload Storybook. The 'Design' tab beneath your component should now be showing the button design directly within Storybook.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-presets"&gt;
  &lt;/a&gt;
  Using Presets
&lt;/h3&gt;

&lt;p&gt;Sometimes it may be helpful for components to share data. You may have a number of different button components which all have the same props so instead of repeating all of the &lt;code&gt;args&lt;/code&gt; and &lt;code&gt;argsTypes&lt;/code&gt; data across all of those, and having to update all of them individually when, for example, you add an icon, we can manage this in a what Blast calls a 'preset'.&lt;/p&gt;

&lt;p&gt;Blast allows you to create data presets to use in your stories. You can preset any of the options available in the &lt;code&gt;@storybook&lt;/code&gt; directive and they will be merged with any &lt;code&gt;args&lt;/code&gt; set directly in your story blade file. Presets allow you to write detailed stories faster and with more consistency.&lt;/p&gt;

&lt;p&gt;You may have noticed a &lt;code&gt;data&lt;/code&gt; directory was created when you initially launched Blast. Let's create a &lt;code&gt;button.php&lt;/code&gt; file in the &lt;code&gt;data&lt;/code&gt; directory which contains:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'base'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'status'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'wip'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'args'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'label'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Button'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'href'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'icon'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'menu-24'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'iconPosition'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'after'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s1"&gt;'argTypes'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'iconPosition'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'options'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="s1"&gt;'before'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'after'&lt;/span&gt;
                &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s1"&gt;'control'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="s1"&gt;'type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'radio'&lt;/span&gt;
                &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'icon'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'options'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="s1"&gt;'help-24'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'menu-24'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'plus-24'&lt;/span&gt;
                &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s1"&gt;'control'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="s1"&gt;'type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'select'&lt;/span&gt;

                &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This creates a preset of all of our button story config for us to use in our story blade files. All of the data in this preset can be overridden within your story. You could now go onto create 'secondary' and 'tertiary' button style without having to write any &lt;code&gt;args&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To use the preset in your story update the &lt;code&gt;@storybook&lt;/code&gt; directive to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;storybook&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;'preset'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'button.base'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Button with Icon'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'status'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'stable'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'design'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'https://www.figma.com/file/z3UTaD2Lt7d92J3n7fHKWI/Blast-Guide-Components?node-id=1%3A2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Presets are referenced using dot notation starting with the filename followed by the indexes in the array within that file.&lt;/p&gt;

&lt;p&gt;Our story should look the same as before, however, the code is a lot simpler. Note that the &lt;code&gt;status&lt;/code&gt; is still showing 'stable' as it has overriden the &lt;code&gt;status&lt;/code&gt; in the preset.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-presetargs-endraw-"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;presetArgs&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Blast also allows you to reuse the &lt;code&gt;args&lt;/code&gt; from the presets when rendering components inside other components. For example, we have a button box component which contains a title and two of our primary button components.&lt;/p&gt;

&lt;p&gt;Create a story blade file for the button box component in &lt;code&gt;resources/views/stories/button-box/primary.blade.php&lt;/code&gt; containing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;storybook&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;'args'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'buttons'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'label'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Button'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'href'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'icon'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'menu-24'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'iconPosition'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'after'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'label'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Button'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'href'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'icon'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'menu-24'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'iconPosition'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'after'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primary&lt;/span&gt;
    &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$title&lt;/span&gt;&lt;span class="s2"&gt; ?? null"&lt;/span&gt;
    &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;buttons&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$buttons&lt;/span&gt;&lt;span class="s2"&gt; ?? null"&lt;/span&gt;
&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This works fine, however if we have a lot of duplicated code and should we ever change a prop on the button component, we would also need to update it here.&lt;/p&gt;

&lt;p&gt;We can get around this by using &lt;code&gt;presetArgs&lt;/code&gt;. &lt;code&gt;presetArgs&lt;/code&gt; tells Blast to go to a &lt;code&gt;preset&lt;/code&gt; and collect all of the &lt;code&gt;args&lt;/code&gt; and associate them with the set key within the component's data. As of Blast 1.1.1, &lt;code&gt;presetArgs&lt;/code&gt; can only be used within a &lt;code&gt;preset&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create a preset for the button box component in &lt;code&gt;resources/views/stories/data/button-box.php&lt;/code&gt; containing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'primary'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'presetArgs'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'buttons'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'button.base'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'button.base'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can go into your &lt;code&gt;button-box/primary.blade.php&lt;/code&gt; story file and remove the &lt;code&gt;buttons&lt;/code&gt; args and set the &lt;code&gt;preset&lt;/code&gt; to &lt;code&gt;button-box.primary&lt;/code&gt;. This will create the &lt;code&gt;buttons&lt;/code&gt; &lt;code&gt;args&lt;/code&gt; data using the preset args we created earlier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;storybook&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;'preset'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'button-box.primary'&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These &lt;code&gt;presetArgs&lt;/code&gt; can still be merged with other &lt;code&gt;args&lt;/code&gt; data in the same way you would with a regular preset. Let's set a title for our button box outside of the preset:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;storybook&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;'preset'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'button-box.primary'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'args'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'title'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Button Box'&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primary&lt;/span&gt;
    &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$title&lt;/span&gt;&lt;span class="s2"&gt; ?? null"&lt;/span&gt;
    &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;buttons&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$buttons&lt;/span&gt;&lt;span class="s2"&gt; ?? null"&lt;/span&gt;
&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h3&gt;

&lt;p&gt;Storybook automatically generates a 'Docs' tab alongside the canvas view of your component which details the component's props but Blast allows you to add to this by creating a &lt;code&gt;README.md&lt;/code&gt; file alongside your component's story blade file.&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;README.md&lt;/code&gt; in your &lt;code&gt;stories/button&lt;/code&gt; directory and write some documentation for your new button component. When you save the file, Blast will regenerate the story and update Storybook. The &lt;code&gt;README&lt;/code&gt; contents will now be visible in the 'Docs' tab of your story.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-raw-docspage-endraw-component"&gt;
  &lt;/a&gt;
  Using the &lt;code&gt;DocsPage&lt;/code&gt; Component
&lt;/h2&gt;

&lt;p&gt;At AREA 17 we use a generic 'page' component to document more global parts of the design system like colors, grid system, typography, etc. Blast ships with a basic &lt;code&gt;DocsPage&lt;/code&gt; component to allow you to do the same.&lt;/p&gt;

&lt;p&gt;We'll use one to create an introduction page for the components in our guide.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;introduction.blade.php&lt;/code&gt; in the root of your &lt;code&gt;stories&lt;/code&gt; directory and add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;storybook&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;'layout'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'fullscreen'&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;docs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Blast 🚀"&lt;/span&gt;
    &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"About"&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Storybook for Laravel Blade"&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt; &lt;span class="nc"&gt;Str&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"# Introduction

This is the `DocsPage` component. You can put whatever you like into the main slot and it will render in the center column of the page. It also has 3 props - `title`, `label` and `description` - to fill out the content in the component header.

Be sure to set `layout` to `fullscreen` so it all renders correctly in the Storybook UI.
"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;docs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a new story containing a fullscreen 'page' layout. You can use the &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;label&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; props to update the header content, and the component's main slot to update the body content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generating-a-static-storybook-app-with-blast"&gt;
  &lt;/a&gt;
  Generating a Static Storybook app with Blast
&lt;/h2&gt;

&lt;p&gt;Everything we've just created is working great in dev but now we want to build a static version of our Storybook app to deploy on our server. We can do this by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan blast:publish
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This task runs &lt;a href="https://storybook.js.org/docs/react/workflows/publish-storybook"&gt;Storybook's &lt;code&gt;build-storybook&lt;/code&gt; command&lt;/a&gt; and publishes the generated storybook app to your public folder to allow it to be deployed alongside your application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automated-accessibility-testing"&gt;
  &lt;/a&gt;
  Automated Accessibility Testing
&lt;/h2&gt;

&lt;p&gt;Blast uses the &lt;a href="https://storybook.js.org/addons/@storybook/addon-a11y"&gt;Storybook Accessibility addon&lt;/a&gt; to automatically test your components from within Storybook using &lt;a href="https://www.deque.com/axe/"&gt;Axe&lt;/a&gt;. It lists passed, failing and incomplete tests and allows you to highlight the elements in your components relating to each test as well as a full description of the test as well as reasons why it failed and the standard the test falls under.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#customization"&gt;
  &lt;/a&gt;
  Customization
&lt;/h2&gt;

&lt;p&gt;Storybook's UI looks great out of the box but sometimes we want to add our own branding to it. Blast allows you to complete control over the Storybook UI via the &lt;code&gt;storybook_theme&lt;/code&gt; option in &lt;code&gt;config/blast.php&lt;/code&gt;. You can read more about the theming options in the &lt;a href="https://storybook.js.org/docs/react/configure/theming"&gt;official Storybook documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There we have it. We have created our first component stories in Blast, customized our Storybook UI and published a static Storybook application to our Laravel app.&lt;/p&gt;

&lt;p&gt;We are constantly working on improvements and new features for Blast and please swing by &lt;a href="https://github.com/area17/blast"&gt;our Github&lt;/a&gt; with any ideas or PRs!&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>laravel</category>
      <category>storybook</category>
      <category>blade</category>
    </item>
    <item>
      <title>Forest Admin: Django Admin Alternative</title>
      <author>Monika Ambrozowicz</author>
      <pubDate>Mon, 18 Oct 2021 14:07:14 +0000</pubDate>
      <link>https://dev.to/forestadmin/forest-admin-django-admin-alternative-3olb</link>
      <guid>https://dev.to/forestadmin/forest-admin-django-admin-alternative-3olb</guid>
      <description>&lt;p&gt;Internal tools are the gateway between products and users despite remaining hidden to the latter. Admin panels, dashboards, and other tools allow administrators to solve customer problems, perform various operations, edit and publish content, ensure data security, and much more.&lt;/p&gt;

&lt;p&gt;As they are so important, it shouldn’t come as a surprise that on average, developers spend more than 30% of their time building internal tools, assuming they code everything from scratch. Is it the most efficient way? At Forest Admin we don’t think so as we have witnessed multiple times that an off-the-shelf solution proves to be much more effective. And it’s safe to say that the creators of Django Admin would agree with us, as, quoting the philosophy behind this automatically generated internal tool solution for Django applications:&lt;/p&gt;

&lt;p&gt;Generating admin sites for your staff or clients to add, change, and delete content is tedious work that doesn’t require much creativity. For that reason, Django entirely automates creation of admin interfaces for models.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-django-admin"&gt;
  &lt;/a&gt;
  About Django Admin
&lt;/h2&gt;

&lt;p&gt;Django was created in a newsroom environment at the Lawrence Journal-World newspaper, and giving site managers the ability to add, edit, and manage content in a way that is easy and as much automated as possible was the priority of its creators. That’s why, they equip the high-level Python web framework with a built-in admin interface that allows for basic CRUD operations, authenticating users, handling forms, managing content, and performing other tasks that are typical for admin panels. Once set up, Django Admin can be widely customized but Django doesn’t recommend using it above the basic organization’s internal management system. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#forest-admin-an-alternative-to-django-admin"&gt;
  &lt;/a&gt;
  Forest Admin: An alternative to Django Admin
&lt;/h2&gt;

&lt;p&gt;Django Admin is not the only internal tool solution for applications developed in Django. At Forest Admin, we have recently released a &lt;a href="https://www.forestadmin.com/integrations/django?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=django-admin-alternative&amp;amp;utm_content=django-lp"&gt;Django agent&lt;/a&gt; that joins the growing list of data sources that are compatible with Forest Admin, including Ruby on Rails, Node.js, Stripe, PostgreSQL, MySQL, MongoDB, and Microsoft SQL Server.&lt;/p&gt;

&lt;p&gt;As a quick reminder, Forest Admin’s architecture is based on API. It consists of four components: the database, the admin backend, the Forest Admin API server, and the Forest Admin UI server. Users’ data is only hosted on their end and the user browser, it never transits through Forest Admin servers. That way, you don’t have to choose between the security and convenience of a SaaS tool - you have both.&lt;/p&gt;

&lt;p&gt;To start, you can either generate a Node.js application on your local machine that includes a RESTful API that connects to your database or install Forest Admin using data sources mentioned above, including Django. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ForestAdmin/django-forestadmin"&gt;Check our new open-source Django Agent repository on GitHub&lt;/a&gt; and give it a star ⭐ if you like this new Forest Admin project.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#django-admin-vs-forest-admin"&gt;
  &lt;/a&gt;
  Django Admin vs. Forest Admin
&lt;/h1&gt;

&lt;p&gt;Both Django Admin and Forest Admin can be used as ready-to-use internal tool solutions. Django Admin is automatically generated, and Forest Admin can be easily connected to any application. However, both solutions differ in terms of functionalities, UI, security, and other aspects. Let us have a closer look at them.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technical-aspects"&gt;
  &lt;/a&gt;
  Technical Aspects
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Forest Admin: API-based. The UI fetches the data from an API connected to the data source.&lt;/li&gt;
&lt;li&gt;Django Admin: Server-side rendering application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#saasonpremises"&gt;
  &lt;/a&gt;
  SaaS/On-premises
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Forest Admin: SaaS UI&lt;/li&gt;
&lt;li&gt;Django Admin: On-premises&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#open-source"&gt;
  &lt;/a&gt;
  Open Source
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Forest Admin: Yes&lt;/li&gt;
&lt;li&gt;Django Admin: Yes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Forest Admin: A Django backend application if you want to use the Django agent. For other tech stacks, you either need a database (PostgreSQL, MySQL, MicrosoftSQL, MongoDB) or another natively supported backend technology: Ruby on Rails, Node.js Express/Sequelize and Node.js Express/Mongoose.&lt;/li&gt;
&lt;li&gt;Django Admin: A Django backend application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#onboarding"&gt;
  &lt;/a&gt;
  Onboarding
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Forest Admin: Easy in-app onboarding.&lt;/li&gt;
&lt;li&gt;Django Admin: &lt;a href="https://www.youtube.com/watch?v=W34Xf5P7BAo"&gt;Watch the installation video.&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#layout"&gt;
  &lt;/a&gt;
  Layout:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#visual-builder"&gt;
  &lt;/a&gt;
  Visual Builder:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Forest Admin: Yes, with a robust Layout Editor, a no-code visual builder.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jV6flISn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/10/forest-admin-dashboard-editor-mode-1-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jV6flISn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/10/forest-admin-dashboard-editor-mode-1-.png" alt="Forest Admin UI."&gt;&lt;/a&gt;&lt;br&gt;
Forest Admin UI. &lt;a href="https://app.forestadmin.com/livedemo"&gt;Source: Forest Admin Live Demo.&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Django Admin: No, you need to code the UI customization.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s0UKaD9U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/10/django-admin-users-list.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s0UKaD9U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/10/django-admin-users-list.png" alt="Django Admin UI."&gt;&lt;/a&gt;&lt;br&gt;
The default Django Admin UI. Source: Django Admin documentation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crud-pagination"&gt;
  &lt;/a&gt;
  CRUD + Pagination
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Forest Admin: Out of the box.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ndUefpn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/10/forest-admin-crud-1-.png" alt="Forest Admin UI."&gt;
Forest Admin UI. &lt;a href="https://app.forestadmin.com/livedemo"&gt;Source: Forest Admin Live Demo.&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#search-and-filtering"&gt;
  &lt;/a&gt;
  Search and Filtering
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Forest Admin: Out of the box.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--42b5TIfI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/10/Forest-Admin-Search-1-.png" alt="Forest Admin UI."&gt;
Forest Admin UI. &lt;a href="https://app.forestadmin.com/livedemo"&gt;Source: Forest Admin Live Demo.&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Django Admin: Requires UI definition in your Django application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​​###Segments&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Forest Admin: Out of the box.&lt;/li&gt;
&lt;li&gt;Django Admin: Requires a detailed definition in your Django application using the filters.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#themes"&gt;
  &lt;/a&gt;
  Themes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Forest Admin: Dark and light themes available.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yZ1YTdcX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/10/forest-admin-dark-mode-1-.png" alt="Forest Admin UI."&gt;
The dark mode of the Forest Admin UI. &lt;a href="https://app.forestadmin.com/livedemo"&gt;Source: Forest Admin Live Demo.&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Django Admin: Dark and light themes available, style fully customizable with CSS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#data-connectivity"&gt;
  &lt;/a&gt;
  Data connectivity
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#orms"&gt;
  &lt;/a&gt;
  ORMs
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Forest Admin: Django ORM&lt;/li&gt;
&lt;li&gt;Django Admin: Django ORM&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#saas-api"&gt;
  &lt;/a&gt;
  SaaS API
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Forest Admin: Forest Admin provides native integrations to and it's simple to add more through the Smart Features.&lt;/li&gt;
&lt;li&gt;Django Admin: Requires implementing a "facade" to retrieve and edit the 3rd party data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#permissions"&gt;
  &lt;/a&gt;
  Permissions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Forest Admin: Real RBAC system with Roles and Teams, provided out of the box, configurable in the UI. The API is automatically protected according to the configured permissions. These permissions can then be fully delegated to the Operations Manager or Product Manager. SSO available.&lt;/li&gt;
&lt;li&gt;Django Admin: Django comes with a built-in permissions system. It provides a way to assign permissions to specific users and groups of users. More info available here in the  &lt;a href="https://docs.djangoproject.com/en/3.2/topics/auth/default/#permissions-and-authorization"&gt;Django Admin documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#authentication"&gt;
  &lt;/a&gt;
  Authentication
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Forest Admin: User/Password, Google Login, SAML-based SSO for Organisations.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W03uFxiO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3mleyexrcfutshjkone.png" alt="Forest Admin login page"&gt;
&lt;a href="https://app.forestadmin.com/login?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=django-admin-alternative&amp;amp;utm_content=blog-explorer"&gt;Forest Admin login page&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Django Admin: User/Password.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#twofactor-authentication"&gt;
  &lt;/a&gt;
  Two-factor authentication
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Forest Admin: Enforced 2FA out of the box.&lt;/li&gt;
&lt;li&gt;Django Admin: Not out of the box, probably possible via custom implementation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#auto-logout"&gt;
  &lt;/a&gt;
  Auto Logout
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Forest Admin: Out of the box.&lt;/li&gt;
&lt;li&gt;Django Admin: Not out of the box, probably possible via custom implementation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Forest Admin: &lt;a href="https://docs.forestadmin.com/documentation/?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=django-admin-alternative&amp;amp;utm_content=documentation"&gt;Documentation&lt;/a&gt;, &lt;a href="https://app.forestadmin.com/livedemo"&gt;Live Demo&lt;/a&gt;, &lt;a href="https://github.com/ForestAdmin/django-forestadmin"&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Django Admin: &lt;a href="https://docs.djangoproject.com/en/3.2/"&gt;Documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#when-django-admin-may-be-a-better-fit-for-your-project"&gt;
  &lt;/a&gt;
  When Django Admin may be a better fit for your project
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You have a simple service managed by a small team, and basic CRUD functionalities are all you need. In such a case, Django Admin doesn’t have advantages over Forest Admin but this free open-source solution may just fit your needs. &lt;/li&gt;
&lt;li&gt;You don’t need dashboards or modern and frequently updated UI with WYSIWYG layout editor for non-technical team members. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#when-you-should-choose-forest-admin"&gt;
  &lt;/a&gt;
  When you should choose Forest Admin
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You need a robust internal tool that goes beyond basic CRUD operations and offers advanced functionalities such as an invitation system with transactional emails, multiple layouts for different teams, permissions per custom actions, dynamic forms per custom actions, actions approvals, notes and annotations on records, scoped data based on the user, and more.&lt;/li&gt;
&lt;li&gt;You need a highly secure solution that helps you ensure compliance with regulations like GDPR. You want both user-friendliness of a SaaS product but you can’t compromise security. Forest Admin offers enforced 2FA and the enterprise-grade SSO. Thanks to its unique architecture, users’ data is only hosted on their end and the user browser, it never transits through Forest Admin servers.&lt;/li&gt;
&lt;li&gt;You need a flexible tool that grows with your company and that can be used and managed by thousands of users, also from non-technical teams like sales or customer support that need a user-friendly WYSIWYG editor. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#django-admin-vs-forest-admin-conclusion"&gt;
  &lt;/a&gt;
  Django Admin vs. Forest Admin: Conclusion
&lt;/h2&gt;

&lt;p&gt;Now, you should have learned enough about both solutions in order to make an informed decision. If you feel like you need more time, answering these questions should steer you to the right direction.&lt;/p&gt;

&lt;p&gt;❓ What is the size of my project, and how many people from my team are going to use internal tools?&lt;/p&gt;

&lt;p&gt;❓ Do my team members need a WYSIWYG editor or do all of them have tech skills and time to work on internal tools?&lt;/p&gt;

&lt;p&gt;❓ Do I need basic CRUD operations or more advanced features?&lt;/p&gt;

&lt;p&gt;❓ Will the internal tool scale together with my product and users?&lt;/p&gt;

&lt;p&gt;❓ Can I easily find support and documentation if any issues arise?&lt;/p&gt;

&lt;p&gt;If you decide to give Forest Admin a try, &lt;a href="https://app.forestadmin.com/signup?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=django-admin-alternative&amp;amp;utm_content=blog-explorer"&gt;sign up for free&lt;/a&gt;.  🌲🌲🌲 Please keep in mind that our Django agent is currently in beta and we’ll appreciate your feedback! &lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>adminpanel</category>
      <category>startup</category>
    </item>
    <item>
      <title>Building apps just got Swifter! - Announcing Appwrite v0.11</title>
      <author>Jake Barnby</author>
      <pubDate>Mon, 18 Oct 2021 14:07:08 +0000</pubDate>
      <link>https://dev.to/appwrite/building-apps-just-got-swifter-announcing-appwrite-v011-4g62</link>
      <guid>https://dev.to/appwrite/building-apps-just-got-swifter-announcing-appwrite-v011-4g62</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JqCOXVtY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvairablp1shxzlzvqe9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JqCOXVtY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvairablp1shxzlzvqe9.gif" alt="Apple Platforms"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last month has been &lt;a href="https://github.com/pulls?q=is%3Aopen+is%3Apr+created%3A%3E2021-09-30+org%3Aappwrite+org%3Autopia-php"&gt;a wild one&lt;/a&gt; at the Appwrite community! We've been working tirelessly to bring you some awesome new features with each new version. That said, we're excited to announce our newest release: &lt;strong&gt;Appwrite 0.11&lt;/strong&gt; 🥳 Packed with a ton of cool new features like support for Apple platforms (&lt;strong&gt;iOS, macOS, watchOS and tvOS&lt;/strong&gt;), as well a brand new &lt;strong&gt;Swift Server SDK&lt;/strong&gt;, &lt;strong&gt;a Swift Cloud Function runtime&lt;/strong&gt; and more! &lt;/p&gt;

&lt;p&gt;Let's not forget, this is also an Appwrite release, where our open source contributors have &lt;strong&gt;outnumbered the maintainers! 🤯&lt;/strong&gt; We've merged over 150 PRs from our &lt;a href="https://appwrite.io/hacktoberfest"&gt;contributors during Hacktoberfest&lt;/a&gt;, and still have over 450 PRs waiting to be merged! With all those exciting numbers aside, let's dive right in! 🐳&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Appwrite is an open-source, self-hosted Backend-as-a-Service that aims to make app development &lt;strong&gt;easier&lt;/strong&gt; with SDKs available in a variety of programming languages. Come hang out with us on &lt;a href="https://appwrite.io/discord"&gt;Discord&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#apple-support"&gt;
  &lt;/a&gt;
  🍎 Apple Support
&lt;/h2&gt;

&lt;p&gt;It's finally here 🌟 Appwrite now has official support for Apple platforms! &lt;a href="https://github.com/appwrite/sdk-for-apple"&gt;Our SDK&lt;/a&gt; has just been released, and we're looking to gather some feedback from our amazing community! We've got all the setup instructions in our new &lt;a href="https://appwrite.io/docs/getting-started-for-apple"&gt;Getting Started Guide&lt;/a&gt;. If you just can't wait to try it out, here are the steps to get you started ASAP.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-the-sdk"&gt;
  &lt;/a&gt;
  Add the SDK
&lt;/h3&gt;

&lt;p&gt;The Appwrite Apple SDK is available via Swift Package Manager. In order to use the Appwrite Apple SDK from &lt;strong&gt;Xcode&lt;/strong&gt;, select File &amp;gt; Swift Packages &amp;gt; &lt;strong&gt;Add Package Dependency&lt;/strong&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the dialog that appears, enter the Appwrite Apple SDK &lt;a href="https://github.com/appwrite/sdk-for-apple"&gt;package URL&lt;/a&gt; and click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Once the repository information is loaded, add your version rules and click &lt;strong&gt;Next&lt;/strong&gt; again.&lt;/li&gt;
&lt;li&gt;On the final screen, make sure &lt;code&gt;Appwrite&lt;/code&gt; is selected to add to your target as a library.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#make-a-request"&gt;
  &lt;/a&gt;
  Make a Request
&lt;/h3&gt;

&lt;p&gt;You can now make your first request 😍 below are two examples of simple integrations with the SDK, one for SwiftUI and one for UIKit.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#using-swiftui"&gt;
  &lt;/a&gt;
  Using SwiftUI
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Appwrite&lt;/span&gt;
&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;SwiftUI&lt;/span&gt;

&lt;span class="kd"&gt;@main&lt;/span&gt;
&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;TestApp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;Scene&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;WindowGroup&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Click Me!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://[HOSTNAME_OR_IP]/v1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"5df5acd0d48c2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"email@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
                &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#using-uikit"&gt;
  &lt;/a&gt;
  Using UIKit
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Appwrite&lt;/span&gt;
&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;UIKit&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;ViewController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIViewController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://[HOSTNAME_OR_IP]/v1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"5df5acd0d48c2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;lazy&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;@IBAction&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;clickMe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;        
        &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"email@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also have some example apps to help you get started:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A bare minimum &lt;a href="https://github.com/appwrite/playground-for-apple-swiftui"&gt;Playground with SwiftUI&lt;/a&gt; to help you quickly start building apps.&lt;/li&gt;
&lt;li&gt;A bare minimum &lt;a href="https://github.com/appwrite/playground-for-apple-uikit"&gt;Playground with UIKit&lt;/a&gt; to help you quickly start building apps.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/appwrite/demo-job-portal-with-apple"&gt;Job Portal App&lt;/a&gt; built with Appwrite.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#swift-server-sdk"&gt;
  &lt;/a&gt;
  🏎️ Swift Server SDK
&lt;/h2&gt;

&lt;p&gt;We have also released a brand new &lt;a href="https://github.com/appwrite/sdk-for-swift"&gt;Swift Server SDK&lt;/a&gt; to go along with the Apple one! Setting up the Swift SDK only requires adding the dependency to your &lt;code&gt;Package.swift&lt;/code&gt; file. You can check out our &lt;a href="https://appwrite.io/docs/getting-started-for-server"&gt;Getting Started Guide&lt;/a&gt; or follow along for a quick summary.&lt;/p&gt;

&lt;p&gt;Add the package to your &lt;code&gt;Package.swift&lt;/code&gt; dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;    &lt;span class="nv"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"https://github.com/appwrite/sdk-for-apple"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"0.1.0 "&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add the library as a dependency of your target:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;    &lt;span class="nv"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;target&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"[YourAppTarget]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nv"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Appwrite"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;package&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"sdk-for-apple"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now make your first request using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Appwrite&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://[HOSTNAME_OR_IP]/v1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"5df5acd0d48c2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"email@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also have some example apps to help you get started&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A bare minimum &lt;a href="https://github.com/appwrite/playground-for-swift"&gt;Playground&lt;/a&gt; to help you quickly start building apps.&lt;/li&gt;
&lt;li&gt;We also have some really cool &lt;a href="https://github.com/appwrite/demos-for-functions/tree/master/swift"&gt;Cloud Function demos&lt;/a&gt; using our Swift SDK.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#swift-cloud-function-runtime"&gt;
  &lt;/a&gt;
  🏃 Swift Cloud Function Runtime!
&lt;/h2&gt;

&lt;p&gt;Our Cloud Function runtimes list continues to grow with over 20+ (!) runtimes. This time we've added support for &lt;strong&gt;swift-5.5&lt;/strong&gt;, which thanks to ABI stability, supports running code all the way back to Swift 4. We've got you covered 💪 no matter what your favourite language is! We have &lt;a href="https://github.com/appwrite/demos-for-functions"&gt;demos available&lt;/a&gt; for a wide variety of languages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zf9WxnOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ms2oq9m7477lj2w0mljl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zf9WxnOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ms2oq9m7477lj2w0mljl.png" alt="Swift Function"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#everything-else"&gt;
  &lt;/a&gt;
  🚅 Everything else
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We've introduced new Cloud Function runtimes for &lt;code&gt;java-17&lt;/code&gt;, &lt;code&gt;python-3.10&lt;/code&gt;, &lt;code&gt;deno-1.12&lt;/code&gt;, &lt;code&gt;deno-1.13&lt;/code&gt; and &lt;code&gt;deno-1.14&lt;/code&gt;. If you've been thinking about refactoring your Cloud Functions, this might a good time for it 😉&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Appwrite v0.11 would not have been possible without the collaboration of almost &lt;strong&gt;100 open source developers (!)&lt;/strong&gt; who came together to help us during Hacktoberfest! Here's a huge shout out to all the amazing contributors 📢&lt;br&gt;&lt;br&gt;
&lt;a href="https://github.com/m1ga"&gt;@m1ga&lt;/a&gt; &lt;a href="https://github.com/mishmanners"&gt;@mishmanners&lt;/a&gt; &lt;a href="https://github.com/stnguyen90"&gt;@stnguyen90&lt;/a&gt; &lt;a href="https://github.com/GarvitSinghal47"&gt;@GarvitSinghal47&lt;/a&gt; &lt;a href="https://github.com/chefk5"&gt;@chefk5&lt;/a&gt; &lt;a href="https://github.com/ivernus"&gt;@ivernus&lt;/a&gt; &lt;a href="https://github.com/takmar"&gt;@takmar&lt;/a&gt; &lt;a href="https://github.com/oovk"&gt;@oovk&lt;/a&gt; &lt;a href="https://github.com/thet3o"&gt;@thet3o&lt;/a&gt; &lt;a href="https://github.com/KaminskiDaniell"&gt;@KaminskiDaniell&lt;/a&gt; &lt;a href="https://github.com/anshganatra"&gt;@anshganatra&lt;/a&gt; &lt;a href="https://github.com/AmreshSinha"&gt;@AmreshSinha&lt;/a&gt; &lt;a href="https://github.com/hardiksachan"&gt;@hardiksachan&lt;/a&gt; &lt;a href="https://github.com/sakshamgurbhele"&gt;@sakshamgurbhele&lt;/a&gt; &lt;a href="https://github.com/vishal-codes"&gt;@vishal-codes&lt;/a&gt; &lt;a href="https://github.com/Gautam1302"&gt;@Gautam1302&lt;/a&gt; &lt;a href="https://github.com/siw3kosky"&gt;@siw3kosky&lt;/a&gt; &lt;a href="https://github.com/toir427"&gt;@toir427&lt;/a&gt; &lt;a href="https://github.com/divshacker"&gt;@divshacker&lt;/a&gt; &lt;a href="https://github.com/Asmit2952"&gt;@Asmit2952&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/HelloSeaNation"&gt;@HelloSeaNation&lt;/a&gt; &lt;a href="https://github.com/Sin-Sumit"&gt;@Sin-Sumit&lt;/a&gt; &lt;a href="https://github.com/aerabi"&gt;@aerabi&lt;/a&gt; &lt;a href="https://github.com/nataliarossini"&gt;@nataliarossini&lt;/a&gt; &lt;a href="https://github.com/kritika-srivastava"&gt;@kritika-srivastava&lt;/a&gt; &lt;a href="https://github.com/felixjeromedelafuente"&gt;@felixjeromedelafuente&lt;/a&gt; &lt;a href="https://github.com/DevGirisankar"&gt;@DevGirisankar&lt;/a&gt; &lt;a href="https://github.com/PrerakMathur20"&gt;@PrerakMathur20&lt;/a&gt; &lt;a href="https://github.com/RReiso"&gt;@RReiso&lt;/a&gt; &lt;a href="https://github.com/NeonSpork"&gt;@NeonSpork&lt;/a&gt; &lt;a href="https://github.com/mantasio"&gt;@mantasio&lt;/a&gt; &lt;a href="https://github.com/Exouxas"&gt;@Exouxas&lt;/a&gt; &lt;a href="https://github.com/Vidushi-Gupta"&gt;@Vidushi-Gupta&lt;/a&gt; &lt;a href="https://github.com/krishguptadev"&gt;@krishguptadev&lt;/a&gt; &lt;a href="https://github.com/ar-ankou"&gt;@ar-ankou&lt;/a&gt; &lt;a href="https://github.com/avinashupadhya99"&gt;@avinashupadhya99&lt;/a&gt; &lt;a href="https://github.com/waridrox"&gt;@waridrox&lt;/a&gt; &lt;a href="https://github.com/kostapappas"&gt;@kostapappas&lt;/a&gt; &lt;a href="https://github.com/charithesh16"&gt;@charithesh16&lt;/a&gt; &lt;a href="https://github.com/banaboi"&gt;@banaboi&lt;/a&gt; &lt;a href="https://github.com/mazedlx"&gt;@mazedlx&lt;/a&gt; &lt;a href="https://github.com/jakubhi"&gt;@jakubhi&lt;/a&gt; &lt;a href="https://github.com/Emiliaaah"&gt;@Emiliaaah&lt;/a&gt; &lt;a href="https://github.com/crossphoton"&gt;@crossphoton&lt;/a&gt; &lt;a href="https://github.com/minna-xD"&gt;@minna-xD&lt;/a&gt; &lt;a href="https://github.com/mendoza"&gt;@mendoza&lt;/a&gt; &lt;a href="https://github.com/didair"&gt;@didair&lt;/a&gt; &lt;a href="https://github.com/ezioishan"&gt;@ezioishan&lt;/a&gt; &lt;a href="https://github.com/tacoelho"&gt;@tacoelho&lt;/a&gt; &lt;a href="https://github.com/Rutam21"&gt;@Rutam21&lt;/a&gt; &lt;a href="https://github.com/harshita214"&gt;@harshita214&lt;/a&gt; &lt;a href="https://github.com/kalpeshT101"&gt;@kalpeshT101&lt;/a&gt; &lt;a href="https://github.com/ErfanBahramali"&gt;@ErfanBahramali&lt;/a&gt; &lt;a href="https://github.com/hdkhoasgt"&gt;@hdkhoasgt&lt;/a&gt; &lt;a href="https://github.com/ArtixAllMighty"&gt;@ArtixAllMighty&lt;/a&gt; &lt;a href="https://github.com/Biki-das"&gt;@Biki-das&lt;/a&gt; &lt;a href="https://github.com/und1n3"&gt;@und1n3&lt;/a&gt; &lt;a href="https://github.com/cristina-sirbu"&gt;@cristina-sirbu&lt;/a&gt; &lt;a href="https://github.com/wenzdey"&gt;@wenzdey&lt;/a&gt; &lt;a href="https://github.com/yalematta"&gt;@yalematta&lt;/a&gt; &lt;a href="https://github.com/visheshjindal"&gt;@visheshjindal&lt;/a&gt; &lt;a href="https://github.com/abxhr"&gt;@abxhr&lt;/a&gt; &lt;a href="https://github.com/MatteoGheza"&gt;@MatteoGheza&lt;/a&gt; &lt;a href="https://github.com/torn4dom4n"&gt;@torn4dom4n&lt;/a&gt; &lt;a href="https://github.com/loftwah"&gt;@loftwah&lt;/a&gt; &lt;a href="https://github.com/Sooraj-s-98"&gt;@Sooraj-s-98&lt;/a&gt; &lt;a href="https://github.com/OscarRG"&gt;@OscarRG&lt;/a&gt; &lt;a href="https://github.com/teeradon43"&gt;@teeradon43&lt;/a&gt; &lt;a href="https://github.com/Kokoden"&gt;@Kokoden&lt;/a&gt; &lt;a href="https://github.com/dazzlerkumar"&gt;@dazzlerkumar&lt;/a&gt; &lt;a href="https://github.com/Nikhil-1503"&gt;@Nikhil-1503&lt;/a&gt; &lt;a href="https://github.com/Sangwan5688"&gt;@Sangwan5688&lt;/a&gt; &lt;a href="https://github.com/chuiizeet"&gt;@chuiizeet&lt;/a&gt; &lt;a href="https://github.com/Ganzabahl"&gt;@Ganzabahl&lt;/a&gt; &lt;a href="https://github.com/2002Bishwajeet"&gt;@2002Bishwajeet&lt;/a&gt; &lt;a href="https://github.com/KKVANONYMOUS"&gt;@KKVANONYMOUS&lt;/a&gt; &lt;a href="https://github.com/mbos2"&gt;@mbos2&lt;/a&gt; &lt;a href="https://github.com/ilmalte"&gt;@ilmalte&lt;/a&gt; &lt;a href="https://github.com/TheLearneer"&gt;@TheLearneer&lt;/a&gt; &lt;a href="https://github.com/deshankoswatte"&gt;@deshankoswatte&lt;/a&gt; &lt;a href="https://github.com/vj-codes"&gt;@vj-codes&lt;/a&gt; &lt;a href="https://github.com/renato04"&gt;@renato04&lt;/a&gt; &lt;a href="https://github.com/Hrdtr"&gt;@Hrdtr&lt;/a&gt; &lt;a href="https://github.com/JaswanthRemiel"&gt;@JaswanthRemiel&lt;/a&gt; &lt;a href="https://github.com/ssong"&gt;@ssong&lt;/a&gt; &lt;a href="https://github.com/aniketh-varma"&gt;@aniketh-varma&lt;/a&gt; &lt;a href="https://github.com/anoopmsivadas"&gt;@anoopmsivadas&lt;/a&gt; &lt;a href="https://github.com/Ln11211"&gt;@Ln11211&lt;/a&gt; &lt;a href="https://github.com/vivekkj123"&gt;@vivekkj123&lt;/a&gt; &lt;a href="https://github.com/achromik"&gt;@achromik&lt;/a&gt; &lt;a href="https://github.com/willtryagain"&gt;@willtryagain&lt;/a&gt; &lt;a href="https://github.com/eigengravy"&gt;@eigengravy&lt;/a&gt; &lt;a href="https://github.com/honeykpatel"&gt;@honeykpatel&lt;/a&gt; &lt;a href="https://github.com/vendz"&gt;@vendz&lt;/a&gt; &lt;a href="https://github.com/Obnoxious-coder"&gt;@Obnoxious-coder&lt;/a&gt; &lt;a href="https://github.com/izqalan"&gt;@izqalan&lt;/a&gt; &lt;a href="https://github.com/arsangamal"&gt;@arsangamal&lt;/a&gt; &lt;a href="https://github.com/daniloff200"&gt;@daniloff200&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's not forget, you also helped us reach a major milestone of &lt;strong&gt;13k GitHub stars&lt;/strong&gt; ⭐️ making us one of the &lt;strong&gt;top 1500&lt;/strong&gt; projects in GitHub history! Thank you so much for all your support!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AGQdAo6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/l3vRfyh5b1MqngPx6/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AGQdAo6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/l3vRfyh5b1MqngPx6/giphy.gif" alt="Team Work"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We've been having a lot of fun on our Discord server! Weekly chats and AMAs with the Appwrite maintainers, Live PR reviews, Hacktoberfest Countdown parties, &lt;strong&gt;impromptu chess games&lt;/strong&gt; and most importantly, &lt;strong&gt;The community run #meme channel!&lt;/strong&gt;. You'll find yourself right at home. &lt;a href="https://appwrite.io/discord"&gt;Come on in&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--clE6WZUd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1s8qv5bdlgwyp1p4i74x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--clE6WZUd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1s8qv5bdlgwyp1p4i74x.png" alt="PR Party"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breaking-changes"&gt;
  &lt;/a&gt;
  ⛏️ Breaking Changes
&lt;/h2&gt;

&lt;p&gt;This release introduces &lt;strong&gt;no breaking changes&lt;/strong&gt;, which means you can upgrade your Appwrite instance without needing to run the Appwrite migration script.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eGa4vAvJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.giphy.com/media/MCw5eKTuKsgjr73t5A/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eGa4vAvJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.giphy.com/media/MCw5eKTuKsgjr73t5A/giphy.gif" alt="Computer Crash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-more"&gt;
  &lt;/a&gt;
  😍 And More!
&lt;/h2&gt;

&lt;p&gt;That's not all! We've included other small fixes and optimizations to make everyone's Appwrite experience the best it can be. For full details of the 0.11 release, you can check out the &lt;a href="https://github.com/appwrite/appwrite/blob/master/CHANGES.md"&gt;changelog on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you're upgrading from an older version of Appwrite, be sure to follow our &lt;a href="https://appwrite.io/docs/upgrade"&gt;upgrading guide&lt;/a&gt; so that you don't lose your way in uncharted territories 😉.&lt;/p&gt;

&lt;p&gt;If you're curious about what's next for Appwrite, or have a great idea, head on over to our &lt;a href="https://github.com/appwrite/rfc"&gt;RFC repo&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;Our list of awesome tutorials, videos, and demos keeps growing, head over to the &lt;a href="https://github.com/appwrite/awesome-appwrite"&gt;awesome-appwrite repo&lt;/a&gt; to check them out.&lt;/p&gt;

&lt;p&gt;If you've just discovered Appwrite and would like to get started, check out our &lt;a href="https://30days.appwrite.io/"&gt;30 Days of Appwrite&lt;/a&gt; series where we explain step-by-step everything you need to know to build awesome Appwrite-powered apps. Come hang out on &lt;a href="https://appwrite.io/discord"&gt;Discord&lt;/a&gt;, follow us on &lt;a href="https://twitter.com/appwrite_io"&gt;Twitter&lt;/a&gt;, &lt;a href="https://dev.to/appwrite"&gt;Dev&lt;/a&gt;, or wherever you find your friendly neighborhood Appwriter. &lt;/p&gt;

</description>
      <category>news</category>
      <category>showdev</category>
      <category>ios</category>
      <category>swift</category>
    </item>
    <item>
      <title>MongoDB $weeklyUpdate (October 18, 2021): Latest MongoDB Tutorials, Events, Podcasts, &amp; Streams!</title>
      <author>Adrienne Tacke</author>
      <pubDate>Mon, 18 Oct 2021 14:01:22 +0000</pubDate>
      <link>https://dev.to/mongodb/mongodb-weeklyupdate-october-18-2021-latest-mongodb-tutorials-events-podcasts-streams-2oo6</link>
      <guid>https://dev.to/mongodb/mongodb-weeklyupdate-october-18-2021-latest-mongodb-tutorials-events-podcasts-streams-2oo6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hi-everyone"&gt;
  &lt;/a&gt;
  👋 Hi everyone!
&lt;/h2&gt;

&lt;p&gt;Welcome to MongoDB $weeklyUpdate!&lt;/p&gt;

&lt;p&gt;Here, you'll find the latest developer tutorials, upcoming official MongoDB events, and get a heads up on our latest Twitch streams and podcast, curated by &lt;a href="https://twitter.com/AdrienneTacke"&gt;Adrienne Tacke&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#freshest-tutorials-on-devhub"&gt;
  &lt;/a&gt;
  🎓 Freshest Tutorials on &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Want to find the latest MongoDB tutorials and articles created for developers, by developers? Look no further than our &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#migrating-your-ios-apps-realm-schema-in-production"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/how-to/realm-schema-migration/"&gt;Migrating Your iOS App's Realm Schema in Production&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/andrewmorgan"&gt;Andrew Morgan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This tutorial will step you through updating an existing mobile app to add some new features that require changes to the schema.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#most-useful-ios-15-swiftui-features"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/how-to/realm-ios15-swiftui/"&gt;Most Useful iOS 15 SwiftUI Features&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/andrewmorgan"&gt;Andrew Morgan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article steps through the features I found most interesting/useful, and how I tested them out on my apps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#securing-mongodb-with-tls"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/article/securing-mongodb-with-tls/"&gt;Securing MongoDB with TLS&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/developer/author/carl-tashian/"&gt;Carl Tashian&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn how to secure your self-managed MongoDB TLS deployment with certificates using the Smallstep open-source online certificate authority.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automate-the-automation-on-mongodb-atlas"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/article/automate-automation-mongodb-atlas/"&gt;Automate the Automation on MongoDB Atlas&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/developer/author/cassiano-ziegler-bein/"&gt;Cassiano Ziegler Bein&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Build your own automation with MongoDB Atlas API resources.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#official-mongodb-events"&gt;
  &lt;/a&gt;
  📅 Official MongoDB &lt;a href="https://live.mongodb.com/events/#/calendar"&gt;Events&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Attend an official MongoDB event near you (virtual for now)! Chat with MongoDB experts, learn something new, meet other developers, and win some swag!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Oct 20 (4:00 PM GMT | Global) - &lt;a href="https://live.mongodb.com/events/details/mongodb-realm-global-community-presents-a-mobile-app-from-scratch-to-production-react-native-state-management-with-realm/"&gt;A Mobile App from scratch to production! React Native state management with Realm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oct 25 (4:00 PM GMT | Global) - &lt;a href="https://live.mongodb.com/events/details/mongodb-mongodb-global-virtual-community-presents-seo-for-technical-articles-101/"&gt;SEO for Technical Articles 101&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oct 27 (3:00 PM GMT | DACH Virtual Community) - &lt;a href="https://live.mongodb.com/events/details/mongodb-dach-virtual-community-presents-mongodb-atlas-mit-ansible-automatisieren/"&gt;MongoDB Atlas mit Ansible automatisieren&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#mongodb-on-twitch-amp-youtube"&gt;
  &lt;/a&gt;
  📺 MongoDB on &lt;a href="https://www.twitch.tv/mongodb"&gt;Twitch&lt;/a&gt; &amp;amp; &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;YouTube&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;We stream tech tutorials, live coding, and talk to members of our community via &lt;a href="https://www.twitch.tv/mongodb"&gt;Twitch&lt;/a&gt; and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;YouTube&lt;/a&gt;. Sometimes, we even stream twice a week! Be sure to &lt;a href="https://www.twitch.tv/mongodb"&gt;follow us on Twitch&lt;/a&gt; and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;subscribe to our YouTube channel&lt;/a&gt; to be notified of every stream!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Latest Stream&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://clips.twitch.tv/embed?autoplay=false&amp;amp;clip=1157005653&amp;amp;parent=dev.to" height="399" width="710"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;🍿 &lt;a href="https://www.twitch.tv/mongodb"&gt;Follow us&lt;/a&gt; on Twitch and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;subscribe to our YouTube channel&lt;/a&gt; so you never miss a stream!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#%F0%9F%8E%99-last-word-on-the-mongodb-podcast"&gt;
  &lt;/a&gt;
  🎙 Last Word on the &lt;a href="https://mongodb.libsyn.com/"&gt;MongoDB Podcast&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Latest Episode&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/4z0EYeJPti4peMvq56MQlV"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Catch up on past episodes&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;Ep. 81 - &lt;a href="https://open.spotify.com/episode/6tEcClMmSssrOfrjBC4XbO?si=SVYln-QFQIKZBx_LjCNZMA&amp;amp;dl_branch=1"&gt;The Realm JavaScript SDK with Kraen Hansen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ep. 80 - &lt;a href="https://open.spotify.com/episode/05dFJ4h2eH3PNwAadDL3Bx?si=xbboRV4sRG6lOryb-wPAJw&amp;amp;dl_branch=1"&gt;Exploring Prisma with Daniel Norman&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ep. 79 - &lt;a href="https://open.spotify.com/episode/1iM473PGfxoqzpnQNT4o8u"&gt;Atlas Search with Marcus Eagan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Not listening on Spotify? We got you! We're most likely on your favorite podcast network, including &lt;a href="https://podcasts.apple.com/us/podcast/the-mongodb-podcast/id1500452446"&gt;Apple Podcasts&lt;/a&gt;, &lt;a href="https://player.fm/series/the-mongodb-podcast"&gt;PlayerFM&lt;/a&gt;, &lt;a href="https://podtail.com/en/podcast/the-mongodb-podcast/"&gt;Podtail&lt;/a&gt;, and &lt;a href="https://www.listennotes.com/podcasts/the-mongodb-podcast-mongodb-0g6fUKMDN_y/"&gt;Listen Notes&lt;/a&gt; 😊)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#mongodb-devrel-around-the-interwebz"&gt;
  &lt;/a&gt;
  🌍 MongoDB DevRel around the Interwebz
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Watch our team do their thang at various conferences, meetups, and podcasts around the world (virtually, for now). Also, find external articles and guest posts from our DevRel team here!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;📅 Upcoming&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Current Month&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Oct 19: &lt;a href="https://www.europecloudsummit.com/"&gt;EuropeClouds Summit&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/Lauren_Schaefer"&gt;Lauren Schaefer&lt;/a&gt; will be at &lt;a href="https://www.europecloudsummit.com/"&gt;EuropeClouds Summit&lt;/a&gt; Conference to give their talk "5 Things I Learned While Modeling Data in MongoDB"!&lt;/p&gt;

&lt;p&gt;Oct 21: &lt;a href="https://events.codemotion.com/conferences/online/2021/online-tech-conference-spanish-edition-autumn/agenda"&gt;Codemotion&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/Lauren_Schaefer"&gt;Lauren Schaefer&lt;/a&gt; will be at &lt;a href="https://events.codemotion.com/conferences/online/2021/online-tech-conference-spanish-edition-autumn/agenda"&gt;Codemotion&lt;/a&gt; Conference to give their talk "Codemotion Online Conference - Spanish Edition: How to Raise Your Profile as a Developer (And Why You Should Bother!)"!&lt;/p&gt;

&lt;p&gt;Oct 28: &lt;a href="https://www.conf42.com/JavaScript_2021_Lauren_Hayward_Schaefer_Raise_Your_Profile"&gt;Conf42&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/Lauren_Schaefer"&gt;Lauren Schaefer&lt;/a&gt; will be at &lt;a href="https://www.conf42.com/JavaScript_2021_Lauren_Hayward_Schaefer_Raise_Your_Profile"&gt;Conf42&lt;/a&gt; Conference to give their talk "How to Raise Your Profile as a Developer (And Why You Should Bother!)"!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next Month&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nov 8: &lt;a href="https://2021.devrel.net/speaker/lauren-schaefer/"&gt;DevRelCon&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/Lauren_Schaefer"&gt;Lauren Schaefer&lt;/a&gt; will be at &lt;a href="https://2021.devrel.net/speaker/lauren-schaefer/"&gt;DevRelCon&lt;/a&gt; Conference to give their talk "SEO 101 for DevRel"!&lt;/p&gt;

&lt;p&gt;Nov 10: &lt;a href="https://events.codemotion.com/conferences/online/2021/online-tech-conference-italian-edition-autumn/speakers"&gt;Codemotion&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/Lauren_Schaefer"&gt;Lauren Schaefer&lt;/a&gt; will be at &lt;a href="https://events.codemotion.com/conferences/online/2021/online-tech-conference-italian-edition-autumn/speakers"&gt;Codemotion&lt;/a&gt; Conference to give their talk "            How to Raise Your Profile as a Developer (And Why You Should Bother!)"!&lt;/p&gt;




&lt;p&gt;💡 These $weeklyUpdates are always posted to the &lt;a href="https://www.mongodb.com/community/forums/"&gt;MongoDB Community Forums&lt;/a&gt; &lt;em&gt;first&lt;/em&gt;! &lt;a href="https://account.mongodb.com/account/register"&gt;Sign up&lt;/a&gt; today to always get first dibs on these $weeklyUpdates and other MongoDB announcements, interact with the MongoDB community, and help others solve MongoDB related issues!&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>database</category>
      <category>serverless</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Smart Contracts</title>
      <author>JoeTags</author>
      <pubDate>Mon, 18 Oct 2021 13:53:19 +0000</pubDate>
      <link>https://dev.to/joetags/smart-contracts-1go8</link>
      <guid>https://dev.to/joetags/smart-contracts-1go8</guid>
      <description>&lt;h4&gt;
  &lt;a href="#what-is-a-smart-contract"&gt;
  &lt;/a&gt;
  What is a Smart Contract?
&lt;/h4&gt;

&lt;p&gt;I’m writing to discuss smart contracts and their relationship with blockchain. This blog assumes that you have a general understanding of what a blockchain is and how it operates. If not, I ‘ve attached a &lt;a href="https://en.wikipedia.org/wiki/Blockchain"&gt;link&lt;/a&gt; that provides a brief rundown. In addition, by the end of this read I’m going to help you learn how to write and deploy a contract using the oracle provider, Chainlink.&lt;/p&gt;

&lt;p&gt;A basic definition of a smart contract is a computer program that exists on a blockchain and self-executes an agreement. However, if you go to Ethereum.org, you will find a more robust definition that outlines some of the key steps needed to build a smart contract. &lt;/p&gt;

&lt;p&gt;An important one is that a smart contract is an actual Ethereum account. It has its own address where it resides on the blockchain and, in turn, has an ability to make financial transactions. So, not only will we write a smart contract but we’re going to deploy it to the Ethereum blockchain.&lt;/p&gt;

&lt;p&gt;Smart contracts are immutable agreements or programs. Once it’s deployed and the code is executed it cannot be reversed. Some interesting use cases for smart contracts are lotteries, elections, or real estate transactions. In the last case, think of the blockchain as a notary public that bears witness and holds record of the smart contract. &lt;/p&gt;

&lt;p&gt;One of the important features of a smart contract is that it takes real world data and attaches or binds it to the blockchain. In the use cases mentioned earlier, I provided examples of events or occurrences that can be added to the blockchain. But, this begs the question. If the data on a blockchain is immutable, and a smart contract, irreversible, how can we verify the data in a smart contract is legit? &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#enter-the-oracle-all-hail-the-oracle-what-the-heck-is-an-oracle"&gt;
  &lt;/a&gt;
  Enter the Oracle. All hail the oracle. What the heck is an oracle?
&lt;/h4&gt;

&lt;p&gt;An oracle is a way to send real world, verified data to execute a smart contract and potentially disperse money. It’s important to understand the concept of proof of work in blockchain mining to fully understand how oracles work. When someone makes a transaction on a blockchain, miners verify that the transaction is authentic before it is broadcast and entered into the ledger. It is the solution to the Byzantine General’s Problem and the ethos behind decentralization.&lt;/p&gt;

&lt;p&gt;With oracles, it is the same procedure minus the hashing algorithm. Once a certain amount of people(nodes) verify that the data is correct, it can be passed along to the smart contract and blockchain. &lt;/p&gt;

&lt;p&gt;In order to learn how to write a smart contract, I went to the &lt;a href="https://docs.chain.link/docs/beginners-tutorial/"&gt;Chanlink developers documention&lt;/a&gt; and followed a simple walkthrough for writing and deploying my first contract. Below is an example of a smart contract’s architecture. It’s slightly different than a typical class but follows the same convention. At the top, the Solidity language version must be declared. It’s followed by the contract keyword which is the equivalent of class in Javascript. It has a constructor which holds some state and a function written to execute some code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;pragma&lt;/span&gt; &lt;span class="nx"&gt;solidity&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;contract&lt;/span&gt; &lt;span class="nx"&gt;sayHelloWorld&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="nx"&gt;memory&lt;/span&gt; &lt;span class="nx"&gt;initialMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialMessage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="nx"&gt;memory&lt;/span&gt; &lt;span class="nx"&gt;newMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newMessage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you follow the link above, you can learn how to do this in about fifteen minutes. First, you need to download the Metamask, software wallet. Then, you’ll need to fund it with some fake Ethereum or Chainlink. After that, you go to the Remix IDE where a premade contract to get price data for Ethereum is set to go. If you’ve built web applications before you’ll be familiar with compiling and deploying your code. However, it’s much easier with a smart contract because the code is minimal and doesn’t hold much complex data. Give it a try.&lt;/p&gt;

</description>
      <category>ethereum</category>
      <category>chainlink</category>
      <category>blockchain</category>
    </item>
  </channel>
</rss>
