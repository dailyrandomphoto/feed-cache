<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Flame 1.0 is here!</title>
      <author>Luan Nico</author>
      <pubDate>Wed, 08 Dec 2021 18:56:50 +0000</pubDate>
      <link>https://dev.to/blue-fire/flame-10-is-here-430n</link>
      <guid>https://dev.to/blue-fire/flame-10-is-here-430n</guid>
      <description>&lt;p&gt;Hi there, folks! It's been a while since our last article, but if you are following &lt;a href="https://github.com/flame-engine/flame"&gt;Flame on GitHub&lt;/a&gt; or participating in our &lt;a href="https://discord.gg/pxrBmy4"&gt;Discord&lt;/a&gt;, you know very well that we have not been idle. Far from it. In fact, you might have noticed more and more Release Candidates being put out regularly, mostly with some needed updates and cleanups, a few new core features, bug fixes, and incorporating valuable feedback from our amazing Game Jam. That is because both the team and the community have been working together, relentlessly, to make Flame the best it can be.&lt;/p&gt;

&lt;p&gt;And, first of all, I would like to make it very clear that we are not done with this goal, not even close -- the pile of things we know could be improved, extended or added is only shadowed by the mountain that we don't even know about yet. So the first thing I would like to reassure everyone, with this article, is that nothing really changes in that regard. We will still be putting out PRs, receiving invaluable help from the community, making improvements, new features, bug fixes. We will still be at discord, helping out new people, having deep, productive discussions with veterans, and collaborating together to keep growing and enhancing all Blue Fire's projects.&lt;/p&gt;

&lt;p&gt;That being said, we do have a key milestone to share. You might have already heard about it on the &lt;a href="https://medium.com/flutter/announcing-flutter-2-8-31d2cb7e19f5"&gt;Flutter 2.8 release article&lt;/a&gt;, or maybe got a sneak peek on pub; but, regardless, we wanted to double down and proudly announce we just released Flame 1.0.0. Yes, it's official, and finally here! What an end-of-year holiday gift to us to finally be able to say that, given all the work that has been put into it! We are very happy with the current state of our code and the capabilities provided, and we think it's time to make this commitment. Thank you so much for every single one of you, that contributed with PRs, discussions, questions (that led us to improve some docs or reconceptualize some API), monetary donations via our &lt;a href="https://www.patreon.com/bluefireoss"&gt;Patreon&lt;/a&gt;, or that used Flame, made something great, participated in any way, gave us a star on &lt;a href="https://github.com/flame-engine/flame"&gt;GitHub&lt;/a&gt;, or just for reading and sharing this article. Thank you, from the bottom of our hearts.&lt;/p&gt;

&lt;p&gt;And let me reiterate; we are still going to keep improving, updating, fixing, enhancing Flame. In fact, I hope version 1.0.0 lives very briefly on pub, to be replaced with 1.0.1, 1.1.0, whichever comes first, very soon. This just means we believe the current API is stable, and we won't be making big, breaking changes that often, or without warning. Expect more structured, stable updates, especially new features. It also means we can focus our attention now to improving our docs, bridge packages, tooling, examples and tutorials to make sure this awesome ecosystem that came about works seamlessly and frictionlessly, and that people can easily welcome people to join and learn. We are also happy to have established and to carry on this partnership with the Flutter team to make sure we all pave a future together for Flame and our beloved community.&lt;/p&gt;

&lt;p&gt;And on that note, we ask you to update your dependency, head over to &lt;a href="https://discord.gg/pxrBmy4"&gt;Discord&lt;/a&gt; to continue the discussion, and if you haven't, please check &lt;a href="https://medium.com/flutter/announcing-flutter-2-8-31d2cb7e19f5"&gt;Flutter's article&lt;/a&gt; about all the amazing things packed on Flutter 2.8, and let us know if you have any feedback! Thanks everyone again for everything, and have a great day!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>1 line of code: How to camelCase a string</title>
      <author>martin krause</author>
      <pubDate>Wed, 08 Dec 2021 18:41:30 +0000</pubDate>
      <link>https://dev.to/martinkr/1-line-of-code-how-to-camelcase-a-string-558g</link>
      <guid>https://dev.to/martinkr/1-line-of-code-how-to-camelcase-a-string-558g</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toCamelCase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[\.&lt;/span&gt;&lt;span class="sr"&gt;_-&lt;/span&gt;&lt;span class="se"&gt;\s]&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;.&lt;/span&gt;&lt;span class="se"&gt;)?&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Returns a new string in camel case. &lt;br&gt;
Uses &lt;code&gt;space&lt;/code&gt;, &lt;code&gt;dot&lt;/code&gt;, &lt;code&gt;underscore&lt;/code&gt; and &lt;code&gt;dash&lt;/code&gt; as delimiter.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-repository-amp-npm-package"&gt;
  &lt;/a&gt;
  The repository &amp;amp; npm package
&lt;/h2&gt;

&lt;p&gt;You can find the all the utility functions from this series at &lt;a href="https://github.com/martinkr/onelinecode"&gt;github.com/martinkr/onelinecode&lt;/a&gt;&lt;br&gt;
The library is also published to &lt;a href="https://www.npmjs.com/package/@onelinecode/onelinecode"&gt;npm as @onelinecode&lt;/a&gt; for your convenience.&lt;/p&gt;

&lt;p&gt;The code and the npm package will be updated every time I publish a new article.&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt; and consider to &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@zoo_monkey"&gt;zoo_monkey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fuji"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://modernfrontend.dev/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cH97ToOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://modernfrontend.dev/banner/banner_583-111.png" alt="Subscribe to the weekly modern frontend development newsletter" width="583" height="111"&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Advanced typescript for React developers</title>
      <author>Nadia Makarevich</author>
      <pubDate>Wed, 08 Dec 2021 18:01:20 +0000</pubDate>
      <link>https://dev.to/adevnadia/advanced-typescript-for-react-developers-8kc</link>
      <guid>https://dev.to/adevnadia/advanced-typescript-for-react-developers-8kc</guid>
      <description>&lt;p&gt;This is the second article in the series “typescript for React developers”. In the first one, we figured out what Typescript generics are and how to use them to write re-usable react components: &lt;a href="/posts/typescript-generics-for-react-developers"&gt;Typescript Generics for React developers&lt;/a&gt;. Now it’s time to dive into other advanced typescript concepts and understand how and why we need things like &lt;strong&gt;type guards&lt;/strong&gt;, &lt;strong&gt;keyof&lt;/strong&gt;, &lt;strong&gt;typeof&lt;/strong&gt;, &lt;strong&gt;is&lt;/strong&gt;, &lt;strong&gt;as const&lt;/strong&gt; and &lt;strong&gt;indexed types&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As we found out from the article above, Judi is an ambitious developer and wants to implement her own online shop, a competitor to Amazon: she’s going to sell everything there! We left her when she implemented a re-usable select component with typescript generics. The component is pretty basic: it allows to pass an array of &lt;code&gt;values&lt;/code&gt;, assumes that those values have &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt; for rendering select options, and have an &lt;code&gt;onChange&lt;/code&gt; handler to listen to the selected values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Base = {
  id: string;
  title: string;
};

type GenericSelectProps&amp;lt;TValue&amp;gt; = {
  values: TValue[];
  onChange: (value: TValue) =&amp;gt; void;
};

export const GenericSelect = &amp;lt;TValue extends Base&amp;gt;({ values, onChange }: GenericSelectProps&amp;lt;TValue&amp;gt;) =&amp;gt; {
  const onSelectChange = (e) =&amp;gt; {
    const val = values.find((value) =&amp;gt; value.id === e.target.value);

    if (val) onChange(val);
  };

  return (
    &amp;lt;select onChange={onSelectChange}&amp;gt;
      {values.map((value) =&amp;gt; (
        &amp;lt;option key={value.id} value={value.id}&amp;gt;
          {value.title}
        &amp;lt;/option&amp;gt;
      ))}
    &amp;lt;/select&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then this component can be used with any data types Judi has in her application&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;GenericSelect&amp;lt;Book&amp;gt; onChange={(value) =&amp;gt; console.log(value.author)} values={books} /&amp;gt;
&amp;lt;GenericSelect&amp;lt;Movie&amp;gt; onChange={(value) =&amp;gt; console.log(value.releaseDate)} values={movies} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Although, as the shop grew, she quickly found out that &lt;em&gt;any&lt;/em&gt; data type is an exaggeration: we are still limited since we assume that our data will always have &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt; there. But now Judi wants to sell laptops, and laptops have &lt;code&gt;model&lt;/code&gt; instead of &lt;code&gt;title&lt;/code&gt; in their data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Laptop = {
  id: string;
  model: string;
  releaseDate: string;
}

// This will fail, since there is no "title" in the Laptop type
&amp;lt;GenericSelect&amp;lt;Laptop&amp;gt; onChange={(value) =&amp;gt; console.log(value.model)} values={laptops} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ideally, Judi wants to avoid data normalization just for select purposes and make the select component more generic instead. What can she do?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rendering-not-only-titles-in-options"&gt;
  &lt;/a&gt;
  Rendering not only titles in options
&lt;/h2&gt;

&lt;p&gt;Judi decides, that just passing the desired attribute as a prop to the select component would be enough to fulfil her needs for the time being. Basically, she’d have something like this in its API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;GenericSelect&amp;lt;Laptop&amp;gt; titleKey="model" {...} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and the select component would then render Laptop models instead of titles in the options.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MxHus3b2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shcks3572ynz1btnrrsv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MxHus3b2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shcks3572ynz1btnrrsv.png" alt="Image description" width="880" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It would work, but there is one problem with this: not type-safe 🙂. Ideally, we would want typescript to fail if this attribute doesn’t exist in the data model that is used in the select component. This is where typescript’s &lt;a href="https://www.typescriptlang.org/docs/handbook/2/keyof-types.html"&gt;&lt;strong&gt;keyof&lt;/strong&gt;&lt;/a&gt; operator comes in handy.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;keyof&lt;/code&gt; basically generates a type from an object’s keys. If I use &lt;code&gt;keyof&lt;/code&gt; on &lt;code&gt;Laptop&lt;/code&gt; type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Laptop = {
  id: string;
  model: string;
  releaseDate: string;
}

type LaptopKeys = keyof Laptop;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in &lt;code&gt;LaptopKeys&lt;/code&gt; I’ll find a union of its keys: &lt;code&gt;"id" | "model" | "releaseDate"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And, most amazingly, typescript is smart enough to generate those types for generics as well! This will work perfectly:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7ZxrJi2a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oj71kq325grvhgbgjdc5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ZxrJi2a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oj71kq325grvhgbgjdc5.png" alt="Image description" width="880" height="132"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now I can use it with all selects and typescript will catch any typos or copy-paste errors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;GenericSelect&amp;lt;Laptop&amp;gt; titleKey="model" {...} /&amp;gt;
// inside GenericSelect "titleKey" will be typed to "id" | "model" | "releaseDate"

&amp;lt;GenericSelect&amp;lt;Book&amp;gt; titleKey="author" {...} /&amp;gt;
// inside GenericSelect "titleKey" will be typed to "id" | "title" | "author"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and we can make the type &lt;code&gt;Base&lt;/code&gt; a little bit more inclusive and make the &lt;code&gt;title&lt;/code&gt; optional&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Base = {
  id: string;
  title?: string;
}

export const GenericSelect = &amp;lt;TValue extends Base&amp;gt;(props: GenericSelectProps&amp;lt;TValue&amp;gt;) =&amp;gt; {
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/vigorous-neumann-0w1ti?file=/src/select.tsx"&gt;See full working example in codesandbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Important&lt;/em&gt;: Although this example works perfectly, I would not recommend using it in actual apps. It lacks a bit of elegance and is not generic enough &lt;em&gt;yet&lt;/em&gt;. Read until the end of the article for a better example of a select component with customizable labels.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-list-of-categories-refactor-select"&gt;
  &lt;/a&gt;
  The list of categories - refactor select
&lt;/h2&gt;

&lt;p&gt;Now, that we have lists of goods covered with our generic select, it’s time to solve other problems on Judi’s website. One of them is that she has her catalog page clattered with all the selects and additional information that she shows when a value is selected. What she needs, she decides, is to split it into categories, and only show one category at a time. She again wants to use the generic select for it (well, who’s not lazy in this industry, right?).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bJ0qQ8M---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/soql4jmh06f7u5la5ng5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bJ0qQ8M---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/soql4jmh06f7u5la5ng5.png" alt="Image description" width="880" height="561"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The categories is just a simple array of strings: &lt;code&gt;const categories = ['Books', 'Movies', 'Laptops'].&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, our current generic select unfortunately doesn’t work with string values. Let’s fix it! And interestingly enough, this seems-to-be-simple implementation will allow us to get familiar with five new advanced typescript technics: operators &lt;strong&gt;as const&lt;/strong&gt;, &lt;strong&gt;typeof&lt;/strong&gt;, &lt;strong&gt;is&lt;/strong&gt;, &lt;strong&gt;type guards&lt;/strong&gt; idea and &lt;strong&gt;indexed types&lt;/strong&gt;. But let’s start with the existing code and take a closer look at where exactly we depend on the &lt;code&gt;TValue&lt;/code&gt; type to be an object.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ehPC6fqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqd5iltwqucvm9w1xz38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ehPC6fqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqd5iltwqucvm9w1xz38.png" alt="Image description" width="880" height="493"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After careful examination of this picture, we can extract three major changes that we need to do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Convert &lt;code&gt;Base&lt;/code&gt; type into something that understands strings as well as objects&lt;/li&gt;
&lt;li&gt;Get rid of reliance on &lt;code&gt;value.id&lt;/code&gt; as the unique identificator of the value in the list of options&lt;/li&gt;
&lt;li&gt;Convert &lt;code&gt;value[titleKey]&lt;/code&gt; into something that understands strings as well&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With this step-by-step approach to refactoring, the next moves are more or less obvious.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;. Convert &lt;code&gt;Base&lt;/code&gt; into a union type (i.e. just a fancy “or” operator for types) and get rid of &lt;code&gt;title&lt;/code&gt; there completely:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Base = { id: string } | string;

// Now "TValue" can be either a string, or an object that has an "id" in it
export const GenericSelect = &amp;lt;TValue extends Base&amp;gt;(props: GenericSelectProps&amp;lt;TValue&amp;gt;) =&amp;gt; {
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;. Get rid of direct access of &lt;code&gt;value.id&lt;/code&gt; . We can do that by converting all those calls to a function &lt;code&gt;getStringFromValue&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bTlPJOv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cl731n6xst2f7sqrgl1t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bTlPJOv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cl731n6xst2f7sqrgl1t.png" alt="Image description" width="880" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;where the very basic implementation from the before-typescript era would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getStringFromValue = (value) =&amp;gt; value.id || value;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is not going to fly with typescript though: remember, our &lt;code&gt;value&lt;/code&gt; is Generic and can be a string as well as an object, so we need to help typescript here to understand what exactly it is before accessing anything specific.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Base = { id: string } | string;

const getStringFromValue = &amp;lt;TValue extends Base&amp;gt;(value: TValue) =&amp;gt; {
  if (typeof value === 'string') {
    // here "value" will be the type of "string"
    return value;
  }

  // here "value" will be the type of "NOT string", in our case { id: string }
  return value.id;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code in the function is known as &lt;a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html"&gt;&lt;strong&gt;type guard&lt;/strong&gt;&lt;/a&gt; in typescript: an expression that narrows down type within some scope. See what is happening? First, we check whether the &lt;code&gt;value&lt;/code&gt; is a string by using the standard javascript &lt;code&gt;typeof&lt;/code&gt; operator. Now, within the “truthy” branch of &lt;code&gt;if&lt;/code&gt; expression, typescript will know for sure that value is a string, and we can do anything that we’d usually do with a string there. Outside of it, typescript will know for sure, that the value is &lt;strong&gt;not&lt;/strong&gt; a string, and in our case, it means it’s an object with an &lt;code&gt;id&lt;/code&gt; in it. Which allows us to return &lt;code&gt;value.id&lt;/code&gt; safely.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;. Refactor the &lt;code&gt;value[titleKey]&lt;/code&gt; access. Considering that a lot of our data types would want to customise their labels, and more likely than not in the future we’d want to convert it to be even more custom, with icons or special formatting, the easiest option here is just to move the responsibility of extracting required information to the consumer. This can be done by passing a function to select that converts value on the consumer side to a string (or ReactNode in the future). No typescript mysteries here, just normal React:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type GenericSelectProps&amp;lt;TValue&amp;gt; = {
  formatLabel: (value: TValue) =&amp;gt; string;
  ...
};

export const GenericSelect = &amp;lt;TValue extends Base&amp;gt;(props: GenericSelectProps&amp;lt;TValue&amp;gt;) =&amp;gt; {
  ...
  return (
    &amp;lt;select onChange={onSelectChange}&amp;gt;
      {values.map((value) =&amp;gt; (
        &amp;lt;option key={getStringFromValue(value)} value={getStringFromValue(value)}&amp;gt;
          {formatLabel(value)}
        &amp;lt;/option&amp;gt;
      ))}
    &amp;lt;/select&amp;gt;
  );
}

// Show movie title and release date in select label
&amp;lt;GenericSelect&amp;lt;Movie&amp;gt; ... formatLabel={(value) =&amp;gt; `${value.title} (${value.releaseDate})`} /&amp;gt;

// Show laptop model and release date in select label
&amp;lt;GenericSelect&amp;lt;Laptop&amp;gt; ... formatLabel={(value) =&amp;gt; `${value.model, released in ${value.releaseDate}`} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we have it! A perfect generic select, that supports all data formats that we need and allows us to fully customise labels as a nice bonus. The full code looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Base = { id: string } | string;

type GenericSelectProps&amp;lt;TValue&amp;gt; = {
  formatLabel: (value: TValue) =&amp;gt; string;
  onChange: (value: TValue) =&amp;gt; void;
  values: TValue[];
};

const getStringFromValue = &amp;lt;TValue extends Base&amp;gt;(value: TValue) =&amp;gt; {
  if (typeof value === 'string') return value;

  return value.id;
};

export const GenericSelect = &amp;lt;TValue extends Base&amp;gt;(props: GenericSelectProps&amp;lt;TValue&amp;gt;) =&amp;gt; {
  const { values, onChange, formatLabel } = props;

  const onSelectChange = (e) =&amp;gt; {
    const val = values.find((value) =&amp;gt; getStringFromValue(value) === e.target.value);

    if (val) onChange(val);
  };

  return (
    &amp;lt;select onChange={onSelectChange}&amp;gt;
      {values.map((value) =&amp;gt; (
        &amp;lt;option key={getStringFromValue(value)} value={getStringFromValue(value)}&amp;gt;
          {formatLabel(value)}
        &amp;lt;/option&amp;gt;
      ))}
    &amp;lt;/select&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-list-of-categories-implementation"&gt;
  &lt;/a&gt;
  The list of categories - implementation
&lt;/h2&gt;

&lt;p&gt;And now, finally, time to implement what we refactored the select component for in the first place: categories for the website. As always, let’s start simple, and improve things in the process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const tabs = ['Books', 'Movies', 'Laptops'];

const getSelect = (tab: string) =&amp;gt; {
  switch (tab) {
    case 'Books':
      return &amp;lt;GenericSelect&amp;lt;Book&amp;gt; onChange={(value) =&amp;gt; console.info(value)} values={books} /&amp;gt;;
    case 'Movies':
      return &amp;lt;GenericSelect&amp;lt;Movie&amp;gt; onChange={(value) =&amp;gt; console.info(value)} values={movies} /&amp;gt;;
    case 'Laptops':
      return &amp;lt;GenericSelect&amp;lt;Laptop&amp;gt; onChange={(value) =&amp;gt; console.info(value)} values={laptops} /&amp;gt;;
  }
}

const Tabs = () =&amp;gt; {
  const [tab, setTab] = useState&amp;lt;string&amp;gt;(tabs[0]);

  const select = getSelect(tab);


  return (
    &amp;lt;&amp;gt;
      &amp;lt;GenericSelect&amp;lt;string&amp;gt; onChange={(value) =&amp;gt; setTab(value)} values={tabs} /&amp;gt;
      {select}
    &amp;lt;/&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Dead simple - one select component for choosing a category, based on the chosen value - render another select component.&lt;/p&gt;

&lt;p&gt;But again, not exactly typesafe, this time for the tabs: we typed them as just simple &lt;code&gt;string&lt;/code&gt;. So a simple typo in the &lt;code&gt;switch&lt;/code&gt; statement will go unnoticed or a wrong value in &lt;code&gt;setTab&lt;/code&gt; will result in a non-existent category to be chosen. Not good.&lt;/p&gt;

&lt;p&gt;And again, typescript has a handy mechanism to improve that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const tabs = ['Books', 'Movies', 'Laptops'] as const;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This trick is known as &lt;a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions"&gt;&lt;strong&gt;const assertion&lt;/strong&gt;&lt;/a&gt;. With this, our &lt;code&gt;tabs&lt;/code&gt; array, instead of an array of any random string will turn into a read-only array of those specific values and nothing else.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// an array of values type "string"
const tabs = ['Books', 'Movies', 'Laptops'];

tabs.forEach(tab =&amp;gt; {
  // typescript is fine with that, although there is no "Cats" value in the tabs
  if (tab === 'Cats') console.log(tab)
})

// an array of values 'Books', 'Movies' or 'Laptops', and nothing else
const tabs = ['Books', 'Movies', 'Laptops'] as const;

tabs.forEach(tab =&amp;gt; {
  // typescript will fail here since there are no Cats in tabs
  if (tab === 'Cats') console.log(tab)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, all we need to do is to extract type &lt;code&gt;Tab&lt;/code&gt; that we can pass to our generic select. First, we can extract the &lt;code&gt;Tabs&lt;/code&gt; type by using the &lt;a href="https://www.typescriptlang.org/docs/handbook/2/typeof-types.html"&gt;&lt;strong&gt;typeof&lt;/strong&gt;&lt;/a&gt; operator, which is pretty much the same as normal javascript &lt;code&gt;typeof&lt;/code&gt;, only it operates on types, not values. This is where the value of &lt;code&gt;as const&lt;/code&gt; will be more visible:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const tabs = ['Books', 'Movies', 'Laptops'];
type Tabs = typeof tabs; // Tabs will be string[];

const tabs = ['Books', 'Movies', 'Laptops'] as const;
type Tabs = typeof tabs; // Tabs will be ['Books' | 'Movies' | 'Laptops'];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Second, we need to extract &lt;code&gt;Tab&lt;/code&gt; type from the Tabs array. This trick is called &lt;a href="https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html"&gt;&lt;strong&gt;“indexed access”&lt;/strong&gt;&lt;/a&gt;, it’s a way to access types of properties or individual elements (if array) of another type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Tab = Tabs[number]; // Tab will be 'Books' | 'Movies' | 'Laptops'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Same trick will work with object types, for example we can extract Laptop’s id into its own type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type LaptopId = Laptop['id']; // LaptopId will be string
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, that we have a type for individual Tabs, we can use it to type our categories logic:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ySTyRutY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2honjrewwmwhin6d5tg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ySTyRutY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2honjrewwmwhin6d5tg.png" alt="Image description" width="880" height="406"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now all the typos or wrong values will be caught by typescript! 💥&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/eager-brook-vuj8d?file=/src/tabs.tsx"&gt;See full working example in the codesandbox&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-type-guards-and-is-operator"&gt;
  &lt;/a&gt;
  Bonus: type guards and “is” operator
&lt;/h2&gt;

&lt;p&gt;There is another very interesting thing you can do with type guards. Remember our &lt;code&gt;getStringFromValue&lt;/code&gt; function?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Base = { id: string } | string;

const getStringFromValue = &amp;lt;TValue extends Base&amp;gt;(value: TValue) =&amp;gt; {
  if (typeof value === 'string') {
    // here "value" will be the type of "string"
    return value;
  }

  // here "value" will be the type of "NOT string", in our case { id: string }
  return value.id;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While &lt;code&gt;if (typeof value === ‘string')&lt;/code&gt; check is okay for this simple example, in a real-world application you'd probably want to abstract it away into &lt;code&gt;isStringValue&lt;/code&gt;, and refactor the code to be something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Base = { id: string } | string;

const isStringValue = &amp;lt;TValue&amp;gt;(value: TValue) =&amp;gt; return typeof value === 'string';

const getStringFromValue = &amp;lt;TValue extends Base&amp;gt;(value: TValue) =&amp;gt; {
  if (isStringValue(value)) {
    // do something with the string
  }

  // do something with the object
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And again the same story as before, there is one problem with the most obvious solution: it’s not going to work. As soon as type guard condition is extracted into a function like that, it loses its type guarding capabilities. From typescript perspective, it’s now just a random function that returns a regular boolean value, it doesn’t know what’s inside. We’ll have this situation now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getStringFromValue = &amp;lt;TValue extends Base&amp;gt;(value: TValue) =&amp;gt; {
  if (isStringValue(value)) { // it's just a random function that returns boolean
    // type here will be unrestricted, either string or object
  }

  // type here will be unrestricted, either string or object
  // can't return "value.id" anymore, typescript will fail
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And again, there is a way to fix it by using yet another typescript concept known as &lt;a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates"&gt;&lt;strong&gt;“type predicates”&lt;/strong&gt;&lt;/a&gt;. Basically, it’s a way to manually do for the function what typescript was able to do by itself before refactoring. Looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type T = { id: string };
// can't extend Base here, typescript doesn't handle generics here well
export const isStringValue = &amp;lt;TValue extends T&amp;gt;(value: TValue | string): value is string =&amp;gt; {
  return typeof value === 'string';
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See the &lt;code&gt;value is string&lt;/code&gt; there? This is the predicate. The pattern is &lt;code&gt;argName is Type&lt;/code&gt;, it can be attached &lt;strong&gt;only&lt;/strong&gt; to a function with a single argument that returns a boolean value. This expression can be roughly translated into "when this function returns true, assume the value within your execution scope as &lt;code&gt;string&lt;/code&gt; type". So with the predicate, the refactoring will be complete and fully functioning:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type T = { id: string };
type Base = T | string;

export const isStringValue = &amp;lt;TValue extends T&amp;gt;(value: TValue | string): value is string =&amp;gt; {
  return typeof value === 'string';
};

const getStringFromValue = &amp;lt;TValue extends Base&amp;gt;(value: TValue) =&amp;gt; {
  if (isStringValue(value)) {
    // do something with the string
  }

  // do something with the object
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A pattern like this is especially useful when you have a possibility of different types of data in the same function and you need to do distinguish between them during runtime. In our case, we could define &lt;code&gt;isSomething&lt;/code&gt; function for every one of our data types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export type DataTypes = Book | Movie | Laptop | string;

export const isBook = (value: DataTypes): value is Book =&amp;gt; {
  return typeof value !== 'string' &amp;amp;&amp;amp; 'id' in value &amp;amp;&amp;amp; 'author' in value;
};
export const isMovie = (value: DataTypes): value is Movie =&amp;gt; {
  return typeof value !== 'string' &amp;amp;&amp;amp; 'id' in value &amp;amp;&amp;amp; 'releaseDate' in value &amp;amp;&amp;amp; 'title' in value;
};
export const isLaptop = (value: DataTypes): value is Laptop =&amp;gt; {
  return typeof value !== 'string' &amp;amp;&amp;amp; 'id' in value &amp;amp;&amp;amp; 'model' in value;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then implement a function that returns option labels for our selects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const formatLabel = (value: DataTypes) =&amp;gt; {
  // value will be always Book here since isBook has predicate attached
  if (isBook(value)) return value.author;

  // value will be always Movie here since isMovie has predicate attached
  if (isMovie(value)) return value.releaseDate;

  // value will be always Laptop here since isLaptop has predicate attached
  if (isLaptop(value)) return value.model;

  return value;
};

// somewhere in the render
&amp;lt;GenericSelect&amp;lt;Book&amp;gt; ... formatLabel={formatLabel} /&amp;gt;
&amp;lt;GenericSelect&amp;lt;Movie&amp;gt; ... formatLabel={formatLabel} /&amp;gt;
&amp;lt;GenericSelect&amp;lt;Laptop&amp;gt; ... formatLabel={formatLabel} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/immutable-wildflower-n4r8z?file=/src/tabs.tsx"&gt;see fully working example in the codesandbox&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time-for-goodbye"&gt;
  &lt;/a&gt;
  Time for goodbye
&lt;/h2&gt;

&lt;p&gt;It’s amazing, how many advanced typescript concepts we had to use to implement something as simple as a few selects! But it’s for the better typing world, so I think it’s worth it. Let’s recap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;“keyof”&lt;/strong&gt; - use it to generate types from keys of another type&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;“as const”&lt;/strong&gt; - use it to signal to typescript to treat an array or an object as a constant. Use it with combination with &lt;strong&gt;“type of”&lt;/strong&gt; to generate actual type from it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;“typeof”&lt;/strong&gt; - same as normal javascript &lt;code&gt;“typeof”&lt;/code&gt;, but operates on types rather than values&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Type['attr']&lt;/code&gt; or &lt;code&gt;Type[number]&lt;/code&gt; - those are &lt;strong&gt;indexed types&lt;/strong&gt;, use them to access subtypes in an Object or an Array respectively&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;argName is Type&lt;/code&gt; - &lt;strong&gt;type predicate&lt;/strong&gt;, use it to turn a function into a safeguard&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And now it’s time to build a better, typesafe future, and we’re ready for it!&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;Originally published at &lt;a href="https://www.developerway.com"&gt;https://www.developerway.com&lt;/a&gt;. Check out the website for more articles like this. Subscribe to the newsletter to get notified as soon as the next article comes out.&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Day 84/100 CSS Color</title>
      <author>Rio Cantre</author>
      <pubDate>Wed, 08 Dec 2021 17:58:12 +0000</pubDate>
      <link>https://dev.to/riocantre/day-84100-css-color-1dch</link>
      <guid>https://dev.to/riocantre/day-84100-css-color-1dch</guid>
      <description>&lt;p&gt;A variety of color selection, not only specify colors in general but evaluate the whole concept of color syntax and usage of mixtures in details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IILl55Sp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ykxrorp781ah5wulj1pc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IILl55Sp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ykxrorp781ah5wulj1pc.png" alt="banner" width="726" height="250"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Colors in CSS can be described in three different ways:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Named colors&lt;/em&gt; — English words that describe colors, also called &lt;em&gt;keyword colors&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;RGB&lt;/em&gt; — numeric values that describe a mix of red, green, and blue&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;HSL&lt;/em&gt; — numeric values that describe a mix of hue, saturation, and lightness&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#dog-years"&gt;
  &lt;/a&gt;
  Dog Years
&lt;/h2&gt;

&lt;p&gt;Dogs mature at a faster rate than human beings. We often say a dog’s age can be calculated in “dog years” to account for their growth compared to a human of the same age. In some ways we could say, time moves quickly for dogs — 8 years in a human’s life equates to 45 years in a dog’s life. How old would you be if you were a dog?&lt;/p&gt;

&lt;p&gt;Here’s how you convert your age from “human years” to “dog years”:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first two years of a dog’s life count as 10.5 dog years each.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each year following equates to 4 dog years.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#code-snippets"&gt;
  &lt;/a&gt;
  Code Snippets
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// current age
var myAge = 30;
// number of years
var earlyYears = 2;
earlyYears *= 10.5;

let laterYears = myAge - earlyYears;
laterYears *= 4;
let dogYear = laterYears * 4;
let myAgeInDogYears = earlyYears + laterYears;

let myName = 'Riolette'.toLowerCase();

console.log(earlyYears);
console.log(laterYears);
console.log(dogYear);
console.log(myAgeInDogYears);
console.log(myName);
console.log(`My name is ${myName}. I am ${myAge} years old in human years which is ${myAgeInDogYears} years old in dog years.`);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a11y-myths"&gt;
  &lt;/a&gt;
  a11y myths
&lt;/h2&gt;

&lt;p&gt;*&lt;em&gt;We can quickly add accessibility before the release *&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Won't work. Maybe easy things such as alternative text or form labeling may be added at the end, but some complex UX should be planned to be accessible. In some cases, making features accessible at the end of development process may require the full refactoring. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/newsletter/222-a-note-about-color-variables/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3DCVqqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stlk1tns4zh7robhiygt.png" alt="resource" width="726" height="78"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>css</category>
      <category>motivation</category>
    </item>
    <item>
      <title>⭐️ CodeCast's Coding Advent: Day Eight ⭐️</title>
      <author>CodeCast</author>
      <pubDate>Wed, 08 Dec 2021 17:53:30 +0000</pubDate>
      <link>https://dev.to/codecast/codecasts-coding-advent-day-eight-48ad</link>
      <guid>https://dev.to/codecast/codecasts-coding-advent-day-eight-48ad</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XV0gdZDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyzwc63909ehxvmh90bj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XV0gdZDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyzwc63909ehxvmh90bj.png" alt="Day 8" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-8"&gt;
  &lt;/a&gt;
  DAY 8
&lt;/h2&gt;

&lt;p&gt;On the eighth day of coding, we give to you...&lt;/p&gt;

&lt;p&gt;The first part of a 3-part series on React &amp;amp; Redux! It might not seem so festive but nothing says cheer like mastering a language!&lt;/p&gt;

&lt;p&gt;Checkout out the &lt;a href="https://www.codecast.io/casts/jZrpNPzNLo78-a-react-redux-beginner-s-project-pt-1"&gt;Cast&lt;/a&gt; by Ambassador &lt;a href="https://twitter.com/TironaCodes"&gt;Michael Tirona&lt;/a&gt; here!&lt;/p&gt;

&lt;p&gt;You can also be sure to follow us on &lt;a href="https://www.instagram.com/codecastapp/"&gt;Instagram&lt;/a&gt;, &lt;a href="https://twitter.com/CodeCastApp"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.facebook.com/codecastapp"&gt;Facebook&lt;/a&gt;, and &lt;a href="https://www.linkedin.com/company/code-cast/"&gt;LinkedIn&lt;/a&gt; to see our daily advent releases there!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Climatetech looking for a CTO</title>
      <author>adrien_climate</author>
      <pubDate>Wed, 08 Dec 2021 17:46:45 +0000</pubDate>
      <link>https://dev.to/adrienavril/climatetech-looking-for-a-cto-3j0d</link>
      <guid>https://dev.to/adrienavril/climatetech-looking-for-a-cto-3j0d</guid>
      <description>&lt;p&gt;Hello everyone, I'm Adrien (blue shirt), I'm looking at a CTO for our ClimateTech.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I'm the cofounder of adapt, a tool that helps our thousand of users to reduce the GHG emission of their energy consumption by visualising the "electricity weather forecast". Our users in Europe consume electricity wisely : they reduce consumption when carbon intensity is higher ("peak demand"), and they post pone some electricity consumption when carbon intensity is lower (e.g. "smartcharging of electric vehicles"). Our beta tool works with manual actions of our users, and we're automatising the process for significant electric uses (e.g. HVAC &amp;amp; EV charging) and GHG emissions reduction calculation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Our beta is available here: &lt;a href="https://dev.tourl"&gt;www.adapt.sh&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I started adapt with a friend of mine, working as part-time full stack developer, and we now have a junior full stack developer and some freelances. We have thousands of users and are working on some really interesting pilot projects with energy organisations. We're a non-profit and we're looking at a CTO willing to dedicate its coding skills to fighting climate change! Please send me an email at adrien [at] adapt.sh&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Our current tech FYI: Languages: css (especially twitter bootstrap 4), javascript (very little...), php 7.x ; Framework: symfony 4.x ; Web hosting: docker (local), AWS elasticbeanstalk (production)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks in advance!&lt;/p&gt;

</description>
      <category>php</category>
      <category>career</category>
      <category>startup</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Mocking the AWS SDK With Go</title>
      <author>Daniel Quackenbush</author>
      <pubDate>Wed, 08 Dec 2021 17:22:35 +0000</pubDate>
      <link>https://dev.to/danquack/mocking-the-aws-sdk-with-go-44hi</link>
      <guid>https://dev.to/danquack/mocking-the-aws-sdk-with-go-44hi</guid>
      <description>&lt;p&gt;Mocking a client library is a common technique when building test-driven development. In golang, this can be done by creating structs that implement interfaces and then override the methods you are trying to mock. This example of mocking can be done with any method, but for this post, I will use AWS Organizations to demonstrate.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation-code"&gt;
  &lt;/a&gt;
  Implementation Code
&lt;/h3&gt;

&lt;p&gt;First, we want to create a struct that will be used as the methods' instance. As you see below, we are going to implement the interface of the SDK provided organizations API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Organizations&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="n"&gt;organizationsiface&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrganizationsAPI&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then once we have defined that, we will have to instantiate the method we want to implement, which for the main implementation will be a pass-through for the method used by the client.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Organizations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ListAccounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;organizations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListAccountsInput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;organizations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListAccountsOutput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListAccounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally, we will want to create a method we will test. We must parameterize the struct to help our test define which method to use.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;WhatAreMyAccounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Organizations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;organizations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListAccountsOutput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListAccounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;organizations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListAccountsInput&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;MaxResults&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Int64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;NextToken&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#test-code"&gt;
  &lt;/a&gt;
  Test Code
&lt;/h3&gt;

&lt;p&gt;For testing, we will create our Mock struct, followed by our method override, and then wrap that within a given test. The MockOrganization struct will implement an interface, which we can later utilize as the organization's client.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;MockedOrganizations&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;organizationsiface&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrganizationsAPI&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;For the test, we want to guarantee a response. Therefore, we will define a separate implementation of the organization interface, of which we will return a constant value for the test suite.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;MockedOrganizations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ListAccounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;organizations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListAccountsInput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;organizations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListAccountsOutput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;organizations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListAccountsOutput&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Accounts&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;organizations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Arn&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test1@example.com"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"234567890"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test-1"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Arn&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test2@example.com"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"123456789"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test-2"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;On the test code, by using our mocked interface, we can create an Organizations object. The application's function then calls our mocked response to yield the result to test.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestListAccounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Organizations&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;MockedOrganizations&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;WhatAreMyAccounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Accounts&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜  main go &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;span class="o"&gt;===&lt;/span&gt; RUN   TestListAccounts
&lt;span class="nt"&gt;---&lt;/span&gt; PASS: TestListAccounts &lt;span class="o"&gt;(&lt;/span&gt;0.00s&lt;span class="o"&gt;)&lt;/span&gt;
PASS
ok      main/cmd/main   0.117s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To see the full code, check out the below gists:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



</description>
      <category>mock</category>
      <category>go</category>
      <category>aws</category>
    </item>
    <item>
      <title>Looking for a remote job?</title>
      <author>Bryan</author>
      <pubDate>Wed, 08 Dec 2021 16:51:28 +0000</pubDate>
      <link>https://dev.to/bryanellis95/looking-for-a-remote-job-138c</link>
      <guid>https://dev.to/bryanellis95/looking-for-a-remote-job-138c</guid>
      <description>&lt;p&gt;Well we have some news for you! Today, we launched &lt;a href="https://www.remotestartup.io/"&gt;RemoteStartup&lt;/a&gt; a new platform to list your jobs, view jobs &amp;amp; apply and by far the coolest feature, our in-house chat system that notifies you anytime either side sends a message! That's right, apply for a job and instantly come in communication with the job poster! Of course, if you're listing a job you can just paste your link in there too and we will handle getting applicants to that link. The even better part is that listings are about 50% cheaper than other remote job sites and we give more features to our users. But wait! theres more, we are also contributing to stripe climate on every purchase made! &lt;/p&gt;

&lt;p&gt;Check us out and let me know if there are any questions!&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>career</category>
      <category>watercooler</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Artificial Intelligence Tutorial: What is AI? Basics for Beginners - Advance</title>
      <author>Coderzway</author>
      <pubDate>Wed, 08 Dec 2021 16:48:45 +0000</pubDate>
      <link>https://dev.to/huugg/artificial-intelligence-tutorial-what-is-ai-basics-for-beginners-advance-31la</link>
      <guid>https://dev.to/huugg/artificial-intelligence-tutorial-what-is-ai-basics-for-beginners-advance-31la</guid>
      <description>&lt;p&gt;This tutorial provides introductory knowledge on Artificial Intelligence. It would come to a great help if you are about to select Artificial Intelligence as a course subject. You can briefly know about the areas of AI in which research is prospering.&lt;/p&gt;

&lt;h1&gt;Audience&lt;/h1&gt;

&lt;p&gt;This tutorial is prepared for the students at beginner level who aspire to learn Artificial Intelligence.&lt;/p&gt;

&lt;h1&gt;Prerequisites&lt;/h1&gt;

&lt;p&gt;The basic knowledge of Computer Science is mandatory. The knowledge of Mathematics, Languages, Science, Mechanical or Electrical engineering is a plus. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read More: &lt;a href="https://www.codelivly.com/what-is-ai-artificial-intelligence-tutorial-basics-for-beginners/" rel="noreferrer noopener"&gt;Artificial Intelligence Tutorial: What is AI? Basics for Beginners - Advance&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How i plan to maximise my learning to improve my skills</title>
      <author>ifrah</author>
      <pubDate>Wed, 08 Dec 2021 16:48:29 +0000</pubDate>
      <link>https://dev.to/ifrah/how-i-plan-to-maximise-my-learning-to-improve-my-skills-3gh4</link>
      <guid>https://dev.to/ifrah/how-i-plan-to-maximise-my-learning-to-improve-my-skills-3gh4</guid>
      <description>&lt;p&gt;I have recently completed my professional development plan and have come up with a few different ways to maximise my learning to reach my goals. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keep-practising-even-if-i-think-i-have-perfected-it"&gt;
  &lt;/a&gt;
  Keep practising even if I think I have perfected it!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jte7ZkGY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zlyt3vpqgq2mgr281ns.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jte7ZkGY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zlyt3vpqgq2mgr281ns.jpg" alt="Image description" width="880" height="586"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learning a topic or process may be easy, but it is just as easy to forget it in a couple of weeks if not put into practice.  I think the easiest way to keep on practising is to have a structure to follow instead of working out of my head from scratch. I have found a few challenges listed below which i am going to attempt to try at some point to keep practising my skills.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://100dayscss.com/"&gt;100 days of css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dailyui.co/"&gt;Daily UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/javascript-practical-coding-challenges-for-beginners-4bq3ugr"&gt;JavaScript Challenges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#teaching-someone-else-to-help-improve-my-understanding"&gt;
  &lt;/a&gt;
  Teaching someone else to help improve my understanding.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g6dTMc_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aglci21vx2ea50rkuw8f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g6dTMc_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aglci21vx2ea50rkuw8f.jpg" alt="Image description" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once I think I have an in-depth understanding of a topic. I think a great to cement it is to teach or collaborate with others. This will also help me to improve my communication and teamwork skills. This method is often referred to as the protégé effect. It has ben proven to  improves your learning process by increasing your metacognitive processing, increasing your use of effective learning strategies, increasing your motivation to learn the material, and increasing your feelings of competence and autonomy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#figure-out-what-time-management-system-works-best-for-me"&gt;
  &lt;/a&gt;
  Figure out what time management system works best for me
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VSzoSKO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjzqdrketwkv0bzqd1k4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VSzoSKO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjzqdrketwkv0bzqd1k4.jpg" alt="Image description" width="880" height="732"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many different learning methods out there and have yet to find the perfect one for me. I am going to try some of the few listed below to see what works best. Doing this will hopefully help me maximise my learning my using my time effectively. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.themuse.com/advice/take-it-from-someone-who-hates-productivity-hacksthe-pomodoro-technique-actually-works"&gt;Pomodoro Technique&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.projectsmart.co.uk/pareto-principle/pareto-analysis-step-by-step.php"&gt;Pareto Analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.eisenhower.me/eisenhower-matrix/"&gt;Eisenhower Matrix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Git Cheat Sheet- 20 commands I Use Everyday</title>
      <author>Coderzway</author>
      <pubDate>Wed, 08 Dec 2021 16:43:18 +0000</pubDate>
      <link>https://dev.to/huugg/git-cheat-sheet-20-commands-i-use-everyday-afg</link>
      <guid>https://dev.to/huugg/git-cheat-sheet-20-commands-i-use-everyday-afg</guid>
      <description>&lt;p&gt;Hey Coders!&lt;br&gt;When I started coding, tracking changes in my codes was always painful and the fear of losing files was always there. But now we have Git to tackle these problems, it has everything you need to make your coding environment safe and easy. Git is so important for every programmer's daily life especially when you are working with a team. The software industry widely uses it but mastering all the commands can take time, so keep practising! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read More&lt;/strong&gt;: &lt;strong&gt;&lt;span&gt;&lt;a href="https://www.codelivly.com/git-cheat-sheet-20-commands-i-use-everyday/" rel="noreferrer noopener"&gt;Git Cheat Sheet- 20 commands I Use Everyday&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Build a Dynamic REST API with Custom Functions</title>
      <author>Terra Roush</author>
      <pubDate>Wed, 08 Dec 2021 16:21:44 +0000</pubDate>
      <link>https://dev.to/terra_roush/build-a-dynamic-rest-api-with-custom-functions-54k5</link>
      <guid>https://dev.to/terra_roush/build-a-dynamic-rest-api-with-custom-functions-54k5</guid>
      <description>&lt;p&gt;I’m a new software developer here at HarperDB. So like many of you visiting the blog, I’ve got fresh eyes on this product. Two weeks ago, my sights were set on HarperDB’s newest feature, Custom Functions. My task was to create a plug-and-play REST API template with our Custom Functions. As you read this I hope you’ll feel confident to follow along, and after some practice implement this into your next project!&lt;/p&gt;

&lt;p&gt;So what are Custom Functions?&lt;/p&gt;

&lt;p&gt;Simply put, Custom Functions (CF) are serverless, highly customizable API endpoints that interact with our HarperDB Core operations, such as “insert”, “search_by_hash”, “update”, and &lt;a href="https://api.harperdb.io/"&gt;&lt;strong&gt;more&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You could define a CF using SQL to return all dog data records where the owner’s name is “Geena Davis” and sort them by the dog’s name. You can create a CF that deletes a dog’s data record using a route parameter and NoSQL. You can also make a CF with validation that saves a dog’s record with required properties. Custom Functions are powered by Fastify and are extremely flexible. To see possibilities, check out their &lt;a href="https://www.fastify.io/docs/latest/Routes/#routes-options"&gt;&lt;strong&gt;docs&lt;/strong&gt;&lt;/a&gt; on routes.&lt;/p&gt;

&lt;p&gt;Here’s a simple CF that gets a data record from the database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L0J4LvFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upz2f0diy5kvhtfdcmmm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L0J4LvFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upz2f0diy5kvhtfdcmmm.png" alt="Image description" width="880" height="292"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YF3neVM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mswy349bg63202l638fh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YF3neVM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mswy349bg63202l638fh.png" alt="Image description" width="880" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gByUFL_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f53gx1tzht0p9qn9oi41.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gByUFL_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f53gx1tzht0p9qn9oi41.png" alt="Image description" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And what about REST?&lt;/p&gt;

&lt;p&gt;You’re probably familiar with a REST API. This is an application programming interface that conforms to the constraints of REST architecture and allows for interaction with RESTful web services. They are flexible, scalable, and efficient. RESTful APIs utilize four common HTTP methods: POST, GET, PUT, and DELETE, which correspond with CRUD functionality: create, read, update, and delete.&lt;/p&gt;

&lt;p&gt;So why am I combining the two?&lt;/p&gt;

&lt;p&gt;A REST API and HarperDB’s Custom Functions combine to make development easy and performance fast. A large aim of HarperDB is to collapse the stack. Traditionally you would need a server running a REST application and a server that runs the database. In this case, you’re only running HarperDB, hence, collapsing the stack. &lt;/p&gt;

&lt;p&gt;To the task at hand: build a dynamic REST API with Custom Functions.&lt;/p&gt;

&lt;p&gt;I’ll describe what I’ve built first, and then I’ll show how you can use it for your own devices. Instead of going one by one through the routes, I’ll highlight the POST for its simplicity and the PUT for its complexity. All routes can be viewed in the &lt;a href="https://github.com/HarperDB/hdb-cf-rest"&gt;&lt;strong&gt;repo&lt;/strong&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;For this project, the routes have a URL, an HTTP method, and a handler. The handlers have access to hdbCore and I’m using its requestWithoutAuthentication method for simplicity’s sake. In defining routes, I specified a dynamic URL to satisfy a plug-and-play approach. As for HTTP methods, I wanted to make endpoints for standard CRUD so in routes/index.js I built two GET routes (get one and get all), a POST, a PUT, a PATCH, and a DELETE. I included a PUT and a PATCH as they both have their advantages. The PUT updates by replacing an entire record, and PATCH only updates any given values. With that said, the GET, POST, and DELETE aligned beautifully with HarperDB, and the PUT and PATCH required a bit of finessing. In general, the handlers connect the request to hdbCore using a specified HarperDB operation, they utilize route parameters to access the correct data, and they return a response. I’ve chosen to mostly use NoSQL operations, as they work lightning fast with HDB, although you may use SQL as well. &lt;/p&gt;

&lt;p&gt;Here’s what the dynamic POST Custom Function looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LWtWuZiL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0f2g4w41rrpij4o5rdk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LWtWuZiL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0f2g4w41rrpij4o5rdk.png" alt="Image description" width="880" height="262"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QCkJurR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7v0jja92t5mqodrd0se.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QCkJurR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7v0jja92t5mqodrd0se.png" alt="Image description" width="880" height="467"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ND4X9Zha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnbd7oh1u4j5g30fsy5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ND4X9Zha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnbd7oh1u4j5g30fsy5x.png" alt="Image description" width="880" height="580"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The POST is pretty simple. It uses the “insert” HDB Core operation, gets schema and table from the request route parameters, and the record sent along with is provided in the request body. An example of what that might look like is provided with the Postman screenshot. The GETs and the DELETE follow the same pattern of simplicity, although use different operations.&lt;/p&gt;

&lt;p&gt;And what about the routes that needed more finesse?&lt;/p&gt;

&lt;p&gt;In order for the PUT to perform as expected, any given attribute in the request body object will be updated, and any left out attribute will be null. Herein required getting all attributes on the table, done so with an HDB Core operation, “describe_table.” Once that was attained, each attribute of the table was iterated to assign a null value for any attribute that was left out of the request body object. HDB assigned attributes “&lt;strong&gt;createdtime&lt;/strong&gt;” and “&lt;strong&gt;updatedtime&lt;/strong&gt;” are skipped to maintain their values. And finally, a second HDB Core operation is performed within putHandler.js. This one is “update.” A variable, “put_query_body” has all needed attributes, either assigned through the request body, or made null, and it has the correct unique identifier, the hash_attribute from route params. This is provided to records to perform the update.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---2nQyChU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4pm9cd3i2hw0bioidiu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---2nQyChU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4pm9cd3i2hw0bioidiu.png" alt="Image description" width="880" height="229"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VILCrQ4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbyype9ger1r4d8zkjac.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VILCrQ4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbyype9ger1r4d8zkjac.png" alt="Image description" width="880" height="951"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s what that means for your data:&lt;/p&gt;

&lt;p&gt;Let’s say the table in question is “dog”, and it has “dog_name”, “age”, “weight_lbs”, and “owner_name” attributes. Below is the record to be updated:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9v-GdRq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/al3olb9i2innam3lzjpj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9v-GdRq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/al3olb9i2innam3lzjpj.png" alt="Image description" width="486" height="278"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To update the record with PUT, you’d provide this in the request body:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Su-Zgwpg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2axivd8ms0su5b34rwqj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Su-Zgwpg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2axivd8ms0su5b34rwqj.png" alt="Image description" width="374" height="36"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your record will be completely replaced with the provided values and it will replace weight, and owner_name with null. This is the desired behavior of a PUT request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9v1MwLD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/feppow8uxlrh7tbvcxhf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9v1MwLD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/feppow8uxlrh7tbvcxhf.png" alt="Image description" width="466" height="274"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;A few words on the PATCH...The PATCH is very similar in terms of logic and code. The difference being that there’s no need to nullify any attributes. I still needed to get the attributes from the table with HDB Core to get the hash_attribute and then assign the route param. And finally to send a record object along with the update call to HDB Core. With the PATCH, all that needs updating is what’s provided in the request body. Using the example above, the same beginning record, and the same request body, the PATCH updated record would be:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VUPeX9Cs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9v1gp2nvq0kc0bepjysz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUPeX9Cs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9v1gp2nvq0kc0bepjysz.png" alt="Image description" width="464" height="274"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How can you use this dynamic REST API Custom Functions template?&lt;/p&gt;

&lt;p&gt;To use this template, you'll need to be logged in, running HarperDB, have a local instance, and have some data to work with. If you don’t, please follow the steps below. I recommend following &lt;a href="https://www.youtube.com/watch?v=fAKZxK-XamM"&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/a&gt; video (from the beginning until about 4:30) to get you through 1-3. I recommend &lt;a href="https://www.youtube.com/watch?v=rz6prItVJZU"&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/a&gt; demo video if you’d like a visual aid for steps 4 and 5 (pick up around 13:00 until about 15:00).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;strong&gt;Sign up/log in &lt;a href="https://studio.harperdb.io/sign-up"&gt;here&lt;/a&gt;&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Install and run HarperDB &lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Create a local instance (in Studio) &lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Build some demo data (in Studio) &lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Enable Custom Functions (in Studio) &lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Clone this Custom Functions template and party! (open in IDE) &lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, if you’ve been following along you will have gotten some familiarity with HarperDB Studio. It’s super easy to use and is a great tool for working with the core product. From here on, it’s great to open your Custom Functions project in your favorite IDE, like WebStorm. The “custom_functions” folder lives in the “hdb” folder. Any project you create in Custom Functions lives here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;      &lt;strong&gt;Test your endpoints with Postman &lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The repository includes a Postman collection, which will allow you to test the endpoints against your data. As the REST API template was dynamic, so are the URLs in the Postman collection. Here's a &lt;a href="https://identity.getpostman.com/login?continue=https%3A%2F%2Fgo.postman.co%2Fworkspace%2FMy-Workspace~58429cc6-621f-475d-8f01-b3cdfe0c9dd6%2Fenvironment%2F18074441-ed8f2c6b-63dd-4121-a71d-178ec5206cd0"&gt;&lt;strong&gt;link&lt;/strong&gt;&lt;/a&gt; to this project's environment variables. You will likely need to change some values to fit your project. You may also choose to hard-code the route for your needs, (ex: &lt;a href="http://localhost:9926/project/schema/table"&gt;http://localhost:9926/project/schema/table&lt;/a&gt; plus any necessary route parameter such as "id".)&lt;/p&gt;

&lt;p&gt;Reflection and/or TL;DR&lt;/p&gt;

&lt;p&gt;I made a dynamic REST API using HarperDB’s Custom Functions for developers to implement in their projects. The combination of a REST API and HarperDB reduces the number of servers needed, collapsing the stack, making your project just that much faster!&lt;/p&gt;

</description>
      <category>database</category>
      <category>javascript</category>
      <category>node</category>
      <category>serverless</category>
    </item>
  </channel>
</rss>
